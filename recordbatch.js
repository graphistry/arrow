"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("./type");
const vector_1 = require("./vector");
const data_1 = require("./data");
class RecordBatch extends vector_1.StructVector {
    static from(vectors) {
        return new RecordBatch(type_1.Schema.from(vectors), Math.max(...vectors.map((v) => v.length)), vectors);
    }
    constructor(...args) {
        if (typeof args[1] !== 'number') {
            const data = args[1];
            super(data, args[2]);
            this.schema = args[0];
            this.length = data.length;
        }
        else {
            const [schema, numRows, cols] = args;
            const childData = new Array(cols.length);
            for (let index = -1, length = cols.length; ++index < length;) {
                const col = cols[index];
                childData[index] = col instanceof vector_1.Vector ? col.data : col;
            }
            super(new data_1.NestedData(new type_1.Struct(schema.fields), numRows, null, childData));
            this.schema = schema;
            this.length = numRows;
        }
        this.numCols = this.schema.fields.length;
    }
    clone(data, view = this.view.clone(data)) {
        return new RecordBatch(this.schema, data, view);
    }
    select(...columnNames) {
        const fields = this.schema.fields;
        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));
        return new RecordBatch(this.schema.select(...columnNames), this.length, this.childData.filter((_, i) => namesToKeep[fields[i].name]));
    }
}
exports.RecordBatch = RecordBatch;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFXLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM3RixNQUFNLENBQUMsSUFBSSxXQUFXLENBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFDL0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQy9ELENBQUM7SUFDTixDQUFDO0NBQ0o7QUExQ0Qsa0NBMENDIiwiZmlsZSI6InJlY29yZGJhdGNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFNjaGVtYSwgU3RydWN0IH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IGZsYXRidWZmZXJzIH0gZnJvbSAnZmxhdGJ1ZmZlcnMnO1xuaW1wb3J0IHsgVmlldywgVmVjdG9yLCBTdHJ1Y3RWZWN0b3IgfSBmcm9tICcuL3ZlY3Rvcic7XG5pbXBvcnQgeyBEYXRhLCBOZXN0ZWREYXRhIH0gZnJvbSAnLi9kYXRhJztcblxuaW1wb3J0IExvbmcgPSBmbGF0YnVmZmVycy5Mb25nO1xuXG5leHBvcnQgY2xhc3MgUmVjb3JkQmF0Y2ggZXh0ZW5kcyBTdHJ1Y3RWZWN0b3Ige1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbSh2ZWN0b3JzOiBWZWN0b3JbXSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlY29yZEJhdGNoKFNjaGVtYS5mcm9tKHZlY3RvcnMpLFxuICAgICAgICAgICAgTWF0aC5tYXgoLi4udmVjdG9ycy5tYXAoKHYpID0+IHYubGVuZ3RoKSksXG4gICAgICAgICAgICB2ZWN0b3JzXG4gICAgICAgICk7XG4gICAgfVxuICAgIHB1YmxpYyByZWFkb25seSBzY2hlbWE6IFNjaGVtYTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbGVuZ3RoOiBudW1iZXI7XG4gICAgcHVibGljIHJlYWRvbmx5IG51bUNvbHM6IG51bWJlcjtcbiAgICBjb25zdHJ1Y3RvcihzY2hlbWE6IFNjaGVtYSwgZGF0YTogRGF0YTxTdHJ1Y3Q+LCB2aWV3OiBWaWV3PFN0cnVjdD4pO1xuICAgIGNvbnN0cnVjdG9yKHNjaGVtYTogU2NoZW1hLCBudW1Sb3dzOiBMb25nIHwgbnVtYmVyLCBjb2xzOiBEYXRhPGFueT4gfCBWZWN0b3JbXSk7XG4gICAgY29uc3RydWN0b3IoLi4uYXJnczogYW55W10pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGFyZ3NbMV0gYXMgRGF0YTxTdHJ1Y3Q+O1xuICAgICAgICAgICAgc3VwZXIoZGF0YSwgYXJnc1syXSk7XG4gICAgICAgICAgICB0aGlzLnNjaGVtYSA9IGFyZ3NbMF07XG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgW3NjaGVtYSwgbnVtUm93cywgY29sc10gPSBhcmdzO1xuICAgICAgICAgICAgY29uc3QgY2hpbGREYXRhOiBEYXRhPGFueT5bXSA9IG5ldyBBcnJheShjb2xzLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IC0xLCBsZW5ndGggPSBjb2xzLmxlbmd0aDsgKytpbmRleCA8IGxlbmd0aDspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2w6IERhdGE8YW55PiB8IFZlY3RvciA9IGNvbHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGNoaWxkRGF0YVtpbmRleF0gPSBjb2wgaW5zdGFuY2VvZiBWZWN0b3IgPyBjb2wuZGF0YSA6IGNvbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1cGVyKG5ldyBOZXN0ZWREYXRhKG5ldyBTdHJ1Y3Qoc2NoZW1hLmZpZWxkcyksIG51bVJvd3MsIG51bGwsIGNoaWxkRGF0YSkpO1xuICAgICAgICAgICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IG51bVJvd3M7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5udW1Db2xzID0gdGhpcy5zY2hlbWEuZmllbGRzLmxlbmd0aDtcbiAgICB9XG4gICAgcHVibGljIGNsb25lPFIgZXh0ZW5kcyBTdHJ1Y3Q+KGRhdGE6IERhdGE8Uj4sIHZpZXc6IFZpZXc8Uj4gPSB0aGlzLnZpZXcuY2xvbmUoZGF0YSkpOiB0aGlzIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvcmRCYXRjaCh0aGlzLnNjaGVtYSwgZGF0YSBhcyBhbnksIHZpZXcpIGFzIGFueTtcbiAgICB9XG4gICAgcHVibGljIHNlbGVjdCguLi5jb2x1bW5OYW1lczogc3RyaW5nW10pIHtcbiAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy5zY2hlbWEuZmllbGRzO1xuICAgICAgICBjb25zdCBuYW1lc1RvS2VlcCA9IGNvbHVtbk5hbWVzLnJlZHVjZSgoeHMsIHgpID0+ICh4c1t4XSA9IHRydWUpICYmIHhzLCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvcmRCYXRjaChcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hLnNlbGVjdCguLi5jb2x1bW5OYW1lcyksIHRoaXMubGVuZ3RoLFxuICAgICAgICAgICAgdGhpcy5jaGlsZERhdGEuZmlsdGVyKChfLCBpKSA9PiBuYW1lc1RvS2VlcFtmaWVsZHNbaV0ubmFtZV0pXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19
