"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("./type");
const vector_1 = require("./vector");
const data_1 = require("./data");
class RecordBatch extends vector_1.StructVector {
    static from(vectors) {
        return new RecordBatch(type_1.Schema.from(vectors), Math.max(...vectors.map((v) => v.length)), vectors);
    }
    constructor(...args) {
        if (typeof args[1] !== 'number') {
            const data = args[1];
            super(data, args[2]);
            this.schema = args[0];
            this.numRows = data.length;
            this.numCols = this.schema.fields.length;
            this.columns = data instanceof data_1.ChunkedData
                ? data.childVectors
                : data.childData.map((col) => vector_1.Vector.create(col));
        }
        else {
            const [schema, numRows, cols] = args;
            const columns = new Array(cols.length);
            const columnsData = new Array(cols.length);
            for (let index = -1, length = cols.length; ++index < length;) {
                const col = cols[index];
                if (col instanceof vector_1.Vector) {
                    columnsData[index] = (columns[index] = col).data;
                }
                else {
                    columns[index] = vector_1.Vector.create(columnsData[index] = col);
                }
            }
            super(new data_1.NestedData(new type_1.Struct(schema.fields), numRows, null, columnsData));
            this.schema = schema;
            this.columns = columns;
            this.numRows = numRows;
            this.numCols = schema.fields.length;
        }
    }
    clone(data, view = this.view.clone(data)) {
        return new RecordBatch(this.schema, data, view);
    }
    select(...columnNames) {
        const fields = this.schema.fields;
        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));
        return new RecordBatch(this.schema.select(...columnNames), this.numRows, this.columns.filter((_, index) => namesToKeep[fields[index].name]));
    }
}
exports.RecordBatch = RecordBatch;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
