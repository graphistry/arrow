"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const data_1 = require("./data");
const table_1 = require("./table");
const schema_1 = require("./schema");
const type_1 = require("./type");
const chunked_1 = require("./vector/chunked");
const struct_1 = require("./vector/struct");
const recordbatch_1 = require("./util/recordbatch");
class RecordBatch extends struct_1.StructVector {
    constructor(...args) {
        let data;
        let schema = args[0];
        let children;
        if (args[1] instanceof data_1.Data) {
            [, data, children] = args;
        }
        else {
            const fields = schema.fields;
            const [, length, childData] = args;
            data = data_1.Data.Struct(new type_1.Struct(fields), 0, length, 0, null, childData);
        }
        super(data, children);
        this._schema = schema;
    }
    /** @nocollapse */
    static from(chunks, names = []) {
        const schema = schema_1.Schema.from(chunks, names);
        const length = chunks.reduce((l, c) => Math.max(l, c.length), 0);
        const children = chunks.map((x) => x instanceof data_1.Data ? x : x.data);
        return new RecordBatch(schema, length, recordbatch_1.alignChunkLengths(schema, children, length));
    }
    clone(data, children = this._children) {
        return new RecordBatch(this._schema, data, children);
    }
    concat(...others) {
        const schema = this._schema, chunks = chunked_1.Chunked.flatten(this, ...others);
        return new table_1.Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));
    }
    get schema() { return this._schema; }
    get numCols() { return this._schema.fields.length; }
    select(...columnNames) {
        const fields = this._schema.fields;
        const schema = this._schema.select(...columnNames);
        const childNames = columnNames.reduce((xs, x) => (xs[x] = true) && xs, {});
        const childData = this.data.childData.filter((_, i) => childNames[fields[i].name]);
        const structData = data_1.Data.Struct(new type_1.Struct(schema.fields), 0, this.length, 0, null, childData);
        return new RecordBatch(schema, structData);
    }
    selectAt(...columnIndices) {
        const schema = this._schema.selectAt(...columnIndices);
        const children = columnIndices.map((i) => this.data.childData[i]);
        return new RecordBatch(schema, this.length, children);
    }
}
exports.RecordBatch = RecordBatch;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
