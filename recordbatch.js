"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const data_1 = require("./data");
const vector_1 = require("./vector");
const schema_1 = require("./schema");
const type_1 = require("./type");
const struct_1 = require("./vector/struct");
class RecordBatch extends vector_1.Vector {
    constructor(...args) {
        super();
        this._schema = args[0];
        let data;
        let children;
        if (typeof args[1] === 'number') {
            const fields = this.schema.fields;
            const [, numRows, childData] = args;
            data = data_1.Data.Struct(new type_1.Struct(fields), 0, numRows, 0, null, childData);
        }
        else {
            [, data, children] = args;
        }
        this.impl = new struct_1.StructVector(data, children);
    }
    /** @nocollapse */
    static from(vectors, names = []) {
        return new RecordBatch(schema_1.Schema.from(vectors, names), vectors.reduce((len, vec) => Math.max(len, vec.length), 0), vectors);
    }
    clone(data, children = this.impl.children) {
        return new RecordBatch(this.schema, data, children);
    }
    get schema() { return this._schema; }
    get data() { return this.impl.data; }
    get type() { return this.impl.type; }
    get typeId() { return this.impl.typeId; }
    get length() { return this.impl.length; }
    get stride() { return this.impl.stride; }
    get numCols() { return this.schema.fields.length; }
    get rowProxy() { return this.impl.rowProxy; }
    get nullCount() { return this.impl.nullCount; }
    get numChildren() { return this.impl.numChildren; }
    get ArrayType() { return this.impl.ArrayType; }
    get(index) {
        return this.impl.get(index);
    }
    set(index, value) {
        this.impl.set(index, value);
    }
    isValid(index) { return this.impl.isValid(index); }
    indexOf(value, fromIndex) { return this.impl.indexOf(value, fromIndex); }
    toArray() { return this.impl.toArray(); }
    [Symbol.iterator]() { return this.impl[Symbol.iterator](); }
    slice(begin, end) {
        const { length, childData } = this.impl.slice(begin, end).data;
        return new RecordBatch(this.schema, length, childData);
    }
    concat(...others) {
        return this.impl.concat(...others.map((x) => x instanceof RecordBatch ? x.impl : x));
    }
    getChildAt(index) { return this.impl.getChildAt(index); }
    select(...columnNames) {
        const fields = this.schema.fields;
        const schema = this.schema.select(...columnNames);
        const childNames = columnNames.reduce((xs, x) => (xs[x] = true) && xs, {});
        const childData = this.data.childData.filter((_, i) => childNames[fields[i].name]);
        const structData = data_1.Data.Struct(new type_1.Struct(schema.fields), 0, this.length, 0, null, childData);
        return new RecordBatch(schema, structData);
    }
}
exports.RecordBatch = RecordBatch;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
