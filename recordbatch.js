"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("./type");
const vector_1 = require("./vector");
const data_1 = require("./data");
const node_1 = require("./util/node");
const pretty_1 = require("./util/pretty");
class RecordBatch extends vector_1.StructVector {
    static from(vectors) {
        return new RecordBatch(type_1.Schema.from(vectors), Math.max(...vectors.map((v) => v.length)), vectors);
    }
    constructor(...args) {
        if (typeof args[1] !== 'number') {
            const data = args[1];
            super(data, args[2]);
            this.schema = args[0];
            this.length = data.length;
        }
        else {
            const [schema, numRows, cols] = args;
            const childData = new Array(cols.length);
            for (let index = -1, length = cols.length; ++index < length;) {
                const col = cols[index];
                childData[index] = col instanceof vector_1.Vector ? col.data : col;
            }
            super(new data_1.NestedData(new type_1.Struct(schema.fields), numRows, null, childData));
            this.schema = schema;
            this.length = numRows;
        }
        this.numCols = this.schema.fields.length;
    }
    clone(data, view = this.view.clone(data)) {
        return new RecordBatch(this.schema, data, view);
    }
    getChildAt(index) {
        return index < 0 || index >= this.numCols ? null : super.getChildAt(index);
    }
    select(...columnNames) {
        const fields = this.schema.fields;
        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));
        return new RecordBatch(this.schema.select(...columnNames), this.length, this.childData.filter((_, i) => namesToKeep[fields[i].name]));
    }
    rowsToString(separator = ' | ', rowOffset = 0, maxColumnWidths = []) {
        return new node_1.PipeIterator(recordBatchRowsToString(this, separator, rowOffset, maxColumnWidths), 'utf8');
    }
}
exports.RecordBatch = RecordBatch;
function* recordBatchRowsToString(recordBatch, separator = ' | ', rowOffset = 0, maxColumnWidths = []) {
    const fields = recordBatch.schema.fields;
    const header = ['row_id', ...fields.map((f) => `${f}`)].map(pretty_1.valueToString);
    header.forEach((x, i) => {
        maxColumnWidths[i] = Math.max(maxColumnWidths[i] || 0, x.length);
    });
    // Pass one to convert to strings and count max column widths
    for (let i = -1, n = recordBatch.length - 1; ++i < n;) {
        let val, row = [rowOffset + i, ...recordBatch.get(i)];
        for (let j = -1, k = row.length; ++j < k;) {
            val = pretty_1.valueToString(row[j]);
            maxColumnWidths[j] = Math.max(maxColumnWidths[j] || 0, val.length);
        }
    }
    for (let i = -1; ++i < recordBatch.length;) {
        if ((rowOffset + i) % 1000 === 0) {
            yield header.map((x, j) => pretty_1.leftPad(x, ' ', maxColumnWidths[j])).join(separator);
        }
        yield [rowOffset + i, ...recordBatch.get(i)]
            .map((x) => pretty_1.valueToString(x))
            .map((x, j) => pretty_1.leftPad(x, ' ', maxColumnWidths[j]))
            .join(separator);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
