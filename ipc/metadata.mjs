// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* tslint:disable:class-name */
import { MessageHeader } from '../type';
export class Footer {
    constructor(dictionaryBatches, recordBatches, schema) {
        this.dictionaryBatches = dictionaryBatches;
        this.recordBatches = recordBatches;
        this.schema = schema;
    }
}
export class FileBlock {
    constructor(metaDataLength, bodyLength, offset) {
        this.metaDataLength = metaDataLength;
        this.offset = typeof offset === 'number' ? offset : offset.low;
        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
    }
}
export class Message {
    constructor(version, bodyLength, headerType) {
        this.version = version;
        this.headerType = headerType;
        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
    }
    static isSchema(m) { return m.headerType === MessageHeader.Schema; }
    static isRecordBatch(m) { return m.headerType === MessageHeader.RecordBatch; }
    static isDictionaryBatch(m) { return m.headerType === MessageHeader.DictionaryBatch; }
}
export class RecordBatchMetadata extends Message {
    constructor(version, length, nodes, buffers, bodyLength) {
        if (bodyLength === void (0)) {
            bodyLength = buffers.reduce((bodyLength, buffer) => bodyLength + buffer.length, 0);
        }
        super(version, bodyLength, MessageHeader.RecordBatch);
        this.nodes = nodes;
        this.buffers = buffers;
        this.length = typeof length === 'number' ? length : length.low;
    }
}
export class DictionaryBatch extends Message {
    constructor(version, data, id, isDelta = false) {
        super(version, data.bodyLength, MessageHeader.DictionaryBatch);
        this.isDelta = isDelta;
        this.data = data;
        this.id = typeof id === 'number' ? id : id.low;
    }
    static getId() { return DictionaryBatch.atomicDictionaryId++; }
    get nodes() { return this.data.nodes; }
    get buffers() { return this.data.buffers; }
}
DictionaryBatch.atomicDictionaryId = 0;
export class BufferMetadata {
    constructor(offset, length) {
        this.offset = typeof offset === 'number' ? offset : offset.low;
        this.length = typeof length === 'number' ? length : length.low;
    }
}
export class FieldMetadata {
    constructor(length, nullCount) {
        this.length = typeof length === 'number' ? length : length.low;
        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
