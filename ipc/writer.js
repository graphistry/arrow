"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const message_1 = require("./message");
const schema_1 = require("../schema");
const message_2 = require("./metadata/message");
const metadata = require("./metadata/message");
const chunked_1 = require("../vector/chunked");
const file_1 = require("./metadata/file");
const enum_1 = require("../enum");
const stream_1 = require("../io/stream");
const vectorassembler_1 = require("../visitor/vectorassembler");
const compat_1 = require("../util/compat");
const interfaces_1 = require("../io/interfaces");
const kAlignmentBytes = new Uint8Array(64).fill(0);
class RecordBatchWriter extends interfaces_1.ReadableInterop {
    constructor() {
        super(...arguments);
        this.position = 0;
        this.started = false;
        // @ts-ignore
        this.sink = new stream_1.AsyncByteQueue();
        this.schema = null;
        this.dictionaryBlocks = [];
        this.recordBatchBlocks = [];
    }
    /** @nocollapse */
    static throughNode() { throw new Error(`"throughNode" not available in this environment`); }
    /** @nocollapse */
    static throughDOM() {
        throw new Error(`"throughDOM" not available in this environment`);
    }
    toUint8Array(sync = false) {
        return this.sink.toUint8Array(sync);
    }
    get closed() { return this.sink.closed; }
    [Symbol.asyncIterator]() { return this.sink[Symbol.asyncIterator](); }
    toReadableDOMStream(options) { return this.sink.toReadableDOMStream(options); }
    toReadableNodeStream(options) { return this.sink.toReadableNodeStream(options); }
    close() { return this.reset().sink.close(); }
    abort(reason) { return this.reset().sink.abort(reason); }
    reset(sink = this.sink, schema) {
        if ((sink === this.sink) || (sink instanceof stream_1.AsyncByteQueue)) {
            this.sink = sink;
        }
        else {
            this.sink = new stream_1.AsyncByteQueue();
            if (sink && compat_1.isWritableDOMStream(sink)) {
                this.toReadableDOMStream().pipeTo(sink);
            }
            else if (sink && compat_1.isWritableNodeStream(sink)) {
                this.toReadableNodeStream().pipe(sink);
            }
        }
        this.position = 0;
        this.schema = null;
        this.started = false;
        this.dictionaryBlocks = [];
        this.recordBatchBlocks = [];
        if (schema instanceof schema_1.Schema) {
            this.started = true;
            this.schema = schema;
            this._writeSchema(schema);
        }
        return this;
    }
    write(chunk) {
        if (!this.sink) {
            throw new Error(`RecordBatchWriter is closed`);
        }
        if (!this.started && (this.started = true)) {
            this._writeSchema(this.schema = chunk.schema);
        }
        if (chunk.schema !== this.schema) {
            throw new Error('Schemas unequal');
        }
        this._writeRecordBatch(chunk);
    }
    _writeMessage(message, alignment = 8) {
        const a = alignment - 1;
        const buffer = message_2.Message.encode(message);
        const flatbufferSize = buffer.byteLength;
        const alignedSize = (flatbufferSize + 4 + a) & ~a;
        const nPaddingBytes = alignedSize - flatbufferSize - 4;
        if (message.headerType === enum_1.MessageHeader.RecordBatch) {
            this.recordBatchBlocks.push(new file_1.FileBlock(alignedSize, message.bodyLength, this.position));
        }
        else if (message.headerType === enum_1.MessageHeader.DictionaryBatch) {
            this.dictionaryBlocks.push(new file_1.FileBlock(alignedSize, message.bodyLength, this.position));
        }
        // Write the flatbuffer size prefix including padding
        this._write(Int32Array.of(alignedSize - 4));
        // Write the flatbuffer
        if (flatbufferSize > 0) {
            this._write(buffer);
        }
        // Write any padding
        return this._writePadding(nPaddingBytes);
    }
    _write(buffer) {
        if (buffer && buffer.byteLength > 0) {
            this.sink.write(buffer);
            this.position += buffer.byteLength;
        }
        return this;
    }
    _writeSchema(schema) {
        return this
            ._writeMessage(message_2.Message.from(schema))
            ._writeDictionaries(schema.dictionaryFields);
    }
    _writeFooter() {
        const { schema, recordBatchBlocks, dictionaryBlocks } = this;
        const buffer = file_1.Footer.encode(new file_1.Footer(schema, enum_1.MetadataVersion.V4, recordBatchBlocks, dictionaryBlocks));
        return this
            ._write(buffer) // Write the flatbuffer
            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix
            ._writeMagic(); // then the magic suffix
    }
    _writeMagic() {
        return this._write(message_1.MAGIC);
    }
    _writePadding(nBytes) {
        return nBytes > 0 ? this._write(kAlignmentBytes.subarray(0, nBytes)) : this;
    }
    _writeRecordBatch(records) {
        const { byteLength, nodes, bufferRegions, buffers } = vectorassembler_1.VectorAssembler.assemble(records);
        const recordBatch = new metadata.RecordBatch(records.length, nodes, bufferRegions);
        const message = message_2.Message.from(recordBatch, byteLength);
        return this
            ._writeMessage(message)
            ._writeBodyBuffers(buffers);
    }
    _writeDictionaryBatch(dictionary, id, isDelta = false) {
        const { byteLength, nodes, bufferRegions, buffers } = vectorassembler_1.VectorAssembler.assemble(dictionary);
        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);
        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);
        const message = message_2.Message.from(dictionaryBatch, byteLength);
        return this
            ._writeMessage(message)
            ._writeBodyBuffers(buffers);
    }
    _writeBodyBuffers(buffers) {
        let buffer;
        let size, padding;
        for (let i = -1, n = buffers.length; ++i < n;) {
            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {
                this._write(buffer);
                if ((padding = ((size + 7) & ~7) - size) > 0) {
                    this._writePadding(padding);
                }
            }
        }
        return this;
    }
    _writeDictionaries(dictionaryFields) {
        for (const [id, fields] of dictionaryFields) {
            const vector = fields[0].type.dictionaryVector;
            if (!(vector instanceof chunked_1.ChunkedVector)) {
                this._writeDictionaryBatch(vector, id, false);
            }
            else {
                const chunks = vector.chunks;
                for (let i = -1, n = chunks.length; ++i < n;) {
                    this._writeDictionaryBatch(chunks[i], id, i > 0);
                }
            }
        }
        return this;
    }
}
exports.RecordBatchWriter = RecordBatchWriter;
class RecordBatchFileWriter extends RecordBatchWriter {
    /** @nocollapse */
    static writeAll(batches) {
        const writer = new RecordBatchFileWriter();
        if (!compat_1.isAsyncIterable(batches)) {
            for (const batch of batches) {
                writer.write(batch);
            }
            writer.close();
            return writer;
        }
        return (() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            var e_1, _a;
            try {
                for (var batches_1 = tslib_1.__asyncValues(batches), batches_1_1; batches_1_1 = yield batches_1.next(), !batches_1_1.done;) {
                    const batch = batches_1_1.value;
                    writer.write(batch);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (batches_1_1 && !batches_1_1.done && (_a = batches_1.return)) yield _a.call(batches_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            writer.close();
            return writer;
        }))();
    }
    close() {
        this._writeFooter();
        return super.close();
    }
    _writeSchema(schema) {
        return this
            ._writeMagic()._writePadding(2)
            ._writeDictionaries(schema.dictionaryFields);
    }
}
exports.RecordBatchFileWriter = RecordBatchFileWriter;
class RecordBatchStreamWriter extends RecordBatchWriter {
    /** @nocollapse */
    static writeAll(batches) {
        const writer = new RecordBatchStreamWriter();
        if (!compat_1.isAsyncIterable(batches)) {
            for (const batch of batches) {
                writer.write(batch);
            }
            writer.close();
            return writer;
        }
        return (() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            var e_2, _a;
            try {
                for (var batches_2 = tslib_1.__asyncValues(batches), batches_2_1; batches_2_1 = yield batches_2.next(), !batches_2_1.done;) {
                    const batch = batches_2_1.value;
                    writer.write(batch);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (batches_2_1 && !batches_2_1.done && (_a = batches_2.return)) yield _a.call(batches_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
            writer.close();
            return writer;
        }))();
    }
    close() {
        this._writePadding(4);
        return super.close();
    }
}
exports.RecordBatchStreamWriter = RecordBatchStreamWriter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
