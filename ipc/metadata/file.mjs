// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* tslint:disable:class-name */
import * as File_ from '../../fb/File';
import { flatbuffers } from 'flatbuffers';
var Long = flatbuffers.Long;
var Builder = flatbuffers.Builder;
var ByteBuffer = flatbuffers.ByteBuffer;
var _Block = File_.org.apache.arrow.flatbuf.Block;
var _Footer = File_.org.apache.arrow.flatbuf.Footer;
import { Schema } from '../../schema';
import { MetadataVersion } from '../../enum';
import { toUint8Array } from '../../util/buffer';
class Footer_ {
    constructor(schema, version = MetadataVersion.V4, recordBatches, dictionaryBatches) {
        this.schema = schema;
        this.version = version;
        recordBatches && (this._recordBatches = recordBatches);
        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);
    }
    /** @nocollapse */
    static decode(buf) {
        buf = new ByteBuffer(toUint8Array(buf));
        const footer = _Footer.getRootAsFooter(buf);
        const schema = Schema.decode(footer.schema());
        return new OffHeapFooter(schema, footer);
    }
    /** @nocollapse */
    static encode(footer) {
        const b = new Builder();
        const schemaOffset = Schema.encode(b, footer.schema);
        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);
        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));
        const recordBatchesOffset = b.endVector();
        _Footer.startDictionariesVector(b, footer.numDictionaries);
        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));
        const dictionaryBatchesOffset = b.endVector();
        _Footer.startFooter(b);
        _Footer.addSchema(b, schemaOffset);
        _Footer.addVersion(b, MetadataVersion.V4);
        _Footer.addRecordBatches(b, recordBatchesOffset);
        _Footer.addDictionaries(b, dictionaryBatchesOffset);
        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));
        return b.asUint8Array();
    }
    get numRecordBatches() { return this._recordBatches.length; }
    get numDictionaries() { return this._dictionaryBatches.length; }
    *recordBatches() {
        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {
            if (block = this.getRecordBatch(i)) {
                yield block;
            }
        }
    }
    *dictionaryBatches() {
        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {
            if (block = this.getDictionaryBatch(i)) {
                yield block;
            }
        }
    }
    getRecordBatch(index) {
        return index >= 0
            && index < this.numRecordBatches
            && this._recordBatches[index] || null;
    }
    getDictionaryBatch(index) {
        return index >= 0
            && index < this.numDictionaries
            && this._dictionaryBatches[index] || null;
    }
}
export { Footer_ as Footer };
class OffHeapFooter extends Footer_ {
    constructor(schema, _footer) {
        super(schema, _footer.version());
        this._footer = _footer;
    }
    get numRecordBatches() { return this._footer.recordBatchesLength(); }
    get numDictionaries() { return this._footer.dictionariesLength(); }
    getRecordBatch(index) {
        if (index >= 0 && index < this.numRecordBatches) {
            const fileBlock = this._footer.recordBatches(index);
            if (fileBlock) {
                return FileBlock.decode(fileBlock);
            }
        }
        return null;
    }
    getDictionaryBatch(index) {
        if (index >= 0 && index < this.numDictionaries) {
            const fileBlock = this._footer.dictionaries(index);
            if (fileBlock) {
                return FileBlock.decode(fileBlock);
            }
        }
        return null;
    }
}
export class FileBlock {
    /** @nocollapse */
    static decode(block) {
        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());
    }
    /** @nocollapse */
    static encode(b, fileBlock) {
        const { metaDataLength } = fileBlock;
        const offset = new Long(fileBlock.offset, 0);
        const bodyLength = new Long(fileBlock.bodyLength, 0);
        return _Block.createBlock(b, offset, metaDataLength, bodyLength);
    }
    constructor(metaDataLength, bodyLength, offset) {
        this.metaDataLength = metaDataLength;
        this.offset = typeof offset === 'number' ? offset : offset.low;
        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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VUFBVSxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckQsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFNRCxZQUFZLGNBQXNCLEVBQUUsVUFBeUIsRUFBRSxNQUFxQjtRQUNoRixJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztRQUNyQyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQy9ELElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxVQUFVLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7SUFDbkYsQ0FBQztDQUNKIiwiZmlsZSI6ImlwYy9tZXRhZGF0YS9maWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qIHRzbGludDpkaXNhYmxlOmNsYXNzLW5hbWUgKi9cblxuaW1wb3J0ICogYXMgRmlsZV8gZnJvbSAnLi4vLi4vZmIvRmlsZSc7XG5pbXBvcnQgeyBmbGF0YnVmZmVycyB9IGZyb20gJ2ZsYXRidWZmZXJzJztcblxuaW1wb3J0IExvbmcgPSBmbGF0YnVmZmVycy5Mb25nO1xuaW1wb3J0IEJ1aWxkZXIgPSBmbGF0YnVmZmVycy5CdWlsZGVyO1xuaW1wb3J0IEJ5dGVCdWZmZXIgPSBmbGF0YnVmZmVycy5CeXRlQnVmZmVyO1xuaW1wb3J0IF9CbG9jayA9IEZpbGVfLm9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5CbG9jaztcbmltcG9ydCBfRm9vdGVyID0gRmlsZV8ub3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLkZvb3RlcjtcblxuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAnLi4vLi4vc2NoZW1hJztcbmltcG9ydCB7IE1ldGFkYXRhVmVyc2lvbiB9IGZyb20gJy4uLy4uL2VudW0nO1xuaW1wb3J0IHsgdG9VaW50OEFycmF5IH0gZnJvbSAnLi4vLi4vdXRpbC9idWZmZXInO1xuaW1wb3J0IHsgQXJyYXlCdWZmZXJWaWV3SW5wdXQgfSBmcm9tICcuLi8uLi91dGlsL2J1ZmZlcic7XG5cbmNsYXNzIEZvb3Rlcl8ge1xuXG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBkZWNvZGUoYnVmOiBBcnJheUJ1ZmZlclZpZXdJbnB1dCkge1xuICAgICAgICBidWYgPSBuZXcgQnl0ZUJ1ZmZlcih0b1VpbnQ4QXJyYXkoYnVmKSk7XG4gICAgICAgIGNvbnN0IGZvb3RlciA9IF9Gb290ZXIuZ2V0Um9vdEFzRm9vdGVyKGJ1Zik7XG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IFNjaGVtYS5kZWNvZGUoZm9vdGVyLnNjaGVtYSgpISk7XG4gICAgICAgIHJldHVybiBuZXcgT2ZmSGVhcEZvb3RlcihzY2hlbWEsIGZvb3RlcikgYXMgRm9vdGVyXztcbiAgICB9XG5cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGVuY29kZShmb290ZXI6IEZvb3Rlcl8pIHtcblxuICAgICAgICBjb25zdCBiOiBCdWlsZGVyID0gbmV3IEJ1aWxkZXIoKTtcbiAgICAgICAgY29uc3Qgc2NoZW1hT2Zmc2V0ID0gU2NoZW1hLmVuY29kZShiLCBmb290ZXIuc2NoZW1hKTtcblxuICAgICAgICBfRm9vdGVyLnN0YXJ0UmVjb3JkQmF0Y2hlc1ZlY3RvcihiLCBmb290ZXIubnVtUmVjb3JkQmF0Y2hlcyk7XG4gICAgICAgIFsuLi5mb290ZXIucmVjb3JkQmF0Y2hlcygpXS5zbGljZSgpLnJldmVyc2UoKS5mb3JFYWNoKChyYikgPT4gRmlsZUJsb2NrLmVuY29kZShiLCByYikpO1xuICAgICAgICBjb25zdCByZWNvcmRCYXRjaGVzT2Zmc2V0ID0gYi5lbmRWZWN0b3IoKTtcblxuICAgICAgICBfRm9vdGVyLnN0YXJ0RGljdGlvbmFyaWVzVmVjdG9yKGIsIGZvb3Rlci5udW1EaWN0aW9uYXJpZXMpO1xuICAgICAgICBbLi4uZm9vdGVyLmRpY3Rpb25hcnlCYXRjaGVzKCldLnNsaWNlKCkucmV2ZXJzZSgpLmZvckVhY2goKGRiKSA9PiBGaWxlQmxvY2suZW5jb2RlKGIsIGRiKSk7XG5cbiAgICAgICAgY29uc3QgZGljdGlvbmFyeUJhdGNoZXNPZmZzZXQgPSBiLmVuZFZlY3RvcigpO1xuXG4gICAgICAgIF9Gb290ZXIuc3RhcnRGb290ZXIoYik7XG4gICAgICAgIF9Gb290ZXIuYWRkU2NoZW1hKGIsIHNjaGVtYU9mZnNldCk7XG4gICAgICAgIF9Gb290ZXIuYWRkVmVyc2lvbihiLCBNZXRhZGF0YVZlcnNpb24uVjQpO1xuICAgICAgICBfRm9vdGVyLmFkZFJlY29yZEJhdGNoZXMoYiwgcmVjb3JkQmF0Y2hlc09mZnNldCk7XG4gICAgICAgIF9Gb290ZXIuYWRkRGljdGlvbmFyaWVzKGIsIGRpY3Rpb25hcnlCYXRjaGVzT2Zmc2V0KTtcbiAgICAgICAgX0Zvb3Rlci5maW5pc2hGb290ZXJCdWZmZXIoYiwgX0Zvb3Rlci5lbmRGb290ZXIoYikpO1xuXG4gICAgICAgIHJldHVybiBiLmFzVWludDhBcnJheSgpO1xuICAgIH1cblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwcm90ZWN0ZWQgX3JlY29yZEJhdGNoZXM6IEZpbGVCbG9ja1tdO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwcm90ZWN0ZWQgX2RpY3Rpb25hcnlCYXRjaGVzOiBGaWxlQmxvY2tbXTtcbiAgICBwdWJsaWMgZ2V0IG51bVJlY29yZEJhdGNoZXMoKSB7IHJldHVybiB0aGlzLl9yZWNvcmRCYXRjaGVzLmxlbmd0aDsgfVxuICAgIHB1YmxpYyBnZXQgbnVtRGljdGlvbmFyaWVzKCkgeyByZXR1cm4gdGhpcy5fZGljdGlvbmFyeUJhdGNoZXMubGVuZ3RoOyB9XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgc2NoZW1hOiBTY2hlbWEsXG4gICAgICAgICAgICAgICAgcHVibGljIHZlcnNpb246IE1ldGFkYXRhVmVyc2lvbiA9IE1ldGFkYXRhVmVyc2lvbi5WNCxcbiAgICAgICAgICAgICAgICByZWNvcmRCYXRjaGVzPzogRmlsZUJsb2NrW10sIGRpY3Rpb25hcnlCYXRjaGVzPzogRmlsZUJsb2NrW10pIHtcbiAgICAgICAgcmVjb3JkQmF0Y2hlcyAmJiAodGhpcy5fcmVjb3JkQmF0Y2hlcyA9IHJlY29yZEJhdGNoZXMpO1xuICAgICAgICBkaWN0aW9uYXJ5QmF0Y2hlcyAmJiAodGhpcy5fZGljdGlvbmFyeUJhdGNoZXMgPSBkaWN0aW9uYXJ5QmF0Y2hlcyk7XG4gICAgfVxuXG4gICAgcHVibGljICpyZWNvcmRCYXRjaGVzKCk6IEl0ZXJhYmxlPEZpbGVCbG9jaz4ge1xuICAgICAgICBmb3IgKGxldCBibG9jaywgaSA9IC0xLCBuID0gdGhpcy5udW1SZWNvcmRCYXRjaGVzOyArK2kgPCBuOykge1xuICAgICAgICAgICAgaWYgKGJsb2NrID0gdGhpcy5nZXRSZWNvcmRCYXRjaChpKSkgeyB5aWVsZCBibG9jazsgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljICpkaWN0aW9uYXJ5QmF0Y2hlcygpOiBJdGVyYWJsZTxGaWxlQmxvY2s+IHtcbiAgICAgICAgZm9yIChsZXQgYmxvY2ssIGkgPSAtMSwgbiA9IHRoaXMubnVtRGljdGlvbmFyaWVzOyArK2kgPCBuOykge1xuICAgICAgICAgICAgaWYgKGJsb2NrID0gdGhpcy5nZXREaWN0aW9uYXJ5QmF0Y2goaSkpIHsgeWllbGQgYmxvY2s7IH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSZWNvcmRCYXRjaChpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBpbmRleCA+PSAwXG4gICAgICAgICAgICAmJiBpbmRleCA8IHRoaXMubnVtUmVjb3JkQmF0Y2hlc1xuICAgICAgICAgICAgJiYgdGhpcy5fcmVjb3JkQmF0Y2hlc1tpbmRleF0gfHwgbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RGljdGlvbmFyeUJhdGNoKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4ID49IDBcbiAgICAgICAgICAgICYmIGluZGV4IDwgdGhpcy5udW1EaWN0aW9uYXJpZXNcbiAgICAgICAgICAgICYmIHRoaXMuX2RpY3Rpb25hcnlCYXRjaGVzW2luZGV4XSB8fCBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRm9vdGVyXyBhcyBGb290ZXIgfTtcblxuY2xhc3MgT2ZmSGVhcEZvb3RlciBleHRlbmRzIEZvb3Rlcl8ge1xuXG4gICAgcHVibGljIGdldCBudW1SZWNvcmRCYXRjaGVzKCkgeyByZXR1cm4gdGhpcy5fZm9vdGVyLnJlY29yZEJhdGNoZXNMZW5ndGgoKTsgfVxuICAgIHB1YmxpYyBnZXQgbnVtRGljdGlvbmFyaWVzKCkgeyByZXR1cm4gdGhpcy5fZm9vdGVyLmRpY3Rpb25hcmllc0xlbmd0aCgpOyB9XG5cbiAgICBjb25zdHJ1Y3RvcihzY2hlbWE6IFNjaGVtYSwgcHJvdGVjdGVkIF9mb290ZXI6IF9Gb290ZXIpIHtcbiAgICAgICAgc3VwZXIoc2NoZW1hLCBfZm9vdGVyLnZlcnNpb24oKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJlY29yZEJhdGNoKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLm51bVJlY29yZEJhdGNoZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVCbG9jayA9IHRoaXMuX2Zvb3Rlci5yZWNvcmRCYXRjaGVzKGluZGV4KTtcbiAgICAgICAgICAgIGlmIChmaWxlQmxvY2spIHsgcmV0dXJuIEZpbGVCbG9jay5kZWNvZGUoZmlsZUJsb2NrKTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXREaWN0aW9uYXJ5QmF0Y2goaW5kZXg6IG51bWJlcikge1xuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMubnVtRGljdGlvbmFyaWVzKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlQmxvY2sgPSB0aGlzLl9mb290ZXIuZGljdGlvbmFyaWVzKGluZGV4KTtcbiAgICAgICAgICAgIGlmIChmaWxlQmxvY2spIHsgcmV0dXJuIEZpbGVCbG9jay5kZWNvZGUoZmlsZUJsb2NrKTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZpbGVCbG9jayB7XG5cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRlY29kZShibG9jazogX0Jsb2NrKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmlsZUJsb2NrKGJsb2NrLm1ldGFEYXRhTGVuZ3RoKCksIGJsb2NrLmJvZHlMZW5ndGgoKSwgYmxvY2sub2Zmc2V0KCkpO1xuICAgIH1cblxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZW5jb2RlKGI6IEJ1aWxkZXIsIGZpbGVCbG9jazogRmlsZUJsb2NrKSB7XG4gICAgICAgIGNvbnN0IHsgbWV0YURhdGFMZW5ndGggfSA9IGZpbGVCbG9jaztcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbmV3IExvbmcoZmlsZUJsb2NrLm9mZnNldCwgMCk7XG4gICAgICAgIGNvbnN0IGJvZHlMZW5ndGggPSBuZXcgTG9uZyhmaWxlQmxvY2suYm9keUxlbmd0aCwgMCk7XG4gICAgICAgIHJldHVybiBfQmxvY2suY3JlYXRlQmxvY2soYiwgb2Zmc2V0LCBtZXRhRGF0YUxlbmd0aCwgYm9keUxlbmd0aCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9mZnNldDogbnVtYmVyO1xuICAgIHB1YmxpYyBib2R5TGVuZ3RoOiBudW1iZXI7XG4gICAgcHVibGljIG1ldGFEYXRhTGVuZ3RoOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihtZXRhRGF0YUxlbmd0aDogbnVtYmVyLCBib2R5TGVuZ3RoOiBMb25nIHwgbnVtYmVyLCBvZmZzZXQ6IExvbmcgfCBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5tZXRhRGF0YUxlbmd0aCA9IG1ldGFEYXRhTGVuZ3RoO1xuICAgICAgICB0aGlzLm9mZnNldCA9IHR5cGVvZiBvZmZzZXQgPT09ICdudW1iZXInID8gb2Zmc2V0IDogb2Zmc2V0LmxvdztcbiAgICAgICAgdGhpcy5ib2R5TGVuZ3RoID0gdHlwZW9mIGJvZHlMZW5ndGggPT09ICdudW1iZXInID8gYm9keUxlbmd0aCA6IGJvZHlMZW5ndGgubG93O1xuICAgIH1cbn1cbiJdfQ==
