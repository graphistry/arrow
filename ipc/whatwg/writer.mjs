// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { AsyncByteStream } from '../../io/stream';
/** @ignore */
export function recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {
    const writer = new this(writableStrategy);
    const reader = new AsyncByteStream(writer);
    const readable = new ReadableStream({
        type: 'bytes',
        async cancel() { await reader.cancel(); },
        async pull(controller) { await next(controller); },
        async start(controller) { await next(controller); },
    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });
    return { writable: new WritableStream(writer, writableStrategy), readable };
    async function next(controller) {
        let buf = null;
        let size = controller.desiredSize;
        while (buf = await reader.read(size || null)) {
            controller.enqueue(buf);
            if (size != null && (size -= buf.byteLength) <= 0) {
                return;
            }
        }
        controller.close();
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy93aGF0d2cvd3JpdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUlyQixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHbEQsY0FBYztBQUNkLE1BQU0sVUFBVSxpQ0FBaUMsQ0FFN0MsZ0JBQTZFLEVBQzdFLGdCQUF5RDtJQUd6RCxNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBSSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzdDLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLE1BQU0sUUFBUSxHQUFHLElBQUksY0FBYyxDQUFDO1FBQ2hDLElBQUksRUFBRSxPQUFPO1FBQ2IsS0FBSyxDQUFDLE1BQU0sS0FBSyxNQUFNLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xELEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN0RCxFQUFFLEVBQUUsZUFBZSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFFdEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLGNBQWMsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUU1RSxLQUFLLFVBQVUsSUFBSSxDQUFDLFVBQXVEO1FBQ3ZFLElBQUksR0FBRyxHQUFzQixJQUFJLENBQUM7UUFDbEMsSUFBSSxJQUFJLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQztRQUNsQyxPQUFPLEdBQUcsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO1lBQzFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDeEIsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQUUsT0FBTzthQUFFO1NBQ2pFO1FBQ0QsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZCLENBQUM7QUFDTCxDQUFDIiwiZmlsZSI6ImlwYy93aGF0d2cvd3JpdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZSc7XG5pbXBvcnQgeyBSZWNvcmRCYXRjaCB9IGZyb20gJy4uLy4uL3JlY29yZGJhdGNoJztcbmltcG9ydCB7IEFzeW5jQnl0ZVN0cmVhbSB9IGZyb20gJy4uLy4uL2lvL3N0cmVhbSc7XG5pbXBvcnQgeyBSZWNvcmRCYXRjaFdyaXRlciB9IGZyb20gJy4uLy4uL2lwYy93cml0ZXInO1xuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY29yZEJhdGNoV3JpdGVyVGhyb3VnaERPTVN0cmVhbTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PihcbiAgICB0aGlzOiB0eXBlb2YgUmVjb3JkQmF0Y2hXcml0ZXIsXG4gICAgd3JpdGFibGVTdHJhdGVneT86IFF1ZXVpbmdTdHJhdGVneTxSZWNvcmRCYXRjaDxUPj4gJiB7IGF1dG9EZXN0cm95OiBib29sZWFuIH0sXG4gICAgcmVhZGFibGVTdHJhdGVneT86IHsgaGlnaFdhdGVyTWFyaz86IG51bWJlciwgc2l6ZT86IGFueSB9XG4pIHtcblxuICAgIGNvbnN0IHdyaXRlciA9IG5ldyB0aGlzPFQ+KHdyaXRhYmxlU3RyYXRlZ3kpO1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBBc3luY0J5dGVTdHJlYW0od3JpdGVyKTtcbiAgICBjb25zdCByZWFkYWJsZSA9IG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgIHR5cGU6ICdieXRlcycsXG4gICAgICAgIGFzeW5jIGNhbmNlbCgpIHsgYXdhaXQgcmVhZGVyLmNhbmNlbCgpOyB9LFxuICAgICAgICBhc3luYyBwdWxsKGNvbnRyb2xsZXIpIHsgYXdhaXQgbmV4dChjb250cm9sbGVyKTsgfSxcbiAgICAgICAgYXN5bmMgc3RhcnQoY29udHJvbGxlcikgeyBhd2FpdCBuZXh0KGNvbnRyb2xsZXIpOyB9LFxuICAgIH0sIHsgJ2hpZ2hXYXRlck1hcmsnOiAyICoqIDE0LCAuLi5yZWFkYWJsZVN0cmF0ZWd5IH0pO1xuXG4gICAgcmV0dXJuIHsgd3JpdGFibGU6IG5ldyBXcml0YWJsZVN0cmVhbSh3cml0ZXIsIHdyaXRhYmxlU3RyYXRlZ3kpLCByZWFkYWJsZSB9O1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gbmV4dChjb250cm9sbGVyOiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyPFVpbnQ4QXJyYXk+KSB7XG4gICAgICAgIGxldCBidWY6IFVpbnQ4QXJyYXkgfCBudWxsID0gbnVsbDtcbiAgICAgICAgbGV0IHNpemUgPSBjb250cm9sbGVyLmRlc2lyZWRTaXplO1xuICAgICAgICB3aGlsZSAoYnVmID0gYXdhaXQgcmVhZGVyLnJlYWQoc2l6ZSB8fCBudWxsKSkge1xuICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGJ1Zik7XG4gICAgICAgICAgICBpZiAoc2l6ZSAhPSBudWxsICYmIChzaXplIC09IGJ1Zi5ieXRlTGVuZ3RoKSA8PSAwKSB7IHJldHVybjsgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICB9XG59XG4iXX0=
