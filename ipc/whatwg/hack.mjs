// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
const kIsFakeBuffer = Symbol.for('isFakeBuffer');
// The Whatwg ReadableByteStream reference implementation[1] copies the
// underlying ArrayBuffer for any TypedArray that passes through it and
// redefines the original's byteLength to be 0, in order to mimic the
// unfinished ArrayBuffer "transfer" spec [2].
// 
// This is problematic in node, where a number of APIs (like fs.ReadStream)
// internally allocate and share ArrayBuffers between unrelated operations.
// It's also problematic when using the reference implementation as a polyfill
// in the browser, since it leads to the same bytes being copied at every link
// in a bytestream pipeline.
// 
// They do this because there are some web-platform tests that check whether
// byteLength has been set to zero to infer whether the buffer has been
// "transferred". We don't need to care about these tests in production, and
// we also wish to _not_ copy bytes as they pass through a stream, so this
// function fakes out the reference implementation to work around both these
// issues.
// 
// 1. https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126
// 2. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer
export function protectArrayBufferFromWhatwgRefImpl(value) {
    const real = value.buffer;
    if (!real[kIsFakeBuffer]) {
        const fake = Object.create(real);
        Object.defineProperty(fake, kIsFakeBuffer, { value: true });
        Object.defineProperty(fake, 'slice', { value: () => real });
        Object.defineProperty(value, 'buffer', { value: fake });
    }
    return value;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy93aGF0d2cvaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFFckIsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUVqRCx1RUFBdUU7QUFDdkUsdUVBQXVFO0FBQ3ZFLHFFQUFxRTtBQUNyRSw4Q0FBOEM7QUFDOUMsR0FBRztBQUNILDJFQUEyRTtBQUMzRSwyRUFBMkU7QUFDM0UsOEVBQThFO0FBQzlFLDhFQUE4RTtBQUM5RSw0QkFBNEI7QUFDNUIsR0FBRztBQUNILDRFQUE0RTtBQUM1RSx1RUFBdUU7QUFDdkUsNEVBQTRFO0FBQzVFLDBFQUEwRTtBQUMxRSw0RUFBNEU7QUFDNUUsVUFBVTtBQUNWLEdBQUc7QUFDSCxrSUFBa0k7QUFDbEksMkdBQTJHO0FBRTNHLE1BQU0sVUFBVSxtQ0FBbUMsQ0FBQyxLQUFpQjtJQUNqRSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzFCLElBQUksQ0FBRSxJQUFZLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDL0IsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM1RCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM1RCxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBTSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUMvRDtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUMiLCJmaWxlIjoiaXBjL3doYXR3Zy9oYWNrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmNvbnN0IGtJc0Zha2VCdWZmZXIgPSBTeW1ib2wuZm9yKCdpc0Zha2VCdWZmZXInKTtcblxuLy8gVGhlIFdoYXR3ZyBSZWFkYWJsZUJ5dGVTdHJlYW0gcmVmZXJlbmNlIGltcGxlbWVudGF0aW9uWzFdIGNvcGllcyB0aGVcbi8vIHVuZGVybHlpbmcgQXJyYXlCdWZmZXIgZm9yIGFueSBUeXBlZEFycmF5IHRoYXQgcGFzc2VzIHRocm91Z2ggaXQgYW5kXG4vLyByZWRlZmluZXMgdGhlIG9yaWdpbmFsJ3MgYnl0ZUxlbmd0aCB0byBiZSAwLCBpbiBvcmRlciB0byBtaW1pYyB0aGVcbi8vIHVuZmluaXNoZWQgQXJyYXlCdWZmZXIgXCJ0cmFuc2ZlclwiIHNwZWMgWzJdLlxuLy8gXG4vLyBUaGlzIGlzIHByb2JsZW1hdGljIGluIG5vZGUsIHdoZXJlIGEgbnVtYmVyIG9mIEFQSXMgKGxpa2UgZnMuUmVhZFN0cmVhbSlcbi8vIGludGVybmFsbHkgYWxsb2NhdGUgYW5kIHNoYXJlIEFycmF5QnVmZmVycyBiZXR3ZWVuIHVucmVsYXRlZCBvcGVyYXRpb25zLlxuLy8gSXQncyBhbHNvIHByb2JsZW1hdGljIHdoZW4gdXNpbmcgdGhlIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbiBhcyBhIHBvbHlmaWxsXG4vLyBpbiB0aGUgYnJvd3Nlciwgc2luY2UgaXQgbGVhZHMgdG8gdGhlIHNhbWUgYnl0ZXMgYmVpbmcgY29waWVkIGF0IGV2ZXJ5IGxpbmtcbi8vIGluIGEgYnl0ZXN0cmVhbSBwaXBlbGluZS5cbi8vIFxuLy8gVGhleSBkbyB0aGlzIGJlY2F1c2UgdGhlcmUgYXJlIHNvbWUgd2ViLXBsYXRmb3JtIHRlc3RzIHRoYXQgY2hlY2sgd2hldGhlclxuLy8gYnl0ZUxlbmd0aCBoYXMgYmVlbiBzZXQgdG8gemVybyB0byBpbmZlciB3aGV0aGVyIHRoZSBidWZmZXIgaGFzIGJlZW5cbi8vIFwidHJhbnNmZXJyZWRcIi4gV2UgZG9uJ3QgbmVlZCB0byBjYXJlIGFib3V0IHRoZXNlIHRlc3RzIGluIHByb2R1Y3Rpb24sIGFuZFxuLy8gd2UgYWxzbyB3aXNoIHRvIF9ub3RfIGNvcHkgYnl0ZXMgYXMgdGhleSBwYXNzIHRocm91Z2ggYSBzdHJlYW0sIHNvIHRoaXNcbi8vIGZ1bmN0aW9uIGZha2VzIG91dCB0aGUgcmVmZXJlbmNlIGltcGxlbWVudGF0aW9uIHRvIHdvcmsgYXJvdW5kIGJvdGggdGhlc2Vcbi8vIGlzc3Vlcy5cbi8vIFxuLy8gMS4gaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9zdHJlYW1zL2Jsb2IvMGViZTRiMDQyZTQ2N2Q5ODc2ZDgwYWUwNDVkZTM4NDMwOTJhZDc5Ny9yZWZlcmVuY2UtaW1wbGVtZW50YXRpb24vbGliL2hlbHBlcnMuanMjTDEyNlxuLy8gMi4gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXlCdWZmZXIvdHJhbnNmZXJcblxuZXhwb3J0IGZ1bmN0aW9uIHByb3RlY3RBcnJheUJ1ZmZlckZyb21XaGF0d2dSZWZJbXBsKHZhbHVlOiBVaW50OEFycmF5KSB7XG4gICAgY29uc3QgcmVhbCA9IHZhbHVlLmJ1ZmZlcjtcbiAgICBpZiAoIShyZWFsIGFzIGFueSlba0lzRmFrZUJ1ZmZlcl0pIHtcbiAgICAgICAgY29uc3QgZmFrZSA9IE9iamVjdC5jcmVhdGUocmVhbCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmYWtlLCBrSXNGYWtlQnVmZmVyLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmFrZSwgJ3NsaWNlJywgeyB2YWx1ZTogKCkgPT4gcmVhbCB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlLCAnYnVmZmVyJywgeyAgICAgdmFsdWU6IGZha2UgfSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbiJdfQ==
