// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
const kIsFakeBuffer = Symbol.for('isFakeBuffer');
// The Whatwg ReadableByteStream reference implementation[1] copies the
// underlying ArrayBuffer for any TypedArray that passes through it and
// redefines the original's byteLength to be 0, in order to mimic the
// unfinished ArrayBuffer "transfer" spec [2].
//
// This is problematic in node, where a number of APIs (like fs.ReadStream)
// internally allocate and share ArrayBuffers between unrelated operations.
// It's also problematic when using the reference implementation as a polyfill
// in the browser, since it leads to the same bytes being copied at every link
// in a bytestream pipeline.
//
// They do this because there are some web-platform tests that check whether
// byteLength has been set to zero to infer whether the buffer has been
// "transferred". We don't need to care about these tests in production, and
// we also wish to _not_ copy bytes as they pass through a stream, so this
// function fakes out the reference implementation to work around both these
// issues.
//
// 1. https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126
// 2. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer
/** @ignore */
export function protectArrayBufferFromWhatwgRefImpl(value) {
    const real = value.buffer;
    if (!real[kIsFakeBuffer]) {
        const fake = Object.create(real);
        Object.defineProperty(fake, kIsFakeBuffer, { value: true });
        Object.defineProperty(fake, 'slice', { value: () => real });
        Object.defineProperty(value, 'buffer', { value: fake });
    }
    return value;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy93aGF0d2cvaGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFFckIsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUVqRCx1RUFBdUU7QUFDdkUsdUVBQXVFO0FBQ3ZFLHFFQUFxRTtBQUNyRSw4Q0FBOEM7QUFDOUMsRUFBRTtBQUNGLDJFQUEyRTtBQUMzRSwyRUFBMkU7QUFDM0UsOEVBQThFO0FBQzlFLDhFQUE4RTtBQUM5RSw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLDRFQUE0RTtBQUM1RSx1RUFBdUU7QUFDdkUsNEVBQTRFO0FBQzVFLDBFQUEwRTtBQUMxRSw0RUFBNEU7QUFDNUUsVUFBVTtBQUNWLEVBQUU7QUFDRixrSUFBa0k7QUFDbEksMkdBQTJHO0FBRTNHLGNBQWM7QUFDZCxNQUFNLFVBQVUsbUNBQW1DLENBQUMsS0FBaUI7SUFDakUsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUMxQixJQUFJLENBQUUsSUFBWSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQy9CLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQU0sS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7S0FDL0Q7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDIiwiZmlsZSI6ImlwYy93aGF0d2cvaGFjay5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5jb25zdCBrSXNGYWtlQnVmZmVyID0gU3ltYm9sLmZvcignaXNGYWtlQnVmZmVyJyk7XG5cbi8vIFRoZSBXaGF0d2cgUmVhZGFibGVCeXRlU3RyZWFtIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvblsxXSBjb3BpZXMgdGhlXG4vLyB1bmRlcmx5aW5nIEFycmF5QnVmZmVyIGZvciBhbnkgVHlwZWRBcnJheSB0aGF0IHBhc3NlcyB0aHJvdWdoIGl0IGFuZFxuLy8gcmVkZWZpbmVzIHRoZSBvcmlnaW5hbCdzIGJ5dGVMZW5ndGggdG8gYmUgMCwgaW4gb3JkZXIgdG8gbWltaWMgdGhlXG4vLyB1bmZpbmlzaGVkIEFycmF5QnVmZmVyIFwidHJhbnNmZXJcIiBzcGVjIFsyXS5cbi8vXG4vLyBUaGlzIGlzIHByb2JsZW1hdGljIGluIG5vZGUsIHdoZXJlIGEgbnVtYmVyIG9mIEFQSXMgKGxpa2UgZnMuUmVhZFN0cmVhbSlcbi8vIGludGVybmFsbHkgYWxsb2NhdGUgYW5kIHNoYXJlIEFycmF5QnVmZmVycyBiZXR3ZWVuIHVucmVsYXRlZCBvcGVyYXRpb25zLlxuLy8gSXQncyBhbHNvIHByb2JsZW1hdGljIHdoZW4gdXNpbmcgdGhlIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbiBhcyBhIHBvbHlmaWxsXG4vLyBpbiB0aGUgYnJvd3Nlciwgc2luY2UgaXQgbGVhZHMgdG8gdGhlIHNhbWUgYnl0ZXMgYmVpbmcgY29waWVkIGF0IGV2ZXJ5IGxpbmtcbi8vIGluIGEgYnl0ZXN0cmVhbSBwaXBlbGluZS5cbi8vXG4vLyBUaGV5IGRvIHRoaXMgYmVjYXVzZSB0aGVyZSBhcmUgc29tZSB3ZWItcGxhdGZvcm0gdGVzdHMgdGhhdCBjaGVjayB3aGV0aGVyXG4vLyBieXRlTGVuZ3RoIGhhcyBiZWVuIHNldCB0byB6ZXJvIHRvIGluZmVyIHdoZXRoZXIgdGhlIGJ1ZmZlciBoYXMgYmVlblxuLy8gXCJ0cmFuc2ZlcnJlZFwiLiBXZSBkb24ndCBuZWVkIHRvIGNhcmUgYWJvdXQgdGhlc2UgdGVzdHMgaW4gcHJvZHVjdGlvbiwgYW5kXG4vLyB3ZSBhbHNvIHdpc2ggdG8gX25vdF8gY29weSBieXRlcyBhcyB0aGV5IHBhc3MgdGhyb3VnaCBhIHN0cmVhbSwgc28gdGhpc1xuLy8gZnVuY3Rpb24gZmFrZXMgb3V0IHRoZSByZWZlcmVuY2UgaW1wbGVtZW50YXRpb24gdG8gd29yayBhcm91bmQgYm90aCB0aGVzZVxuLy8gaXNzdWVzLlxuLy9cbi8vIDEuIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvc3RyZWFtcy9ibG9iLzBlYmU0YjA0MmU0NjdkOTg3NmQ4MGFlMDQ1ZGUzODQzMDkyYWQ3OTcvcmVmZXJlbmNlLWltcGxlbWVudGF0aW9uL2xpYi9oZWxwZXJzLmpzI0wxMjZcbi8vIDIuIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5QnVmZmVyL3RyYW5zZmVyXG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdGVjdEFycmF5QnVmZmVyRnJvbVdoYXR3Z1JlZkltcGwodmFsdWU6IFVpbnQ4QXJyYXkpIHtcbiAgICBjb25zdCByZWFsID0gdmFsdWUuYnVmZmVyO1xuICAgIGlmICghKHJlYWwgYXMgYW55KVtrSXNGYWtlQnVmZmVyXSkge1xuICAgICAgICBjb25zdCBmYWtlID0gT2JqZWN0LmNyZWF0ZShyZWFsKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZha2UsIGtJc0Zha2VCdWZmZXIsIHsgdmFsdWU6IHRydWUgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmYWtlLCAnc2xpY2UnLCB7IHZhbHVlOiAoKSA9PiByZWFsIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsdWUsICdidWZmZXInLCB7ICAgICB2YWx1ZTogZmFrZSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuIl19
