"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vector_1 = require("../../vector");
const recordbatch_1 = require("../../recordbatch");
const visitor_1 = require("../../visitor");
const metadata_1 = require("../metadata");
const data_1 = require("../../data");
const type_1 = require("../../type");
function* readRecordBatches(messages) {
    for (const { schema, message, loader } of messages) {
        yield* readRecordBatch(schema, message, loader);
    }
}
exports.readRecordBatches = readRecordBatches;
function readRecordBatchesAsync(messages) {
    return tslib_1.__asyncGenerator(this, arguments, function* readRecordBatchesAsync_1() {
        try {
            for (var messages_1 = tslib_1.__asyncValues(messages), messages_1_1; messages_1_1 = yield tslib_1.__await(messages_1.next()), !messages_1_1.done;) {
                const { schema, message, loader } = yield tslib_1.__await(messages_1_1.value);
                yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(readRecordBatch(schema, message, loader))));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (messages_1_1 && !messages_1_1.done && (_a = messages_1.return)) yield tslib_1.__await(_a.call(messages_1));
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    });
}
exports.readRecordBatchesAsync = readRecordBatchesAsync;
function* readRecordBatch(schema, message, loader) {
    if (metadata_1.Message.isRecordBatch(message)) {
        yield new recordbatch_1.RecordBatch(schema, message.length, loader.visitFields(schema.fields));
    }
    else if (metadata_1.Message.isDictionaryBatch(message)) {
        const dictionaryId = message.id;
        const dictionaries = loader.dictionaries;
        const dictionaryField = schema.dictionaries.get(dictionaryId);
        const dictionaryDataType = dictionaryField.type.dictionary;
        let dictionaryVector = vector_1.Vector.create(loader.visit(dictionaryDataType));
        if (message.isDelta && dictionaries.has(dictionaryId)) {
            dictionaryVector = dictionaries.get(dictionaryId).concat(dictionaryVector);
        }
        dictionaries.set(dictionaryId, dictionaryVector);
    }
}
exports.readRecordBatch = readRecordBatch;
class TypeDataLoader extends visitor_1.TypeVisitor {
    constructor(nodes, buffers, dictionaries) {
        super();
        this.nodes = nodes;
        this.buffers = buffers;
        this.dictionaries = dictionaries;
    }
    visitFields(fields) { return fields.map((field) => this.visit(field.type)); }
    visitNull(type) { return this.visitNullType(type); }
    visitInt(type) { return this.visitFlatType(type); }
    visitFloat(type) { return this.visitFlatType(type); }
    visitBinary(type) { return this.visitFlatList(type); }
    visitUtf8(type) { return this.visitFlatList(type); }
    visitBool(type) { return this.visitBoolType(type); }
    visitDecimal(type) { return this.visitFlatType(type); }
    visitDate(type) { return this.visitFlatType(type); }
    visitTime(type) { return this.visitFlatType(type); }
    visitTimestamp(type) { return this.visitFlatType(type); }
    visitInterval(type) { return this.visitFlatType(type); }
    visitList(type) { return this.visitListType(type); }
    visitStruct(type) { return this.visitNestedType(type); }
    visitUnion(type) { return this.visitUnionType(type); }
    visitFixedSizeBinary(type) { return this.visitFlatType(type); }
    visitFixedSizeList(type) { return this.visitFixedSizeListType(type); }
    visitMap(type) { return this.visitNestedType(type); }
    visitDictionary(type) {
        return new data_1.DictionaryData(type, this.dictionaries.get(type.id), this.visit(type.indicies));
    }
    getFieldMetadata() { return this.nodes.next().value; }
    getBufferMetadata() { return this.buffers.next().value; }
    readNullBitmap(type, nullCount, buffer = this.getBufferMetadata()) {
        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);
    }
    visitNullType(type, { length, nullCount } = this.getFieldMetadata()) {
        return new data_1.FlatData(type, length, this.readNullBitmap(type, nullCount), new Uint8Array(0), 0, nullCount);
    }
    visitFlatType(type, { length, nullCount } = this.getFieldMetadata()) {
        return new data_1.FlatData(type, length, this.readNullBitmap(type, nullCount), this.readData(type), 0, nullCount);
    }
    visitBoolType(type, { length, nullCount } = this.getFieldMetadata(), data) {
        return new data_1.BoolData(type, length, this.readNullBitmap(type, nullCount), data || this.readData(type), 0, nullCount);
    }
    visitFlatList(type, { length, nullCount } = this.getFieldMetadata()) {
        return new data_1.FlatListData(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type), 0, nullCount);
    }
    visitListType(type, { length, nullCount } = this.getFieldMetadata()) {
        return new data_1.ListData(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0].type), 0, nullCount);
    }
    visitFixedSizeListType(type, { length, nullCount } = this.getFieldMetadata()) {
        return new data_1.SingleNestedData(type, length, this.readNullBitmap(type, nullCount), this.visit(type.children[0].type), 0, nullCount);
    }
    visitNestedType(type, { length, nullCount } = this.getFieldMetadata()) {
        return new data_1.NestedData(type, length, this.readNullBitmap(type, nullCount), this.visitFields(type.children), 0, nullCount);
    }
    visitUnionType(type, { length, nullCount } = this.getFieldMetadata()) {
        return type.mode === type_1.UnionMode.Sparse ?
            new data_1.SparseUnionData(type, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount) :
            new data_1.DenseUnionData(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount);
    }
}
exports.TypeDataLoader = TypeDataLoader;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
