// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { flatbuffers } from 'flatbuffers';
import { TypeDataLoader } from './vector';
import { packBools } from '../../util/bit';
import * as IntUtil from '../../util/int';
import { TextEncoder } from 'text-encoding-utf-8';
import { RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata } from '../metadata';
import { Schema, Field, DataType, Dictionary, Null, Binary, Bool, Utf8, Decimal, Date_, Time, Timestamp, Interval, List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_, } from '../../type';
import { Int8, Uint8, Int16, Uint16, Int32, Uint32, Int64, Uint64, Float16, Float64, Float32, } from '../../type';
var Long = flatbuffers.Long;
export function* readJSON(json) {
    const schema = schemaFromJSON(json['schema']);
    const dictionaries = new Map();
    for (const batch of (json['dictionaries'] || [])) {
        const message = dictionaryBatchFromJSON(batch);
        yield {
            schema, message,
            loader: new JSONDataLoader(flattenDataSources(batch['data']['columns']), arrayIterator(message.nodes), arrayIterator(message.buffers), dictionaries)
        };
    }
    for (const batch of (json['batches'] || [])) {
        const message = recordBatchFromJSON(batch);
        yield {
            schema, message,
            loader: new JSONDataLoader(flattenDataSources(batch['columns']), arrayIterator(message.nodes), arrayIterator(message.buffers), dictionaries)
        };
    }
}
function* arrayIterator(arr) { yield* arr; }
function flattenDataSources(xs) {
    return (xs || []).reduce((buffers, column) => [
        ...buffers,
        ...(column['VALIDITY'] && [column['VALIDITY']] || []),
        ...(column['OFFSET'] && [column['OFFSET']] || []),
        ...(column['TYPE'] && [column['TYPE']] || []),
        ...(column['DATA'] && [column['DATA']] || []),
        ...flattenDataSources(column['children'])
    ], []);
}
const utf8Encoder = new TextEncoder('utf-8');
export class JSONDataLoader extends TypeDataLoader {
    constructor(sources, nodes, buffers, dictionaries) {
        super(nodes, buffers, dictionaries);
        this.sources = sources;
    }
    readNullBitmap(_type, nullCount, { offset } = this.getBufferMetadata()) {
        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);
    }
    readOffsets(_type, { offset } = this.getBufferMetadata()) {
        return new Int32Array(this.sources[offset]);
    }
    readTypeIds(_type, { offset } = this.getBufferMetadata()) {
        return new Int8Array(this.sources[offset]);
    }
    readData(type, { offset } = this.getBufferMetadata()) {
        const { sources } = this;
        if (DataType.isTimestamp(type) === true) {
            return new Uint8Array(int64DataFromJSON(sources[offset]));
        }
        else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {
            return new Uint8Array(int64DataFromJSON(sources[offset]));
        }
        else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {
            return new Uint8Array(int64DataFromJSON(sources[offset]));
        }
        else if (DataType.isDecimal(type) === true) {
            return new Uint8Array(decimalDataFromJSON(sources[offset]));
        }
        else if (DataType.isBinary(type) === true || DataType.isFixedSizeBinary(type) === true) {
            return new Uint8Array(binaryDataFromJSON(sources[offset]));
        }
        else if (DataType.isBool(type) === true) {
            return new Uint8Array(packBools(sources[offset]).buffer);
        }
        else if (DataType.isUtf8(type) === true) {
            return utf8Encoder.encode(sources[offset].join(''));
        }
        else {
            return toTypedArray(type.ArrayType, sources[offset].map((x) => +x));
        }
    }
}
function int64DataFromJSON(values) {
    const data = new Uint32Array(values.length * 2);
    for (let i = -1, n = values.length; ++i < n;) {
        // Force all values (even numbers) to be parsed as strings since
        // pulling out high and low bits seems to lose precision sometimes
        // For example:
        //     > -4613034156400212000 >>> 0
        //     721782784
        // The correct lower 32-bits are 721782752
        IntUtil.Int64.fromString(values[i].toString(), new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));
    }
    return data.buffer;
}
function decimalDataFromJSON(values) {
    const data = new Uint32Array(values.length * 4);
    for (let i = -1, n = values.length; ++i < n;) {
        IntUtil.Int128.fromString(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));
    }
    return data.buffer;
}
function binaryDataFromJSON(values) {
    // "DATA": ["49BC7D5B6C47D2","3F5FB6D9322026"]
    // There are definitely more efficient ways to do this... but it gets the
    // job done.
    const joined = values.join('');
    const data = new Uint8Array(joined.length / 2);
    for (let i = 0; i < joined.length; i += 2) {
        data[i >> 1] = parseInt(joined.substr(i, 2), 16);
    }
    return data.buffer;
}
import * as Schema_ from '../../fb/Schema';
var Type = Schema_.org.apache.arrow.flatbuf.Type;
var DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;
var TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;
var UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;
var Precision = Schema_.org.apache.arrow.flatbuf.Precision;
var IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;
var MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;
import { toTypedArray } from '../../data';
function schemaFromJSON(s) {
    const dictionaryFields = new Map();
    return new Schema(fieldsFromJSON(s['fields'], dictionaryFields), customMetadata(s['customMetadata']), MetadataVersion.V4, dictionaryFields);
}
function recordBatchFromJSON(b) {
    return new RecordBatchMetadata(MetadataVersion.V4, b['count'], fieldNodesFromJSON(b['columns']), buffersFromJSON(b['columns']));
}
function dictionaryBatchFromJSON(b) {
    return new DictionaryBatch(MetadataVersion.V4, recordBatchFromJSON(b['data']), b['id'], b['isDelta']);
}
function fieldsFromJSON(fs, dictionaryFields) {
    return (fs || [])
        .map((f) => fieldFromJSON(f, dictionaryFields))
        .filter((f) => f != null);
}
function fieldNodesFromJSON(xs) {
    return (xs || []).reduce((fieldNodes, column) => [
        ...fieldNodes,
        new FieldMetadata(new Long(column['count'], 0), new Long(nullCountFromJSON(column['VALIDITY']), 0)),
        ...fieldNodesFromJSON(column['children'])
    ], []);
}
function buffersFromJSON(xs, buffers = []) {
    for (let i = -1, n = (xs || []).length; ++i < n;) {
        const column = xs[i];
        column['VALIDITY'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));
        column['OFFSET'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));
        column['TYPE'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['TYPE'].length, 0)));
        column['DATA'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));
        buffers = buffersFromJSON(column['children'], buffers);
    }
    return buffers;
}
function nullCountFromJSON(validity) {
    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);
}
function fieldFromJSON(f, dictionaryFields) {
    let name = f['name'];
    let field;
    let nullable = f['nullable'];
    let dataType;
    let id, keysMeta, dictMeta;
    let metadata = customMetadata(f['customMetadata']);
    if (!dictionaryFields || !(dictMeta = f['dictionary'])) {
        if (dataType = typeFromJSON(f['type'], fieldsFromJSON(f['children'], dictionaryFields))) {
            field = new Field(name, dataType, nullable, metadata);
        }
    }
    else if (dataType = dictionaryFields.has(id = dictMeta['id'])
        ? dictionaryFields.get(id).type.dictionary
        : typeFromJSON(f['type'], fieldsFromJSON(f['children'], null))) {
        dataType = new Dictionary(dataType, 
        // a dictionary index defaults to signed 32 bit int if unspecified
        (keysMeta = dictMeta['indexType']) ? intFromJSON(keysMeta) : new Int32(), id, dictMeta['isOrdered']);
        field = new Field(name, dataType, nullable, metadata);
        dictionaryFields.has(id) || dictionaryFields.set(id, field);
    }
    return field || null;
}
function customMetadata(metadata) {
    return new Map(Object.entries(metadata || {}));
}
const namesToTypeMap = {
    'NONE': Type.NONE,
    'null': Type.Null,
    'int': Type.Int,
    'floatingpoint': Type.FloatingPoint,
    'binary': Type.Binary,
    'bool': Type.Bool,
    'utf8': Type.Utf8,
    'decimal': Type.Decimal,
    'date': Type.Date,
    'time': Type.Time,
    'timestamp': Type.Timestamp,
    'interval': Type.Interval,
    'list': Type.List,
    'struct': Type.Struct_,
    'union': Type.Union,
    'fixedsizebinary': Type.FixedSizeBinary,
    'fixedsizelist': Type.FixedSizeList,
    'map': Type.Map,
};
function typeFromJSON(t, children) {
    switch (namesToTypeMap[t['name']]) {
        case Type.NONE: return null;
        case Type.Null: return nullFromJSON(t);
        case Type.Int: return intFromJSON(t);
        case Type.FloatingPoint: return floatingPointFromJSON(t);
        case Type.Binary: return binaryFromJSON(t);
        case Type.Utf8: return utf8FromJSON(t);
        case Type.Bool: return boolFromJSON(t);
        case Type.Decimal: return decimalFromJSON(t);
        case Type.Date: return dateFromJSON(t);
        case Type.Time: return timeFromJSON(t);
        case Type.Timestamp: return timestampFromJSON(t);
        case Type.Interval: return intervalFromJSON(t);
        case Type.List: return listFromJSON(t, children || []);
        case Type.Struct_: return structFromJSON(t, children || []);
        case Type.Union: return unionFromJSON(t, children || []);
        case Type.FixedSizeBinary: return fixedSizeBinaryFromJSON(t);
        case Type.FixedSizeList: return fixedSizeListFromJSON(t, children || []);
        case Type.Map: return mapFromJSON(t, children || []);
    }
    throw new Error(`Unrecognized type ${t['name']}`);
}
function nullFromJSON(_type) { return new Null(); }
function intFromJSON(_type) {
    switch (_type['bitWidth']) {
        case 8: return _type['isSigned'] ? new Int8() : new Uint8();
        case 16: return _type['isSigned'] ? new Int16() : new Uint16();
        case 32: return _type['isSigned'] ? new Int32() : new Uint32();
        case 64: return _type['isSigned'] ? new Int64() : new Uint64();
    }
    return null;
}
function floatingPointFromJSON(_type) {
    switch (Precision[_type['precision']]) {
        case Precision.HALF: return new Float16();
        case Precision.SINGLE: return new Float32();
        case Precision.DOUBLE: return new Float64();
    }
    return null;
}
function binaryFromJSON(_type) { return new Binary(); }
function utf8FromJSON(_type) { return new Utf8(); }
function boolFromJSON(_type) { return new Bool(); }
function decimalFromJSON(_type) { return new Decimal(_type['scale'], _type['precision']); }
function dateFromJSON(_type) { return new Date_(DateUnit[_type['unit']]); }
function timeFromJSON(_type) { return new Time(TimeUnit[_type['unit']], _type['bitWidth']); }
function timestampFromJSON(_type) { return new Timestamp(TimeUnit[_type['unit']], _type['timezone']); }
function intervalFromJSON(_type) { return new Interval(IntervalUnit[_type['unit']]); }
function listFromJSON(_type, children) { return new List(children); }
function structFromJSON(_type, children) { return new Struct(children); }
function unionFromJSON(_type, children) { return new Union(UnionMode[_type['mode']], (_type['typeIds'] || []), children); }
function fixedSizeBinaryFromJSON(_type) { return new FixedSizeBinary(_type['byteWidth']); }
function fixedSizeListFromJSON(_type, children) { return new FixedSizeList(_type['listSize'], children); }
function mapFromJSON(_type, children) { return new Map_(_type['keysSorted'], children); }

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QVUsQ0FBQyxDQUFDLENBQUMsQ0FBeUIsQ0FBQztBQUNwSywwQkFBaUMsS0FBVSxJQUF1QixNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBUSxDQUFDLENBQUMsQ0FBeUMsQ0FBQztBQUNwSyxzQkFBaUMsS0FBVSxFQUFFLFFBQWlCLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQXVFLENBQUM7QUFDcEssd0JBQWlDLEtBQVUsRUFBRSxRQUFpQixJQUFJLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFxRSxDQUFDO0FBQ3BLLHVCQUFpQyxLQUFVLEVBQUUsUUFBaUIsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBUSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwSyxpQ0FBaUMsS0FBVSxJQUF1QixNQUFNLENBQUMsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBa0QsQ0FBQztBQUNwSywrQkFBaUMsS0FBVSxFQUFFLFFBQWlCLElBQUksTUFBTSxDQUFDLElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUEyQyxDQUFDO0FBQ3BLLHFCQUFpQyxLQUFVLEVBQUUsUUFBaUIsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQWtELENBQUMiLCJmaWxlIjoiaXBjL3JlYWRlci9qc29uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uLy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBmbGF0YnVmZmVycyB9IGZyb20gJ2ZsYXRidWZmZXJzJztcbmltcG9ydCB7IFR5cGVEYXRhTG9hZGVyIH0gZnJvbSAnLi92ZWN0b3InO1xuaW1wb3J0IHsgcGFja0Jvb2xzIH0gZnJvbSAnLi4vLi4vdXRpbC9iaXQnO1xuaW1wb3J0ICogYXMgSW50VXRpbCBmcm9tICcuLi8uLi91dGlsL2ludCc7XG5pbXBvcnQgeyBUZXh0RW5jb2RlciB9IGZyb20gJ3RleHQtZW5jb2RpbmctdXRmLTgnO1xuaW1wb3J0IHsgUmVjb3JkQmF0Y2hNZXRhZGF0YSwgRGljdGlvbmFyeUJhdGNoLCBCdWZmZXJNZXRhZGF0YSwgRmllbGRNZXRhZGF0YSB9IGZyb20gJy4uL21ldGFkYXRhJztcbmltcG9ydCB7XG4gICAgU2NoZW1hLCBGaWVsZCxcbiAgICBEYXRhVHlwZSwgRGljdGlvbmFyeSxcbiAgICBOdWxsLCBUaW1lQml0V2lkdGgsXG4gICAgQmluYXJ5LCBCb29sLCBVdGY4LCBEZWNpbWFsLFxuICAgIERhdGVfLCBUaW1lLCBUaW1lc3RhbXAsIEludGVydmFsLFxuICAgIExpc3QsIFN0cnVjdCwgVW5pb24sIEZpeGVkU2l6ZUJpbmFyeSwgRml4ZWRTaXplTGlzdCwgTWFwXyxcbn0gZnJvbSAnLi4vLi4vdHlwZSc7XG5cbmltcG9ydCB7XG4gICAgSW50OCwgIFVpbnQ4LFxuICAgIEludDE2LCBVaW50MTYsXG4gICAgSW50MzIsIFVpbnQzMixcbiAgICBJbnQ2NCwgVWludDY0LFxuICAgIEZsb2F0MTYsIEZsb2F0NjQsIEZsb2F0MzIsXG59IGZyb20gJy4uLy4uL3R5cGUnO1xuXG5pbXBvcnQgTG9uZyA9IGZsYXRidWZmZXJzLkxvbmc7XG5cbmV4cG9ydCBmdW5jdGlvbiogcmVhZEpTT04oanNvbjogYW55KSB7XG4gICAgY29uc3Qgc2NoZW1hID0gc2NoZW1hRnJvbUpTT04oanNvblsnc2NoZW1hJ10pO1xuICAgIGNvbnN0IGRpY3Rpb25hcmllcyA9IG5ldyBNYXA8bnVtYmVyLCBWZWN0b3I+KCk7XG4gICAgZm9yIChjb25zdCBiYXRjaCBvZiAoanNvblsnZGljdGlvbmFyaWVzJ10gfHwgW10pKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBkaWN0aW9uYXJ5QmF0Y2hGcm9tSlNPTihiYXRjaCk7XG4gICAgICAgIHlpZWxkIHtcbiAgICAgICAgICAgIHNjaGVtYSwgbWVzc2FnZSxcbiAgICAgICAgICAgIGxvYWRlcjogbmV3IEpTT05EYXRhTG9hZGVyKFxuICAgICAgICAgICAgICAgIGZsYXR0ZW5EYXRhU291cmNlcyhiYXRjaFsnZGF0YSddWydjb2x1bW5zJ10pLFxuICAgICAgICAgICAgICAgIGFycmF5SXRlcmF0b3IobWVzc2FnZS5ub2RlcyksXG4gICAgICAgICAgICAgICAgYXJyYXlJdGVyYXRvcihtZXNzYWdlLmJ1ZmZlcnMpLFxuICAgICAgICAgICAgICAgIGRpY3Rpb25hcmllc1xuICAgICAgICAgICAgKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGJhdGNoIG9mIChqc29uWydiYXRjaGVzJ10gfHwgW10pKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSByZWNvcmRCYXRjaEZyb21KU09OKGJhdGNoKTtcbiAgICAgICAgeWllbGQge1xuICAgICAgICAgICAgc2NoZW1hLCBtZXNzYWdlLFxuICAgICAgICAgICAgbG9hZGVyOiBuZXcgSlNPTkRhdGFMb2FkZXIoXG4gICAgICAgICAgICAgICAgZmxhdHRlbkRhdGFTb3VyY2VzKGJhdGNoWydjb2x1bW5zJ10pLFxuICAgICAgICAgICAgICAgIGFycmF5SXRlcmF0b3IobWVzc2FnZS5ub2RlcyksXG4gICAgICAgICAgICAgICAgYXJyYXlJdGVyYXRvcihtZXNzYWdlLmJ1ZmZlcnMpLFxuICAgICAgICAgICAgICAgIGRpY3Rpb25hcmllc1xuICAgICAgICAgICAgKVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24qIGFycmF5SXRlcmF0b3IoYXJyOiBBcnJheTxhbnk+KSB7IHlpZWxkKiBhcnI7IH1cbmZ1bmN0aW9uIGZsYXR0ZW5EYXRhU291cmNlcyh4czogYW55W10pOiBhbnlbXVtdIHtcbiAgICByZXR1cm4gKHhzIHx8IFtdKS5yZWR1Y2U8YW55W11bXT4oKGJ1ZmZlcnMsIGNvbHVtbjogYW55KSA9PiBbXG4gICAgICAgIC4uLmJ1ZmZlcnMsXG4gICAgICAgIC4uLihjb2x1bW5bJ1ZBTElESVRZJ10gJiYgW2NvbHVtblsnVkFMSURJVFknXV0gfHwgW10pLFxuICAgICAgICAuLi4oY29sdW1uWydPRkZTRVQnXSAmJiBbY29sdW1uWydPRkZTRVQnXV0gfHwgW10pLFxuICAgICAgICAuLi4oY29sdW1uWydUWVBFJ10gJiYgW2NvbHVtblsnVFlQRSddXSB8fCBbXSksXG4gICAgICAgIC4uLihjb2x1bW5bJ0RBVEEnXSAmJiBbY29sdW1uWydEQVRBJ11dIHx8IFtdKSxcbiAgICAgICAgLi4uZmxhdHRlbkRhdGFTb3VyY2VzKGNvbHVtblsnY2hpbGRyZW4nXSlcbiAgICBdLCBbXSBhcyBhbnlbXVtdKTtcbn1cblxuY29uc3QgdXRmOEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoJ3V0Zi04Jyk7XG5cbmV4cG9ydCBjbGFzcyBKU09ORGF0YUxvYWRlciBleHRlbmRzIFR5cGVEYXRhTG9hZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNvdXJjZXM6IGFueVtdW10sIG5vZGVzOiBJdGVyYXRvcjxGaWVsZE1ldGFkYXRhPiwgYnVmZmVyczogSXRlcmF0b3I8QnVmZmVyTWV0YWRhdGE+LCBkaWN0aW9uYXJpZXM6IE1hcDxudW1iZXIsIFZlY3Rvcj4pIHtcbiAgICAgICAgc3VwZXIobm9kZXMsIGJ1ZmZlcnMsIGRpY3Rpb25hcmllcyk7XG4gICAgfVxuICAgIHByb3RlY3RlZCByZWFkTnVsbEJpdG1hcDxUIGV4dGVuZHMgRGF0YVR5cGU+KF90eXBlOiBULCBudWxsQ291bnQ6IG51bWJlciwgeyBvZmZzZXQgfSA9IHRoaXMuZ2V0QnVmZmVyTWV0YWRhdGEoKSkge1xuICAgICAgICByZXR1cm4gbnVsbENvdW50IDw9IDAgPyBuZXcgVWludDhBcnJheSgwKSA6IHBhY2tCb29scyh0aGlzLnNvdXJjZXNbb2Zmc2V0XSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCByZWFkT2Zmc2V0czxUIGV4dGVuZHMgRGF0YVR5cGU+KF90eXBlOiBULCB7IG9mZnNldCB9OiBCdWZmZXJNZXRhZGF0YSA9IHRoaXMuZ2V0QnVmZmVyTWV0YWRhdGEoKSkge1xuICAgICAgICByZXR1cm4gbmV3IEludDMyQXJyYXkodGhpcy5zb3VyY2VzW29mZnNldF0pO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgcmVhZFR5cGVJZHM8VCBleHRlbmRzIERhdGFUeXBlPihfdHlwZTogVCwgeyBvZmZzZXQgfTogQnVmZmVyTWV0YWRhdGEgPSB0aGlzLmdldEJ1ZmZlck1ldGFkYXRhKCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnQ4QXJyYXkodGhpcy5zb3VyY2VzW29mZnNldF0pO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgcmVhZERhdGE8VCBleHRlbmRzIERhdGFUeXBlPih0eXBlOiBULCB7IG9mZnNldCB9OiBCdWZmZXJNZXRhZGF0YSA9IHRoaXMuZ2V0QnVmZmVyTWV0YWRhdGEoKSkge1xuICAgICAgICBjb25zdCB7IHNvdXJjZXMgfSA9IHRoaXM7XG4gICAgICAgIGlmIChEYXRhVHlwZS5pc1RpbWVzdGFtcCh0eXBlKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGludDY0RGF0YUZyb21KU09OKHNvdXJjZXNbb2Zmc2V0XSBhcyBzdHJpbmdbXSkpO1xuICAgICAgICB9IGVsc2UgaWYgKChEYXRhVHlwZS5pc0ludCh0eXBlKSB8fCBEYXRhVHlwZS5pc1RpbWUodHlwZSkpICYmIHR5cGUuYml0V2lkdGggPT09IDY0KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaW50NjREYXRhRnJvbUpTT04oc291cmNlc1tvZmZzZXRdIGFzIHN0cmluZ1tdKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoRGF0YVR5cGUuaXNEYXRlKHR5cGUpICYmIHR5cGUudW5pdCA9PT0gRGF0ZVVuaXQuTUlMTElTRUNPTkQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShpbnQ2NERhdGFGcm9tSlNPTihzb3VyY2VzW29mZnNldF0gYXMgc3RyaW5nW10pKTtcbiAgICAgICAgfSBlbHNlIGlmIChEYXRhVHlwZS5pc0RlY2ltYWwodHlwZSkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShkZWNpbWFsRGF0YUZyb21KU09OKHNvdXJjZXNbb2Zmc2V0XSBhcyBzdHJpbmdbXSkpO1xuICAgICAgICB9IGVsc2UgaWYgKERhdGFUeXBlLmlzQmluYXJ5KHR5cGUpID09PSB0cnVlIHx8IERhdGFUeXBlLmlzRml4ZWRTaXplQmluYXJ5KHR5cGUpID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYmluYXJ5RGF0YUZyb21KU09OKHNvdXJjZXNbb2Zmc2V0XSBhcyBzdHJpbmdbXSkpO1xuICAgICAgICB9IGVsc2UgaWYgKERhdGFUeXBlLmlzQm9vbCh0eXBlKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHBhY2tCb29scyhzb3VyY2VzW29mZnNldF0gYXMgbnVtYmVyW10pLmJ1ZmZlcik7XG4gICAgICAgIH0gZWxzZSBpZiAoRGF0YVR5cGUuaXNVdGY4KHR5cGUpID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdXRmOEVuY29kZXIuZW5jb2RlKChzb3VyY2VzW29mZnNldF0gYXMgc3RyaW5nW10pLmpvaW4oJycpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0b1R5cGVkQXJyYXkodHlwZS5BcnJheVR5cGUsIHNvdXJjZXNbb2Zmc2V0XS5tYXAoKHgpID0+ICt4KSkgYXMgYW55O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbnQ2NERhdGFGcm9tSlNPTih2YWx1ZXM6IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBVaW50MzJBcnJheSh2YWx1ZXMubGVuZ3RoICogMik7XG4gICAgZm9yIChsZXQgaSA9IC0xLCBuID0gdmFsdWVzLmxlbmd0aDsgKytpIDwgbjspIHtcbiAgICAgICAgLy8gRm9yY2UgYWxsIHZhbHVlcyAoZXZlbiBudW1iZXJzKSB0byBiZSBwYXJzZWQgYXMgc3RyaW5ncyBzaW5jZVxuICAgICAgICAvLyBwdWxsaW5nIG91dCBoaWdoIGFuZCBsb3cgYml0cyBzZWVtcyB0byBsb3NlIHByZWNpc2lvbiBzb21ldGltZXNcbiAgICAgICAgLy8gRm9yIGV4YW1wbGU6XG4gICAgICAgIC8vICAgICA+IC00NjEzMDM0MTU2NDAwMjEyMDAwID4+PiAwXG4gICAgICAgIC8vICAgICA3MjE3ODI3ODRcbiAgICAgICAgLy8gVGhlIGNvcnJlY3QgbG93ZXIgMzItYml0cyBhcmUgNzIxNzgyNzUyXG4gICAgICAgIEludFV0aWwuSW50NjQuZnJvbVN0cmluZyh2YWx1ZXNbaV0udG9TdHJpbmcoKSwgbmV3IFVpbnQzMkFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQgKyAyICogaSAqIDQsIDIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xufVxuXG5mdW5jdGlvbiBkZWNpbWFsRGF0YUZyb21KU09OKHZhbHVlczogc3RyaW5nW10pIHtcbiAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQzMkFycmF5KHZhbHVlcy5sZW5ndGggKiA0KTtcbiAgICBmb3IgKGxldCBpID0gLTEsIG4gPSB2YWx1ZXMubGVuZ3RoOyArK2kgPCBuOykge1xuICAgICAgICBJbnRVdGlsLkludDEyOC5mcm9tU3RyaW5nKHZhbHVlc1tpXSwgbmV3IFVpbnQzMkFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQgKyA0ICogNCAqIGksIDQpKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xufVxuXG5mdW5jdGlvbiBiaW5hcnlEYXRhRnJvbUpTT04odmFsdWVzOiBzdHJpbmdbXSkge1xuICAgIC8vIFwiREFUQVwiOiBbXCI0OUJDN0Q1QjZDNDdEMlwiLFwiM0Y1RkI2RDkzMjIwMjZcIl1cbiAgICAvLyBUaGVyZSBhcmUgZGVmaW5pdGVseSBtb3JlIGVmZmljaWVudCB3YXlzIHRvIGRvIHRoaXMuLi4gYnV0IGl0IGdldHMgdGhlXG4gICAgLy8gam9iIGRvbmUuXG4gICAgY29uc3Qgam9pbmVkID0gdmFsdWVzLmpvaW4oJycpO1xuICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheShqb2luZWQubGVuZ3RoIC8gMik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBqb2luZWQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgZGF0YVtpID4+IDFdID0gcGFyc2VJbnQoam9pbmVkLnN1YnN0cihpLCAyKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YS5idWZmZXI7XG59XG5cbmltcG9ydCAqIGFzIFNjaGVtYV8gZnJvbSAnLi4vLi4vZmIvU2NoZW1hJztcbmltcG9ydCBUeXBlID0gU2NoZW1hXy5vcmcuYXBhY2hlLmFycm93LmZsYXRidWYuVHlwZTtcbmltcG9ydCBEYXRlVW5pdCA9IFNjaGVtYV8ub3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLkRhdGVVbml0O1xuaW1wb3J0IFRpbWVVbml0ID0gU2NoZW1hXy5vcmcuYXBhY2hlLmFycm93LmZsYXRidWYuVGltZVVuaXQ7XG5pbXBvcnQgVW5pb25Nb2RlID0gU2NoZW1hXy5vcmcuYXBhY2hlLmFycm93LmZsYXRidWYuVW5pb25Nb2RlO1xuaW1wb3J0IFByZWNpc2lvbiA9IFNjaGVtYV8ub3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLlByZWNpc2lvbjtcbmltcG9ydCBJbnRlcnZhbFVuaXQgPSBTY2hlbWFfLm9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5JbnRlcnZhbFVuaXQ7XG5pbXBvcnQgTWV0YWRhdGFWZXJzaW9uID0gU2NoZW1hXy5vcmcuYXBhY2hlLmFycm93LmZsYXRidWYuTWV0YWRhdGFWZXJzaW9uO1xuaW1wb3J0IHsgdG9UeXBlZEFycmF5IH0gZnJvbSAnLi4vLi4vZGF0YSc7XG5cbmZ1bmN0aW9uIHNjaGVtYUZyb21KU09OKHM6IGFueSk6IFNjaGVtYSB7XG4gICAgY29uc3QgZGljdGlvbmFyeUZpZWxkcyA9IG5ldyBNYXA8bnVtYmVyLCBGaWVsZDxEaWN0aW9uYXJ5Pj4oKTtcbiAgICByZXR1cm4gbmV3IFNjaGVtYShcbiAgICAgICAgZmllbGRzRnJvbUpTT04oc1snZmllbGRzJ10sIGRpY3Rpb25hcnlGaWVsZHMpLFxuICAgICAgICBjdXN0b21NZXRhZGF0YShzWydjdXN0b21NZXRhZGF0YSddKSxcbiAgICAgICAgTWV0YWRhdGFWZXJzaW9uLlY0LCBkaWN0aW9uYXJ5RmllbGRzXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gcmVjb3JkQmF0Y2hGcm9tSlNPTihiOiBhbnkpOiBSZWNvcmRCYXRjaE1ldGFkYXRhIHtcbiAgICByZXR1cm4gbmV3IFJlY29yZEJhdGNoTWV0YWRhdGEoXG4gICAgICAgIE1ldGFkYXRhVmVyc2lvbi5WNCxcbiAgICAgICAgYlsnY291bnQnXSxcbiAgICAgICAgZmllbGROb2Rlc0Zyb21KU09OKGJbJ2NvbHVtbnMnXSksXG4gICAgICAgIGJ1ZmZlcnNGcm9tSlNPTihiWydjb2x1bW5zJ10pXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gZGljdGlvbmFyeUJhdGNoRnJvbUpTT04oYjogYW55KTogRGljdGlvbmFyeUJhdGNoIHtcbiAgICByZXR1cm4gbmV3IERpY3Rpb25hcnlCYXRjaChcbiAgICAgICAgTWV0YWRhdGFWZXJzaW9uLlY0LFxuICAgICAgICByZWNvcmRCYXRjaEZyb21KU09OKGJbJ2RhdGEnXSksXG4gICAgICAgIGJbJ2lkJ10sIGJbJ2lzRGVsdGEnXVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGZpZWxkc0Zyb21KU09OKGZzOiBhbnlbXSwgZGljdGlvbmFyeUZpZWxkczogTWFwPG51bWJlciwgRmllbGQ8RGljdGlvbmFyeT4+IHwgbnVsbCk6IEZpZWxkW10ge1xuICAgIHJldHVybiAoZnMgfHwgW10pXG4gICAgICAgIC5tYXAoKGYpID0+IGZpZWxkRnJvbUpTT04oZiwgZGljdGlvbmFyeUZpZWxkcykpXG4gICAgICAgIC5maWx0ZXIoKGYpID0+IGYgIT0gbnVsbCkgYXMgRmllbGRbXTtcbn1cblxuZnVuY3Rpb24gZmllbGROb2Rlc0Zyb21KU09OKHhzOiBhbnlbXSk6IEZpZWxkTWV0YWRhdGFbXSB7XG4gICAgcmV0dXJuICh4cyB8fCBbXSkucmVkdWNlPEZpZWxkTWV0YWRhdGFbXT4oKGZpZWxkTm9kZXMsIGNvbHVtbjogYW55KSA9PiBbXG4gICAgICAgIC4uLmZpZWxkTm9kZXMsXG4gICAgICAgIG5ldyBGaWVsZE1ldGFkYXRhKFxuICAgICAgICAgICAgbmV3IExvbmcoY29sdW1uWydjb3VudCddLCAwKSxcbiAgICAgICAgICAgIG5ldyBMb25nKG51bGxDb3VudEZyb21KU09OKGNvbHVtblsnVkFMSURJVFknXSksIDApXG4gICAgICAgICksXG4gICAgICAgIC4uLmZpZWxkTm9kZXNGcm9tSlNPTihjb2x1bW5bJ2NoaWxkcmVuJ10pXG4gICAgXSwgW10gYXMgRmllbGRNZXRhZGF0YVtdKTtcbn1cblxuZnVuY3Rpb24gYnVmZmVyc0Zyb21KU09OKHhzOiBhbnlbXSwgYnVmZmVyczogQnVmZmVyTWV0YWRhdGFbXSA9IFtdKTogQnVmZmVyTWV0YWRhdGFbXSB7XG4gICAgZm9yIChsZXQgaSA9IC0xLCBuID0gKHhzIHx8IFtdKS5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgIGNvbnN0IGNvbHVtbiA9IHhzW2ldO1xuICAgICAgICBjb2x1bW5bJ1ZBTElESVRZJ10gJiYgYnVmZmVycy5wdXNoKG5ldyBCdWZmZXJNZXRhZGF0YShuZXcgTG9uZyhidWZmZXJzLmxlbmd0aCwgMCksIG5ldyBMb25nKGNvbHVtblsnVkFMSURJVFknXS5sZW5ndGgsIDApKSk7XG4gICAgICAgIGNvbHVtblsnT0ZGU0VUJ10gJiYgYnVmZmVycy5wdXNoKG5ldyBCdWZmZXJNZXRhZGF0YShuZXcgTG9uZyhidWZmZXJzLmxlbmd0aCwgMCksIG5ldyBMb25nKGNvbHVtblsnT0ZGU0VUJ10ubGVuZ3RoLCAwKSkpO1xuICAgICAgICBjb2x1bW5bJ1RZUEUnXSAmJiBidWZmZXJzLnB1c2gobmV3IEJ1ZmZlck1ldGFkYXRhKG5ldyBMb25nKGJ1ZmZlcnMubGVuZ3RoLCAwKSwgbmV3IExvbmcoY29sdW1uWydUWVBFJ10ubGVuZ3RoLCAwKSkpO1xuICAgICAgICBjb2x1bW5bJ0RBVEEnXSAmJiBidWZmZXJzLnB1c2gobmV3IEJ1ZmZlck1ldGFkYXRhKG5ldyBMb25nKGJ1ZmZlcnMubGVuZ3RoLCAwKSwgbmV3IExvbmcoY29sdW1uWydEQVRBJ10ubGVuZ3RoLCAwKSkpO1xuICAgICAgICBidWZmZXJzID0gYnVmZmVyc0Zyb21KU09OKGNvbHVtblsnY2hpbGRyZW4nXSwgYnVmZmVycyk7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXJzO1xufVxuXG5mdW5jdGlvbiBudWxsQ291bnRGcm9tSlNPTih2YWxpZGl0eTogbnVtYmVyW10pIHtcbiAgICByZXR1cm4gKHZhbGlkaXR5IHx8IFtdKS5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyArKHZhbCA9PT0gMCksIDApO1xufVxuXG5mdW5jdGlvbiBmaWVsZEZyb21KU09OKGY6IGFueSwgZGljdGlvbmFyeUZpZWxkczogTWFwPG51bWJlciwgRmllbGQ8RGljdGlvbmFyeT4+IHwgbnVsbCkge1xuICAgIGxldCBuYW1lID0gZlsnbmFtZSddO1xuICAgIGxldCBmaWVsZDogRmllbGQgfCB2b2lkO1xuICAgIGxldCBudWxsYWJsZSA9IGZbJ251bGxhYmxlJ107XG4gICAgbGV0IGRhdGFUeXBlOiBEYXRhVHlwZTxhbnk+IHwgbnVsbDtcbiAgICBsZXQgaWQ6IG51bWJlciwga2V5c01ldGE6IGFueSwgZGljdE1ldGE6IGFueTtcbiAgICBsZXQgbWV0YWRhdGEgPSBjdXN0b21NZXRhZGF0YShmWydjdXN0b21NZXRhZGF0YSddKTtcbiAgICBpZiAoIWRpY3Rpb25hcnlGaWVsZHMgfHwgIShkaWN0TWV0YSA9IGZbJ2RpY3Rpb25hcnknXSkpIHtcbiAgICAgICAgaWYgKGRhdGFUeXBlID0gdHlwZUZyb21KU09OKGZbJ3R5cGUnXSwgZmllbGRzRnJvbUpTT04oZlsnY2hpbGRyZW4nXSwgZGljdGlvbmFyeUZpZWxkcykpKSB7XG4gICAgICAgICAgICBmaWVsZCA9IG5ldyBGaWVsZChuYW1lLCBkYXRhVHlwZSwgbnVsbGFibGUsIG1ldGFkYXRhKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGF0YVR5cGUgPSBkaWN0aW9uYXJ5RmllbGRzLmhhcyhpZCA9IGRpY3RNZXRhWydpZCddKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBkaWN0aW9uYXJ5RmllbGRzLmdldChpZCkhLnR5cGUuZGljdGlvbmFyeVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0eXBlRnJvbUpTT04oZlsndHlwZSddLCBmaWVsZHNGcm9tSlNPTihmWydjaGlsZHJlbiddLCBudWxsKSkpIHtcbiAgICAgICAgZGF0YVR5cGUgPSBuZXcgRGljdGlvbmFyeShkYXRhVHlwZSxcbiAgICAgICAgICAgIC8vIGEgZGljdGlvbmFyeSBpbmRleCBkZWZhdWx0cyB0byBzaWduZWQgMzIgYml0IGludCBpZiB1bnNwZWNpZmllZFxuICAgICAgICAgICAgKGtleXNNZXRhID0gZGljdE1ldGFbJ2luZGV4VHlwZSddKSA/IGludEZyb21KU09OKGtleXNNZXRhKSEgOiBuZXcgSW50MzIoKSxcbiAgICAgICAgICAgIGlkLCBkaWN0TWV0YVsnaXNPcmRlcmVkJ11cbiAgICAgICAgKTtcbiAgICAgICAgZmllbGQgPSBuZXcgRmllbGQobmFtZSwgZGF0YVR5cGUsIG51bGxhYmxlLCBtZXRhZGF0YSk7XG4gICAgICAgIGRpY3Rpb25hcnlGaWVsZHMuaGFzKGlkKSB8fCBkaWN0aW9uYXJ5RmllbGRzLnNldChpZCwgZmllbGQgYXMgRmllbGQ8RGljdGlvbmFyeT4pO1xuICAgIH1cbiAgICByZXR1cm4gZmllbGQgfHwgbnVsbDtcbn1cblxuZnVuY3Rpb24gY3VzdG9tTWV0YWRhdGEobWV0YWRhdGE/OiBhbnkpIHtcbiAgICByZXR1cm4gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oT2JqZWN0LmVudHJpZXMobWV0YWRhdGEgfHwge30pKTtcbn1cblxuY29uc3QgbmFtZXNUb1R5cGVNYXA6IHsgW246IHN0cmluZ106IFR5cGUgfSAgPSB7XG4gICAgJ05PTkUnOiBUeXBlLk5PTkUsXG4gICAgJ251bGwnOiBUeXBlLk51bGwsXG4gICAgJ2ludCc6IFR5cGUuSW50LFxuICAgICdmbG9hdGluZ3BvaW50JzogVHlwZS5GbG9hdGluZ1BvaW50LFxuICAgICdiaW5hcnknOiBUeXBlLkJpbmFyeSxcbiAgICAnYm9vbCc6IFR5cGUuQm9vbCxcbiAgICAndXRmOCc6IFR5cGUuVXRmOCxcbiAgICAnZGVjaW1hbCc6IFR5cGUuRGVjaW1hbCxcbiAgICAnZGF0ZSc6IFR5cGUuRGF0ZSxcbiAgICAndGltZSc6IFR5cGUuVGltZSxcbiAgICAndGltZXN0YW1wJzogVHlwZS5UaW1lc3RhbXAsXG4gICAgJ2ludGVydmFsJzogVHlwZS5JbnRlcnZhbCxcbiAgICAnbGlzdCc6IFR5cGUuTGlzdCxcbiAgICAnc3RydWN0JzogVHlwZS5TdHJ1Y3RfLFxuICAgICd1bmlvbic6IFR5cGUuVW5pb24sXG4gICAgJ2ZpeGVkc2l6ZWJpbmFyeSc6IFR5cGUuRml4ZWRTaXplQmluYXJ5LFxuICAgICdmaXhlZHNpemVsaXN0JzogVHlwZS5GaXhlZFNpemVMaXN0LFxuICAgICdtYXAnOiBUeXBlLk1hcCxcbn07XG5cbmZ1bmN0aW9uIHR5cGVGcm9tSlNPTih0OiBhbnksIGNoaWxkcmVuPzogRmllbGRbXSkge1xuICAgIHN3aXRjaCAobmFtZXNUb1R5cGVNYXBbdFsnbmFtZSddXSkge1xuICAgICAgICBjYXNlIFR5cGUuTk9ORTogcmV0dXJuIG51bGw7XG4gICAgICAgIGNhc2UgVHlwZS5OdWxsOiByZXR1cm4gbnVsbEZyb21KU09OKHQpO1xuICAgICAgICBjYXNlIFR5cGUuSW50OiByZXR1cm4gaW50RnJvbUpTT04odCk7XG4gICAgICAgIGNhc2UgVHlwZS5GbG9hdGluZ1BvaW50OiByZXR1cm4gZmxvYXRpbmdQb2ludEZyb21KU09OKHQpO1xuICAgICAgICBjYXNlIFR5cGUuQmluYXJ5OiByZXR1cm4gYmluYXJ5RnJvbUpTT04odCk7XG4gICAgICAgIGNhc2UgVHlwZS5VdGY4OiByZXR1cm4gdXRmOEZyb21KU09OKHQpO1xuICAgICAgICBjYXNlIFR5cGUuQm9vbDogcmV0dXJuIGJvb2xGcm9tSlNPTih0KTtcbiAgICAgICAgY2FzZSBUeXBlLkRlY2ltYWw6IHJldHVybiBkZWNpbWFsRnJvbUpTT04odCk7XG4gICAgICAgIGNhc2UgVHlwZS5EYXRlOiByZXR1cm4gZGF0ZUZyb21KU09OKHQpO1xuICAgICAgICBjYXNlIFR5cGUuVGltZTogcmV0dXJuIHRpbWVGcm9tSlNPTih0KTtcbiAgICAgICAgY2FzZSBUeXBlLlRpbWVzdGFtcDogcmV0dXJuIHRpbWVzdGFtcEZyb21KU09OKHQpO1xuICAgICAgICBjYXNlIFR5cGUuSW50ZXJ2YWw6IHJldHVybiBpbnRlcnZhbEZyb21KU09OKHQpO1xuICAgICAgICBjYXNlIFR5cGUuTGlzdDogcmV0dXJuIGxpc3RGcm9tSlNPTih0LCBjaGlsZHJlbiB8fCBbXSk7XG4gICAgICAgIGNhc2UgVHlwZS5TdHJ1Y3RfOiByZXR1cm4gc3RydWN0RnJvbUpTT04odCwgY2hpbGRyZW4gfHwgW10pO1xuICAgICAgICBjYXNlIFR5cGUuVW5pb246IHJldHVybiB1bmlvbkZyb21KU09OKHQsIGNoaWxkcmVuIHx8IFtdKTtcbiAgICAgICAgY2FzZSBUeXBlLkZpeGVkU2l6ZUJpbmFyeTogcmV0dXJuIGZpeGVkU2l6ZUJpbmFyeUZyb21KU09OKHQpO1xuICAgICAgICBjYXNlIFR5cGUuRml4ZWRTaXplTGlzdDogcmV0dXJuIGZpeGVkU2l6ZUxpc3RGcm9tSlNPTih0LCBjaGlsZHJlbiB8fCBbXSk7XG4gICAgICAgIGNhc2UgVHlwZS5NYXA6IHJldHVybiBtYXBGcm9tSlNPTih0LCBjaGlsZHJlbiB8fCBbXSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5yZWNvZ25pemVkIHR5cGUgJHt0WyduYW1lJ119YCk7XG59XG5cbmZ1bmN0aW9uIG51bGxGcm9tSlNPTiAgICAgICAgICAgKF90eXBlOiBhbnkpICAgICAgICAgICAgICAgICAgICB7IHJldHVybiBuZXcgTnVsbCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5mdW5jdGlvbiBpbnRGcm9tSlNPTiAgICAgICAgICAgIChfdHlwZTogYW55KSAgICAgICAgICAgICAgICAgICAgeyBzd2l0Y2ggKF90eXBlWydiaXRXaWR0aCddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAgODogcmV0dXJuIF90eXBlWydpc1NpZ25lZCddID8gbmV3ICBJbnQ4KCkgOiBuZXcgIFVpbnQ4KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNjogcmV0dXJuIF90eXBlWydpc1NpZ25lZCddID8gbmV3IEludDE2KCkgOiBuZXcgVWludDE2KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMjogcmV0dXJuIF90eXBlWydpc1NpZ25lZCddID8gbmV3IEludDMyKCkgOiBuZXcgVWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2NDogcmV0dXJuIF90eXBlWydpc1NpZ25lZCddID8gbmV3IEludDY0KCkgOiBuZXcgVWludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuZnVuY3Rpb24gZmxvYXRpbmdQb2ludEZyb21KU09OICAoX3R5cGU6IGFueSkgICAgICAgICAgICAgICAgICAgIHsgc3dpdGNoIChQcmVjaXNpb25bX3R5cGVbJ3ByZWNpc2lvbiddXSBhcyBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFByZWNpc2lvbi5IQUxGOiByZXR1cm4gbmV3IEZsb2F0MTYoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFByZWNpc2lvbi5TSU5HTEU6IHJldHVybiBuZXcgRmxvYXQzMigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUHJlY2lzaW9uLkRPVUJMRTogcmV0dXJuIG5ldyBGbG9hdDY0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuZnVuY3Rpb24gYmluYXJ5RnJvbUpTT04gICAgICAgICAoX3R5cGU6IGFueSkgICAgICAgICAgICAgICAgICAgIHsgcmV0dXJuIG5ldyBCaW5hcnkoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbmZ1bmN0aW9uIHV0ZjhGcm9tSlNPTiAgICAgICAgICAgKF90eXBlOiBhbnkpICAgICAgICAgICAgICAgICAgICB7IHJldHVybiBuZXcgVXRmOCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5mdW5jdGlvbiBib29sRnJvbUpTT04gICAgICAgICAgIChfdHlwZTogYW55KSAgICAgICAgICAgICAgICAgICAgeyByZXR1cm4gbmV3IEJvb2woKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuZnVuY3Rpb24gZGVjaW1hbEZyb21KU09OICAgICAgICAoX3R5cGU6IGFueSkgICAgICAgICAgICAgICAgICAgIHsgcmV0dXJuIG5ldyBEZWNpbWFsKF90eXBlWydzY2FsZSddLCBfdHlwZVsncHJlY2lzaW9uJ10pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbmZ1bmN0aW9uIGRhdGVGcm9tSlNPTiAgICAgICAgICAgKF90eXBlOiBhbnkpICAgICAgICAgICAgICAgICAgICB7IHJldHVybiBuZXcgRGF0ZV8oRGF0ZVVuaXRbX3R5cGVbJ3VuaXQnXV0gYXMgYW55KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5mdW5jdGlvbiB0aW1lRnJvbUpTT04gICAgICAgICAgIChfdHlwZTogYW55KSAgICAgICAgICAgICAgICAgICAgeyByZXR1cm4gbmV3IFRpbWUoVGltZVVuaXRbX3R5cGVbJ3VuaXQnXV0gYXMgYW55LCBfdHlwZVsnYml0V2lkdGgnXSBhcyBUaW1lQml0V2lkdGgpOyAgICAgICAgICAgICAgfVxuZnVuY3Rpb24gdGltZXN0YW1wRnJvbUpTT04gICAgICAoX3R5cGU6IGFueSkgICAgICAgICAgICAgICAgICAgIHsgcmV0dXJuIG5ldyBUaW1lc3RhbXAoVGltZVVuaXRbX3R5cGVbJ3VuaXQnXV0gYXMgYW55LCBfdHlwZVsndGltZXpvbmUnXSk7ICAgICAgICAgICAgICAgICAgICAgICAgIH1cbmZ1bmN0aW9uIGludGVydmFsRnJvbUpTT04gICAgICAgKF90eXBlOiBhbnkpICAgICAgICAgICAgICAgICAgICB7IHJldHVybiBuZXcgSW50ZXJ2YWwoSW50ZXJ2YWxVbml0W190eXBlWyd1bml0J11dIGFzIGFueSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5mdW5jdGlvbiBsaXN0RnJvbUpTT04gICAgICAgICAgIChfdHlwZTogYW55LCBjaGlsZHJlbjogRmllbGRbXSkgeyByZXR1cm4gbmV3IExpc3QoY2hpbGRyZW4pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuZnVuY3Rpb24gc3RydWN0RnJvbUpTT04gICAgICAgICAoX3R5cGU6IGFueSwgY2hpbGRyZW46IEZpZWxkW10pIHsgcmV0dXJuIG5ldyBTdHJ1Y3QoY2hpbGRyZW4pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbmZ1bmN0aW9uIHVuaW9uRnJvbUpTT04gICAgICAgICAgKF90eXBlOiBhbnksIGNoaWxkcmVuOiBGaWVsZFtdKSB7IHJldHVybiBuZXcgVW5pb24oVW5pb25Nb2RlW190eXBlWydtb2RlJ11dIGFzIGFueSwgKF90eXBlWyd0eXBlSWRzJ10gfHwgW10pIGFzIFR5cGVbXSwgY2hpbGRyZW4pOyB9XG5mdW5jdGlvbiBmaXhlZFNpemVCaW5hcnlGcm9tSlNPTihfdHlwZTogYW55KSAgICAgICAgICAgICAgICAgICAgeyByZXR1cm4gbmV3IEZpeGVkU2l6ZUJpbmFyeShfdHlwZVsnYnl0ZVdpZHRoJ10pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuZnVuY3Rpb24gZml4ZWRTaXplTGlzdEZyb21KU09OICAoX3R5cGU6IGFueSwgY2hpbGRyZW46IEZpZWxkW10pIHsgcmV0dXJuIG5ldyBGaXhlZFNpemVMaXN0KF90eXBlWydsaXN0U2l6ZSddLCBjaGlsZHJlbik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbmZ1bmN0aW9uIG1hcEZyb21KU09OICAgICAgICAgICAgKF90eXBlOiBhbnksIGNoaWxkcmVuOiBGaWVsZFtdKSB7IHJldHVybiBuZXcgTWFwXyhfdHlwZVsna2V5c1NvcnRlZCddLCBjaGlsZHJlbik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4iXX0=
