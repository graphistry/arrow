// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import * as tslib_1 from "tslib";
import { Vector } from '../../vector';
import { RecordBatch } from '../../recordbatch';
import { TypeVisitor } from '../../visitor';
import { Message } from '../metadata';
import { FlatData, ListData, NestedData, SingleNestedData, DenseUnionData, SparseUnionData, BoolData, FlatListData, DictionaryData } from '../../data';
import { UnionMode, } from '../../type';
export function* readRecordBatches(messages) {
    for (const { schema, message, loader } of messages) {
        yield* readRecordBatch(schema, message, loader);
    }
}
export function readRecordBatchesAsync(messages) {
    return tslib_1.__asyncGenerator(this, arguments, function* readRecordBatchesAsync_1() {
        try {
            for (var messages_1 = tslib_1.__asyncValues(messages), messages_1_1; messages_1_1 = yield tslib_1.__await(messages_1.next()), !messages_1_1.done;) {
                const { schema, message, loader } = yield tslib_1.__await(messages_1_1.value);
                yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(readRecordBatch(schema, message, loader))));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (messages_1_1 && !messages_1_1.done && (_a = messages_1.return)) yield tslib_1.__await(_a.call(messages_1));
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    });
}
export function* readRecordBatch(schema, message, loader) {
    if (Message.isRecordBatch(message)) {
        yield new RecordBatch(schema, message.length, loader.visitFields(schema.fields));
    }
    else if (Message.isDictionaryBatch(message)) {
        const dictionaryId = message.id;
        const dictionaries = loader.dictionaries;
        const dictionaryField = schema.dictionaries.get(dictionaryId);
        const dictionaryDataType = dictionaryField.type.dictionary;
        let dictionaryVector = Vector.create(loader.visit(dictionaryDataType));
        if (message.isDelta && dictionaries.has(dictionaryId)) {
            dictionaryVector = dictionaries.get(dictionaryId).concat(dictionaryVector);
        }
        dictionaries.set(dictionaryId, dictionaryVector);
    }
}
export class TypeDataLoader extends TypeVisitor {
    constructor(nodes, buffers, dictionaries) {
        super();
        this.nodes = nodes;
        this.buffers = buffers;
        this.dictionaries = dictionaries;
    }
    visitFields(fields) { return fields.map((field) => this.visit(field.type)); }
    visitNull(type) { return this.visitNullType(type); }
    visitInt(type) { return this.visitFlatType(type); }
    visitFloat(type) { return this.visitFlatType(type); }
    visitBinary(type) { return this.visitFlatList(type); }
    visitUtf8(type) { return this.visitFlatList(type); }
    visitBool(type) { return this.visitBoolType(type); }
    visitDecimal(type) { return this.visitFlatType(type); }
    visitDate(type) { return this.visitFlatType(type); }
    visitTime(type) { return this.visitFlatType(type); }
    visitTimestamp(type) { return this.visitFlatType(type); }
    visitInterval(type) { return this.visitFlatType(type); }
    visitList(type) { return this.visitListType(type); }
    visitStruct(type) { return this.visitNestedType(type); }
    visitUnion(type) { return this.visitUnionType(type); }
    visitFixedSizeBinary(type) { return this.visitFlatType(type); }
    visitFixedSizeList(type) { return this.visitFixedSizeListType(type); }
    visitMap(type) { return this.visitNestedType(type); }
    visitDictionary(type) {
        return new DictionaryData(type, this.dictionaries.get(type.id), this.visit(type.indices));
    }
    getFieldMetadata() { return this.nodes.next().value; }
    getBufferMetadata() { return this.buffers.next().value; }
    readNullBitmap(type, nullCount, buffer = this.getBufferMetadata()) {
        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);
    }
    visitNullType(type, { length, nullCount } = this.getFieldMetadata()) {
        return new FlatData(type, length, this.readNullBitmap(type, nullCount), new Uint8Array(0), 0, nullCount);
    }
    visitFlatType(type, { length, nullCount } = this.getFieldMetadata()) {
        return new FlatData(type, length, this.readNullBitmap(type, nullCount), this.readData(type), 0, nullCount);
    }
    visitBoolType(type, { length, nullCount } = this.getFieldMetadata(), data) {
        return new BoolData(type, length, this.readNullBitmap(type, nullCount), data || this.readData(type), 0, nullCount);
    }
    visitFlatList(type, { length, nullCount } = this.getFieldMetadata()) {
        return new FlatListData(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type), 0, nullCount);
    }
    visitListType(type, { length, nullCount } = this.getFieldMetadata()) {
        return new ListData(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0].type), 0, nullCount);
    }
    visitFixedSizeListType(type, { length, nullCount } = this.getFieldMetadata()) {
        return new SingleNestedData(type, length, this.readNullBitmap(type, nullCount), this.visit(type.children[0].type), 0, nullCount);
    }
    visitNestedType(type, { length, nullCount } = this.getFieldMetadata()) {
        return new NestedData(type, length, this.readNullBitmap(type, nullCount), this.visitFields(type.children), 0, nullCount);
    }
    visitUnionType(type, { length, nullCount } = this.getFieldMetadata()) {
        return type.mode === UnionMode.Sparse ?
            new SparseUnionData(type, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount) :
            new DenseUnionData(type, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitFields(type.children), 0, nullCount);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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SUFBZSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFHLENBQUM7SUFDbEYsWUFBWSxDQUFTLElBQWEsSUFBWSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFHLENBQUM7SUFDbEYsU0FBUyxDQUFZLElBQVcsSUFBYyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFHLENBQUM7SUFDbEYsU0FBUyxDQUFZLElBQVUsSUFBZSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFHLENBQUM7SUFDbEYsY0FBYyxDQUFPLElBQWUsSUFBVSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFHLENBQUM7SUFDbEYsYUFBYSxDQUFRLElBQWMsSUFBVyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFHLENBQUM7SUFDbEYsU0FBUyxDQUFZLElBQVUsSUFBZSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFHLENBQUM7SUFDbEYsV0FBVyxDQUFVLElBQVksSUFBYSxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEYsVUFBVSxDQUFXLElBQVcsSUFBYyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFFLENBQUM7SUFDbEYsb0JBQW9CLENBQUMsSUFBcUIsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFHLENBQUM7SUFDbEYsa0JBQWtCLENBQUcsSUFBbUIsSUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RixRQUFRLENBQWEsSUFBVSxJ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QyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQy9KLElBQUksY0FBYyxDQUFDLElBQWtCLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDNUwsQ0FBQztDQUNKIiwiZmlsZSI6ImlwYy9yZWFkZXIvdmVjdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uLy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBSZWNvcmRCYXRjaCB9IGZyb20gJy4uLy4uL3JlY29yZGJhdGNoJztcbmltcG9ydCB7IFR5cGVWaXNpdG9yIH0gZnJvbSAnLi4vLi4vdmlzaXRvcic7XG5pbXBvcnQgeyBGbGF0VHlwZSwgTmVzdGVkVHlwZSwgTGlzdFR5cGUgfSBmcm9tICcuLi8uLi90eXBlJztcbmltcG9ydCB7IE1lc3NhZ2UsIEZpZWxkTWV0YWRhdGEsIEJ1ZmZlck1ldGFkYXRhIH0gZnJvbSAnLi4vbWV0YWRhdGEnO1xuaW1wb3J0IHsgRmxhdERhdGEsIExpc3REYXRhLCBOZXN0ZWREYXRhLCBTaW5nbGVOZXN0ZWREYXRhLCBEZW5zZVVuaW9uRGF0YSwgU3BhcnNlVW5pb25EYXRhLCBCb29sRGF0YSwgRmxhdExpc3REYXRhLCBEaWN0aW9uYXJ5RGF0YSB9IGZyb20gJy4uLy4uL2RhdGEnO1xuaW1wb3J0IHtcbiAgICBTY2hlbWEsIEZpZWxkLFxuICAgIERpY3Rpb25hcnksXG4gICAgTnVsbCwgSW50LCBGbG9hdCxcbiAgICBCaW5hcnksIEJvb2wsIFV0ZjgsIERlY2ltYWwsXG4gICAgRGF0ZV8sIFRpbWUsIFRpbWVzdGFtcCwgSW50ZXJ2YWwsXG4gICAgTGlzdCwgU3RydWN0LCBVbmlvbiwgRml4ZWRTaXplQmluYXJ5LCBGaXhlZFNpemVMaXN0LCBNYXBfLFxuICAgIFVuaW9uTW9kZSwgU3BhcnNlVW5pb24sIERlbnNlVW5pb24sIEZsYXRMaXN0VHlwZSwgRGF0YVR5cGUsXG59IGZyb20gJy4uLy4uL3R5cGUnO1xuXG5leHBvcnQgZnVuY3Rpb24qIHJlYWRSZWNvcmRCYXRjaGVzKG1lc3NhZ2VzOiBJdGVyYWJsZTx7IHNjaGVtYTogU2NoZW1hLCBtZXNzYWdlOiBNZXNzYWdlLCBsb2FkZXI6IFR5cGVEYXRhTG9hZGVyIH0+KSB7XG4gICAgZm9yIChjb25zdCB7IHNjaGVtYSwgbWVzc2FnZSwgbG9hZGVyIH0gb2YgbWVzc2FnZXMpIHtcbiAgICAgICAgeWllbGQqIHJlYWRSZWNvcmRCYXRjaChzY2hlbWEsIG1lc3NhZ2UsIGxvYWRlcik7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24qIHJlYWRSZWNvcmRCYXRjaGVzQXN5bmMobWVzc2FnZXM6IEFzeW5jSXRlcmFibGU8eyBzY2hlbWE6IFNjaGVtYSwgbWVzc2FnZTogTWVzc2FnZSwgbG9hZGVyOiBUeXBlRGF0YUxvYWRlciB9Pikge1xuICAgIGZvciBhd2FpdCAoY29uc3QgeyBzY2hlbWEsIG1lc3NhZ2UsIGxvYWRlciB9IG9mIG1lc3NhZ2VzKSB7XG4gICAgICAgIHlpZWxkKiByZWFkUmVjb3JkQmF0Y2goc2NoZW1hLCBtZXNzYWdlLCBsb2FkZXIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiByZWFkUmVjb3JkQmF0Y2goc2NoZW1hOiBTY2hlbWEsIG1lc3NhZ2U6IE1lc3NhZ2UsIGxvYWRlcjogVHlwZURhdGFMb2FkZXIpIHtcbiAgICBpZiAoTWVzc2FnZS5pc1JlY29yZEJhdGNoKG1lc3NhZ2UpKSB7XG4gICAgICAgIHlpZWxkIG5ldyBSZWNvcmRCYXRjaChzY2hlbWEsIG1lc3NhZ2UubGVuZ3RoLCBsb2FkZXIudmlzaXRGaWVsZHMoc2NoZW1hLmZpZWxkcykpO1xuICAgIH0gZWxzZSBpZiAoTWVzc2FnZS5pc0RpY3Rpb25hcnlCYXRjaChtZXNzYWdlKSkge1xuICAgICAgICBjb25zdCBkaWN0aW9uYXJ5SWQgPSBtZXNzYWdlLmlkO1xuICAgICAgICBjb25zdCBkaWN0aW9uYXJpZXMgPSBsb2FkZXIuZGljdGlvbmFyaWVzO1xuICAgICAgICBjb25zdCBkaWN0aW9uYXJ5RmllbGQgPSBzY2hlbWEuZGljdGlvbmFyaWVzLmdldChkaWN0aW9uYXJ5SWQpITtcbiAgICAgICAgY29uc3QgZGljdGlvbmFyeURhdGFUeXBlID0gKGRpY3Rpb25hcnlGaWVsZC50eXBlIGFzIERpY3Rpb25hcnkpLmRpY3Rpb25hcnk7XG4gICAgICAgIGxldCBkaWN0aW9uYXJ5VmVjdG9yID0gVmVjdG9yLmNyZWF0ZShsb2FkZXIudmlzaXQoZGljdGlvbmFyeURhdGFUeXBlKSk7XG4gICAgICAgIGlmIChtZXNzYWdlLmlzRGVsdGEgJiYgZGljdGlvbmFyaWVzLmhhcyhkaWN0aW9uYXJ5SWQpKSB7XG4gICAgICAgICAgICBkaWN0aW9uYXJ5VmVjdG9yID0gZGljdGlvbmFyaWVzLmdldChkaWN0aW9uYXJ5SWQpIS5jb25jYXQoZGljdGlvbmFyeVZlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgZGljdGlvbmFyaWVzLnNldChkaWN0aW9uYXJ5SWQsIGRpY3Rpb25hcnlWZWN0b3IpO1xuICAgIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFR5cGVEYXRhTG9hZGVyIGV4dGVuZHMgVHlwZVZpc2l0b3Ige1xuXG4gICAgcHVibGljIGRpY3Rpb25hcmllczogTWFwPG51bWJlciwgVmVjdG9yPjtcbiAgICBwcm90ZWN0ZWQgbm9kZXM6IEl0ZXJhdG9yPEZpZWxkTWV0YWRhdGE+O1xuICAgIHByb3RlY3RlZCBidWZmZXJzOiBJdGVyYXRvcjxCdWZmZXJNZXRhZGF0YT47XG5cbiAgICBjb25zdHJ1Y3Rvcihub2RlczogSXRlcmF0b3I8RmllbGRNZXRhZGF0YT4sIGJ1ZmZlcnM6IEl0ZXJhdG9yPEJ1ZmZlck1ldGFkYXRhPiwgZGljdGlvbmFyaWVzOiBNYXA8bnVtYmVyLCBWZWN0b3I+KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICAgICAgdGhpcy5idWZmZXJzID0gYnVmZmVycztcbiAgICAgICAgdGhpcy5kaWN0aW9uYXJpZXMgPSBkaWN0aW9uYXJpZXM7XG4gICAgfVxuXG4gICAgcHVibGljIHZpc2l0RmllbGRzKGZpZWxkczogRmllbGRbXSkgeyByZXR1cm4gZmllbGRzLm1hcCgoZmllbGQpID0+IHRoaXMudmlzaXQoZmllbGQudHlwZSkpOyB9XG5cbiAgICBwdWJsaWMgdmlzaXROdWxsICAgICAgICAgICAodHlwZTogTnVsbCkgICAgICAgICAgICB7IHJldHVybiB0aGlzLnZpc2l0TnVsbFR5cGUodHlwZSk7ICAgfVxuICAgIHB1YmxpYyB2aXNpdEludCAgICAgICAgICAgICh0eXBlOiBJbnQpICAgICAgICAgICAgIHsgcmV0dXJuIHRoaXMudmlzaXRGbGF0VHlwZSh0eXBlKTsgICB9XG4gICAgcHVibGljIHZpc2l0RmxvYXQgICAgICAgICAgKHR5cGU6IEZsb2F0KSAgICAgICAgICAgeyByZXR1cm4gdGhpcy52aXNpdEZsYXRUeXBlKHR5cGUpOyAgIH1cbiAgICBwdWJsaWMgdmlzaXRCaW5hcnkgICAgICAgICAodHlwZTogQmluYXJ5KSAgICAgICAgICB7IHJldHVybiB0aGlzLnZpc2l0RmxhdExpc3QodHlwZSk7ICAgfVxuICAgIHB1YmxpYyB2aXNpdFV0ZjggICAgICAgICAgICh0eXBlOiBVdGY4KSAgICAgICAgICAgIHsgcmV0dXJuIHRoaXMudmlzaXRGbGF0TGlzdCh0eXBlKTsgICB9XG4gICAgcHVibGljIHZpc2l0Qm9vbCAgICAgICAgICAgKHR5cGU6IEJvb2wpICAgICAgICAgICAgeyByZXR1cm4gdGhpcy52aXNpdEJvb2xUeXBlKHR5cGUpOyAgIH1cbiAgICBwdWJsaWMgdmlzaXREZWNpbWFsICAgICAgICAodHlwZTogRGVjaW1hbCkgICAgICAgICB7IHJldHVybiB0aGlzLnZpc2l0RmxhdFR5cGUodHlwZSk7ICAgfVxuICAgIHB1YmxpYyB2aXNpdERhdGUgICAgICAgICAgICh0eXBlOiBEYXRlXykgICAgICAgICAgIHsgcmV0dXJuIHRoaXMudmlzaXRGbGF0VHlwZSh0eXBlKTsgICB9XG4gICAgcHVibGljIHZpc2l0VGltZSAgICAgICAgICAgKHR5cGU6IFRpbWUpICAgICAgICAgICAgeyByZXR1cm4gdGhpcy52aXNpdEZsYXRUeXBlKHR5cGUpOyAgIH1cbiAgICBwdWJsaWMgdmlzaXRUaW1lc3RhbXAgICAgICAodHlwZTogVGltZXN0YW1wKSAgICAgICB7IHJldHVybiB0aGlzLnZpc2l0RmxhdFR5cGUodHlwZSk7ICAgfVxuICAgIHB1YmxpYyB2aXNpdEludGVydmFsICAgICAgICh0eXBlOiBJbnRlcnZhbCkgICAgICAgIHsgcmV0dXJuIHRoaXMudmlzaXRGbGF0VHlwZSh0eXBlKTsgICB9XG4gICAgcHVibGljIHZpc2l0TGlzdCAgICAgICAgICAgKHR5cGU6IExpc3QpICAgICAgICAgICAgeyByZXR1cm4gdGhpcy52aXNpdExpc3RUeXBlKHR5cGUpOyAgIH1cbiAgICBwdWJsaWMgdmlzaXRTdHJ1Y3QgICAgICAgICAodHlwZTogU3RydWN0KSAgICAgICAgICB7IHJldHVybiB0aGlzLnZpc2l0TmVzdGVkVHlwZSh0eXBlKTsgfVxuICAgIHB1YmxpYyB2aXNpdFVuaW9uICAgICAgICAgICh0eXBlOiBVbmlvbikgICAgICAgICAgIHsgcmV0dXJuIHRoaXMudmlzaXRVbmlvblR5cGUodHlwZSk7ICB9XG4gICAgcHVibGljIHZpc2l0Rml4ZWRTaXplQmluYXJ5KHR5cGU6IEZpeGVkU2l6ZUJpbmFyeSkgeyByZXR1cm4gdGhpcy52aXNpdEZsYXRUeXBlKHR5cGUpOyAgIH1cbiAgICBwdWJsaWMgdmlzaXRGaXhlZFNpemVMaXN0ICAodHlwZTogRml4ZWRTaXplTGlzdCkgICB7IHJldHVybiB0aGlzLnZpc2l0Rml4ZWRTaXplTGlzdFR5cGUodHlwZSk7IH1cbiAgICBwdWJsaWMgdmlzaXRNYXAgICAgICAgICAgICAodHlwZTogTWFwXykgICAgICAgICAgICB7IHJldHVybiB0aGlzLnZpc2l0TmVzdGVkVHlwZSh0eXBlKTsgfVxuICAgIHB1YmxpYyB2aXNpdERpY3Rpb25hcnkgICAgICh0eXBlOiBEaWN0aW9uYXJ5KSAgICAgIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEaWN0aW9uYXJ5RGF0YSh0eXBlLCB0aGlzLmRpY3Rpb25hcmllcy5nZXQodHlwZS5pZCkhLCB0aGlzLnZpc2l0KHR5cGUuaW5kaWNlcykpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0RmllbGRNZXRhZGF0YSgpIHsgcmV0dXJuIHRoaXMubm9kZXMubmV4dCgpLnZhbHVlOyB9XG4gICAgcHJvdGVjdGVkIGdldEJ1ZmZlck1ldGFkYXRhKCkgeyByZXR1cm4gdGhpcy5idWZmZXJzLm5leHQoKS52YWx1ZTsgfVxuICAgIHByb3RlY3RlZCByZWFkTnVsbEJpdG1hcDxUIGV4dGVuZHMgRGF0YVR5cGU+KHR5cGU6IFQsIG51bGxDb3VudDogbnVtYmVyLCBidWZmZXIgPSB0aGlzLmdldEJ1ZmZlck1ldGFkYXRhKCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGxDb3VudCA+IDAgJiYgdGhpcy5yZWFkRGF0YSh0eXBlLCBidWZmZXIpIHx8IG5ldyBVaW50OEFycmF5KDApO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgcmVhZERhdGE8VCBleHRlbmRzIERhdGFUeXBlPih0eXBlOiBULCBidWZmZXI/OiBCdWZmZXJNZXRhZGF0YSk6IGFueTtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgcmVhZE9mZnNldHM8VCBleHRlbmRzIERhdGFUeXBlPih0eXBlOiBULCBidWZmZXI/OiBCdWZmZXJNZXRhZGF0YSk6IGFueTtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgcmVhZFR5cGVJZHM8VCBleHRlbmRzIERhdGFUeXBlPih0eXBlOiBULCBidWZmZXI/OiBCdWZmZXJNZXRhZGF0YSk6IGFueTtcbiAgICBwcm90ZWN0ZWQgdmlzaXROdWxsVHlwZSh0eXBlOiBOdWxsLCB7IGxlbmd0aCwgbnVsbENvdW50IH06IEZpZWxkTWV0YWRhdGEgPSB0aGlzLmdldEZpZWxkTWV0YWRhdGEoKSkge1xuICAgICAgICByZXR1cm4gbmV3IEZsYXREYXRhPGFueT4odHlwZSwgbGVuZ3RoLCB0aGlzLnJlYWROdWxsQml0bWFwKHR5cGUsIG51bGxDb3VudCksIG5ldyBVaW50OEFycmF5KDApLCAwLCBudWxsQ291bnQpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgdmlzaXRGbGF0VHlwZTxUIGV4dGVuZHMgRmxhdFR5cGU+KHR5cGU6IFQsIHsgbGVuZ3RoLCBudWxsQ291bnQgfTogRmllbGRNZXRhZGF0YSA9IHRoaXMuZ2V0RmllbGRNZXRhZGF0YSgpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxhdERhdGE8VD4odHlwZSwgbGVuZ3RoLCB0aGlzLnJlYWROdWxsQml0bWFwKHR5cGUsIG51bGxDb3VudCksIHRoaXMucmVhZERhdGEodHlwZSksIDAsIG51bGxDb3VudCk7XG4gICAgfVxuICAgIHByb3RlY3RlZCB2aXNpdEJvb2xUeXBlKHR5cGU6IEJvb2wsIHsgbGVuZ3RoLCBudWxsQ291bnQgfTogRmllbGRNZXRhZGF0YSA9IHRoaXMuZ2V0RmllbGRNZXRhZGF0YSgpLCBkYXRhPzogVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gbmV3IEJvb2xEYXRhKHR5cGUsIGxlbmd0aCwgdGhpcy5yZWFkTnVsbEJpdG1hcCh0eXBlLCBudWxsQ291bnQpLCBkYXRhIHx8IHRoaXMucmVhZERhdGEodHlwZSksIDAsIG51bGxDb3VudCk7XG4gICAgfVxuICAgIHByb3RlY3RlZCB2aXNpdEZsYXRMaXN0PFQgZXh0ZW5kcyBGbGF0TGlzdFR5cGU+KHR5cGU6IFQsIHsgbGVuZ3RoLCBudWxsQ291bnQgfTogRmllbGRNZXRhZGF0YSA9IHRoaXMuZ2V0RmllbGRNZXRhZGF0YSgpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxhdExpc3REYXRhPFQ+KHR5cGUsIGxlbmd0aCwgdGhpcy5yZWFkTnVsbEJpdG1hcCh0eXBlLCBudWxsQ291bnQpLCB0aGlzLnJlYWRPZmZzZXRzKHR5cGUpLCB0aGlzLnJlYWREYXRhKHR5cGUpLCAwLCBudWxsQ291bnQpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgdmlzaXRMaXN0VHlwZTxUIGV4dGVuZHMgTGlzdFR5cGU+KHR5cGU6IFQsIHsgbGVuZ3RoLCBudWxsQ291bnQgfTogRmllbGRNZXRhZGF0YSA9IHRoaXMuZ2V0RmllbGRNZXRhZGF0YSgpKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdERhdGE8VD4odHlwZSwgbGVuZ3RoLCB0aGlzLnJlYWROdWxsQml0bWFwKHR5cGUsIG51bGxDb3VudCksIHRoaXMucmVhZE9mZnNldHModHlwZSksIHRoaXMudmlzaXQodHlwZS5jaGlsZHJlbiFbMF0udHlwZSksIDAsIG51bGxDb3VudCk7XG4gICAgfVxuICAgIHByb3RlY3RlZCB2aXNpdEZpeGVkU2l6ZUxpc3RUeXBlPFQgZXh0ZW5kcyBGaXhlZFNpemVMaXN0Pih0eXBlOiBULCB7IGxlbmd0aCwgbnVsbENvdW50IH06IEZpZWxkTWV0YWRhdGEgPSB0aGlzLmdldEZpZWxkTWV0YWRhdGEoKSkge1xuICAgICAgICByZXR1cm4gbmV3IFNpbmdsZU5lc3RlZERhdGE8VD4odHlwZSwgbGVuZ3RoLCB0aGlzLnJlYWROdWxsQml0bWFwKHR5cGUsIG51bGxDb3VudCksIHRoaXMudmlzaXQodHlwZS5jaGlsZHJlbiFbMF0udHlwZSksIDAsIG51bGxDb3VudCk7XG4gICAgfVxuICAgIHByb3RlY3RlZCB2aXNpdE5lc3RlZFR5cGU8VCBleHRlbmRzIE5lc3RlZFR5cGU+KHR5cGU6IFQsIHsgbGVuZ3RoLCBudWxsQ291bnQgfTogRmllbGRNZXRhZGF0YSA9IHRoaXMuZ2V0RmllbGRNZXRhZGF0YSgpKSB7XG4gICAgICAgIHJldHVybiBuZXcgTmVzdGVkRGF0YTxUPih0eXBlLCBsZW5ndGgsIHRoaXMucmVhZE51bGxCaXRtYXAodHlwZSwgbnVsbENvdW50KSwgdGhpcy52aXNpdEZpZWxkcyh0eXBlLmNoaWxkcmVuKSwgMCwgbnVsbENvdW50KTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHZpc2l0VW5pb25UeXBlKHR5cGU6IERlbnNlVW5pb24gfCBTcGFyc2VVbmlvbiwgeyBsZW5ndGgsIG51bGxDb3VudCB9OiBGaWVsZE1ldGFkYXRhID0gdGhpcy5nZXRGaWVsZE1ldGFkYXRhKCkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGUubW9kZSA9PT0gVW5pb25Nb2RlLlNwYXJzZSA/XG4gICAgICAgICAgICBuZXcgU3BhcnNlVW5pb25EYXRhKHR5cGUgYXMgU3BhcnNlVW5pb24sIGxlbmd0aCwgdGhpcy5yZWFkTnVsbEJpdG1hcCh0eXBlLCBudWxsQ291bnQpLCB0aGlzLnJlYWRUeXBlSWRzKHR5cGUpLCB0aGlzLnZpc2l0RmllbGRzKHR5cGUuY2hpbGRyZW4pLCAwLCBudWxsQ291bnQpIDpcbiAgICAgICAgICAgIG5ldyBEZW5zZVVuaW9uRGF0YSh0eXBlIGFzIERlbnNlVW5pb24sIGxlbmd0aCwgdGhpcy5yZWFkTnVsbEJpdG1hcCh0eXBlLCBudWxsQ291bnQpLCB0aGlzLnJlYWRUeXBlSWRzKHR5cGUpLCB0aGlzLnJlYWRPZmZzZXRzKHR5cGUpLCB0aGlzLnZpc2l0RmllbGRzKHR5cGUuY2hpbGRyZW4pLCAwLCBudWxsQ291bnQpO1xuICAgIH1cbn1cbiJdfQ==
