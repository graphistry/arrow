// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { serializeStream, serializeFile } from './binary';
export function writeTableBinary(table, stream = true) {
    return concatBuffers(stream ? serializeStream(table) : serializeFile(table));
}
function concatBuffers(messages) {
    let buffers = [], byteLength = 0;
    for (const message of messages) {
        buffers.push(message);
        byteLength += message.byteLength;
    }
    const { buffer } = buffers.reduce(({ buffer, byteOffset }, bytes) => {
        buffer.set(bytes, byteOffset);
        return { buffer, byteOffset: byteOffset + bytes.byteLength };
    }, { buffer: new Uint8Array(byteLength), byteOffset: 0 });
    return buffer;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy93cml0ZXIvYXJyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBR3JCLE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTFELE1BQU0sMkJBQTJCLEtBQVksRUFBRSxNQUFNLEdBQUcsSUFBSTtJQUN4RCxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNqRixDQUFDO0FBRUQsdUJBQXVCLFFBQXVDO0lBRTFELElBQUksT0FBTyxHQUFHLEVBQUUsRUFBRSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRWpDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sT0FBTyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDN0IsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QixVQUFVLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNoRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM5QixNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDakUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTFELE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDbEIsQ0FBQyIsImZpbGUiOiJpcGMvd3JpdGVyL2Fycm93LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFRhYmxlIH0gZnJvbSAnLi4vLi4vdGFibGUnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3RyZWFtLCBzZXJpYWxpemVGaWxlIH0gZnJvbSAnLi9iaW5hcnknO1xuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVUYWJsZUJpbmFyeSh0YWJsZTogVGFibGUsIHN0cmVhbSA9IHRydWUpIHtcbiAgICByZXR1cm4gY29uY2F0QnVmZmVycyhzdHJlYW0gPyBzZXJpYWxpemVTdHJlYW0odGFibGUpIDogc2VyaWFsaXplRmlsZSh0YWJsZSkpO1xufVxuXG5mdW5jdGlvbiBjb25jYXRCdWZmZXJzKG1lc3NhZ2VzOiBJdGVyYWJsZTxVaW50OEFycmF5IHwgQnVmZmVyPikge1xuXG4gICAgbGV0IGJ1ZmZlcnMgPSBbXSwgYnl0ZUxlbmd0aCA9IDA7XG5cbiAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXMpIHtcbiAgICAgICAgYnVmZmVycy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICBieXRlTGVuZ3RoICs9IG1lc3NhZ2UuYnl0ZUxlbmd0aDtcbiAgICB9XG5cbiAgICBjb25zdCB7IGJ1ZmZlciB9ID0gYnVmZmVycy5yZWR1Y2UoKHsgYnVmZmVyLCBieXRlT2Zmc2V0IH0sIGJ5dGVzKSA9PiB7XG4gICAgICAgIGJ1ZmZlci5zZXQoYnl0ZXMsIGJ5dGVPZmZzZXQpO1xuICAgICAgICByZXR1cm4geyBidWZmZXIsIGJ5dGVPZmZzZXQ6IGJ5dGVPZmZzZXQgKyBieXRlcy5ieXRlTGVuZ3RoIH07XG4gICAgfSwgeyBidWZmZXI6IG5ldyBVaW50OEFycmF5KGJ5dGVMZW5ndGgpLCBieXRlT2Zmc2V0OiAwIH0pO1xuXG4gICAgcmV0dXJuIGJ1ZmZlcjtcbn1cbiJdfQ==
