// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { serializeStream, serializeFile } from './binary';
export function writeTableBinary(table, stream = true) {
    return concatBuffers(stream ? serializeStream(table) : serializeFile(table));
}
function concatBuffers(messages) {
    let buffers = [], byteLength = 0;
    for (const message of messages) {
        buffers.push(message);
        byteLength += message.byteLength;
    }
    const { buffer } = buffers.reduce(({ buffer, byteOffset }, bytes) => {
        buffer.set(bytes, byteOffset);
        return { buffer, byteOffset: byteOffset + bytes.byteLength };
    }, { buffer: new Uint8Array(byteLength), byteOffset: 0 });
    return buffer;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy93cml0ZXIvYXJyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBR3JCLE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTFELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxLQUFZLEVBQUUsTUFBTSxHQUFHLElBQUk7SUFDeEQsT0FBTyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2pGLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxRQUF1QztJQUUxRCxJQUFJLE9BQU8sR0FBRyxFQUFFLEVBQUUsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUVqQyxLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtRQUM1QixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RCLFVBQVUsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDO0tBQ3BDO0lBRUQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNoRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM5QixPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2pFLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUxRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwiZmlsZSI6ImlwYy93cml0ZXIvYXJyb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgVGFibGUgfSBmcm9tICcuLi8uLi90YWJsZSc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHJlYW0sIHNlcmlhbGl6ZUZpbGUgfSBmcm9tICcuL2JpbmFyeSc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZVRhYmxlQmluYXJ5KHRhYmxlOiBUYWJsZSwgc3RyZWFtID0gdHJ1ZSkge1xuICAgIHJldHVybiBjb25jYXRCdWZmZXJzKHN0cmVhbSA/IHNlcmlhbGl6ZVN0cmVhbSh0YWJsZSkgOiBzZXJpYWxpemVGaWxlKHRhYmxlKSk7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdEJ1ZmZlcnMobWVzc2FnZXM6IEl0ZXJhYmxlPFVpbnQ4QXJyYXkgfCBCdWZmZXI+KSB7XG5cbiAgICBsZXQgYnVmZmVycyA9IFtdLCBieXRlTGVuZ3RoID0gMDtcblxuICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBtZXNzYWdlcykge1xuICAgICAgICBidWZmZXJzLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIGJ5dGVMZW5ndGggKz0gbWVzc2FnZS5ieXRlTGVuZ3RoO1xuICAgIH1cblxuICAgIGNvbnN0IHsgYnVmZmVyIH0gPSBidWZmZXJzLnJlZHVjZSgoeyBidWZmZXIsIGJ5dGVPZmZzZXQgfSwgYnl0ZXMpID0+IHtcbiAgICAgICAgYnVmZmVyLnNldChieXRlcywgYnl0ZU9mZnNldCk7XG4gICAgICAgIHJldHVybiB7IGJ1ZmZlciwgYnl0ZU9mZnNldDogYnl0ZU9mZnNldCArIGJ5dGVzLmJ5dGVMZW5ndGggfTtcbiAgICB9LCB7IGJ1ZmZlcjogbmV3IFVpbnQ4QXJyYXkoYnl0ZUxlbmd0aCksIGJ5dGVPZmZzZXQ6IDAgfSk7XG5cbiAgICByZXR1cm4gYnVmZmVyO1xufVxuIl19
