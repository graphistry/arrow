"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const binary_1 = require("./binary");
function writeTableBinary(table, stream = true) {
    return concatBuffers(stream ? binary_1.serializeStream(table) : binary_1.serializeFile(table));
}
exports.writeTableBinary = writeTableBinary;
function concatBuffers(messages) {
    let buffers = [], byteLength = 0;
    for (const message of messages) {
        buffers.push(message);
        byteLength += message.byteLength;
    }
    const { buffer } = buffers.reduce(({ buffer, byteOffset }, bytes) => {
        buffer.set(bytes, byteOffset);
        return { buffer, byteOffset: byteOffset + bytes.byteLength };
    }, { buffer: new Uint8Array(byteLength), byteOffset: 0 });
    return buffer;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy93cml0ZXIvYXJyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjs7QUFHckIscUNBQTBEO0FBRTFELDBCQUFpQyxLQUFZLEVBQUUsTUFBTSxHQUFHLElBQUk7SUFDeEQsT0FBTyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyx3QkFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDakYsQ0FBQztBQUZELDRDQUVDO0FBRUQsdUJBQXVCLFFBQXVDO0lBRTFELElBQUksT0FBTyxHQUFHLEVBQUUsRUFBRSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRWpDLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFO1FBQzVCLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEIsVUFBVSxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUM7S0FDcEM7SUFFRCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ2hFLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDakUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTFELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJmaWxlIjoiaXBjL3dyaXRlci9hcnJvdy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBUYWJsZSB9IGZyb20gJy4uLy4uL3RhYmxlJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0cmVhbSwgc2VyaWFsaXplRmlsZSB9IGZyb20gJy4vYmluYXJ5JztcblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlVGFibGVCaW5hcnkodGFibGU6IFRhYmxlLCBzdHJlYW0gPSB0cnVlKSB7XG4gICAgcmV0dXJuIGNvbmNhdEJ1ZmZlcnMoc3RyZWFtID8gc2VyaWFsaXplU3RyZWFtKHRhYmxlKSA6IHNlcmlhbGl6ZUZpbGUodGFibGUpKTtcbn1cblxuZnVuY3Rpb24gY29uY2F0QnVmZmVycyhtZXNzYWdlczogSXRlcmFibGU8VWludDhBcnJheSB8IEJ1ZmZlcj4pIHtcblxuICAgIGxldCBidWZmZXJzID0gW10sIGJ5dGVMZW5ndGggPSAwO1xuXG4gICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIG1lc3NhZ2VzKSB7XG4gICAgICAgIGJ1ZmZlcnMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgYnl0ZUxlbmd0aCArPSBtZXNzYWdlLmJ5dGVMZW5ndGg7XG4gICAgfVxuXG4gICAgY29uc3QgeyBidWZmZXIgfSA9IGJ1ZmZlcnMucmVkdWNlKCh7IGJ1ZmZlciwgYnl0ZU9mZnNldCB9LCBieXRlcykgPT4ge1xuICAgICAgICBidWZmZXIuc2V0KGJ5dGVzLCBieXRlT2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHsgYnVmZmVyLCBieXRlT2Zmc2V0OiBieXRlT2Zmc2V0ICsgYnl0ZXMuYnl0ZUxlbmd0aCB9O1xuICAgIH0sIHsgYnVmZmVyOiBuZXcgVWludDhBcnJheShieXRlTGVuZ3RoKSwgYnl0ZU9mZnNldDogMCB9KTtcblxuICAgIHJldHVybiBidWZmZXI7XG59XG4iXX0=
