// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Duplex } from 'stream';
import { AsyncByteStream } from '../../io/stream';
/** @ignore */
export function recordBatchWriterThroughNodeStream() {
    return new RecordBatchWriterDuplex(new this());
}
/** @ignore */
class RecordBatchWriterDuplex extends Duplex {
    constructor(writer) {
        super({ allowHalfOpen: false, writableObjectMode: true, readableObjectMode: false });
        this._pulling = false;
        this._writer = writer;
        this._reader = new AsyncByteStream(writer);
    }
    _final(cb) {
        const writer = this._writer;
        writer && writer.close();
        cb && cb();
    }
    _write(x, _, cb) {
        const writer = this._writer;
        writer && writer.write(x);
        cb && cb();
        return true;
    }
    _read(size) {
        const it = this._reader;
        if (it && !this._pulling && (this._pulling = true)) {
            (async () => this._pulling = await this._pull(size, it))();
        }
    }
    _destroy(err, cb) {
        const writer = this._writer;
        if (writer) {
            err ? writer.abort(err) : writer.close();
        }
        cb(this._reader = this._writer = null);
    }
    async _pull(size, reader) {
        let r = null;
        while (this.readable && !(r = await reader.next(size || null)).done) {
            if (size != null && r.value) {
                size -= r.value.byteLength;
            }
            if (!this.push(r.value) || size <= 0) {
                break;
            }
        }
        if ((r && r.done || !this.readable) && (this.push(null) || true)) {
            await reader.cancel();
        }
        return !this.readable;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUU7WUFDakUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUU7Z0JBQ3pCLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQzthQUM5QjtZQUNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO2dCQUFFLE1BQU07YUFBRTtTQUNuRDtRQUNELElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUU7WUFDOUQsTUFBTSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDekI7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUMxQixDQUFDO0NBQ0oiLCJmaWxlIjoiaXBjL25vZGUvd3JpdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IER1cGxleCB9IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyBEYXRhVHlwZSB9IGZyb20gJy4uLy4uL3R5cGUnO1xuaW1wb3J0IHsgQXN5bmNCeXRlU3RyZWFtIH0gZnJvbSAnLi4vLi4vaW8vc3RyZWFtJztcbmltcG9ydCB7IFJlY29yZEJhdGNoV3JpdGVyIH0gZnJvbSAnLi4vLi4vaXBjL3dyaXRlcic7XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgZnVuY3Rpb24gcmVjb3JkQmF0Y2hXcml0ZXJUaHJvdWdoTm9kZVN0cmVhbTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55Pih0aGlzOiB0eXBlb2YgUmVjb3JkQmF0Y2hXcml0ZXIpIHtcbiAgICByZXR1cm4gbmV3IFJlY29yZEJhdGNoV3JpdGVyRHVwbGV4KG5ldyB0aGlzPFQ+KCkpO1xufVxuXG50eXBlIENCID0gKGVycm9yPzogRXJyb3IgfCBudWxsIHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xuXG4vKiogQGlnbm9yZSAqL1xuY2xhc3MgUmVjb3JkQmF0Y2hXcml0ZXJEdXBsZXg8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4gZXh0ZW5kcyBEdXBsZXgge1xuICAgIHByaXZhdGUgX3B1bGxpbmc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIF9yZWFkZXI6IEFzeW5jQnl0ZVN0cmVhbSB8IG51bGw7XG4gICAgcHJpdmF0ZSBfd3JpdGVyOiBSZWNvcmRCYXRjaFdyaXRlciB8IG51bGw7XG4gICAgY29uc3RydWN0b3Iod3JpdGVyOiBSZWNvcmRCYXRjaFdyaXRlcjxUPikge1xuICAgICAgICBzdXBlcih7IGFsbG93SGFsZk9wZW46IGZhbHNlLCB3cml0YWJsZU9iamVjdE1vZGU6IHRydWUsIHJlYWRhYmxlT2JqZWN0TW9kZTogZmFsc2UgfSk7XG4gICAgICAgIHRoaXMuX3dyaXRlciA9IHdyaXRlcjtcbiAgICAgICAgdGhpcy5fcmVhZGVyID0gbmV3IEFzeW5jQnl0ZVN0cmVhbSh3cml0ZXIpO1xuICAgIH1cbiAgICBfZmluYWwoY2I/OiBDQikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSB0aGlzLl93cml0ZXI7XG4gICAgICAgIHdyaXRlciAmJiB3cml0ZXIuY2xvc2UoKTtcbiAgICAgICAgY2IgJiYgY2IoKTtcbiAgICB9XG4gICAgX3dyaXRlKHg6IGFueSwgXzogc3RyaW5nLCBjYjogQ0IpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gdGhpcy5fd3JpdGVyO1xuICAgICAgICB3cml0ZXIgJiYgd3JpdGVyLndyaXRlKHgpO1xuICAgICAgICBjYiAmJiBjYigpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX3JlYWQoc2l6ZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGl0ID0gdGhpcy5fcmVhZGVyO1xuICAgICAgICBpZiAoaXQgJiYgIXRoaXMuX3B1bGxpbmcgJiYgKHRoaXMuX3B1bGxpbmcgPSB0cnVlKSkge1xuICAgICAgICAgICAgKGFzeW5jICgpID0+IHRoaXMuX3B1bGxpbmcgPSBhd2FpdCB0aGlzLl9wdWxsKHNpemUsIGl0KSkoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZGVzdHJveShlcnI6IEVycm9yIHwgbnVsbCwgY2I6IChlcnJvcjogRXJyb3IgfCBudWxsKSA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IHRoaXMuX3dyaXRlcjtcbiAgICAgICAgaWYgKHdyaXRlcikgeyBlcnIgPyB3cml0ZXIuYWJvcnQoZXJyKSA6IHdyaXRlci5jbG9zZSgpOyB9XG4gICAgICAgIGNiKHRoaXMuX3JlYWRlciA9IHRoaXMuX3dyaXRlciA9IG51bGwpO1xuICAgIH1cbiAgICBhc3luYyBfcHVsbChzaXplOiBudW1iZXIsIHJlYWRlcjogQXN5bmNCeXRlU3RyZWFtKSB7XG4gICAgICAgIGxldCByOiBJdGVyYXRvclJlc3VsdDxVaW50OEFycmF5PiB8IG51bGwgPSBudWxsO1xuICAgICAgICB3aGlsZSAodGhpcy5yZWFkYWJsZSAmJiAhKHIgPSBhd2FpdCByZWFkZXIubmV4dChzaXplIHx8IG51bGwpKS5kb25lKSB7XG4gICAgICAgICAgICBpZiAoc2l6ZSAhPSBudWxsICYmIHIudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzaXplIC09IHIudmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5wdXNoKHIudmFsdWUpIHx8IHNpemUgPD0gMCkgeyBicmVhazsgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgociAmJiByLmRvbmUgfHwgIXRoaXMucmVhZGFibGUpICYmICh0aGlzLnB1c2gobnVsbCkgfHwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIGF3YWl0IHJlYWRlci5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXRoaXMucmVhZGFibGU7XG4gICAgfVxufVxuIl19
