// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Duplex } from 'stream';
import { AsyncByteStream } from '../../io/stream';
/** @ignore */
export function recordBatchWriterThroughNodeStream(options) {
    return new RecordBatchWriterDuplex(new this(options));
}
/** @ignore */
class RecordBatchWriterDuplex extends Duplex {
    constructor(writer, options) {
        super({ allowHalfOpen: false, ...options, writableObjectMode: true, readableObjectMode: false });
        this._pulling = false;
        this._writer = writer;
        this._reader = new AsyncByteStream(writer);
    }
    _final(cb) {
        const writer = this._writer;
        writer && writer.close();
        cb && cb();
    }
    _write(x, _, cb) {
        const writer = this._writer;
        writer && writer.write(x);
        cb && cb();
        return true;
    }
    _read(size) {
        const it = this._reader;
        if (it && !this._pulling && (this._pulling = true)) {
            (async () => this._pulling = await this._pull(size, it))();
        }
    }
    _destroy(err, cb) {
        const writer = this._writer;
        if (writer) {
            err ? writer.abort(err) : writer.close();
        }
        cb(this._reader = this._writer = null);
    }
    async _pull(size, reader) {
        let r = null;
        while (this.readable && !(r = await reader.next(size || null)).done) {
            if (size != null && r.value) {
                size -= r.value.byteLength;
            }
            if (!this.push(r.value) || size <= 0) {
                break;
            }
        }
        if ((r && r.done || !this.readable)) {
            this.push(null);
            await reader.cancel();
        }
        return !this.readable;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFO1lBQ2pFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFO2dCQUN6QixJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7YUFDOUI7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRTtnQkFBRSxNQUFNO2FBQUU7U0FDbkQ7UUFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixNQUFNLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN6QjtRQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQzFCLENBQUM7Q0FDSiIsImZpbGUiOiJpcGMvbm9kZS93cml0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRHVwbGV4LCBEdXBsZXhPcHRpb25zIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZSc7XG5pbXBvcnQgeyBBc3luY0J5dGVTdHJlYW0gfSBmcm9tICcuLi8uLi9pby9zdHJlYW0nO1xuaW1wb3J0IHsgUmVjb3JkQmF0Y2hXcml0ZXIgfSBmcm9tICcuLi8uLi9pcGMvd3JpdGVyJztcblxuLyoqIEBpZ25vcmUgKi9cbmV4cG9ydCBmdW5jdGlvbiByZWNvcmRCYXRjaFdyaXRlclRocm91Z2hOb2RlU3RyZWFtPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+KHRoaXM6IHR5cGVvZiBSZWNvcmRCYXRjaFdyaXRlciwgb3B0aW9ucz86IER1cGxleE9wdGlvbnMgJiB7IGF1dG9EZXN0cm95OiBib29sZWFuIH0pIHtcbiAgICByZXR1cm4gbmV3IFJlY29yZEJhdGNoV3JpdGVyRHVwbGV4KG5ldyB0aGlzPFQ+KG9wdGlvbnMpKTtcbn1cblxudHlwZSBDQiA9IChlcnJvcj86IEVycm9yIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcblxuLyoqIEBpZ25vcmUgKi9cbmNsYXNzIFJlY29yZEJhdGNoV3JpdGVyRHVwbGV4PFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+IGV4dGVuZHMgRHVwbGV4IHtcbiAgICBwcml2YXRlIF9wdWxsaW5nOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfcmVhZGVyOiBBc3luY0J5dGVTdHJlYW0gfCBudWxsO1xuICAgIHByaXZhdGUgX3dyaXRlcjogUmVjb3JkQmF0Y2hXcml0ZXIgfCBudWxsO1xuICAgIGNvbnN0cnVjdG9yKHdyaXRlcjogUmVjb3JkQmF0Y2hXcml0ZXI8VD4sIG9wdGlvbnM/OiBEdXBsZXhPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHsgYWxsb3dIYWxmT3BlbjogZmFsc2UsIC4uLm9wdGlvbnMsIHdyaXRhYmxlT2JqZWN0TW9kZTogdHJ1ZSwgcmVhZGFibGVPYmplY3RNb2RlOiBmYWxzZSB9KTtcbiAgICAgICAgdGhpcy5fd3JpdGVyID0gd3JpdGVyO1xuICAgICAgICB0aGlzLl9yZWFkZXIgPSBuZXcgQXN5bmNCeXRlU3RyZWFtKHdyaXRlcik7XG4gICAgfVxuICAgIF9maW5hbChjYj86IENCKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IHRoaXMuX3dyaXRlcjtcbiAgICAgICAgd3JpdGVyICYmIHdyaXRlci5jbG9zZSgpO1xuICAgICAgICBjYiAmJiBjYigpO1xuICAgIH1cbiAgICBfd3JpdGUoeDogYW55LCBfOiBzdHJpbmcsIGNiOiBDQikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSB0aGlzLl93cml0ZXI7XG4gICAgICAgIHdyaXRlciAmJiB3cml0ZXIud3JpdGUoeCk7XG4gICAgICAgIGNiICYmIGNiKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfcmVhZChzaXplOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgaXQgPSB0aGlzLl9yZWFkZXI7XG4gICAgICAgIGlmIChpdCAmJiAhdGhpcy5fcHVsbGluZyAmJiAodGhpcy5fcHVsbGluZyA9IHRydWUpKSB7XG4gICAgICAgICAgICAoYXN5bmMgKCkgPT4gdGhpcy5fcHVsbGluZyA9IGF3YWl0IHRoaXMuX3B1bGwoc2l6ZSwgaXQpKSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9kZXN0cm95KGVycjogRXJyb3IgfCBudWxsLCBjYjogKGVycm9yOiBFcnJvciB8IG51bGwpID0+IHZvaWQpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gdGhpcy5fd3JpdGVyO1xuICAgICAgICBpZiAod3JpdGVyKSB7IGVyciA/IHdyaXRlci5hYm9ydChlcnIpIDogd3JpdGVyLmNsb3NlKCk7IH1cbiAgICAgICAgY2IodGhpcy5fcmVhZGVyID0gdGhpcy5fd3JpdGVyID0gbnVsbCk7XG4gICAgfVxuICAgIGFzeW5jIF9wdWxsKHNpemU6IG51bWJlciwgcmVhZGVyOiBBc3luY0J5dGVTdHJlYW0pIHtcbiAgICAgICAgbGV0IHI6IEl0ZXJhdG9yUmVzdWx0PFVpbnQ4QXJyYXk+IHwgbnVsbCA9IG51bGw7XG4gICAgICAgIHdoaWxlICh0aGlzLnJlYWRhYmxlICYmICEociA9IGF3YWl0IHJlYWRlci5uZXh0KHNpemUgfHwgbnVsbCkpLmRvbmUpIHtcbiAgICAgICAgICAgIGlmIChzaXplICE9IG51bGwgJiYgci52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHNpemUgLT0gci52YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnB1c2goci52YWx1ZSkgfHwgc2l6ZSA8PSAwKSB7IGJyZWFrOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChyICYmIHIuZG9uZSB8fCAhdGhpcy5yZWFkYWJsZSkpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaChudWxsKTtcbiAgICAgICAgICAgIGF3YWl0IHJlYWRlci5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXRoaXMucmVhZGFibGU7XG4gICAgfVxufVxuIl19
