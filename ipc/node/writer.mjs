// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Duplex } from 'stream';
import { AsyncByteStream } from '../../io/stream';
export function recordBatchWriterThroughNodeStream() {
    return new RecordBatchWriterDuplex(new this());
}
class RecordBatchWriterDuplex extends Duplex {
    constructor(writer) {
        super({ allowHalfOpen: false, writableObjectMode: true, readableObjectMode: false });
        this._pulling = false;
        this._writer = writer;
        this._reader = new AsyncByteStream(writer);
    }
    _final(cb) {
        const writer = this._writer;
        writer && writer.close();
        cb && cb();
    }
    _write(x, _, cb) {
        const writer = this._writer;
        writer && writer.write(x);
        cb && cb();
        return true;
    }
    _read(size) {
        const it = this._reader;
        if (it && !this._pulling && (this._pulling = true)) {
            (async () => this._pulling = await this._pull(size, it))();
        }
    }
    _destroy(err, cb) {
        const writer = this._writer;
        if (writer) {
            err ? writer.abort(err) : writer.close();
        }
        cb(this._reader = this._writer = null);
    }
    async _pull(size, reader) {
        let r = null;
        while (this.readable && !(r = await reader.next(size || null)).done) {
            if (size != null && r.value) {
                size -= r.value.byteLength;
            }
            if (!this.push(r.value) || size <= 0) {
                break;
            }
        }
        if ((r && r.done || !this.readable) && (this.push(null) || true)) {
            await reader.cancel();
        }
        return !this.readable;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFJLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFO2dCQUN6QixJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7YUFDOUI7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRTtnQkFBRSxNQUFNO2FBQUU7U0FDbkQ7UUFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFO1lBQzlELE1BQU0sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDMUIsQ0FBQztDQUNKIiwiZmlsZSI6ImlwYy9ub2RlL3dyaXRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEdXBsZXggfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tICcuLi8uLi90eXBlJztcbmltcG9ydCB7IEFzeW5jQnl0ZVN0cmVhbSB9IGZyb20gJy4uLy4uL2lvL3N0cmVhbSc7XG5pbXBvcnQgeyBSZWNvcmRCYXRjaFdyaXRlciB9IGZyb20gJy4uLy4uL2lwYy93cml0ZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVjb3JkQmF0Y2hXcml0ZXJUaHJvdWdoTm9kZVN0cmVhbTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55Pih0aGlzOiB0eXBlb2YgUmVjb3JkQmF0Y2hXcml0ZXIpIHtcbiAgICByZXR1cm4gbmV3IFJlY29yZEJhdGNoV3JpdGVyRHVwbGV4KG5ldyB0aGlzPFQ+KCkpO1xufVxuXG50eXBlIENCID0gKGVycm9yPzogRXJyb3IgfCBudWxsIHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xuXG5jbGFzcyBSZWNvcmRCYXRjaFdyaXRlckR1cGxleDxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiBleHRlbmRzIER1cGxleCB7XG4gICAgcHJpdmF0ZSBfcHVsbGluZzogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgX3JlYWRlcjogQXN5bmNCeXRlU3RyZWFtIHwgbnVsbDtcbiAgICBwcml2YXRlIF93cml0ZXI6IFJlY29yZEJhdGNoV3JpdGVyIHwgbnVsbDtcbiAgICBjb25zdHJ1Y3Rvcih3cml0ZXI6IFJlY29yZEJhdGNoV3JpdGVyPFQ+KSB7XG4gICAgICAgIHN1cGVyKHsgYWxsb3dIYWxmT3BlbjogZmFsc2UsIHdyaXRhYmxlT2JqZWN0TW9kZTogdHJ1ZSwgcmVhZGFibGVPYmplY3RNb2RlOiBmYWxzZSB9KTtcbiAgICAgICAgdGhpcy5fd3JpdGVyID0gd3JpdGVyO1xuICAgICAgICB0aGlzLl9yZWFkZXIgPSBuZXcgQXN5bmNCeXRlU3RyZWFtKHdyaXRlcik7XG4gICAgfVxuICAgIF9maW5hbChjYj86IENCKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IHRoaXMuX3dyaXRlcjtcbiAgICAgICAgd3JpdGVyICYmIHdyaXRlci5jbG9zZSgpO1xuICAgICAgICBjYiAmJiBjYigpO1xuICAgIH1cbiAgICBfd3JpdGUoeDogYW55LCBfOiBzdHJpbmcsIGNiOiBDQikge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSB0aGlzLl93cml0ZXI7XG4gICAgICAgIHdyaXRlciAmJiB3cml0ZXIud3JpdGUoeCk7XG4gICAgICAgIGNiICYmIGNiKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfcmVhZChzaXplOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgaXQgPSB0aGlzLl9yZWFkZXI7XG4gICAgICAgIGlmIChpdCAmJiAhdGhpcy5fcHVsbGluZyAmJiAodGhpcy5fcHVsbGluZyA9IHRydWUpKSB7XG4gICAgICAgICAgICAoYXN5bmMgKCkgPT4gdGhpcy5fcHVsbGluZyA9IGF3YWl0IHRoaXMuX3B1bGwoc2l6ZSwgaXQpKSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9kZXN0cm95KGVycjogRXJyb3IgfCBudWxsLCBjYjogKGVycm9yOiBFcnJvciB8IG51bGwpID0+IHZvaWQpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gdGhpcy5fd3JpdGVyO1xuICAgICAgICBpZiAod3JpdGVyKSB7IGVyciA/IHdyaXRlci5hYm9ydChlcnIpIDogd3JpdGVyLmNsb3NlKCk7IH1cbiAgICAgICAgY2IodGhpcy5fcmVhZGVyID0gdGhpcy5fd3JpdGVyID0gbnVsbCk7XG4gICAgfVxuICAgIGFzeW5jIF9wdWxsKHNpemU6IG51bWJlciwgcmVhZGVyOiBBc3luY0J5dGVTdHJlYW0pIHtcbiAgICAgICAgbGV0IHI6IEl0ZXJhdG9yUmVzdWx0PFVpbnQ4QXJyYXk+IHwgbnVsbCA9IG51bGw7XG4gICAgICAgIHdoaWxlICh0aGlzLnJlYWRhYmxlICYmICEociA9IGF3YWl0IHJlYWRlci5uZXh0KHNpemUgfHwgbnVsbCkpLmRvbmUpIHtcbiAgICAgICAgICAgIGlmIChzaXplICE9IG51bGwgJiYgci52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHNpemUgLT0gci52YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnB1c2goci52YWx1ZSkgfHwgc2l6ZSA8PSAwKSB7IGJyZWFrOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChyICYmIHIuZG9uZSB8fCAhdGhpcy5yZWFkYWJsZSkgJiYgKHRoaXMucHVzaChudWxsKSB8fCB0cnVlKSkge1xuICAgICAgICAgICAgYXdhaXQgcmVhZGVyLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhdGhpcy5yZWFkYWJsZTtcbiAgICB9XG59XG4iXX0=
