// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Duplex } from 'stream';
import { AsyncByteQueue } from '../../io/stream';
import { RecordBatchReader } from '../../ipc/reader';
export function recordBatchReaderThroughNodeStream() {
    return new RecordBatchReaderDuplex();
}
class RecordBatchReaderDuplex extends Duplex {
    constructor() {
        super({ allowHalfOpen: false, readableObjectMode: true, writableObjectMode: false });
        this._pulling = false;
        this._reader = null;
        this._asyncQueue = new AsyncByteQueue();
    }
    _final(cb) {
        const aq = this._asyncQueue;
        aq && aq.close();
        cb && cb();
    }
    _write(x, _, cb) {
        const aq = this._asyncQueue;
        aq && aq.write(x);
        cb && cb();
        return true;
    }
    _read(size) {
        const aq = this._asyncQueue;
        if (aq && !this._pulling && (this._pulling = true)) {
            (async () => {
                if (!this._reader) {
                    this._reader = await this._open(aq);
                }
                ;
                this._pulling = await this._pull(size, this._reader);
            })();
        }
    }
    _destroy(err, cb) {
        const aq = this._asyncQueue;
        if (aq) {
            err ? aq.abort(err) : aq.close();
        }
        cb(this._asyncQueue = this._reader = null);
    }
    async _open(source) {
        return await (await RecordBatchReader.from(source)).open();
    }
    async _pull(size, reader) {
        let r = null;
        while (this.readable && !(r = await reader.next()).done) {
            if (!this.push(r.value) || (size != null && --size <= 0)) {
                break;
            }
        }
        if ((r && r.done || !this.readable) && (this.push(null) || true)) {
            await reader.cancel();
        }
        return !this.readable;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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aUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0QsQ0FBQztJQUNELEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBWSxFQUFFLE1BQTRCO1FBQ2xELElBQUksQ0FBQyxHQUEwQyxJQUFJLENBQUM7UUFDcEQsT0FBTyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUU7WUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRTtnQkFBRSxNQUFNO2FBQUU7U0FDdkU7UUFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFO1lBQzlELE1BQU0sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDMUIsQ0FBQztDQUNKIiwiZmlsZSI6ImlwYy9ub2RlL3JlYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEdXBsZXggfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tICcuLi8uLi90eXBlJztcbmltcG9ydCB7IFJlY29yZEJhdGNoIH0gZnJvbSAnLi4vLi4vcmVjb3JkYmF0Y2gnO1xuaW1wb3J0IHsgQXN5bmNCeXRlUXVldWUgfSBmcm9tICcuLi8uLi9pby9zdHJlYW0nO1xuaW1wb3J0IHsgUmVjb3JkQmF0Y2hSZWFkZXIgfSBmcm9tICcuLi8uLi9pcGMvcmVhZGVyJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29yZEJhdGNoUmVhZGVyVGhyb3VnaE5vZGVTdHJlYW08VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4oKSB7XG4gICAgcmV0dXJuIG5ldyBSZWNvcmRCYXRjaFJlYWRlckR1cGxleDxUPigpO1xufVxuXG50eXBlIENCID0gKGVycm9yPzogRXJyb3IgfCBudWxsIHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xuXG5jbGFzcyBSZWNvcmRCYXRjaFJlYWRlckR1cGxleDxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiBleHRlbmRzIER1cGxleCB7XG4gICAgcHJpdmF0ZSBfcHVsbGluZzogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgX3JlYWRlcjogUmVjb3JkQmF0Y2hSZWFkZXIgfCBudWxsO1xuICAgIHByaXZhdGUgX2FzeW5jUXVldWU6IEFzeW5jQnl0ZVF1ZXVlIHwgbnVsbDtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoeyBhbGxvd0hhbGZPcGVuOiBmYWxzZSwgcmVhZGFibGVPYmplY3RNb2RlOiB0cnVlLCB3cml0YWJsZU9iamVjdE1vZGU6IGZhbHNlIH0pO1xuICAgICAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9hc3luY1F1ZXVlID0gbmV3IEFzeW5jQnl0ZVF1ZXVlKCk7XG4gICAgfVxuICAgIF9maW5hbChjYj86IENCKSB7XG4gICAgICAgIGNvbnN0IGFxID0gdGhpcy5fYXN5bmNRdWV1ZTtcbiAgICAgICAgYXEgJiYgYXEuY2xvc2UoKTtcbiAgICAgICAgY2IgJiYgY2IoKTtcbiAgICB9XG4gICAgX3dyaXRlKHg6IGFueSwgXzogc3RyaW5nLCBjYjogQ0IpIHtcbiAgICAgICAgY29uc3QgYXEgPSB0aGlzLl9hc3luY1F1ZXVlO1xuICAgICAgICBhcSAmJiBhcS53cml0ZSh4KTtcbiAgICAgICAgY2IgJiYgY2IoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF9yZWFkKHNpemU6IG51bWJlcikge1xuICAgICAgICBjb25zdCBhcSA9IHRoaXMuX2FzeW5jUXVldWU7XG4gICAgICAgIGlmIChhcSAmJiAhdGhpcy5fcHVsbGluZyAmJiAodGhpcy5fcHVsbGluZyA9IHRydWUpKSB7XG4gICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcmVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRlciA9IGF3YWl0IHRoaXMuX29wZW4oYXEpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5fcHVsbGluZyA9IGF3YWl0IHRoaXMuX3B1bGwoc2l6ZSwgdGhpcy5fcmVhZGVyKTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2Rlc3Ryb3koZXJyOiBFcnJvciB8IG51bGwsIGNiOiAoZXJyb3I6IEVycm9yIHwgbnVsbCkgPT4gdm9pZCkge1xuICAgICAgICBjb25zdCBhcSA9IHRoaXMuX2FzeW5jUXVldWU7XG4gICAgICAgIGlmIChhcSkgeyBlcnIgPyBhcS5hYm9ydChlcnIpIDogYXEuY2xvc2UoKTsgfVxuICAgICAgICBjYih0aGlzLl9hc3luY1F1ZXVlID0gdGhpcy5fcmVhZGVyID0gbnVsbCk7XG4gICAgfVxuICAgIGFzeW5jIF9vcGVuKHNvdXJjZTogQXN5bmNCeXRlUXVldWUpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IChhd2FpdCBSZWNvcmRCYXRjaFJlYWRlci5mcm9tKHNvdXJjZSkpLm9wZW4oKTtcbiAgICB9XG4gICAgYXN5bmMgX3B1bGwoc2l6ZTogbnVtYmVyLCByZWFkZXI6IFJlY29yZEJhdGNoUmVhZGVyPFQ+KSB7XG4gICAgICAgIGxldCByOiBJdGVyYXRvclJlc3VsdDxSZWNvcmRCYXRjaDxUPj4gfCBudWxsID0gbnVsbDtcbiAgICAgICAgd2hpbGUgKHRoaXMucmVhZGFibGUgJiYgIShyID0gYXdhaXQgcmVhZGVyLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnB1c2goci52YWx1ZSkgfHwgKHNpemUgIT0gbnVsbCAmJiAtLXNpemUgPD0gMCkpIHsgYnJlYWs7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKHIgJiYgci5kb25lIHx8ICF0aGlzLnJlYWRhYmxlKSAmJiAodGhpcy5wdXNoKG51bGwpIHx8IHRydWUpKSB7XG4gICAgICAgICAgICBhd2FpdCByZWFkZXIuY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICF0aGlzLnJlYWRhYmxlO1xuICAgIH1cbn1cbiJdfQ==
