// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { MAGIC } from './message';
import { Schema } from '../schema';
import { Message } from './metadata/message';
import * as metadata from './metadata/message';
import { ChunkedVector } from '../vector/chunked';
import { FileBlock, Footer } from './metadata/file';
import { MessageHeader, MetadataVersion } from '../enum';
import { AsyncByteQueue } from '../io/stream';
import { VectorAssembler } from '../visitor/vectorassembler';
import { isWritableDOMStream, isWritableNodeStream, isAsyncIterable } from '../util/compat';
import { ReadableInterop } from '../io/interfaces';
const kAlignmentBytes = new Uint8Array(64).fill(0);
export class RecordBatchWriter extends ReadableInterop {
    constructor() {
        super(...arguments);
        this.position = 0;
        this.started = false;
        // @ts-ignore
        this.sink = new AsyncByteQueue();
        this.schema = null;
        this.dictionaryBlocks = [];
        this.recordBatchBlocks = [];
    }
    /** @nocollapse */
    static throughNode() { throw new Error(`"throughNode" not available in this environment`); }
    /** @nocollapse */
    static throughDOM() {
        throw new Error(`"throughDOM" not available in this environment`);
    }
    toUint8Array(sync = false) {
        return this.sink.toUint8Array(sync);
    }
    get closed() { return this.sink.closed; }
    [Symbol.asyncIterator]() { return this.sink[Symbol.asyncIterator](); }
    toReadableDOMStream(options) { return this.sink.toReadableDOMStream(options); }
    toReadableNodeStream(options) { return this.sink.toReadableNodeStream(options); }
    close() { return this.reset().sink.close(); }
    abort(reason) { return this.reset().sink.abort(reason); }
    reset(sink = this.sink, schema) {
        if ((sink === this.sink) || (sink instanceof AsyncByteQueue)) {
            this.sink = sink;
        }
        else {
            this.sink = new AsyncByteQueue();
            if (sink && isWritableDOMStream(sink)) {
                this.toReadableDOMStream().pipeTo(sink);
            }
            else if (sink && isWritableNodeStream(sink)) {
                this.toReadableNodeStream().pipe(sink);
            }
        }
        this.position = 0;
        this.schema = null;
        this.started = false;
        this.dictionaryBlocks = [];
        this.recordBatchBlocks = [];
        if (schema instanceof Schema) {
            this.started = true;
            this.schema = schema;
            this._writeSchema(schema);
        }
        return this;
    }
    write(chunk) {
        if (!this.sink) {
            throw new Error(`RecordBatchWriter is closed`);
        }
        if (!this.started && (this.started = true)) {
            this._writeSchema(this.schema = chunk.schema);
        }
        if (chunk.schema !== this.schema) {
            throw new Error('Schemas unequal');
        }
        this._writeRecordBatch(chunk);
    }
    _writeMessage(message, alignment = 8) {
        const a = alignment - 1;
        const buffer = Message.encode(message);
        const flatbufferSize = buffer.byteLength;
        const alignedSize = (flatbufferSize + 4 + a) & ~a;
        const nPaddingBytes = alignedSize - flatbufferSize - 4;
        if (message.headerType === MessageHeader.RecordBatch) {
            this.recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this.position));
        }
        else if (message.headerType === MessageHeader.DictionaryBatch) {
            this.dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this.position));
        }
        // Write the flatbuffer size prefix including padding
        this._write(Int32Array.of(alignedSize - 4));
        // Write the flatbuffer
        if (flatbufferSize > 0) {
            this._write(buffer);
        }
        // Write any padding
        return this._writePadding(nPaddingBytes);
    }
    _write(buffer) {
        if (buffer && buffer.byteLength > 0) {
            this.sink.write(buffer);
            this.position += buffer.byteLength;
        }
        return this;
    }
    _writeSchema(schema) {
        return this
            ._writeMessage(Message.from(schema))
            ._writeDictionaries(schema.dictionaryFields);
    }
    _writeFooter() {
        const { schema, recordBatchBlocks, dictionaryBlocks } = this;
        const buffer = Footer.encode(new Footer(schema, MetadataVersion.V4, recordBatchBlocks, dictionaryBlocks));
        return this
            ._write(buffer) // Write the flatbuffer
            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix
            ._writeMagic(); // then the magic suffix
    }
    _writeMagic() {
        return this._write(MAGIC);
    }
    _writePadding(nBytes) {
        return nBytes > 0 ? this._write(kAlignmentBytes.subarray(0, nBytes)) : this;
    }
    _writeRecordBatch(records) {
        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(records);
        const recordBatch = new metadata.RecordBatch(records.length, nodes, bufferRegions);
        const message = Message.from(recordBatch, byteLength);
        return this
            ._writeMessage(message)
            ._writeBodyBuffers(buffers);
    }
    _writeDictionaryBatch(dictionary, id, isDelta = false) {
        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);
        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);
        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);
        const message = Message.from(dictionaryBatch, byteLength);
        return this
            ._writeMessage(message)
            ._writeBodyBuffers(buffers);
    }
    _writeBodyBuffers(buffers) {
        let buffer;
        let size, padding;
        for (let i = -1, n = buffers.length; ++i < n;) {
            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {
                this._write(buffer);
                if ((padding = ((size + 7) & ~7) - size) > 0) {
                    this._writePadding(padding);
                }
            }
        }
        return this;
    }
    _writeDictionaries(dictionaryFields) {
        for (const [id, fields] of dictionaryFields) {
            const vector = fields[0].type.dictionaryVector;
            if (!(vector instanceof ChunkedVector)) {
                this._writeDictionaryBatch(vector, id, false);
            }
            else {
                const chunks = vector.chunks;
                for (let i = -1, n = chunks.length; ++i < n;) {
                    this._writeDictionaryBatch(chunks[i], id, i > 0);
                }
            }
        }
        return this;
    }
}
export class RecordBatchFileWriter extends RecordBatchWriter {
    /** @nocollapse */
    static writeAll(batches) {
        const writer = new RecordBatchFileWriter();
        if (!isAsyncIterable(batches)) {
            for (const batch of batches)
                writer.write(batch);
            writer.close();
            return writer;
        }
        return (async () => {
            for await (const batch of batches)
                writer.write(batch);
            writer.close();
            return writer;
        })();
    }
    close() {
        this._writeFooter();
        return super.close();
    }
    _writeSchema(schema) {
        return this
            ._writeMagic()._writePadding(2)
            ._writeDictionaries(schema.dictionaryFields);
    }
}
export class RecordBatchStreamWriter extends RecordBatchWriter {
    /** @nocollapse */
    static writeAll(batches) {
        const writer = new RecordBatchStreamWriter();
        if (!isAsyncIterable(batches)) {
            for (const batch of batches)
                writer.write(batch);
            writer.close();
            return writer;
        }
        return (async () => {
            for await (const batch of batches)
                writer.write(batch);
            writer.close();
            return writer;
        })();
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
