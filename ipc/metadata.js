"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:class-name */
const bit_1 = require("../util/bit");
const type_1 = require("../type");
class Footer {
    constructor(dictionaryBatches, recordBatches, schema) {
        this.dictionaryBatches = dictionaryBatches;
        this.recordBatches = recordBatches;
        this.schema = schema;
    }
}
exports.Footer = Footer;
class FileBlock {
    constructor(metaDataLength, bodyLength, offset) {
        this.metaDataLength = metaDataLength;
        this.offset = typeof offset === 'number' ? offset : offset.low;
        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
    }
}
exports.FileBlock = FileBlock;
class Message {
    constructor(version, bodyLength, headerType) {
        this.version = version;
        this.headerType = headerType;
        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
    }
    static isSchema(m) { return m.headerType === type_1.MessageHeader.Schema; }
    static isRecordBatch(m) { return m.headerType === type_1.MessageHeader.RecordBatch; }
    static isDictionaryBatch(m) { return m.headerType === type_1.MessageHeader.DictionaryBatch; }
}
exports.Message = Message;
class RecordBatchMetadata extends Message {
    constructor(version, length, nodes, buffers, bodyLength) {
        if (bodyLength === void (0)) {
            bodyLength = buffers.reduce((s, b) => bit_1.align(s + b.length + (b.offset - s), 8), 0);
        }
        super(version, bodyLength, type_1.MessageHeader.RecordBatch);
        this.nodes = nodes;
        this.buffers = buffers;
        this.length = typeof length === 'number' ? length : length.low;
    }
}
exports.RecordBatchMetadata = RecordBatchMetadata;
class DictionaryBatch extends Message {
    constructor(version, data, id, isDelta = false) {
        super(version, data.bodyLength, type_1.MessageHeader.DictionaryBatch);
        this.isDelta = isDelta;
        this.data = data;
        this.id = typeof id === 'number' ? id : id.low;
    }
    static getId() { return DictionaryBatch.atomicDictionaryId++; }
    get nodes() { return this.data.nodes; }
    get buffers() { return this.data.buffers; }
}
DictionaryBatch.atomicDictionaryId = 0;
exports.DictionaryBatch = DictionaryBatch;
class BufferMetadata {
    constructor(offset, length) {
        this.offset = typeof offset === 'number' ? offset : offset.low;
        this.length = typeof length === 'number' ? length : length.low;
    }
}
exports.BufferMetadata = BufferMetadata;
class FieldMetadata {
    constructor(length, nullCount) {
        this.length = typeof length === 'number' ? length : length.low;
        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;
    }
}
exports.FieldMetadata = FieldMetadata;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
