"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:class-name */
const type_1 = require("../type");
class Footer {
    constructor(dictionaryBatches, recordBatches, schema) {
        this.dictionaryBatches = dictionaryBatches;
        this.recordBatches = recordBatches;
        this.schema = schema;
    }
}
exports.Footer = Footer;
class FileBlock {
    constructor(metaDataLength, bodyLength, offset) {
        this.metaDataLength = metaDataLength;
        this.offset = typeof offset === 'number' ? offset : offset.low;
        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
    }
}
exports.FileBlock = FileBlock;
class Message {
    constructor(version, bodyLength, headerType) {
        this.version = version;
        this.headerType = headerType;
        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;
    }
    static isSchema(m) { return m.headerType === type_1.MessageHeader.Schema; }
    static isRecordBatch(m) { return m.headerType === type_1.MessageHeader.RecordBatch; }
    static isDictionaryBatch(m) { return m.headerType === type_1.MessageHeader.DictionaryBatch; }
}
exports.Message = Message;
class RecordBatchMetadata extends Message {
    constructor(version, length, nodes, buffers, bodyLength) {
        if (bodyLength === void (0)) {
            bodyLength = buffers.reduce((bodyLength, buffer) => bodyLength + buffer.length, 0);
        }
        super(version, bodyLength, type_1.MessageHeader.RecordBatch);
        this.nodes = nodes;
        this.buffers = buffers;
        this.length = typeof length === 'number' ? length : length.low;
    }
}
exports.RecordBatchMetadata = RecordBatchMetadata;
class DictionaryBatch extends Message {
    constructor(version, data, id, isDelta = false) {
        super(version, data.bodyLength, type_1.MessageHeader.DictionaryBatch);
        this.isDelta = isDelta;
        this.data = data;
        this.id = typeof id === 'number' ? id : id.low;
    }
    static getId() { return DictionaryBatch.atomicDictionaryId++; }
    get nodes() { return this.data.nodes; }
    get buffers() { return this.data.buffers; }
}
DictionaryBatch.atomicDictionaryId = 0;
exports.DictionaryBatch = DictionaryBatch;
class BufferMetadata {
    constructor(offset, length) {
        this.offset = typeof offset === 'number' ? offset : offset.low;
        this.length = typeof length === 'number' ? length : length.low;
    }
}
exports.BufferMetadata = BufferMetadata;
class FieldMetadata {
    constructor(length, nullCount) {
        this.length = typeof length === 'number' ? length : length.low;
        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;
    }
}
exports.FieldMetadata = FieldMetadata;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDL0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLFNBQVMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUMvRSxDQUFDO0NBQ0o7QUFQRCxzQ0FPQyIsImZpbGUiOiJpcGMvbWV0YWRhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyogdHNsaW50OmRpc2FibGU6Y2xhc3MtbmFtZSAqL1xuXG5pbXBvcnQgeyBTY2hlbWEsIExvbmcsIE1lc3NhZ2VIZWFkZXIsIE1ldGFkYXRhVmVyc2lvbiB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgRm9vdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZGljdGlvbmFyeUJhdGNoZXM6IEZpbGVCbG9ja1tdLCBwdWJsaWMgcmVjb3JkQmF0Y2hlczogRmlsZUJsb2NrW10sIHB1YmxpYyBzY2hlbWE6IFNjaGVtYSkge31cbn1cblxuZXhwb3J0IGNsYXNzIEZpbGVCbG9jayB7XG4gICAgcHVibGljIG9mZnNldDogbnVtYmVyO1xuICAgIHB1YmxpYyBib2R5TGVuZ3RoOiBudW1iZXI7XG4gICAgY29uc3RydWN0b3IocHVibGljIG1ldGFEYXRhTGVuZ3RoOiBudW1iZXIsIGJvZHlMZW5ndGg6IExvbmcgfCBudW1iZXIsIG9mZnNldDogTG9uZyB8IG51bWJlcikge1xuICAgICAgICB0aGlzLm9mZnNldCA9IHR5cGVvZiBvZmZzZXQgPT09ICdudW1iZXInID8gb2Zmc2V0IDogb2Zmc2V0LmxvdztcbiAgICAgICAgdGhpcy5ib2R5TGVuZ3RoID0gdHlwZW9mIGJvZHlMZW5ndGggPT09ICdudW1iZXInID8gYm9keUxlbmd0aCA6IGJvZHlMZW5ndGgubG93O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1lc3NhZ2Uge1xuICAgIHB1YmxpYyBib2R5TGVuZ3RoOiBudW1iZXI7XG4gICAgcHVibGljIHZlcnNpb246IE1ldGFkYXRhVmVyc2lvbjtcbiAgICBwdWJsaWMgaGVhZGVyVHlwZTogTWVzc2FnZUhlYWRlcjtcbiAgICBjb25zdHJ1Y3Rvcih2ZXJzaW9uOiBNZXRhZGF0YVZlcnNpb24sIGJvZHlMZW5ndGg6IExvbmcgfCBudW1iZXIsIGhlYWRlclR5cGU6IE1lc3NhZ2VIZWFkZXIpIHtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5oZWFkZXJUeXBlID0gaGVhZGVyVHlwZTtcbiAgICAgICAgdGhpcy5ib2R5TGVuZ3RoID0gdHlwZW9mIGJvZHlMZW5ndGggPT09ICdudW1iZXInID8gYm9keUxlbmd0aCA6IGJvZHlMZW5ndGgubG93O1xuICAgIH1cbiAgICBzdGF0aWMgaXNTY2hlbWEobTogTWVzc2FnZSk6IG0gaXMgU2NoZW1hIHsgcmV0dXJuIG0uaGVhZGVyVHlwZSA9PT0gTWVzc2FnZUhlYWRlci5TY2hlbWE7IH1cbiAgICBzdGF0aWMgaXNSZWNvcmRCYXRjaChtOiBNZXNzYWdlKTogbSBpcyBSZWNvcmRCYXRjaE1ldGFkYXRhIHsgcmV0dXJuIG0uaGVhZGVyVHlwZSA9PT0gTWVzc2FnZUhlYWRlci5SZWNvcmRCYXRjaDsgfVxuICAgIHN0YXRpYyBpc0RpY3Rpb25hcnlCYXRjaChtOiBNZXNzYWdlKTogbSBpcyBEaWN0aW9uYXJ5QmF0Y2ggeyByZXR1cm4gbS5oZWFkZXJUeXBlID09PSBNZXNzYWdlSGVhZGVyLkRpY3Rpb25hcnlCYXRjaDsgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVjb3JkQmF0Y2hNZXRhZGF0YSBleHRlbmRzIE1lc3NhZ2Uge1xuICAgIHB1YmxpYyBsZW5ndGg6IG51bWJlcjtcbiAgICBwdWJsaWMgbm9kZXM6IEZpZWxkTWV0YWRhdGFbXTtcbiAgICBwdWJsaWMgYnVmZmVyczogQnVmZmVyTWV0YWRhdGFbXTtcbiAgICBjb25zdHJ1Y3Rvcih2ZXJzaW9uOiBNZXRhZGF0YVZlcnNpb24sIGxlbmd0aDogTG9uZyB8IG51bWJlciwgbm9kZXM6IEZpZWxkTWV0YWRhdGFbXSwgYnVmZmVyczogQnVmZmVyTWV0YWRhdGFbXSwgYm9keUxlbmd0aD86IExvbmcgfCBudW1iZXIpIHtcbiAgICAgICAgaWYgKGJvZHlMZW5ndGggPT09IHZvaWQoMCkpIHtcbiAgICAgICAgICAgIGJvZHlMZW5ndGggPSBidWZmZXJzLnJlZHVjZSgoYm9keUxlbmd0aCwgYnVmZmVyKSA9PiBib2R5TGVuZ3RoICsgYnVmZmVyLmxlbmd0aCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIodmVyc2lvbiwgYm9keUxlbmd0aCwgTWVzc2FnZUhlYWRlci5SZWNvcmRCYXRjaCk7XG4gICAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICAgICAgdGhpcy5idWZmZXJzID0gYnVmZmVycztcbiAgICAgICAgdGhpcy5sZW5ndGggPSB0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyA/IGxlbmd0aCA6IGxlbmd0aC5sb3c7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGljdGlvbmFyeUJhdGNoIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgcHVibGljIGlkOiBudW1iZXI7XG4gICAgcHVibGljIGlzRGVsdGE6IGJvb2xlYW47XG4gICAgcHVibGljIGRhdGE6IFJlY29yZEJhdGNoTWV0YWRhdGE7XG4gICAgY29uc3RydWN0b3IodmVyc2lvbjogTWV0YWRhdGFWZXJzaW9uLCBkYXRhOiBSZWNvcmRCYXRjaE1ldGFkYXRhLCBpZDogTG9uZyB8IG51bWJlciwgaXNEZWx0YTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKHZlcnNpb24sIGRhdGEuYm9keUxlbmd0aCwgTWVzc2FnZUhlYWRlci5EaWN0aW9uYXJ5QmF0Y2gpO1xuICAgICAgICB0aGlzLmlzRGVsdGEgPSBpc0RlbHRhO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmlkID0gdHlwZW9mIGlkID09PSAnbnVtYmVyJyA/IGlkIDogaWQubG93O1xuICAgIH1cbiAgICBwcml2YXRlIHN0YXRpYyBhdG9taWNEaWN0aW9uYXJ5SWQgPSAwO1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0SWQoKSB7IHJldHVybiBEaWN0aW9uYXJ5QmF0Y2guYXRvbWljRGljdGlvbmFyeUlkKys7IH1cbiAgICBwdWJsaWMgZ2V0IG5vZGVzKCk6IEZpZWxkTWV0YWRhdGFbXSB7IHJldHVybiB0aGlzLmRhdGEubm9kZXM7IH1cbiAgICBwdWJsaWMgZ2V0IGJ1ZmZlcnMoKTogQnVmZmVyTWV0YWRhdGFbXSB7IHJldHVybiB0aGlzLmRhdGEuYnVmZmVyczsgfVxufVxuXG5leHBvcnQgY2xhc3MgQnVmZmVyTWV0YWRhdGEge1xuICAgIHB1YmxpYyBvZmZzZXQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbGVuZ3RoOiBudW1iZXI7XG4gICAgY29uc3RydWN0b3Iob2Zmc2V0OiBMb25nIHwgbnVtYmVyLCBsZW5ndGg6IExvbmcgfCBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSB0eXBlb2Ygb2Zmc2V0ID09PSAnbnVtYmVyJyA/IG9mZnNldCA6IG9mZnNldC5sb3c7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gdHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicgPyBsZW5ndGggOiBsZW5ndGgubG93O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZpZWxkTWV0YWRhdGEge1xuICAgIHB1YmxpYyBsZW5ndGg6IG51bWJlcjtcbiAgICBwdWJsaWMgbnVsbENvdW50OiBudW1iZXI7XG4gICAgY29uc3RydWN0b3IobGVuZ3RoOiBMb25nIHwgbnVtYmVyLCBudWxsQ291bnQ6IExvbmcgfCBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5sZW5ndGggPSB0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyA/IGxlbmd0aCA6IGxlbmd0aC5sb3c7XG4gICAgICAgIHRoaXMubnVsbENvdW50ID0gdHlwZW9mIG51bGxDb3VudCA9PT0gJ251bWJlcicgPyBudWxsQ291bnQgOiBudWxsQ291bnQubG93O1xuICAgIH1cbn1cbiJdfQ==
