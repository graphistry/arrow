"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = require("./schema");
const vector_1 = require("./vector");
const chunked_1 = require("./vector/chunked");
class Column extends chunked_1.Chunked {
    constructor(field, vectors = [], offsets) {
        vectors = chunked_1.Chunked.flatten(...vectors);
        super(field.type, vectors, offsets);
        this._field = field;
        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {
            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);
        }
    }
    /** @nocollapse */
    static new(field, data, ...rest) {
        const chunks = chunked_1.Chunked.flatten(Array.isArray(data) ? [...data, ...rest] :
            data instanceof vector_1.Vector ? [data, ...rest] :
                [vector_1.Vector.new(data, ...rest)]);
        if (typeof field === 'string') {
            const type = chunks[0].data.type;
            field = new schema_1.Field(field, type, chunks.some(({ nullCount }) => nullCount > 0));
        }
        else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {
            field = field.clone({ nullable: true });
        }
        return new Column(field, chunks);
    }
    get field() { return this._field; }
    get name() { return this._field.name; }
    get nullable() { return this._field.nullable; }
    get metadata() { return this._field.metadata; }
    clone(chunks = this._chunks) {
        return new Column(this._field, chunks);
    }
    getChildAt(index) {
        if (index < 0 || index >= this.numChildren) {
            return null;
        }
        let columns = this._children || (this._children = []);
        let column, field, chunks;
        if (column = columns[index]) {
            return column;
        }
        if (field = (this.type.children || [])[index]) {
            chunks = this._chunks
                .map((vector) => vector.getChildAt(index))
                .filter((vec) => vec != null);
            if (chunks.length > 0) {
                return (columns[index] = new Column(field, chunks));
            }
        }
        return null;
    }
}
exports.Column = Column;
class SingleChunkColumn extends Column {
    constructor(field, vector, offsets) {
        super(field, [vector], offsets);
        this._chunk = vector;
    }
    search(index, then) {
        return then ? then(this, 0, index) : [0, index];
    }
    isValid(index) {
        return this._chunk.isValid(index);
    }
    get(index) {
        return this._chunk.get(index);
    }
    set(index, value) {
        this._chunk.set(index, value);
    }
    indexOf(element, offset) {
        return this._chunk.indexOf(element, offset);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QVM7SUFFL0QsWUFBWSxLQUFlLEVBQUUsTUFBaUIsRUFBRSxPQUFxQjtRQUNqRSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUdNLE1BQU0sQ0FBMkMsS0FBYSxFQUFFLElBQVE7UUFDM0UsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ00sT0FBTyxDQUFDLEtBQWE7UUFDeEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ00sR0FBRyxDQUFDLEtBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ00sR0FBRyxDQUFDLEtBQWEsRUFBRSxLQUF5QjtRQUMvQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNNLE9BQU8sQ0FBQyxPQUFvQixFQUFFLE1BQWU7UUFDaEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEQsQ0FBQztDQUNKIiwiZmlsZSI6ImNvbHVtbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi9kYXRhJztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi9zY2hlbWEnO1xuaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi92ZWN0b3InO1xuaW1wb3J0IHsgVmVjdG9yQ3RvckFyZ3MsIFZlY3RvciBhcyBWIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IENsb25hYmxlLCBTbGljZWFibGUsIEFwcGxpY2F0aXZlIH0gZnJvbSAnLi92ZWN0b3InO1xuaW1wb3J0IHsgQ2h1bmtlZCwgU2VhcmNoQ29udGludWF0aW9uIH0gZnJvbSAnLi92ZWN0b3IvY2h1bmtlZCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29sdW1uPFQgZXh0ZW5kcyBEYXRhVHlwZSA9IGFueT4ge1xuICAgIHR5cGVJZDogVFsnVFR5cGUnXTtcbiAgICBjb25jYXQoLi4ub3RoZXJzOiBWZWN0b3I8VD5bXSk6IENvbHVtbjxUPjtcbiAgICBzbGljZShiZWdpbj86IG51bWJlciwgZW5kPzogbnVtYmVyKTogQ29sdW1uPFQ+O1xuICAgIGNsb25lKGNodW5rcz86IFZlY3RvcjxUPltdLCBvZmZzZXRzPzogVWludDMyQXJyYXkpOiBDb2x1bW48VD47XG59XG5cbmV4cG9ydCBjbGFzcyBDb2x1bW48VCBleHRlbmRzIERhdGFUeXBlID0gYW55PlxuICAgIGV4dGVuZHMgQ2h1bmtlZDxUPlxuICAgIGltcGxlbWVudHMgQ2xvbmFibGU8Q29sdW1uPFQ+PixcbiAgICAgICAgICAgICAgIFNsaWNlYWJsZTxDb2x1bW48VD4+LFxuICAgICAgICAgICAgICAgQXBwbGljYXRpdmU8VCwgQ29sdW1uPFQ+PiB7XG5cbiAgICBwdWJsaWMgc3RhdGljIG5ldzxUIGV4dGVuZHMgRGF0YVR5cGU+KGZpZWxkOiBzdHJpbmcgfCBGaWVsZDxUPiwgLi4uY2h1bmtzOiAoVmVjdG9yPFQ+IHwgVmVjdG9yPFQ+W10pW10pOiBDb2x1bW48VD47XG4gICAgcHVibGljIHN0YXRpYyBuZXc8VCBleHRlbmRzIERhdGFUeXBlPihmaWVsZDogc3RyaW5nIHwgRmllbGQ8VD4sIGRhdGE6IERhdGE8VD4sIC4uLmFyZ3M6IFZlY3RvckN0b3JBcmdzPFY8VD4+KTogQ29sdW1uPFQ+O1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgbmV3PFQgZXh0ZW5kcyBEYXRhVHlwZSA9IGFueT4oZmllbGQ6IHN0cmluZyB8IEZpZWxkPFQ+LCBkYXRhOiBEYXRhPFQ+IHwgVmVjdG9yPFQ+IHwgKERhdGE8VD4gfCBWZWN0b3I8VD4pW10sIC4uLnJlc3Q6IGFueVtdKSB7XG5cbiAgICAgICAgY29uc3QgY2h1bmtzID0gQ2h1bmtlZC5mbGF0dGVuPFQ+KFxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShkYXRhKSA/IFsuLi5kYXRhLCAuLi5yZXN0XSA6XG4gICAgICAgICAgICBkYXRhIGluc3RhbmNlb2YgVmVjdG9yID8gW2RhdGEsIC4uLnJlc3RdIDpcbiAgICAgICAgICAgIFtWZWN0b3IubmV3KGRhdGEsIC4uLnJlc3QpXVxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZmllbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gY2h1bmtzWzBdLmRhdGEudHlwZTtcbiAgICAgICAgICAgIGZpZWxkID0gbmV3IEZpZWxkKGZpZWxkLCB0eXBlLCBjaHVua3Muc29tZSgoeyBudWxsQ291bnQgfSkgPT4gbnVsbENvdW50ID4gMCkpO1xuICAgICAgICB9IGVsc2UgaWYgKCFmaWVsZC5udWxsYWJsZSAmJiBjaHVua3Muc29tZSgoeyBudWxsQ291bnQgfSkgPT4gbnVsbENvdW50ID4gMCkpIHtcbiAgICAgICAgICAgIGZpZWxkID0gZmllbGQuY2xvbmUoeyBudWxsYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvbHVtbihmaWVsZCwgY2h1bmtzKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihmaWVsZDogRmllbGQ8VD4sIHZlY3RvcnM6IFZlY3RvcjxUPltdID0gW10sIG9mZnNldHM/OiBVaW50MzJBcnJheSkge1xuICAgICAgICB2ZWN0b3JzID0gQ2h1bmtlZC5mbGF0dGVuPFQ+KC4uLnZlY3RvcnMpO1xuICAgICAgICBzdXBlcihmaWVsZC50eXBlLCB2ZWN0b3JzLCBvZmZzZXRzKTtcbiAgICAgICAgdGhpcy5fZmllbGQgPSBmaWVsZDtcbiAgICAgICAgaWYgKHZlY3RvcnMubGVuZ3RoID09PSAxICYmICEodGhpcyBpbnN0YW5jZW9mIFNpbmdsZUNodW5rQ29sdW1uKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVDaHVua0NvbHVtbihmaWVsZCwgdmVjdG9yc1swXSwgdGhpcy5fY2h1bmtPZmZzZXRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZmllbGQ6IEZpZWxkPFQ+O1xuICAgIHByb3RlY3RlZCBfY2hpbGRyZW4/OiBDb2x1bW5bXTtcblxuICAgIHB1YmxpYyBnZXQgZmllbGQoKSB7IHJldHVybiB0aGlzLl9maWVsZDsgfVxuICAgIHB1YmxpYyBnZXQgbmFtZSgpIHsgcmV0dXJuIHRoaXMuX2ZpZWxkLm5hbWU7IH1cbiAgICBwdWJsaWMgZ2V0IG51bGxhYmxlKCkgeyByZXR1cm4gdGhpcy5fZmllbGQubnVsbGFibGU7IH1cbiAgICBwdWJsaWMgZ2V0IG1ldGFkYXRhKCkgeyByZXR1cm4gdGhpcy5fZmllbGQubWV0YWRhdGE7IH1cblxuICAgIHB1YmxpYyBjbG9uZShjaHVua3MgPSB0aGlzLl9jaHVua3MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2x1bW4odGhpcy5fZmllbGQsIGNodW5rcyk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENoaWxkQXQ8UiBleHRlbmRzIERhdGFUeXBlID0gYW55PihpbmRleDogbnVtYmVyKTogQ29sdW1uPFI+IHwgbnVsbCB7XG5cbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLm51bUNoaWxkcmVuKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICAgICAgbGV0IGNvbHVtbnMgPSB0aGlzLl9jaGlsZHJlbiB8fCAodGhpcy5fY2hpbGRyZW4gPSBbXSk7XG4gICAgICAgIGxldCBjb2x1bW46IENvbHVtbjxSPiwgZmllbGQ6IEZpZWxkPFI+LCBjaHVua3M6IFZlY3RvcjxSPltdO1xuXG4gICAgICAgIGlmIChjb2x1bW4gPSBjb2x1bW5zW2luZGV4XSkgeyByZXR1cm4gY29sdW1uOyB9XG4gICAgICAgIGlmIChmaWVsZCA9ICgodGhpcy50eXBlLmNoaWxkcmVuIHx8IFtdKVtpbmRleF0gYXMgRmllbGQ8Uj4pKSB7XG4gICAgICAgICAgICBjaHVua3MgPSB0aGlzLl9jaHVua3NcbiAgICAgICAgICAgICAgICAubWFwKCh2ZWN0b3IpID0+IHZlY3Rvci5nZXRDaGlsZEF0PFI+KGluZGV4KSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKCh2ZWMpOiB2ZWMgaXMgVmVjdG9yPFI+ID0+IHZlYyAhPSBudWxsKTtcbiAgICAgICAgICAgIGlmIChjaHVua3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoY29sdW1uc1tpbmRleF0gPSBuZXcgQ29sdW1uPFI+KGZpZWxkLCBjaHVua3MpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuY2xhc3MgU2luZ2xlQ2h1bmtDb2x1bW48VCBleHRlbmRzIERhdGFUeXBlID0gYW55PiBleHRlbmRzIENvbHVtbjxUPiB7XG4gICAgcHJvdGVjdGVkIF9jaHVuazogVmVjdG9yPFQ+O1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkOiBGaWVsZDxUPiwgdmVjdG9yOiBWZWN0b3I8VD4sIG9mZnNldHM/OiBVaW50MzJBcnJheSkge1xuICAgICAgICBzdXBlcihmaWVsZCwgW3ZlY3Rvcl0sIG9mZnNldHMpO1xuICAgICAgICB0aGlzLl9jaHVuayA9IHZlY3RvcjtcbiAgICB9XG4gICAgcHVibGljIHNlYXJjaChpbmRleDogbnVtYmVyKTogW251bWJlciwgbnVtYmVyXSB8IG51bGw7XG4gICAgcHVibGljIHNlYXJjaDxOIGV4dGVuZHMgU2VhcmNoQ29udGludWF0aW9uPENodW5rZWQ8VD4+PihpbmRleDogbnVtYmVyLCB0aGVuPzogTik6IFJldHVyblR5cGU8Tj47XG4gICAgcHVibGljIHNlYXJjaDxOIGV4dGVuZHMgU2VhcmNoQ29udGludWF0aW9uPENodW5rZWQ8VD4+PihpbmRleDogbnVtYmVyLCB0aGVuPzogTikge1xuICAgICAgICByZXR1cm4gdGhlbiA/IHRoZW4odGhpcywgMCwgaW5kZXgpIDogWzAsIGluZGV4XTtcbiAgICB9XG4gICAgcHVibGljIGlzVmFsaWQoaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2h1bmsuaXNWYWxpZChpbmRleCk7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQoaW5kZXg6IG51bWJlcik6IFRbJ1RWYWx1ZSddIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaHVuay5nZXQoaW5kZXgpO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0KGluZGV4OiBudW1iZXIsIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fY2h1bmsuc2V0KGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICAgIHB1YmxpYyBpbmRleE9mKGVsZW1lbnQ6IFRbJ1RWYWx1ZSddLCBvZmZzZXQ/OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2h1bmsuaW5kZXhPZihlbGVtZW50LCBvZmZzZXQpO1xuICAgIH1cbn1cbiJdfQ==
