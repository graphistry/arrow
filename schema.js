"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("./type");
const array_1 = require("./util/array");
const typecomparator_1 = require("./visitor/typecomparator");
class Schema {
    constructor(fields = [], metadata, dictionaries, dictionaryFields) {
        this.fields = (fields || []);
        this.metadata = metadata || new Map();
        if (!dictionaries || !dictionaryFields) {
            ({ dictionaries, dictionaryFields } = generateDictionaryMap(fields, dictionaries || new Map(), dictionaryFields || new Map()));
        }
        this.dictionaries = dictionaries;
        this.dictionaryFields = dictionaryFields;
    }
    /** @nocollapse */
    static from(chunks, names = []) {
        return new Schema(chunks.map((v, i) => new Field('' + (names[i] || i), v.type)));
    }
    get [Symbol.toStringTag]() { return 'Schema'; }
    toString() {
        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;
    }
    compareTo(other) {
        return typecomparator_1.instance.compareSchemas(this, other);
    }
    select(...columnNames) {
        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));
        return new Schema(this.fields.filter((f) => names[f.name]), this.metadata);
    }
    selectAt(...columnIndices) {
        return new Schema(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);
    }
    assign(...args) {
        const other = args[0] instanceof Schema ? args[0]
            : new Schema(array_1.selectAndFlatten(Field, args));
        const curFields = [...this.fields];
        const curDictionaries = [...this.dictionaries];
        const curDictionaryFields = this.dictionaryFields;
        const metadata = mergeMaps(this.metadata, other.metadata);
        const newFields = other.fields.filter((f2) => {
            const i = curFields.findIndex((f) => f.compareTo(f2));
            return ~i ? (curFields[i] = curFields[i].clone({
                metadata: mergeMaps(curFields[i].metadata, f2.metadata)
            })) && false : true;
        });
        const { dictionaries, dictionaryFields } = generateDictionaryMap(newFields, new Map(), new Map());
        const newDictionaries = [...dictionaries].filter(([y]) => !curDictionaries.every(([x]) => x === y));
        const newDictionaryFields = [...dictionaryFields].map(([id, newDictFields]) => {
            return [id, [...(curDictionaryFields.get(id) || []), ...newDictFields.map((f) => {
                        const i = newFields.findIndex((f2) => f2.compareTo(f));
                        const { dictionary, indices, isOrdered, dictionaryVector } = f.type;
                        const type = new type_1.Dictionary(dictionary, indices, id, isOrdered, dictionaryVector);
                        return newFields[i] = f.clone({ type });
                    })]];
        });
        return new Schema([...curFields, ...newFields], metadata, new Map([...curDictionaries, ...newDictionaries]), new Map([...curDictionaryFields, ...newDictionaryFields]));
    }
}
exports.Schema = Schema;
class Field {
    constructor(name, type, nullable = false, metadata) {
        this.name = name;
        this.type = type;
        this.nullable = nullable;
        this.metadata = metadata || new Map();
    }
    get typeId() { return this.type.typeId; }
    get [Symbol.toStringTag]() { return 'Field'; }
    toString() { return `${this.name}: ${this.type}`; }
    compareTo(other) {
        return typecomparator_1.instance.compareField(this, other);
    }
    clone(props) {
        props || (props = {});
        return new Field(props.name === undefined ? this.name : props.name, props.type === undefined ? this.type : props.type, props.nullable === undefined ? this.nullable : props.nullable, props.metadata === undefined ? this.metadata : props.metadata);
    }
}
exports.Field = Field;
/** @ignore */
function mergeMaps(m1, m2) {
    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);
}
/** @ignore */
function generateDictionaryMap(fields, dictionaries, dictionaryFields) {
    for (let i = -1, n = fields.length; ++i < n;) {
        const field = fields[i];
        const type = field.type;
        if (type_1.DataType.isDictionary(type)) {
            if (!dictionaryFields.get(type.id)) {
                dictionaryFields.set(type.id, []);
            }
            if (!dictionaries.has(type.id)) {
                dictionaries.set(type.id, type.dictionary);
                dictionaryFields.get(type.id).push(field);
            }
            else if (dictionaries.get(type.id) !== type.dictionary) {
                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);
            }
        }
        if (type.children) {
            generateDictionaryMap(type.children, dictionaries, dictionaryFields);
        }
    }
    return { dictionaries, dictionaryFields };
}
// Add these here so they're picked up by the externs creator
// in the build, and closure-compiler doesn't minify them away
Schema.prototype.fields = null;
Schema.prototype.metadata = null;
Schema.prototype.dictionaries = null;
Schema.prototype.dictionaryFields = null;
Field.prototype.type = null;
Field.prototype.name = null;
Field.prototype.nullable = null;
Field.prototype.metadata = null;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUM7QUFFakQsS0FBSyxDQUFDLFNBQWlCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNwQyxLQUFLLENBQUMsU0FBaUIsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ3BDLEtBQUssQ0FBQyxTQUFpQixDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDeEMsS0FBSyxDQUFDLFNBQWlCLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyIsImZpbGUiOiJzY2hlbWEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4vZGF0YSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuL3ZlY3Rvcic7XG5pbXBvcnQgeyBEYXRhVHlwZSwgRGljdGlvbmFyeSB9IGZyb20gJy4vdHlwZSc7XG5pbXBvcnQgeyBzZWxlY3RBbmRGbGF0dGVuIH0gZnJvbSAnLi91dGlsL2FycmF5JztcbmltcG9ydCB7IGluc3RhbmNlIGFzIGNvbXBhcmVyIH0gZnJvbSAnLi92aXNpdG9yL3R5cGVjb21wYXJhdG9yJztcblxuZXhwb3J0IGNsYXNzIFNjaGVtYTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiB7XG5cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4oY2h1bmtzOiAoRGF0YTxUW2tleW9mIFRdPiB8IFZlY3RvcjxUW2tleW9mIFRdPilbXSwgbmFtZXM6IChrZXlvZiBUKVtdID0gW10pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTY2hlbWE8VD4oY2h1bmtzLm1hcCgodiwgaSkgPT4gbmV3IEZpZWxkKCcnICsgKG5hbWVzW2ldIHx8IGkpLCB2LnR5cGUpKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlYWRvbmx5IGZpZWxkczogRmllbGQ8VFtrZXlvZiBUXT5bXTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWV0YWRhdGE6IE1hcDxzdHJpbmcsIHN0cmluZz47XG4gICAgcHVibGljIHJlYWRvbmx5IGRpY3Rpb25hcmllczogTWFwPG51bWJlciwgRGF0YVR5cGU+O1xuICAgIHB1YmxpYyByZWFkb25seSBkaWN0aW9uYXJ5RmllbGRzOiBNYXA8bnVtYmVyLCBGaWVsZDxEaWN0aW9uYXJ5PltdPjtcblxuICAgIGNvbnN0cnVjdG9yKGZpZWxkczogRmllbGRbXSA9IFtdLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhPzogTWFwPHN0cmluZywgc3RyaW5nPiB8IG51bGwsXG4gICAgICAgICAgICAgICAgZGljdGlvbmFyaWVzPzogTWFwPG51bWJlciwgRGF0YVR5cGU+IHwgbnVsbCxcbiAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5RmllbGRzPzogTWFwPG51bWJlciwgRmllbGQ8RGljdGlvbmFyeT5bXT4gfCBudWxsKSB7XG4gICAgICAgIHRoaXMuZmllbGRzID0gKGZpZWxkcyB8fCBbXSkgYXMgRmllbGQ8VFtrZXlvZiBUXT5bXTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhIHx8IG5ldyBNYXAoKTtcbiAgICAgICAgaWYgKCFkaWN0aW9uYXJpZXMgfHwgIWRpY3Rpb25hcnlGaWVsZHMpIHtcbiAgICAgICAgICAgICh7IGRpY3Rpb25hcmllcywgZGljdGlvbmFyeUZpZWxkcyB9ID0gZ2VuZXJhdGVEaWN0aW9uYXJ5TWFwKFxuICAgICAgICAgICAgICAgIGZpZWxkcywgZGljdGlvbmFyaWVzIHx8IG5ldyBNYXAoKSwgZGljdGlvbmFyeUZpZWxkcyB8fCBuZXcgTWFwKClcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGljdGlvbmFyaWVzID0gZGljdGlvbmFyaWVzO1xuICAgICAgICB0aGlzLmRpY3Rpb25hcnlGaWVsZHMgPSBkaWN0aW9uYXJ5RmllbGRzO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkgeyByZXR1cm4gJ1NjaGVtYSc7IH1cbiAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgU2NoZW1hPHsgJHt0aGlzLmZpZWxkcy5tYXAoKGYsIGkpID0+IGAke2l9OiAke2Z9YCkuam9pbignLCAnKX0gfT5gO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wYXJlVG8ob3RoZXI/OiBTY2hlbWEgfCBudWxsKTogb3RoZXIgaXMgU2NoZW1hPFQ+IHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVyLmNvbXBhcmVTY2hlbWFzKHRoaXMsIG90aGVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2VsZWN0PEsgZXh0ZW5kcyBrZXlvZiBUID0gYW55PiguLi5jb2x1bW5OYW1lczogS1tdKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzID0gY29sdW1uTmFtZXMucmVkdWNlKCh4cywgeCkgPT4gKHhzW3hdID0gdHJ1ZSkgJiYgeHMsIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAgICByZXR1cm4gbmV3IFNjaGVtYTx7IFtQIGluIEtdOiBUW1BdIH0+KHRoaXMuZmllbGRzLmZpbHRlcigoZikgPT4gbmFtZXNbZi5uYW1lXSksIHRoaXMubWV0YWRhdGEpO1xuICAgIH1cbiAgICBwdWJsaWMgc2VsZWN0QXQ8SyBleHRlbmRzIFRba2V5b2YgVF0gPSBhbnk+KC4uLmNvbHVtbkluZGljZXM6IG51bWJlcltdKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2NoZW1hPHsgW2tleTogc3RyaW5nXTogSyB9Pihjb2x1bW5JbmRpY2VzLm1hcCgoaSkgPT4gdGhpcy5maWVsZHNbaV0pLmZpbHRlcihCb29sZWFuKSwgdGhpcy5tZXRhZGF0YSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzc2lnbjxSIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PihzY2hlbWE6IFNjaGVtYTxSPik6IFNjaGVtYTxUICYgUj47XG4gICAgcHVibGljIGFzc2lnbjxSIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiguLi5maWVsZHM6IChGaWVsZDxSW2tleW9mIFJdPiB8IEZpZWxkPFJba2V5b2YgUl0+W10pW10pOiBTY2hlbWE8VCAmIFI+O1xuICAgIHB1YmxpYyBhc3NpZ248UiBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4oLi4uYXJnczogKFNjaGVtYTxSPiB8IEZpZWxkPFJba2V5b2YgUl0+IHwgRmllbGQ8UltrZXlvZiBSXT5bXSlbXSkge1xuXG4gICAgICAgIGNvbnN0IG90aGVyID0gYXJnc1swXSBpbnN0YW5jZW9mIFNjaGVtYSA/IGFyZ3NbMF0gYXMgU2NoZW1hPFI+XG4gICAgICAgICAgICA6IG5ldyBTY2hlbWE8Uj4oc2VsZWN0QW5kRmxhdHRlbjxGaWVsZDxSW2tleW9mIFJdPj4oRmllbGQsIGFyZ3MpKTtcblxuICAgICAgICBjb25zdCBjdXJGaWVsZHMgPSBbLi4udGhpcy5maWVsZHNdIGFzIEZpZWxkW107XG4gICAgICAgIGNvbnN0IGN1ckRpY3Rpb25hcmllcyA9IFsuLi50aGlzLmRpY3Rpb25hcmllc107XG4gICAgICAgIGNvbnN0IGN1ckRpY3Rpb25hcnlGaWVsZHMgPSB0aGlzLmRpY3Rpb25hcnlGaWVsZHM7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gbWVyZ2VNYXBzKHRoaXMubWV0YWRhdGEsIG90aGVyLm1ldGFkYXRhKTtcbiAgICAgICAgY29uc3QgbmV3RmllbGRzID0gb3RoZXIuZmllbGRzLmZpbHRlcigoZjIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBjdXJGaWVsZHMuZmluZEluZGV4KChmKSA9PiBmLmNvbXBhcmVUbyhmMikpO1xuICAgICAgICAgICAgcmV0dXJuIH5pID8gKGN1ckZpZWxkc1tpXSA9IGN1ckZpZWxkc1tpXS5jbG9uZSh7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1lcmdlTWFwcyhjdXJGaWVsZHNbaV0ubWV0YWRhdGEsIGYyLm1ldGFkYXRhKVxuICAgICAgICAgICAgfSkpICYmIGZhbHNlIDogdHJ1ZTtcbiAgICAgICAgfSkgYXMgRmllbGRbXTtcblxuICAgICAgICBjb25zdCB7IGRpY3Rpb25hcmllcywgZGljdGlvbmFyeUZpZWxkcyB9ID0gZ2VuZXJhdGVEaWN0aW9uYXJ5TWFwKG5ld0ZpZWxkcywgbmV3IE1hcCgpLCBuZXcgTWFwKCkpO1xuICAgICAgICBjb25zdCBuZXdEaWN0aW9uYXJpZXMgPSBbLi4uZGljdGlvbmFyaWVzXS5maWx0ZXIoKFt5XSkgPT4gIWN1ckRpY3Rpb25hcmllcy5ldmVyeSgoW3hdKSA9PiB4ID09PSB5KSk7XG4gICAgICAgIGNvbnN0IG5ld0RpY3Rpb25hcnlGaWVsZHMgPSBbLi4uZGljdGlvbmFyeUZpZWxkc10ubWFwKChbaWQsIG5ld0RpY3RGaWVsZHNdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gW2lkLCBbLi4uKGN1ckRpY3Rpb25hcnlGaWVsZHMuZ2V0KGlkKSB8fCBbXSksIC4uLm5ld0RpY3RGaWVsZHMubWFwKChmKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ld0ZpZWxkcy5maW5kSW5kZXgoKGYyKSA9PiBmMi5jb21wYXJlVG8oZikpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGljdGlvbmFyeSwgaW5kaWNlcywgaXNPcmRlcmVkLCBkaWN0aW9uYXJ5VmVjdG9yIH0gPSBmLnR5cGU7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IG5ldyBEaWN0aW9uYXJ5KGRpY3Rpb25hcnksIGluZGljZXMsIGlkLCBpc09yZGVyZWQsIGRpY3Rpb25hcnlWZWN0b3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdGaWVsZHNbaV0gPSBmLmNsb25lKHsgdHlwZSB9KTtcbiAgICAgICAgICAgIH0pXV0gYXMgW251bWJlciwgRmllbGQ8RGljdGlvbmFyeT5bXV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXcgU2NoZW1hPFQgJiBSPihcbiAgICAgICAgICAgIFsuLi5jdXJGaWVsZHMsIC4uLm5ld0ZpZWxkc10sIG1ldGFkYXRhLFxuICAgICAgICAgICAgbmV3IE1hcChbLi4uY3VyRGljdGlvbmFyaWVzLCAuLi5uZXdEaWN0aW9uYXJpZXNdKSxcbiAgICAgICAgICAgIG5ldyBNYXAoWy4uLmN1ckRpY3Rpb25hcnlGaWVsZHMsIC4uLm5ld0RpY3Rpb25hcnlGaWVsZHNdKVxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZpZWxkPFQgZXh0ZW5kcyBEYXRhVHlwZSA9IERhdGFUeXBlPiB7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogVDtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBudWxsYWJsZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWV0YWRhdGE6IE1hcDxzdHJpbmcsIHN0cmluZz47XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHR5cGU6IFQsIG51bGxhYmxlID0gZmFsc2UsIG1ldGFkYXRhPzogTWFwPHN0cmluZywgc3RyaW5nPiB8IG51bGwpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5udWxsYWJsZSA9IG51bGxhYmxlO1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGEgfHwgbmV3IE1hcCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgdHlwZUlkKCkgeyByZXR1cm4gdGhpcy50eXBlLnR5cGVJZDsgfVxuICAgIHB1YmxpYyBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7IHJldHVybiAnRmllbGQnOyB9XG4gICAgcHVibGljIHRvU3RyaW5nKCkgeyByZXR1cm4gYCR7dGhpcy5uYW1lfTogJHt0aGlzLnR5cGV9YDsgfVxuICAgIHB1YmxpYyBjb21wYXJlVG8ob3RoZXI/OiBGaWVsZCB8IG51bGwpOiBvdGhlciBpcyBGaWVsZDxUPiB7XG4gICAgICAgIHJldHVybiBjb21wYXJlci5jb21wYXJlRmllbGQodGhpcywgb3RoZXIpO1xuICAgIH1cbiAgICBwdWJsaWMgY2xvbmU8UiBleHRlbmRzIERhdGFUeXBlID0gVD4ocHJvcHM/OiB7IG5hbWU/OiBzdHJpbmcsIHR5cGU/OiBSLCBudWxsYWJsZT86IGJvb2xlYW4sIG1ldGFkYXRhPzogTWFwPHN0cmluZywgc3RyaW5nPiB8IG51bGwgfSk6IEZpZWxkPFI+IHtcbiAgICAgICAgcHJvcHMgfHwgKHByb3BzID0ge30pO1xuICAgICAgICByZXR1cm4gbmV3IEZpZWxkPFI+KFxuICAgICAgICAgICAgcHJvcHMubmFtZSA9PT0gdW5kZWZpbmVkID8gdGhpcy5uYW1lIDogcHJvcHMubmFtZSxcbiAgICAgICAgICAgIHByb3BzLnR5cGUgPT09IHVuZGVmaW5lZCA/IHRoaXMudHlwZSA6IHByb3BzLnR5cGUgYXMgYW55LFxuICAgICAgICAgICAgcHJvcHMubnVsbGFibGUgPT09IHVuZGVmaW5lZCA/IHRoaXMubnVsbGFibGUgOiBwcm9wcy5udWxsYWJsZSxcbiAgICAgICAgICAgIHByb3BzLm1ldGFkYXRhID09PSB1bmRlZmluZWQgPyB0aGlzLm1ldGFkYXRhIDogcHJvcHMubWV0YWRhdGEpO1xuICAgIH1cbn1cblxuLyoqIEBpZ25vcmUgKi9cbmZ1bmN0aW9uIG1lcmdlTWFwczxUS2V5LCBUVmFsPihtMT86IE1hcDxUS2V5LCBUVmFsPiB8IG51bGwsIG0yPzogTWFwPFRLZXksIFRWYWw+IHwgbnVsbCk6IE1hcDxUS2V5LCBUVmFsPiB7XG4gICAgcmV0dXJuIG5ldyBNYXAoWy4uLihtMSB8fCBuZXcgTWFwKCkpLCAuLi4obTIgfHwgbmV3IE1hcCgpKV0pO1xufVxuXG4vKiogQGlnbm9yZSAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVEaWN0aW9uYXJ5TWFwKGZpZWxkczogRmllbGRbXSwgZGljdGlvbmFyaWVzOiBNYXA8bnVtYmVyLCBEYXRhVHlwZT4sIGRpY3Rpb25hcnlGaWVsZHM6IE1hcDxudW1iZXIsIEZpZWxkPERpY3Rpb25hcnk+W10+KSB7XG5cbiAgICBmb3IgKGxldCBpID0gLTEsIG4gPSBmaWVsZHMubGVuZ3RoOyArK2kgPCBuOykge1xuICAgICAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tpXTtcbiAgICAgICAgY29uc3QgdHlwZSA9IGZpZWxkLnR5cGU7XG4gICAgICAgIGlmIChEYXRhVHlwZS5pc0RpY3Rpb25hcnkodHlwZSkpIHtcbiAgICAgICAgICAgIGlmICghZGljdGlvbmFyeUZpZWxkcy5nZXQodHlwZS5pZCkpIHtcbiAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5RmllbGRzLnNldCh0eXBlLmlkLCBbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRpY3Rpb25hcmllcy5oYXModHlwZS5pZCkpIHtcbiAgICAgICAgICAgICAgICBkaWN0aW9uYXJpZXMuc2V0KHR5cGUuaWQsIHR5cGUuZGljdGlvbmFyeSk7XG4gICAgICAgICAgICAgICAgZGljdGlvbmFyeUZpZWxkcy5nZXQodHlwZS5pZCkhLnB1c2goZmllbGQgYXMgYW55KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGljdGlvbmFyaWVzLmdldCh0eXBlLmlkKSAhPT0gdHlwZS5kaWN0aW9uYXJ5KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY3JlYXRlIFNjaGVtYSBjb250YWluaW5nIHR3byBkaWZmZXJlbnQgZGljdGlvbmFyaWVzIHdpdGggdGhlIHNhbWUgSWRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgZ2VuZXJhdGVEaWN0aW9uYXJ5TWFwKHR5cGUuY2hpbGRyZW4sIGRpY3Rpb25hcmllcywgZGljdGlvbmFyeUZpZWxkcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBkaWN0aW9uYXJpZXMsIGRpY3Rpb25hcnlGaWVsZHMgfTtcbn1cblxuLy8gQWRkIHRoZXNlIGhlcmUgc28gdGhleSdyZSBwaWNrZWQgdXAgYnkgdGhlIGV4dGVybnMgY3JlYXRvclxuLy8gaW4gdGhlIGJ1aWxkLCBhbmQgY2xvc3VyZS1jb21waWxlciBkb2Vzbid0IG1pbmlmeSB0aGVtIGF3YXlcbihTY2hlbWEucHJvdG90eXBlIGFzIGFueSkuZmllbGRzID0gbnVsbDtcbihTY2hlbWEucHJvdG90eXBlIGFzIGFueSkubWV0YWRhdGEgPSBudWxsO1xuKFNjaGVtYS5wcm90b3R5cGUgYXMgYW55KS5kaWN0aW9uYXJpZXMgPSBudWxsO1xuKFNjaGVtYS5wcm90b3R5cGUgYXMgYW55KS5kaWN0aW9uYXJ5RmllbGRzID0gbnVsbDtcblxuKEZpZWxkLnByb3RvdHlwZSBhcyBhbnkpLnR5cGUgPSBudWxsO1xuKEZpZWxkLnByb3RvdHlwZSBhcyBhbnkpLm5hbWUgPSBudWxsO1xuKEZpZWxkLnByb3RvdHlwZSBhcyBhbnkpLm51bGxhYmxlID0gbnVsbDtcbihGaWVsZC5wcm90b3R5cGUgYXMgYW55KS5tZXRhZGF0YSA9IG51bGw7XG4iXX0=
