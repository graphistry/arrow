"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("./type");
const typecomparator_1 = require("./visitor/typecomparator");
class Schema {
    constructor(fields, metadata, dictionaries, dictionaryFields) {
        this._fields = (fields || []);
        this._metadata = metadata || new Map();
        if (!dictionaries || !dictionaryFields) {
            ({ dictionaries, dictionaryFields } = generateDictionaryMap(fields, dictionaries || new Map(), dictionaryFields || new Map()));
        }
        this._dictionaries = dictionaries;
        this._dictionaryFields = dictionaryFields;
    }
    /** @nocollapse */
    static from(chunks, names = []) {
        return new Schema(chunks.map((v, i) => new Field('' + (names[i] || i), v.type)));
    }
    get fields() { return this._fields; }
    get metadata() { return this._metadata; }
    get dictionaries() { return this._dictionaries; }
    get dictionaryFields() { return this._dictionaryFields; }
    get [Symbol.toStringTag]() { return 'Schema'; }
    toString() {
        return `Schema<{ ${this._fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;
    }
    compareTo(other) {
        return typecomparator_1.instance.compareSchemas(this, other);
    }
    select(...columnNames) {
        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));
        return new Schema(this._fields.filter((f) => names[f.name]), this.metadata);
    }
    selectAt(...columnIndices) {
        return new Schema(columnIndices.map((i) => this._fields[i]), this.metadata);
    }
    assign(...args) {
        const other = args[0] instanceof Schema ? args[0]
            : new Schema(args.reduce(function flatten(xs, x) {
                return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];
            }, []).filter((x) => x instanceof Field));
        const curFields = [...this._fields];
        const curDictionaries = [...this.dictionaries];
        const curDictionaryFields = this.dictionaryFields;
        const metadata = mergeMaps(this.metadata, other.metadata);
        const newFields = other.fields.filter((f2) => {
            const i = curFields.findIndex((f) => f.compareTo(f2));
            return ~i ? (curFields[i] = curFields[i].clone({
                metadata: mergeMaps(curFields[i].metadata, f2.metadata)
            })) && false : true;
        });
        const { dictionaries, dictionaryFields } = generateDictionaryMap(newFields, new Map(), new Map());
        const newDictionaries = [...dictionaries].filter(([y]) => !curDictionaries.every(([x]) => x === y));
        const newDictionaryFields = [...dictionaryFields].map(([id, newDictFields]) => {
            return [id, [...(curDictionaryFields.get(id) || []), ...newDictFields.map((f) => {
                        const i = newFields.findIndex((f2) => f2.compareTo(f));
                        const { dictionary, indices, isOrdered, dictionaryVector } = f.type;
                        const type = new type_1.Dictionary(dictionary, indices, id, isOrdered, dictionaryVector);
                        return newFields[i] = f.clone({ type });
                    })]];
        });
        return new Schema([...curFields, ...newFields], metadata, new Map([...curDictionaries, ...newDictionaries]), new Map([...curDictionaryFields, ...newDictionaryFields]));
    }
}
exports.Schema = Schema;
class Field {
    constructor(name, type, nullable = false, metadata) {
        this._name = name;
        this._type = type;
        this._nullable = nullable;
        this._metadata = metadata || new Map();
    }
    get type() { return this._type; }
    get name() { return this._name; }
    get nullable() { return this._nullable; }
    get metadata() { return this._metadata; }
    get typeId() { return this._type.typeId; }
    get [Symbol.toStringTag]() { return 'Field'; }
    get indices() {
        return type_1.DataType.isDictionary(this._type) ? this._type.indices : this._type;
    }
    toString() { return `${this.name}: ${this.type}`; }
    compareTo(other) {
        return typecomparator_1.instance.compareField(this, other);
    }
    clone(props) {
        props || (props = {});
        return new Field(props.name === undefined ? this.name : props.name, props.type === undefined ? this.type : props.type, props.nullable === undefined ? this.nullable : props.nullable, props.metadata === undefined ? this.metadata : props.metadata);
    }
}
exports.Field = Field;
/** @ignore */
function mergeMaps(m1, m2) {
    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);
}
/** @ignore */
function generateDictionaryMap(fields, dictionaries, dictionaryFields) {
    for (let i = -1, n = fields.length; ++i < n;) {
        const field = fields[i];
        const type = field.type;
        if (type_1.DataType.isDictionary(type)) {
            if (!dictionaryFields.get(type.id)) {
                dictionaryFields.set(type.id, []);
            }
            if (!dictionaries.has(type.id)) {
                dictionaries.set(type.id, type.dictionary);
                dictionaryFields.get(type.id).push(field);
            }
            else if (dictionaries.get(type.id) !== type.dictionary) {
                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);
            }
        }
        if (type.children) {
            generateDictionaryMap(type.children, dictionaries, dictionaryFields);
        }
    }
    return { dictionaries, dictionaryFields };
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
