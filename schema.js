"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("./type");
class Schema {
    constructor(fields, metadata, dictionaries, dictionaryFields) {
        this._fields = fields;
        this._metadata = metadata || Schema.prototype._metadata;
        if (!dictionaries || !dictionaryFields) {
            ({ dictionaries, dictionaryFields } = generateDictionaryMap(fields, dictionaries || new Map(), dictionaryFields || new Map()));
        }
        this._dictionaries = dictionaries;
        this._dictionaryFields = dictionaryFields;
    }
    /** @nocollapse */
    static from(vectors, names = []) {
        return new Schema(vectors.map((v, i) => new Field('' + (names[i] || i), v.type)));
    }
    get fields() { return this._fields; }
    get metadata() { return this._metadata; }
    get dictionaries() { return this._dictionaries; }
    get dictionaryFields() { return this._dictionaryFields; }
    select(...columnNames) {
        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));
        return new Schema(this.fields.filter((f) => names[f.name]), this.metadata);
    }
}
Schema[Symbol.toStringTag] = ((prototype) => {
    prototype._metadata = Object.freeze(new Map());
    return 'Schema';
})(Schema.prototype);
exports.Schema = Schema;
class Field {
    constructor(name, type, nullable = false, metadata) {
        this._name = name;
        this._type = type;
        this._nullable = nullable;
        this._metadata = metadata;
    }
    get type() { return this._type; }
    get name() { return this._name; }
    get nullable() { return this._nullable; }
    get metadata() { return this._metadata; }
    get typeId() { return this._type.typeId; }
    get [Symbol.toStringTag]() { return 'Field'; }
    get indices() {
        return type_1.DataType.isDictionary(this._type) ? this._type.indices : this._type;
    }
    toString() { return `${this.name}: ${this.type}`; }
}
exports.Field = Field;
/** @ignore */
function generateDictionaryMap(fields, dictionaries, dictionaryFields) {
    for (let i = -1, n = fields.length; ++i < n;) {
        const field = fields[i];
        const type = field.type;
        if (type_1.DataType.isDictionary(type)) {
            if (!dictionaryFields.get(type.id)) {
                dictionaryFields.set(type.id, []);
            }
            if (!dictionaries.has(type.id)) {
                dictionaries.set(type.id, type.dictionary);
                dictionaryFields.get(type.id).push(field);
            }
            else if (dictionaries.get(type.id) !== type.dictionary) {
                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);
            }
        }
        if (type.children) {
            generateDictionaryMap(type.children, dictionaries, dictionaryFields);
        }
    }
    return { dictionaries, dictionaryFields };
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
