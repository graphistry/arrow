// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
export { Row } from './all';
export { Vector } from './all';
export { BaseVector } from './all';
export { BinaryVector } from './all';
export { BoolVector } from './all';
export { ChunkedVector } from './all';
export { DateVector, DateDayVector, DateMillisecondVector } from './all';
export { DecimalVector } from './all';
export { DictionaryVector } from './all';
export { FixedSizeBinaryVector } from './all';
export { FixedSizeListVector } from './all';
export { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './all';
export { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './all';
export { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './all';
export { ListVector } from './all';
export { MapVector } from './all';
export { NullVector } from './all';
export { StructVector } from './all';
export { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './all';
export { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './all';
export { UnionVector, DenseUnionVector, SparseUnionVector } from './all';
export { Utf8Vector } from './all';
import { Type } from '../enum';
import { Vector } from '../vector';
import { BaseVector } from './base';
import { setBool } from '../util/bit';
import { instance as getVisitor } from '../visitor/get';
import { instance as setVisitor } from '../visitor/set';
import { instance as indexOfVisitor } from '../visitor/indexof';
import { instance as toArrayVisitor } from '../visitor/toarray';
import { instance as iteratorVisitor } from '../visitor/iterator';
import { instance as byteWidthVisitor } from '../visitor/bytewidth';
import { instance as getVectorConstructor } from '../visitor/vectorctor';
/** @nocollapse */
Vector.new = newVector;
function newVector(data, ...args) {
    return new (getVectorConstructor.getVisitFn(data.type)())(data, ...args);
}
//
// We provide the following method implementations for code navigability purposes only.
// They're overridden at runtime below with the specific Visitor implementation for each type,
// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.
// This comment is here to remind you to not set breakpoints in these function bodies, or to inform
// you why the breakpoints you have already set are not being triggered. Have a great day!
//
BaseVector.prototype.get = function baseVectorGet(index) {
    return getVisitor.visit(this, index);
};
BaseVector.prototype.set = function baseVectorSet(index, value) {
    return setVisitor.visit(this, index, value);
};
BaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {
    return indexOfVisitor.visit(this, value, fromIndex);
};
BaseVector.prototype.toArray = function baseVectorToArray() {
    return toArrayVisitor.visit(this);
};
BaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {
    return byteWidthVisitor.visit(this.type);
};
BaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {
    return iteratorVisitor.visit(this);
};
BaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors;
// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type
Object.keys(Type)
    .filter((typeId) => typeId !== Type.NONE && typeId !== Type[Type.NONE])
    .map((T) => Type[T]).filter((T) => typeof T === 'number')
    .forEach((typeId) => {
    let typeIds;
    switch (typeId) {
        case Type.Int:
            typeIds = [Type.Int8, Type.Int16, Type.Int32, Type.Int64, Type.Uint8, Type.Uint16, Type.Uint32, Type.Uint64];
            break;
        case Type.Float:
            typeIds = [Type.Float16, Type.Float32, Type.Float64];
            break;
        case Type.Date:
            typeIds = [Type.DateDay, Type.DateMillisecond];
            break;
        case Type.Time:
            typeIds = [Type.TimeSecond, Type.TimeMillisecond, Type.TimeMicrosecond, Type.TimeNanosecond];
            break;
        case Type.Timestamp:
            typeIds = [Type.TimestampSecond, Type.TimestampMillisecond, Type.TimestampMicrosecond, Type.TimestampNanosecond];
            break;
        case Type.Interval:
            typeIds = [Type.IntervalDayTime, Type.IntervalYearMonth];
            break;
        case Type.Union:
            typeIds = [Type.DenseUnion, Type.SparseUnion];
            break;
        default:
            typeIds = [typeId];
            break;
    }
    typeIds.forEach((typeId) => {
        const VectorCtor = getVectorConstructor.visit(typeId);
        VectorCtor.prototype['get'] = partial1(getVisitor.getVisitFn(typeId));
        VectorCtor.prototype['set'] = partial2(setVisitor.getVisitFn(typeId));
        VectorCtor.prototype['indexOf'] = partial2(indexOfVisitor.getVisitFn(typeId));
        VectorCtor.prototype['toArray'] = partial0(toArrayVisitor.getVisitFn(typeId));
        VectorCtor.prototype['getByteWidth'] = partial0(byteWidthVisitor.getVisitFn(typeId));
        VectorCtor.prototype[Symbol.iterator] = partial0(iteratorVisitor.getVisitFn(typeId));
    });
});
function partial0(visit) {
    return function () { return visit(this); };
}
function partial1(visit) {
    return function (a) { return visit(this, a); };
}
function partial2(visit) {
    return function (a, b) { return visit(this, a, b); };
}
function wrapNullable1(fn) {
    return function (i) { return this.isValid(i) ? fn.call(this, i) : null; };
}
function wrapNullableSet(fn) {
    return function (i, a) {
        if (setBool(this.nullBitmap, this.offset + i, a != null)) {
            fn.call(this, i, a);
        }
    };
}
// @ts-ignore
function bindBaseVectorDataAccessors(data) {
    const type = this.type;
    this['get'] = getVisitor.getVisitFn(type).bind(this, this);
    this['set'] = setVisitor.getVisitFn(type).bind(this, this);
    this['indexOf'] = indexOfVisitor.getVisitFn(type).bind(this, this);
    this['toArray'] = toArrayVisitor.getVisitFn(type).bind(this, this);
    this[Symbol.iterator] = iteratorVisitor.getVisitFn(type).bind(this, this);
    if (this.nullCount > 0) {
        this['get'] = wrapNullable1(this['get']);
        this['set'] = wrapNullableSet(this['set']);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
