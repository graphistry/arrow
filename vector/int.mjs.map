{"version":3,"sources":["vector/int.ts"],"names":[],"mappings":"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","file":"int.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\nimport {\n    toInt8Array, toInt16Array, toInt32Array,\n    toUint8Array, toUint16Array, toUint32Array,\n    toBigInt64Array, toBigUint64Array\n} from '../util/buffer';\n\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    public static from(this: typeof IntVector, data: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, data: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, data: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, data: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, data: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, data: Uint32Array): Uint32Vector;\n\n    // @ts-ignore\n    public static from(this: typeof IntVector, data: Int32Array, is64: true): Int64Vector;\n    public static from(this: typeof IntVector, data: Uint32Array, is64: true): Uint64Vector;\n    public static from<T extends Int>(this: typeof IntVector, data: T['TArray']): V<T>;\n\n    public static from(this: typeof Int8Vector,   data: Int8['TArray']   | Iterable<number>): Int8Vector;\n    public static from(this: typeof Int16Vector,  data: Int16['TArray']  | Iterable<number>): Int16Vector;\n    public static from(this: typeof Int32Vector,  data: Int32['TArray']  | Iterable<number>): Int32Vector;\n    public static from(this: typeof Int64Vector,  data: Int32['TArray']  | Iterable<number>): Int64Vector;\n    public static from(this: typeof Uint8Vector,  data: Uint8['TArray']  | Iterable<number>): Uint8Vector;\n    public static from(this: typeof Uint16Vector, data: Uint16['TArray'] | Iterable<number>): Uint16Vector;\n    public static from(this: typeof Uint32Vector, data: Uint32['TArray'] | Iterable<number>): Uint32Vector;\n    public static from(this: typeof Uint64Vector, data: Uint32['TArray'] | Iterable<number>): Uint64Vector;\n\n    /** @nocollapse */\n    public static from<T extends Int>(data: T['TArray'], is64?: boolean) {\n        let length: number = 0;\n        let type: Int | null = null;\n        switch (this) {\n            case Int8Vector:   data = toInt8Array(data);   is64 = false; break;\n            case Int16Vector:  data = toInt16Array(data);  is64 = false; break;\n            case Int32Vector:  data = toInt32Array(data);  is64 = false; break;\n            case Int64Vector:  data = toInt32Array(data);  is64 =  true; break;\n            case Uint8Vector:  data = toUint8Array(data);  is64 = false; break;\n            case Uint16Vector: data = toUint16Array(data); is64 = false; break;\n            case Uint32Vector: data = toUint32Array(data); is64 = false; break;\n            case Uint64Vector: data = toUint32Array(data); is64 =  true; break;\n        }\n        if (is64 === true) {\n            length = data.length * 0.5;\n            type = data instanceof Int32Array ? new Int64() : new Uint64();\n        } else {\n            length = data.length;\n            switch (data.constructor) {\n                case Int8Array:   type = new Int8();   break;\n                case Int16Array:  type = new Int16();  break;\n                case Int32Array:  type = new Int32();  break;\n                case Uint8Array:  type = new Uint8();  break;\n                case Uint16Array: type = new Uint16(); break;\n                case Uint32Array: type = new Uint32(); break;\n            }\n        }\n        return type !== null\n            ? Vector.new(Data.Int(type, 0, length, 0, null, data))\n            : (() => { throw new TypeError('Unrecognized IntVector input'); })();\n    }\n}\n\nexport class Int8Vector extends IntVector<Int8> {}\nexport class Int16Vector extends IntVector<Int16> {}\nexport class Int32Vector extends IntVector<Int32> {}\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n}\n\nexport class Uint8Vector extends IntVector<Uint8> {}\nexport class Uint16Vector extends IntVector<Uint16> {}\nexport class Uint32Vector extends IntVector<Uint32> {}\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n}\n\nexport interface Int64Vector extends IntVector<Int64> {\n    indexOf(value: Int64['TValue'] | bigint | null, fromIndex?: number): number;\n}\n\nexport interface Uint64Vector extends IntVector<Uint64> {\n    indexOf(value: Uint64['TValue'] | bigint | null, fromIndex?: number): number;\n}\n"]}