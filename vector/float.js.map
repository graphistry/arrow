{"version":3,"sources":["vector/float.ts"],"names":[],"mappings":";AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;;AAErB,kCAA+B;AAC/B,sCAAmC;AACnC,iCAAoC;AAEpC,kCAA2D;AAC3D,2CAAgF;AAEhF,MAAa,WAAqC,SAAQ,iBAAa;IAUnE,kBAAkB;IACX,MAAM,CAAC,IAAI,CAAkB,IAAiB;QACjD,IAAI,IAAI,GAAiB,IAAI,CAAC;QAC9B,QAAQ,IAAI,EAAE;YACV,KAAK,aAAa;gBAAE,IAAI,GAAG,uBAAc,CAAC,IAAI,CAAC,CAAC;gBAAC,MAAM;YACvD,KAAK,aAAa;gBAAE,IAAI,GAAG,uBAAc,CAAC,IAAI,CAAC,CAAC;gBAAC,MAAM;YACvD,KAAK,aAAa;gBAAE,IAAI,GAAG,uBAAc,CAAC,IAAI,CAAC,CAAC;gBAAC,MAAM;SAC1D;QACD,QAAQ,IAAI,CAAC,WAAW,EAAE;YACtB,KAAK,WAAW;gBAAG,IAAI,GAAG,IAAI,cAAO,EAAE,CAAC;gBAAC,MAAM;YAC/C,KAAK,YAAY;gBAAE,IAAI,GAAG,IAAI,cAAO,EAAE,CAAC;gBAAC,MAAM;YAC/C,KAAK,YAAY;gBAAE,IAAI,GAAG,IAAI,cAAO,EAAE,CAAC;gBAAC,MAAM;SAClD;QACD,OAAO,IAAI,KAAK,IAAI;YAChB,CAAC,CAAC,eAAM,CAAC,GAAG,CAAC,WAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,SAAS,CAAC,gCAAgC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC/E,CAAC;CACJ;AA3BD,kCA2BC;AAED,MAAa,aAAc,SAAQ,WAAoB;IACnD,2EAA2E;IAC3E,2EAA2E;IAC3E,2EAA2E;IAC3E,2EAA2E;IAC3E,2EAA2E;IAC3E,yCAAyC;IAClC,cAAc,KAAK,OAAO,IAAI,YAAY,CAAC,IAAwB,CAAC,CAAC,CAAC,CAAC;IACvE,cAAc,KAAK,OAAO,IAAI,YAAY,CAAC,IAAwB,CAAC,CAAC,CAAC,CAAC;CACjF;AATD,sCASC;AAED,MAAa,aAAc,SAAQ,WAAoB;CAAG;AAA1D,sCAA0D;AAC1D,MAAa,aAAc,SAAQ,WAAoB;CAAG;AAA1D,sCAA0D","file":"float.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { Float, Float16, Float32, Float64 } from '../type';\nimport { toFloat16Array, toFloat32Array, toFloat64Array } from '../util/buffer';\n\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    public static from(this: typeof FloatVector, data: Float16['TArray']): Float16Vector;\n    public static from(this: typeof FloatVector, data: Float32['TArray']): Float32Vector;\n    public static from(this: typeof FloatVector, data: Float64['TArray']): Float64Vector;\n    public static from<T extends Float>(this: typeof FloatVector, data: T['TArray']): V<T>;\n\n    public static from(this: typeof Float16Vector, data: Float16['TArray'] | Iterable<number>): Float16Vector;\n    public static from(this: typeof Float32Vector, data: Float32['TArray'] | Iterable<number>): Float32Vector;\n    public static from(this: typeof Float64Vector, data: Float64['TArray'] | Iterable<number>): Float64Vector;\n    /** @nocollapse */\n    public static from<T extends Float>(data: T['TArray']) {\n        let type: Float | null = null;\n        switch (this) {\n            case Float16Vector: data = toFloat16Array(data); break;\n            case Float32Vector: data = toFloat32Array(data); break;\n            case Float64Vector: data = toFloat64Array(data); break;\n        }\n        switch (data.constructor) {\n            case Uint16Array:  type = new Float16(); break;\n            case Float32Array: type = new Float32(); break;\n            case Float64Array: type = new Float64(); break;\n        }\n        return type !== null\n            ? Vector.new(Data.Float(type, 0, data.length, 0, null, data))\n            : (() => { throw new TypeError('Unrecognized FloatVector input'); })();\n    }\n}\n\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\nexport class Float32Vector extends FloatVector<Float32> {}\nexport class Float64Vector extends FloatVector<Float64> {}\n"]}