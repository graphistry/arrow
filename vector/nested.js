"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const vector_1 = require("../vector");
class NestedView {
    constructor(data, children) {
        this.length = data.length;
        this.childData = data.childData;
        this.numChildren = data.childData.length;
        this._children = children || new Array(this.numChildren);
    }
    clone(data) {
        return new this.constructor(data, this._children);
    }
    isValid() {
        return true;
    }
    toArray() {
        return [...this];
    }
    indexOf(_) {
        throw new Error(`Not implemented yet`);
    }
    toJSON() { return this.toArray(); }
    toString() {
        return [...this].map((x) => stringify(x)).join(', ');
    }
    get(index) {
        return this.getNested(this, index);
    }
    set(index, value) {
        return this.setNested(this, index, value);
    }
    getChildAt(index) {
        return index < 0 || index >= this.numChildren
            ? null
            : this._children[index] ||
                (this._children[index] = vector_1.Vector.create(this.childData[index]));
    }
    *[Symbol.iterator]() {
        const get = this.getNested;
        const length = this.length;
        for (let index = -1; ++index < length;) {
            yield get(this, index);
        }
    }
}
exports.NestedView = NestedView;
class UnionView extends NestedView {
    constructor(data, children) {
        super(data, children);
        this.length = data.length;
        this.typeIds = data.typeIds;
    }
    getNested(self, index) {
        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);
    }
    setNested(self, index, value) {
        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets);
    }
    getChildValue(self, index, typeIds, _valueOffsets) {
        const child = self.getChildAt(typeIds[index]);
        return child ? child.get(index) : null;
    }
    setChildValue(self, index, value, typeIds, _valueOffsets) {
        const child = self.getChildAt(typeIds[index]);
        return child ? child.set(index, value) : null;
    }
    *[Symbol.iterator]() {
        const length = this.length;
        const get = this.getChildValue;
        const { typeIds, valueOffsets } = this;
        for (let index = -1; ++index < length;) {
            yield get(this, index, typeIds, valueOffsets);
        }
    }
}
exports.UnionView = UnionView;
class DenseUnionView extends UnionView {
    constructor(data, children) {
        super(data, children);
        this.valueOffsets = data.valueOffsets;
    }
    getNested(self, index) {
        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);
    }
    getChildValue(self, index, typeIds, valueOffsets) {
        const child = self.getChildAt(typeIds[index]);
        return child ? child.get(valueOffsets[index]) : null;
    }
    setChildValue(self, index, value, typeIds, valueOffsets) {
        const child = self.getChildAt(typeIds[index]);
        return child ? child.set(valueOffsets[index], value) : null;
    }
}
exports.DenseUnionView = DenseUnionView;
class StructView extends NestedView {
    getNested(self, index) {
        return new RowView(self, self._children, index);
    }
    setNested(self, index, value) {
        let idx = -1, len = self.numChildren, child;
        if (!(value instanceof NestedView || value instanceof vector_1.Vector)) {
            while (++idx < len) {
                if (child = self.getChildAt(idx)) {
                    child.set(index, value[idx]);
                }
            }
        }
        else {
            while (++idx < len) {
                if (child = self.getChildAt(idx)) {
                    child.set(index, value.get(idx));
                }
            }
        }
    }
}
exports.StructView = StructView;
class MapView extends NestedView {
    constructor(data, children) {
        super(data, children);
        this.typeIds = data.type.children.reduce((xs, x, i) => (xs[x.name] = i) && xs || xs, Object.create(null));
    }
    getNested(self, index) {
        return new MapRowView(self, self._children, index);
    }
    setNested(self, index, value) {
        let typeIds = self.typeIds, child;
        if (!(value instanceof NestedView || value instanceof vector_1.Vector)) {
            for (const key in typeIds) {
                if (child = self.getChildAt(typeIds[key])) {
                    child.set(index, value[key]);
                }
            }
        }
        else {
            for (const key in typeIds) {
                if (child = self.getChildAt(typeIds[key])) {
                    child.set(index, value.get(key));
                }
            }
        }
    }
}
exports.MapView = MapView;
class RowView extends UnionView {
    constructor(data, children, rowIndex) {
        super(data, children);
        this.rowIndex = rowIndex || 0;
        this.length = data.numChildren;
    }
    clone(data) {
        return new this.constructor(data, this._children, this.rowIndex);
    }
    getChildValue(self, index, _typeIds, _valueOffsets) {
        const child = self.getChildAt(index);
        return child ? child.get(self.rowIndex) : null;
    }
    setChildValue(self, index, value, _typeIds, _valueOffsets) {
        const child = self.getChildAt(index);
        return child ? child.set(self.rowIndex, value) : null;
    }
}
exports.RowView = RowView;
class MapRowView extends RowView {
    toJSON() {
        const get = this.getChildValue;
        const result = {};
        const typeIds = this.typeIds;
        for (const name in typeIds) {
            result[name] = get(this, name, typeIds, null);
        }
        return result;
    }
    getChildValue(self, key, typeIds, _valueOffsets) {
        const child = self.getChildAt(typeIds[key]);
        return child ? child.get(self.rowIndex) : null;
    }
    setChildValue(self, key, value, typeIds, _valueOffsets) {
        const child = self.getChildAt(typeIds[key]);
        return child ? child.set(self.rowIndex, value) : null;
    }
}
exports.MapRowView = MapRowView;
function stringify(x) {
    return typeof x === 'string' ? `"${x}"` : Array.isArray(x) ? JSON.stringify(x) : ArrayBuffer.isView(x) ? `[${x}]` : `${x}`;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
