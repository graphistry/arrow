"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = require("../schema");
const type_1 = require("../type");
const pretty_1 = require("../util/pretty");
/** @ignore */ exports.kLength = Symbol.for('length');
/** @ignore */ exports.kParent = Symbol.for('parent');
/** @ignore */ exports.kRowIndex = Symbol.for('rowIndex');
/** @ignore */ const columnDescriptor = { enumerable: true, configurable: false, get: null };
/** @ignore */ const rowLengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };
/** @ignore */ const rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null };
class Row {
    *[Symbol.iterator]() {
        for (let i = -1, n = this[exports.kLength]; ++i < n;) {
            yield this[i];
        }
    }
    get(key) { return this[key]; }
    toJSON() {
        return type_1.DataType.isStruct(this[exports.kParent].type) ? [...this] :
            Object.getOwnPropertyNames(this).reduce((props, prop) => {
                return (props[prop] = this[prop]) && props || props;
            }, {});
    }
    toString() {
        return type_1.DataType.isStruct(this[exports.kParent].type) ?
            [...this].map((x) => pretty_1.valueToString(x)).join(', ') :
            Object.getOwnPropertyNames(this).reduce((props, prop) => {
                return (props[prop] = pretty_1.valueToString(this[prop])) && props || props;
            }, {});
    }
}
exports.Row = Row;
/** @ignore */
class RowProxyGenerator {
    constructor(parent, fields, fieldsAreEnumerable) {
        const proto = Object.create(Row.prototype);
        rowParentDescriptor.value = parent;
        rowLengthDescriptor.value = fields.length;
        Object.defineProperty(proto, exports.kParent, rowParentDescriptor);
        Object.defineProperty(proto, exports.kLength, rowLengthDescriptor);
        fields.forEach((field, columnIndex) => {
            if (!proto.hasOwnProperty(field.name)) {
                columnDescriptor.enumerable = fieldsAreEnumerable;
                columnDescriptor.get || (columnDescriptor.get = this._bindGetter(columnIndex));
                Object.defineProperty(proto, field.name, columnDescriptor);
            }
            if (!proto.hasOwnProperty(columnIndex)) {
                columnDescriptor.enumerable = !fieldsAreEnumerable;
                columnDescriptor.get || (columnDescriptor.get = this._bindGetter(columnIndex));
                Object.defineProperty(proto, columnIndex, columnDescriptor);
            }
            columnDescriptor.get = null;
        });
        this.rowPrototype = proto;
    }
    /** @nocollapse */
    static new(parent, schemaOrFields, fieldsAreEnumerable = false) {
        let schema, fields;
        if (Array.isArray(schemaOrFields)) {
            fields = schemaOrFields;
        }
        else {
            schema = schemaOrFields;
            fieldsAreEnumerable = true;
            fields = Object.keys(schema).map((x) => new schema_1.Field(x, schema[x]));
        }
        return new RowProxyGenerator(parent, fields, fieldsAreEnumerable);
    }
    _bindGetter(columnIndex) {
        return function () {
            const child = this[exports.kParent].getChildAt(columnIndex);
            return child ? child.get(this[exports.kRowIndex]) : null;
        };
    }
    bind(rowIndex) {
        const bound = Object.create(this.rowPrototype);
        bound[exports.kRowIndex] = rowIndex;
        return bound;
        //return new this.RowProxy(rowIndex);
    }
}
exports.RowProxyGenerator = RowProxyGenerator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9yb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjs7QUFFckIsc0NBQWtDO0FBRWxDLGtDQUFtQztBQUNuQywyQ0FBK0M7QUFHL0MsY0FBYyxDQUFjLFFBQUEsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0QsY0FBYyxDQUFjLFFBQUEsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0QsY0FBYyxDQUFjLFFBQUEsU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDL0QsY0FBYyxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQVcsRUFBRSxDQUFDO0FBQ3BHLGNBQWMsQ0FBQyxNQUFNLG1CQUFtQixHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDbEgsY0FBYyxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBVyxFQUFFLENBQUM7QUFFM0gsTUFBYSxHQUFHO0lBUVosQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHO1lBQzFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO0lBQ0wsQ0FBQztJQUNNLEdBQUcsQ0FBb0IsR0FBTSxJQUFJLE9BQVEsSUFBWSxDQUFDLEdBQUcsQ0FBbUIsQ0FBQyxDQUFDLENBQUM7SUFDL0UsTUFBTTtRQUNULE9BQU8sZUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3RELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFVLEVBQUUsSUFBWSxFQUFFLEVBQUU7Z0JBQ2pFLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUksSUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQztZQUNqRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDZixDQUFDO0lBQ00sUUFBUTtRQUNYLE9BQU8sZUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxzQkFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDbkQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQVUsRUFBRSxJQUFZLEVBQUUsRUFBRTtnQkFDakUsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxzQkFBYSxDQUFFLElBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQztZQUNoRixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDZixDQUFDO0NBQ0o7QUEzQkQsa0JBMkJDO0FBRUQsY0FBYztBQUNkLE1BQWEsaUJBQWlCO0lBZ0IxQixZQUFvQixNQUFzQyxFQUFFLE1BQWUsRUFBRSxtQkFBNEI7UUFDckcsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFM0MsbUJBQW1CLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUNuQyxtQkFBbUIsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUMxQyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxlQUFPLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUMzRCxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxlQUFPLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUMzRCxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDbkMsZ0JBQWdCLENBQUMsVUFBVSxHQUFHLG1CQUFtQixDQUFDO2dCQUNsRCxnQkFBZ0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO2dCQUMvRSxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUM7YUFDOUQ7WUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsRUFBRTtnQkFDcEMsZ0JBQWdCLENBQUMsVUFBVSxHQUFHLENBQUMsbUJBQW1CLENBQUM7Z0JBQ25ELGdCQUFnQixDQUFDLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7Z0JBQy9FLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2FBQy9EO1lBQ0QsZ0JBQWdCLENBQUMsR0FBRyxHQUFHLElBQVcsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFyQ0Qsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLEdBQUcsQ0FBd0MsTUFBc0MsRUFBRSxjQUEyQixFQUFFLG1CQUFtQixHQUFHLEtBQUs7UUFDckosSUFBSSxNQUFTLEVBQUUsTUFBZSxDQUFDO1FBQy9CLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUMvQixNQUFNLEdBQUcsY0FBYyxDQUFDO1NBQzNCO2FBQU07WUFDSCxNQUFNLEdBQUcsY0FBYyxDQUFDO1lBQ3hCLG1CQUFtQixHQUFHLElBQUksQ0FBQztZQUMzQixNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksY0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BFO1FBQ0QsT0FBTyxJQUFJLGlCQUFpQixDQUFJLE1BQU0sRUFBRSxNQUFNLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBNEJPLFdBQVcsQ0FBQyxXQUFtQjtRQUNuQyxPQUFPO1lBQ0gsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNwRCxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNyRCxDQUFDLENBQUM7SUFDTixDQUFDO0lBQ00sSUFBSSxDQUFDLFFBQWdCO1FBQ3hCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9DLEtBQUssQ0FBQyxpQkFBUyxDQUFDLEdBQUcsUUFBUSxDQUFDO1FBQzVCLE9BQU8sS0FBSyxDQUFDO1FBQ2IscUNBQXFDO0lBQ3pDLENBQUM7Q0FDSjtBQXBERCw4Q0FvREMiLCJmaWxlIjoidmVjdG9yL3Jvdy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uL3NjaGVtYSc7XG5pbXBvcnQgeyBNYXBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3IvbWFwJztcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgeyB2YWx1ZVRvU3RyaW5nIH0gZnJvbSAnLi4vdXRpbC9wcmV0dHknO1xuaW1wb3J0IHsgU3RydWN0VmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yL3N0cnVjdCc7XG5cbi8qKiBAaWdub3JlICovIGV4cG9ydCBjb25zdCBrTGVuZ3RoID0gU3ltYm9sLmZvcignbGVuZ3RoJyk7XG4vKiogQGlnbm9yZSAqLyBleHBvcnQgY29uc3Qga1BhcmVudCA9IFN5bWJvbC5mb3IoJ3BhcmVudCcpO1xuLyoqIEBpZ25vcmUgKi8gZXhwb3J0IGNvbnN0IGtSb3dJbmRleCA9IFN5bWJvbC5mb3IoJ3Jvd0luZGV4Jyk7XG4vKiogQGlnbm9yZSAqLyBjb25zdCBjb2x1bW5EZXNjcmlwdG9yID0geyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IGZhbHNlLCBnZXQ6IG51bGwgYXMgYW55IH07XG4vKiogQGlnbm9yZSAqLyBjb25zdCByb3dMZW5ndGhEZXNjcmlwdG9yID0geyB3cml0YWJsZTogZmFsc2UsIGVudW1lcmFibGU6IGZhbHNlLCBjb25maWd1cmFibGU6IGZhbHNlLCB2YWx1ZTogLTEgfTtcbi8qKiBAaWdub3JlICovIGNvbnN0IHJvd1BhcmVudERlc2NyaXB0b3IgPSB7IHdyaXRhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIHZhbHVlOiBudWxsIGFzIGFueSB9O1xuXG5leHBvcnQgY2xhc3MgUm93PFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0+IGltcGxlbWVudHMgSXRlcmFibGU8VFtrZXlvZiBUXVsnVFZhbHVlJ10+IHtcbiAgICBba2V5OiBzdHJpbmddOiBUW2tleW9mIFRdWydUVmFsdWUnXTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIFtrUGFyZW50XTogTWFwVmVjdG9yPFQ+IHwgU3RydWN0VmVjdG9yPFQ+O1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwdWJsaWMgW2tSb3dJbmRleF06IG51bWJlcjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIHJlYWRvbmx5IFtrTGVuZ3RoXTogbnVtYmVyO1xuICAgICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IC0xLCBuID0gdGhpc1trTGVuZ3RoXTsgKytpIDwgbjspIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGdldDxLIGV4dGVuZHMga2V5b2YgVD4oa2V5OiBLKSB7IHJldHVybiAodGhpcyBhcyBhbnkpW2tleV0gYXMgVFtLXVsnVFZhbHVlJ107IH1cbiAgICBwdWJsaWMgdG9KU09OKCk6IGFueSB7XG4gICAgICAgIHJldHVybiBEYXRhVHlwZS5pc1N0cnVjdCh0aGlzW2tQYXJlbnRdLnR5cGUpID8gWy4uLnRoaXNdIDpcbiAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpLnJlZHVjZSgocHJvcHM6IGFueSwgcHJvcDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChwcm9wc1twcm9wXSA9ICh0aGlzIGFzIGFueSlbcHJvcF0pICYmIHByb3BzIHx8IHByb3BzO1xuICAgICAgICAgICAgfSwge30pO1xuICAgIH1cbiAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBEYXRhVHlwZS5pc1N0cnVjdCh0aGlzW2tQYXJlbnRdLnR5cGUpID9cbiAgICAgICAgICAgIFsuLi50aGlzXS5tYXAoKHgpID0+IHZhbHVlVG9TdHJpbmcoeCkpLmpvaW4oJywgJykgOlxuICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykucmVkdWNlKChwcm9wczogYW55LCBwcm9wOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHByb3BzW3Byb3BdID0gdmFsdWVUb1N0cmluZygodGhpcyBhcyBhbnkpW3Byb3BdKSkgJiYgcHJvcHMgfHwgcHJvcHM7XG4gICAgICAgICAgICB9LCB7fSk7XG4gICAgfVxufVxuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGNsYXNzIFJvd1Byb3h5R2VuZXJhdG9yPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0+IHtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIG5ldzxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9PihwYXJlbnQ6IE1hcFZlY3RvcjxUPiB8IFN0cnVjdFZlY3RvcjxUPiwgc2NoZW1hT3JGaWVsZHM6IFQgfCBGaWVsZFtdLCBmaWVsZHNBcmVFbnVtZXJhYmxlID0gZmFsc2UpOiBSb3dQcm94eUdlbmVyYXRvcjxUPiB7XG4gICAgICAgIGxldCBzY2hlbWE6IFQsIGZpZWxkczogRmllbGRbXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hT3JGaWVsZHMpKSB7XG4gICAgICAgICAgICBmaWVsZHMgPSBzY2hlbWFPckZpZWxkcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNjaGVtYSA9IHNjaGVtYU9yRmllbGRzO1xuICAgICAgICAgICAgZmllbGRzQXJlRW51bWVyYWJsZSA9IHRydWU7XG4gICAgICAgICAgICBmaWVsZHMgPSBPYmplY3Qua2V5cyhzY2hlbWEpLm1hcCgoeCkgPT4gbmV3IEZpZWxkKHgsIHNjaGVtYVt4XSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUm93UHJveHlHZW5lcmF0b3I8VD4ocGFyZW50LCBmaWVsZHMsIGZpZWxkc0FyZUVudW1lcmFibGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcm93UHJvdG90eXBlOiBSb3c8VD47XG5cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKHBhcmVudDogTWFwVmVjdG9yPFQ+IHwgU3RydWN0VmVjdG9yPFQ+LCBmaWVsZHM6IEZpZWxkW10sIGZpZWxkc0FyZUVudW1lcmFibGU6IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgcHJvdG8gPSBPYmplY3QuY3JlYXRlKFJvdy5wcm90b3R5cGUpO1xuXG4gICAgICAgIHJvd1BhcmVudERlc2NyaXB0b3IudmFsdWUgPSBwYXJlbnQ7XG4gICAgICAgIHJvd0xlbmd0aERlc2NyaXB0b3IudmFsdWUgPSBmaWVsZHMubGVuZ3RoO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIGtQYXJlbnQsIHJvd1BhcmVudERlc2NyaXB0b3IpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIGtMZW5ndGgsIHJvd0xlbmd0aERlc2NyaXB0b3IpO1xuICAgICAgICBmaWVsZHMuZm9yRWFjaCgoZmllbGQsIGNvbHVtbkluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXByb3RvLmhhc093blByb3BlcnR5KGZpZWxkLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uRGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmllbGRzQXJlRW51bWVyYWJsZTtcbiAgICAgICAgICAgICAgICBjb2x1bW5EZXNjcmlwdG9yLmdldCB8fCAoY29sdW1uRGVzY3JpcHRvci5nZXQgPSB0aGlzLl9iaW5kR2V0dGVyKGNvbHVtbkluZGV4KSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBmaWVsZC5uYW1lLCBjb2x1bW5EZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcHJvdG8uaGFzT3duUHJvcGVydHkoY29sdW1uSW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uRGVzY3JpcHRvci5lbnVtZXJhYmxlID0gIWZpZWxkc0FyZUVudW1lcmFibGU7XG4gICAgICAgICAgICAgICAgY29sdW1uRGVzY3JpcHRvci5nZXQgfHwgKGNvbHVtbkRlc2NyaXB0b3IuZ2V0ID0gdGhpcy5fYmluZEdldHRlcihjb2x1bW5JbmRleCkpO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgY29sdW1uSW5kZXgsIGNvbHVtbkRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sdW1uRGVzY3JpcHRvci5nZXQgPSBudWxsIGFzIGFueTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5yb3dQcm90b3R5cGUgPSBwcm90bztcbiAgICB9XG5cbiAgICBwcml2YXRlIF9iaW5kR2V0dGVyKGNvbHVtbkluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHRoaXM6IFJvdzxUPikge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzW2tQYXJlbnRdLmdldENoaWxkQXQoY29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkID8gY2hpbGQuZ2V0KHRoaXNba1Jvd0luZGV4XSkgOiBudWxsO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBwdWJsaWMgYmluZChyb3dJbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGJvdW5kID0gT2JqZWN0LmNyZWF0ZSh0aGlzLnJvd1Byb3RvdHlwZSk7XG4gICAgICAgIGJvdW5kW2tSb3dJbmRleF0gPSByb3dJbmRleDtcbiAgICAgICAgcmV0dXJuIGJvdW5kO1xuICAgICAgICAvL3JldHVybiBuZXcgdGhpcy5Sb3dQcm94eShyb3dJbmRleCk7XG4gICAgfVxufVxuIl19
