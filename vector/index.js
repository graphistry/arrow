"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
var all_1 = require("./all");
exports.Row = all_1.Row;
var all_2 = require("./all");
exports.Vector = all_2.Vector;
var all_3 = require("./all");
exports.BaseVector = all_3.BaseVector;
var all_4 = require("./all");
exports.BinaryVector = all_4.BinaryVector;
var all_5 = require("./all");
exports.BoolVector = all_5.BoolVector;
var all_6 = require("./all");
exports.ChunkedVector = all_6.ChunkedVector;
var all_7 = require("./all");
exports.DateVector = all_7.DateVector;
exports.DateDayVector = all_7.DateDayVector;
exports.DateMillisecondVector = all_7.DateMillisecondVector;
var all_8 = require("./all");
exports.DecimalVector = all_8.DecimalVector;
var all_9 = require("./all");
exports.DictionaryVector = all_9.DictionaryVector;
var all_10 = require("./all");
exports.FixedSizeBinaryVector = all_10.FixedSizeBinaryVector;
var all_11 = require("./all");
exports.FixedSizeListVector = all_11.FixedSizeListVector;
var all_12 = require("./all");
exports.FloatVector = all_12.FloatVector;
exports.Float16Vector = all_12.Float16Vector;
exports.Float32Vector = all_12.Float32Vector;
exports.Float64Vector = all_12.Float64Vector;
var all_13 = require("./all");
exports.IntervalVector = all_13.IntervalVector;
exports.IntervalDayTimeVector = all_13.IntervalDayTimeVector;
exports.IntervalYearMonthVector = all_13.IntervalYearMonthVector;
var all_14 = require("./all");
exports.IntVector = all_14.IntVector;
exports.Int8Vector = all_14.Int8Vector;
exports.Int16Vector = all_14.Int16Vector;
exports.Int32Vector = all_14.Int32Vector;
exports.Int64Vector = all_14.Int64Vector;
exports.Uint8Vector = all_14.Uint8Vector;
exports.Uint16Vector = all_14.Uint16Vector;
exports.Uint32Vector = all_14.Uint32Vector;
exports.Uint64Vector = all_14.Uint64Vector;
var all_15 = require("./all");
exports.ListVector = all_15.ListVector;
var all_16 = require("./all");
exports.MapVector = all_16.MapVector;
var all_17 = require("./all");
exports.NullVector = all_17.NullVector;
var all_18 = require("./all");
exports.StructVector = all_18.StructVector;
var all_19 = require("./all");
exports.TimestampVector = all_19.TimestampVector;
exports.TimestampSecondVector = all_19.TimestampSecondVector;
exports.TimestampMillisecondVector = all_19.TimestampMillisecondVector;
exports.TimestampMicrosecondVector = all_19.TimestampMicrosecondVector;
exports.TimestampNanosecondVector = all_19.TimestampNanosecondVector;
var all_20 = require("./all");
exports.TimeVector = all_20.TimeVector;
exports.TimeSecondVector = all_20.TimeSecondVector;
exports.TimeMillisecondVector = all_20.TimeMillisecondVector;
exports.TimeMicrosecondVector = all_20.TimeMicrosecondVector;
exports.TimeNanosecondVector = all_20.TimeNanosecondVector;
var all_21 = require("./all");
exports.UnionVector = all_21.UnionVector;
exports.DenseUnionVector = all_21.DenseUnionVector;
exports.SparseUnionVector = all_21.SparseUnionVector;
var all_22 = require("./all");
exports.Utf8Vector = all_22.Utf8Vector;
const enum_1 = require("../enum");
const vector_1 = require("../vector");
const base_1 = require("./base");
const bit_1 = require("../util/bit");
const get_1 = require("../visitor/get");
const set_1 = require("../visitor/set");
const indexof_1 = require("../visitor/indexof");
const toarray_1 = require("../visitor/toarray");
const iterator_1 = require("../visitor/iterator");
const bytewidth_1 = require("../visitor/bytewidth");
const vectorctor_1 = require("../visitor/vectorctor");
/** @nocollapse */
vector_1.Vector.new = newVector;
function newVector(data, ...args) {
    return new (vectorctor_1.instance.getVisitFn(data.type)())(data, ...args);
}
//
// We provide the following method implementations for code navigability purposes only.
// They're overridden at runtime below with the specific Visitor implementation for each type,
// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.
// This comment is here to remind you to not set breakpoints in these function bodies, or to inform
// you why the breakpoints you have already set are not being triggered. Have a great day!
//
base_1.BaseVector.prototype.get = function baseVectorGet(index) {
    return get_1.instance.visit(this, index);
};
base_1.BaseVector.prototype.set = function baseVectorSet(index, value) {
    return set_1.instance.visit(this, index, value);
};
base_1.BaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {
    return indexof_1.instance.visit(this, value, fromIndex);
};
base_1.BaseVector.prototype.toArray = function baseVectorToArray() {
    return toarray_1.instance.visit(this);
};
base_1.BaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {
    return bytewidth_1.instance.visit(this.type);
};
base_1.BaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {
    return iterator_1.instance.visit(this);
};
base_1.BaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors;
// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type
Object.keys(enum_1.Type)
    .filter((typeId) => typeId !== enum_1.Type.NONE && typeId !== enum_1.Type[enum_1.Type.NONE])
    .map((T) => enum_1.Type[T]).filter((T) => typeof T === 'number')
    .forEach((typeId) => {
    let typeIds;
    switch (typeId) {
        case enum_1.Type.Int:
            typeIds = [enum_1.Type.Int8, enum_1.Type.Int16, enum_1.Type.Int32, enum_1.Type.Int64, enum_1.Type.Uint8, enum_1.Type.Uint16, enum_1.Type.Uint32, enum_1.Type.Uint64];
            break;
        case enum_1.Type.Float:
            typeIds = [enum_1.Type.Float16, enum_1.Type.Float32, enum_1.Type.Float64];
            break;
        case enum_1.Type.Date:
            typeIds = [enum_1.Type.DateDay, enum_1.Type.DateMillisecond];
            break;
        case enum_1.Type.Time:
            typeIds = [enum_1.Type.TimeSecond, enum_1.Type.TimeMillisecond, enum_1.Type.TimeMicrosecond, enum_1.Type.TimeNanosecond];
            break;
        case enum_1.Type.Timestamp:
            typeIds = [enum_1.Type.TimestampSecond, enum_1.Type.TimestampMillisecond, enum_1.Type.TimestampMicrosecond, enum_1.Type.TimestampNanosecond];
            break;
        case enum_1.Type.Interval:
            typeIds = [enum_1.Type.IntervalDayTime, enum_1.Type.IntervalYearMonth];
            break;
        case enum_1.Type.Union:
            typeIds = [enum_1.Type.DenseUnion, enum_1.Type.SparseUnion];
            break;
        default:
            typeIds = [typeId];
            break;
    }
    typeIds.forEach((typeId) => {
        const VectorCtor = vectorctor_1.instance.visit(typeId);
        VectorCtor.prototype['get'] = partial1(get_1.instance.getVisitFn(typeId));
        VectorCtor.prototype['set'] = partial2(set_1.instance.getVisitFn(typeId));
        VectorCtor.prototype['indexOf'] = partial2(indexof_1.instance.getVisitFn(typeId));
        VectorCtor.prototype['toArray'] = partial0(toarray_1.instance.getVisitFn(typeId));
        VectorCtor.prototype['getByteWidth'] = partial0(bytewidth_1.instance.getVisitFn(typeId));
        VectorCtor.prototype[Symbol.iterator] = partial0(iterator_1.instance.getVisitFn(typeId));
    });
});
function partial0(visit) {
    return function () { return visit(this); };
}
function partial1(visit) {
    return function (a) { return visit(this, a); };
}
function partial2(visit) {
    return function (a, b) { return visit(this, a, b); };
}
function wrapNullable1(fn) {
    return function (i) { return this.isValid(i) ? fn.call(this, i) : null; };
}
function wrapNullableSet(fn) {
    return function (i, a) {
        if (bit_1.setBool(this.nullBitmap, this.offset + i, a != null)) {
            fn.call(this, i, a);
        }
    };
}
// @ts-ignore
function bindBaseVectorDataAccessors(data) {
    const type = this.type;
    this['get'] = get_1.instance.getVisitFn(type).bind(this, this);
    this['set'] = set_1.instance.getVisitFn(type).bind(this, this);
    this['indexOf'] = indexof_1.instance.getVisitFn(type).bind(this, this);
    this['toArray'] = toarray_1.instance.getVisitFn(type).bind(this, this);
    this[Symbol.iterator] = iterator_1.instance.getVisitFn(type).bind(this, this);
    if (this.nullCount > 0) {
        this['get'] = wrapNullable1(this['get']);
        this['set'] = wrapNullableSet(this['set']);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
