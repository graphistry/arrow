"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License,  Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND,  either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
var row_1 = require("./row");
exports.Row = row_1.Row;
var vector_1 = require("../vector");
exports.Vector = vector_1.Vector;
var base_1 = require("./base");
exports.BaseVector = base_1.BaseVector;
var binary_1 = require("./binary");
exports.BinaryVector = binary_1.BinaryVector;
var bool_1 = require("./bool");
exports.BoolVector = bool_1.BoolVector;
var chunked_1 = require("./chunked");
exports.ChunkedVector = chunked_1.ChunkedVector;
var date_1 = require("./date");
exports.DateVector = date_1.DateVector;
exports.DateDayVector = date_1.DateDayVector;
exports.DateMillisecondVector = date_1.DateMillisecondVector;
var decimal_1 = require("./decimal");
exports.DecimalVector = decimal_1.DecimalVector;
var dictionary_1 = require("./dictionary");
exports.DictionaryVector = dictionary_1.DictionaryVector;
var fixedsizebinary_1 = require("./fixedsizebinary");
exports.FixedSizeBinaryVector = fixedsizebinary_1.FixedSizeBinaryVector;
var fixedsizelist_1 = require("./fixedsizelist");
exports.FixedSizeListVector = fixedsizelist_1.FixedSizeListVector;
var float_1 = require("./float");
exports.FloatVector = float_1.FloatVector;
exports.Float16Vector = float_1.Float16Vector;
exports.Float32Vector = float_1.Float32Vector;
exports.Float64Vector = float_1.Float64Vector;
var interval_1 = require("./interval");
exports.IntervalVector = interval_1.IntervalVector;
exports.IntervalDayTimeVector = interval_1.IntervalDayTimeVector;
exports.IntervalYearMonthVector = interval_1.IntervalYearMonthVector;
var int_1 = require("./int");
exports.IntVector = int_1.IntVector;
exports.Int8Vector = int_1.Int8Vector;
exports.Int16Vector = int_1.Int16Vector;
exports.Int32Vector = int_1.Int32Vector;
exports.Int64Vector = int_1.Int64Vector;
exports.Uint8Vector = int_1.Uint8Vector;
exports.Uint16Vector = int_1.Uint16Vector;
exports.Uint32Vector = int_1.Uint32Vector;
exports.Uint64Vector = int_1.Uint64Vector;
var list_1 = require("./list");
exports.ListVector = list_1.ListVector;
var map_1 = require("./map");
exports.MapVector = map_1.MapVector;
var null_1 = require("./null");
exports.NullVector = null_1.NullVector;
var struct_1 = require("./struct");
exports.StructVector = struct_1.StructVector;
var timestamp_1 = require("./timestamp");
exports.TimestampVector = timestamp_1.TimestampVector;
exports.TimestampSecondVector = timestamp_1.TimestampSecondVector;
exports.TimestampMillisecondVector = timestamp_1.TimestampMillisecondVector;
exports.TimestampMicrosecondVector = timestamp_1.TimestampMicrosecondVector;
exports.TimestampNanosecondVector = timestamp_1.TimestampNanosecondVector;
var time_1 = require("./time");
exports.TimeVector = time_1.TimeVector;
exports.TimeSecondVector = time_1.TimeSecondVector;
exports.TimeMillisecondVector = time_1.TimeMillisecondVector;
exports.TimeMicrosecondVector = time_1.TimeMicrosecondVector;
exports.TimeNanosecondVector = time_1.TimeNanosecondVector;
var union_1 = require("./union");
exports.UnionVector = union_1.UnionVector;
exports.DenseUnionVector = union_1.DenseUnionVector;
exports.SparseUnionVector = union_1.SparseUnionVector;
var utf8_1 = require("./utf8");
exports.Utf8Vector = utf8_1.Utf8Vector;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxxREFBcUQ7QUFDckQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELDBEQUEwRDtBQUMxRCw2REFBNkQ7QUFDN0QsMERBQTBEO0FBQzFELHFCQUFxQjs7QUFFckIsNkJBQTRCO0FBQW5CLG9CQUFBLEdBQUcsQ0FBQTtBQUNaLG9DQUFtQztBQUExQiwwQkFBQSxNQUFNLENBQUE7QUFDZiwrQkFBb0M7QUFBM0IsNEJBQUEsVUFBVSxDQUFBO0FBQ25CLG1DQUF3QztBQUEvQixnQ0FBQSxZQUFZLENBQUE7QUFDckIsK0JBQW9DO0FBQTNCLDRCQUFBLFVBQVUsQ0FBQTtBQUNuQixxQ0FBMEM7QUFBakMsa0NBQUEsYUFBYSxDQUFBO0FBQ3RCLCtCQUEwRTtBQUFqRSw0QkFBQSxVQUFVLENBQUE7QUFBRSwrQkFBQSxhQUFhLENBQUE7QUFBRSx1Q0FBQSxxQkFBcUIsQ0FBQTtBQUN6RCxxQ0FBMEM7QUFBakMsa0NBQUEsYUFBYSxDQUFBO0FBQ3RCLDJDQUFnRDtBQUF2Qyx3Q0FBQSxnQkFBZ0IsQ0FBQTtBQUN6QixxREFBMEQ7QUFBakQsa0RBQUEscUJBQXFCLENBQUE7QUFDOUIsaURBQXNEO0FBQTdDLDhDQUFBLG1CQUFtQixDQUFBO0FBQzVCLGlDQUFtRjtBQUExRSw4QkFBQSxXQUFXLENBQUE7QUFBRSxnQ0FBQSxhQUFhLENBQUE7QUFBRSxnQ0FBQSxhQUFhLENBQUE7QUFBRSxnQ0FBQSxhQUFhLENBQUE7QUFDakUsdUNBQTRGO0FBQW5GLG9DQUFBLGNBQWMsQ0FBQTtBQUFFLDJDQUFBLHFCQUFxQixDQUFBO0FBQUUsNkNBQUEsdUJBQXVCLENBQUE7QUFDdkUsNkJBQTRJO0FBQW5JLDBCQUFBLFNBQVMsQ0FBQTtBQUFFLDJCQUFBLFVBQVUsQ0FBQTtBQUFFLDRCQUFBLFdBQVcsQ0FBQTtBQUFFLDRCQUFBLFdBQVcsQ0FBQTtBQUFFLDRCQUFBLFdBQVcsQ0FBQTtBQUFFLDRCQUFBLFdBQVcsQ0FBQTtBQUFFLDZCQUFBLFlBQVksQ0FBQTtBQUFFLDZCQUFBLFlBQVksQ0FBQTtBQUFFLDZCQUFBLFlBQVksQ0FBQTtBQUM1SCwrQkFBb0M7QUFBM0IsNEJBQUEsVUFBVSxDQUFBO0FBQ25CLDZCQUFrQztBQUF6QiwwQkFBQSxTQUFTLENBQUE7QUFDbEIsK0JBQW9DO0FBQTNCLDRCQUFBLFVBQVUsQ0FBQTtBQUNuQixtQ0FBd0M7QUFBL0IsZ0NBQUEsWUFBWSxDQUFBO0FBQ3JCLHlDQUF3SjtBQUEvSSxzQ0FBQSxlQUFlLENBQUE7QUFBRSw0Q0FBQSxxQkFBcUIsQ0FBQTtBQUFFLGlEQUFBLDBCQUEwQixDQUFBO0FBQUUsaURBQUEsMEJBQTBCLENBQUE7QUFBRSxnREFBQSx5QkFBeUIsQ0FBQTtBQUNsSSwrQkFBMEg7QUFBakgsNEJBQUEsVUFBVSxDQUFBO0FBQUUsa0NBQUEsZ0JBQWdCLENBQUE7QUFBRSx1Q0FBQSxxQkFBcUIsQ0FBQTtBQUFFLHVDQUFBLHFCQUFxQixDQUFBO0FBQUUsc0NBQUEsb0JBQW9CLENBQUE7QUFDekcsaUNBQTJFO0FBQWxFLDhCQUFBLFdBQVcsQ0FBQTtBQUFFLG1DQUFBLGdCQUFnQixDQUFBO0FBQUUsb0NBQUEsaUJBQWlCLENBQUE7QUFDekQsK0JBQW9DO0FBQTNCLDRCQUFBLFVBQVUsQ0FBQSIsImZpbGUiOiJ2ZWN0b3IvYWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmV4cG9ydCB7IFJvdyB9IGZyb20gJy4vcm93JztcbmV4cG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5leHBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmV4cG9ydCB7IEJpbmFyeVZlY3RvciB9IGZyb20gJy4vYmluYXJ5JztcbmV4cG9ydCB7IEJvb2xWZWN0b3IgfSBmcm9tICcuL2Jvb2wnO1xuZXhwb3J0IHsgQ2h1bmtlZFZlY3RvciB9IGZyb20gJy4vY2h1bmtlZCc7XG5leHBvcnQgeyBEYXRlVmVjdG9yLCBEYXRlRGF5VmVjdG9yLCBEYXRlTWlsbGlzZWNvbmRWZWN0b3IgfSBmcm9tICcuL2RhdGUnO1xuZXhwb3J0IHsgRGVjaW1hbFZlY3RvciB9IGZyb20gJy4vZGVjaW1hbCc7XG5leHBvcnQgeyBEaWN0aW9uYXJ5VmVjdG9yIH0gZnJvbSAnLi9kaWN0aW9uYXJ5JztcbmV4cG9ydCB7IEZpeGVkU2l6ZUJpbmFyeVZlY3RvciB9IGZyb20gJy4vZml4ZWRzaXplYmluYXJ5JztcbmV4cG9ydCB7IEZpeGVkU2l6ZUxpc3RWZWN0b3IgfSBmcm9tICcuL2ZpeGVkc2l6ZWxpc3QnO1xuZXhwb3J0IHsgRmxvYXRWZWN0b3IsIEZsb2F0MTZWZWN0b3IsIEZsb2F0MzJWZWN0b3IsIEZsb2F0NjRWZWN0b3IgfSBmcm9tICcuL2Zsb2F0JztcbmV4cG9ydCB7IEludGVydmFsVmVjdG9yLCBJbnRlcnZhbERheVRpbWVWZWN0b3IsIEludGVydmFsWWVhck1vbnRoVmVjdG9yIH0gZnJvbSAnLi9pbnRlcnZhbCc7XG5leHBvcnQgeyBJbnRWZWN0b3IsIEludDhWZWN0b3IsIEludDE2VmVjdG9yLCBJbnQzMlZlY3RvciwgSW50NjRWZWN0b3IsIFVpbnQ4VmVjdG9yLCBVaW50MTZWZWN0b3IsIFVpbnQzMlZlY3RvciwgVWludDY0VmVjdG9yIH0gZnJvbSAnLi9pbnQnO1xuZXhwb3J0IHsgTGlzdFZlY3RvciB9IGZyb20gJy4vbGlzdCc7XG5leHBvcnQgeyBNYXBWZWN0b3IgfSBmcm9tICcuL21hcCc7XG5leHBvcnQgeyBOdWxsVmVjdG9yIH0gZnJvbSAnLi9udWxsJztcbmV4cG9ydCB7IFN0cnVjdFZlY3RvciB9IGZyb20gJy4vc3RydWN0JztcbmV4cG9ydCB7IFRpbWVzdGFtcFZlY3RvciwgVGltZXN0YW1wU2Vjb25kVmVjdG9yLCBUaW1lc3RhbXBNaWxsaXNlY29uZFZlY3RvciwgVGltZXN0YW1wTWljcm9zZWNvbmRWZWN0b3IsIFRpbWVzdGFtcE5hbm9zZWNvbmRWZWN0b3IgfSBmcm9tICcuL3RpbWVzdGFtcCc7XG5leHBvcnQgeyBUaW1lVmVjdG9yLCBUaW1lU2Vjb25kVmVjdG9yLCBUaW1lTWlsbGlzZWNvbmRWZWN0b3IsIFRpbWVNaWNyb3NlY29uZFZlY3RvciwgVGltZU5hbm9zZWNvbmRWZWN0b3IgfSBmcm9tICcuL3RpbWUnO1xuZXhwb3J0IHsgVW5pb25WZWN0b3IsIERlbnNlVW5pb25WZWN0b3IsIFNwYXJzZVVuaW9uVmVjdG9yIH0gZnJvbSAnLi91bmlvbic7XG5leHBvcnQgeyBVdGY4VmVjdG9yIH0gZnJvbSAnLi91dGY4JztcbiJdfQ==
