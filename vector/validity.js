"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const bit_1 = require("../util/bit");
class ValidityView {
    constructor(data, view) {
        this.view = view;
        this.length = data.length;
        this.offset = data.offset;
        this.nullBitmap = data.nullBitmap;
    }
    get size() {
        return this.view.size || 1;
    }
    clone(data) {
        return new ValidityView(data, this.view.clone(data));
    }
    toArray() {
        return [...this];
    }
    indexOf(search) {
        let index = 0;
        for (let value of this) {
            if (value === search) {
                return index;
            }
            ++index;
        }
        return -1;
    }
    isValid(index) {
        const nullBitIndex = this.offset + index;
        return bit_1.getBool(null, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);
    }
    get(index) {
        const nullBitIndex = this.offset + index;
        return this.getNullable(this.view, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);
    }
    set(index, value) {
        if (bit_1.setBool(this.nullBitmap, this.offset + index, value != null)) {
            this.view.set(index, value);
        }
    }
    getChildAt(index) {
        return this.view.getChildAt(index);
    }
    [Symbol.iterator]() {
        return bit_1.iterateBits(this.nullBitmap, this.offset, this.length, this.view, this.getNullable);
    }
    getNullable(view, index, byte, bit) {
        return bit_1.getBool(view, index, byte, bit) ? view.get(index) : null;
    }
}
exports.ValidityView = ValidityView;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNuSCxDQUFDO0lBQ1MsV0FBVyxDQUFDLElBQWEsRUFBRSxLQUFhLEVBQUUsSUFBWSxFQUFFLEdBQVc7UUFDekUsT0FBTyxhQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNwRSxDQUFDO0NBQ0o7QUFuREQsb0NBbURDIiwiZmlsZSI6InZlY3Rvci92YWxpZGl0eS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWaWV3LCBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgTmVzdGVkVmlldyB9IGZyb20gJy4vbmVzdGVkJztcbmltcG9ydCB7IERhdGFUeXBlLCBJdGVyYWJsZUFycmF5TGlrZSB9IGZyb20gJy4uL3R5cGUnO1xuaW1wb3J0IHsgZ2V0Qm9vbCwgc2V0Qm9vbCwgaXRlcmF0ZUJpdHMgfSBmcm9tICcuLi91dGlsL2JpdCc7XG5cbmV4cG9ydCBjbGFzcyBWYWxpZGl0eVZpZXc8VCBleHRlbmRzIERhdGFUeXBlPiBpbXBsZW1lbnRzIFZpZXc8VD4ge1xuICAgIHByb3RlY3RlZCB2aWV3OiBWaWV3PFQ+O1xuICAgIHByb3RlY3RlZCBsZW5ndGg6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgb2Zmc2V0OiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIG51bGxCaXRtYXA6IFVpbnQ4QXJyYXk7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPiwgdmlldzogVmlldzxUPikge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICB0aGlzLm9mZnNldCA9IGRhdGEub2Zmc2V0O1xuICAgICAgICB0aGlzLm51bGxCaXRtYXAgPSBkYXRhLm51bGxCaXRtYXAhO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IHNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnZpZXcgYXMgYW55KS5zaXplIHx8IDE7XG4gICAgfVxuICAgIHB1YmxpYyBjbG9uZShkYXRhOiBEYXRhPFQ+KTogdGhpcyB7XG4gICAgICAgIHJldHVybiBuZXcgVmFsaWRpdHlWaWV3KGRhdGEsIHRoaXMudmlldy5jbG9uZShkYXRhKSkgYXMgdGhpcztcbiAgICB9XG4gICAgcHVibGljIHRvQXJyYXkoKTogSXRlcmFibGVBcnJheUxpa2U8VFsnVFZhbHVlJ10gfCBudWxsPiB7XG4gICAgICAgIHJldHVybiBbLi4udGhpc107XG4gICAgfVxuICAgIHB1YmxpYyBpbmRleE9mKHNlYXJjaDogVFsnVFZhbHVlJ10pIHtcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgZm9yIChsZXQgdmFsdWUgb2YgdGhpcykge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBzZWFyY2gpIHsgcmV0dXJuIGluZGV4OyB9XG4gICAgICAgICAgICArK2luZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBwdWJsaWMgaXNWYWxpZChpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IG51bGxCaXRJbmRleCA9IHRoaXMub2Zmc2V0ICsgaW5kZXg7XG4gICAgICAgIHJldHVybiBnZXRCb29sKG51bGwsIGluZGV4LCB0aGlzLm51bGxCaXRtYXBbbnVsbEJpdEluZGV4ID4+IDNdLCBudWxsQml0SW5kZXggJSA4KTtcbiAgICB9XG4gICAgcHVibGljIGdldChpbmRleDogbnVtYmVyKTogVFsnVFZhbHVlJ10gfCBudWxsIHtcbiAgICAgICAgY29uc3QgbnVsbEJpdEluZGV4ID0gdGhpcy5vZmZzZXQgKyBpbmRleDtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TnVsbGFibGUodGhpcy52aWV3LCBpbmRleCwgdGhpcy5udWxsQml0bWFwW251bGxCaXRJbmRleCA+PiAzXSwgbnVsbEJpdEluZGV4ICUgOCk7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQoaW5kZXg6IG51bWJlciwgdmFsdWU6IFRbJ1RWYWx1ZSddIHwgbnVsbCk6IHZvaWQge1xuICAgICAgICBpZiAoc2V0Qm9vbCh0aGlzLm51bGxCaXRtYXAsIHRoaXMub2Zmc2V0ICsgaW5kZXgsIHZhbHVlICE9IG51bGwpKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcuc2V0KGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGdldENoaWxkQXQ8UiBleHRlbmRzIERhdGFUeXBlID0gRGF0YVR5cGU+KGluZGV4OiBudW1iZXIpOiBWZWN0b3I8Uj4gfCBudWxsIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnZpZXcgYXMgTmVzdGVkVmlldzxhbnk+KS5nZXRDaGlsZEF0PFI+KGluZGV4KTtcbiAgICB9XG4gICAgcHVibGljIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8VFsnVFZhbHVlJ10gfCBudWxsPiB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlQml0czxUWydUVmFsdWUnXSB8IG51bGw+KHRoaXMubnVsbEJpdG1hcCwgdGhpcy5vZmZzZXQsIHRoaXMubGVuZ3RoLCB0aGlzLnZpZXcsIHRoaXMuZ2V0TnVsbGFibGUpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0TnVsbGFibGUodmlldzogVmlldzxUPiwgaW5kZXg6IG51bWJlciwgYnl0ZTogbnVtYmVyLCBiaXQ6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gZ2V0Qm9vbCh2aWV3LCBpbmRleCwgYnl0ZSwgYml0KSA/IHZpZXcuZ2V0KGluZGV4KSA6IG51bGw7XG4gICAgfVxufVxuIl19
