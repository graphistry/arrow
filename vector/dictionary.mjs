// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Data } from '../data';
import { Vector } from '../vector';
import { BaseVector } from './base';
import { Dictionary } from '../type';
export class DictionaryVector extends BaseVector {
    constructor(data) {
        super(data);
        this._indices = Vector.new(data.clone(this.type.indices));
    }
    /** @nocollapse */
    static from(values, indices, keys) {
        const type = new Dictionary(values.type, indices, null, null, values);
        return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys));
    }
    // protected _bindDataAccessors() {}
    get indices() { return this._indices; }
    get dictionary() { return this.data.type.dictionaryVector; }
    isValid(index) { return this._indices.isValid(index); }
    reverseLookup(value) { return this.dictionary.indexOf(value); }
    getKey(idx) { return this._indices.get(idx); }
    getValue(key) { return this.dictionary.get(key); }
    setKey(idx, key) { return this._indices.set(idx, key); }
    setValue(key, value) { return this.dictionary.set(key, value); }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kaWN0aW9uYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVwQyxPQUFPLEVBQVksVUFBVSxFQUFTLE1BQU0sU0FBUyxDQUFDO0FBRXRELE1BQU0sT0FBTyxnQkFBdUUsU0FBUSxVQUErQjtJQVV2SCxZQUFZLElBQStCO1FBQ3ZDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBWkQsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLElBQUksQ0FDZCxNQUFpQixFQUFFLE9BQWEsRUFDaEMsSUFBd0M7UUFFeEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0RSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFNRCxvQ0FBb0M7SUFDcEMsSUFBVyxPQUFPLEtBQUssT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM5QyxJQUFXLFVBQVUsS0FBSyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUM1RCxPQUFPLENBQUMsS0FBYSxJQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELGFBQWEsQ0FBQyxLQUFRLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEUsTUFBTSxDQUFDLEdBQVcsSUFBMkIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0UsUUFBUSxDQUFDLEdBQVcsSUFBd0IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUUsTUFBTSxDQUFDLEdBQVcsRUFBRSxHQUEwQixJQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RixRQUFRLENBQUMsR0FBVyxFQUFFLEtBQXlCLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3RHIiwiZmlsZSI6InZlY3Rvci9kaWN0aW9uYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFZlY3RvciBhcyBWIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgRGljdGlvbmFyeSwgVEtleXMgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIERpY3Rpb25hcnlWZWN0b3I8VCBleHRlbmRzIERhdGFUeXBlID0gYW55LCBUS2V5IGV4dGVuZHMgVEtleXMgPSBUS2V5cz4gZXh0ZW5kcyBCYXNlVmVjdG9yPERpY3Rpb25hcnk8VCwgVEtleT4+IHtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIERhdGFUeXBlPGFueT4sIFRLZXkgZXh0ZW5kcyBUS2V5cyA9IFRLZXlzPihcbiAgICAgICAgdmFsdWVzOiBWZWN0b3I8VD4sIGluZGljZXM6IFRLZXksXG4gICAgICAgIGtleXM6IEFycmF5TGlrZTxudW1iZXI+IHwgVEtleVsnVEFycmF5J11cbiAgICApIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IG5ldyBEaWN0aW9uYXJ5KHZhbHVlcy50eXBlLCBpbmRpY2VzLCBudWxsLCBudWxsLCB2YWx1ZXMpO1xuICAgICAgICByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkRpY3Rpb25hcnkodHlwZSwgMCwga2V5cy5sZW5ndGgsIDAsIG51bGwsIGtleXMpKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIF9pbmRpY2VzOiBWPFRLZXk+O1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8RGljdGlvbmFyeTxULCBUS2V5Pj4pIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIHRoaXMuX2luZGljZXMgPSBWZWN0b3IubmV3KGRhdGEuY2xvbmUodGhpcy50eXBlLmluZGljZXMpKTtcbiAgICB9XG4gICAgLy8gcHJvdGVjdGVkIF9iaW5kRGF0YUFjY2Vzc29ycygpIHt9XG4gICAgcHVibGljIGdldCBpbmRpY2VzKCkgeyByZXR1cm4gdGhpcy5faW5kaWNlczsgfVxuICAgIHB1YmxpYyBnZXQgZGljdGlvbmFyeSgpIHsgcmV0dXJuIHRoaXMuZGF0YS50eXBlLmRpY3Rpb25hcnlWZWN0b3I7IH1cbiAgICBwdWJsaWMgaXNWYWxpZChpbmRleDogbnVtYmVyKSB7IHJldHVybiB0aGlzLl9pbmRpY2VzLmlzVmFsaWQoaW5kZXgpOyB9XG4gICAgcHVibGljIHJldmVyc2VMb29rdXAodmFsdWU6IFQpIHsgcmV0dXJuIHRoaXMuZGljdGlvbmFyeS5pbmRleE9mKHZhbHVlKTsgfVxuICAgIHB1YmxpYyBnZXRLZXkoaWR4OiBudW1iZXIpOiBUS2V5WydUVmFsdWUnXSB8IG51bGwgeyByZXR1cm4gdGhpcy5faW5kaWNlcy5nZXQoaWR4KTsgfVxuICAgIHB1YmxpYyBnZXRWYWx1ZShrZXk6IG51bWJlcik6IFRbJ1RWYWx1ZSddIHwgbnVsbCB7IHJldHVybiB0aGlzLmRpY3Rpb25hcnkuZ2V0KGtleSk7IH1cbiAgICBwdWJsaWMgc2V0S2V5KGlkeDogbnVtYmVyLCBrZXk6IFRLZXlbJ1RWYWx1ZSddIHwgbnVsbCkgeyByZXR1cm4gdGhpcy5faW5kaWNlcy5zZXQoaWR4LCBrZXkpOyB9XG4gICAgcHVibGljIHNldFZhbHVlKGtleTogbnVtYmVyLCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsKSB7IHJldHVybiB0aGlzLmRpY3Rpb25hcnkuc2V0KGtleSwgdmFsdWUpOyB9XG59XG4iXX0=
