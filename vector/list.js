"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const vector_1 = require("../vector");
const text_encoding_utf_8_1 = require("text-encoding-utf-8");
exports.encodeUtf8 = ((encoder) => encoder.encode.bind(encoder))(new text_encoding_utf_8_1.TextEncoder('utf-8'));
exports.decodeUtf8 = ((decoder) => decoder.decode.bind(decoder))(new text_encoding_utf_8_1.TextDecoder('utf-8'));
class ListViewBase {
    constructor(data) {
        this.length = data.length;
        this.values = data.values;
    }
    clone(data) {
        return new this.constructor(data);
    }
    isValid() {
        return true;
    }
    toArray() {
        return [...this];
    }
    get(index) {
        return this.getList(this.values, index, this.valueOffsets);
    }
    set(index, value) {
        return this.setList(this.values, index, value, this.valueOffsets);
    }
    *[Symbol.iterator]() {
        const get = this.getList, length = this.length;
        const values = this.values, valueOffsets = this.valueOffsets;
        for (let index = -1; ++index < length;) {
            yield get(values, index, valueOffsets);
        }
    }
    indexOf(search) {
        let index = 0;
        for (let value of this) {
            if (value === search) {
                return index;
            }
            ++index;
        }
        return -1;
    }
}
exports.ListViewBase = ListViewBase;
class VariableListViewBase extends ListViewBase {
    constructor(data) {
        super(data);
        this.length = data.length;
        this.valueOffsets = data.valueOffsets;
    }
}
exports.VariableListViewBase = VariableListViewBase;
class ListView extends VariableListViewBase {
    constructor(data) {
        super(data);
        this.values = vector_1.createVector(data.values);
    }
    getChildAt(index) {
        return index === 0 ? this.values : null;
    }
    getList(values, index, valueOffsets) {
        return values.slice(valueOffsets[index], valueOffsets[index + 1]);
    }
    setList(values, index, value, valueOffsets) {
        let idx = -1;
        let offset = valueOffsets[index];
        let end = Math.min(value.length, valueOffsets[index + 1] - offset);
        while (offset < end) {
            values.set(offset++, value.get(++idx));
        }
    }
}
exports.ListView = ListView;
class FixedSizeListView extends ListViewBase {
    constructor(data) {
        super(data);
        this.size = data.type.listSize;
        this.values = vector_1.createVector(data.values);
    }
    getChildAt(index) {
        return index === 0 ? this.values : null;
    }
    getList(values, index) {
        const size = this.size;
        return values.slice(index *= size, index + size);
    }
    setList(values, index, value) {
        let size = this.size;
        for (let idx = -1, offset = index * size; ++idx < size;) {
            values.set(offset + idx, value.get(++idx));
        }
    }
}
exports.FixedSizeListView = FixedSizeListView;
class BinaryView extends VariableListViewBase {
    getList(values, index, valueOffsets) {
        return values.subarray(valueOffsets[index], valueOffsets[index + 1]);
    }
    setList(values, index, value, valueOffsets) {
        const offset = valueOffsets[index];
        values.set(value.subarray(0, valueOffsets[index + 1] - offset), offset);
    }
}
exports.BinaryView = BinaryView;
class Utf8View extends VariableListViewBase {
    getList(values, index, valueOffsets) {
        return exports.decodeUtf8(values.subarray(valueOffsets[index], valueOffsets[index + 1]));
    }
    setList(values, index, value, valueOffsets) {
        const offset = valueOffsets[index];
        values.set(exports.encodeUtf8(value).subarray(0, valueOffsets[index + 1] - offset), offset);
    }
}
exports.Utf8View = Utf8View;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFDUyxPQUFPLENBQUMsTUFBa0IsRUFBRSxLQUFhLEVBQUUsS0FBaUIsRUFBRSxZQUF3QjtRQUM1RixNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzVFLENBQUM7Q0FDSjtBQVJELGdDQVFDO0FBRUQsTUFBYSxRQUFTLFNBQVEsb0JBQTBCO0lBQzFDLE9BQU8sQ0FBQyxNQUFrQixFQUFFLEtBQWEsRUFBRSxZQUF3QjtRQUN6RSxPQUFPLGtCQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsWUFBWSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckYsQ0FBQztJQUNTLE9BQU8sQ0FBQyxNQUFrQixFQUFFLEtBQWEsRUFBRSxLQUFhLEVBQUUsWUFBd0I7UUFDeEYsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEYsQ0FBQztDQUNKO0FBUkQsNEJBUUMiLCJmaWxlIjoidmVjdG9yL2xpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgVmlldywgVmVjdG9yLCBjcmVhdGVWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgVGV4dEVuY29kZXIsIFRleHREZWNvZGVyIH0gZnJvbSAndGV4dC1lbmNvZGluZy11dGYtOCc7XG5pbXBvcnQgeyBMaXN0LCBCaW5hcnksIFV0ZjgsIEZpeGVkU2l6ZUxpc3QsIEZsYXRMaXN0VHlwZSB9IGZyb20gJy4uL3R5cGUnO1xuaW1wb3J0IHsgTGlzdFR5cGUsIFNpbmdsZU5lc3RlZFR5cGUsIERhdGFUeXBlLCBJdGVyYWJsZUFycmF5TGlrZSB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY29uc3QgZW5jb2RlVXRmOCA9ICgoZW5jb2RlcikgPT5cbiAgICBlbmNvZGVyLmVuY29kZS5iaW5kKGVuY29kZXIpIGFzIChpbnB1dD86IHN0cmluZykgPT4gVWludDhBcnJheVxuKShuZXcgVGV4dEVuY29kZXIoJ3V0Zi04JykpO1xuXG5leHBvcnQgY29uc3QgZGVjb2RlVXRmOCA9ICgoZGVjb2RlcikgPT5cbiAgICBkZWNvZGVyLmRlY29kZS5iaW5kKGRlY29kZXIpIGFzIChpbnB1dD86IEFycmF5QnVmZmVyTGlrZSB8IEFycmF5QnVmZmVyVmlldykgPT4gc3RyaW5nXG4pKG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKSk7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMaXN0Vmlld0Jhc2U8VCBleHRlbmRzIChGbGF0TGlzdFR5cGUgfCBTaW5nbGVOZXN0ZWRUeXBlKT4gaW1wbGVtZW50cyBWaWV3PFQ+IHtcbiAgICBwdWJsaWMgbGVuZ3RoOiBudW1iZXI7XG4gICAgcHVibGljIHZhbHVlczogVFsnVEFycmF5J107XG4gICAgcHVibGljIHZhbHVlT2Zmc2V0cz86IEludDMyQXJyYXk7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPikge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICB0aGlzLnZhbHVlcyA9IGRhdGEudmFsdWVzO1xuICAgIH1cbiAgICBwdWJsaWMgY2xvbmUoZGF0YTogRGF0YTxUPik6IHRoaXMge1xuICAgICAgICByZXR1cm4gbmV3ICg8YW55PiB0aGlzLmNvbnN0cnVjdG9yKShkYXRhKSBhcyB0aGlzO1xuICAgIH1cbiAgICBwdWJsaWMgaXNWYWxpZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHB1YmxpYyB0b0FycmF5KCk6IEl0ZXJhYmxlQXJyYXlMaWtlPFRbJ1RWYWx1ZSddPiB7XG4gICAgICAgIHJldHVybiBbLi4udGhpc107XG4gICAgfVxuICAgIHB1YmxpYyBnZXQoaW5kZXg6IG51bWJlcik6IFRbJ1RWYWx1ZSddIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGlzdCh0aGlzLnZhbHVlcywgaW5kZXgsIHRoaXMudmFsdWVPZmZzZXRzKTtcbiAgICB9XG4gICAgcHVibGljIHNldChpbmRleDogbnVtYmVyLCB2YWx1ZTogVFsnVFZhbHVlJ10pOiB2b2lkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGlzdCh0aGlzLnZhbHVlcywgaW5kZXgsIHZhbHVlLCB0aGlzLnZhbHVlT2Zmc2V0cyk7XG4gICAgfVxuICAgIHB1YmxpYyAqW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxUWydUVmFsdWUnXT4ge1xuICAgICAgICBjb25zdCBnZXQgPSB0aGlzLmdldExpc3QsIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnZhbHVlcywgdmFsdWVPZmZzZXRzID0gdGhpcy52YWx1ZU9mZnNldHM7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gLTE7ICsraW5kZXggPCBsZW5ndGg7KSB7XG4gICAgICAgICAgICB5aWVsZCBnZXQodmFsdWVzLCBpbmRleCwgdmFsdWVPZmZzZXRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgaW5kZXhPZihzZWFyY2g6IFRbJ1RWYWx1ZSddKSB7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGZvciAobGV0IHZhbHVlIG9mIHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gc2VhcmNoKSB7IHJldHVybiBpbmRleDsgfVxuICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldExpc3QodmFsdWVzOiBUWydUQXJyYXknXSwgaW5kZXg6IG51bWJlciwgdmFsdWVPZmZzZXRzPzogSW50MzJBcnJheSk6IFRbJ1RWYWx1ZSddO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBzZXRMaXN0KHZhbHVlczogVFsnVEFycmF5J10sIGluZGV4OiBudW1iZXIsIHZhbHVlOiBUWydUVmFsdWUnXSwgdmFsdWVPZmZzZXRzPzogSW50MzJBcnJheSk6IHZvaWQ7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWYXJpYWJsZUxpc3RWaWV3QmFzZTxUIGV4dGVuZHMgKExpc3RUeXBlIHwgRmxhdExpc3RUeXBlKT4gZXh0ZW5kcyBMaXN0Vmlld0Jhc2U8VD4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8VD4pIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIHRoaXMudmFsdWVPZmZzZXRzID0gZGF0YS52YWx1ZU9mZnNldHM7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTGlzdFZpZXc8VCBleHRlbmRzIERhdGFUeXBlPiBleHRlbmRzIFZhcmlhYmxlTGlzdFZpZXdCYXNlPExpc3Q8VD4+IHtcbiAgICBwdWJsaWMgdmFsdWVzOiBWZWN0b3I8VD47XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPikge1xuICAgICAgICBzdXBlcihkYXRhIGFzIGFueSk7XG4gICAgICAgIHRoaXMudmFsdWVzID0gY3JlYXRlVmVjdG9yKChkYXRhIGFzIGFueSkudmFsdWVzKTtcbiAgICB9XG4gICAgcHVibGljIGdldENoaWxkQXQ8UiBleHRlbmRzIFQgPSBUPihpbmRleDogbnVtYmVyKTogVmVjdG9yPFI+IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/ICh0aGlzLnZhbHVlcyBhcyBWZWN0b3I8Uj4pIDogbnVsbDtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldExpc3QodmFsdWVzOiBWZWN0b3I8VD4sIGluZGV4OiBudW1iZXIsIHZhbHVlT2Zmc2V0czogSW50MzJBcnJheSkge1xuICAgICAgICByZXR1cm4gdmFsdWVzLnNsaWNlKHZhbHVlT2Zmc2V0c1tpbmRleF0sIHZhbHVlT2Zmc2V0c1tpbmRleCArIDFdKSBhcyBWZWN0b3I8VD47XG4gICAgfVxuICAgIHByb3RlY3RlZCBzZXRMaXN0KHZhbHVlczogVmVjdG9yPFQ+LCBpbmRleDogbnVtYmVyLCB2YWx1ZTogVmVjdG9yPFQ+LCB2YWx1ZU9mZnNldHM6IEludDMyQXJyYXkpOiB2b2lkIHtcbiAgICAgICAgbGV0IGlkeCA9IC0xO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gdmFsdWVPZmZzZXRzW2luZGV4XTtcbiAgICAgICAgbGV0IGVuZCA9IE1hdGgubWluKHZhbHVlLmxlbmd0aCwgdmFsdWVPZmZzZXRzW2luZGV4ICsgMV0gLSBvZmZzZXQpO1xuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgZW5kKSB7XG4gICAgICAgICAgICB2YWx1ZXMuc2V0KG9mZnNldCsrLCB2YWx1ZS5nZXQoKytpZHgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZpeGVkU2l6ZUxpc3RWaWV3PFQgZXh0ZW5kcyBEYXRhVHlwZT4gZXh0ZW5kcyBMaXN0Vmlld0Jhc2U8Rml4ZWRTaXplTGlzdDxUPj4ge1xuICAgIHB1YmxpYyBzaXplOiBudW1iZXI7XG4gICAgcHVibGljIHZhbHVlczogVmVjdG9yPFQ+O1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8Rml4ZWRTaXplTGlzdDxUPj4pIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IGRhdGEudHlwZS5saXN0U2l6ZTtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBjcmVhdGVWZWN0b3IoZGF0YS52YWx1ZXMpO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0Q2hpbGRBdDxSIGV4dGVuZHMgVCA9IFQ+KGluZGV4OiBudW1iZXIpOiBWZWN0b3I8Uj4gfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIGluZGV4ID09PSAwID8gKHRoaXMudmFsdWVzIGFzIFZlY3RvcjxSPikgOiBudWxsO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZ2V0TGlzdCh2YWx1ZXM6IFZlY3RvcjxUPiwgaW5kZXg6IG51bWJlcikge1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5zaXplO1xuICAgICAgICByZXR1cm4gdmFsdWVzLnNsaWNlKGluZGV4ICo9IHNpemUsIGluZGV4ICsgc2l6ZSkgYXMgVmVjdG9yPFQ+O1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgc2V0TGlzdCh2YWx1ZXM6IFZlY3RvcjxUPiwgaW5kZXg6IG51bWJlciwgdmFsdWU6IFZlY3RvcjxUPik6IHZvaWQge1xuICAgICAgICBsZXQgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gLTEsIG9mZnNldCA9IGluZGV4ICogc2l6ZTsgKytpZHggPCBzaXplOykge1xuICAgICAgICAgICAgdmFsdWVzLnNldChvZmZzZXQgKyBpZHgsIHZhbHVlLmdldCgrK2lkeCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmluYXJ5VmlldyBleHRlbmRzIFZhcmlhYmxlTGlzdFZpZXdCYXNlPEJpbmFyeT4ge1xuICAgIHByb3RlY3RlZCBnZXRMaXN0KHZhbHVlczogVWludDhBcnJheSwgaW5kZXg6IG51bWJlciwgdmFsdWVPZmZzZXRzOiBJbnQzMkFycmF5KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXMuc3ViYXJyYXkodmFsdWVPZmZzZXRzW2luZGV4XSwgdmFsdWVPZmZzZXRzW2luZGV4ICsgMV0pO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgc2V0TGlzdCh2YWx1ZXM6IFVpbnQ4QXJyYXksIGluZGV4OiBudW1iZXIsIHZhbHVlOiBVaW50OEFycmF5LCB2YWx1ZU9mZnNldHM6IEludDMyQXJyYXkpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdmFsdWVPZmZzZXRzW2luZGV4XTtcbiAgICAgICAgdmFsdWVzLnNldCh2YWx1ZS5zdWJhcnJheSgwLCB2YWx1ZU9mZnNldHNbaW5kZXggKyAxXSAtIG9mZnNldCksIG9mZnNldCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXRmOFZpZXcgZXh0ZW5kcyBWYXJpYWJsZUxpc3RWaWV3QmFzZTxVdGY4PiB7XG4gICAgcHJvdGVjdGVkIGdldExpc3QodmFsdWVzOiBVaW50OEFycmF5LCBpbmRleDogbnVtYmVyLCB2YWx1ZU9mZnNldHM6IEludDMyQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVV0ZjgodmFsdWVzLnN1YmFycmF5KHZhbHVlT2Zmc2V0c1tpbmRleF0sIHZhbHVlT2Zmc2V0c1tpbmRleCArIDFdKSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBzZXRMaXN0KHZhbHVlczogVWludDhBcnJheSwgaW5kZXg6IG51bWJlciwgdmFsdWU6IHN0cmluZywgdmFsdWVPZmZzZXRzOiBJbnQzMkFycmF5KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHZhbHVlT2Zmc2V0c1tpbmRleF07XG4gICAgICAgIHZhbHVlcy5zZXQoZW5jb2RlVXRmOCh2YWx1ZSkuc3ViYXJyYXkoMCwgdmFsdWVPZmZzZXRzW2luZGV4ICsgMV0gLSBvZmZzZXQpLCBvZmZzZXQpO1xuICAgIH1cbn1cbiJdfQ==
