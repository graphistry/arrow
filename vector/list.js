"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const vector_1 = require("../vector");
const text_encoding_utf_8_1 = require("text-encoding-utf-8");
exports.encodeUtf8 = ((encoder) => encoder.encode.bind(encoder))(new text_encoding_utf_8_1.TextEncoder('utf-8'));
exports.decodeUtf8 = ((decoder) => decoder.decode.bind(decoder))(new text_encoding_utf_8_1.TextDecoder('utf-8'));
class ListViewBase {
    constructor(data) {
        this.length = data.length;
        this.values = data.values;
    }
    clone(data) {
        return new this.constructor(data);
    }
    isValid() {
        return true;
    }
    toArray() {
        return [...this];
    }
    get(index) {
        return this.getList(this.values, index, this.valueOffsets);
    }
    set(index, value) {
        return this.setList(this.values, index, value, this.valueOffsets);
    }
    *[Symbol.iterator]() {
        const get = this.getList, length = this.length;
        const values = this.values, valueOffsets = this.valueOffsets;
        for (let index = -1; ++index < length;) {
            yield get(values, index, valueOffsets);
        }
    }
}
exports.ListViewBase = ListViewBase;
class VariableListViewBase extends ListViewBase {
    constructor(data) {
        super(data);
        this.length = data.length;
        this.valueOffsets = data.valueOffsets;
    }
}
exports.VariableListViewBase = VariableListViewBase;
class ListView extends VariableListViewBase {
    constructor(data) {
        super(data);
        this.values = vector_1.createVector(data.values);
    }
    getList(values, index, valueOffsets) {
        return values.slice(valueOffsets[index], valueOffsets[index + 1]);
    }
    setList(values, index, value, valueOffsets) {
        let idx = -1;
        let offset = valueOffsets[index];
        let end = Math.min(value.length, valueOffsets[index + 1] - offset);
        while (offset < end) {
            values.set(offset++, value.get(++idx));
        }
    }
}
exports.ListView = ListView;
class FixedSizeListView extends ListViewBase {
    constructor(data) {
        super(data);
        this.size = data.type.listSize;
        this.values = vector_1.createVector(data.values);
    }
    getList(values, index) {
        const size = this.size;
        return values.slice(index *= size, index + size);
    }
    setList(values, index, value) {
        let size = this.size;
        for (let idx = -1, offset = index * size; ++idx < size;) {
            values.set(offset + idx, value.get(++idx));
        }
    }
}
exports.FixedSizeListView = FixedSizeListView;
class BinaryView extends VariableListViewBase {
    getList(values, index, valueOffsets) {
        return values.subarray(valueOffsets[index], valueOffsets[index + 1]);
    }
    setList(values, index, value, valueOffsets) {
        const offset = valueOffsets[index];
        values.set(value.subarray(0, valueOffsets[index + 1] - offset), offset);
    }
}
exports.BinaryView = BinaryView;
class Utf8View extends VariableListViewBase {
    getList(values, index, valueOffsets) {
        return exports.decodeUtf8(values.subarray(valueOffsets[index], valueOffsets[index + 1]));
    }
    setList(values, index, value, valueOffsets) {
        const offset = valueOffsets[index];
        values.set(exports.encodeUtf8(value).subarray(0, valueOffsets[index + 1] - offset), offset);
    }
}
exports.Utf8View = Utf8View;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
