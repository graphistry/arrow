// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Vector } from '../vector';
export class ChunkedView {
    constructor(data) {
        this.chunkVectors = data.chunkVectors;
        this.chunkOffsets = data.chunkOffsets;
    }
    clone(data) {
        return new ChunkedView(data);
    }
    *[Symbol.iterator]() {
        for (const vector of this.chunkVectors) {
            yield* vector;
        }
    }
    getChildAt(index) {
        return index < 0 ? null
            : (this._children || (this._children = []))[index] ||
                (this._children[index] = Vector.concat(...this.chunkVectors
                    .map((chunk) => chunk.getChildAt(index))));
    }
    isValid(index) {
        // binary search to find the child vector and value index offset (inlined for speed)
        let offsets = this.chunkOffsets, pos = 0;
        let lhs = 0, mid = 0, rhs = offsets.length - 1;
        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {
            if (lhs + 1 === rhs) {
                return this.chunkVectors[lhs].isValid(index - pos);
            }
            mid = lhs + ((rhs - lhs) / 2) | 0;
            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);
        }
        return false;
    }
    get(index) {
        // binary search to find the child vector and value index offset (inlined for speed)
        let offsets = this.chunkOffsets, pos = 0;
        let lhs = 0, mid = 0, rhs = offsets.length - 1;
        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {
            if (lhs + 1 === rhs) {
                return this.chunkVectors[lhs].get(index - pos);
            }
            mid = lhs + ((rhs - lhs) / 2) | 0;
            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);
        }
        return null;
    }
    set(index, value) {
        // binary search to find the child vector and value index offset (inlined for speed)
        let offsets = this.chunkOffsets, pos = 0;
        let lhs = 0, mid = 0, rhs = offsets.length - 1;
        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {
            if (lhs + 1 === rhs) {
                return this.chunkVectors[lhs].set(index - pos, value);
            }
            mid = lhs + ((rhs - lhs) / 2) | 0;
            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);
        }
    }
    toArray() {
        const chunks = this.chunkVectors;
        const numChunks = chunks.length;
        if (numChunks === 1) {
            return chunks[0].toArray();
        }
        let sources = new Array(numChunks);
        let sourcesLen = 0, ArrayType = Array;
        for (let index = -1; ++index < numChunks;) {
            let source = chunks[index].toArray();
            sourcesLen += (sources[index] = source).length;
            if (ArrayType !== source.constructor) {
                ArrayType = source.constructor;
            }
        }
        let target = new ArrayType(sourcesLen);
        let setValues = ArrayType === Array ? arraySet : typedArraySet;
        for (let index = -1, offset = 0; ++index < numChunks;) {
            offset = setValues(sources[index], target, offset);
        }
        return target;
    }
    indexOf(search) {
        let offset = 0, result;
        for (const vector of this.chunkVectors) {
            result = vector.indexOf(search);
            if (result !== -1) {
                return result + offset;
            }
            offset += vector.length;
        }
        return -1;
    }
}
function typedArraySet(source, target, index) {
    return target.set(source, index) || index + source.length;
}
function arraySet(source, target, index) {
    let dstIdx = index - 1, srcIdx = -1, srcLen = source.length;
    while (++srcIdx < srcLen) {
        target[++dstIdx] = source[srcIdx];
    }
    return dstIdx;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUMsRUFBRSxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDckM7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwiZmlsZSI6InZlY3Rvci9jaHVua2VkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IENodW5rZWREYXRhLCBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWaWV3LCBWZWN0b3IsIE5lc3RlZFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBEYXRhVHlwZSwgVHlwZWRBcnJheSwgSXRlcmFibGVBcnJheUxpa2UgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIENodW5rZWRWaWV3PFQgZXh0ZW5kcyBEYXRhVHlwZT4gaW1wbGVtZW50cyBWaWV3PFQ+IHtcbiAgICBwdWJsaWMgY2h1bmtWZWN0b3JzOiBWZWN0b3I8VD5bXTtcbiAgICBwdWJsaWMgY2h1bmtPZmZzZXRzOiBVaW50MzJBcnJheTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHJvdGVjdGVkIF9jaGlsZHJlbjogVmVjdG9yPGFueT5bXTtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBDaHVua2VkRGF0YTxUPikge1xuICAgICAgICB0aGlzLmNodW5rVmVjdG9ycyA9IGRhdGEuY2h1bmtWZWN0b3JzO1xuICAgICAgICB0aGlzLmNodW5rT2Zmc2V0cyA9IGRhdGEuY2h1bmtPZmZzZXRzO1xuICAgIH1cbiAgICBwdWJsaWMgY2xvbmUoZGF0YTogQ2h1bmtlZERhdGE8VD4gJiBEYXRhPFQ+KTogdGhpcyB7XG4gICAgICAgIHJldHVybiBuZXcgQ2h1bmtlZFZpZXcoZGF0YSkgYXMgdGhpcztcbiAgICB9XG4gICAgcHVibGljICpbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFRbJ1RWYWx1ZSddIHwgbnVsbD4ge1xuICAgICAgICBmb3IgKGNvbnN0IHZlY3RvciBvZiB0aGlzLmNodW5rVmVjdG9ycykge1xuICAgICAgICAgICAgeWllbGQqIHZlY3RvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgZ2V0Q2hpbGRBdDxSIGV4dGVuZHMgRGF0YVR5cGUgPSBEYXRhVHlwZT4oaW5kZXg6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gaW5kZXggPCAwID8gbnVsbFxuICAgICAgICAgICAgOiAodGhpcy5fY2hpbGRyZW4gfHwgKHRoaXMuX2NoaWxkcmVuID0gW10pKVtpbmRleF0gfHxcbiAgICAgICAgICAgICAgKHRoaXMuX2NoaWxkcmVuW2luZGV4XSA9IFZlY3Rvci5jb25jYXQ8Uj4oXG4gICAgICAgICAgICAgICAgICAuLi4oPGFueT4gdGhpcy5jaHVua1ZlY3RvcnMgYXMgTmVzdGVkVmVjdG9yPGFueT5bXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChjaHVuaykgPT4gY2h1bmsuZ2V0Q2hpbGRBdDxSPihpbmRleCkpKSk7XG4gICAgfVxuICAgIHB1YmxpYyBpc1ZhbGlkKGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgLy8gYmluYXJ5IHNlYXJjaCB0byBmaW5kIHRoZSBjaGlsZCB2ZWN0b3IgYW5kIHZhbHVlIGluZGV4IG9mZnNldCAoaW5saW5lZCBmb3Igc3BlZWQpXG4gICAgICAgIGxldCBvZmZzZXRzID0gdGhpcy5jaHVua09mZnNldHMsIHBvcyA9IDA7XG4gICAgICAgIGxldCBsaHMgPSAwLCBtaWQgPSAwLCByaHMgPSBvZmZzZXRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IG9mZnNldHNbcmhzXSAmJiBpbmRleCA+PSAocG9zID0gb2Zmc2V0c1tsaHNdKSkge1xuICAgICAgICAgICAgaWYgKGxocyArIDEgPT09IHJocykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNodW5rVmVjdG9yc1tsaHNdLmlzVmFsaWQoaW5kZXggLSBwb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWlkID0gbGhzICsgKChyaHMgLSBsaHMpIC8gMikgfCAwO1xuICAgICAgICAgICAgaW5kZXggPj0gb2Zmc2V0c1ttaWRdID8gKGxocyA9IG1pZCkgOiAocmhzID0gbWlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQoaW5kZXg6IG51bWJlcik6IFRbJ1RWYWx1ZSddIHwgbnVsbCB7XG4gICAgICAgIC8vIGJpbmFyeSBzZWFyY2ggdG8gZmluZCB0aGUgY2hpbGQgdmVjdG9yIGFuZCB2YWx1ZSBpbmRleCBvZmZzZXQgKGlubGluZWQgZm9yIHNwZWVkKVxuICAgICAgICBsZXQgb2Zmc2V0cyA9IHRoaXMuY2h1bmtPZmZzZXRzLCBwb3MgPSAwO1xuICAgICAgICBsZXQgbGhzID0gMCwgbWlkID0gMCwgcmhzID0gb2Zmc2V0cy5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBvZmZzZXRzW3Joc10gJiYgaW5kZXggPj0gKHBvcyA9IG9mZnNldHNbbGhzXSkpIHtcbiAgICAgICAgICAgIGlmIChsaHMgKyAxID09PSByaHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaHVua1ZlY3RvcnNbbGhzXS5nZXQoaW5kZXggLSBwb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWlkID0gbGhzICsgKChyaHMgLSBsaHMpIC8gMikgfCAwO1xuICAgICAgICAgICAgaW5kZXggPj0gb2Zmc2V0c1ttaWRdID8gKGxocyA9IG1pZCkgOiAocmhzID0gbWlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcHVibGljIHNldChpbmRleDogbnVtYmVyLCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsKTogdm9pZCB7XG4gICAgICAgIC8vIGJpbmFyeSBzZWFyY2ggdG8gZmluZCB0aGUgY2hpbGQgdmVjdG9yIGFuZCB2YWx1ZSBpbmRleCBvZmZzZXQgKGlubGluZWQgZm9yIHNwZWVkKVxuICAgICAgICBsZXQgb2Zmc2V0cyA9IHRoaXMuY2h1bmtPZmZzZXRzLCBwb3MgPSAwO1xuICAgICAgICBsZXQgbGhzID0gMCwgbWlkID0gMCwgcmhzID0gb2Zmc2V0cy5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBvZmZzZXRzW3Joc10gJiYgaW5kZXggPj0gKHBvcyA9IG9mZnNldHNbbGhzXSkpIHtcbiAgICAgICAgICAgIGlmIChsaHMgKyAxID09PSByaHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaHVua1ZlY3RvcnNbbGhzXS5zZXQoaW5kZXggLSBwb3MsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1pZCA9IGxocyArICgocmhzIC0gbGhzKSAvIDIpIHwgMDtcbiAgICAgICAgICAgIGluZGV4ID49IG9mZnNldHNbbWlkXSA/IChsaHMgPSBtaWQpIDogKHJocyA9IG1pZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIHRvQXJyYXkoKTogSXRlcmFibGVBcnJheUxpa2U8VFsnVFZhbHVlJ10gfCBudWxsPiB7XG4gICAgICAgIGNvbnN0IGNodW5rcyA9IHRoaXMuY2h1bmtWZWN0b3JzO1xuICAgICAgICBjb25zdCBudW1DaHVua3MgPSBjaHVua3MubGVuZ3RoO1xuICAgICAgICBpZiAobnVtQ2h1bmtzID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gY2h1bmtzWzBdLnRvQXJyYXkoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc291cmNlcyA9IG5ldyBBcnJheTxhbnk+KG51bUNodW5rcyk7XG4gICAgICAgIGxldCBzb3VyY2VzTGVuID0gMCwgQXJyYXlUeXBlOiBhbnkgPSBBcnJheTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAtMTsgKytpbmRleCA8IG51bUNodW5rczspIHtcbiAgICAgICAgICAgIGxldCBzb3VyY2UgPSBjaHVua3NbaW5kZXhdLnRvQXJyYXkoKTtcbiAgICAgICAgICAgIHNvdXJjZXNMZW4gKz0gKHNvdXJjZXNbaW5kZXhdID0gc291cmNlKS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoQXJyYXlUeXBlICE9PSBzb3VyY2UuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICBBcnJheVR5cGUgPSBzb3VyY2UuY29uc3RydWN0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRhcmdldCA9IG5ldyBBcnJheVR5cGUoc291cmNlc0xlbik7XG4gICAgICAgIGxldCBzZXRWYWx1ZXMgPSBBcnJheVR5cGUgPT09IEFycmF5ID8gYXJyYXlTZXQgOiB0eXBlZEFycmF5U2V0IGFzIGFueTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAtMSwgb2Zmc2V0ID0gMDsgKytpbmRleCA8IG51bUNodW5rczspIHtcbiAgICAgICAgICAgIG9mZnNldCA9IHNldFZhbHVlcyhzb3VyY2VzW2luZGV4XSwgdGFyZ2V0LCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIHB1YmxpYyBpbmRleE9mKHNlYXJjaDogVFsnVFZhbHVlJ10pIHtcbiAgICAgICAgbGV0IG9mZnNldCA9IDAsIHJlc3VsdDtcbiAgICAgICAgZm9yIChjb25zdCB2ZWN0b3Igb2YgdGhpcy5jaHVua1ZlY3RvcnMpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHZlY3Rvci5pbmRleE9mKHNlYXJjaCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSAtMSkgeyByZXR1cm4gcmVzdWx0ICsgb2Zmc2V0OyB9XG4gICAgICAgICAgICBvZmZzZXQgKz0gdmVjdG9yLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTZXQoc291cmNlOiBUeXBlZEFycmF5LCB0YXJnZXQ6IFR5cGVkQXJyYXksIGluZGV4OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGFyZ2V0LnNldChzb3VyY2UsIGluZGV4KSB8fCBpbmRleCArIHNvdXJjZS5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIGFycmF5U2V0KHNvdXJjZTogYW55W10sIHRhcmdldDogYW55W10sIGluZGV4OiBudW1iZXIpIHtcbiAgICBsZXQgZHN0SWR4ID0gaW5kZXggLSAxLCBzcmNJZHggPSAtMSwgc3JjTGVuID0gc291cmNlLmxlbmd0aDtcbiAgICB3aGlsZSAoKytzcmNJZHggPCBzcmNMZW4pIHtcbiAgICAgICAgdGFyZ2V0WysrZHN0SWR4XSA9IHNvdXJjZVtzcmNJZHhdO1xuICAgIH1cbiAgICByZXR1cm4gZHN0SWR4O1xufVxuIl19
