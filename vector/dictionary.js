"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const data_1 = require("../data");
const vector_1 = require("../vector");
const base_1 = require("./base");
const type_1 = require("../type");
class DictionaryVector extends base_1.BaseVector {
    constructor(data) {
        super(data);
        this.indices = vector_1.Vector.new(data.clone(this.type.indices));
    }
    /** @nocollapse */
    static from(values, indices, keys) {
        const type = new type_1.Dictionary(values.type, indices, null, null, values);
        return vector_1.Vector.new(data_1.Data.Dictionary(type, 0, keys.length, 0, null, keys));
    }
    get dictionary() { return this.data.type.dictionaryVector; }
    reverseLookup(value) { return this.dictionary.indexOf(value); }
    getKey(idx) { return this.indices.get(idx); }
    getValue(key) { return this.dictionary.get(key); }
    setKey(idx, key) { return this.indices.set(idx, key); }
    setValue(key, value) { return this.dictionary.set(key, value); }
}
exports.DictionaryVector = DictionaryVector;
DictionaryVector.prototype.indices = null;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kaWN0aW9uYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7O0FBRXJCLGtDQUErQjtBQUMvQixzQ0FBbUM7QUFDbkMsaUNBQW9DO0FBRXBDLGtDQUFzRDtBQUV0RCxNQUFhLGdCQUF1RSxTQUFRLGlCQUErQjtJQVV2SCxZQUFZLElBQStCO1FBQ3ZDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxPQUFPLEdBQUcsZUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBWkQsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLElBQUksQ0FDZCxNQUFpQixFQUFFLE9BQWEsRUFDaEMsSUFBd0M7UUFFeEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxpQkFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEUsT0FBTyxlQUFNLENBQUMsR0FBRyxDQUFDLFdBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBTUQsSUFBVyxVQUFVLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDNUQsYUFBYSxDQUFDLEtBQVEsSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRSxNQUFNLENBQUMsR0FBVyxJQUEyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RSxRQUFRLENBQUMsR0FBVyxJQUF3QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RSxNQUFNLENBQUMsR0FBVyxFQUFFLEdBQTBCLElBQUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RGLFFBQVEsQ0FBQyxHQUFXLEVBQUUsS0FBeUIsSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDdEc7QUFwQkQsNENBb0JDO0FBRUEsZ0JBQWdCLENBQUMsU0FBaUIsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDIiwiZmlsZSI6InZlY3Rvci9kaWN0aW9uYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFZlY3RvciBhcyBWIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgRGljdGlvbmFyeSwgVEtleXMgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIERpY3Rpb25hcnlWZWN0b3I8VCBleHRlbmRzIERhdGFUeXBlID0gYW55LCBUS2V5IGV4dGVuZHMgVEtleXMgPSBUS2V5cz4gZXh0ZW5kcyBCYXNlVmVjdG9yPERpY3Rpb25hcnk8VCwgVEtleT4+IHtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIERhdGFUeXBlPGFueT4sIFRLZXkgZXh0ZW5kcyBUS2V5cyA9IFRLZXlzPihcbiAgICAgICAgdmFsdWVzOiBWZWN0b3I8VD4sIGluZGljZXM6IFRLZXksXG4gICAgICAgIGtleXM6IEFycmF5TGlrZTxudW1iZXI+IHwgVEtleVsnVEFycmF5J11cbiAgICApIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IG5ldyBEaWN0aW9uYXJ5KHZhbHVlcy50eXBlLCBpbmRpY2VzLCBudWxsLCBudWxsLCB2YWx1ZXMpO1xuICAgICAgICByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkRpY3Rpb25hcnkodHlwZSwgMCwga2V5cy5sZW5ndGgsIDAsIG51bGwsIGtleXMpKTtcbiAgICB9XG4gICAgcHVibGljIHJlYWRvbmx5IGluZGljZXM6IFY8VEtleT47XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxEaWN0aW9uYXJ5PFQsIFRLZXk+Pikge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgdGhpcy5pbmRpY2VzID0gVmVjdG9yLm5ldyhkYXRhLmNsb25lKHRoaXMudHlwZS5pbmRpY2VzKSk7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgZGljdGlvbmFyeSgpIHsgcmV0dXJuIHRoaXMuZGF0YS50eXBlLmRpY3Rpb25hcnlWZWN0b3I7IH1cbiAgICBwdWJsaWMgcmV2ZXJzZUxvb2t1cCh2YWx1ZTogVCkgeyByZXR1cm4gdGhpcy5kaWN0aW9uYXJ5LmluZGV4T2YodmFsdWUpOyB9XG4gICAgcHVibGljIGdldEtleShpZHg6IG51bWJlcik6IFRLZXlbJ1RWYWx1ZSddIHwgbnVsbCB7IHJldHVybiB0aGlzLmluZGljZXMuZ2V0KGlkeCk7IH1cbiAgICBwdWJsaWMgZ2V0VmFsdWUoa2V5OiBudW1iZXIpOiBUWydUVmFsdWUnXSB8IG51bGwgeyByZXR1cm4gdGhpcy5kaWN0aW9uYXJ5LmdldChrZXkpOyB9XG4gICAgcHVibGljIHNldEtleShpZHg6IG51bWJlciwga2V5OiBUS2V5WydUVmFsdWUnXSB8IG51bGwpIHsgcmV0dXJuIHRoaXMuaW5kaWNlcy5zZXQoaWR4LCBrZXkpOyB9XG4gICAgcHVibGljIHNldFZhbHVlKGtleTogbnVtYmVyLCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsKSB7IHJldHVybiB0aGlzLmRpY3Rpb25hcnkuc2V0KGtleSwgdmFsdWUpOyB9XG59XG5cbihEaWN0aW9uYXJ5VmVjdG9yLnByb3RvdHlwZSBhcyBhbnkpLmluZGljZXMgPSBudWxsO1xuIl19
