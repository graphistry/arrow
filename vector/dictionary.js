"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const data_1 = require("../data");
const vector_1 = require("../vector");
const base_1 = require("./base");
const type_1 = require("../type");
class DictionaryVector extends base_1.BaseVector {
    constructor(data) {
        super(data, void 0, 1);
        this._indices = vector_1.Vector.new(data.clone(this.type.indices));
    }
    /** @nocollapse */
    static from(values, indices, keys) {
        const type = new type_1.Dictionary(values.type, indices, null, null, values);
        return vector_1.Vector.new(data_1.Data.Dictionary(type, 0, keys.length, 0, null, keys));
    }
    _bindDataAccessors() { }
    get indices() { return this._indices; }
    get dictionary() { return this.type.dictionaryVector; }
    getKey(index) { return this.indices.get(index); }
    getValue(key) { return this.dictionary.get(key); }
    isValid(index) { return this.indices.isValid(index); }
    reverseLookup(value) { return this.dictionary.indexOf(value); }
}
exports.DictionaryVector = DictionaryVector;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kaWN0aW9uYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7O0FBRXJCLGtDQUErQjtBQUMvQixzQ0FBbUM7QUFDbkMsaUNBQW9DO0FBRXBDLGtDQUFzRDtBQUV0RCxNQUFhLGdCQUF1RSxTQUFRLGlCQUErQjtJQVV2SCxZQUFZLElBQStCO1FBQ3ZDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFaRCxrQkFBa0I7SUFDWCxNQUFNLENBQUMsSUFBSSxDQUNkLE1BQWlCLEVBQUUsT0FBYSxFQUNoQyxJQUF3QztRQUV4QyxNQUFNLElBQUksR0FBRyxJQUFJLGlCQUFVLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0RSxPQUFPLGVBQU0sQ0FBQyxHQUFHLENBQUMsV0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFNUyxrQkFBa0IsS0FBSSxDQUFDO0lBQ2pDLElBQVcsT0FBTyxLQUFLLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDOUMsSUFBVyxVQUFVLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLENBQUMsS0FBYSxJQUEyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRixRQUFRLENBQUMsR0FBVyxJQUF3QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RSxPQUFPLENBQUMsS0FBYSxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlELGFBQWEsQ0FBQyxLQUFRLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDNUU7QUFyQkQsNENBcUJDIiwiZmlsZSI6InZlY3Rvci9kaWN0aW9uYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFZlY3RvciBhcyBWIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgRGljdGlvbmFyeSwgVEtleXMgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIERpY3Rpb25hcnlWZWN0b3I8VCBleHRlbmRzIERhdGFUeXBlID0gYW55LCBUS2V5IGV4dGVuZHMgVEtleXMgPSBUS2V5cz4gZXh0ZW5kcyBCYXNlVmVjdG9yPERpY3Rpb25hcnk8VCwgVEtleT4+IHtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIERhdGFUeXBlPGFueT4sIFRLZXkgZXh0ZW5kcyBUS2V5cyA9IFRLZXlzPihcbiAgICAgICAgdmFsdWVzOiBWZWN0b3I8VD4sIGluZGljZXM6IFRLZXksXG4gICAgICAgIGtleXM6IEFycmF5TGlrZTxudW1iZXI+IHwgVEtleVsnVEFycmF5J11cbiAgICApIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IG5ldyBEaWN0aW9uYXJ5KHZhbHVlcy50eXBlLCBpbmRpY2VzLCBudWxsLCBudWxsLCB2YWx1ZXMpO1xuICAgICAgICByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkRpY3Rpb25hcnkodHlwZSwgMCwga2V5cy5sZW5ndGgsIDAsIG51bGwsIGtleXMpKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIF9pbmRpY2VzOiBWPFRLZXk+O1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8RGljdGlvbmFyeTxULCBUS2V5Pj4pIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdm9pZCAwLCAxKTtcbiAgICAgICAgdGhpcy5faW5kaWNlcyA9IFZlY3Rvci5uZXcoZGF0YS5jbG9uZSh0aGlzLnR5cGUuaW5kaWNlcykpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgX2JpbmREYXRhQWNjZXNzb3JzKCkge31cbiAgICBwdWJsaWMgZ2V0IGluZGljZXMoKSB7IHJldHVybiB0aGlzLl9pbmRpY2VzOyB9XG4gICAgcHVibGljIGdldCBkaWN0aW9uYXJ5KCkgeyByZXR1cm4gdGhpcy50eXBlLmRpY3Rpb25hcnlWZWN0b3I7IH1cbiAgICBwdWJsaWMgZ2V0S2V5KGluZGV4OiBudW1iZXIpOiBUS2V5WydUVmFsdWUnXSB8IG51bGwgeyByZXR1cm4gdGhpcy5pbmRpY2VzLmdldChpbmRleCk7IH1cbiAgICBwdWJsaWMgZ2V0VmFsdWUoa2V5OiBudW1iZXIpOiBUWydUVmFsdWUnXSB8IG51bGwgeyByZXR1cm4gdGhpcy5kaWN0aW9uYXJ5LmdldChrZXkpOyB9XG4gICAgcHVibGljIGlzVmFsaWQoaW5kZXg6IG51bWJlcikgeyByZXR1cm4gdGhpcy5pbmRpY2VzLmlzVmFsaWQoaW5kZXgpOyB9XG4gICAgcHVibGljIHJldmVyc2VMb29rdXAodmFsdWU6IFQpIHsgcmV0dXJuIHRoaXMuZGljdGlvbmFyeS5pbmRleE9mKHZhbHVlKTsgfVxufVxuIl19
