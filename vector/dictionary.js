"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const data_1 = require("../data");
const vector_1 = require("../vector");
const base_1 = require("./base");
const type_1 = require("../type");
class DictionaryVector extends base_1.BaseVector {
    constructor(data) {
        super(data, void 0, 1);
        this._indices = vector_1.Vector.new(data.clone(this.type.indices));
    }
    /** @nocollapse */
    static from(values, indices, keys) {
        const type = new type_1.Dictionary(values.type, indices, null, null, values);
        return vector_1.Vector.new(data_1.Data.Dictionary(type, 0, keys.length, 0, null, keys));
    }
    // protected _bindDataAccessors() {}
    get indices() { return this._indices; }
    get dictionary() { return this._data.type.dictionaryVector; }
    isValid(index) { return this._indices.isValid(index); }
    reverseLookup(value) { return this.dictionary.indexOf(value); }
    getKey(idx) { return this._indices.get(idx); }
    getValue(key) { return this.dictionary.get(key); }
    setKey(idx, key) { return this._indices.set(idx, key); }
    setValue(key, value) { return this.dictionary.set(key, value); }
}
exports.DictionaryVector = DictionaryVector;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kaWN0aW9uYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7O0FBRXJCLGtDQUErQjtBQUMvQixzQ0FBbUM7QUFDbkMsaUNBQW9DO0FBRXBDLGtDQUFzRDtBQUV0RCxNQUFhLGdCQUF1RSxTQUFRLGlCQUErQjtJQVV2SCxZQUFZLElBQStCO1FBQ3ZDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFaRCxrQkFBa0I7SUFDWCxNQUFNLENBQUMsSUFBSSxDQUNkLE1BQWlCLEVBQUUsT0FBYSxFQUNoQyxJQUF3QztRQUV4QyxNQUFNLElBQUksR0FBRyxJQUFJLGlCQUFVLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0RSxPQUFPLGVBQU0sQ0FBQyxHQUFHLENBQUMsV0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFNRCxvQ0FBb0M7SUFDcEMsSUFBVyxPQUFPLEtBQUssT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM5QyxJQUFXLFVBQVUsS0FBSyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUM3RCxPQUFPLENBQUMsS0FBYSxJQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELGFBQWEsQ0FBQyxLQUFRLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEUsTUFBTSxDQUFDLEdBQVcsSUFBMkIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0UsUUFBUSxDQUFDLEdBQVcsSUFBd0IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUUsTUFBTSxDQUFDLEdBQVcsRUFBRSxHQUEwQixJQUFJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RixRQUFRLENBQUMsR0FBVyxFQUFFLEtBQXlCLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3RHO0FBdkJELDRDQXVCQyIsImZpbGUiOiJ2ZWN0b3IvZGljdGlvbmFyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBWZWN0b3IgYXMgViB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgRGF0YVR5cGUsIERpY3Rpb25hcnksIFRLZXlzIH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBEaWN0aW9uYXJ5VmVjdG9yPFQgZXh0ZW5kcyBEYXRhVHlwZSA9IGFueSwgVEtleSBleHRlbmRzIFRLZXlzID0gVEtleXM+IGV4dGVuZHMgQmFzZVZlY3RvcjxEaWN0aW9uYXJ5PFQsIFRLZXk+PiB7XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tPFQgZXh0ZW5kcyBEYXRhVHlwZTxhbnk+LCBUS2V5IGV4dGVuZHMgVEtleXMgPSBUS2V5cz4oXG4gICAgICAgIHZhbHVlczogVmVjdG9yPFQ+LCBpbmRpY2VzOiBUS2V5LFxuICAgICAgICBrZXlzOiBBcnJheUxpa2U8bnVtYmVyPiB8IFRLZXlbJ1RBcnJheSddXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBuZXcgRGljdGlvbmFyeSh2YWx1ZXMudHlwZSwgaW5kaWNlcywgbnVsbCwgbnVsbCwgdmFsdWVzKTtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5EaWN0aW9uYXJ5KHR5cGUsIDAsIGtleXMubGVuZ3RoLCAwLCBudWxsLCBrZXlzKSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBfaW5kaWNlczogVjxUS2V5PjtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhPERpY3Rpb25hcnk8VCwgVEtleT4+KSB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHZvaWQgMCwgMSk7XG4gICAgICAgIHRoaXMuX2luZGljZXMgPSBWZWN0b3IubmV3KGRhdGEuY2xvbmUodGhpcy50eXBlLmluZGljZXMpKTtcbiAgICB9XG4gICAgLy8gcHJvdGVjdGVkIF9iaW5kRGF0YUFjY2Vzc29ycygpIHt9XG4gICAgcHVibGljIGdldCBpbmRpY2VzKCkgeyByZXR1cm4gdGhpcy5faW5kaWNlczsgfVxuICAgIHB1YmxpYyBnZXQgZGljdGlvbmFyeSgpIHsgcmV0dXJuIHRoaXMuX2RhdGEudHlwZS5kaWN0aW9uYXJ5VmVjdG9yOyB9XG4gICAgcHVibGljIGlzVmFsaWQoaW5kZXg6IG51bWJlcikgeyByZXR1cm4gdGhpcy5faW5kaWNlcy5pc1ZhbGlkKGluZGV4KTsgfVxuICAgIHB1YmxpYyByZXZlcnNlTG9va3VwKHZhbHVlOiBUKSB7IHJldHVybiB0aGlzLmRpY3Rpb25hcnkuaW5kZXhPZih2YWx1ZSk7IH1cbiAgICBwdWJsaWMgZ2V0S2V5KGlkeDogbnVtYmVyKTogVEtleVsnVFZhbHVlJ10gfCBudWxsIHsgcmV0dXJuIHRoaXMuX2luZGljZXMuZ2V0KGlkeCk7IH1cbiAgICBwdWJsaWMgZ2V0VmFsdWUoa2V5OiBudW1iZXIpOiBUWydUVmFsdWUnXSB8IG51bGwgeyByZXR1cm4gdGhpcy5kaWN0aW9uYXJ5LmdldChrZXkpOyB9XG4gICAgcHVibGljIHNldEtleShpZHg6IG51bWJlciwga2V5OiBUS2V5WydUVmFsdWUnXSB8IG51bGwpIHsgcmV0dXJuIHRoaXMuX2luZGljZXMuc2V0KGlkeCwga2V5KTsgfVxuICAgIHB1YmxpYyBzZXRWYWx1ZShrZXk6IG51bWJlciwgdmFsdWU6IFRbJ1RWYWx1ZSddIHwgbnVsbCkgeyByZXR1cm4gdGhpcy5kaWN0aW9uYXJ5LnNldChrZXksIHZhbHVlKTsgfVxufVxuIl19
