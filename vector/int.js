"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const data_1 = require("../data");
const vector_1 = require("../vector");
const base_1 = require("./base");
const type_1 = require("../type");
class IntVector extends base_1.BaseVector {
    /** @nocollapse */
    static from(data, is64) {
        if (is64 === true) {
            return data instanceof Int32Array
                ? vector_1.Vector.new(data_1.Data.Int(new type_1.Int64(), 0, data.length, 0, null, data))
                : vector_1.Vector.new(data_1.Data.Int(new type_1.Uint64(), 0, data.length, 0, null, data));
        }
        switch (data.constructor) {
            case Int8Array: return vector_1.Vector.new(data_1.Data.Int(new type_1.Int8(), 0, data.length, 0, null, data));
            case Int16Array: return vector_1.Vector.new(data_1.Data.Int(new type_1.Int16(), 0, data.length, 0, null, data));
            case Int32Array: return vector_1.Vector.new(data_1.Data.Int(new type_1.Int32(), 0, data.length, 0, null, data));
            case Uint8Array: return vector_1.Vector.new(data_1.Data.Int(new type_1.Uint8(), 0, data.length, 0, null, data));
            case Uint16Array: return vector_1.Vector.new(data_1.Data.Int(new type_1.Uint16(), 0, data.length, 0, null, data));
            case Uint32Array: return vector_1.Vector.new(data_1.Data.Int(new type_1.Uint32(), 0, data.length, 0, null, data));
        }
        throw new TypeError('Unrecognized Int data');
    }
}
exports.IntVector = IntVector;
class Int8Vector extends IntVector {
}
exports.Int8Vector = Int8Vector;
class Int16Vector extends IntVector {
}
exports.Int16Vector = Int16Vector;
class Int32Vector extends IntVector {
}
exports.Int32Vector = Int32Vector;
class Int64Vector extends IntVector {
}
exports.Int64Vector = Int64Vector;
class Uint8Vector extends IntVector {
}
exports.Uint8Vector = Uint8Vector;
class Uint16Vector extends IntVector {
}
exports.Uint16Vector = Uint16Vector;
class Uint32Vector extends IntVector {
}
exports.Uint32Vector = Uint32Vector;
class Uint64Vector extends IntVector {
}
exports.Uint64Vector = Uint64Vector;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjs7QUFFckIsa0NBQStCO0FBQy9CLHNDQUFtQztBQUNuQyxpQ0FBb0M7QUFFcEMsa0NBQXdGO0FBRXhGLE1BQWEsU0FBK0IsU0FBUSxpQkFBYTtJQUc3RCxrQkFBa0I7SUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQVMsRUFBRSxJQUFjO1FBQ3hDLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtZQUNmLE9BQU8sSUFBSSxZQUFZLFVBQVU7Z0JBQzdCLENBQUMsQ0FBQyxlQUFNLENBQUMsR0FBRyxDQUFDLFdBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxZQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNsRSxDQUFDLENBQUMsZUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFJLENBQUMsR0FBRyxDQUFDLElBQUksYUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzNFO1FBQ0QsUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3RCLEtBQUssU0FBUyxDQUFDLENBQUMsT0FBTyxlQUFNLENBQUMsR0FBRyxDQUFDLFdBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxXQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDdkYsS0FBSyxVQUFVLENBQUMsQ0FBQyxPQUFPLGVBQU0sQ0FBQyxHQUFHLENBQUMsV0FBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFlBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN6RixLQUFLLFVBQVUsQ0FBQyxDQUFDLE9BQU8sZUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFJLENBQUMsR0FBRyxDQUFDLElBQUksWUFBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3pGLEtBQUssVUFBVSxDQUFDLENBQUMsT0FBTyxlQUFNLENBQUMsR0FBRyxDQUFDLFdBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxZQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDekYsS0FBSyxXQUFXLENBQUMsQ0FBQyxPQUFPLGVBQU0sQ0FBQyxHQUFHLENBQUMsV0FBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGFBQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMzRixLQUFLLFdBQVcsQ0FBQyxDQUFDLE9BQU8sZUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFJLENBQUMsR0FBRyxDQUFDLElBQUksYUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzlGO1FBQ0QsTUFBTSxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDSjtBQXBCRCw4QkFvQkM7QUFFRCxNQUFhLFVBQVcsU0FBUSxTQUFlO0NBQUc7QUFBbEQsZ0NBQWtEO0FBQ2xELE1BQWEsV0FBWSxTQUFRLFNBQWdCO0NBQUc7QUFBcEQsa0NBQW9EO0FBQ3BELE1BQWEsV0FBWSxTQUFRLFNBQWdCO0NBQUc7QUFBcEQsa0NBQW9EO0FBQ3BELE1BQWEsV0FBWSxTQUFRLFNBQWdCO0NBQUc7QUFBcEQsa0NBQW9EO0FBQ3BELE1BQWEsV0FBWSxTQUFRLFNBQWdCO0NBQUc7QUFBcEQsa0NBQW9EO0FBQ3BELE1BQWEsWUFBYSxTQUFRLFNBQWlCO0NBQUc7QUFBdEQsb0NBQXNEO0FBQ3RELE1BQWEsWUFBYSxTQUFRLFNBQWlCO0NBQUc7QUFBdEQsb0NBQXNEO0FBQ3RELE1BQWEsWUFBYSxTQUFRLFNBQWlCO0NBQUc7QUFBdEQsb0NBQXNEIiwiZmlsZSI6InZlY3Rvci9pbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcbmltcG9ydCB7IEJhc2VWZWN0b3IgfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgVmVjdG9yIGFzIFYgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEludCwgVWludDgsIFVpbnQxNiwgVWludDMyLCBVaW50NjQsIEludDgsIEludDE2LCBJbnQzMiwgSW50NjQgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIEludFZlY3RvcjxUIGV4dGVuZHMgSW50ID0gSW50PiBleHRlbmRzIEJhc2VWZWN0b3I8VD4ge1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgSW50PihkYXRhOiBUWydUQXJyYXknXSk6IFY8VD47XG4gICAgcHVibGljIHN0YXRpYyBmcm9tPFQgZXh0ZW5kcyBJbnQzMiB8IFVpbnQzMj4oZGF0YTogVFsnVEFycmF5J10sIGlzNjQ6IHRydWUpOiBWPFQ+O1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbShkYXRhOiBhbnksIGlzNjQ/OiBib29sZWFuKSB7XG4gICAgICAgIGlmIChpczY0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YSBpbnN0YW5jZW9mIEludDMyQXJyYXlcbiAgICAgICAgICAgICAgICA/IFZlY3Rvci5uZXcoRGF0YS5JbnQobmV3IEludDY0KCksIDAsIGRhdGEubGVuZ3RoLCAwLCBudWxsLCBkYXRhKSlcbiAgICAgICAgICAgICAgICA6IFZlY3Rvci5uZXcoRGF0YS5JbnQobmV3IFVpbnQ2NCgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoZGF0YS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY2FzZSBJbnQ4QXJyYXk6IHJldHVybiBWZWN0b3IubmV3KERhdGEuSW50KG5ldyBJbnQ4KCksIDAsIGRhdGEubGVuZ3RoLCAwLCBudWxsLCBkYXRhKSk7XG4gICAgICAgICAgICBjYXNlIEludDE2QXJyYXk6IHJldHVybiBWZWN0b3IubmV3KERhdGEuSW50KG5ldyBJbnQxNigpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBJbnQzMkFycmF5OiByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkludChuZXcgSW50MzIoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhc2UgVWludDhBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5JbnQobmV3IFVpbnQ4KCksIDAsIGRhdGEubGVuZ3RoLCAwLCBudWxsLCBkYXRhKSk7XG4gICAgICAgICAgICBjYXNlIFVpbnQxNkFycmF5OiByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkludChuZXcgVWludDE2KCksIDAsIGRhdGEubGVuZ3RoLCAwLCBudWxsLCBkYXRhKSk7XG4gICAgICAgICAgICBjYXNlIFVpbnQzMkFycmF5OiByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkludChuZXcgVWludDMyKCksIDAsIGRhdGEubGVuZ3RoLCAwLCBudWxsLCBkYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5yZWNvZ25pemVkIEludCBkYXRhJyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW50OFZlY3RvciBleHRlbmRzIEludFZlY3RvcjxJbnQ4PiB7fVxuZXhwb3J0IGNsYXNzIEludDE2VmVjdG9yIGV4dGVuZHMgSW50VmVjdG9yPEludDE2PiB7fVxuZXhwb3J0IGNsYXNzIEludDMyVmVjdG9yIGV4dGVuZHMgSW50VmVjdG9yPEludDMyPiB7fVxuZXhwb3J0IGNsYXNzIEludDY0VmVjdG9yIGV4dGVuZHMgSW50VmVjdG9yPEludDY0PiB7fVxuZXhwb3J0IGNsYXNzIFVpbnQ4VmVjdG9yIGV4dGVuZHMgSW50VmVjdG9yPFVpbnQ4PiB7fVxuZXhwb3J0IGNsYXNzIFVpbnQxNlZlY3RvciBleHRlbmRzIEludFZlY3RvcjxVaW50MTY+IHt9XG5leHBvcnQgY2xhc3MgVWludDMyVmVjdG9yIGV4dGVuZHMgSW50VmVjdG9yPFVpbnQzMj4ge31cbmV4cG9ydCBjbGFzcyBVaW50NjRWZWN0b3IgZXh0ZW5kcyBJbnRWZWN0b3I8VWludDY0PiB7fVxuIl19
