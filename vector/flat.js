"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const bit_1 = require("../util/bit");
class FlatView {
    constructor(data) {
        this.length = data.length;
        this.values = data.values;
    }
    clone(data) {
        return new this.constructor(data);
    }
    isValid() {
        return true;
    }
    get(index) {
        return this.values[index];
    }
    set(index, value) {
        return this.values[index] = value;
    }
    toArray() {
        return this.values.subarray(0, this.length);
    }
    [Symbol.iterator]() {
        return this.values.subarray(0, this.length)[Symbol.iterator]();
    }
}
exports.FlatView = FlatView;
class NullView {
    constructor(data) {
        this.length = data.length;
    }
    clone(data) {
        return new this.constructor(data);
    }
    isValid() {
        return true;
    }
    set() { }
    get() { return null; }
    toArray() {
        return [...this];
    }
    *[Symbol.iterator]() {
        for (let index = -1, length = this.length; ++index < length;) {
            yield null;
        }
    }
}
exports.NullView = NullView;
class BoolView extends FlatView {
    constructor(data) {
        super(data);
        this.offset = data.offset;
    }
    toArray() { return [...this]; }
    get(index) {
        const boolBitIndex = this.offset + index;
        return bit_1.getBool(null, index, this.values[boolBitIndex >> 3], boolBitIndex % 8);
    }
    set(index, value) {
        bit_1.setBool(this.values, this.offset + index, value);
    }
    [Symbol.iterator]() {
        return bit_1.iterateBits(this.values, this.offset, this.length, this.values, bit_1.getBool);
    }
}
exports.BoolView = BoolView;
class ValidityView {
    constructor(data, view) {
        this.view = view;
        this.length = data.length;
        this.offset = data.offset;
        this.nullBitmap = data.nullBitmap;
    }
    clone(data) {
        return new ValidityView(data, this.view.clone(data));
    }
    toArray() {
        return [...this];
    }
    isValid(index) {
        const nullBitIndex = this.offset + index;
        return bit_1.getBool(null, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);
    }
    get(index) {
        const nullBitIndex = this.offset + index;
        return this.getNullable(this.view, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);
    }
    set(index, value) {
        if (bit_1.setBool(this.nullBitmap, this.offset + index, value != null)) {
            this.view.set(index, value);
        }
    }
    [Symbol.iterator]() {
        return bit_1.iterateBits(this.nullBitmap, this.offset, this.length, this.view, this.getNullable);
    }
    getNullable(view, index, byte, bit) {
        return bit_1.getBool(view, index, byte, bit) ? view.get(index) : null;
    }
}
exports.ValidityView = ValidityView;
class PrimitiveView extends FlatView {
    constructor(data, size) {
        super(data);
        this.size = size || 1;
        this.ArrayType = data.type.ArrayType;
    }
    clone(data) {
        return new this.constructor(data, this.size);
    }
    getValue(values, index, size) {
        return values[index * size];
    }
    setValue(values, index, size, value) {
        values[index * size] = value;
    }
    get(index) {
        return this.getValue(this.values, index, this.size);
    }
    set(index, value) {
        return this.setValue(this.values, index, this.size, value);
    }
    toArray() {
        return this.size > 1 ?
            new this.ArrayType(this) :
            this.values.subarray(0, this.length);
    }
    *[Symbol.iterator]() {
        const get = this.getValue;
        const { size, values, length } = this;
        for (let index = -1; ++index < length;) {
            yield get(values, index, size);
        }
    }
}
exports.PrimitiveView = PrimitiveView;
class FixedSizeView extends PrimitiveView {
    toArray() {
        return this.values;
    }
    getValue(values, index, size) {
        return values.subarray(index * size, index * size + size);
    }
    setValue(values, index, size, value) {
        values.set(value.subarray(0, size), index * size);
    }
}
exports.FixedSizeView = FixedSizeView;
class Float16View extends PrimitiveView {
    toArray() { return new Float32Array(this); }
    getValue(values, index, size) {
        return (values[index * size] - 32767) / 32767;
    }
    setValue(values, index, size, value) {
        values[index * size] = (value * 32767) + 32767;
    }
}
exports.Float16View = Float16View;
class DateDayView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochDaysToDate(values, index * size);
    }
    setValue(values, index, size, value) {
        values[index * size] = value.valueOf() / 86400000;
    }
}
exports.DateDayView = DateDayView;
class DateMillisecondView extends FixedSizeView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochMillisecondsLongToDate(values, index * size);
    }
    setValue(values, index, size, value) {
        const epochMs = value.valueOf();
        values[index * size] = (epochMs % 4294967296) | 0;
        values[index * size + size] = (epochMs / 4294967296) | 0;
    }
}
exports.DateMillisecondView = DateMillisecondView;
class TimestampDayView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochDaysToMs(values, index * size);
    }
    setValue(values, index, size, epochMs) {
        values[index * size] = (epochMs / 86400000) | 0;
    }
}
exports.TimestampDayView = TimestampDayView;
class TimestampSecondView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochSecondsToMs(values, index * size);
    }
    setValue(values, index, size, epochMs) {
        values[index * size] = (epochMs / 1000) | 0;
    }
}
exports.TimestampSecondView = TimestampSecondView;
class TimestampMillisecondView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochMillisecondsLongToMs(values, index * size);
    }
    setValue(values, index, size, epochMs) {
        values[index * size] = (epochMs % 4294967296) | 0;
        values[index * size + size] = (epochMs / 4294967296) | 0;
    }
}
exports.TimestampMillisecondView = TimestampMillisecondView;
class TimestampMicrosecondView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochMicrosecondsLongToMs(values, index * size);
    }
    setValue(values, index, size, epochMs) {
        values[index * size] = ((epochMs / 1000) % 4294967296) | 0;
        values[index * size + size] = ((epochMs / 1000) / 4294967296) | 0;
    }
}
exports.TimestampMicrosecondView = TimestampMicrosecondView;
class TimestampNanosecondView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochNanosecondsLongToMs(values, index * size);
    }
    setValue(values, index, size, epochMs) {
        values[index * size] = ((epochMs / 1000000) % 4294967296) | 0;
        values[index * size + size] = ((epochMs / 1000000) / 4294967296) | 0;
    }
}
exports.TimestampNanosecondView = TimestampNanosecondView;
class IntervalYearMonthView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        const interval = values[index * size];
        return new Int32Array([interval / 12, /* years */ interval % 12 /* months */]);
    }
    setValue(values, index, size, value) {
        values[index * size] = (value[0] * 12) + (value[1] % 12);
    }
}
exports.IntervalYearMonthView = IntervalYearMonthView;
class IntervalYearView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return values[index * size] / 12;
    }
    setValue(values, index, size, value) {
        values[index * size] = (value * 12) + (values[index * size] % 12);
    }
}
exports.IntervalYearView = IntervalYearView;
class IntervalMonthView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return values[index * size] % 12;
    }
    setValue(values, index, size, value) {
        values[index * size] = (values[index * size] * 12) + (value % 12);
    }
}
exports.IntervalMonthView = IntervalMonthView;
function epochSecondsToMs(data, index) { return 1000 * data[index]; }
exports.epochSecondsToMs = epochSecondsToMs;
function epochDaysToMs(data, index) { return 86400000 * data[index]; }
exports.epochDaysToMs = epochDaysToMs;
function epochMillisecondsLongToMs(data, index) { return 4294967296 * (data[index + 1]) + data[index]; }
exports.epochMillisecondsLongToMs = epochMillisecondsLongToMs;
function epochMicrosecondsLongToMs(data, index) { return 4294967296 * (data[index + 1] / 1000) + (data[index] / 1000); }
exports.epochMicrosecondsLongToMs = epochMicrosecondsLongToMs;
function epochNanosecondsLongToMs(data, index) { return 4294967296 * (data[index + 1] / 1000000) + (data[index] / 1000000); }
exports.epochNanosecondsLongToMs = epochNanosecondsLongToMs;
function epochMillisecondsToDate(epochMs) { return new Date(epochMs); }
exports.epochMillisecondsToDate = epochMillisecondsToDate;
function epochDaysToDate(data, index) { return epochMillisecondsToDate(epochDaysToMs(data, index)); }
exports.epochDaysToDate = epochDaysToDate;
function epochSecondsToDate(data, index) { return epochMillisecondsToDate(epochSecondsToMs(data, index)); }
exports.epochSecondsToDate = epochSecondsToDate;
function epochNanosecondsLongToDate(data, index) { return epochMillisecondsToDate(epochNanosecondsLongToMs(data, index)); }
exports.epochNanosecondsLongToDate = epochNanosecondsLongToDate;
function epochMillisecondsLongToDate(data, index) { return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index)); }
exports.epochMillisecondsLongToDate = epochMillisecondsLongToDate;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
