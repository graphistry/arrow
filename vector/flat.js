"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const bit_1 = require("../util/bit");
class FlatView {
    constructor(data) {
        this.length = data.length;
        this.values = data.values;
    }
    clone(data) {
        return new this.constructor(data);
    }
    isValid() {
        return true;
    }
    get(index) {
        return this.values[index];
    }
    set(index, value) {
        return this.values[index] = value;
    }
    toArray() {
        return this.values.subarray(0, this.length);
    }
    indexOf(search) {
        let index = 0;
        for (let value of this) {
            if (value === search) {
                return index;
            }
            ++index;
        }
        return -1;
    }
    [Symbol.iterator]() {
        return this.values.subarray(0, this.length)[Symbol.iterator]();
    }
}
exports.FlatView = FlatView;
class NullView {
    constructor(data) {
        this.length = data.length;
    }
    clone(data) {
        return new this.constructor(data);
    }
    isValid() {
        return true;
    }
    set() { }
    get() { return null; }
    toArray() {
        return [...this];
    }
    indexOf(search) {
        // if you're looking for nulls and the view isn't empty, we've got 'em!
        return search === null && this.length > 0 ? 0 : -1;
    }
    *[Symbol.iterator]() {
        for (let index = -1, length = this.length; ++index < length;) {
            yield null;
        }
    }
}
exports.NullView = NullView;
class BoolView extends FlatView {
    constructor(data) {
        super(data);
        this.offset = data.offset;
    }
    toArray() { return [...this]; }
    get(index) {
        const boolBitIndex = this.offset + index;
        return bit_1.getBool(null, index, this.values[boolBitIndex >> 3], boolBitIndex % 8);
    }
    set(index, value) {
        bit_1.setBool(this.values, this.offset + index, value);
    }
    [Symbol.iterator]() {
        return bit_1.iterateBits(this.values, this.offset, this.length, this.values, bit_1.getBool);
    }
}
exports.BoolView = BoolView;
class PrimitiveView extends FlatView {
    constructor(data, size) {
        super(data);
        this.size = size || 1;
        this.ArrayType = data.type.ArrayType;
    }
    clone(data) {
        return new this.constructor(data, this.size);
    }
    getValue(values, index, size) {
        return values[index * size];
    }
    setValue(values, index, size, value) {
        values[index * size] = value;
    }
    get(index) {
        return this.getValue(this.values, index, this.size);
    }
    set(index, value) {
        return this.setValue(this.values, index, this.size, value);
    }
    toArray() {
        return this.size > 1 ?
            new this.ArrayType(this) :
            this.values.subarray(0, this.length);
    }
    *[Symbol.iterator]() {
        const get = this.getValue;
        const { size, values, length } = this;
        for (let index = -1; ++index < length;) {
            yield get(values, index, size);
        }
    }
}
exports.PrimitiveView = PrimitiveView;
class FixedSizeView extends PrimitiveView {
    toArray() {
        return this.values;
    }
    indexOf(search) {
        let index = 0;
        for (let value of this) {
            if (value.every((d, i) => d === search[i])) {
                return index;
            }
            ++index;
        }
        return -1;
    }
    getValue(values, index, size) {
        return values.subarray(index * size, index * size + size);
    }
    setValue(values, index, size, value) {
        values.set(value.subarray(0, size), index * size);
    }
}
exports.FixedSizeView = FixedSizeView;
class Float16View extends PrimitiveView {
    toArray() { return new Float32Array(this); }
    getValue(values, index, size) {
        return (values[index * size] - 32767) / 32767;
    }
    setValue(values, index, size, value) {
        values[index * size] = (value * 32767) + 32767;
    }
}
exports.Float16View = Float16View;
class DateDayView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochDaysToDate(values, index * size);
    }
    setValue(values, index, size, value) {
        values[index * size] = value.valueOf() / 86400000;
    }
}
exports.DateDayView = DateDayView;
class DateMillisecondView extends FixedSizeView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochMillisecondsLongToDate(values, index * size);
    }
    setValue(values, index, size, value) {
        const epochMs = value.valueOf();
        values[index * size] = (epochMs % 4294967296) | 0;
        values[index * size + size] = (epochMs / 4294967296) | 0;
    }
}
exports.DateMillisecondView = DateMillisecondView;
class TimestampDayView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochDaysToMs(values, index * size);
    }
    setValue(values, index, size, epochMs) {
        values[index * size] = (epochMs / 86400000) | 0;
    }
}
exports.TimestampDayView = TimestampDayView;
class TimestampSecondView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochSecondsToMs(values, index * size);
    }
    setValue(values, index, size, epochMs) {
        values[index * size] = (epochMs / 1000) | 0;
    }
}
exports.TimestampSecondView = TimestampSecondView;
class TimestampMillisecondView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochMillisecondsLongToMs(values, index * size);
    }
    setValue(values, index, size, epochMs) {
        values[index * size] = (epochMs % 4294967296) | 0;
        values[index * size + size] = (epochMs / 4294967296) | 0;
    }
}
exports.TimestampMillisecondView = TimestampMillisecondView;
class TimestampMicrosecondView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochMicrosecondsLongToMs(values, index * size);
    }
    setValue(values, index, size, epochMs) {
        values[index * size] = ((epochMs / 1000) % 4294967296) | 0;
        values[index * size + size] = ((epochMs / 1000) / 4294967296) | 0;
    }
}
exports.TimestampMicrosecondView = TimestampMicrosecondView;
class TimestampNanosecondView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return epochNanosecondsLongToMs(values, index * size);
    }
    setValue(values, index, size, epochMs) {
        values[index * size] = ((epochMs / 1000000) % 4294967296) | 0;
        values[index * size + size] = ((epochMs / 1000000) / 4294967296) | 0;
    }
}
exports.TimestampNanosecondView = TimestampNanosecondView;
class IntervalYearMonthView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        const interval = values[index * size];
        return new Int32Array([interval / 12, /* years */ interval % 12 /* months */]);
    }
    setValue(values, index, size, value) {
        values[index * size] = (value[0] * 12) + (value[1] % 12);
    }
}
exports.IntervalYearMonthView = IntervalYearMonthView;
class IntervalYearView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return values[index * size] / 12;
    }
    setValue(values, index, size, value) {
        values[index * size] = (value * 12) + (values[index * size] % 12);
    }
}
exports.IntervalYearView = IntervalYearView;
class IntervalMonthView extends PrimitiveView {
    toArray() { return [...this]; }
    getValue(values, index, size) {
        return values[index * size] % 12;
    }
    setValue(values, index, size, value) {
        values[index * size] = (values[index * size] * 12) + (value % 12);
    }
}
exports.IntervalMonthView = IntervalMonthView;
function epochSecondsToMs(data, index) { return 1000 * data[index]; }
exports.epochSecondsToMs = epochSecondsToMs;
function epochDaysToMs(data, index) { return 86400000 * data[index]; }
exports.epochDaysToMs = epochDaysToMs;
function epochMillisecondsLongToMs(data, index) { return 4294967296 * (data[index + 1]) + (data[index] >>> 0); }
exports.epochMillisecondsLongToMs = epochMillisecondsLongToMs;
function epochMicrosecondsLongToMs(data, index) { return 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000); }
exports.epochMicrosecondsLongToMs = epochMicrosecondsLongToMs;
function epochNanosecondsLongToMs(data, index) { return 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000); }
exports.epochNanosecondsLongToMs = epochNanosecondsLongToMs;
function epochMillisecondsToDate(epochMs) { return new Date(epochMs); }
exports.epochMillisecondsToDate = epochMillisecondsToDate;
function epochDaysToDate(data, index) { return epochMillisecondsToDate(epochDaysToMs(data, index)); }
exports.epochDaysToDate = epochDaysToDate;
function epochSecondsToDate(data, index) { return epochMillisecondsToDate(epochSecondsToMs(data, index)); }
exports.epochSecondsToDate = epochSecondsToDate;
function epochNanosecondsLongToDate(data, index) { return epochMillisecondsToDate(epochNanosecondsLongToMs(data, index)); }
exports.epochNanosecondsLongToDate = epochNanosecondsLongToDate;
function epochMillisecondsLongToDate(data, index) { return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index)); }
exports.epochMillisecondsLongToDate = epochMillisecondsLongToDate;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQXRGLDBEQUFzRjtBQUN0RixTQUFnQixlQUFlLENBQUMsSUFBZ0IsRUFBRSxLQUFhLElBQUksT0FBTyx1QkFBdUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQWhJLDBDQUFnSTtBQUNoSSxTQUFnQixrQkFBa0IsQ0FBQyxJQUFnQixFQUFFLEtBQWEsSUFBSSxPQUFPLHVCQUF1QixDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUF0SSxnREFBc0k7QUFDdEksU0FBZ0IsMEJBQTBCLENBQUMsSUFBZ0IsRUFBRSxLQUFhLElBQUksT0FBTyx1QkFBdUIsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFBdEosZ0VBQXNKO0FBQ3RKLFNBQWdCLDJCQUEyQixDQUFDLElBQWdCLEVBQUUsS0FBYSxJQUFJLE9BQU8sdUJBQXVCLENBQUMseUJBQXlCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQXhKLGtFQUF3SiIsImZpbGUiOiJ2ZWN0b3IvZmxhdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi4vdmVjdG9yJztcbmltcG9ydCB7IGdldEJvb2wsIHNldEJvb2wsIGl0ZXJhdGVCaXRzIH0gZnJvbSAnLi4vdXRpbC9iaXQnO1xuaW1wb3J0IHsgRmxhdFR5cGUsIFByaW1pdGl2ZVR5cGUsIEl0ZXJhYmxlQXJyYXlMaWtlIH0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgeyBCb29sLCBGbG9hdDE2LCBEYXRlXywgSW50ZXJ2YWwsIE51bGwsIEludDMyLCBUaW1lc3RhbXAgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIEZsYXRWaWV3PFQgZXh0ZW5kcyBGbGF0VHlwZT4gaW1wbGVtZW50cyBWaWV3PFQ+IHtcbiAgICBwdWJsaWMgbGVuZ3RoOiBudW1iZXI7XG4gICAgcHVibGljIHZhbHVlczogVFsnVEFycmF5J107XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPikge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICB0aGlzLnZhbHVlcyA9IGRhdGEudmFsdWVzO1xuICAgIH1cbiAgICBwdWJsaWMgY2xvbmUoZGF0YTogRGF0YTxUPik6IHRoaXMge1xuICAgICAgICByZXR1cm4gbmV3ICg8YW55PiB0aGlzLmNvbnN0cnVjdG9yKShkYXRhKSBhcyB0aGlzO1xuICAgIH1cbiAgICBwdWJsaWMgaXNWYWxpZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQoaW5kZXg6IG51bWJlcik6IFRbJ1RWYWx1ZSddIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzW2luZGV4XTtcbiAgICB9XG4gICAgcHVibGljIHNldChpbmRleDogbnVtYmVyLCB2YWx1ZTogVFsnVFZhbHVlJ10pOiB2b2lkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgIH1cbiAgICBwdWJsaWMgdG9BcnJheSgpOiBJdGVyYWJsZUFycmF5TGlrZTxUWydUVmFsdWUnXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMuc3ViYXJyYXkoMCwgdGhpcy5sZW5ndGgpO1xuICAgIH1cbiAgICBwdWJsaWMgaW5kZXhPZihzZWFyY2g6IFRbJ1RWYWx1ZSddKSB7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGZvciAobGV0IHZhbHVlIG9mIHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gc2VhcmNoKSB7IHJldHVybiBpbmRleDsgfVxuICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgcHVibGljIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8VFsnVFZhbHVlJ10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzLnN1YmFycmF5KDAsIHRoaXMubGVuZ3RoKVtTeW1ib2wuaXRlcmF0b3JdKCkgYXMgSXRlcmFibGVJdGVyYXRvcjxUWydUVmFsdWUnXT47XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTnVsbFZpZXcgaW1wbGVtZW50cyBWaWV3PE51bGw+IHtcbiAgICBwdWJsaWMgbGVuZ3RoOiBudW1iZXI7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxOdWxsPikge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgIH1cbiAgICBwdWJsaWMgY2xvbmUoZGF0YTogRGF0YTxOdWxsPik6IHRoaXMge1xuICAgICAgICByZXR1cm4gbmV3ICg8YW55PiB0aGlzLmNvbnN0cnVjdG9yKShkYXRhKSBhcyB0aGlzO1xuICAgIH1cbiAgICBwdWJsaWMgaXNWYWxpZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQoKTogdm9pZCB7fVxuICAgIHB1YmxpYyBnZXQoKSB7IHJldHVybiBudWxsOyB9XG4gICAgcHVibGljIHRvQXJyYXkoKTogSXRlcmFibGVBcnJheUxpa2U8bnVsbD4ge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXNdO1xuICAgIH1cbiAgICBwdWJsaWMgaW5kZXhPZihzZWFyY2g6IGFueSkge1xuICAgICAgICAvLyBpZiB5b3UncmUgbG9va2luZyBmb3IgbnVsbHMgYW5kIHRoZSB2aWV3IGlzbid0IGVtcHR5LCB3ZSd2ZSBnb3QgJ2VtIVxuICAgICAgICByZXR1cm4gc2VhcmNoID09PSBudWxsICYmIHRoaXMubGVuZ3RoID4gMCA/IDAgOiAtMTtcbiAgICB9XG4gICAgcHVibGljICpbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPG51bGw+IHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAtMSwgbGVuZ3RoID0gdGhpcy5sZW5ndGg7ICsraW5kZXggPCBsZW5ndGg7KSB7XG4gICAgICAgICAgICB5aWVsZCBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQm9vbFZpZXcgZXh0ZW5kcyBGbGF0VmlldzxCb29sPiB7XG4gICAgcHJvdGVjdGVkIG9mZnNldDogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8Qm9vbD4pIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gZGF0YS5vZmZzZXQ7XG4gICAgfVxuICAgIHB1YmxpYyB0b0FycmF5KCkgeyByZXR1cm4gWy4uLnRoaXNdOyB9XG4gICAgcHVibGljIGdldChpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGJvb2xCaXRJbmRleCA9IHRoaXMub2Zmc2V0ICsgaW5kZXg7XG4gICAgICAgIHJldHVybiBnZXRCb29sKG51bGwsIGluZGV4LCB0aGlzLnZhbHVlc1tib29sQml0SW5kZXggPj4gM10sIGJvb2xCaXRJbmRleCAlIDgpO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0KGluZGV4OiBudW1iZXIsIHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHNldEJvb2wodGhpcy52YWx1ZXMsIHRoaXMub2Zmc2V0ICsgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gICAgcHVibGljIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZUJpdHM8Ym9vbGVhbj4odGhpcy52YWx1ZXMsIHRoaXMub2Zmc2V0LCB0aGlzLmxlbmd0aCwgdGhpcy52YWx1ZXMsIGdldEJvb2wpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFByaW1pdGl2ZVZpZXc8VCBleHRlbmRzIFByaW1pdGl2ZVR5cGU+IGV4dGVuZHMgRmxhdFZpZXc8VD4ge1xuICAgIHB1YmxpYyBzaXplOiBudW1iZXI7XG4gICAgcHVibGljIEFycmF5VHlwZTogVFsnQXJyYXlUeXBlJ107XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPiwgc2l6ZT86IG51bWJlcikge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZSB8fCAxO1xuICAgICAgICB0aGlzLkFycmF5VHlwZSA9IGRhdGEudHlwZS5BcnJheVR5cGU7XG4gICAgfVxuICAgIHB1YmxpYyBjbG9uZShkYXRhOiBEYXRhPFQ+KTogdGhpcyB7XG4gICAgICAgIHJldHVybiBuZXcgKDxhbnk+IHRoaXMuY29uc3RydWN0b3IpKGRhdGEsIHRoaXMuc2l6ZSkgYXMgdGhpcztcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldFZhbHVlKHZhbHVlczogVFsnVEFycmF5J10sIGluZGV4OiBudW1iZXIsIHNpemU6IG51bWJlcik6IFRbJ1RWYWx1ZSddIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlc1tpbmRleCAqIHNpemVdO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgc2V0VmFsdWUodmFsdWVzOiBUWydUQXJyYXknXSwgaW5kZXg6IG51bWJlciwgc2l6ZTogbnVtYmVyLCB2YWx1ZTogVFsnVFZhbHVlJ10pOiB2b2lkIHtcbiAgICAgICAgdmFsdWVzW2luZGV4ICogc2l6ZV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcHVibGljIGdldChpbmRleDogbnVtYmVyKTogVFsnVFZhbHVlJ10ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSh0aGlzLnZhbHVlcywgaW5kZXgsIHRoaXMuc2l6ZSk7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQoaW5kZXg6IG51bWJlciwgdmFsdWU6IFRbJ1RWYWx1ZSddKTogdm9pZCB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFZhbHVlKHRoaXMudmFsdWVzLCBpbmRleCwgdGhpcy5zaXplLCB2YWx1ZSk7XG4gICAgfVxuICAgIHB1YmxpYyB0b0FycmF5KCk6IEl0ZXJhYmxlQXJyYXlMaWtlPFRbJ1RWYWx1ZSddPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpemUgPiAxID9cbiAgICAgICAgICAgIG5ldyB0aGlzLkFycmF5VHlwZSh0aGlzKSA6XG4gICAgICAgICAgICB0aGlzLnZhbHVlcy5zdWJhcnJheSgwLCB0aGlzLmxlbmd0aCk7XG4gICAgfVxuICAgIHB1YmxpYyAqW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxUWydUVmFsdWUnXT4ge1xuICAgICAgICBjb25zdCBnZXQgPSB0aGlzLmdldFZhbHVlO1xuICAgICAgICBjb25zdCB7IHNpemUsIHZhbHVlcywgbGVuZ3RoIH0gPSB0aGlzO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IC0xOyArK2luZGV4IDwgbGVuZ3RoOykge1xuICAgICAgICAgICAgeWllbGQgZ2V0KHZhbHVlcywgaW5kZXgsIHNpemUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRml4ZWRTaXplVmlldzxUIGV4dGVuZHMgUHJpbWl0aXZlVHlwZT4gZXh0ZW5kcyBQcmltaXRpdmVWaWV3PFQ+IHtcbiAgICBwdWJsaWMgdG9BcnJheSgpOiBJdGVyYWJsZUFycmF5TGlrZTxUWydUVmFsdWUnXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXM7XG4gICAgfVxuICAgIHB1YmxpYyBpbmRleE9mKHNlYXJjaDogVFsnVFZhbHVlJ10pIHtcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgZm9yIChsZXQgdmFsdWUgb2YgdGhpcykge1xuICAgICAgICAgICAgaWYgKHZhbHVlLmV2ZXJ5KChkOiBudW1iZXIsIGk6IG51bWJlcikgPT4gZCA9PT0gc2VhcmNoW2ldKSkgeyByZXR1cm4gaW5kZXg7IH1cbiAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXRWYWx1ZSh2YWx1ZXM6IFRbJ1RBcnJheSddLCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIpOiBUWydUVmFsdWUnXSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXMuc3ViYXJyYXkoaW5kZXggKiBzaXplLCBpbmRleCAqIHNpemUgKyBzaXplKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHNldFZhbHVlKHZhbHVlczogVFsnVEFycmF5J10sIGluZGV4OiBudW1iZXIsIHNpemU6IG51bWJlciwgdmFsdWU6IFRbJ1RWYWx1ZSddKTogdm9pZCB7XG4gICAgICAgIHZhbHVlcy5zZXQoKHZhbHVlIGFzIFRbJ1RBcnJheSddKS5zdWJhcnJheSgwLCBzaXplKSwgaW5kZXggKiBzaXplKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGbG9hdDE2VmlldyBleHRlbmRzIFByaW1pdGl2ZVZpZXc8RmxvYXQxNj4ge1xuICAgIHB1YmxpYyB0b0FycmF5KCkgeyByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSh0aGlzKTsgfVxuICAgIHByb3RlY3RlZCBnZXRWYWx1ZSh2YWx1ZXM6IFVpbnQxNkFycmF5LCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKHZhbHVlc1tpbmRleCAqIHNpemVdIC0gMzI3NjcpIC8gMzI3Njc7XG4gICAgfVxuICAgIHByb3RlY3RlZCBzZXRWYWx1ZSh2YWx1ZXM6IFVpbnQxNkFycmF5LCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIsIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdmFsdWVzW2luZGV4ICogc2l6ZV0gPSAodmFsdWUgKiAzMjc2NykgKyAzMjc2NztcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRlRGF5VmlldyBleHRlbmRzIFByaW1pdGl2ZVZpZXc8RGF0ZV8+IHtcbiAgICBwdWJsaWMgdG9BcnJheSgpIHsgcmV0dXJuIFsuLi50aGlzXTsgfVxuICAgIHByb3RlY3RlZCBnZXRWYWx1ZSh2YWx1ZXM6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIsIHNpemU6IG51bWJlcik6IERhdGUge1xuICAgICAgICByZXR1cm4gZXBvY2hEYXlzVG9EYXRlKHZhbHVlcywgaW5kZXggKiBzaXplKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHNldFZhbHVlKHZhbHVlczogSW50MzJBcnJheSwgaW5kZXg6IG51bWJlciwgc2l6ZTogbnVtYmVyLCB2YWx1ZTogRGF0ZSk6IHZvaWQge1xuICAgICAgICB2YWx1ZXNbaW5kZXggKiBzaXplXSA9IHZhbHVlLnZhbHVlT2YoKSAvIDg2NDAwMDAwO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERhdGVNaWxsaXNlY29uZFZpZXcgZXh0ZW5kcyBGaXhlZFNpemVWaWV3PERhdGVfPiB7XG4gICAgcHVibGljIHRvQXJyYXkoKSB7IHJldHVybiBbLi4udGhpc107IH1cbiAgICBwcm90ZWN0ZWQgZ2V0VmFsdWUodmFsdWVzOiBJbnQzMkFycmF5LCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIpOiBEYXRlIHtcbiAgICAgICAgcmV0dXJuIGVwb2NoTWlsbGlzZWNvbmRzTG9uZ1RvRGF0ZSh2YWx1ZXMsIGluZGV4ICogc2l6ZSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBzZXRWYWx1ZSh2YWx1ZXM6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIsIHNpemU6IG51bWJlciwgdmFsdWU6IERhdGUpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZXBvY2hNcyA9IHZhbHVlLnZhbHVlT2YoKTtcbiAgICAgICAgdmFsdWVzW2luZGV4ICogc2l6ZV0gPSAoZXBvY2hNcyAlIDQyOTQ5NjcyOTYpIHwgMDtcbiAgICAgICAgdmFsdWVzW2luZGV4ICogc2l6ZSArIHNpemVdID0gKGVwb2NoTXMgLyA0Mjk0OTY3Mjk2KSB8IDA7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGltZXN0YW1wRGF5VmlldyBleHRlbmRzIFByaW1pdGl2ZVZpZXc8VGltZXN0YW1wPiB7XG4gICAgcHVibGljIHRvQXJyYXkoKSB7IHJldHVybiBbLi4udGhpc107IH1cbiAgICBwcm90ZWN0ZWQgZ2V0VmFsdWUodmFsdWVzOiBJbnQzMkFycmF5LCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gZXBvY2hEYXlzVG9Ncyh2YWx1ZXMsIGluZGV4ICogc2l6ZSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBzZXRWYWx1ZSh2YWx1ZXM6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIsIHNpemU6IG51bWJlciwgZXBvY2hNczogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHZhbHVlc1tpbmRleCAqIHNpemVdID0gKGVwb2NoTXMgLyA4NjQwMDAwMCkgfCAwO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVzdGFtcFNlY29uZFZpZXcgZXh0ZW5kcyBQcmltaXRpdmVWaWV3PFRpbWVzdGFtcD4ge1xuICAgIHB1YmxpYyB0b0FycmF5KCkgeyByZXR1cm4gWy4uLnRoaXNdOyB9XG4gICAgcHJvdGVjdGVkIGdldFZhbHVlKHZhbHVlczogSW50MzJBcnJheSwgaW5kZXg6IG51bWJlciwgc2l6ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIGVwb2NoU2Vjb25kc1RvTXModmFsdWVzLCBpbmRleCAqIHNpemUpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgc2V0VmFsdWUodmFsdWVzOiBJbnQzMkFycmF5LCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIsIGVwb2NoTXM6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB2YWx1ZXNbaW5kZXggKiBzaXplXSA9IChlcG9jaE1zIC8gMTAwMCkgfCAwO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVzdGFtcE1pbGxpc2Vjb25kVmlldyBleHRlbmRzIFByaW1pdGl2ZVZpZXc8VGltZXN0YW1wPiB7XG4gICAgcHVibGljIHRvQXJyYXkoKSB7IHJldHVybiBbLi4udGhpc107IH1cbiAgICBwcm90ZWN0ZWQgZ2V0VmFsdWUodmFsdWVzOiBJbnQzMkFycmF5LCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gZXBvY2hNaWxsaXNlY29uZHNMb25nVG9Ncyh2YWx1ZXMsIGluZGV4ICogc2l6ZSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBzZXRWYWx1ZSh2YWx1ZXM6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIsIHNpemU6IG51bWJlciwgZXBvY2hNczogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHZhbHVlc1tpbmRleCAqIHNpemVdID0gKGVwb2NoTXMgJSA0Mjk0OTY3Mjk2KSB8IDA7XG4gICAgICAgIHZhbHVlc1tpbmRleCAqIHNpemUgKyBzaXplXSA9IChlcG9jaE1zIC8gNDI5NDk2NzI5NikgfCAwO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVzdGFtcE1pY3Jvc2Vjb25kVmlldyBleHRlbmRzIFByaW1pdGl2ZVZpZXc8VGltZXN0YW1wPiB7XG4gICAgcHVibGljIHRvQXJyYXkoKSB7IHJldHVybiBbLi4udGhpc107IH1cbiAgICBwcm90ZWN0ZWQgZ2V0VmFsdWUodmFsdWVzOiBJbnQzMkFycmF5LCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gZXBvY2hNaWNyb3NlY29uZHNMb25nVG9Ncyh2YWx1ZXMsIGluZGV4ICogc2l6ZSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBzZXRWYWx1ZSh2YWx1ZXM6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIsIHNpemU6IG51bWJlciwgZXBvY2hNczogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHZhbHVlc1tpbmRleCAqIHNpemVdID0gKChlcG9jaE1zIC8gMTAwMCkgJSA0Mjk0OTY3Mjk2KSB8IDA7XG4gICAgICAgIHZhbHVlc1tpbmRleCAqIHNpemUgKyBzaXplXSA9ICgoZXBvY2hNcyAvIDEwMDApIC8gNDI5NDk2NzI5NikgfCAwO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVzdGFtcE5hbm9zZWNvbmRWaWV3IGV4dGVuZHMgUHJpbWl0aXZlVmlldzxUaW1lc3RhbXA+IHtcbiAgICBwdWJsaWMgdG9BcnJheSgpIHsgcmV0dXJuIFsuLi50aGlzXTsgfVxuICAgIHByb3RlY3RlZCBnZXRWYWx1ZSh2YWx1ZXM6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIsIHNpemU6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBlcG9jaE5hbm9zZWNvbmRzTG9uZ1RvTXModmFsdWVzLCBpbmRleCAqIHNpemUpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgc2V0VmFsdWUodmFsdWVzOiBJbnQzMkFycmF5LCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIsIGVwb2NoTXM6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB2YWx1ZXNbaW5kZXggKiBzaXplXSA9ICgoZXBvY2hNcyAvIDEwMDAwMDApICUgNDI5NDk2NzI5NikgfCAwO1xuICAgICAgICB2YWx1ZXNbaW5kZXggKiBzaXplICsgc2l6ZV0gPSAoKGVwb2NoTXMgLyAxMDAwMDAwKSAvIDQyOTQ5NjcyOTYpIHwgMDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnRlcnZhbFllYXJNb250aFZpZXcgZXh0ZW5kcyBQcmltaXRpdmVWaWV3PEludGVydmFsPiB7XG4gICAgcHVibGljIHRvQXJyYXkoKSB7IHJldHVybiBbLi4udGhpc107IH1cbiAgICBwcm90ZWN0ZWQgZ2V0VmFsdWUodmFsdWVzOiBJbnQzMkFycmF5LCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIpOiBJbnQzMkFycmF5IHtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSB2YWx1ZXNbaW5kZXggKiBzaXplXTtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KFtpbnRlcnZhbCAvIDEyLCAvKiB5ZWFycyAqLyBpbnRlcnZhbCAlIDEyICAvKiBtb250aHMgKi9dKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHNldFZhbHVlKHZhbHVlczogSW50MzJBcnJheSwgaW5kZXg6IG51bWJlciwgc2l6ZTogbnVtYmVyLCB2YWx1ZTogSW50MzJBcnJheSk6IHZvaWQge1xuICAgICAgICB2YWx1ZXNbaW5kZXggKiBzaXplXSA9ICh2YWx1ZVswXSAqIDEyKSArICh2YWx1ZVsxXSAlIDEyKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnRlcnZhbFllYXJWaWV3IGV4dGVuZHMgUHJpbWl0aXZlVmlldzxJbnQzMj4ge1xuICAgIHB1YmxpYyB0b0FycmF5KCkgeyByZXR1cm4gWy4uLnRoaXNdOyB9XG4gICAgcHJvdGVjdGVkIGdldFZhbHVlKHZhbHVlczogSW50MzJBcnJheSwgaW5kZXg6IG51bWJlciwgc2l6ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlc1tpbmRleCAqIHNpemVdIC8gMTI7XG4gICAgfVxuICAgIHByb3RlY3RlZCBzZXRWYWx1ZSh2YWx1ZXM6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIsIHNpemU6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB2YWx1ZXNbaW5kZXggKiBzaXplXSA9ICh2YWx1ZSAqIDEyKSArICh2YWx1ZXNbaW5kZXggKiBzaXplXSAlIDEyKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnRlcnZhbE1vbnRoVmlldyBleHRlbmRzIFByaW1pdGl2ZVZpZXc8SW50MzI+IHtcbiAgICBwdWJsaWMgdG9BcnJheSgpIHsgcmV0dXJuIFsuLi50aGlzXTsgfVxuICAgIHByb3RlY3RlZCBnZXRWYWx1ZSh2YWx1ZXM6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIsIHNpemU6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB2YWx1ZXNbaW5kZXggKiBzaXplXSAlIDEyO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgc2V0VmFsdWUodmFsdWVzOiBJbnQzMkFycmF5LCBpbmRleDogbnVtYmVyLCBzaXplOiBudW1iZXIsIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdmFsdWVzW2luZGV4ICogc2l6ZV0gPSAodmFsdWVzW2luZGV4ICogc2l6ZV0gKiAxMikgKyAodmFsdWUgJSAxMik7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXBvY2hTZWNvbmRzVG9NcyhkYXRhOiBJbnQzMkFycmF5LCBpbmRleDogbnVtYmVyKSB7IHJldHVybiAxMDAwICogZGF0YVtpbmRleF07IH1cbmV4cG9ydCBmdW5jdGlvbiBlcG9jaERheXNUb01zKGRhdGE6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIpIHsgcmV0dXJuIDg2NDAwMDAwICogZGF0YVtpbmRleF07IH1cbmV4cG9ydCBmdW5jdGlvbiBlcG9jaE1pbGxpc2Vjb25kc0xvbmdUb01zKGRhdGE6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIpIHsgcmV0dXJuIDQyOTQ5NjcyOTYgKiAoZGF0YVtpbmRleCArIDFdKSArIChkYXRhW2luZGV4XSA+Pj4gMCk7IH1cbmV4cG9ydCBmdW5jdGlvbiBlcG9jaE1pY3Jvc2Vjb25kc0xvbmdUb01zKGRhdGE6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIpIHsgcmV0dXJuIDQyOTQ5NjcyOTYgKiAoZGF0YVtpbmRleCArIDFdIC8gMTAwMCkgKyAoKGRhdGFbaW5kZXhdID4+PiAwKSAvIDEwMDApOyB9XG5leHBvcnQgZnVuY3Rpb24gZXBvY2hOYW5vc2Vjb25kc0xvbmdUb01zKGRhdGE6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIpIHsgcmV0dXJuIDQyOTQ5NjcyOTYgKiAoZGF0YVtpbmRleCArIDFdIC8gMTAwMDAwMCkgKyAoKGRhdGFbaW5kZXhdID4+PiAwKSAvIDEwMDAwMDApOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBlcG9jaE1pbGxpc2Vjb25kc1RvRGF0ZShlcG9jaE1zOiBudW1iZXIpIHsgcmV0dXJuIG5ldyBEYXRlKGVwb2NoTXMpOyB9XG5leHBvcnQgZnVuY3Rpb24gZXBvY2hEYXlzVG9EYXRlKGRhdGE6IEludDMyQXJyYXksIGluZGV4OiBudW1iZXIpIHsgcmV0dXJuIGVwb2NoTWlsbGlzZWNvbmRzVG9EYXRlKGVwb2NoRGF5c1RvTXMoZGF0YSwgaW5kZXgpKTsgfVxuZXhwb3J0IGZ1bmN0aW9uIGVwb2NoU2Vjb25kc1RvRGF0ZShkYXRhOiBJbnQzMkFycmF5LCBpbmRleDogbnVtYmVyKSB7IHJldHVybiBlcG9jaE1pbGxpc2Vjb25kc1RvRGF0ZShlcG9jaFNlY29uZHNUb01zKGRhdGEsIGluZGV4KSk7IH1cbmV4cG9ydCBmdW5jdGlvbiBlcG9jaE5hbm9zZWNvbmRzTG9uZ1RvRGF0ZShkYXRhOiBJbnQzMkFycmF5LCBpbmRleDogbnVtYmVyKSB7IHJldHVybiBlcG9jaE1pbGxpc2Vjb25kc1RvRGF0ZShlcG9jaE5hbm9zZWNvbmRzTG9uZ1RvTXMoZGF0YSwgaW5kZXgpKTsgfVxuZXhwb3J0IGZ1bmN0aW9uIGVwb2NoTWlsbGlzZWNvbmRzTG9uZ1RvRGF0ZShkYXRhOiBJbnQzMkFycmF5LCBpbmRleDogbnVtYmVyKSB7IHJldHVybiBlcG9jaE1pbGxpc2Vjb25kc1RvRGF0ZShlcG9jaE1pbGxpc2Vjb25kc0xvbmdUb01zKGRhdGEsIGluZGV4KSk7IH1cbiJdfQ==
