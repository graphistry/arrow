{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","util/buffer.ts","util/compat.ts","io/interfaces.ts","io/adapters.ts","flatbuffers/js/flatbuffers.mjs","util/utf8.ts","text-encoding-utf-8/lib/encoding.lib.mjs","buffer/index.js","(webpack)/buildin/global.js","base64-js/index.js","ieee754/index.js","isarray/index.js","fb/Schema.ts","fb/Message.ts","vector.ts","enum.ts","fb/File.ts","util/bit.ts","data.ts","visitor.ts","visitor/typecomparator.ts","type.ts","util/pretty.ts","vector/row.ts","util/vector.ts","vector/chunked.ts","column.ts","util/args.ts","schema.ts","ipc/metadata/file.ts","vector/base.ts","vector/binary.ts","vector/bool.ts","util/int.ts","vector/date.ts","vector/decimal.ts","vector/dictionary.ts","vector/fixedsizebinary.ts","vector/fixedsizelist.ts","vector/float.ts","vector/interval.ts","vector/int.ts","vector/list.ts","vector/map.ts","vector/null.ts","vector/struct.ts","vector/timestamp.ts","vector/time.ts","vector/union.ts","vector/utf8.ts","util/bn.ts","visitor/get.ts","visitor/set.ts","visitor/indexof.ts","visitor/iterator.ts","visitor/toarray.ts","visitor/bytewidth.ts","visitor/vectorctor.ts","vector/index.ts","util/recordbatch.ts","visitor/typeassembler.ts","ipc/metadata/json.ts","ipc/metadata/message.ts","io/stream.ts","io/file.ts","ipc/message.ts","visitor/vectorassembler.ts","visitor/jsontypeassembler.ts","visitor/jsonvectorassembler.ts","ipc/writer.ts","table.ts","recordbatch.ts","visitor/vectorloader.ts","ipc/reader.ts","compute/predicate.ts","compute/dataframe.ts","Arrow.ts","Arrow.dom.ts","ipc/whatwg/iterable.ts","ipc/whatwg/reader.ts","ipc/whatwg/writer.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","memcpy","joinUint8Arrays","toArrayBufferView","toInt8Array","toInt16Array","toInt32Array","toBigInt64Array","toUint8Array","toUint16Array","toUint32Array","toBigUint64Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","toFloat16Array","toArrayBufferViewIterator","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","compareArrayLike","flatbuffers__WEBPACK_IMPORTED_MODULE_0__","_util_utf8__WEBPACK_IMPORTED_MODULE_1__","_compat__WEBPACK_IMPORTED_MODULE_2__","ByteBuffer","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","target","source","targetByteOffset","sourceByteLength","byteLength","targetByteLength","dst","Uint8Array","buffer","byteOffset","src","Math","min","set","chunks","size","sliced","result","xOffset","yOffset","xLen","yLen","x","y","j","length","collapseContiguousByteRanges","reduce","b","offset","index","Infinity","subarray","slice","ArrayBufferViewCtor","input","constructor","BYTES_PER_ELEMENT","bytes","isView","from","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","Uint8ClampedArray","floats","u16s","pump","iterator","next","ArrayCtor","wrap","buffers","it","done","async","emit","asyncIterator","valueOffsets","a","BigIntCtor","BigIntAvailable","BigInt64ArrayCtor","BigUint64ArrayCtor","isPromise","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isWritableDOMStream","isReadableDOMStream","isWritableNodeStream","isReadableNodeStream","_io_interfaces__WEBPACK_IMPORTED_MODULE_0__","BigIntUnavailableError","Error","BigIntUnavailable","asIntN","asUintN","BigInt","BigInt64ArrayAvailable","BigInt64ArrayUnavailableError","BigInt64Array","[object Object]","BigUint64ArrayAvailable","BigUint64ArrayUnavailableError","BigUint64Array","isNumber","isBoolean","isFunction","isObject","then","ITERATOR_DONE","ArrowJSON","ReadableInterop","AsyncQueue","_adapters__WEBPACK_IMPORTED_MODULE_0__","freeze","_json","this","schema","batches","dictionaries","_getDOMStream","tee","writable","options","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","super","_values","resolvers","_closedPromise","Promise","_closedPromiseResolve","closed","reason","return","_ensureOpen","push","shift","resolve","_error","error","reject","undefined","_","abort","close","_args","_util_buffer__WEBPACK_IMPORTED_MODULE_0__","fromIterable","cmd","threw","bufferLength","byteRange","isNaN","e","throw","fromAsyncIterable","fromDOMStream","AdaptiveByteReader","releaseLock","fromNodeStream","stream","events","event","err","onEvent","race","map","isFinite","evt","fn","destroy","cleanup","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","read","readInto","handler","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","position","prep","additional_bytes","align_size","capacity","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","Buffer","decodeUtf8","encodeUtf8","_buffer__WEBPACK_IMPORTED_MODULE_0__","text_encoding_utf_8__WEBPACK_IMPORTED_MODULE_1__","_Buffer","useNativeEncoders","TextDecoder","TextEncoder","decoder","decode","toString","encoder","encode","inRange","max","ToDictionary","TypeError","end_of_stream","Stream","tokens","endOfStream","prepend","token","Array","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","bite","code_point","UTF8Encoder","count","temp","input_stream","code_points","apply","indexOf","cp","codePointsToString","opt_string","string","u","stringToCodePoints","global","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","array","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","isBuffer","checked","copy","val","type","data","fromObject","assertSize","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","buf","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","concat","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","match","join","thisStart","thisEnd","thisCopy","targetCopy","includes","toJSON","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","g","Function","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","Schema_org","arrow","apache","org","Message_org","AbstractVector","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","VectorType","Endianness","Null","__init","builder","Struct_","List","FixedSizeList","listSize","Map","keysSorted","Union","Sparse","typeIdsOffset","numElems","Int","bitWidth","isSigned","FloatingPoint","HALF","precision","Utf8","Binary","FixedSizeBinary","byteWidth","Bool","Decimal","scale","Date","MILLISECOND","unit","Time","Timestamp","SECOND","optionalEncoding","timezoneOffset","Interval","YEAR_MONTH","VectorLayout","OFFSET","KeyValue","keyOffset","valueOffset","DictionaryEncoding","id","indexTypeOffset","isOrdered","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","layoutOffset","customMetadataOffset","Schema","Little","endianness","fieldsOffset","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","DictionaryBatch","dataOffset","isDelta","Message","V1","version","headerType","headerOffset","bodyLength","File_org","ArrowType","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","metaDataLength","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","iterateBits","values","xs","begin","context","byteIndex","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","cnt","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","kUnknownNullCount","data_Data","nullCount","childData","_nullCount","stride","typeIds","nullBitmap","typeId","ArrayType","childStride","_sliceBuffers","clone","_sliceChildren","newLength","VALIDITY","TYPE","DATA","child","Dictionary","Float","Struct","util_buffer","indices","children","valueOffsetsOrChildren","Visitor","nodes","args","node","visit","getVisitFn","throwIfNotFound","visitor","dtype","inferDType","type_DataType","visitNull","visitBool","visitInt","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","_node","SINGLE","DOUBLE","MICROSECOND","NANOSECOND","DAY","DAY_TIME","Dense","typecomparator_TypeComparator","instance","compareFields","fields","others","every","f","compareField","compareConstructor","compareAny","compareInt","compareFloat","compareDate","compareTimestamp","timezone","compareTime","compareUnion","compareInterval","dictionary","proto","type_Null","type_Int_","type_Float","type_Float16","type_Float32","type_Float64","type_Binary","type_Utf8","type_Bool","type_Decimal","type_Date_","type_DateDay","type_DateMillisecond","type_Time_","type_TimeSecond","type_TimeMillisecond","type_TimeMicrosecond","type_TimeNanosecond","type_Timestamp_","type_TimestampSecond","type_TimestampMillisecond","type_TimestampMicrosecond","type_TimestampNanosecond","type_Interval_","type_IntervalDayTime","type_IntervalYearMonth","type_List","valueType","valueField","type_Struct","type_Union_","typeIdToChildIndex","idx","type_DenseUnion","type_SparseUnion","type_FixedSizeBinary","type_FixedSizeList","type_Map_","getId","atomicDictionaryId","type_Dictionary","dictionaryVector","undf","valueToString","toPrimitive","JSON","stringify","kLength","for","kParent","kRowIndex","columnDescriptor","rowLengthDescriptor","rowParentDescriptor","row_Row","isStruct","getOwnPropertyNames","props","prop","row_RowProxyGenerator","parent","fieldsAreEnumerable","forEach","columnIndex","_bindGetter","rowPrototype","schemaOrFields","keys","schema_Field","getChildAt","rowIndex","bound","clampIndex","adjust","clampRange","big0","compat","createElementComparator","search","typeofSearch","valueOfSearch","valueOf","fns","createArrayLikeComparator","C","createRowComparator","createVectorComparator","createObjectKeysComparator","chunked_Chunked","offsets","vectors","calculateOffsets","_type","_chunks","_chunkOffsets","_length","_numChildren","selectChunkArgs","flatten","numChildren","isDictionary","_indices","chunk","_sliceInternal","columns","_children","vector","filter","vec","mid","isValidInternal","getInternal","element","self","indexOfInternal","toArray","arraySet","typedSet","isValid","chunkIndex","fromIndex","slices","chunkOffsets","chunkLength","chunkOffset","to","column_Column","_field","SingleChunkColumn","rest","new","some","metadata","column","_chunk","selectArgs","Ctor","vals","_selectArgs","selectColumnArgs","_selectFieldArgs","selectFieldArgs","_selectChunkArgs","selectVectorChildrenArgs","_selectVectorChildrenArgs","selectColumnChildrenArgs","_selectColumnChildrenArgs","toKeysAndValues","k","v","entries","fieldIndex","valueIndex","schema_Schema","dictionaryFields","generateDictionaryMap","compareSchemas","columnNames","names","columnIndices","Boolean","curFields","curDictionaries","curDictionaryFields","mergeMaps","newFields","f2","findIndex","newDictionaries","newDictionaryFields","newDictFields","m1","m2","has","_Block","_Footer","file_Footer_","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","footer","getRootAsFooter","OffHeapFooter","startRecordBatchesVector","numRecordBatches","reverse","rb","FileBlock","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","finishFooterBuffer","endFooter","block","getRecordBatch","getDictionaryBatch","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","base_BaseVector","_bindDataAccessors","VectorName","isConcatSpreadable","binary_BinaryVector","bool_BoolVector","carryBit16","intAsHex","kInt32DecimalDigits","kPowersOfTen","BaseInt64","L","R","product","lessThan","int_Uint64","_times","_plus","out_buffer","posn","group","multiple","times","plus","left","right","int_Int64","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","date_DateVector","convertArray","DateDayVector","DateMillisecondVector","decimal_DecimalVector","dictionary_DictionaryVector","fixedsizebinary_FixedSizeBinaryVector","fixedsizelist_FixedSizeListVector","float_FloatVector","Float16Vector","Float32Vector","Float64Vector","interval_IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","int_IntVector","is64","Int8Vector","Int16Vector","Int32Vector","int_Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","int_Uint64Vector","list_ListVector","map_MapVector","rowProxy","_rowProxy","null_NullVector","struct_StructVector","timestamp_TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","time_TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","union_UnionVector","DenseUnionVector","SparseUnionVector","utf8_Utf8Vector","BigNumNMixin","bignumToString","bignumToNumber","hint","bignumToBigInt","SignedBigNumNMixin","assign","signed","BigIntArray","UnsignedBigNumNMixin","bn_BN","unsigned","bn","int64","words","decimalToString","digits","base32","checks","get_GetVisitor","epochMillisecondsLongToMs","epochMillisecondsToDate","epochMs","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getBigInts","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getNested","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","getValue","getKey","get_instance","set_SetVisitor","setEpochMsToMillisecondsLong","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setNested","kid","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","setValue","set_instance","indexof_IndexOfVisitor","indexOfValue","searchElement","indexOfNull","indexOfUnion","indexof_instance","iterator_IteratorVisitor","vectorIterator","getFn","nullByte","nullBit","nullableIterator","iterator_instance","toarray_ToArrayVisitor","arrayOfVector","toarray_instance","variableWidthColumnErrorMessage","bytewidth_instance","____","visitFields","vectorctor_instance","partial0","partial2","getByteWidth","wrapNullableSet","T","VectorCtor","partial1","partialType0","noopBuf","nullBufs","bitmapLength","distributeVectorsIntoRecordBatches","vecs","batchArgs","memo","numBatches","batchLength","numColumns","Number","distributeChildData","recordbatch_RecordBatch","uniformlyDistributeChunksAcrossRecordBatches","_changeLengthAndBackfillNullBitmap","typeassembler_Long","typeassembler_Null","typeassembler_Binary","typeassembler_Bool","typeassembler_Utf8","typeassembler_Decimal","typeassembler_Date","typeassembler_List","typeassembler_Struct","typeassembler_FixedSizeBinary","typeassembler_FixedSizeList","typeassembler_Map_","typeassembler_instance","startNull","endNull","startInt","addBitWidth","addIsSigned","endInt","startFloatingPoint","addPrecision","endFloatingPoint","startBinary","endBinary","startBool","endBool","startUtf8","endUtf8","startDecimal","addScale","endDecimal","startDate","addUnit","endDate","startTime","endTime","startTimestamp","addTimezone","endTimestamp","startInterval","endInterval","startList","endList","startStruct_","endStruct_","startTypeIdsVector","createTypeIdsVector","startUnion","addMode","addTypeIds","endUnion","indexType","startDictionaryEncoding","addId","addIsOrdered","addIndexType","endDictionaryEncoding","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startFixedSizeList","addListSize","endFixedSizeList","startMap","addKeysSorted","endMap","recordBatchFromJSON","message_RecordBatch","fieldNodesFromJSON","fieldNodes","nullCountFromJSON","buffersFromJSON","BufferRegion","fieldChildrenFromJSON","fromJSON","validity","customMetadataFromJSON","_metadata","indexTypeFromJSON","typeFromJSON","message_Long","message_Builder","message_ByteBuffer","message_Type","_Field","_Schema","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","message_Message","header","_version","_headerType","body","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","startMessage","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","_nodes","_buffers","_id","_isDelta","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","startKeyValue","addKey","addValue","endKeyValue","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","addCustomMetadata","endField","dictType","dictMeta","dictField","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","startSchema","addFields","addEndianness","platformIsLittleEndian","Big","endSchema","_schema","fieldsLength","decodeSchemaFields","schemaFieldsFromJSON","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","batch","nodesLength","decodeFieldNodes","bufferRegions","buffersLength","decodeBuffers","dictionaryBatch","startDictionaryBatch","addIsDelta","addData","endDictionaryBatch","createFieldNode","setInt16","stream_AsyncByteQueue","interfaces","sync","stream_ByteStream","stream_ByteStreamSource","adapters","peek","stream_AsyncByteStream","stream_AsyncByteStreamSource","cancel","file_RandomAccessFile","readAt","getInt32","file_AsyncRandomAccessFile","file","_handle","_pending","stat","bytesRead","ipc_message_ByteBuffer","invalidMessageType","nullMessage","invalidMessageMetadata","expected","invalidMessageBodyLength","message_MessageReader","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","message_AsyncMessageReader","message_JSONMessageReader","_body","_batchIndex","_dictionaryIndex","flattenDataSources","MAGIC","MAGIC_STR","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","vectorassembler_VectorAssembler","_bufferRegions","assembler","vectorChildren","assembleResult","visitMany","addBuffer","_nullV","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childIndex","childLength","jsontypeassembler_JSONTypeAssembler","jsonvectorassembler_JSONVectorAssembler","bigNumsToStrings","binaryToString","octets","toUpperCase","writer_RecordBatchWriter","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_autoDestroy","autoDestroy","writableStrategy","readableStrategy","writeAll","writer","writeAllAsync","table_Table","reset","sink","objectMode","_writeFooter","compareTo","_writeSchema","payload","_writeRecordBatch","flatbufferSize","nPaddingBytes","_write","of","_writePadding","_writeMessage","_writeDictionaries","records","assemble","_writeBodyBuffers","padding","_writeDictionaryBatch","RecordBatchStreamWriter","writer_RecordBatchFileWriter","_writeMagic","writer_RecordBatchJSONWriter","fieldToJSON","dictionaryBatchToJSON","recordBatchToJSON","empty","reader_RecordBatchReader","isSync","open","opening","struct","cols","numCols","getColumnAt","getColumnIndex","nameToIndex","selectAt","columnName","oldToNew","newIdx","_f","_fs","fs","vs","batchData","ensureSameLengthData","vectorloader_VectorLoader","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","readTypeIds","nextBufferRange","vectorloader_JSONVectorLoader","sources","isTimestamp","isInt","isTime","isDate","isDecimal","isBinary","isFixedSizeBinary","joined","binaryDataFromJSON","isBool","isUtf8","impl","_impl","isFile","isAsync","isStream","readRecordBatch","RecordBatchStreamReader","reader_RecordBatchJSONReaderImpl","fromArrowJSON","AsyncRecordBatchFileReader","reader_AsyncRecordBatchFileReaderImpl","AsyncRecordBatchStreamReader","reader_AsyncRecordBatchStreamReaderImpl","fromFileHandle","RecordBatchFileReader","reader_RecordBatchFileReaderImpl","fromAsyncByteStream","reader_RecordBatchStreamReaderImpl","fromByteStream","readAllSync","readAllAsync","reader_RecordBatchReaderImpl","_recordBatchIndex","_loadVectors","types","_reader","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","_readFooter","_readDictionaryBatch","seek","Value","Literal","predicate_Equals","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","func","CustomPredicate","bind_","predicate_lit","predicate_col","and","or","custom","countBy","dataframe_DataFrame","scan","predicate","dataframe_FilteredDataFrame","batchIndex","numRows","count_by","countByteLength","ceil","counts","dataframe_CountByResult","_predicate","util","int_namespaceObject","bit_namespaceObject","util_vector_namespaceObject","predicate_namespaceObject","bm","hwm","highWaterMark","ReadableStream","controller","desiredSize","enqueue","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable","WritableStream"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue x and y don't share the same underlying ArrayBuffer\n        if (!x || !y || x.buffer !== y.buffer) {\n            y && (result[++j] = y);\n            continue;\n        }\n        // swap if y starts before x\n        if (y.byteOffset < x.byteOffset) {\n            x = chunks[i]; y = result[j];\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBufferViewCtor) {\n        return value.constructor === ArrayBufferViewCtor ? value :\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n    }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\nexport const toFloat16Array = (input: ArrayBufferViewInput) => {\n    let floats: Float32Array | Float64Array | null = null;\n    if (ArrayBuffer.isView(input)) {\n        switch (input.constructor) {\n            case Float32Array: floats = input as Float32Array; break;\n            case Float64Array: floats = input as Float64Array; break;\n        }\n    } else if (isIterable(input)) {\n        floats = toFloat64Array(input);\n    }\n    if (floats) {\n        const u16s = new Uint16Array(floats.length);\n        for (let i = -1, n = u16s.length; ++i < n;) {\n            u16s[i] = (floats[i] * 32767) + 32767;\n        }\n        return u16s;\n    }\n    return toUint16Array(input);\n};\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['tee']) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['pipeTo']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    private _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    private _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder();\n        return decoder.decode.bind(decoder);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return encoder.encode.bind(encoder);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends Vector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends Vector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nexport { AbstractVector as Vector };\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\nexport enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n\n    // These enum values are here so that TypeScript can narrow the type signatures further\n    // beyond the base Arrow types. The base Arrow types include metadata like bitWidths that\n    // impact the type signatures of the values we return. For example, the Int8Vector reads\n    // 1-byte numbers from an Int8Array, an Int32Vector reads a 4-byte number from an Int32Array,\n    // and an Int64Vector reads a pair of 4-byte lo, hi int32s, and returns them as a zero-copy\n    // slice from an underlying Int32Array. Library consumers benefit by doing this type narrowing,\n    // since we can ensure the types across all public methods are propagated and never bail to `any`.\n    // These values are _never_ actually used at runtime, and they will _never_ be written into the\n    // flatbuffers metadata of serialized Arrow IPC payloads.\n    Dictionary            = -1, // Dictionary aka Category type\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { DataType, SparseUnion, DenseUnion } from './type';\nimport { VectorType as BufferType, UnionMode, Type } from './enum';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number>;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number>;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number>;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n    public readonly values: Buffers<T>[BufferType.DATA];\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[]) {\n        this.type = type;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n            const t: any = type;\n            switch (type.typeId) {\n                case Type.Decimal: this.stride = 4; break;\n                case Type.Timestamp: this.stride = 2; break;\n                case Type.Date: this.stride = 1 + (t as Date_).unit; break;\n                case Type.Interval: this.stride = 1 + (t as Interval).unit; break;\n                case Type.Int: this.stride = 1 + +((t as Int).bitWidth > 32); break;\n                case Type.Time: this.stride = 1 + +((t as Time).bitWidth > 32); break;\n                case Type.FixedSizeList: this.stride = (t as FixedSizeList).listSize; break;\n                case Type.FixedSizeBinary: this.stride = (t as FixedSizeBinary).byteWidth; break;\n                default: this.stride = 1;\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const { stride, typeId, childData } = this;\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[]): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length, nullCount || 0, buffers[2]) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[2], buffers[0] || [], buffers[1] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[2], buffers[0] || [], buffers[1] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[2], buffers[0] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[2], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[2], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[2], childData || []) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[2], buffers[3] || [], buffers[1] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, _data?: NullBuffer) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data | Vector) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n((Data.prototype as any).childData = Object.freeze([]));\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: Vector<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { Vector as VType, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<T[keyof T]['TValue'] | null> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\nexport class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number;      };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number;      };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number;      };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: Int32Array;  };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number;      };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number;      };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number;      };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: Uint32Array; };\n};\n\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: typeof Uint8Array; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: typeof Uint8Array; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: typeof Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: typeof Int32Array; }\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: typeof Int32Array; }\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: typeof Int32Array; }\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: typeof Int32Array; }\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: VType<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    constructor(public readonly children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<[${this.children.map((f) => f.type).join(`, `)}]>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int32Array; TValue: any[]; }\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: typeof Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: VType<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\nexport interface Map_<T extends { [key: string]: DataType } = any> extends DataType<Type.Map> { TArray: Uint8Array; TValue: RowLike<T>; dataTypes: T; }\nexport class Map_<T extends { [key: string]: DataType } = any> extends DataType<Type.Map, T> {\n    constructor(public readonly children: Field<T[keyof T]>[],\n                public readonly keysSorted: boolean = false) {\n        super();\n    }\n    public get typeId() { return Type.Map as Type.Map; }\n    public toString() { return `Map<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    public dictionaryVector: Vector<T>;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null, dictionaryVector?: Vector<T>) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.dictionaryVector = dictionaryVector!;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        (<any> proto).dictionaryVector = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { MapVector } from '../vector/map';\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { StructVector } from '../vector/struct';\n\n/** @ignore */ export const kLength = Symbol.for('length');\n/** @ignore */ export const kParent = Symbol.for('parent');\n/** @ignore */ export const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const columnDescriptor = { enumerable: true, configurable: false, get: null as any };\n/** @ignore */ const rowLengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };\n/** @ignore */ const rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null as any };\n\nexport class Row<T extends { [key: string]: DataType }> implements Iterable<T[keyof T]['TValue']> {\n    [key: string]: T[keyof T]['TValue'];\n    // @ts-ignore\n    public [kParent]: MapVector<T> | StructVector<T>;\n    // @ts-ignore\n    public [kRowIndex]: number;\n    // @ts-ignore\n    public readonly [kLength]: number;\n    *[Symbol.iterator]() {\n        for (let i = -1, n = this[kLength]; ++i < n;) {\n            yield this[i];\n        }\n    }\n    public get<K extends keyof T>(key: K) { return (this as any)[key] as T[K]['TValue']; }\n    public toJSON(): any {\n        return DataType.isStruct(this[kParent].type) ? [...this] :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = (this as any)[prop]) && props || props;\n            }, {});\n    }\n    public toString() {\n        return DataType.isStruct(this[kParent].type) ?\n            [...this].map((x) => valueToString(x)).join(', ') :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = valueToString((this as any)[prop])) && props || props;\n            }, {});\n    }\n}\n\n/** @ignore */\nexport class RowProxyGenerator<T extends { [key: string]: DataType }> {\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType }>(parent: MapVector<T> | StructVector<T>, schemaOrFields: T | Field[], fieldsAreEnumerable = false): RowProxyGenerator<T> {\n        let schema: T, fields: Field[];\n        if (Array.isArray(schemaOrFields)) {\n            fields = schemaOrFields;\n        } else {\n            schema = schemaOrFields;\n            fieldsAreEnumerable = true;\n            fields = Object.keys(schema).map((x) => new Field(x, schema[x]));\n        }\n        return new RowProxyGenerator<T>(parent, fields, fieldsAreEnumerable);\n    }\n\n    private rowPrototype: Row<T>;\n\n    private constructor(parent: MapVector<T> | StructVector<T>, fields: Field[], fieldsAreEnumerable: boolean) {\n        const proto = Object.create(Row.prototype);\n\n        rowParentDescriptor.value = parent;\n        rowLengthDescriptor.value = fields.length;\n        Object.defineProperty(proto, kParent, rowParentDescriptor);\n        Object.defineProperty(proto, kLength, rowLengthDescriptor);\n        fields.forEach((field, columnIndex) => {\n            if (!proto.hasOwnProperty(field.name)) {\n                columnDescriptor.enumerable = fieldsAreEnumerable;\n                columnDescriptor.get || (columnDescriptor.get = this._bindGetter(columnIndex));\n                Object.defineProperty(proto, field.name, columnDescriptor);\n            }\n            if (!proto.hasOwnProperty(columnIndex)) {\n                columnDescriptor.enumerable = !fieldsAreEnumerable;\n                columnDescriptor.get || (columnDescriptor.get = this._bindGetter(columnIndex));\n                Object.defineProperty(proto, columnIndex, columnDescriptor);\n            }\n            columnDescriptor.get = null as any;\n        });\n\n        this.rowPrototype = proto;\n    }\n\n    private _bindGetter(columnIndex: number) {\n        return function(this: Row<T>) {\n            const child = this[kParent].getChildAt(columnIndex);\n            return child ? child.get(this[kRowIndex]) : null;\n        };\n    }\n    public bind(rowIndex: number) {\n        const bound = Object.create(this.rowPrototype);\n        bound[kRowIndex] = rowIndex;\n        return bound;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Row, kLength } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Array-likes\n    if (Array.isArray(search)) {\n        return createArrayLikeComparator(search);\n    }\n    // Compare Rows\n    if (search instanceof Row) {\n        return createRowComparator(search);\n    }\n    // Compare Vectors\n    if (search instanceof Vector) {\n        return createVectorComparator(search);\n    }\n    // Compare non-empty Objects\n    const keys = Object.keys(search);\n    if (keys.length > 0) {\n        return createObjectKeysComparator(search, keys);\n    }\n    // No valid comparator\n    return () => false;\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(search: ArrayLike<any>) {\n    const n = search.length;\n    const fns = [] as ((x: any) => boolean)[];\n    for (let i = -1; ++i < n;) {\n        fns[i] = createElementComparator((search as any)[i]);\n    }\n    return (value: any) => {\n        if (!value) { return false; }\n        // Handle the case where the search element is an Array, but the\n        // values are Rows or Vectors, e.g. list.indexOf(['foo', 'bar'])\n        if (value instanceof Row) {\n            if (value[kLength] !== n) { return false; }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value.get(i)))) { return false; }\n            }\n            return true;\n        }\n        if (value.length !== n) { return false; }\n        if (value instanceof Vector) {\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value.get(i)))) { return false; }\n            }\n            return true;\n        }\n        for (let i = -1; ++i < n;) {\n            if (!(fns[i](value[i]))) { return false; }\n        }\n        return true;\n    };\n}\n\n/** @ignore */\nfunction createRowComparator(search: Row<any>) {\n    const n = search[kLength];\n    const C = search.constructor as any;\n    const fns = [] as ((x: any) => boolean)[];\n    for (let i = -1; ++i < n;) {\n        fns[i] = createElementComparator(search.get(i));\n    }\n    return (value: any) => {\n        if (!(value instanceof C)) { return false; }\n        if (!(value[kLength] === n)) { return false; }\n        for (let i = -1; ++i < n;) {\n            if (!(fns[i](value.get(i)))) { return false; }\n        }\n        return true;\n    };\n}\n\n/** @ignore */\nfunction createVectorComparator(search: Vector<any>) {\n    const n = search.length;\n    const C = search.constructor as any;\n    const fns = [] as ((x: any) => boolean)[];\n    for (let i = -1; ++i < n;) {\n        fns[i] = createElementComparator((search as any).get(i));\n    }\n    return (value: any) => {\n        if (!(value instanceof C)) { return false; }\n        if (!(value.length === n)) { return false; }\n        for (let i = -1; ++i < n;) {\n            if (!(fns[i](value.get(i)))) { return false; }\n        }\n        return true;\n    };\n}\n\n/** @ignore */\nfunction createObjectKeysComparator(search: any, keys: string[]) {\n    const n = keys.length;\n    const fns = [] as ((x: any) => boolean)[];\n    for (let i = -1; ++i < n;) {\n        fns[i] = createElementComparator(search[keys[i]]);\n    }\n    return (value: any) => {\n        if (!value || typeof value !== 'object') { return false; }\n        for (let i = -1; ++i < n;) {\n            if (!(fns[i](value[keys[i]]))) { return false; }\n        }\n        return true;\n    };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { selectChunkArgs } from '../util/args';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? T['dictionaryVector'] : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return (<any> this._type.dictionaryVector) as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let { ArrayType } = this._type;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new (ArrayType as any)(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset - 1;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[++idx] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { VectorCtorArgs, Vector as V } from './interfaces';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, chunks.some(({ nullCount }) => nullCount > 0));\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, val.nullCount > 0);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, val.nullCount > 0) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { selectArgs } from './util/args';\nimport { DataType, Dictionary } from './type';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n    public readonly dictionaryFields: Map<number, Field<Dictionary>[]>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null,\n                dictionaryFields?: Map<number, Field<Dictionary>[]> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries || !dictionaryFields) {\n            ({ dictionaries, dictionaryFields } = generateDictionaryMap(\n                fields, dictionaries || new Map(), dictionaryFields || new Map()\n            ));\n        }\n        this.dictionaries = dictionaries;\n        this.dictionaryFields = dictionaryFields;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const curDictionaries = [...this.dictionaries];\n        const curDictionaryFields = this.dictionaryFields;\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const { dictionaries, dictionaryFields } = generateDictionaryMap(newFields, new Map(), new Map());\n        const newDictionaries = [...dictionaries].filter(([y]) => !curDictionaries.every(([x]) => x === y));\n        const newDictionaryFields = [...dictionaryFields].map(([id, newDictFields]) => {\n            return [id, [...(curDictionaryFields.get(id) || []), ...newDictFields.map((f) => {\n                const i = newFields.findIndex((f2) => f.name === f2.name);\n                const { dictionary, indices, isOrdered, dictionaryVector } = f.type;\n                const type = new Dictionary(dictionary, indices, id, isOrdered, dictionaryVector);\n                return newFields[i] = f.clone({ type });\n            })]] as [number, Field<Dictionary>[]];\n        });\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...curDictionaries, ...newDictionaries]),\n            new Map([...curDictionaryFields, ...newDictionaryFields])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries: Map<number, DataType>, dictionaryFields: Map<number, Field<Dictionary>[]>) {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaryFields.get(type.id)) {\n                dictionaryFields.set(type.id, []);\n            }\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n                dictionaryFields.get(type.id)!.push(field as any);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children) {\n            generateDictionaryMap(type.children, dictionaries, dictionaryFields);\n        }\n    }\n\n    return { dictionaries, dictionaryFields };\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n(Schema.prototype as any).dictionaryFields = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { AbstractVector, Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { Vector as VType } from '../interfaces';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\nexport interface BaseVector<T extends DataType = any> extends Clonable<VType<T>>, Sliceable<VType<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): VType<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): VType<R>;\n}\n\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<VType<T>>, Sliceable<VType<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get VectorName() { return this.constructor.name; }\n\n    public get ArrayType(): T['ArrayType'] { return this.data.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    // @ts-ignore\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin));\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Bool } from '../type';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { packBools } from '../util/bit';\n\nexport class BoolVector extends BaseVector<Bool> {\n    /** @nocollapse */\n    public static from(data: Iterable<boolean>) {\n        let length = 0, bitmap = packBools(function*() {\n            for (let x of data) { length++; yield x; }\n        }());\n        return Vector.new(Data.Bool(new Bool(), 0, length, 0, null, bitmap));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DateUnit } from '../enum';\nimport { BaseVector } from './base';\nimport * as IntUtil from '../util/int';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    /** @nocollapse */\n    public static from<T extends Date_ = DateMillisecond>(data: Date[], unit: T['unit'] = DateUnit.MILLISECOND) {\n        switch (unit) {\n            case DateUnit.DAY: {\n                const values = Int32Array.from(data.map((d) => d.valueOf() / 86400000));\n                return Vector.new(Data.Date(new DateDay(), 0, data.length, 0, null, values));\n            }\n            case DateUnit.MILLISECOND: {\n                const values = IntUtil.Int64.convertArray(data.map((d) => d.valueOf()));\n                return Vector.new(Data.Date(new DateMillisecond(), 0, data.length, 0, null, values));\n            }\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[unit]}\"`);\n    }\n}\n\nexport class DateDayVector extends DateVector<DateDay> {}\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\nexport class DecimalVector extends BaseVector<Decimal> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { DataType, Dictionary, TKeys } from '../type';\n\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    /** @nocollapse */\n    public static from<T extends DataType<any>, TKey extends TKeys = TKeys>(\n        values: Vector<T>, indices: TKey,\n        keys: ArrayLike<number> | TKey['TArray']\n    ) {\n        const type = new Dictionary(values.type, indices, null, null, values);\n        return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys));\n    }\n    public readonly indices: V<TKey>;\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n    public get dictionary() { return this.data.type.dictionaryVector; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { Float, Float16, Float32, Float64 } from '../type';\nimport { toFloat16Array, toFloat32Array, toFloat64Array } from '../util/buffer';\n\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    public static from(this: typeof FloatVector, data: Float16['TArray']): Float16Vector;\n    public static from(this: typeof FloatVector, data: Float32['TArray']): Float32Vector;\n    public static from(this: typeof FloatVector, data: Float64['TArray']): Float64Vector;\n    public static from<T extends Float>(this: typeof FloatVector, data: T['TArray']): V<T>;\n\n    public static from(this: typeof Float16Vector, data: Float16['TArray'] | Iterable<number>): Float16Vector;\n    public static from(this: typeof Float32Vector, data: Float32['TArray'] | Iterable<number>): Float32Vector;\n    public static from(this: typeof Float64Vector, data: Float64['TArray'] | Iterable<number>): Float64Vector;\n    /** @nocollapse */\n    public static from<T extends Float>(data: T['TArray']) {\n        let type: Float | null = null;\n        switch (this) {\n            case Float16Vector: data = toFloat16Array(data); break;\n            case Float32Vector: data = toFloat32Array(data); break;\n            case Float64Vector: data = toFloat64Array(data); break;\n        }\n        switch (data.constructor) {\n            case Uint16Array:  type = new Float16(); break;\n            case Float32Array: type = new Float32(); break;\n            case Float64Array: type = new Float64(); break;\n        }\n        return type !== null\n            ? Vector.new(Data.Float(type, 0, data.length, 0, null, data))\n            : (() => { throw new TypeError('Unrecognized FloatVector input'); })();\n    }\n}\n\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\nexport class Float32Vector extends FloatVector<Float32> {}\nexport class Float64Vector extends FloatVector<Float64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\nimport {\n    toInt8Array, toInt16Array, toInt32Array,\n    toUint8Array, toUint16Array, toUint32Array,\n    toBigInt64Array, toBigUint64Array\n} from '../util/buffer';\n\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    public static from(this: typeof IntVector, data: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, data: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, data: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, data: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, data: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, data: Uint32Array): Uint32Vector;\n\n    // @ts-ignore\n    public static from(this: typeof IntVector, data: Int32Array, is64: true): Int64Vector;\n    public static from(this: typeof IntVector, data: Uint32Array, is64: true): Uint64Vector;\n    public static from<T extends Int>(this: typeof IntVector, data: T['TArray']): V<T>;\n\n    public static from(this: typeof Int8Vector,   data: Int8['TArray']   | Iterable<number>): Int8Vector;\n    public static from(this: typeof Int16Vector,  data: Int16['TArray']  | Iterable<number>): Int16Vector;\n    public static from(this: typeof Int32Vector,  data: Int32['TArray']  | Iterable<number>): Int32Vector;\n    public static from(this: typeof Int64Vector,  data: Int32['TArray']  | Iterable<number>): Int64Vector;\n    public static from(this: typeof Uint8Vector,  data: Uint8['TArray']  | Iterable<number>): Uint8Vector;\n    public static from(this: typeof Uint16Vector, data: Uint16['TArray'] | Iterable<number>): Uint16Vector;\n    public static from(this: typeof Uint32Vector, data: Uint32['TArray'] | Iterable<number>): Uint32Vector;\n    public static from(this: typeof Uint64Vector, data: Uint32['TArray'] | Iterable<number>): Uint64Vector;\n\n    /** @nocollapse */\n    public static from<T extends Int>(data: T['TArray'], is64?: boolean) {\n        let length: number = 0;\n        let type: Int | null = null;\n        switch (this) {\n            case Int8Vector:   data = toInt8Array(data);   is64 = false; break;\n            case Int16Vector:  data = toInt16Array(data);  is64 = false; break;\n            case Int32Vector:  data = toInt32Array(data);  is64 = false; break;\n            case Int64Vector:  data = toInt32Array(data);  is64 =  true; break;\n            case Uint8Vector:  data = toUint8Array(data);  is64 = false; break;\n            case Uint16Vector: data = toUint16Array(data); is64 = false; break;\n            case Uint32Vector: data = toUint32Array(data); is64 = false; break;\n            case Uint64Vector: data = toUint32Array(data); is64 =  true; break;\n        }\n        if (is64 === true) {\n            length = data.length * 0.5;\n            type = data instanceof Int32Array ? new Int64() : new Uint64();\n        } else {\n            length = data.length;\n            switch (data.constructor) {\n                case Int8Array:   type = new Int8();   break;\n                case Int16Array:  type = new Int16();  break;\n                case Int32Array:  type = new Int32();  break;\n                case Uint8Array:  type = new Uint8();  break;\n                case Uint16Array: type = new Uint16(); break;\n                case Uint32Array: type = new Uint32(); break;\n            }\n        }\n        return type !== null\n            ? Vector.new(Data.Int(type, 0, length, 0, null, data))\n            : (() => { throw new TypeError('Unrecognized IntVector input'); })();\n    }\n}\n\nexport class Int8Vector extends IntVector<Int8> {}\nexport class Int16Vector extends IntVector<Int16> {}\nexport class Int32Vector extends IntVector<Int32> {}\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n}\n\nexport class Uint8Vector extends IntVector<Uint8> {}\nexport class Uint16Vector extends IntVector<Uint16> {}\nexport class Uint32Vector extends IntVector<Uint32> {}\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n}\n\nexport interface Int64Vector extends IntVector<Int64> {\n    indexOf(value: Int64['TValue'] | bigint | null, fromIndex?: number): number;\n}\n\nexport interface Uint64Vector extends IntVector<Uint64> {\n    indexOf(value: Uint64['TValue'] | bigint | null, fromIndex?: number): number;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { RowProxyGenerator } from './row';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class MapVector<T extends { [key: string]: DataType } = any> extends BaseVector<Map_<T>> {\n    public asStruct() {\n        return Vector.new(this.data.clone(new Struct<T>(this.type.children as Field<T[keyof T]>[])));\n    }\n    // @ts-ignore\n    private _rowProxy: RowProxyGenerator<T>;\n    public get rowProxy(): RowProxyGenerator<T> {\n        return this._rowProxy || (this._rowProxy = RowProxyGenerator.new<T>(this, this.type.children || [], true));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { RowProxyGenerator } from './row';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    public asMap(keysSorted: boolean = false) {\n        return Vector.new(this.data.clone(new Map_<T>(this.type.children as Field<T[keyof T]>[], keysSorted)));\n    }\n    // @ts-ignore\n    private _rowProxy: RowProxyGenerator<T>;\n    public get rowProxy(): RowProxyGenerator<T> {\n        return this._rowProxy || (this._rowProxy = RowProxyGenerator.new<T>(this, this.type.children || [], false));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n}\n\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\n\nexport class Utf8Vector extends BaseVector<Utf8> {\n    /** @nocollapse */\n    public static from(values: string[]) {\n        const length = values.length;\n        const data = encodeUtf8(values.join(''));\n        const offsets = values.reduce((offsets, str, idx) => (\n            (!(offsets[idx + 1] = offsets[idx] + str.length) || true) && offsets\n        ), new Uint32Array(values.length + 1));\n        return Vector.new(Data.Utf8(new Utf8(), 0, length, 0, null, offsets, data));\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { toArrayBufferView, ArrayBufferViewInput } from './buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\ntype BigNumArray = IntArray | UintArray;\n/** @ignore */\ntype IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */\ntype UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nconst BigNumNMixin = {\n    toJSON(this: BN<BigNumArray>) { return `\"${bignumToString(this)}\"`; },\n    valueOf(this: BN<BigNumArray>) { return bignumToNumber(this); },\n    toString(this: BN<BigNumArray>) { return bignumToString(this); },\n    [Symbol.toPrimitive]<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default') {\n        switch (hint) {\n            case 'number': return bignumToNumber(this);\n            case 'string': return bignumToString(this);\n            case 'default': return bignumToBigInt(this);\n        }\n        return bignumToString(this);\n    }\n};\n\n/** @ignore */\nconst SignedBigNumNMixin: any = Object.assign({}, BigNumNMixin, { signed: true, BigIntArray: BigInt64Array });\n/** @ignore */\nconst UnsignedBigNumNMixin: any = Object.assign({}, BigNumNMixin, { signed: false, BigIntArray: BigUint64Array });\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    public static new<T extends BigNumArray>(input: ArrayBufferViewInput, signed?: boolean): T;\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(input: ArrayBufferViewInput, signed = (input instanceof Int8Array || input instanceof Int16Array || input instanceof Int32Array)): T {\n        return (signed === true) ? BN.signed(input) as T : BN.unsigned(input) as T;\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(input: ArrayBufferViewInput): T {\n        const Ctor: any = ArrayBuffer.isView(input) ? <any> input.constructor : Int32Array;\n        const { buffer, byteOffset, length } = toArrayBufferView<T>(<any> Ctor, input) as T;\n        const bn = new Ctor(buffer, byteOffset, length);\n        return Object.assign(bn, SignedBigNumNMixin);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(input: ArrayBufferViewInput): T {\n        const Ctor: any = ArrayBuffer.isView(input) ? <any> input.constructor : Uint32Array;\n        const { buffer, byteOffset, length } = toArrayBufferView<T>(<any> Ctor, input) as T;\n        const bn = new Ctor(buffer, byteOffset, length);\n        return Object.assign(bn, UnsignedBigNumNMixin);\n    }\n    constructor(input: ArrayBufferViewInput, signed = input instanceof Int32Array) {\n        return BN.new(input, signed) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmatic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint: any): number | string | bigint;\n}\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>({ buffer, byteOffset, length }: T) {\n    let int64 = 0;\n    let words = new Uint32Array(buffer, byteOffset, length);\n    for (let i = 0, n = words.length; i < n;) {\n        int64 += words[i++] + (words[i++] * (i ** 32));\n    }\n    return int64;\n}\n\n/** @ignore */\nlet bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nlet bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.length === 2 ? new a.BigIntArray(a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.length === 2 ? `${new a.BigIntArray(a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.length * 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { decodeUtf8 } from '../util/utf8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface GetVisitor extends Visitor {\n    visit<T extends Vector>  (node: T, index: number): T['TValue'];\n    visitMany<T extends Vector>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: Vector<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: Vector<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: Vector<T>, index: number): T['TValue'];\n}\n\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: Vector<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: Vector<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number): T['TValue'] => (values[stride * index] - 32767) / 32767;\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(<any> vector, index)\n        : getBigInts(<any> vector, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as any, index)\n        : getFloat16(vector as any, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as any, index)\n        : getDateMillisecond(vector as any, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as Vector<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as Vector<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as Vector<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(2 * index, 2 * (index + 1)), true);\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(2 * index, 2 * (index + 1)), true);\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as Vector<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as Vector<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as Vector<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as Vector<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(4 * index, 4 * (index + 1)), false);\n\n/** @ignore */\nconst getList = <T extends List>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.rowProxy.bind(index);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as Vector<DenseUnion>, index) :\n        getSparseUnion(vector as Vector<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: Vector<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: Vector<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as any, index)\n        : getIntervalYearMonth(vector as any, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getNested;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =               getNested;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface SetVisitor extends Visitor {\n    visit<T extends Vector>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends Vector>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n}\n\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: Vector<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = (value * 32767) + 32767; };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(<any> vector, index, value as Numeric1X['TValue'])\n        : setNumericX2(<any> vector, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(<any> vector, index, value)\n        : setFloat16(<any> vector, index, value);\n};\n\n/* istanbul ignore next */\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector, index, value)\n        : setDateMillisecond(vector, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as Vector<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as Vector<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as Vector<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as Vector<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as Vector<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as Vector<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as Vector<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!;\n    const { valueOffsets, stride } = vector;\n    let idx = -1, offset = valueOffsets[index * stride];\n    let end = Math.min(value.length, valueOffsets[(index * stride) + 1] - offset);\n    while (offset < end) {\n        values.set(offset++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.children.forEach(({ name }, idx) => {\n        const kid = vector.getChildAt(idx);\n        kid && kid.set(index, value[name]);\n    });\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as Vector<DenseUnion>, index, value) :\n        setSparseUnion(vector as Vector<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector, index, value)\n        : setIntervalYearMonth(vector, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 getDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setNested;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =               setNested;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends Vector>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends Vector>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: Vector<T>, value: Vector<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n}\n\nexport class IndexOfVisitor extends Visitor {\n}\n\n/** @ignore */\nfunction nullIndexOf(vector: Vector<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: Vector<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends Vector>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends Vector>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n}\n\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: Vector<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends Vector>(node: T): T['TArray'];\n    visitMany<T extends Vector>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>) => Vector<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: Vector<T>): Vector<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: Vector<T>): Vector<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: Vector<T>): Vector<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: Vector<T>): Vector<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: Vector<T>): Vector<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: Vector<T>): Vector<T>['TArray'];\n}\n\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: Vector<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (type: T) => number;\n}\n\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { Vector, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Row } from './row';\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { Vector as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n    }\n}\n\ndeclare module './base' {\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn(data.type)())(data, ...args) as V<T>;\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .filter((typeId) => typeId !== Type.NONE && typeId !== Type[Type.NONE])\n    .map((T: any) => Type[T] as any).filter((T: any): T is Type => typeof T === 'number')\n    .forEach((typeId) => {\n        let typeIds: Type[];\n        switch (typeId) {\n            case Type.Int:       typeIds = [Type.Int8, Type.Int16, Type.Int32, Type.Int64, Type.Uint8, Type.Uint16, Type.Uint32, Type.Uint64]; break;\n            case Type.Float:     typeIds = [Type.Float16, Type.Float32, Type.Float64]; break;\n            case Type.Date:      typeIds = [Type.DateDay, Type.DateMillisecond]; break;\n            case Type.Time:      typeIds = [Type.TimeSecond, Type.TimeMillisecond, Type.TimeMicrosecond, Type.TimeNanosecond]; break;\n            case Type.Timestamp: typeIds = [Type.TimestampSecond, Type.TimestampMillisecond, Type.TimestampMicrosecond, Type.TimestampNanosecond]; break;\n            case Type.Interval:  typeIds = [Type.IntervalDayTime, Type.IntervalYearMonth]; break;\n            case Type.Union:     typeIds = [Type.DenseUnion, Type.SparseUnion]; break;\n            default:                typeIds = [typeId]; break;\n        }\n        typeIds.forEach((typeId) => {\n            const VectorCtor = getVectorConstructor.visit(typeId);\n            VectorCtor.prototype['get'] = partial1(getVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['set'] = partial2(setVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['indexOf'] = partial2(indexOfVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['toArray'] = partial0(toArrayVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n            VectorCtor.prototype[Symbol.iterator] = partial0(iteratorVisitor.getVisitFn(typeId));\n        });\n    });\n\n/** @ignore */\nfunction partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nfunction partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i: number = -1, numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries, dictionaryFields\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries, dictionaryFields));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new DataType();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_(children || [], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/** @ignore */\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/** @ignore */\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/** @ignore */\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/** @ignore */\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/** @ignore */\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries, dictionaryFields);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries, dictionaryFields);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries, dictionaryFields);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries, dictionaryFields);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries, dictionaryFields));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new DataType();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_(children || [], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                delete this._pending;\n                this.size = (await file.stat()).size;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json, _batchIndex, _dictionaryIndex } = this;\n        const numBatches = _json.batches.length;\n        const numDictionaries = _json.dictionaries.length;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { value: message, done: _batchIndex >= numBatches && _dictionaryIndex >= numDictionaries };\n        }\n        if (_dictionaryIndex < numDictionaries) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (_batchIndex < numBatches) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { Vector as VType } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: VType<T> | Data<T> | T): (vector: VType<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: VType<T>): this;\n    visitInt                  <T extends Int>             (vector: VType<T>): this;\n    visitFloat                <T extends Float>           (vector: VType<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: VType<T>): this;\n    visitBinary               <T extends Binary>          (vector: VType<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: VType<T>): this;\n    visitDate                 <T extends Date_>           (vector: VType<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: VType<T>): this;\n    visitTime                 <T extends Time>            (vector: VType<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: VType<T>): this;\n    visitList                 <T extends List>            (vector: VType<T>): this;\n    visitStruct               <T extends Struct>          (vector: VType<T>): this;\n    visitUnion                <T extends Union>           (vector: VType<T>): this;\n    visitInterval             <T extends Interval>        (vector: VType<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: VType<T>): this;\n    visitMap                  <T extends Map_>            (vector: VType<T>): this;\n}\n\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            addBuffer.call(this, nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : truncateBitmap(data.offset, length, data.nullBitmap)\n            ).nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: VType<T>) {\n        return addBuffer.call(this, new Uint8Array(0));\n    }\n    public visitDictionary<T extends Dictionary>(vector: VType<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: VType<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: VType<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: VType<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: VType<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends List | FixedSizeList>(this: VectorAssembler, vector: VType<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Map_ | Union>(this: VectorAssembler, vector: VType<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =   assembleNestedVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { RecordBatch } from '../recordbatch';\nimport { Vector as VType } from '../interfaces';\nimport { VectorType as BufferType } from '../enum';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: VType<T>): { };\n    visitBool                 <T extends Bool>            (vector: VType<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: VType<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: VType<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: VType<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: VType<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: VType<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: VType<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: VType<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: VType<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: VType<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: VType<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: VType<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: VType<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: VType<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: VType<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: VType<T>): { children: any[] };\n}\n\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': nullCount <= 0\n                ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return { 'DATA': [] }; }\n    public visitBool<T extends Bool>({ values, offset, length }: VType<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: VType<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: VType<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: VType<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: VType<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: VType<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: VType<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: VType<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: VType<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: VType<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { DataType, Dictionary } from '../type';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable } from '../util/compat';\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: { autoDestroy: boolean }) {\n        super();\n        this._autoDestroy = options && (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter();\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            this._writeRecordBatch(payload);\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const alignedSize = (flatbufferSize + 4 + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - 4;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - 4));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMessage(Message.from(schema))\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n\n    protected _writeFooter() {\n        return this._writePadding(4); // eos bytes\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(records: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(records);\n        const recordBatch = new metadata.RecordBatch(records.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(dictionaryFields: Map<number, Field<Dictionary<any, any>>[]>) {\n        for (const [id, fields] of dictionaryFields) {\n            const vector = fields[0].type.dictionaryVector;\n            if (!(vector instanceof Chunked)) {\n                this._writeDictionaryBatch(vector, id, false);\n            } else {\n                const chunks = vector.chunks;\n                for (let i = -1, n = chunks.length; ++i < n;) {\n                    this._writeDictionaryBatch(chunks[i], id, i > 0);\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>, options?: { autoDestroy: true }): RecordBatchStreamWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any, options?: { autoDestroy: true }) {\n        return new RecordBatchStreamWriter<T>(options).writeAll(input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchFileWriter<T>().writeAll(input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMagic()._writePadding(2)\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n\n    protected _writeFooter() {\n        const buffer = Footer.encode(new Footer(\n            this._schema!, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return this\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    protected _writeMessage() { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`)._writeDictionaries(schema.dictionaryFields);\n    }\n    protected _writeDictionaries(dictionaryFields: Map<number, Field<Dictionary<any, any>>[]>) {\n        this._write(`,\\n  \"dictionaries\": [\\n`);\n        super._writeDictionaries(dictionaryFields);\n        return this._write(`\\n  ]`);\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(this._schema!, dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(records: RecordBatch<T>) {\n        this._write(this._recordBatchBlocks.length === 0\n            ? `,\\n  \"batches\": [\\n    `\n            : `,\\n    `);\n        this._write(`${recordBatchToJSON(records)}`);\n        this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    public close() {\n        if (this._recordBatchBlocks.length > 0) {\n            this._write(`\\n  ]`);\n        }\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(schema: Schema, dictionary: Vector, id: number, isDelta = false) {\n    const f = schema.dictionaryFields.get(id)![0];\n    const field = new Field(f.name, f.type.dictionary, f.nullable, f.metadata);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { isPromise } from './util/compat';\nimport { RecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { Vector, Chunked } from './vector/index';\nimport { DataType, RowLike, Struct } from './type';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { distributeColumnsIntoRecordBatches } from './util/recordbatch';\nimport { distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = any>() { return new Table<T>(new Schema([]), []); }\n\n    public static from<T extends { [key: string]: DataType } = any>(): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source?: any) {\n\n        if (!source) { return Table.empty<T>(); }\n\n        let reader = RecordBatchReader.from<T>(source) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty<T>() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty<T>();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(struct: Vector<Struct<T>>) {\n        return Table.new<T>(struct.data.childData as Data<T[keyof T]>[], struct.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        if (!chunks[0]) {\n            chunks[0] = new RecordBatch(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0)));\n        }\n\n        super(new Struct<T>(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return writer.writeAll(this._chunks).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table(...distributeVectorsIntoRecordBatches<T & R>(schema, columns));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Schema, Field } from './schema';\nimport { DataType, Struct } from './type';\nimport { Chunked } from './vector/chunked';\nimport { StructVector } from './vector/struct';\nimport { selectFieldArgs } from './util/args';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return RecordBatch.new(args[0], args[1]);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[]) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Null(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices));                                                   }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n}\n\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[]) {\n        super(new Uint8Array(0), nodes, buffers);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        if (isDelta || !dictionaries.get(id)) {\n\n            const type = schema.dictionaries.get(id)!;\n            const vector = (isDelta ? dictionaries.get(id)!.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n\n            (schema.dictionaryFields.get(id) || []).forEach(({ type }) => type.dictionaryVector = vector);\n\n            return vector;\n        }\n        return dictionaries.get(id)!;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Vector as V } from '../interfaces';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Schema, Field } from './schema';\nexport { Visitor } from './visitor';\nexport {\n    Row,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\n/** @ignore */\nexport const util = {\n    ...util_int_,\n    ...util_bit_,\n    ...util_buffer_,\n    ...util_vector_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './ipc/whatwg/iterable';\nimport { recordBatchReaderThroughDOMStream } from './ipc/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './ipc/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util\n} from './Arrow';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"],"sourceRoot":""}