{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","tslib/tslib.es6.js","util/buffer.ts","util/compat.ts","io/interfaces.ts","io/adapters.ts","flatbuffers/js/flatbuffers.mjs","util/utf8.ts","text-encoding-utf-8/lib/encoding.lib.mjs","buffer/index.js","(webpack)/buildin/global.js","base64-js/index.js","ieee754/index.js","isarray/index.js","fb/Schema.ts","fb/Message.ts","vector.ts","enum.ts","fb/File.ts","util/bit.ts","data.ts","visitor.ts","visitor/typecomparator.ts","type.ts","util/pretty.ts","vector/row.ts","util/vector.ts","vector/chunked.ts","column.ts","util/args.ts","schema.ts","ipc/metadata/file.ts","vector/base.ts","vector/binary.ts","vector/bool.ts","util/int.ts","vector/date.ts","vector/decimal.ts","vector/dictionary.ts","vector/fixedsizebinary.ts","vector/fixedsizelist.ts","vector/float.ts","vector/interval.ts","vector/int.ts","vector/list.ts","vector/map.ts","vector/null.ts","vector/struct.ts","vector/timestamp.ts","vector/time.ts","vector/union.ts","vector/utf8.ts","util/bn.ts","visitor/get.ts","visitor/set.ts","visitor/indexof.ts","visitor/iterator.ts","visitor/toarray.ts","visitor/bytewidth.ts","visitor/vectorctor.ts","vector/index.ts","util/recordbatch.ts","visitor/typeassembler.ts","ipc/metadata/json.ts","ipc/metadata/message.ts","io/stream.ts","io/file.ts","ipc/message.ts","visitor/vectorassembler.ts","visitor/jsontypeassembler.ts","visitor/jsonvectorassembler.ts","ipc/writer.ts","table.ts","recordbatch.ts","visitor/vectorloader.ts","ipc/reader.ts","compute/predicate.ts","compute/dataframe.ts","Arrow.ts","Arrow.dom.ts","ipc/whatwg/iterable.ts","ipc/whatwg/reader.ts","ipc/whatwg/writer.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","__awaiter","__await","__asyncGenerator","__asyncDelegator","__asyncValues","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__values","iterator","length","v","this","asyncIterator","TypeError","g","q","verb","a","b","push","resume","fulfill","settle","f","shift","memcpy","joinUint8Arrays","toArrayBufferView","toInt8Array","toInt16Array","toInt32Array","toBigInt64Array","toUint8Array","toUint16Array","toUint32Array","toBigUint64Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","toFloat16Array","toArrayBufferViewIterator","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","compareArrayLike","tslib__WEBPACK_IMPORTED_MODULE_0__","flatbuffers__WEBPACK_IMPORTED_MODULE_1__","_util_utf8__WEBPACK_IMPORTED_MODULE_2__","_compat__WEBPACK_IMPORTED_MODULE_3__","ByteBuffer","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","target","source","targetByteOffset","sourceByteLength","byteLength","targetByteLength","dst","Uint8Array","buffer","byteOffset","src","Math","min","set","chunks","size","sliced","xOffset","yOffset","xLen","yLen","x","y","j","collapseContiguousByteRanges","reduce","offset","index","Infinity","subarray","slice","ArrayBufferViewCtor","input","constructor","BYTES_PER_ELEMENT","bytes","isView","from","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","Uint8ClampedArray","floats","u16s","pump","ArrayCtor","wrap","buffers","it","arguments","emit","valueOffsets","BigIntCtor","BigIntAvailable","BigInt64ArrayCtor","BigUint64ArrayCtor","isPromise","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isWritableDOMStream","isReadableDOMStream","isWritableNodeStream","isReadableNodeStream","_io_interfaces__WEBPACK_IMPORTED_MODULE_0__","BigIntUnavailableError","Error","BigIntUnavailable","asIntN","asUintN","BigInt","BigInt64ArrayAvailable","BigInt64ArrayUnavailableError","BigInt64Array","[object Object]","BigUint64ArrayAvailable","BigUint64ArrayUnavailableError","BigUint64Array","isNumber","isBoolean","isFunction","isObject","ITERATOR_DONE","ArrowJSON","ReadableInterop","AsyncQueue","_adapters__WEBPACK_IMPORTED_MODULE_1__","freeze","_json","schema","batches","dictionaries","_getDOMStream","tee","writable","options","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","super","_values","resolvers","_closedPromise","_closedPromiseResolve","closed","reason","return","_ensureOpen","_error","error","undefined","_","abort","close","_args","_util_buffer__WEBPACK_IMPORTED_MODULE_1__","fromIterable","cmd","threw","bufferLength","byteRange","isNaN","throw","fromAsyncIterable","fromDOMStream","AdaptiveByteReader","releaseLock","fromNodeStream","stream","events","event","err","onEvent","race","map","isFinite","evt","fn","destroy","cleanup","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","read","readInto","handler","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","position","prep","additional_bytes","align_size","capacity","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","Buffer","decodeUtf8","encodeUtf8","_buffer__WEBPACK_IMPORTED_MODULE_0__","text_encoding_utf_8__WEBPACK_IMPORTED_MODULE_1__","_Buffer","useNativeEncoders","TextDecoder","TextEncoder","decoder","decode","toString","encoder","encode","inRange","max","ToDictionary","end_of_stream","Stream","tokens","endOfStream","prepend","token","Array","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","bite","code_point","UTF8Encoder","count","temp","input_stream","code_points","indexOf","cp","codePointsToString","opt_string","string","u","stringToCodePoints","global","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","array","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","isBuffer","checked","copy","val","type","data","fromObject","assertSize","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","buf","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","concat","list","pos","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","match","join","thisStart","thisEnd","thisCopy","targetCopy","includes","toJSON","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","Function","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","Schema_org","arrow","apache","org","Message_org","AbstractVector","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","VectorType","Endianness","Null","__init","builder","Struct_","List","FixedSizeList","listSize","Map","keysSorted","Union","Sparse","typeIdsOffset","numElems","Int","bitWidth","isSigned","FloatingPoint","HALF","precision","Utf8","Binary","FixedSizeBinary","byteWidth","Bool","Decimal","scale","Date","MILLISECOND","unit","Time","Timestamp","SECOND","optionalEncoding","timezoneOffset","Interval","YEAR_MONTH","VectorLayout","OFFSET","KeyValue","keyOffset","valueOffset","DictionaryEncoding","id","indexTypeOffset","isOrdered","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","layoutOffset","customMetadataOffset","Schema","Little","endianness","fieldsOffset","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","DictionaryBatch","dataOffset","isDelta","Message","V1","version","headerType","headerOffset","bodyLength","File_org","ArrowType","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","metaDataLength","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","iterateBits","values","xs","begin","context","byteIndex","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","cnt","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","kUnknownNullCount","data_Data","nullCount","childData","_nullCount","stride","typeIds","nullBitmap","typeId","ArrayType","childStride","_sliceBuffers","clone","_sliceChildren","newLength","VALIDITY","TYPE","DATA","child","Dictionary","Float","Struct","util_buffer","indices","children","valueOffsetsOrChildren","Visitor","nodes","args","node","visit","getVisitFn","throwIfNotFound","visitor","dtype","inferDType","type_DataType","visitNull","visitBool","visitInt","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","_node","SINGLE","DOUBLE","MICROSECOND","NANOSECOND","DAY","DAY_TIME","Dense","typecomparator_TypeComparator","instance","compareFields","fields","others","every","compareField","compareConstructor","compareAny","compareInt","compareFloat","compareDate","compareTimestamp","timezone","compareTime","compareUnion","compareInterval","dictionary","proto","type_Null","type_Int_","type_Float","type_Float16","type_Float32","type_Float64","type_Binary","type_Utf8","type_Bool","type_Decimal","type_Date_","type_DateDay","type_DateMillisecond","type_Time_","type_TimeSecond","type_TimeMillisecond","type_TimeMicrosecond","type_TimeNanosecond","type_Timestamp_","type_TimestampSecond","type_TimestampMillisecond","type_TimestampMicrosecond","type_TimestampNanosecond","type_Interval_","type_IntervalDayTime","type_IntervalYearMonth","type_List","valueType","valueField","type_Struct","type_Union_","typeIdToChildIndex","idx","type_DenseUnion","type_SparseUnion","type_FixedSizeBinary","type_FixedSizeList","type_Map_","getId","atomicDictionaryId","type_Dictionary","dictionaryVector","undf","valueToString","toPrimitive","JSON","stringify","kLength","for","kParent","kRowIndex","columnDescriptor","rowLengthDescriptor","rowParentDescriptor","row_Row","isStruct","getOwnPropertyNames","props","prop","row_RowProxyGenerator","parent","fieldsAreEnumerable","forEach","columnIndex","_bindGetter","rowPrototype","schemaOrFields","keys","schema_Field","getChildAt","rowIndex","bound","clampIndex","adjust","clampRange","big0","compat","createElementComparator","search","typeofSearch","valueOfSearch","valueOf","fns","createArrayLikeComparator","C","createRowComparator","createVectorComparator","createObjectKeysComparator","chunked_Chunked","offsets","vectors","calculateOffsets","_type","_chunks","_chunkOffsets","_length","_numChildren","selectChunkArgs","flatten","numChildren","isDictionary","_indices","chunk","_sliceInternal","columns","_children","vector","filter","vec","mid","isValidInternal","getInternal","element","self","indexOfInternal","toArray","arraySet","typedSet","isValid","chunkIndex","fromIndex","slices","chunkOffsets","chunkLength","chunkOffset","to","column_Column","_field","SingleChunkColumn","rest","new","some","metadata","column","_chunk","selectArgs","Ctor","vals","_selectArgs","selectColumnArgs","_selectFieldArgs","selectFieldArgs","_selectChunkArgs","selectVectorChildrenArgs","_selectVectorChildrenArgs","selectColumnChildrenArgs","_selectColumnChildrenArgs","toKeysAndValues","k","entries","fieldIndex","valueIndex","schema_Schema","dictionaryFields","generateDictionaryMap","compareSchemas","columnNames","names","columnIndices","Boolean","curFields","curDictionaries","curDictionaryFields","mergeMaps","newFields","f2","findIndex","newDictionaries","newDictionaryFields","newDictFields","m1","m2","has","_Block","_Footer","file_Footer_","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","footer","getRootAsFooter","OffHeapFooter","startRecordBatchesVector","numRecordBatches","reverse","rb","FileBlock","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","finishFooterBuffer","endFooter","block","getRecordBatch","getDictionaryBatch","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","base_BaseVector","_bindDataAccessors","VectorName","isConcatSpreadable","binary_BinaryVector","bool_BoolVector","carryBit16","intAsHex","kInt32DecimalDigits","kPowersOfTen","BaseInt64","L","R","product","lessThan","int_Uint64","_times","_plus","out_buffer","posn","group","multiple","times","plus","left","right","int_Int64","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","date_DateVector","convertArray","DateDayVector","DateMillisecondVector","decimal_DecimalVector","dictionary_DictionaryVector","fixedsizebinary_FixedSizeBinaryVector","fixedsizelist_FixedSizeListVector","float_FloatVector","Float16Vector","Float32Vector","Float64Vector","interval_IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","int_IntVector","is64","Int8Vector","Int16Vector","Int32Vector","int_Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","int_Uint64Vector","list_ListVector","map_MapVector","rowProxy","_rowProxy","null_NullVector","struct_StructVector","timestamp_TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","time_TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","union_UnionVector","DenseUnionVector","SparseUnionVector","utf8_Utf8Vector","BigNumNMixin","bignumToString","bignumToNumber","hint","bignumToBigInt","SignedBigNumNMixin","assign","signed","BigIntArray","UnsignedBigNumNMixin","bn_BN","unsigned","bn","int64","words","decimalToString","digits","base32","checks","get_GetVisitor","epochMillisecondsLongToMs","epochMillisecondsToDate","epochMs","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getBigInts","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getNested","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","getValue","getKey","get_instance","set_SetVisitor","setEpochMsToMillisecondsLong","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setNested","kid","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","setValue","set_instance","indexof_IndexOfVisitor","indexOfValue","searchElement","indexOfNull","indexOfUnion","indexof_instance","iterator_IteratorVisitor","vectorIterator","getFn","nullByte","nullBit","nullableIterator","iterator_instance","toarray_ToArrayVisitor","arrayOfVector","toarray_instance","variableWidthColumnErrorMessage","bytewidth_instance","____","visitFields","vectorctor_instance","partial0","partial2","getByteWidth","wrapNullableSet","T","VectorCtor","partial1","partialType0","noopBuf","nullBufs","bitmapLength","distributeVectorsIntoRecordBatches","vecs","batchArgs","memo","numBatches","batchLength","numColumns","Number","distributeChildData","recordbatch_RecordBatch","uniformlyDistributeChunksAcrossRecordBatches","_changeLengthAndBackfillNullBitmap","typeassembler_Long","typeassembler_Null","typeassembler_Binary","typeassembler_Bool","typeassembler_Utf8","typeassembler_Decimal","typeassembler_Date","typeassembler_List","typeassembler_Struct","typeassembler_FixedSizeBinary","typeassembler_FixedSizeList","typeassembler_Map_","typeassembler_instance","startNull","endNull","startInt","addBitWidth","addIsSigned","endInt","startFloatingPoint","addPrecision","endFloatingPoint","startBinary","endBinary","startBool","endBool","startUtf8","endUtf8","startDecimal","addScale","endDecimal","startDate","addUnit","endDate","startTime","endTime","startTimestamp","addTimezone","endTimestamp","startInterval","endInterval","startList","endList","startStruct_","endStruct_","startTypeIdsVector","createTypeIdsVector","startUnion","addMode","addTypeIds","endUnion","indexType","startDictionaryEncoding","addId","addIsOrdered","addIndexType","endDictionaryEncoding","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startFixedSizeList","addListSize","endFixedSizeList","startMap","addKeysSorted","endMap","recordBatchFromJSON","message_RecordBatch","fieldNodesFromJSON","fieldNodes","nullCountFromJSON","buffersFromJSON","BufferRegion","fieldChildrenFromJSON","fromJSON","validity","customMetadataFromJSON","_metadata","indexTypeFromJSON","typeFromJSON","message_Long","message_Builder","message_ByteBuffer","message_Type","_Field","_Schema","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","message_Message","header","_version","_headerType","body","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","startMessage","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","_nodes","_buffers","_id","_isDelta","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","startKeyValue","addKey","addValue","endKeyValue","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","addCustomMetadata","endField","dictType","dictMeta","dictField","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","startSchema","addFields","addEndianness","platformIsLittleEndian","Big","endSchema","_schema","fieldsLength","decodeSchemaFields","schemaFieldsFromJSON","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","batch","nodesLength","decodeFieldNodes","bufferRegions","buffersLength","decodeBuffers","dictionaryBatch","startDictionaryBatch","addIsDelta","addData","endDictionaryBatch","createFieldNode","setInt16","stream_AsyncByteQueue","interfaces","sync","tslib_es6","_c","_b","stream_ByteStream","stream_ByteStreamSource","adapters","peek","stream_AsyncByteStream","stream_AsyncByteStreamSource","cancel","file_RandomAccessFile","readAt","getInt32","file_AsyncRandomAccessFile","file","_handle","_pending","stat","bytesRead","ipc_message_ByteBuffer","invalidMessageType","nullMessage","invalidMessageMetadata","expected","invalidMessageBodyLength","message_MessageReader","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","message_AsyncMessageReader","message_JSONMessageReader","_body","_batchIndex","_dictionaryIndex","flattenDataSources","MAGIC","MAGIC_STR","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","vectorassembler_VectorAssembler","_bufferRegions","assembler","vectorChildren","assembleResult","visitMany","addBuffer","_nullV","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childIndex","childLength","jsontypeassembler_JSONTypeAssembler","jsonvectorassembler_JSONVectorAssembler","bigNumsToStrings","binaryToString","octets","toUpperCase","writer_RecordBatchWriter","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_autoDestroy","autoDestroy","writableStrategy","readableStrategy","writeAll","writer","batches_1","batches_1_1","writeAllAsync","table_Table","reset","sink","objectMode","_writeFooter","compareTo","_writeSchema","payload","_writeRecordBatch","flatbufferSize","nPaddingBytes","_write","of","_writePadding","_writeMessage","_writeDictionaries","records","assemble","_writeBodyBuffers","padding","_writeDictionaryBatch","RecordBatchStreamWriter","writer_RecordBatchFileWriter","_writeMagic","writer_RecordBatchJSONWriter","fieldToJSON","dictionaryBatchToJSON","recordBatchToJSON","empty","reader_RecordBatchReader","isSync","open","opening","reader_1_1","reader_1","struct","cols","numCols","getColumnAt","getColumnIndex","nameToIndex","selectAt","columnName","oldToNew","newIdx","_f","_fs","fs","vs","batchData","ensureSameLengthData","vectorloader_VectorLoader","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","readTypeIds","nextBufferRange","vectorloader_JSONVectorLoader","sources","isTimestamp","isInt","isTime","isDate","isDecimal","isBinary","isFixedSizeBinary","joined","binaryDataFromJSON","isBool","isUtf8","impl","_impl","isFile","isAsync","isStream","readRecordBatch","reader_RecordBatchStreamReader","reader_RecordBatchJSONReaderImpl","fromArrowJSON","AsyncRecordBatchFileReader","reader_AsyncRecordBatchFileReaderImpl","AsyncRecordBatchStreamReader","reader_AsyncRecordBatchStreamReaderImpl","fromFileHandle","RecordBatchFileReader","reader_RecordBatchFileReaderImpl","fromAsyncByteStream","reader_RecordBatchStreamReaderImpl","fromByteStream","readAllSync","readAllAsync","reader_RecordBatchReaderImpl","_recordBatchIndex","_loadVectors","types","_reader","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","_readFooter","_readDictionaryBatch","seek","_super","Value","Literal","predicate_Equals","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","func","CustomPredicate","bind_","predicate_lit","predicate_col","and","or","custom","countBy","dataframe_DataFrame","scan","predicate","dataframe_FilteredDataFrame","batchIndex","numRows","count_by","countByteLength","ceil","counts","dataframe_CountByResult","_predicate","util","int_namespaceObject","bit_namespaceObject","util_vector_namespaceObject","predicate_namespaceObject","bm","hwm","highWaterMark","ReadableStream","controller","desiredSize","enqueue","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable","WritableStream"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue x and y don't share the same underlying ArrayBuffer\n        if (!x || !y || x.buffer !== y.buffer) {\n            y && (result[++j] = y);\n            continue;\n        }\n        // swap if y starts before x\n        if (y.byteOffset < x.byteOffset) {\n            x = chunks[i]; y = result[j];\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBufferViewCtor) {\n        return value.constructor === ArrayBufferViewCtor ? value :\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n    }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\nexport const toFloat16Array = (input: ArrayBufferViewInput) => {\n    let floats: Float32Array | Float64Array | null = null;\n    if (ArrayBuffer.isView(input)) {\n        switch (input.constructor) {\n            case Float32Array: floats = input as Float32Array; break;\n            case Float64Array: floats = input as Float64Array; break;\n        }\n    } else if (isIterable(input)) {\n        floats = toFloat64Array(input);\n    }\n    if (floats) {\n        const u16s = new Uint16Array(floats.length);\n        for (let i = -1, n = u16s.length; ++i < n;) {\n            u16s[i] = (floats[i] * 32767) + 32767;\n        }\n        return u16s;\n    }\n    return toUint16Array(input);\n};\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['tee']) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['pipeTo']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    private _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    private _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder();\n        return decoder.decode.bind(decoder);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return encoder.encode.bind(encoder);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends Vector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends Vector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nexport { AbstractVector as Vector };\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\nexport enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n\n    // These enum values are here so that TypeScript can narrow the type signatures further\n    // beyond the base Arrow types. The base Arrow types include metadata like bitWidths that\n    // impact the type signatures of the values we return. For example, the Int8Vector reads\n    // 1-byte numbers from an Int8Array, an Int32Vector reads a 4-byte number from an Int32Array,\n    // and an Int64Vector reads a pair of 4-byte lo, hi int32s, and returns them as a zero-copy\n    // slice from an underlying Int32Array. Library consumers benefit by doing this type narrowing,\n    // since we can ensure the types across all public methods are propagated and never bail to `any`.\n    // These values are _never_ actually used at runtime, and they will _never_ be written into the\n    // flatbuffers metadata of serialized Arrow IPC payloads.\n    Dictionary            = -1, // Dictionary aka Category type\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { DataType, SparseUnion, DenseUnion } from './type';\nimport { VectorType as BufferType, UnionMode, Type } from './enum';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number>;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number>;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number>;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n    public readonly values: Buffers<T>[BufferType.DATA];\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[]) {\n        this.type = type;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n            const t: any = type;\n            switch (type.typeId) {\n                case Type.Decimal: this.stride = 4; break;\n                case Type.Timestamp: this.stride = 2; break;\n                case Type.Date: this.stride = 1 + (t as Date_).unit; break;\n                case Type.Interval: this.stride = 1 + (t as Interval).unit; break;\n                case Type.Int: this.stride = 1 + +((t as Int).bitWidth > 32); break;\n                case Type.Time: this.stride = 1 + +((t as Time).bitWidth > 32); break;\n                case Type.FixedSizeList: this.stride = (t as FixedSizeList).listSize; break;\n                case Type.FixedSizeBinary: this.stride = (t as FixedSizeBinary).byteWidth; break;\n                default: this.stride = 1;\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const { stride, typeId, childData } = this;\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[]): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length, nullCount || 0, buffers[2]) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[2], buffers[1] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[2], buffers[0] || [], buffers[1] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[2], buffers[0] || [], buffers[1] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[2], buffers[0] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[2], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[2], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[2], childData || []) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[2], buffers[3] || [], buffers[1] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, _data?: NullBuffer) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data | Vector) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n((Data.prototype as any).childData = Object.freeze([]));\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: Vector<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { Vector as VType, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<T[keyof T]['TValue'] | null> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\nexport class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number;      };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number;      };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number;      };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: Int32Array;  };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number;      };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number;      };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number;      };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: Uint32Array; };\n};\n\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: typeof Uint8Array; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: typeof Uint8Array; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: typeof Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: typeof Int32Array; }\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: typeof Int32Array; }\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: typeof Int32Array; }\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: typeof Int32Array; }\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: VType<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    constructor(public readonly children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<[${this.children.map((f) => f.type).join(`, `)}]>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int32Array; TValue: any[]; }\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: typeof Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: VType<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\nexport interface Map_<T extends { [key: string]: DataType } = any> extends DataType<Type.Map> { TArray: Uint8Array; TValue: RowLike<T>; dataTypes: T; }\nexport class Map_<T extends { [key: string]: DataType } = any> extends DataType<Type.Map, T> {\n    constructor(public readonly children: Field<T[keyof T]>[],\n                public readonly keysSorted: boolean = false) {\n        super();\n    }\n    public get typeId() { return Type.Map as Type.Map; }\n    public toString() { return `Map<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    public dictionaryVector: Vector<T>;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null, dictionaryVector?: Vector<T>) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.dictionaryVector = dictionaryVector!;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        (<any> proto).dictionaryVector = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { MapVector } from '../vector/map';\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { StructVector } from '../vector/struct';\n\n/** @ignore */ export const kLength = Symbol.for('length');\n/** @ignore */ export const kParent = Symbol.for('parent');\n/** @ignore */ export const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const columnDescriptor = { enumerable: true, configurable: false, get: null as any };\n/** @ignore */ const rowLengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };\n/** @ignore */ const rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null as any };\n\nexport class Row<T extends { [key: string]: DataType }> implements Iterable<T[keyof T]['TValue']> {\n    [key: string]: T[keyof T]['TValue'];\n    // @ts-ignore\n    public [kParent]: MapVector<T> | StructVector<T>;\n    // @ts-ignore\n    public [kRowIndex]: number;\n    // @ts-ignore\n    public readonly [kLength]: number;\n    *[Symbol.iterator]() {\n        for (let i = -1, n = this[kLength]; ++i < n;) {\n            yield this[i];\n        }\n    }\n    public get<K extends keyof T>(key: K) { return (this as any)[key] as T[K]['TValue']; }\n    public toJSON(): any {\n        return DataType.isStruct(this[kParent].type) ? [...this] :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = (this as any)[prop]) && props || props;\n            }, {});\n    }\n    public toString() {\n        return DataType.isStruct(this[kParent].type) ?\n            [...this].map((x) => valueToString(x)).join(', ') :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = valueToString((this as any)[prop])) && props || props;\n            }, {});\n    }\n}\n\n/** @ignore */\nexport class RowProxyGenerator<T extends { [key: string]: DataType }> {\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType }>(parent: MapVector<T> | StructVector<T>, schemaOrFields: T | Field[], fieldsAreEnumerable = false): RowProxyGenerator<T> {\n        let schema: T, fields: Field[];\n        if (Array.isArray(schemaOrFields)) {\n            fields = schemaOrFields;\n        } else {\n            schema = schemaOrFields;\n            fieldsAreEnumerable = true;\n            fields = Object.keys(schema).map((x) => new Field(x, schema[x]));\n        }\n        return new RowProxyGenerator<T>(parent, fields, fieldsAreEnumerable);\n    }\n\n    private rowPrototype: Row<T>;\n\n    private constructor(parent: MapVector<T> | StructVector<T>, fields: Field[], fieldsAreEnumerable: boolean) {\n        const proto = Object.create(Row.prototype);\n\n        rowParentDescriptor.value = parent;\n        rowLengthDescriptor.value = fields.length;\n        Object.defineProperty(proto, kParent, rowParentDescriptor);\n        Object.defineProperty(proto, kLength, rowLengthDescriptor);\n        fields.forEach((field, columnIndex) => {\n            if (!proto.hasOwnProperty(field.name)) {\n                columnDescriptor.enumerable = fieldsAreEnumerable;\n                columnDescriptor.get || (columnDescriptor.get = this._bindGetter(columnIndex));\n                Object.defineProperty(proto, field.name, columnDescriptor);\n            }\n            if (!proto.hasOwnProperty(columnIndex)) {\n                columnDescriptor.enumerable = !fieldsAreEnumerable;\n                columnDescriptor.get || (columnDescriptor.get = this._bindGetter(columnIndex));\n                Object.defineProperty(proto, columnIndex, columnDescriptor);\n            }\n            columnDescriptor.get = null as any;\n        });\n\n        this.rowPrototype = proto;\n    }\n\n    private _bindGetter(columnIndex: number) {\n        return function(this: Row<T>) {\n            const child = this[kParent].getChildAt(columnIndex);\n            return child ? child.get(this[kRowIndex]) : null;\n        };\n    }\n    public bind(rowIndex: number) {\n        const bound = Object.create(this.rowPrototype);\n        bound[kRowIndex] = rowIndex;\n        return bound;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Row, kLength } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Array-likes\n    if (Array.isArray(search)) {\n        return createArrayLikeComparator(search);\n    }\n    // Compare Rows\n    if (search instanceof Row) {\n        return createRowComparator(search);\n    }\n    // Compare Vectors\n    if (search instanceof Vector) {\n        return createVectorComparator(search);\n    }\n    // Compare non-empty Objects\n    const keys = Object.keys(search);\n    if (keys.length > 0) {\n        return createObjectKeysComparator(search, keys);\n    }\n    // No valid comparator\n    return () => false;\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(search: ArrayLike<any>) {\n    const n = search.length;\n    const fns = [] as ((x: any) => boolean)[];\n    for (let i = -1; ++i < n;) {\n        fns[i] = createElementComparator((search as any)[i]);\n    }\n    return (value: any) => {\n        if (!value) { return false; }\n        // Handle the case where the search element is an Array, but the\n        // values are Rows or Vectors, e.g. list.indexOf(['foo', 'bar'])\n        if (value instanceof Row) {\n            if (value[kLength] !== n) { return false; }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value.get(i)))) { return false; }\n            }\n            return true;\n        }\n        if (value.length !== n) { return false; }\n        if (value instanceof Vector) {\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value.get(i)))) { return false; }\n            }\n            return true;\n        }\n        for (let i = -1; ++i < n;) {\n            if (!(fns[i](value[i]))) { return false; }\n        }\n        return true;\n    };\n}\n\n/** @ignore */\nfunction createRowComparator(search: Row<any>) {\n    const n = search[kLength];\n    const C = search.constructor as any;\n    const fns = [] as ((x: any) => boolean)[];\n    for (let i = -1; ++i < n;) {\n        fns[i] = createElementComparator(search.get(i));\n    }\n    return (value: any) => {\n        if (!(value instanceof C)) { return false; }\n        if (!(value[kLength] === n)) { return false; }\n        for (let i = -1; ++i < n;) {\n            if (!(fns[i](value.get(i)))) { return false; }\n        }\n        return true;\n    };\n}\n\n/** @ignore */\nfunction createVectorComparator(search: Vector<any>) {\n    const n = search.length;\n    const C = search.constructor as any;\n    const fns = [] as ((x: any) => boolean)[];\n    for (let i = -1; ++i < n;) {\n        fns[i] = createElementComparator((search as any).get(i));\n    }\n    return (value: any) => {\n        if (!(value instanceof C)) { return false; }\n        if (!(value.length === n)) { return false; }\n        for (let i = -1; ++i < n;) {\n            if (!(fns[i](value.get(i)))) { return false; }\n        }\n        return true;\n    };\n}\n\n/** @ignore */\nfunction createObjectKeysComparator(search: any, keys: string[]) {\n    const n = keys.length;\n    const fns = [] as ((x: any) => boolean)[];\n    for (let i = -1; ++i < n;) {\n        fns[i] = createElementComparator(search[keys[i]]);\n    }\n    return (value: any) => {\n        if (!value || typeof value !== 'object') { return false; }\n        for (let i = -1; ++i < n;) {\n            if (!(fns[i](value[keys[i]]))) { return false; }\n        }\n        return true;\n    };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { selectChunkArgs } from '../util/args';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? T['dictionaryVector'] : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return (<any> this._type.dictionaryVector) as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let { ArrayType } = this._type;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new (ArrayType as any)(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset - 1;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[++idx] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { VectorCtorArgs, Vector as V } from './interfaces';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, chunks.some(({ nullCount }) => nullCount > 0));\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, val.nullCount > 0);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, val.nullCount > 0) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { selectArgs } from './util/args';\nimport { DataType, Dictionary } from './type';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n    public readonly dictionaryFields: Map<number, Field<Dictionary>[]>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null,\n                dictionaryFields?: Map<number, Field<Dictionary>[]> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries || !dictionaryFields) {\n            ({ dictionaries, dictionaryFields } = generateDictionaryMap(\n                fields, dictionaries || new Map(), dictionaryFields || new Map()\n            ));\n        }\n        this.dictionaries = dictionaries;\n        this.dictionaryFields = dictionaryFields;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const curDictionaries = [...this.dictionaries];\n        const curDictionaryFields = this.dictionaryFields;\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const { dictionaries, dictionaryFields } = generateDictionaryMap(newFields, new Map(), new Map());\n        const newDictionaries = [...dictionaries].filter(([y]) => !curDictionaries.every(([x]) => x === y));\n        const newDictionaryFields = [...dictionaryFields].map(([id, newDictFields]) => {\n            return [id, [...(curDictionaryFields.get(id) || []), ...newDictFields.map((f) => {\n                const i = newFields.findIndex((f2) => f.name === f2.name);\n                const { dictionary, indices, isOrdered, dictionaryVector } = f.type;\n                const type = new Dictionary(dictionary, indices, id, isOrdered, dictionaryVector);\n                return newFields[i] = f.clone({ type });\n            })]] as [number, Field<Dictionary>[]];\n        });\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...curDictionaries, ...newDictionaries]),\n            new Map([...curDictionaryFields, ...newDictionaryFields])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries: Map<number, DataType>, dictionaryFields: Map<number, Field<Dictionary>[]>) {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaryFields.get(type.id)) {\n                dictionaryFields.set(type.id, []);\n            }\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n                dictionaryFields.get(type.id)!.push(field as any);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children) {\n            generateDictionaryMap(type.children, dictionaries, dictionaryFields);\n        }\n    }\n\n    return { dictionaries, dictionaryFields };\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n(Schema.prototype as any).dictionaryFields = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { AbstractVector, Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { Vector as VType } from '../interfaces';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\nexport interface BaseVector<T extends DataType = any> extends Clonable<VType<T>>, Sliceable<VType<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): VType<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): VType<R>;\n}\n\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<VType<T>>, Sliceable<VType<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get VectorName() { return this.constructor.name; }\n\n    public get ArrayType(): T['ArrayType'] { return this.data.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    // @ts-ignore\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin));\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Bool } from '../type';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { packBools } from '../util/bit';\n\nexport class BoolVector extends BaseVector<Bool> {\n    /** @nocollapse */\n    public static from(data: Iterable<boolean>) {\n        let length = 0, bitmap = packBools(function*() {\n            for (let x of data) { length++; yield x; }\n        }());\n        return Vector.new(Data.Bool(new Bool(), 0, length, 0, null, bitmap));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DateUnit } from '../enum';\nimport { BaseVector } from './base';\nimport * as IntUtil from '../util/int';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    /** @nocollapse */\n    public static from<T extends Date_ = DateMillisecond>(data: Date[], unit: T['unit'] = DateUnit.MILLISECOND) {\n        switch (unit) {\n            case DateUnit.DAY: {\n                const values = Int32Array.from(data.map((d) => d.valueOf() / 86400000));\n                return Vector.new(Data.Date(new DateDay(), 0, data.length, 0, null, values));\n            }\n            case DateUnit.MILLISECOND: {\n                const values = IntUtil.Int64.convertArray(data.map((d) => d.valueOf()));\n                return Vector.new(Data.Date(new DateMillisecond(), 0, data.length, 0, null, values));\n            }\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[unit]}\"`);\n    }\n}\n\nexport class DateDayVector extends DateVector<DateDay> {}\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\nexport class DecimalVector extends BaseVector<Decimal> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { DataType, Dictionary, TKeys } from '../type';\n\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    /** @nocollapse */\n    public static from<T extends DataType<any>, TKey extends TKeys = TKeys>(\n        values: Vector<T>, indices: TKey,\n        keys: ArrayLike<number> | TKey['TArray']\n    ) {\n        const type = new Dictionary(values.type, indices, null, null, values);\n        return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys));\n    }\n    public readonly indices: V<TKey>;\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n    public get dictionary() { return this.data.type.dictionaryVector; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { Float, Float16, Float32, Float64 } from '../type';\nimport { toFloat16Array, toFloat32Array, toFloat64Array } from '../util/buffer';\n\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    public static from(this: typeof FloatVector, data: Float16['TArray']): Float16Vector;\n    public static from(this: typeof FloatVector, data: Float32['TArray']): Float32Vector;\n    public static from(this: typeof FloatVector, data: Float64['TArray']): Float64Vector;\n    public static from<T extends Float>(this: typeof FloatVector, data: T['TArray']): V<T>;\n\n    public static from(this: typeof Float16Vector, data: Float16['TArray'] | Iterable<number>): Float16Vector;\n    public static from(this: typeof Float32Vector, data: Float32['TArray'] | Iterable<number>): Float32Vector;\n    public static from(this: typeof Float64Vector, data: Float64['TArray'] | Iterable<number>): Float64Vector;\n    /** @nocollapse */\n    public static from<T extends Float>(data: T['TArray']) {\n        let type: Float | null = null;\n        switch (this) {\n            case Float16Vector: data = toFloat16Array(data); break;\n            case Float32Vector: data = toFloat32Array(data); break;\n            case Float64Vector: data = toFloat64Array(data); break;\n        }\n        switch (data.constructor) {\n            case Uint16Array:  type = new Float16(); break;\n            case Float32Array: type = new Float32(); break;\n            case Float64Array: type = new Float64(); break;\n        }\n        return type !== null\n            ? Vector.new(Data.Float(type, 0, data.length, 0, null, data))\n            : (() => { throw new TypeError('Unrecognized FloatVector input'); })();\n    }\n}\n\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\nexport class Float32Vector extends FloatVector<Float32> {}\nexport class Float64Vector extends FloatVector<Float64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\nimport {\n    toInt8Array, toInt16Array, toInt32Array,\n    toUint8Array, toUint16Array, toUint32Array,\n    toBigInt64Array, toBigUint64Array\n} from '../util/buffer';\n\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    public static from(this: typeof IntVector, data: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, data: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, data: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, data: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, data: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, data: Uint32Array): Uint32Vector;\n\n    // @ts-ignore\n    public static from(this: typeof IntVector, data: Int32Array, is64: true): Int64Vector;\n    public static from(this: typeof IntVector, data: Uint32Array, is64: true): Uint64Vector;\n    public static from<T extends Int>(this: typeof IntVector, data: T['TArray']): V<T>;\n\n    public static from(this: typeof Int8Vector,   data: Int8['TArray']   | Iterable<number>): Int8Vector;\n    public static from(this: typeof Int16Vector,  data: Int16['TArray']  | Iterable<number>): Int16Vector;\n    public static from(this: typeof Int32Vector,  data: Int32['TArray']  | Iterable<number>): Int32Vector;\n    public static from(this: typeof Int64Vector,  data: Int32['TArray']  | Iterable<number>): Int64Vector;\n    public static from(this: typeof Uint8Vector,  data: Uint8['TArray']  | Iterable<number>): Uint8Vector;\n    public static from(this: typeof Uint16Vector, data: Uint16['TArray'] | Iterable<number>): Uint16Vector;\n    public static from(this: typeof Uint32Vector, data: Uint32['TArray'] | Iterable<number>): Uint32Vector;\n    public static from(this: typeof Uint64Vector, data: Uint32['TArray'] | Iterable<number>): Uint64Vector;\n\n    /** @nocollapse */\n    public static from<T extends Int>(data: T['TArray'], is64?: boolean) {\n        let length: number = 0;\n        let type: Int | null = null;\n        switch (this) {\n            case Int8Vector:   data = toInt8Array(data);   is64 = false; break;\n            case Int16Vector:  data = toInt16Array(data);  is64 = false; break;\n            case Int32Vector:  data = toInt32Array(data);  is64 = false; break;\n            case Int64Vector:  data = toInt32Array(data);  is64 =  true; break;\n            case Uint8Vector:  data = toUint8Array(data);  is64 = false; break;\n            case Uint16Vector: data = toUint16Array(data); is64 = false; break;\n            case Uint32Vector: data = toUint32Array(data); is64 = false; break;\n            case Uint64Vector: data = toUint32Array(data); is64 =  true; break;\n        }\n        if (is64 === true) {\n            length = data.length * 0.5;\n            type = data instanceof Int32Array ? new Int64() : new Uint64();\n        } else {\n            length = data.length;\n            switch (data.constructor) {\n                case Int8Array:   type = new Int8();   break;\n                case Int16Array:  type = new Int16();  break;\n                case Int32Array:  type = new Int32();  break;\n                case Uint8Array:  type = new Uint8();  break;\n                case Uint16Array: type = new Uint16(); break;\n                case Uint32Array: type = new Uint32(); break;\n            }\n        }\n        return type !== null\n            ? Vector.new(Data.Int(type, 0, length, 0, null, data))\n            : (() => { throw new TypeError('Unrecognized IntVector input'); })();\n    }\n}\n\nexport class Int8Vector extends IntVector<Int8> {}\nexport class Int16Vector extends IntVector<Int16> {}\nexport class Int32Vector extends IntVector<Int32> {}\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n}\n\nexport class Uint8Vector extends IntVector<Uint8> {}\nexport class Uint16Vector extends IntVector<Uint16> {}\nexport class Uint32Vector extends IntVector<Uint32> {}\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n}\n\nexport interface Int64Vector extends IntVector<Int64> {\n    indexOf(value: Int64['TValue'] | bigint | null, fromIndex?: number): number;\n}\n\nexport interface Uint64Vector extends IntVector<Uint64> {\n    indexOf(value: Uint64['TValue'] | bigint | null, fromIndex?: number): number;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { RowProxyGenerator } from './row';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class MapVector<T extends { [key: string]: DataType } = any> extends BaseVector<Map_<T>> {\n    public asStruct() {\n        return Vector.new(this.data.clone(new Struct<T>(this.type.children as Field<T[keyof T]>[])));\n    }\n    // @ts-ignore\n    private _rowProxy: RowProxyGenerator<T>;\n    public get rowProxy(): RowProxyGenerator<T> {\n        return this._rowProxy || (this._rowProxy = RowProxyGenerator.new<T>(this, this.type.children || [], true));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { RowProxyGenerator } from './row';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    public asMap(keysSorted: boolean = false) {\n        return Vector.new(this.data.clone(new Map_<T>(this.type.children as Field<T[keyof T]>[], keysSorted)));\n    }\n    // @ts-ignore\n    private _rowProxy: RowProxyGenerator<T>;\n    public get rowProxy(): RowProxyGenerator<T> {\n        return this._rowProxy || (this._rowProxy = RowProxyGenerator.new<T>(this, this.type.children || [], false));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n}\n\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\n\nexport class Utf8Vector extends BaseVector<Utf8> {\n    /** @nocollapse */\n    public static from(values: string[]) {\n        const length = values.length;\n        const data = encodeUtf8(values.join(''));\n        const offsets = values.reduce((offsets, str, idx) => (\n            (!(offsets[idx + 1] = offsets[idx] + str.length) || true) && offsets\n        ), new Uint32Array(values.length + 1));\n        return Vector.new(Data.Utf8(new Utf8(), 0, length, 0, null, offsets, data));\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { toArrayBufferView, ArrayBufferViewInput } from './buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\ntype BigNumArray = IntArray | UintArray;\n/** @ignore */\ntype IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */\ntype UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nconst BigNumNMixin = {\n    toJSON(this: BN<BigNumArray>) { return `\"${bignumToString(this)}\"`; },\n    valueOf(this: BN<BigNumArray>) { return bignumToNumber(this); },\n    toString(this: BN<BigNumArray>) { return bignumToString(this); },\n    [Symbol.toPrimitive]<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default') {\n        switch (hint) {\n            case 'number': return bignumToNumber(this);\n            case 'string': return bignumToString(this);\n            case 'default': return bignumToBigInt(this);\n        }\n        return bignumToString(this);\n    }\n};\n\n/** @ignore */\nconst SignedBigNumNMixin: any = Object.assign({}, BigNumNMixin, { signed: true, BigIntArray: BigInt64Array });\n/** @ignore */\nconst UnsignedBigNumNMixin: any = Object.assign({}, BigNumNMixin, { signed: false, BigIntArray: BigUint64Array });\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    public static new<T extends BigNumArray>(input: ArrayBufferViewInput, signed?: boolean): T;\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(input: ArrayBufferViewInput, signed = (input instanceof Int8Array || input instanceof Int16Array || input instanceof Int32Array)): T {\n        return (signed === true) ? BN.signed(input) as T : BN.unsigned(input) as T;\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(input: ArrayBufferViewInput): T {\n        const Ctor: any = ArrayBuffer.isView(input) ? <any> input.constructor : Int32Array;\n        const { buffer, byteOffset, length } = toArrayBufferView<T>(<any> Ctor, input) as T;\n        const bn = new Ctor(buffer, byteOffset, length);\n        return Object.assign(bn, SignedBigNumNMixin);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(input: ArrayBufferViewInput): T {\n        const Ctor: any = ArrayBuffer.isView(input) ? <any> input.constructor : Uint32Array;\n        const { buffer, byteOffset, length } = toArrayBufferView<T>(<any> Ctor, input) as T;\n        const bn = new Ctor(buffer, byteOffset, length);\n        return Object.assign(bn, UnsignedBigNumNMixin);\n    }\n    constructor(input: ArrayBufferViewInput, signed = input instanceof Int32Array) {\n        return BN.new(input, signed) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmatic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint: any): number | string | bigint;\n}\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>({ buffer, byteOffset, length }: T) {\n    let int64 = 0;\n    let words = new Uint32Array(buffer, byteOffset, length);\n    for (let i = 0, n = words.length; i < n;) {\n        int64 += words[i++] + (words[i++] * (i ** 32));\n    }\n    return int64;\n}\n\n/** @ignore */\nlet bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nlet bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.length === 2 ? new a.BigIntArray(a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.length === 2 ? `${new a.BigIntArray(a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.length * 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { decodeUtf8 } from '../util/utf8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface GetVisitor extends Visitor {\n    visit<T extends Vector>  (node: T, index: number): T['TValue'];\n    visitMany<T extends Vector>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: Vector<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: Vector<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: Vector<T>, index: number): T['TValue'];\n}\n\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: Vector<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: Vector<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number): T['TValue'] => (values[stride * index] - 32767) / 32767;\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(<any> vector, index)\n        : getBigInts(<any> vector, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as any, index)\n        : getFloat16(vector as any, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as any, index)\n        : getDateMillisecond(vector as any, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as Vector<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as Vector<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as Vector<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(2 * index, 2 * (index + 1)), true);\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(2 * index, 2 * (index + 1)), true);\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as Vector<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as Vector<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as Vector<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as Vector<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(4 * index, 4 * (index + 1)), false);\n\n/** @ignore */\nconst getList = <T extends List>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.rowProxy.bind(index);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as Vector<DenseUnion>, index) :\n        getSparseUnion(vector as Vector<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: Vector<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: Vector<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as any, index)\n        : getIntervalYearMonth(vector as any, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getNested;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =               getNested;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface SetVisitor extends Visitor {\n    visit<T extends Vector>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends Vector>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n}\n\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: Vector<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = (value * 32767) + 32767; };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(<any> vector, index, value as Numeric1X['TValue'])\n        : setNumericX2(<any> vector, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(<any> vector, index, value)\n        : setFloat16(<any> vector, index, value);\n};\n\n/* istanbul ignore next */\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector, index, value)\n        : setDateMillisecond(vector, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as Vector<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as Vector<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as Vector<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as Vector<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as Vector<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as Vector<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as Vector<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!;\n    const { valueOffsets, stride } = vector;\n    let idx = -1, offset = valueOffsets[index * stride];\n    let end = Math.min(value.length, valueOffsets[(index * stride) + 1] - offset);\n    while (offset < end) {\n        values.set(offset++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.children.forEach(({ name }, idx) => {\n        const kid = vector.getChildAt(idx);\n        kid && kid.set(index, value[name]);\n    });\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as Vector<DenseUnion>, index, value) :\n        setSparseUnion(vector as Vector<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector, index, value)\n        : setIntervalYearMonth(vector, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 getDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setNested;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =               setNested;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends Vector>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends Vector>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: Vector<T>, value: Vector<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n}\n\nexport class IndexOfVisitor extends Visitor {\n}\n\n/** @ignore */\nfunction nullIndexOf(vector: Vector<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: Vector<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends Vector>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends Vector>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n}\n\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: Vector<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends Vector>(node: T): T['TArray'];\n    visitMany<T extends Vector>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>) => Vector<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: Vector<T>): Vector<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: Vector<T>): Vector<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: Vector<T>): Vector<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: Vector<T>): Vector<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: Vector<T>): Vector<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: Vector<T>): Vector<T>['TArray'];\n}\n\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: Vector<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (type: T) => number;\n}\n\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { Vector, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Row } from './row';\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { Vector as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n    }\n}\n\ndeclare module './base' {\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn(data.type)())(data, ...args) as V<T>;\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .filter((typeId) => typeId !== Type.NONE && typeId !== Type[Type.NONE])\n    .map((T: any) => Type[T] as any).filter((T: any): T is Type => typeof T === 'number')\n    .forEach((typeId) => {\n        let typeIds: Type[];\n        switch (typeId) {\n            case Type.Int:       typeIds = [Type.Int8, Type.Int16, Type.Int32, Type.Int64, Type.Uint8, Type.Uint16, Type.Uint32, Type.Uint64]; break;\n            case Type.Float:     typeIds = [Type.Float16, Type.Float32, Type.Float64]; break;\n            case Type.Date:      typeIds = [Type.DateDay, Type.DateMillisecond]; break;\n            case Type.Time:      typeIds = [Type.TimeSecond, Type.TimeMillisecond, Type.TimeMicrosecond, Type.TimeNanosecond]; break;\n            case Type.Timestamp: typeIds = [Type.TimestampSecond, Type.TimestampMillisecond, Type.TimestampMicrosecond, Type.TimestampNanosecond]; break;\n            case Type.Interval:  typeIds = [Type.IntervalDayTime, Type.IntervalYearMonth]; break;\n            case Type.Union:     typeIds = [Type.DenseUnion, Type.SparseUnion]; break;\n            default:                typeIds = [typeId]; break;\n        }\n        typeIds.forEach((typeId) => {\n            const VectorCtor = getVectorConstructor.visit(typeId);\n            VectorCtor.prototype['get'] = partial1(getVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['set'] = partial2(setVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['indexOf'] = partial2(indexOfVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['toArray'] = partial0(toArrayVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n            VectorCtor.prototype[Symbol.iterator] = partial0(iteratorVisitor.getVisitFn(typeId));\n        });\n    });\n\n/** @ignore */\nfunction partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nfunction partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i: number = -1, numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries, dictionaryFields\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries, dictionaryFields));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new DataType();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_(children || [], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/** @ignore */\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/** @ignore */\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/** @ignore */\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/** @ignore */\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/** @ignore */\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries, dictionaryFields);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries, dictionaryFields);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries, dictionaryFields);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries, dictionaryFields);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries, dictionaryFields));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new DataType();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_(children || [], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                delete this._pending;\n                this.size = (await file.stat()).size;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json, _batchIndex, _dictionaryIndex } = this;\n        const numBatches = _json.batches.length;\n        const numDictionaries = _json.dictionaries.length;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { value: message, done: _batchIndex >= numBatches && _dictionaryIndex >= numDictionaries };\n        }\n        if (_dictionaryIndex < numDictionaries) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (_batchIndex < numBatches) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { Vector as VType } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: VType<T> | Data<T> | T): (vector: VType<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: VType<T>): this;\n    visitInt                  <T extends Int>             (vector: VType<T>): this;\n    visitFloat                <T extends Float>           (vector: VType<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: VType<T>): this;\n    visitBinary               <T extends Binary>          (vector: VType<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: VType<T>): this;\n    visitDate                 <T extends Date_>           (vector: VType<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: VType<T>): this;\n    visitTime                 <T extends Time>            (vector: VType<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: VType<T>): this;\n    visitList                 <T extends List>            (vector: VType<T>): this;\n    visitStruct               <T extends Struct>          (vector: VType<T>): this;\n    visitUnion                <T extends Union>           (vector: VType<T>): this;\n    visitInterval             <T extends Interval>        (vector: VType<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: VType<T>): this;\n    visitMap                  <T extends Map_>            (vector: VType<T>): this;\n}\n\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            addBuffer.call(this, nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : truncateBitmap(data.offset, length, data.nullBitmap)\n            ).nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: VType<T>) {\n        return addBuffer.call(this, new Uint8Array(0));\n    }\n    public visitDictionary<T extends Dictionary>(vector: VType<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: VType<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: VType<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: VType<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: VType<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends List | FixedSizeList>(this: VectorAssembler, vector: VType<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Map_ | Union>(this: VectorAssembler, vector: VType<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =   assembleNestedVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { RecordBatch } from '../recordbatch';\nimport { Vector as VType } from '../interfaces';\nimport { VectorType as BufferType } from '../enum';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: VType<T>): { };\n    visitBool                 <T extends Bool>            (vector: VType<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: VType<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: VType<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: VType<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: VType<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: VType<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: VType<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: VType<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: VType<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: VType<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: VType<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: VType<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: VType<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: VType<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: VType<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: VType<T>): { children: any[] };\n}\n\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': nullCount <= 0\n                ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return { 'DATA': [] }; }\n    public visitBool<T extends Bool>({ values, offset, length }: VType<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: VType<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: VType<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: VType<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: VType<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: VType<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: VType<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: VType<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: VType<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: VType<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { DataType, Dictionary } from '../type';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable } from '../util/compat';\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: { autoDestroy: boolean }) {\n        super();\n        this._autoDestroy = options && (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter();\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            this._writeRecordBatch(payload);\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const alignedSize = (flatbufferSize + 4 + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - 4;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - 4));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMessage(Message.from(schema))\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n\n    protected _writeFooter() {\n        return this._writePadding(4); // eos bytes\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(records: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(records);\n        const recordBatch = new metadata.RecordBatch(records.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(dictionaryFields: Map<number, Field<Dictionary<any, any>>[]>) {\n        for (const [id, fields] of dictionaryFields) {\n            const vector = fields[0].type.dictionaryVector;\n            if (!(vector instanceof Chunked)) {\n                this._writeDictionaryBatch(vector, id, false);\n            } else {\n                const chunks = vector.chunks;\n                for (let i = -1, n = chunks.length; ++i < n;) {\n                    this._writeDictionaryBatch(chunks[i], id, i > 0);\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>, options?: { autoDestroy: true }): RecordBatchStreamWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any, options?: { autoDestroy: true }) {\n        return new RecordBatchStreamWriter<T>(options).writeAll(input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchFileWriter<T>().writeAll(input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMagic()._writePadding(2)\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n\n    protected _writeFooter() {\n        const buffer = Footer.encode(new Footer(\n            this._schema!, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return this\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    protected _writeMessage() { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`)._writeDictionaries(schema.dictionaryFields);\n    }\n    protected _writeDictionaries(dictionaryFields: Map<number, Field<Dictionary<any, any>>[]>) {\n        this._write(`,\\n  \"dictionaries\": [\\n`);\n        super._writeDictionaries(dictionaryFields);\n        return this._write(`\\n  ]`);\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(this._schema!, dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(records: RecordBatch<T>) {\n        this._write(this._recordBatchBlocks.length === 0\n            ? `,\\n  \"batches\": [\\n    `\n            : `,\\n    `);\n        this._write(`${recordBatchToJSON(records)}`);\n        this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    public close() {\n        if (this._recordBatchBlocks.length > 0) {\n            this._write(`\\n  ]`);\n        }\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(schema: Schema, dictionary: Vector, id: number, isDelta = false) {\n    const f = schema.dictionaryFields.get(id)![0];\n    const field = new Field(f.name, f.type.dictionary, f.nullable, f.metadata);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { isPromise } from './util/compat';\nimport { RecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { Vector, Chunked } from './vector/index';\nimport { DataType, RowLike, Struct } from './type';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { distributeColumnsIntoRecordBatches } from './util/recordbatch';\nimport { distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = any>() { return new Table<T>(new Schema([]), []); }\n\n    public static from<T extends { [key: string]: DataType } = any>(): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source?: any) {\n\n        if (!source) { return Table.empty<T>(); }\n\n        let reader = RecordBatchReader.from<T>(source) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty<T>() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty<T>();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(struct: Vector<Struct<T>>) {\n        return Table.new<T>(struct.data.childData as Data<T[keyof T]>[], struct.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        if (!chunks[0]) {\n            chunks[0] = new RecordBatch(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0)));\n        }\n\n        super(new Struct<T>(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return writer.writeAll(this._chunks).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table(...distributeVectorsIntoRecordBatches<T & R>(schema, columns));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Schema, Field } from './schema';\nimport { DataType, Struct } from './type';\nimport { Chunked } from './vector/chunked';\nimport { StructVector } from './vector/struct';\nimport { selectFieldArgs } from './util/args';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return RecordBatch.new(args[0], args[1]);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[]) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Null(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices));                                                   }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n}\n\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[]) {\n        super(new Uint8Array(0), nodes, buffers);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        if (isDelta || !dictionaries.get(id)) {\n\n            const type = schema.dictionaries.get(id)!;\n            const vector = (isDelta ? dictionaries.get(id)!.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n\n            (schema.dictionaryFields.get(id) || []).forEach(({ type }) => type.dictionaryVector = vector);\n\n            return vector;\n        }\n        return dictionaries.get(id)!;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Vector as V } from '../interfaces';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Schema, Field } from './schema';\nexport { Visitor } from './visitor';\nexport {\n    Row,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\n/** @ignore */\nexport const util = {\n    ...util_int_,\n    ...util_bit_,\n    ...util_buffer_,\n    ...util_vector_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './ipc/whatwg/iterable';\nimport { recordBatchReaderThroughDOMStream } from './ipc/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './ipc/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util\n} from './Arrow';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"],"sourceRoot":""}