{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","tslib/tslib.es6.js","util/buffer.ts","util/compat.ts","io/interfaces.ts","io/adapters.ts","flatbuffers/js/flatbuffers.mjs","util/utf8.ts","text-encoding-utf-8/lib/encoding.lib.mjs","buffer/index.js","(webpack)/buildin/global.js","base64-js/index.js","ieee754/index.js","isarray/index.js","fb/Schema.ts","fb/Message.ts","vector.ts","enum.ts","fb/File.ts","type.ts","schema.ts","ipc/metadata/file.ts","util/bit.ts","data.ts","util/pretty.ts","vector/row.ts","util/vector.ts","vector/chunked.ts","column.ts","vector/base.ts","vector/binary.ts","vector/bool.ts","util/int.ts","vector/date.ts","vector/decimal.ts","vector/dictionary.ts","vector/fixedsizebinary.ts","vector/fixedsizelist.ts","vector/float.ts","vector/interval.ts","vector/int.ts","vector/list.ts","vector/map.ts","vector/null.ts","vector/struct.ts","vector/timestamp.ts","vector/time.ts","vector/union.ts","vector/utf8.ts","visitor.ts","visitor/get.ts","visitor/set.ts","visitor/indexof.ts","visitor/iterator.ts","visitor/toarray.ts","visitor/bytewidth.ts","visitor/vectorctor.ts","vector/index.ts","visitor/typeassembler.ts","ipc/metadata/json.ts","ipc/metadata/message.ts","io/stream.ts","io/file.ts","ipc/message.ts","visitor/vectorassembler.ts","visitor/jsontypeassembler.ts","visitor/jsonvectorassembler.ts","ipc/writer.ts","table.ts","recordbatch.ts","visitor/vectorloader.ts","ipc/reader.ts","ipc/whatwg/hack.ts","compute/predicate.ts","compute/dataframe.ts","Arrow.ts","Arrow.dom.ts","ipc/whatwg/iterable.ts","ipc/whatwg/reader.ts","ipc/whatwg/writer.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","__awaiter","__await","__asyncGenerator","__asyncDelegator","__asyncValues","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__values","iterator","length","v","this","asyncIterator","TypeError","g","q","verb","a","b","push","resume","fulfill","settle","f","shift","memcpy","joinUint8Arrays","toArrayBufferView","toInt8Array","toInt16Array","toInt32Array","toUint8Array","toUint16Array","toUint32Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","toArrayBufferViewIterator","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","tslib__WEBPACK_IMPORTED_MODULE_0__","flatbuffers__WEBPACK_IMPORTED_MODULE_1__","_util_utf8__WEBPACK_IMPORTED_MODULE_2__","_compat__WEBPACK_IMPORTED_MODULE_3__","ByteBuffer","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","target","source","targetByteOffset","sourceByteLength","byteLength","targetByteLength","dst","Uint8Array","buffer","byteOffset","src","Math","min","set","chunks","size","sliced","offset","index","numChunks","x","y","xOffset","xLen","yOffset","yLen","splice","collapseContiguousByteRanges","chunksLen","reduce","Infinity","subarray","slice","ArrayBufferViewCtor","input","bytes","isView","BYTES_PER_ELEMENT","from","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","Uint8ClampedArray","pump","ArrayCtor","wrap","buffers","it","arguments","emit","valueOffsets","isPromise","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isWritableDOMStream","isWritableNodeStream","isReadableDOMStream","isReadableNodeStream","_io_interfaces__WEBPACK_IMPORTED_MODULE_0__","hasFuncs","fn","hasProps","map","ks","isObject","every","k","ITERATOR_DONE","ArrowJSON","ReadableInterop","AsyncQueue","_adapters__WEBPACK_IMPORTED_MODULE_1__","freeze","[object Object]","_json","schema","batches","dictionaries","_getReadableDOMStream","tee","writable","options","_getReadableNodeStream","pipe","pipeTo","duplex","pipeThrough","_readableDOMStream","toReadableDOMStream","_readableNodeStream","toReadableNodeStream","super","_values","resolvers","_closedPromise","_closedPromiseResolve","closed","reason","return","_ensureOpen","_error","error","undefined","_","abort","close","_args","Error","_util_buffer__WEBPACK_IMPORTED_MODULE_1__","fromIterable","cmd","threw","bufferLength","byteRange","isNaN","throw","fromAsyncIterable","fromReadableDOMStream","AdaptiveByteReader","releaseLock","fromReadableNodeStream","stream","events","event","err","onEvent","race","isFinite","evt","destroyed","cb","cleanup","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","read","readInto","handler","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","position","prep","additional_bytes","align_size","capacity","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","vt2","readInt16","j","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","Buffer","decodeUtf8","encodeUtf8","_buffer__WEBPACK_IMPORTED_MODULE_0__","text_encoding_utf_8__WEBPACK_IMPORTED_MODULE_1__","decoder","NodeBuffer","toString","decode","TextDecoder","encoder","encode","TextEncoder","inRange","max","ToDictionary","end_of_stream","Stream","tokens","endOfStream","prepend","token","Array","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","bite","code_point","UTF8Encoder","count","temp","input_stream","code_points","indexOf","cp","codePointsToString","opt_string","string","u","stringToCodePoints","global","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","array","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","isBuffer","checked","copy","val","type","data","fromObject","assertSize","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","buf","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","concat","list","pos","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","match","join","thisStart","thisEnd","thisCopy","targetCopy","includes","toJSON","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","Function","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","Schema_org","arrow","apache","org","Message_org","Vector","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","VectorType","Endianness","Null","__init","builder","Struct_","List","FixedSizeList","listSize","Map","keysSorted","Union","Sparse","typeIdsOffset","numElems","Int","bitWidth","isSigned","FloatingPoint","HALF","precision","Utf8","Binary","FixedSizeBinary","byteWidth","Bool","Decimal","scale","Date","MILLISECOND","unit","Time","Timestamp","SECOND","optionalEncoding","timezoneOffset","Interval","YEAR_MONTH","VectorLayout","OFFSET","KeyValue","keyOffset","valueOffset","DictionaryEncoding","id","indexTypeOffset","isOrdered","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","layoutOffset","customMetadataOffset","Schema","Little","endianness","fieldsOffset","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","DictionaryBatch","dataOffset","isDelta","Message","V1","version","headerType","headerOffset","bodyLength","File_org","ArrowType","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","metaDataLength","type_DataType","_children","typeId","Float","Struct","Dictionary","children","proto","ArrayType","type_Null","type_Int_","_isSigned","_bitWidth","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","type_Float","_precision","SINGLE","DOUBLE","type_Float16","type_Float32","type_Float64","type_Binary","type_Utf8","type_Bool","type_Decimal","_scale","type_Date_","_unit","type_DateDay","DAY","type_DateMillisecond","type_Time_","type_TimeSecond","type_TimeMillisecond","type_TimeMicrosecond","MICROSECOND","type_TimeNanosecond","NANOSECOND","type_Timestamp_","_timezone","timezone","type_TimestampSecond","type_TimestampMillisecond","type_TimestampMicrosecond","type_TimestampNanosecond","type_Interval_","type_IntervalDayTime","DAY_TIME","type_IntervalYearMonth","type_List","child","valueType","valueField","type_Struct","type_Union_","_mode","_typeIds","_typeIdToChildIndex","typeIdToChildIndex","idx","typeIds","type_DenseUnion","Dense","type_SparseUnion","type_FixedSizeBinary","_byteWidth","type_FixedSizeList","_listSize","type_Map_","_keysSorted","getId","atomicDictionaryId","type_Dictionary","dictionary","indices","dictionaryVector","_indices","_dictionary","_isOrdered","_dictionaryVector","_id","fields","metadata","dictionaryFields","_fields","_metadata","generateDictionaryMap","isDictionary","has","_dictionaries","_dictionaryFields","vectors","names","schema_Field","columnNames","xs","filter","_name","_type","_nullable","_Block","_Footer","file_Footer_","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","util_buffer","footer","getRootAsFooter","OffHeapFooter","startRecordBatchesVector","numRecordBatches","reverse","forEach","rb","FileBlock","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","finishFooterBuffer","endFooter","block","getRecordBatch","getDictionaryBatch","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","iterateBits","values","begin","context","byteIndex","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","cnt","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","kUnknownNullCount","data_Data","nullCount","childData","_buffers","_offset","_length","assign","_nullCount","_childData","DATA","TYPE","nullBitmap","VALIDITY","sliceBuffers","sliceChildren","clone","sliceData","sliceOffsets","valueOffsetsOrChildData","valueToString","JSON","stringify","columnDescriptor","lengthDescriptor","rowIndexDescriptor","rowParentDescriptor","row","parent","rowIndex","row_Row","fieldsAreEnumerable","columnIndex","_bindGetter","schemaOrFields","keys","colIndex","getChildAt","bound","isStruct","getOwnPropertyNames","props","prop","clampIndex","adjust","clampRange","createElementComparator","search","valueOfSearch","valueOf","fns","C","constructor","chunked_Chunked","offsets","calculateOffsets","_chunks","_chunkOffsets","_numChildren","flatten","numChildren","stride","chunk","others","_sliceInternal","columns","vector","vec","mid","isValidInternal","getInternal","element","self","indexOfInternal","toArray","arraySet","typedSet","isValid","chunkIndex","fromIndex","slices","chunkOffsets","chunkLength","chunkOffset","column_Column","_field","column","base_BaseVector","_stride","_bindDataAccessors","VectorName","new","binary_BinaryVector","bool_BoolVector","carryBit16","intAsHex","kInt32DecimalDigits","kPowersOfTen","BaseInt64","L","R","product","lessThan","int_Uint64","_times","_plus","out_buffer","posn","group","multiple","times","plus","left","right","int_Int64","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","date_DateVector","convertArray","DateDayVector","DateMillisecondVector","decimal_DecimalVector","dictionary_DictionaryVector","fixedsizebinary_FixedSizeBinaryVector","fixedsizelist_FixedSizeListVector","float_FloatVector","Float16Vector","Float32Vector","Float64Vector","interval_IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","int_IntVector","is64","Int8Vector","Int16Vector","Int32Vector","Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","list_ListVector","map_MapVector","rowProxy","null_NullVector","struct_StructVector","timestamp_TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","time_TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","union_UnionVector","DenseUnionVector","SparseUnionVector","utf8_Utf8Vector","Visitor","nodes","args","node","visit","getVisitFn","throwIfNotFound","visitor","dtype","inferDType","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","_node","get_GetVisitor","epochMillisecondsLongToMs","epochMillisecondsToDate","epochMs","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getNumericX2","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getNested","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","getValue","getKey","instance","set_SetVisitor","setEpochMsToMillisecondsLong","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setNested","kid","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","setValue","set_instance","indexof_IndexOfVisitor","indexOfValue","searchElement","indexOfNull","indexOfUnion","indexof_instance","iterator_IteratorVisitor","vectorIterator","getFn","nullByte","nullBit","nullableIterator","iterator_instance","toarray_ToArrayVisitor","arrayOfVector","toarray_instance","variableWidthColumnErrorMessage","bytewidth_instance","____","visitFields","vectorctor_instance","partial0","partial2","getByteWidth","wrapNullableSet","T","VectorCtor","partial1","typeassembler_Long","typeassembler_Null","typeassembler_Binary","typeassembler_Bool","typeassembler_Utf8","typeassembler_Decimal","typeassembler_Date","typeassembler_List","typeassembler_Struct","typeassembler_FixedSizeBinary","typeassembler_FixedSizeList","typeassembler_Map_","typeassembler_instance","startNull","endNull","startInt","addBitWidth","addIsSigned","endInt","startFloatingPoint","addPrecision","endFloatingPoint","startBinary","endBinary","startBool","endBool","startUtf8","endUtf8","startDecimal","addScale","endDecimal","startDate","addUnit","endDate","startTime","endTime","startTimestamp","addTimezone","endTimestamp","startInterval","endInterval","startList","endList","startStruct_","endStruct_","startTypeIdsVector","createTypeIdsVector","startUnion","addMode","addTypeIds","endUnion","indexType","startDictionaryEncoding","addId","addIsOrdered","addIndexType","endDictionaryEncoding","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startFixedSizeList","addListSize","endFixedSizeList","startMap","addKeysSorted","endMap","recordBatchFromJSON","message_RecordBatch","fieldNodesFromJSON","fieldNodes","nullCountFromJSON","buffersFromJSON","BufferRegion","fieldChildrenFromJSON","Boolean","fromJSON","validity","customMetadataFromJSON","entries","indexTypeFromJSON","typeFromJSON","message_Long","message_Builder","message_ByteBuffer","message_Type","_Field","_Schema","_Buffer","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","message_Message","header","_version","_headerType","body","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","startMessage","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","_nodes","_isDelta","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","startKeyValue","addKey","addValue","endKeyValue","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","addCustomMetadata","endField","dictType","dictMeta","dictField","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","startSchema","addFields","addEndianness","platformIsLittleEndian","Big","endSchema","_schema","fieldsLength","decodeSchemaFields","schemaFieldsFromJSON","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","batch","nodesLength","decodeFieldNodes","buffersLength","v3Compat","decodeBuffers","dictionaryBatch","startDictionaryBatch","addIsDelta","addData","endDictionaryBatch","createFieldNode","setInt16","stream_AsyncByteQueue","interfaces","sync","tslib_es6","_c","_b","stream_ByteStream","stream_ByteStreamSource","adapters","peek","stream_AsyncByteStream","stream_AsyncByteStreamSource","compat","cancel","file_RandomAccessFile","readAt","getInt32","file_AsyncRandomAccessFile","file","_pendingSize","stat","bytesRead","ipc_message_ByteBuffer","invalidMessageType","nullMessage","invalidMessageMetadata","expected","invalidMessageBodyLength","message_MessageReader","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","message_AsyncMessageReader","message_JSONMessageReader","_body","_batchIndex","_dictionaryIndex","numBatches","flattenDataSources","MAGIC","MAGIC_STR","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","vectorassembler_VectorAssembler","_bufferRegions","recordbatch_RecordBatch","visitMany","addBuffer","_nullV","bufferRegions","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childIndex","childLength","jsontypeassembler_JSONTypeAssembler","jsonvectorassembler_JSONVectorAssembler","bigNumsToStrings","binaryToString","octets","toUpperCase","bignumToString","digits","writer_RecordBatchWriter","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","writeAll","writer","batches_1","batches_1_1","writeAllAsync","table_Table","reset","sink","_writeSchema","_writeRecordBatch","flatbufferSize","nPaddingBytes","_write","of","_writePadding","_writeMessage","_writeDictionaries","_writeMagic","records","assemble","_writeBodyBuffers","padding","_writeDictionaryBatch","RecordBatchFileWriter","_writeFooter","RecordBatchStreamWriter","writer_RecordBatchJSONWriter","fieldToJSON","dictionaryBatchToJSON","recordBatchToJSON","assembler","empty","reader_RecordBatchReader","isSync","open","opening","reader_1_1","reader_1","struct","numCols","getColumnAt","getColumnIndex","findIndex","select","numRows","childNames","structData","vectorloader_VectorLoader","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","readTypeIds","nextBufferRange","vectorloader_JSONVectorLoader","sources","isTimestamp","isInt","isTime","isDate","isDecimal","isBinary","isFixedSizeBinary","joined","binaryDataFromJSON","isBool","isUtf8","impl","autoClose","objectMode","reader_RecordBatchFileReader","reader_RecordBatchStreamReader","reader_AsyncRecordBatchFileReader","reader_AsyncRecordBatchStreamReader","fromFileHandle","fromAsyncByteStream","fromByteStream","reader_AsyncRecordBatchFileReaderImpl","reader_RecordBatchFileReaderImpl","readRecordBatch","reader_RecordBatchJSONReaderImpl","reader_RecordBatchStreamReaderImpl","reader_AsyncRecordBatchStreamReaderImpl","rest","reader_RecordBatchReaderImplBase","dictionaryIndex","recordBatchIndex","_loadVectors","types","readSchema","readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","readFooter","readDictionaryBatch","seek","_super","kIsFakeBuffer","for","protectArrayBufferFromWhatwgRefImpl","real","fake","Value","Literal","predicate_Equals","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","some","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","cols","func","CustomPredicate","bind_","predicate_lit","predicate_col","and","or","custom","countBy","dataframe_DataFrame","scan","predicate","dataframe_FilteredDataFrame","batchIndex","count_by","countByteLength","ceil","counts","dataframe_CountByResult","_predicate","util","int_namespaceObject","bit_namespaceObject","util_vector_namespaceObject","predicate_namespaceObject","bm","hwm","highWaterMark","ReadableStream","controller","desiredSize","enqueue","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable","WritableStream","writableStrategy","readableStrategy"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { ArrayBufferViewConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    for (let x, y, i = 0; ++i < chunks.length;) {\n        x = chunks[i - 1];\n        y = chunks[i - 0];\n        // continue x and y don't share the same underlying ArrayBuffer\n        if (!x || !y || x.buffer !== y.buffer) { continue; }\n        const { byteOffset: xOffset, byteLength: xLen } = x;\n        const { byteOffset: yOffset, byteLength: yLen } = y;\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) { continue; }\n        chunks.splice(--i, 2, new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen));\n    }\n    return chunks;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[]] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    chunks = collapseContiguousByteRanges(chunks);\n    let offset = 0, index = -1, numChunks = chunks.length;\n    let chunksLen = chunks.reduce((x, y) => x + y.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let length = Math.min(chunksLen, typeof size === 'number' ? size : Infinity);\n    while (++index < numChunks) {\n        source = chunks[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                chunks[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        (buffer || (buffer = new Uint8Array(length))).set(sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), chunks.slice(index)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends ArrayBufferView>(ArrayBufferViewCtor: ArrayBufferViewConstructor<T>, input: ArrayBufferViewInput): T {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBufferViewCtor) { return value; }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends ArrayBufferView>(ArrayCtor: ArrayBufferViewConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends ArrayBufferView>(ArrayCtor: ArrayBufferViewConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */ const isObject = (x: any) => x != null && Object(x) === x;\n/** @ignore */ const hasFuncs = (x: any, ...fn: PropertyKey[]) => hasProps(x, ...fn.map((f) => [f, 'function'] as [PropertyKey, string]));\n/** @ignore */ const hasProps = (x: any, ...ks: [PropertyKey, string?][]) => isObject(x) && ks.every(([k, t]) => t ? (x[k] != null && typeof x[k] === t) : (k in x));\n\n/** @ignore */ export const isPromise            = <T = any>(x: any): x is PromiseLike<T>        => hasFuncs(x, 'then');\n/** @ignore */ export const isObservable         = <T = any>(x: any): x is Observable<T>         => hasFuncs(x, 'subscribe');\n/** @ignore */ export const isIterable           = <T = any>(x: any): x is Iterable<T>           => hasFuncs(x, Symbol.iterator);\n/** @ignore */ export const isAsyncIterable      = <T = any>(x: any): x is AsyncIterable<T>      => hasFuncs(x, Symbol.asyncIterator);\n/** @ignore */ export const isArrowJSON          =          (x: any): x is ArrowJSONLike         => hasProps(x, ['schema', 'object']);\n/** @ignore */ export const isArrayLike          = <T = any>(x: any): x is ArrayLike<T>          => hasProps(x, ['length', 'number']);\n/** @ignore */ export const isIteratorResult     = <T = any>(x: any): x is IteratorResult<T>     => hasProps(x, ['done'], ['value']);\n/** @ignore */ export const isUnderlyingSink     = <T = any>(x: any): x is UnderlyingSink<T>     => hasFuncs(x, 'abort', 'close', 'start', 'write');\n/** @ignore */ export const isFileHandle         =          (x: any): x is FileHandle            => hasFuncs(x, 'stat') && hasProps(x, ['fd', 'number']);\n/** @ignore */ export const isFSReadStream       =          (x: any): x is FSReadStream          => isReadableNodeStream(x) && hasProps(x, ['bytesRead', 'number']);\n/** @ignore */ export const isFetchResponse      =          (x: any): x is Response              => hasProps(x, ['body'], ['bodyUsed', 'boolean'], ['ok', 'boolean']);\n/** @ignore */ export const isWritableDOMStream  = <T = any>(x: any): x is WritableStream<T>     => !(x instanceof ReadableInterop) && hasFuncs(x, 'abort', 'getWriter');\n/** @ignore */ export const isWritableNodeStream =          (x: any): x is NodeJS.WritableStream => !(x instanceof ReadableInterop) && hasFuncs(x, 'write', 'cork', 'uncork', 'end');\n/** @ignore */ export const isReadableDOMStream  = <T = any>(x: any): x is ReadableStream<T>     => !(x instanceof ReadableInterop) && hasFuncs(x, 'tee', 'cancel', 'pipeTo', 'getReader');\n/** @ignore */ export const isReadableNodeStream =          (x: any): x is NodeJS.ReadableStream => !(x instanceof ReadableInterop) && hasFuncs(x, 'read', 'pipe', 'unpipe', 'pause', 'resume', 'wrap');\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toReadableDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toReadableNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toReadableDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toReadableNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getReadableDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getReadableNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getReadableDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getReadableDOMStream().pipeThrough(duplex, options);\n    }\n\n    private _readableDOMStream?: ReadableStream<T>;\n    private _getReadableDOMStream() {\n        return this._readableDOMStream || (this._readableDOMStream = this.toReadableDOMStream());\n    }\n\n    private _readableNodeStream?: import('stream').Readable;\n    private _getReadableNodeStream() {\n        return this._readableNodeStream || (this._readableNodeStream = this.toReadableNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toReadableDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toReadableDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toReadableNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toReadableNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromReadableDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromReadableDOMStream<T>(source));\n    },\n    fromReadableNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromReadableNodeStream(stream));\n    },\n    // @ts-ignore\n    toReadableDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toReadableDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toReadableNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toReadableNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromReadableDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        source['locked'] && it.releaseLock();\n        (threw === false) && (await it['cancel']());\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader } = this;\n        this.reader = null;\n        this.releaseLock();\n        if (reader) {\n            await reader['cancel'](reason);\n        }\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromReadableNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            const [evt, fn, closed] = onEvent(stream, 'close');\n            const destroyed = new Promise((resolve, reject) => {\n                const destroy = (stream as any)['destroy'] || ((e: T, cb: any) => cb(e));\n                destroy.call(stream, err, (e: T) => e != null ? reject(e) : resolve());\n            });\n            try {\n                await Promise.race([closed, destroyed]);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                stream['off'](evt, fn);\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore */\nexport const decodeUtf8 = ((decoder) => {\n    /** @suppress {missingRequire} */\n    const NodeBuffer = typeof Buffer !== 'undefined' ? Buffer : null;\n    return !NodeBuffer ? decoder.decode.bind(decoder) : (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return NodeBuffer.from(buffer, byteOffset, length).toString();\n    };\n})(new (typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill)());\n\n/** @ignore */\nexport const encodeUtf8 = ((encoder) => {\n    /** @suppress {missingRequire} */\n    const NodeBuffer = typeof Buffer !== 'undefined' ? Buffer : null;\n    return !NodeBuffer ? encoder.encode.bind(encoder) :\n        (input = '') => toUint8Array(NodeBuffer.from(input, 'utf8'));\n})(new (typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill)());\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends Vector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends Vector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n}\n\nexport interface Vector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class Vector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\nexport enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n\n    // These enum values are here so that TypeScript can narrow the type signatures further\n    // beyond the base Arrow types. The base Arrow types include metadata like bitWidths that\n    // impact the type signatures of the values we return. For example, the Int8Vector reads\n    // 1-byte numbers from an Int8Array, an Int32Vector reads a 4-byte number from an Int32Array,\n    // and an Int64Vector reads a pair of 4-byte lo, hi int32s, and returns them as a zero-copy\n    // slice from an underlying Int32Array. Library consumers benefit by doing this type narrowing,\n    // since we can ensure the types across all public methods are propagated and never bail to `any`.\n    // These values are _never_ actually used at runtime, and they will _never_ be written into the\n    // flatbuffers metadata of serialized Arrow IPC payloads.\n    Dictionary            = -1, // Dictionary aka Category type\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { Vector as VType } from './interfaces';\nimport { ArrayBufferViewConstructor } from './interfaces';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType; }> =\n      { readonly length: number }\n    & ( Iterable<T[keyof T]['TValue']> )\n    & { [P in keyof T]: T[P]['TValue'] }\n    & { get<K extends keyof T>(key: K): T[K]['TValue']; }\n    ;\n\nexport interface DataType<TType extends Type = Type> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n}\n\nexport class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get children() { return this._children; }\n    public get typeId(): TType { return <any> Type.NONE; }\n\n    constructor(protected _children?: Field<TChildren[keyof TChildren]>[]) {}\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number;            };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number;            };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number;            };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: Int32Array;        };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number;            };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number;            };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number;            };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: Uint32Array;       };\n};\n\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(protected _isSigned: IType[T]['isSigned'],\n                protected _bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get isSigned() { return this._isSigned; }\n    public get bitWidth() { return this._bitWidth; }\n    public get ArrayType(): ArrayBufferViewConstructor<IType[T]['TArray']> {\n        switch (this._bitWidth) {\n            case  8: return (this._isSigned ?  Int8Array :  Uint8Array) as any;\n            case 16: return (this._isSigned ? Int16Array : Uint16Array) as any;\n            case 32: return (this._isSigned ? Int32Array : Uint32Array) as any;\n            case 64: return (this._isSigned ? Int32Array : Uint32Array) as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this._isSigned ? `I` : `Ui`}nt${this._bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float32Array;  TValue: number; };\n};\n\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(protected _precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get precision() { return this._precision; }\n    // @ts-ignore\n    public get ArrayType(): ArrayBufferViewConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array as any;\n            case Precision.SINGLE: return Float32Array as any;\n            case Precision.DOUBLE: return Float64Array as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: typeof Uint8Array; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: typeof Uint8Array; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: typeof Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(protected _scale: number,\n                protected _precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public get scale() { return this._scale; }\n    public get precision() { return this._precision; }\n    public toString() { return `Decimal[${this._precision}e${this._scale > 0 ? `+` : ``}${this._scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: typeof Int32Array; }\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(protected _unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public get unit() { return this._unit; }\n    public toString() { return `Date${(this._unit + 1) * 32}<${DateUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: typeof Int32Array; }\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(protected _unit: TimesType[T]['unit'],\n                protected _bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public get unit() { return this._unit; }\n    public get bitWidth() { return this._bitWidth; }\n    public toString() { return `Time${this._bitWidth}<${TimeUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: typeof Int32Array; }\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(protected _unit: TimeUnit, protected _timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public get unit() { return this._unit; }\n    public get timezone() { return this._timezone; }\n    public toString() { return `Timestamp<${TimeUnit[this._unit]}${this._timezone ? `, ${this._timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: typeof Int32Array; }\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(protected _unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public get unit() { return this._unit; }\n    public toString() { return `Interval<${IntervalUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: VType<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super([child]);\n    }\n    public get typeId() { return Type.List as Type.List; }\n    // @ts-ignore\n    protected _children: Field<T>[];\n    public toString() { return `List<${this.valueType}>`; }\n    public get children() { return this._children; }\n    public get valueType(): T { return this._children[0].type as T; }\n    public get valueField(): Field<T> { return this._children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct<T extends { [key: string]: DataType; } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\nexport class Struct<T extends { [key: string]: DataType; } = any> extends DataType<Type.Struct, T> {\n    constructor(protected _children: Field<T[keyof T]>[]) {\n        super(_children);\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public get children() { return this._children; }\n    public toString() { return `Struct<[${this._children.map((f) => f.type).join(`, `)}]>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int32Array; TValue: any[]; }\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    protected _typeIds: Int32Array;\n    protected _children: Field<any>[];\n    protected _typeIdToChildIndex: { [key: number]: number };\n    constructor(protected _mode: UnionMode, _typeIds: number[] | Int32Array, _children: Field<any>[]) {\n        super(_children);\n        this._children = _children;\n        this._typeIds = _typeIds = Int32Array.from(_typeIds);\n        this._typeIdToChildIndex = _typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public get mode() { return this._mode; }\n    public get typeIds() { return this._typeIds; }\n    public get children() { return this._children; }\n    public get typeIdToChildIndex() { return this._typeIdToChildIndex; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this._children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: typeof Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(protected _byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public get byteWidth() { return this._byteWidth; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: VType<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    constructor(protected _listSize: number, child: Field<T>) {\n        super([child]);\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    // @ts-ignore\n    protected _children: Field<T>[];\n    public get listSize() { return this._listSize; }\n    public get children() { return this._children; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this._listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\nexport interface Map_<T extends { [key: string]: DataType; } = any> extends DataType<Type.Map> { TArray: Uint8Array; TValue: RowLike<T>; dataTypes: T; }\nexport class Map_<T extends { [key: string]: DataType; } = any> extends DataType<Type.Map, T> {\n    constructor(protected _children: Field<T[keyof T]>[],\n                protected _keysSorted: boolean = false) {\n        super(_children);\n    }\n    public get typeId() { return Type.Map as Type.Map; }\n    public get children() { return this._children; }\n    public get keysSorted() { return this._keysSorted; }\n    public toString() { return `Map<{${this._children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    protected _id: number;\n    protected _indices: TKey;\n    protected _dictionary: T;\n    protected _isOrdered: boolean;\n    protected _dictionaryVector: Vector<T>;\n    public set dictionaryVector(v) { this._dictionaryVector = v; }\n    public get dictionaryVector() { return this._dictionaryVector; }\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null, dictionaryVector?: Vector<T>) {\n        super();\n        this._indices = indices;\n        this._dictionary = dictionary;\n        this._isOrdered = isOrdered || false;\n        this._dictionaryVector = dictionaryVector!;\n        this._id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get id() { return this._id; }\n    public get indices() { return this._indices; }\n    public get dictionary() { return this._dictionary; }\n    public get isOrdered() { return this._isOrdered; }\n    public set children(_: T['children']) {}\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType, Dictionary } from './type';\nimport { Vector as VType } from './interfaces';\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(vectors: VType<T[keyof T]>[], names: (keyof T)[] = []) {\n        return new Schema<T>(vectors.map((v, i) => new Field('' + (names[i] || i), v.type)));\n    }\n\n    protected _fields: Field[];\n    protected _metadata: Map<string, string>;\n    protected _dictionaries: Map<number, DataType>;\n    protected _dictionaryFields: Map<number, Field<Dictionary>[]>;\n    public get fields(): Field[] { return this._fields; }\n    public get metadata(): Map<string, string> { return this._metadata; }\n    public get dictionaries(): Map<number, DataType> { return this._dictionaries; }\n    public get dictionaryFields(): Map<number, Field<Dictionary>[]> { return this._dictionaryFields; }\n\n    constructor(fields: Field[],\n                metadata?: Map<string, string>,\n                dictionaries?: Map<number, DataType>,\n                dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n        this._fields = fields;\n        this._metadata = metadata || Schema.prototype._metadata;\n        if (!dictionaries || !dictionaryFields) {\n            ({ dictionaries, dictionaryFields } = generateDictionaryMap(\n                fields, dictionaries || new Map(), dictionaryFields || new Map()\n            ));\n        }\n        this._dictionaries = dictionaries;\n        this._dictionaryFields = dictionaryFields;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public static [Symbol.toStringTag] = ((prototype: Schema) => {\n        (prototype as any)._metadata = Object.freeze(new Map());\n        return 'Schema';\n    })(Schema.prototype);\n}\n\nexport class Field<T extends DataType = DataType> {\n    protected _type: T;\n    protected _name: string;\n    protected _nullable: true | false;\n    protected _metadata?: Map<string, string> | null;\n    constructor(name: string, type: T, nullable: true | false = false, metadata?: Map<string, string> | null) {\n        this._name = name;\n        this._type = type;\n        this._nullable = nullable;\n        this._metadata = metadata;\n    }\n    public get type() { return this._type; }\n    public get name() { return this._name; }\n    public get nullable() { return this._nullable; }\n    public get metadata() { return this._metadata; }\n    public get typeId() { return this._type.typeId; }\n    public get [Symbol.toStringTag](): string { return 'Field'; }\n    public get indices() {\n        return DataType.isDictionary(this._type) ? this._type.indices : this._type;\n    }\n    public toString() { return `${this.name}: ${this.type}`; }\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries: Map<number, DataType>, dictionaryFields: Map<number, Field<Dictionary>[]>) {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaryFields.get(type.id)) {\n                dictionaryFields.set(type.id, []);\n            }\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n                dictionaryFields.get(type.id)!.push(field as any);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children) {\n            generateDictionaryMap(type.children, dictionaries, dictionaryFields);\n        }\n    }\n\n    return { dictionaries, dictionaryFields };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        bytes.set((offset % 8 === 0)\n            // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n            ? bitmap.subarray(offset >> 3)\n            // Otherwise iterate each bit from the offset and return a new one\n            : packBools(iterateBits(bitmap, offset, length, null, getBool)));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let n = 0, i = 0;\n    let xs: number[] = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do { xs[i] = 0; } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { popcnt_bit_range } from './util/bit';\nimport { toArrayBufferView } from './util/buffer';\nimport { VectorType as BufferType, UnionMode } from './enum';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Array::null_count is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number>;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number>;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number>;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]?: Int32Array;\n        [BufferType.DATA]?: T['TArray'];\n    [BufferType.VALIDITY]?: Uint8Array;\n        [BufferType.TYPE]?: T['TArray'];\n}\n\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    protected _type: T;\n    protected _length: number;\n    protected _offset: number;\n\n    // @ts-ignore\n    protected _childData: Data[];\n    protected _buffers = [] as Buffers<T>;\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get offset() { return this._offset; }\n    public get typeId() { return this._type.typeId; }\n    public get childData() { return this._childData; }\n\n    public get ArrayType() { return this._type.ArrayType; }\n\n    public get buffers() { return this._buffers; }\n    public get values() { return this._buffers[BufferType.DATA]!; }\n    public get typeIds() { return this._buffers[BufferType.TYPE]!; }\n    public get nullBitmap() { return this._buffers[BufferType.VALIDITY]!; }\n    public get valueOffsets() { return this._buffers[BufferType.OFFSET]!; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount === kUnknownNullCount && (nullBitmap = this._buffers[BufferType.VALIDITY])) {\n            this._nullCount = nullCount = this._length - popcnt_bit_range(nullBitmap, this._offset, this._offset + this._length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Buffers<T>, childData?: (Data | Vector)[]) {\n        this._type = type;\n        this._offset = Math.floor(Math.max(offset || 0, 0));\n        this._length = Math.floor(Math.max(length || 0, 0));\n        this._buffers = Object.assign([], buffers) as Buffers<T>;\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this._childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n    }\n\n    public clone<R extends DataType>(type: R, offset = this._offset, length = this._length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this._buffers, childData: (Data | Vector)[] = this._childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const buffers = this.sliceBuffers(offset, length);\n        const childData = this.sliceChildren(offset, length);\n        return this.clone<T>(this._type, this._offset + offset, length, nullCount, buffers, childData);\n    }\n\n    protected sliceBuffers(offset: number, length: number): Buffers<T> {\n        let arr: any, buffers = Object.assign([], this._buffers) as Buffers<T>;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = this.sliceData(arr, offset, length));\n        return buffers;\n    }\n\n    protected sliceChildren(offset: number, length: number): Data[] {\n        // Only slice children if this isn't variable width data\n        if (!this._buffers[BufferType.OFFSET]) {\n            return this._childData.map((child) => child.slice(offset, length));\n        }\n        return this._childData;\n    }\n\n    protected sliceData(data: T['TArray'] & ArrayBufferView, offset: number, length: number) {\n        // Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        return this._type.typeId === 6 ? data : data.subarray(offset, offset + length);\n    }\n\n    protected sliceOffsets(valueOffsets: Int32Array, offset: number, length: number) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        });\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView<T['TArray']>(type.indices.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, childData: Data | Vector) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets)\n        }, [childData]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, childData: Data | Vector) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, [childData]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, childData: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, childData: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildData: ValueOffsetsBuffer | (Data | Vector)[], childData?: (Data | Vector)[]) {\n        const buffers = {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.TYPE]: toArrayBufferView(type.ArrayType, typeIds)\n        } as any;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildData as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toArrayBufferView(Int32Array, <ValueOffsetsBuffer> valueOffsetsOrChildData);\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function valueToString(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { MapVector } from '../vector/map';\nimport { DataType, RowLike } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { StructVector } from '../vector/struct';\n\n/** @ignore */ const columnDescriptor = { enumerable: true, configurable: false, get: () => {} };\n/** @ignore */ const lengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };\n/** @ignore */ const rowIndexDescriptor = { writable: false, enumerable: false, configurable: true, value: null as any };\n/** @ignore */ const rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null as any };\n/** @ignore */ const row = { parent: rowParentDescriptor, rowIndex: rowIndexDescriptor };\n\n/** @ignore */\nexport class Row<T extends { [key: string]: DataType }> implements Iterable<T[keyof T]['TValue']> {\n    [key: string]: T[keyof T]['TValue'];\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType }>(schemaOrFields: T | Field[], fieldsAreEnumerable = false): RowLike<T> & Row<T> {\n        let schema: T, fields: Field[];\n        if (Array.isArray(schemaOrFields)) {\n            fields = schemaOrFields;\n        } else {\n            schema = schemaOrFields;\n            fieldsAreEnumerable = true;\n            fields = Object.keys(schema).map((x) => new Field(x, schema[x]));\n        }\n        return new Row<T>(fields, fieldsAreEnumerable) as RowLike<T> & Row<T>;\n    }\n    // @ts-ignore\n    private parent: TParent;\n    // @ts-ignore\n    private rowIndex: number;\n    // @ts-ignore\n    public readonly length: number;\n    private constructor(fields: Field[], fieldsAreEnumerable: boolean) {\n        lengthDescriptor.value = fields.length;\n        Object.defineProperty(this, 'length', lengthDescriptor);\n        fields.forEach((field, columnIndex) => {\n            columnDescriptor.get = this._bindGetter(columnIndex);\n            // set configurable to true to ensure Object.defineProperty\n            // doesn't throw in the case of duplicate column names\n            columnDescriptor.configurable = true;\n            columnDescriptor.enumerable = fieldsAreEnumerable;\n            Object.defineProperty(this, field.name, columnDescriptor);\n            columnDescriptor.configurable = false;\n            columnDescriptor.enumerable = !fieldsAreEnumerable;\n            Object.defineProperty(this, columnIndex, columnDescriptor);\n            columnDescriptor.get = null as any;\n        });\n    }\n    *[Symbol.iterator](this: RowLike<T>) {\n        for (let i = -1, n = this.length; ++i < n;) {\n            yield this[i];\n        }\n    }\n    private _bindGetter(colIndex: number) {\n        return function (this: Row<T>) {\n            let child = this.parent.getChildAt(colIndex);\n            return child ? child.get(this.rowIndex) : null;\n        };\n    }\n    public get<K extends keyof T>(key: K) { return (this as any)[key] as T[K]['TValue']; }\n    public bind<TParent extends MapVector<T> | StructVector<T>>(parent: TParent, rowIndex: number) {\n        rowIndexDescriptor.value = rowIndex;\n        rowParentDescriptor.value = parent;\n        const bound = Object.create(this, row);\n        rowIndexDescriptor.value = null;\n        rowParentDescriptor.value = null;\n        return bound as RowLike<T>;\n    }\n    public toJSON(): any {\n        return DataType.isStruct(this.parent.type) ? [...this] :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = (this as any)[prop]) && props || props;\n            }, {});\n    }\n    public toString() {\n        return DataType.isStruct(this.parent.type) ?\n            [...this].map((x) => valueToString(x)).join(', ') :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = valueToString((this as any)[prop])) && props || props;\n            }, {});\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Row } from '../vector/row';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    // Compare primitives\n    if (search == null || typeof search !== 'object') {\n        return (value: any) => value === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare Array-likes\n    if (Array.isArray(search) || ArrayBuffer.isView(search)) {\n        const n = (search as any).length;\n        const fns = [] as ((x: any) => boolean)[];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator((search as any)[i]);\n        }\n        return (value: any) => {\n            if (!value || value.length !== n) { return false; }\n            // Handle the case where the search element is an Array, but the\n            // values are Rows or Vectors, e.g. list.indexOf(['foo', 'bar'])\n            if ((value instanceof Row) || (value instanceof Vector)) {\n                for (let i = -1, n = value.length; ++i < n;) {\n                    if (!(fns[i]((value as any).get(i)))) { return false; }\n                }\n                return true;\n            }\n            for (let i = -1, n = value.length; ++i < n;) {\n                if (!(fns[i](value[i]))) { return false; }\n            }\n            return true;\n        };\n    }\n    // Compare Rows and Vectors\n    if ((search instanceof Row) || (search instanceof Vector)) {\n        const n = search.length;\n        const C = search.constructor as any;\n        const fns = [] as ((x: any) => boolean)[];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator((search as any).get(i));\n        }\n        return (value: any) => {\n            if (!(value instanceof C)) { return false; }\n            if (!(value.length === n)) { return false; }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value.get(i)))) { return false; }\n            }\n            return true;\n        };\n    }\n    // Compare non-empty Objects\n    const keys = Object.keys(search);\n    if (keys.length > 0) {\n        const n = keys.length;\n        const fns = [] as ((x: any) => boolean)[];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator(search[keys[i]]);\n        }\n        return (value: any) => {\n            if (!value || typeof value !== 'object') { return false; }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value[keys[i]]))) { return false; }\n            }\n            return true;\n        };\n    }\n    // No valid comparator\n    return () => false;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { clampRange } from '../util/vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends Vector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: Vector<T>[]) {\n        return vectors.reduce(function flatten(xs: any[], x: any): any[] {\n            return x instanceof Chunked ? x.chunks.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x: any): x is Vector<T> => x instanceof Vector);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...chunks: Vector<T>[]): Chunked<T> {\n        return new Chunked(chunks[0].type, Chunked.flatten(...chunks));\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId() { return this._type.typeId; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let { ArrayType } = this._type;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new (ArrayType as any)(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, offset: number, length: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= offset + length) { continue; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= offset && (chunkOffset + chunkLength) <= offset + length) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - chunkOffset);\n            const end = begin + Math.min(chunkLength - begin, (offset + length) - chunkOffset);\n            slices.push(chunk.slice(begin, end) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset - 1;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[++idx] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\nimport { Clonable, Sliceable, Applicative } from './vector';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        super(field.type, Chunked.flatten(...vectors), offsets);\n        this._field = field;\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { Vector as VType } from '../interfaces';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\nexport interface BaseVector<T extends DataType = any> extends Clonable<VType<T>>, Sliceable<VType<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): VType<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[], stride?: number): VType<R>;\n}\n\nexport abstract class BaseVector<T extends DataType = any> extends Vector<T>\n    implements Clonable<VType<T>>, Sliceable<VType<T>>, Applicative<T, Chunked<T>> {\n\n    // @ts-ignore\n    protected _data: Data<T>;\n    protected _stride: number = 1;\n    protected _numChildren: number = 0;\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[], stride?: number) {\n        super();\n        this._children = children;\n        this._numChildren = data.childData.length;\n        this._bindDataAccessors(this._data = data);\n        this._stride = Math.floor(Math.max(stride || 1, 1));\n    }\n\n    public get data() { return this._data; }\n    public get stride() { return this._stride; }\n    public get numChildren() { return this._numChildren; }\n\n    public get type() { return this._data.type; }\n    public get typeId() { return this._data.typeId as T['TType']; }\n    public get length() { return this._data.length; }\n    public get offset() { return this._data.offset; }\n    public get nullCount() { return this._data.nullCount; }\n    public get VectorName() { return this.constructor.name; }\n\n    public get ArrayType(): T['ArrayType'] { return this._data.ArrayType; }\n\n    public get values() { return this._data.values; }\n    public get typeIds() { return this._data.typeIds; }\n    public get nullBitmap() { return this._data.nullBitmap; }\n    public get valueOffsets() { return this._data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children, stride = this._stride) {\n        return Vector.new<R>(data, children, stride) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this._data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    // @ts-ignore\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, offset: number, length: number) {\n        const stride = self.stride;\n        return self.clone(self.data.slice(offset * stride, (length - offset) * stride));\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Bool } from '../type';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { packBools } from '../util/bit';\n\nexport class BoolVector extends BaseVector<Bool> {\n    /** @nocollapse */\n    public static from(data: Iterable<boolean>) {\n        let length = 0, bitmap = packBools(function*() {\n            for (let x of data) { length++; yield x; }\n        }());\n        return Vector.new(Data.Bool(new Bool(), 0, length, 0, null, bitmap));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DateUnit } from '../enum';\nimport { BaseVector } from './base';\nimport * as IntUtil from '../util/int';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    /** @nocollapse */\n    public static from<T extends Date_ = DateMillisecond>(data: Date[], unit: T['unit'] = DateUnit.MILLISECOND) {\n        switch (unit) {\n            case DateUnit.DAY: {\n                const values = Int32Array.from(data.map((d) => d.valueOf() / 86400000));\n                return Vector.new(Data.Date(new DateDay(), 0, data.length, 0, null, values));\n            }\n            case DateUnit.MILLISECOND: {\n                const values = IntUtil.Int64.convertArray(data.map((d) => d.valueOf()));\n                return Vector.new(Data.Date(new DateMillisecond(), 0, data.length, 0, null, values));\n            }\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[unit]}\"`);\n    }\n    constructor(data: Data<T>) {\n        super(data, undefined, data.type.unit + 1);\n    }\n}\nexport class DateDayVector extends DateVector<DateDay> {}\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\nexport class DecimalVector extends BaseVector<Decimal> {\n    constructor(data: Data<Decimal>) {\n        super(data, undefined, 4);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { DataType, Dictionary, TKeys } from '../type';\n\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    /** @nocollapse */\n    public static from<T extends DataType<any>, TKey extends TKeys = TKeys>(\n        values: Vector<T>, indices: TKey,\n        keys: ArrayLike<number> | TKey['TArray']\n    ) {\n        const type = new Dictionary(values.type, indices, null, null, values);\n        return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys));\n    }\n    protected _indices: V<TKey>;\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data, void 0, 1);\n        this._indices = Vector.new(data.clone(this.type.indices));\n    }\n    // protected _bindDataAccessors() {}\n    public get indices() { return this._indices; }\n    public get dictionary() { return this._data.type.dictionaryVector; }\n    public isValid(index: number) { return this._indices.isValid(index); }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this._indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this._indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {\n    constructor(data: Data<FixedSizeBinary>) {\n        super(data, void 0, data.type.byteWidth);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {\n    constructor(data: Data<FixedSizeList<T>>) {\n        super(data, void 0, data.type.listSize);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n    /** @nocollapse */\n    public static from<T extends Float>(data: T['TArray']) {\n        switch (data.constructor) {\n            case Uint16Array: return Vector.new(Data.Float(new Float16(), 0, data.length, 0, null, data));\n            case Float32Array: return Vector.new(Data.Float(new Float32(), 0, data.length, 0, null, data));\n            case Float64Array: return Vector.new(Data.Float(new Float64(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n}\n\nexport class Float16Vector extends FloatVector<Float16> {}\nexport class Float32Vector extends FloatVector<Float32> {}\nexport class Float64Vector extends FloatVector<Float64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {\n    constructor(data: Data<T>) {\n        super(data, undefined, data.type.unit + 1);\n    }\n}\n\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\n\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n    public static from<T extends Int>(data: T['TArray']): V<T>;\n    public static from<T extends Int32 | Uint32>(data: T['TArray'], is64: true): V<T>;\n    /** @nocollapse */\n    public static from(data: any, is64?: boolean) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? Vector.new(Data.Int(new Int64(), 0, data.length, 0, null, data))\n                : Vector.new(Data.Int(new Uint64(), 0, data.length, 0, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return Vector.new(Data.Int(new Int8(), 0, data.length, 0, null, data));\n            case Int16Array: return Vector.new(Data.Int(new Int16(), 0, data.length, 0, null, data));\n            case Int32Array: return Vector.new(Data.Int(new Int32(), 0, data.length, 0, null, data));\n            case Uint8Array: return Vector.new(Data.Int(new Uint8(), 0, data.length, 0, null, data));\n            case Uint16Array: return Vector.new(Data.Int(new Uint16(), 0, data.length, 0, null, data));\n            case Uint32Array: return Vector.new(Data.Int(new Uint32(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    constructor(data: Data<T>) {\n        super(data, undefined, 1 + Number(data.type.bitWidth > 32));\n    }\n}\n\nexport class Int8Vector extends IntVector<Int8> {}\nexport class Int16Vector extends IntVector<Int16> {}\nexport class Int32Vector extends IntVector<Int32> {}\nexport class Int64Vector extends IntVector<Int64> {}\nexport class Uint8Vector extends IntVector<Uint8> {}\nexport class Uint16Vector extends IntVector<Uint16> {}\nexport class Uint32Vector extends IntVector<Uint32> {}\nexport class Uint64Vector extends IntVector<Uint64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class MapVector<T extends { [key: string]: DataType } = any> extends BaseVector<Map_<T>> {\n    public rowProxy: Row<T> = Row.new<T>(this.type.children || [], true);\n    public asStruct() {\n        return Vector.new(this.data.clone(new Struct(this.type.children)));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    public rowProxy: Row<T> = Row.new<T>(this.type.children || [], false);\n    public asMap(keysSorted: boolean = false) {\n        return Vector.new(this.data.clone(new Map_(this.type.children, keysSorted)));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {\n    constructor(data: Data<T>) {\n        super(data, undefined, 2);\n    }\n}\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {\n    constructor(data: Data<T>) {\n        super(data, undefined, 1 + Number(data.type.bitWidth > 32));\n    }\n}\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n}\n\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\n\nexport class Utf8Vector extends BaseVector<Utf8> {\n    /** @nocollapse */\n    public static from(values: string[]) {\n        const length = values.length;\n        const data = encodeUtf8(values.join(''));\n        const offsets = values.reduce((offsets, str, idx) => (\n            (!(offsets[idx + 1] = offsets[idx] + str.length) || true) && offsets\n        ), new Uint32Array(values.length + 1));\n        return Vector.new(Data.Utf8(new Utf8(), 0, length, 0, null, offsets, data));\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(node: any, ...args: any[]) {\n        return this.getVisitFn(node, false).call(this, node, ...args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { decodeUtf8 } from '../util/utf8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface GetVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[], indices: number[]): T['TValue'][];\n    visit     <T extends Vector>  (node: T, index: number       ): T['TValue'];\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: Vector<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: Vector<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: Vector<T>, index: number): T['TValue'];\n}\n\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n// /** @ignore */ const epochSecondsToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochSecondsToMs(data, index));\n// /** @ignore */ const epochNanosecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochNanosecondsLongToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: Vector<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: Vector<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number): T['TValue'] => (values[stride * index] - 32767) / 32767;\n/** @ignore */\nconst getNumericX2       = <T extends Numeric2X>      ({ stride, values }: Vector<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(<any> vector, index)\n        : getNumericX2(<any> vector, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as any, index)\n        : getFloat16(vector as any, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as any, index)\n        : getDateMillisecond(vector as any, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as Vector<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as Vector<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as Vector<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as Vector<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as Vector<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as Vector<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as Vector<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: Vector<T>, index: number): T['TValue'] => values.subarray(4 * index, 4 * (index + 1));\n\n/** @ignore */\nconst getList = <T extends List>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.rowProxy.bind(vector, index);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as Vector<DenseUnion>, index) :\n        getSparseUnion(vector as Vector<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: Vector<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: Vector<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as any, index)\n        : getIntervalYearMonth(vector as any, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =            getNumericX2;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =            getNumericX2;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getNested;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =               getNested;\n\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface SetVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    visit     <T extends Vector>  (node: T, index: number, value: T['TValue']          ): void;\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n}\n\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: Vector<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = (value * 32767) + 32767; };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(<any> vector, index, value as Numeric1X['TValue'])\n        : setNumericX2(<any> vector, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(<any> vector, index, value)\n        : setFloat16(<any> vector, index, value);\n};\n\n/* istanbul ignore next */\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector, index, value)\n        : setDateMillisecond(vector, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as Vector<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as Vector<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as Vector<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as Vector<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as Vector<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as Vector<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as Vector<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!;\n    const { valueOffsets, stride } = vector;\n    let idx = -1, offset = valueOffsets[index * stride];\n    let end = Math.min(value.length, valueOffsets[(index * stride) + 1] - offset);\n    while (offset < end) {\n        values.set(offset++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.children.forEach(({ name }, idx) => {\n        const kid = vector.getChildAt(idx);\n        kid && kid.set(index, value[name]);\n    });\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as Vector<DenseUnion>, index, value) :\n        setSparseUnion(vector as Vector<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector, index, value)\n        : setIntervalYearMonth(vector, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 getDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setNested;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =               setNested;\n\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IndexOfVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    visit     <T extends Vector>  (node: T, value: T['TValue'] | null, index?: number            ): number;\n    getVisitFn<T extends Type>    (node: T         ): (vector: Vector<T>, value: Vector<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: Vector<T> ): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: Data<T>   ): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: T         ): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n}\n\nexport class IndexOfVisitor extends Visitor {\n}\n\n/** @ignore */\nfunction nullIndexOf(vector: Vector<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: Vector<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IteratorVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[]     ): IterableIterator<T['TValue'] | null>[];\n    visit     <T extends Vector>  (node: T        ): IterableIterator<T['TValue'] | null>;\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n}\n\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: Vector<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Type, Precision } from '../enum';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface ToArrayVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[]     ): T['TArray'][];\n    visit     <T extends Vector>  (node: T        ): T['TArray'];\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>) => Vector<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: Vector<T>): Vector<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: Vector<T>): Vector<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: Vector<T>): Vector<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: Vector<T>): Vector<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: Vector<T>): Vector<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: Vector<T>): Vector<T>['TArray'];\n}\n\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: Vector<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n        case Type.Float:\n            return (type as Float).precision === Precision.HALF /* Precision.HALF */\n                ? new Float32Array(vector[Symbol.iterator]())\n                : vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\nexport interface ByteWidthVisitor extends Visitor {\n    visitMany <T extends DataType>(nodes: T[]     ): number[];\n    visit     <T extends DataType>(node: T        ): number;\n    getVisitFn<T extends Type>    (node: T        ): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: Vector<T>): (type: T          ) => number;\n    getVisitFn<T extends DataType>(node: Data<T>  ): (type: T          ) => number;\n    getVisitFn<T extends DataType>(node: T        ): (type: T          ) => number;\n}\n\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { Vector, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\nexport interface GetVectorConstructor extends Visitor {\n    visitMany <T extends Type>    (nodes: T[]     ): VectorCtor<T>[];\n    visit     <T extends Type>    (node: T,       ): VectorCtor<T>;\n    getVisitFn<T extends Type>    (node: T        ): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: Vector<T>): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: Data<T>  ): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: T        ): () => VectorCtor<T>;\n}\n\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Row } from './row';\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { Vector as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n    }\n}\n\ndeclare module './base' {\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn(data.type)())(data, ...args) as V<T>;\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .filter((typeId) => typeId !== Type.NONE && typeId !== Type[Type.NONE])\n    .map((T: any) => Type[T] as any).filter((T: any): T is Type => typeof T === 'number')\n    .forEach((typeId) => {\n        let typeIds: Type[];\n        switch (typeId) {\n            case Type.Int:       typeIds = [Type.Int8, Type.Int16, Type.Int32, Type.Int64, Type.Uint8, Type.Uint16, Type.Uint32, Type.Uint64]; break;\n            case Type.Float:     typeIds = [Type.Float16, Type.Float32, Type.Float64]; break;\n            case Type.Date:      typeIds = [Type.DateDay, Type.DateMillisecond]; break;\n            case Type.Time:      typeIds = [Type.TimeSecond, Type.TimeMillisecond, Type.TimeMicrosecond, Type.TimeNanosecond]; break;\n            case Type.Timestamp: typeIds = [Type.TimestampSecond, Type.TimestampMillisecond, Type.TimestampMicrosecond, Type.TimestampNanosecond]; break;\n            case Type.Interval:  typeIds = [Type.IntervalDayTime, Type.IntervalYearMonth]; break;\n            case Type.Union:     typeIds = [Type.DenseUnion, Type.SparseUnion]; break;\n            default:                typeIds = [typeId]; break;\n        }\n        typeIds.forEach((typeId) => {\n            const VectorCtor = getVectorConstructor.visit(typeId);\n            VectorCtor.prototype['get'] = partial1(getVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['set'] = partial2(setVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['indexOf'] = partial2(indexOfVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['toArray'] = partial0(toArrayVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['getByteWidth'] = partial0(byteWidthVisitor.getVisitFn(typeId));\n            VectorCtor.prototype[Symbol.iterator] = partial0(iteratorVisitor.getVisitFn(typeId));\n        });\n    });\n\n/** @ignore */\nfunction partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nfunction partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nfunction partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n\n/** @ignore */\nfunction wrapNullable1<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, a != null)) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const type = this.type;\n    this['get'] = getVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this['set'] = setVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this['indexOf'] = indexOfVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this['toArray'] = toArrayVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this[Symbol.iterator] = iteratorVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    if (this.nullCount > 0) {\n        this['get'] = wrapNullable1(this['get']);\n        this['set'] = wrapNullableSet(this['set']);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries, dictionaryFields\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries, dictionaryFields));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new DataType();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_(children || [], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/** @ignore */\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/** @ignore */\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/** @ignore */\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/** @ignore */\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/** @ignore */\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries, dictionaryFields);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries, dictionaryFields);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    return Array.from(\n        { length: batch.nodesLength() },\n        (_, i) => batch.nodes(i)!\n    ).filter(Boolean).map(FieldNode.decode);\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    return Array.from(\n        { length: batch.buffersLength() },\n        (_, i) => batch.buffers(i)!\n    ).filter(Boolean).map(v3Compat(version, BufferRegion.decode));\n}\n\n/** @ignore */\nfunction v3Compat(version: MetadataVersion, decode: (buffer: _Buffer) => BufferRegion) {\n    return (buffer: _Buffer, i: number) => {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        return decode(buffer);\n    };\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    return Array.from(\n        { length: schema.fieldsLength() },\n        (_, i) => schema.fields(i)!\n    ).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    return Array.from(\n        { length: field.childrenLength() },\n        (_, i) => field.children(i)!\n    ).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries, dictionaryFields));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new DataType();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_(children || [], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays((this._values as any[]).slice())[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array | null>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromReadableNodeStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromReadableDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromReadableDOMStream(source));\n        }\n    }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: Uint8Array, byteLength = buffer.byteLength) {\n        super();\n        this.buffer = buffer;\n        this.size = byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    protected file: FileHandle | null;\n    protected _pendingSize?: Promise<void>;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this.file = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pendingSize = (async () => {\n                delete this._pendingSize;\n                this.size = (await file.stat()).size;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pendingSize && await this._pendingSize;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pendingSize && await this._pendingSize;\n        const { file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pendingSize && await this._pendingSize;\n        const { file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this.file; this.file = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json, _batchIndex, _dictionaryIndex } = this;\n        const numBatches = _json.batches.length;\n        const numDictionaries = _json.dictionaries.length;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { value: message, done: _batchIndex >= numBatches && _dictionaryIndex >= numDictionaries };\n        }\n        if (_dictionaryIndex < numDictionaries) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (_batchIndex < numBatches) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { Vector as VType } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\nexport interface VectorAssembler extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[]): this[];\n    visit     <T extends Vector>  (node: T   ): this;\n    getVisitFn<T extends Type>    (node: T       ): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: VType<T>): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: Data<T> ): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: T       ): (vector: VType<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: VType<T>): this;\n    visitInt                  <T extends Int>             (vector: VType<T>): this;\n    visitFloat                <T extends Float>           (vector: VType<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: VType<T>): this;\n    visitBinary               <T extends Binary>          (vector: VType<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: VType<T>): this;\n    visitDate                 <T extends Date_>           (vector: VType<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: VType<T>): this;\n    visitTime                 <T extends Time>            (vector: VType<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: VType<T>): this;\n    visitList                 <T extends List>            (vector: VType<T>): this;\n    visitStruct               <T extends Struct>          (vector: VType<T>): this;\n    visitUnion                <T extends Union>           (vector: VType<T>): this;\n    visitInterval             <T extends Interval>        (vector: VType<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: VType<T>): this;\n    visitMap                  <T extends Map_>            (vector: VType<T>): this;\n}\n\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n\n        const vectors = args.reduce(function flatten(xs: any[], x: any): any[] {\n            if (Array.isArray(x)) { return x.reduce(flatten, xs); }\n            if (!(x instanceof RecordBatch)) { return [...xs, x]; }\n            return [...xs, ...x.schema.fields.map((_, i) => x.getChildAt(i)!)];\n        }, []).filter((x: any): x is Vector => x instanceof Vector);\n\n        return new VectorAssembler().visitMany(vectors)[0];\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            addBuffer.call(this, nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : truncateBitmap(data.offset, length, data.nullBitmap)\n            ).nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: VType<T>) { return this; }\n    public visitDictionary<T extends Dictionary>(vector: VType<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: VType<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: VType<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: VType<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: VType<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends List | FixedSizeList>(this: VectorAssembler, vector: VType<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Map_ | Union>(this: VectorAssembler, vector: VType<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =   assembleNestedVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { RecordBatch } from '../recordbatch';\nimport { Vector as VType } from '../interfaces';\nimport { VectorType as BufferType } from '../enum';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: VType<T>): { };\n    visitBool                 <T extends Bool>            (vector: VType<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: VType<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: VType<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: VType<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: VType<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: VType<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: VType<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: VType<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: VType<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: VType<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: VType<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: VType<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: VType<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: VType<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: VType<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: VType<T>): { children: any[] };\n}\n\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n\n        const vectors = args.reduce(function flatten(xs: any[], x: any): any[] {\n            if (Array.isArray(x)) { return x.reduce(flatten, xs); }\n            if (!(x instanceof RecordBatch)) { return [...xs, x]; }\n            return xs.concat(x.schema.fields.map(\n                (f, i) => new Column(f, [x.getChildAt(i)!])));\n        }, []).filter((x: any): x is Column => x instanceof Column);\n\n        return new JSONVectorAssembler().visitMany(vectors);\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const buffers = { ...data.buffers, [BufferType.VALIDITY]: undefined };\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': nullCount <= 0\n                ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: VType<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: VType<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: VType<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: VType<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: VType<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: VType<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: VType<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: VType<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: VType<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: VType<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield bignumToString(values.subarray((i + 0) * stride, (i + 1) * stride));\n    }\n}\n\n/** @ignore */\nfunction bignumToString({ buffer, byteOffset, length }: Uint32Array | Int32Array) {\n\n    let digits = '', i = -1;\n    let r = new Uint32Array(2);\n    let a = new Uint16Array(buffer, byteOffset, length * 2);\n    let b = new Uint32Array((a = new Uint16Array(a).reverse()).buffer);\n    let n = a.length - 1;\n\n    do {\n        for (r[0] = a[i = 0]; i < n;) {\n            a[i++] = r[1] = r[0] / 10;\n            r[0] = ((r[0] - r[1] * 10) << 16) + a[i];\n        }\n        a[i] = r[1] = r[0] / 10;\n        r[0] = r[0] - r[1] * 10;\n        digits = `${r[0]}${digits}`;\n    } while (b[0] || b[1] || b[2] || b[3]);\n\n    return digits ? digits : `0`;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { DataType, Dictionary } from '../type';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream } from '../util/compat';\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any>\n    extends ReadableInterop<Uint8Array>\n    implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    public static throughNode(): import('stream').Duplex { throw new Error(`\"throughNode\" not available in this environment`); }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(): { writable: WritableStream<RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toReadableDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toReadableDOMStream(options); }\n    public toReadableNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toReadableNodeStream(options); }\n\n    public close() { return this.reset()._sink.close(); }\n    public abort(reason?: any) { return this.reset()._sink.abort(reason); }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema?: Schema<T>) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toReadableDOMStream().pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toReadableNodeStream().pipe(sink);\n            }\n        }\n\n        this._position = 0;\n        this._schema = null;\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n\n        if (schema instanceof Schema) {\n            this._started = true;\n            this._schema = schema;\n            this._writeSchema(schema);\n        }\n\n        return this;\n    }\n\n    public write(chunk: RecordBatch<T>) {\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        }\n        if (!this._started && (this._started = true)) {\n            this._writeSchema(this._schema = chunk.schema);\n        }\n        if (chunk.schema !== this._schema) {\n            throw new Error('Schemas unequal');\n        }\n        this._writeRecordBatch(chunk);\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const alignedSize = (flatbufferSize + 4 + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - 4;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - 4));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMessage(Message.from(schema))\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n\n    protected _writeFooter() {\n\n        const buffer = Footer.encode(new Footer(\n            this._schema!, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n\n        return this\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(records: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(records);\n        const recordBatch = new metadata.RecordBatch(records.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(dictionaryFields: Map<number, Field<Dictionary<any, any>>[]>) {\n        for (const [id, fields] of dictionaryFields) {\n            const vector = fields[0].type.dictionaryVector;\n            if (!(vector instanceof Chunked)) {\n                this._writeDictionaryBatch(vector, id, false);\n            } else {\n                const chunks = vector.chunks;\n                for (let i = -1, n = chunks.length; ++i < n;) {\n                    this._writeDictionaryBatch(chunks[i], id, i > 0);\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        return new RecordBatchFileWriter<T>().writeAll(input as any);\n    }\n\n    public close() {\n        this._writeFooter();\n        return super.close();\n    }\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMagic()._writePadding(2)\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchStreamWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        return new RecordBatchStreamWriter<T>().writeAll(input as any);\n    }\n\n    public close() {\n        this._writePadding(4); // eos bytes\n        return super.close();\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    protected _writeMessage() { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`)._writeDictionaries(schema.dictionaryFields);\n    }\n    protected _writeDictionaries(dictionaryFields: Map<number, Field<Dictionary<any, any>>[]>) {\n        this._write(`,\\n  \"dictionaries\": [\\n`);\n        super._writeDictionaries(dictionaryFields);\n        return this._write(`\\n  ]`);\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(this._schema!, dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(records: RecordBatch<T>) {\n        this._write(this._recordBatchBlocks.length === 0\n            ? `,\\n  \"batches\": [\\n    `\n            : `,\\n    `);\n        this._write(`${recordBatchToJSON(records)}`);\n        this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    public close() {\n        if (this._recordBatchBlocks.length > 0) {\n            this._write(`\\n  ]`);\n        }\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    const chunks = (input instanceof Table) ? input.chunks : input;\n    for (const batch of chunks) { writer.write(batch); }\n    writer.close();\n    return writer;\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    writer.close();\n    return writer;\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(schema: Schema, dictionary: Vector, id: number, isDelta = false) {\n    const f = schema.dictionaryFields.get(id)![0];\n    const field = new Field(f.name, f.type.dictionary, f.nullable, f.metadata);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { isPromise } from './util/compat';\nimport { RecordBatch } from './recordbatch';\nimport { Vector as VType } from './interfaces';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { Vector, Chunked } from './vector/index';\nimport { DataType, RowLike, Struct } from './type';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\n\nexport interface Table<T extends { [key: string]: DataType; } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType; } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType; } = any>() { return new Table<T>(new Schema([]), []); }\n\n    public static from<T extends { [key: string]: DataType } = any>(): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source?: any) {\n\n        if (!source) { return Table.empty<T>(); }\n\n        let reader = RecordBatchReader.from<T>(source) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty<T>() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty<T>();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType; } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromVectors<T extends { [key: string]: DataType; } = any>(vectors: VType<T[keyof T]>[], names?: (keyof T)[]) {\n        return new Table(RecordBatch.from(vectors, names));\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType; } = any>(struct: Vector<Struct<T>>) {\n        const schema = new Schema<T>(struct.type.children);\n        const chunks = (struct instanceof Chunked ? struct.chunks : [struct]) as VType<Struct<T>>[];\n        return new Table(schema, chunks.map((chunk) => new RecordBatch(schema, chunk.data)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema, batches: RecordBatch<T>[]);\n    constructor(schema: Schema, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = args.reduce(function flatten(xs: any[], x: any): any[] {\n            return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x: any): x is RecordBatch<T> => x instanceof RecordBatch);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        if (!chunks[0]) { chunks[0] = new RecordBatch(schema, 0, []); }\n\n        super(chunks[0].type, chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> | null {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]> | null;\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let schema = this._schema;\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n        let columns = this._children || (this._children = []) as Column[];\n        if (column = columns[index]) { return column as Column<R>; }\n        if (field = ((schema.fields || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return writer.writeAll(this._chunks).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select(...columnNames: string[]) {\n        return new Table(this._chunks.map((batch) => batch.select(...columnNames)));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Schema, Field } from './schema';\nimport { DataType, Struct } from './type';\nimport { StructVector } from './vector/struct';\nimport { Vector as VType } from './interfaces';\nimport { Chunked } from './vector/chunked';\nimport { Clonable, Sliceable, Applicative } from './vector';\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(vectors: VType<T[keyof T]>[], names: (keyof T)[] = []) {\n        return new RecordBatch(\n            Schema.from(vectors, names),\n            vectors.reduce((len, vec) => Math.max(len, vec.length), 0),\n            vectors\n        );\n    }\n\n    protected _schema: Schema;\n\n    constructor(schema: Schema<T>, numRows: number, childData: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let schema = args[0];\n        let data: Data<Struct<T>>;\n        let children: Vector[] | undefined;\n        if (typeof args[1] === 'number') {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, numRows, childData] = args as [Schema<T>, number, Data[]];\n            data = Data.Struct(new Struct<T>(fields), 0, numRows, 0, null, childData);\n        } else {\n            [, data, children] = (args as [Schema<T>, Data<Struct<T>>, Vector[]?]);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const fields = this._schema.fields;\n        const schema = this._schema.select(...columnNames);\n        const childNames = columnNames.reduce((xs, x) => (xs[x] = true) && xs, <any> {});\n        const childData = this._data.childData.filter((_, i) => childNames[fields[i].name]);\n        const structData = Data.Struct(new Struct(schema.fields), 0, this.length, 0, null, childData);\n        return new RecordBatch<{ [P in K]: T[P] }>(schema, structData as Data<Struct<{ [P in K]: T[P] }>>);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\nexport interface VectorLoader extends Visitor {\n    visitMany <T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n    visit     <T extends DataType>(node:   Field<T> | T   ): Data<T>;\n}\n\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[]) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Null(type, 0, length, nullCount, this.readNullBitmap(type, nullCount));                                                                                }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices));                                                   }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n}\n\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[]) {\n        super(new Uint8Array(0), nodes, buffers);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { Vector } from '../vector';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { ArrowJSON, ArrowJSONLike, FileHandle, ReadableInterop, ITERATOR_DONE } from '../io/interfaces';\nimport { isPromise, isArrowJSON, isFileHandle, isFetchResponse, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\nimport { MessageReader, AsyncMessageReader, checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding, JSONMessageReader } from './message';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = Response | FileHandle | PromiseLike<FileHandle> | PromiseLike<Response>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\nexport abstract class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected constructor(protected impl: IRecordBatchReaderImpl<T>) { super(); }\n\n    public get closed() { return this.impl.closed; }\n    public get schema() { return this.impl.schema; }\n    public get autoClose() { return this.impl.autoClose; }\n    public get dictionaries() { return this.impl.dictionaries; }\n    public get numDictionaries() { return this.impl.numDictionaries; }\n    public get numRecordBatches() { return this.impl.numRecordBatches; }\n\n    public next(value?: any) { return this.impl.next(value); }\n    public throw(value?: any) { return this.impl.throw(value); }\n    public return(value?: any) { return this.impl.return(value); }\n    public reset(schema?: Schema<T> | null) { this.impl.reset(schema); return this; }\n\n    public abstract cancel(): void | Promise<void>;\n    public abstract open(autoClose?: boolean): this | Promise<this>;\n    public abstract [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n    public abstract [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n\n    public toReadableDOMStream() {\n        return streamAdapters.toReadableDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toReadableNodeStream() {\n        return streamAdapters.toReadableNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    public isSync(): this is RecordBatchFileReader<T> | RecordBatchStreamReader<T> {\n        return (this instanceof RecordBatchFileReader) || (this instanceof RecordBatchStreamReader);\n    }\n    public isAsync(): this is AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T> {\n        return (this instanceof AsyncRecordBatchFileReader) || (this instanceof AsyncRecordBatchStreamReader);\n    }\n    public isFile(): this is RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T> {\n        return (this instanceof RecordBatchFileReader) || (this instanceof AsyncRecordBatchFileReader);\n    }\n    public isStream(): this is RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T> {\n        return (this instanceof RecordBatchStreamReader) || (this instanceof AsyncRecordBatchStreamReader);\n    }\n\n    /** @nocollapse */\n    public static throughNode(): import('stream').Duplex { throw new Error(`\"throughNode\" not available in this environment`); }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return RecordBatchReader.fromJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return RecordBatchReader.fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return RecordBatchReader.fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return RecordBatchReader.fromByteStream<T>(new ByteStream(source));\n    }\n    private static fromJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n        return new RecordBatchStreamReader<T>(new ArrowJSON(source));\n    }\n    private static fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n        const bytes = source.peek((magicLength + 7) & ~7);\n        return bytes && bytes.byteLength >= 4\n            ? checkForMagicArrowString(bytes)\n            ? new RecordBatchFileReader<T>(source.read())\n            : new RecordBatchStreamReader<T>(source)\n            : new RecordBatchStreamReader<T>(function*(): any {}());\n    }\n    private static async fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n        const bytes = await source.peek((magicLength + 7) & ~7);\n        return bytes && bytes.byteLength >= 4\n            ? checkForMagicArrowString(bytes)\n            ? new RecordBatchFileReader<T>(await source.read())\n            : new AsyncRecordBatchStreamReader<T>(source)\n            : new AsyncRecordBatchStreamReader<T>(async function*(): any {}());\n    }\n    private static async fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n        const { size } = await source.stat();\n        const file = new AsyncRandomAccessFile(source, size);\n        if (size >= magicX2AndPadding) {\n            if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n                return new AsyncRecordBatchFileReader<T>(file);\n            }\n        }\n        return new AsyncRecordBatchStreamReader<T>(file);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    // @ts-ignore\n    protected impl: RecordBatchFileReaderImpl<T>;\n    constructor(source: AsyncRecordBatchFileReaderImpl<T>);\n    constructor(source: RandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: ArrayBufferViewInput, dictionaries?: Map<number, Vector>);\n    constructor(source: AsyncRecordBatchFileReaderImpl<T> | RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        if (source instanceof AsyncRecordBatchFileReaderImpl) {\n            super(source);\n        } else if (source instanceof RandomAccessFile) {\n            super(new RecordBatchFileReaderImpl(source, dictionaries));\n        } else {\n            super(new RecordBatchFileReaderImpl(new RandomAccessFile(toUint8Array(source)), dictionaries));\n        }\n    }\n    public get footer() { return this.impl.footer; }\n    public cancel() { this.impl.close(); }\n    public open(autoClose?: boolean) { this.impl.open(autoClose); return this; }\n    public readRecordBatch(index: number) { return this.impl.readRecordBatch(index); }\n    public [Symbol.iterator]() { return (this.impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    // @ts-ignore\n    protected impl: RecordBatchStreamReaderImpl<T>;\n    constructor(source: ByteStream | ArrowJSON | ArrayBufferView | Iterable<ArrayBufferView>, dictionaries?: Map<number, Vector>) {\n        super(isArrowJSON(source)\n            ? new RecordBatchJSONReaderImpl(new JSONMessageReader(source), dictionaries)\n            : new RecordBatchStreamReaderImpl(new MessageReader(source), dictionaries));\n    }\n    public cancel() { this.impl.close(); }\n    public open(autoClose?: boolean) { this.impl.open(autoClose); return this; }\n    public [Symbol.iterator]() { return (this.impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    // @ts-ignore\n    protected impl: AsyncRecordBatchStreamReaderImpl<T>;\n    constructor(source: AsyncByteStream | FileHandle | NodeJS.ReadableStream | ReadableStream<ArrayBufferView> | AsyncIterable<ArrayBufferView>, byteLength?: number) {\n        super(new AsyncRecordBatchStreamReaderImpl(new AsyncMessageReader(source as FileHandle, byteLength)));\n    }\n    public async cancel() { await this.impl.close(); }\n    public async open(autoClose?: boolean) { await this.impl.open(autoClose); return this; }\n    public [Symbol.asyncIterator]() { return (this.impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n}\n\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    // @ts-ignore\n    protected impl: AsyncRecordBatchFileReaderImpl<T>;\n    constructor(source: AsyncRandomAccessFile);\n    constructor(source: AsyncRandomAccessFile, dictionaries: Map<number, Vector>);\n    constructor(source: FileHandle, byteLength: number, dictionaries: Map<number, Vector>);\n    constructor(source: AsyncRandomAccessFile | FileHandle, ...rest: (number | Map<number, Vector>)[]) {\n        let [byteLength, dictionaries] = rest as [number, Map<number, Vector>];\n        if (byteLength && typeof byteLength !== 'number') { dictionaries = byteLength; }\n        let file = source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength);\n        super(new AsyncRecordBatchFileReaderImpl(file, dictionaries));\n    }\n    public get footer() { return this.impl.footer; }\n    public async cancel() { await this.impl.close(); }\n    public async open(autoClose?: boolean) { await this.impl.open(autoClose); return this; }\n    public readRecordBatch(index: number) { return this.impl.readRecordBatch(index); }\n    public [Symbol.asyncIterator]() { return (this.impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchFileReader is not Iterable`); }\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImplBase<T extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoClose = true;\n    public dictionaryIndex = 0;\n    public recordBatchIndex = 0;\n    public dictionaries: Map<number, Vector>;\n    public get numDictionaries() { return this.dictionaryIndex; }\n    public get numRecordBatches() { return this.recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n    public reset(schema?: Schema<T> | null) {\n        this.dictionaryIndex = 0;\n        this.recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        if (isDelta || !dictionaries.get(id)) {\n\n            const type = schema.dictionaries.get(id)!;\n            const vector = (isDelta ? dictionaries.get(id)!.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n\n            (schema.dictionaryFields.get(id) || []).forEach(({ type }) => type.dictionaryVector = vector);\n\n            return vector;\n        }\n        return dictionaries.get(id)!;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any>\n    extends RecordBatchReaderImplBase<T>\n        implements IRecordBatchReaderImpl<T>, IterableIterator<RecordBatch<T>> {\n\n    constructor(protected reader: MessageReader, dictionaries = new Map<number, Vector>()) {\n        super(dictionaries);\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public close() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset().reader.return();\n            this.reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n        return this;\n    }\n    public open(autoClose = this.autoClose) {\n        if (!this.closed) {\n            this.autoClose = autoClose;\n            if (!(this.schema || (this.schema = this.reader.readSchema()!))) {\n                return this.close();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return this.reset().reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return this.reset().reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { reader } = this;\n        while (message = this.readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this.recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this.dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return this.return();\n    }\n    protected readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this.reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any>\n    extends RecordBatchReaderImplBase<T>\n        implements IRecordBatchReaderImpl<T>, AsyncIterableIterator<RecordBatch<T>> {\n\n    constructor(protected reader: AsyncMessageReader, dictionaries = new Map<number, Vector>()) {\n        super(dictionaries);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async close() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset().reader.return();\n            this.reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n        return this;\n    }\n    public async open(autoClose?: boolean) {\n        // default args in an async function crash closure-compiler at the moment\n        // so do this instead. https://github.com/google/closure-compiler/issues/3178\n        autoClose !== undefined || (autoClose = this.autoClose);\n        if (!this.closed) {\n            this.autoClose = autoClose;\n            if (!(this.schema || (this.schema = (await this.reader.readSchema())!))) {\n                return this.close();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return await this.reset().reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return await this.reset().reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { reader } = this;\n        while (message = await this.readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this.recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this.dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return await this.return();\n    }\n    protected async readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this.reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any>\n    extends RecordBatchStreamReaderImpl<T>\n        implements IRecordBatchFileReaderImpl<T>, IterableIterator<RecordBatch<T>> {\n\n    // @ts-ignore\n    public footer: Footer;\n    public get numDictionaries() { return this.footer.numDictionaries; }\n    public get numRecordBatches() { return this.footer.numRecordBatches; }\n\n    constructor(protected file: RandomAccessFile, dictionaries = new Map<number, Vector>()) {\n        super(new MessageReader(file), dictionaries);\n    }\n    public open(autoClose = this.autoClose) {\n        if (!this.closed && !this.footer) {\n            this.schema = (this.footer = this.readFooter()).schema;\n            for (const block of this.footer.dictionaryBatches()) {\n                block && this.readDictionaryBatch(this.dictionaryIndex++);\n            }\n        }\n        return super.open(autoClose);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this.footer) { this.open(); }\n        const block = this.footer.getRecordBatch(index);\n        if (block && this.file.seek(block.offset)) {\n            const message = this.reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this.reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected readDictionaryBatch(index: number) {\n        const block = this.footer.getDictionaryBatch(index);\n        if (block && this.file.seek(block.offset)) {\n            const message = this.reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this.reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected readFooter() {\n        const { file } = this;\n        const size = file.size;\n        const offset = size - magicAndPadding;\n        const length = file.readInt32(offset);\n        const buffer = file.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this.footer) { this.open(); }\n        if (this.recordBatchIndex < this.numRecordBatches) {\n            const block = this.footer.getRecordBatch(this.recordBatchIndex);\n            if (block && this.file.seek(block.offset)) {\n                return this.reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any>\n    extends AsyncRecordBatchStreamReaderImpl<T>\n        implements IRecordBatchFileReaderImpl<T>, AsyncIterableIterator<RecordBatch<T>> {\n\n    // @ts-ignore\n    public footer: Footer;\n    public get numDictionaries() { return this.footer.numDictionaries; }\n    public get numRecordBatches() { return this.footer.numRecordBatches; }\n\n    constructor(protected file: AsyncRandomAccessFile, dictionaries = new Map<number, Vector>()) {\n        super(new AsyncMessageReader(file), dictionaries);\n    }\n    public async open(autoClose?: boolean) {\n        // default args in an async function crash closure-compiler at the moment\n        // so do this instead. https://github.com/google/closure-compiler/issues/3178\n        autoClose !== undefined || (autoClose = this.autoClose);\n        if (!this.closed && !this.footer) {\n            this.schema = (this.footer = await this.readFooter()).schema;\n            for (const block of this.footer.dictionaryBatches()) {\n                block && await this.readDictionaryBatch(this.dictionaryIndex++);\n            }\n        }\n        return await super.open(autoClose);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this.footer) { await this.open(); }\n        const block = this.footer.getRecordBatch(index);\n        if (block && (await this.file.seek(block.offset))) {\n            const message = await this.reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this.reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async readDictionaryBatch(index: number) {\n        const block = this.footer.getDictionaryBatch(index);\n        if (block && (await this.file.seek(block.offset))) {\n            const message = await this.reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this.reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async readFooter() {\n        const { file } = this;\n        const offset = file.size - magicAndPadding;\n        const length = await file.readInt32(offset);\n        const buffer = await file.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this.footer) { await this.open(); }\n        if (this.recordBatchIndex < this.numRecordBatches) {\n            const block = this.footer.getRecordBatch(this.recordBatchIndex);\n            if (block && await this.file.seek(block.offset)) {\n                return await this.reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(protected reader: JSONMessageReader, dictionaries = new Map<number, Vector>()) {\n        super(reader, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\n/** @ignore */\ninterface IRecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoClose: boolean;\n    numDictionaries: number;\n    numRecordBatches: number;\n    dictionaries: Map<number, Vector>;\n\n    open(autoClose?: boolean): this | Promise<this>;\n    reset(schema?: Schema<T> | null): this;\n    close(): this | Promise<this>;\n\n    [Symbol.iterator]?(): IterableIterator<RecordBatch<T>>;\n    [Symbol.asyncIterator]?(): AsyncIterableIterator<RecordBatch<T>>;\n\n    throw(value?: any): IteratorResult<any> | Promise<IteratorResult<any>>;\n    return(value?: any): IteratorResult<any> | Promise<IteratorResult<any>>;\n    next(value?: any): IteratorResult<RecordBatch<T>> | Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\ninterface IRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends IRecordBatchReaderImpl<T> {\n\n    footer: Footer;\n\n    readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null>;\n}\n\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> {\n    cancel(): void;\n    open(autoClose?: boolean): this;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> {\n    cancel(): void;\n    open(autoClose?: boolean): this;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> {\n    cancel(): Promise<void>;\n    open(autoClose?: boolean): Promise<this>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> {\n    cancel(): Promise<void>;\n    open(autoClose?: boolean): Promise<this>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst kIsFakeBuffer = Symbol.for('isFakeBuffer');\n\n// The Whatwg ReadableByteStream reference implementation[1] copies the\n// underlying ArrayBuffer for any TypedArray that passes through it and\n// redefines the original's byteLength to be 0, in order to mimic the\n// unfinished ArrayBuffer \"transfer\" spec [2].\n//\n// This is problematic in node, where a number of APIs (like fs.ReadStream)\n// internally allocate and share ArrayBuffers between unrelated operations.\n// It's also problematic when using the reference implementation as a polyfill\n// in the browser, since it leads to the same bytes being copied at every link\n// in a bytestream pipeline.\n//\n// They do this because there are some web-platform tests that check whether\n// byteLength has been set to zero to infer whether the buffer has been\n// \"transferred\". We don't need to care about these tests in production, and\n// we also wish to _not_ copy bytes as they pass through a stream, so this\n// function fakes out the reference implementation to work around both these\n// issues.\n//\n// 1. https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n// 2. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer\n\n/** @ignore */\nexport function protectArrayBufferFromWhatwgRefImpl(value: Uint8Array) {\n    const real = value.buffer;\n    if (!(real as any)[kIsFakeBuffer]) {\n        const fake = Object.create(real);\n        Object.defineProperty(fake, kIsFakeBuffer, { value: true });\n        Object.defineProperty(fake, 'slice', { value: () => real });\n        Object.defineProperty(value, 'buffer', {     value: fake });\n    }\n    return value;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n        this.vector = batch.getChildAt(this.colidx)!;\n        return this.vector.get.bind(this.vector);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Vector as V } from '../interfaces';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        const schema = new Schema<{ values: T, counts: TCount }>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nexport class FilteredDataFrame<T extends { [key: string]: DataType; } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Schema, Field } from './schema';\nexport { Visitor } from './visitor';\nexport {\n    Row,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\nexport const util = {\n    ...util_int_,\n    ...util_bit_,\n    ...util_buffer_,\n    ...util_vector_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toReadableDOMStream } from './ipc/whatwg/iterable';\nimport { recordBatchReaderThroughDOMStream } from './ipc/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './ipc/whatwg/writer';\n\nstreamAdapters.toReadableDOMStream = toReadableDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util\n} from './Arrow';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\nimport { protectArrayBufferFromWhatwgRefImpl } from './hack';\n\n/** @ignore */\nexport function toReadableDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toReadableDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> protectArrayBufferFromWhatwgRefImpl(buf);\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> protectArrayBufferFromWhatwgRefImpl(buf);\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>() {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from(queue)).open();\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\nimport { protectArrayBufferFromWhatwgRefImpl } from './hack';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>>,\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>();\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, readableStrategy);\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(protectArrayBufferFromWhatwgRefImpl(buf));\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"],"sourceRoot":""}