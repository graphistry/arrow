{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","tslib/tslib.es6.js","util/buffer.ts","util/compat.ts","io/interfaces.ts","io/adapters.ts","flatbuffers/js/flatbuffers.mjs","util/utf8.ts","text-encoding-utf-8/lib/encoding.lib.mjs","buffer/index.js","(webpack)/buildin/global.js","base64-js/index.js","ieee754/index.js","isarray/index.js","fb/Schema.ts","fb/Message.ts","vector.ts","enum.ts","fb/File.ts","type.ts","schema.ts","ipc/metadata/file.ts","util/bit.ts","data.ts","util/pretty.ts","vector/row.ts","util/vector.ts","vector/chunked.ts","column.ts","vector/base.ts","vector/binary.ts","vector/bool.ts","util/int.ts","vector/date.ts","vector/decimal.ts","vector/dictionary.ts","vector/fixedsizebinary.ts","vector/fixedsizelist.ts","vector/float.ts","vector/interval.ts","vector/int.ts","vector/list.ts","vector/map.ts","vector/null.ts","vector/struct.ts","vector/timestamp.ts","vector/time.ts","vector/union.ts","vector/utf8.ts","visitor.ts","visitor/get.ts","visitor/set.ts","visitor/indexof.ts","visitor/iterator.ts","visitor/toarray.ts","visitor/bytewidth.ts","visitor/vectorctor.ts","vector/index.ts","visitor/typeassembler.ts","ipc/metadata/json.ts","ipc/metadata/message.ts","io/stream.ts","io/file.ts","ipc/message.ts","visitor/vectorassembler.ts","visitor/jsontypeassembler.ts","visitor/jsonvectorassembler.ts","ipc/writer.ts","table.ts","recordbatch.ts","visitor/vectorloader.ts","ipc/reader.ts","compute/predicate.ts","compute/dataframe.ts","Arrow.ts","Arrow.dom.ts","ipc/whatwg/iterable.ts","ipc/whatwg/reader.ts","ipc/whatwg/writer.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","__awaiter","__await","__asyncGenerator","__asyncDelegator","__asyncValues","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__values","iterator","length","v","this","asyncIterator","TypeError","g","q","verb","a","b","push","resume","fulfill","settle","f","shift","memcpy","joinUint8Arrays","toArrayBufferView","toInt8Array","toInt16Array","toInt32Array","toUint8Array","toUint16Array","toUint32Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","toArrayBufferViewIterator","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","tslib__WEBPACK_IMPORTED_MODULE_0__","flatbuffers__WEBPACK_IMPORTED_MODULE_1__","_util_utf8__WEBPACK_IMPORTED_MODULE_2__","_compat__WEBPACK_IMPORTED_MODULE_3__","ByteBuffer","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","target","source","targetByteOffset","sourceByteLength","byteLength","targetByteLength","dst","Uint8Array","buffer","byteOffset","src","Math","min","set","chunks","size","sliced","offset","index","numChunks","x","y","xOffset","xLen","yOffset","yLen","splice","collapseContiguousByteRanges","chunksLen","reduce","Infinity","subarray","slice","ArrayBufferViewCtor","input","constructor","BYTES_PER_ELEMENT","bytes","isView","from","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","Uint8ClampedArray","pump","ArrayCtor","wrap","buffers","it","arguments","emit","valueOffsets","isPromise","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isWritableDOMStream","isReadableDOMStream","isWritableNodeStream","isReadableNodeStream","_io_interfaces__WEBPACK_IMPORTED_MODULE_0__","isNumber","isBoolean","isFunction","isObject","ITERATOR_DONE","ArrowJSON","ReadableInterop","AsyncQueue","_adapters__WEBPACK_IMPORTED_MODULE_1__","freeze","[object Object]","_json","schema","batches","dictionaries","_getDOMStream","tee","writable","options","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","super","_values","resolvers","_closedPromise","_closedPromiseResolve","closed","reason","return","_ensureOpen","_error","error","undefined","_","abort","close","_args","Error","_util_buffer__WEBPACK_IMPORTED_MODULE_1__","fromIterable","cmd","threw","bufferLength","byteRange","isNaN","throw","fromAsyncIterable","fromDOMStream","AdaptiveByteReader","releaseLock","fromNodeStream","stream","events","event","err","onEvent","race","map","isFinite","evt","fn","destroy","cleanup","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","read","readInto","handler","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","position","prep","additional_bytes","align_size","capacity","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","vt2","readInt16","j","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","Buffer","decodeUtf8","encodeUtf8","_buffer__WEBPACK_IMPORTED_MODULE_0__","text_encoding_utf_8__WEBPACK_IMPORTED_MODULE_1__","decoder","NodeBuffer","toString","decode","TextDecoder","encoder","encode","TextEncoder","inRange","max","ToDictionary","end_of_stream","Stream","tokens","endOfStream","prepend","token","Array","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","bite","code_point","UTF8Encoder","count","temp","input_stream","code_points","indexOf","cp","codePointsToString","opt_string","string","u","stringToCodePoints","global","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","array","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","isBuffer","checked","copy","val","type","data","fromObject","assertSize","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","buf","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","concat","list","pos","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","match","join","thisStart","thisEnd","thisCopy","targetCopy","includes","toJSON","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","Function","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","Schema_org","arrow","apache","org","Message_org","Vector","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","VectorType","Endianness","Null","__init","builder","Struct_","List","FixedSizeList","listSize","Map","keysSorted","Union","Sparse","typeIdsOffset","numElems","Int","bitWidth","isSigned","FloatingPoint","HALF","precision","Utf8","Binary","FixedSizeBinary","byteWidth","Bool","Decimal","scale","Date","MILLISECOND","unit","Time","Timestamp","SECOND","optionalEncoding","timezoneOffset","Interval","YEAR_MONTH","VectorLayout","OFFSET","KeyValue","keyOffset","valueOffset","DictionaryEncoding","id","indexTypeOffset","isOrdered","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","layoutOffset","customMetadataOffset","Schema","Little","endianness","fieldsOffset","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","DictionaryBatch","dataOffset","isDelta","Message","V1","version","headerType","headerOffset","bodyLength","File_org","ArrowType","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","metaDataLength","type_DataType","_children","typeId","Float","Struct","Dictionary","children","proto","ArrayType","type_Null","type_Int_","_isSigned","_bitWidth","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","type_Float","_precision","SINGLE","DOUBLE","type_Float16","type_Float32","type_Float64","type_Binary","type_Utf8","type_Bool","type_Decimal","_scale","type_Date_","_unit","type_DateDay","DAY","type_DateMillisecond","type_Time_","type_TimeSecond","type_TimeMillisecond","type_TimeMicrosecond","MICROSECOND","type_TimeNanosecond","NANOSECOND","type_Timestamp_","_timezone","timezone","type_TimestampSecond","type_TimestampMillisecond","type_TimestampMicrosecond","type_TimestampNanosecond","type_Interval_","type_IntervalDayTime","DAY_TIME","type_IntervalYearMonth","type_List","child","valueType","valueField","type_Struct","type_Union_","_mode","_typeIds","_typeIdToChildIndex","typeIdToChildIndex","idx","typeIds","type_DenseUnion","Dense","type_SparseUnion","type_FixedSizeBinary","_byteWidth","type_FixedSizeList","_listSize","type_Map_","_keysSorted","getId","atomicDictionaryId","type_Dictionary","dictionary","indices","dictionaryVector","_indices","_dictionary","_isOrdered","_dictionaryVector","_id","fields","metadata","dictionaryFields","_fields","_metadata","generateDictionaryMap","isDictionary","has","_dictionaries","_dictionaryFields","vectors","names","schema_Field","columnNames","xs","filter","_name","_type","_nullable","_Block","_Footer","file_Footer_","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","util_buffer","footer","getRootAsFooter","OffHeapFooter","startRecordBatchesVector","numRecordBatches","reverse","forEach","rb","FileBlock","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","finishFooterBuffer","endFooter","block","getRecordBatch","getDictionaryBatch","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","iterateBits","values","begin","context","byteIndex","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","cnt","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","kUnknownNullCount","data_Data","nullCount","childData","_buffers","_offset","_length","assign","_nullCount","_childData","DATA","TYPE","nullBitmap","VALIDITY","sliceBuffers","sliceChildren","clone","sliceData","sliceOffsets","valueOffsetsOrChildData","valueToString","JSON","stringify","columnDescriptor","lengthDescriptor","rowIndexDescriptor","rowParentDescriptor","row","parent","rowIndex","row_Row","fieldsAreEnumerable","columnIndex","_bindGetter","schemaOrFields","keys","colIndex","getChildAt","bound","isStruct","getOwnPropertyNames","props","prop","clampIndex","adjust","clampRange","createElementComparator","search","valueOfSearch","valueOf","fns","C","chunked_Chunked","offsets","calculateOffsets","_chunks","_chunkOffsets","_numChildren","flatten","numChildren","stride","chunk","others","_sliceInternal","columns","vector","vec","mid","isValidInternal","getInternal","element","self","indexOfInternal","toArray","arraySet","typedSet","isValid","chunkIndex","fromIndex","slices","chunkOffsets","chunkLength","chunkOffset","column_Column","_field","column","base_BaseVector","_stride","_bindDataAccessors","VectorName","new","binary_BinaryVector","bool_BoolVector","carryBit16","intAsHex","kInt32DecimalDigits","kPowersOfTen","BaseInt64","L","R","product","lessThan","int_Uint64","_times","_plus","out_buffer","posn","group","multiple","times","plus","left","right","int_Int64","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","date_DateVector","convertArray","DateDayVector","DateMillisecondVector","decimal_DecimalVector","dictionary_DictionaryVector","fixedsizebinary_FixedSizeBinaryVector","fixedsizelist_FixedSizeListVector","float_FloatVector","Float16Vector","Float32Vector","Float64Vector","interval_IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","int_IntVector","is64","Int8Vector","Int16Vector","Int32Vector","Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","list_ListVector","map_MapVector","rowProxy","null_NullVector","struct_StructVector","timestamp_TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","time_TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","union_UnionVector","DenseUnionVector","SparseUnionVector","utf8_Utf8Vector","Visitor","nodes","args","node","visit","getVisitFn","throwIfNotFound","visitor","dtype","inferDType","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","_node","get_GetVisitor","epochMillisecondsLongToMs","epochMillisecondsToDate","epochMs","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getNumericX2","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getNested","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","getValue","getKey","instance","set_SetVisitor","setEpochMsToMillisecondsLong","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setNested","kid","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","setValue","set_instance","indexof_IndexOfVisitor","indexOfValue","searchElement","indexOfNull","indexOfUnion","indexof_instance","iterator_IteratorVisitor","vectorIterator","getFn","nullByte","nullBit","nullableIterator","iterator_instance","toarray_ToArrayVisitor","arrayOfVector","toarray_instance","variableWidthColumnErrorMessage","bytewidth_instance","____","visitFields","vectorctor_instance","partial0","partial2","getByteWidth","wrapNullableSet","T","VectorCtor","partial1","typeassembler_Long","typeassembler_Null","typeassembler_Binary","typeassembler_Bool","typeassembler_Utf8","typeassembler_Decimal","typeassembler_Date","typeassembler_List","typeassembler_Struct","typeassembler_FixedSizeBinary","typeassembler_FixedSizeList","typeassembler_Map_","typeassembler_instance","startNull","endNull","startInt","addBitWidth","addIsSigned","endInt","startFloatingPoint","addPrecision","endFloatingPoint","startBinary","endBinary","startBool","endBool","startUtf8","endUtf8","startDecimal","addScale","endDecimal","startDate","addUnit","endDate","startTime","endTime","startTimestamp","addTimezone","endTimestamp","startInterval","endInterval","startList","endList","startStruct_","endStruct_","startTypeIdsVector","createTypeIdsVector","startUnion","addMode","addTypeIds","endUnion","indexType","startDictionaryEncoding","addId","addIsOrdered","addIndexType","endDictionaryEncoding","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startFixedSizeList","addListSize","endFixedSizeList","startMap","addKeysSorted","endMap","recordBatchFromJSON","message_RecordBatch","fieldNodesFromJSON","fieldNodes","nullCountFromJSON","buffersFromJSON","BufferRegion","fieldChildrenFromJSON","Boolean","fromJSON","validity","customMetadataFromJSON","entries","indexTypeFromJSON","typeFromJSON","message_Long","message_Builder","message_ByteBuffer","message_Type","_Field","_Schema","_Buffer","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","message_Message","header","_version","_headerType","body","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","startMessage","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","_nodes","_isDelta","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","k","startKeyValue","addKey","addValue","endKeyValue","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","addCustomMetadata","endField","dictType","dictMeta","dictField","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","startSchema","addFields","addEndianness","platformIsLittleEndian","Big","endSchema","_schema","fieldsLength","decodeSchemaFields","schemaFieldsFromJSON","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","batch","nodesLength","decodeFieldNodes","buffersLength","v3Compat","decodeBuffers","dictionaryBatch","startDictionaryBatch","addIsDelta","addData","endDictionaryBatch","createFieldNode","setInt16","stream_AsyncByteQueue","interfaces","sync","tslib_es6","_c","_b","stream_ByteStream","stream_ByteStreamSource","adapters","peek","stream_AsyncByteStream","stream_AsyncByteStreamSource","compat","cancel","file_RandomAccessFile","readAt","getInt32","file_AsyncRandomAccessFile","file","_handle","_pending","stat","bytesRead","ipc_message_ByteBuffer","invalidMessageType","nullMessage","invalidMessageMetadata","expected","invalidMessageBodyLength","message_MessageReader","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","message_AsyncMessageReader","message_JSONMessageReader","_body","_batchIndex","_dictionaryIndex","numBatches","flattenDataSources","MAGIC","MAGIC_STR","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","vectorassembler_VectorAssembler","_bufferRegions","recordbatch_RecordBatch","visitMany","addBuffer","_nullV","bufferRegions","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childIndex","childLength","jsontypeassembler_JSONTypeAssembler","jsonvectorassembler_JSONVectorAssembler","bigNumsToStrings","binaryToString","octets","toUpperCase","bignumToString","digits","writer_RecordBatchWriter","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_autoDestroy","autoDestroy","writableStrategy","readableStrategy","writeAll","writer","batches_1","batches_1_1","writeAllAsync","table_Table","reset","sink","objectMode","_writeFooter","_writeSchema","_writeRecordBatch","flatbufferSize","nPaddingBytes","_write","of","_writePadding","_writeMessage","_writeDictionaries","records","assemble","_writeBodyBuffers","padding","_writeDictionaryBatch","RecordBatchStreamWriter","writer_RecordBatchFileWriter","_writeMagic","writer_RecordBatchJSONWriter","fieldToJSON","dictionaryBatchToJSON","recordBatchToJSON","assembler","empty","reader_RecordBatchReader","isSync","open","opening","reader_1_1","reader_1","struct","numCols","getColumnAt","getColumnIndex","findIndex","select","numRows","childNames","structData","vectorloader_VectorLoader","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","readTypeIds","nextBufferRange","vectorloader_JSONVectorLoader","sources","isTimestamp","isInt","isTime","isDate","isDecimal","isBinary","isFixedSizeBinary","joined","binaryDataFromJSON","isBool","isUtf8","impl","_impl","isFile","isAsync","isStream","readRecordBatch","reader_RecordBatchStreamReader","reader_RecordBatchJSONReaderImpl","fromArrowJSON","AsyncRecordBatchFileReader","reader_AsyncRecordBatchFileReaderImpl","AsyncRecordBatchStreamReader","reader_AsyncRecordBatchStreamReaderImpl","fromFileHandle","RecordBatchFileReader","reader_RecordBatchFileReaderImpl","fromAsyncByteStream","reader_RecordBatchStreamReaderImpl","fromByteStream","readAllSync","readAllAsync","reader_RecordBatchReaderImpl","_recordBatchIndex","_loadVectors","types","_reader","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","_readFooter","_readDictionaryBatch","seek","rest","_super","Value","Literal","predicate_Equals","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","every","some","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","cols","func","CustomPredicate","bind_","predicate_lit","predicate_col","and","or","custom","countBy","dataframe_DataFrame","scan","predicate","dataframe_FilteredDataFrame","batchIndex","count_by","countByteLength","ceil","counts","dataframe_CountByResult","_predicate","util","int_namespaceObject","bit_namespaceObject","util_vector_namespaceObject","predicate_namespaceObject","bm","hwm","highWaterMark","ReadableStream","controller","desiredSize","enqueue","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable","WritableStream"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { ArrayBufferViewConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    for (let x, y, i = 0; ++i < chunks.length;) {\n        x = chunks[i - 1];\n        y = chunks[i - 0];\n        // continue x and y don't share the same underlying ArrayBuffer\n        if (!x || !y || x.buffer !== y.buffer) { continue; }\n        const { byteOffset: xOffset, byteLength: xLen } = x;\n        const { byteOffset: yOffset, byteLength: yLen } = y;\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) { continue; }\n        chunks.splice(--i, 2, new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen));\n    }\n    return chunks;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[]] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    chunks = collapseContiguousByteRanges(chunks);\n    let offset = 0, index = -1, numChunks = chunks.length;\n    let chunksLen = chunks.reduce((x, y) => x + y.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let length = Math.min(chunksLen, typeof size === 'number' ? size : Infinity);\n    while (++index < numChunks) {\n        source = chunks[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                chunks[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        (buffer || (buffer = new Uint8Array(length))).set(sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), chunks.slice(index)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends ArrayBufferView>(ArrayBufferViewCtor: ArrayBufferViewConstructor<T>, input: ArrayBufferViewInput): T {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBufferViewCtor) {\n        return value.constructor === ArrayBufferViewCtor ? value :\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n    }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends ArrayBufferView>(ArrayCtor: ArrayBufferViewConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends ArrayBufferView>(ArrayCtor: ArrayBufferViewConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['tee']) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['pipeTo']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    private _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    private _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore */\nexport const decodeUtf8 = ((decoder) => {\n    /** @suppress {missingRequire} */\n    const NodeBuffer = typeof Buffer !== 'undefined' ? Buffer : null;\n    return !NodeBuffer ? decoder.decode.bind(decoder) : (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return NodeBuffer.from(buffer, byteOffset, length).toString();\n    };\n})(new (typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill)());\n\n/** @ignore */\nexport const encodeUtf8 = ((encoder) => {\n    /** @suppress {missingRequire} */\n    const NodeBuffer = typeof Buffer !== 'undefined' ? Buffer : null;\n    return !NodeBuffer ? encoder.encode.bind(encoder) :\n        (input = '') => toUint8Array(NodeBuffer.from(input, 'utf8'));\n})(new (typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill)());\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends Vector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends Vector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n}\n\nexport interface Vector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class Vector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\nexport enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n\n    // These enum values are here so that TypeScript can narrow the type signatures further\n    // beyond the base Arrow types. The base Arrow types include metadata like bitWidths that\n    // impact the type signatures of the values we return. For example, the Int8Vector reads\n    // 1-byte numbers from an Int8Array, an Int32Vector reads a 4-byte number from an Int32Array,\n    // and an Int64Vector reads a pair of 4-byte lo, hi int32s, and returns them as a zero-copy\n    // slice from an underlying Int32Array. Library consumers benefit by doing this type narrowing,\n    // since we can ensure the types across all public methods are propagated and never bail to `any`.\n    // These values are _never_ actually used at runtime, and they will _never_ be written into the\n    // flatbuffers metadata of serialized Arrow IPC payloads.\n    Dictionary            = -1, // Dictionary aka Category type\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { Vector as VType } from './interfaces';\nimport { ArrayBufferViewConstructor } from './interfaces';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType; }> =\n      { readonly length: number }\n    & ( Iterable<T[keyof T]['TValue']> )\n    & { [P in keyof T]: T[P]['TValue'] }\n    & { get<K extends keyof T>(key: K): T[K]['TValue']; }\n    ;\n\nexport interface DataType<TType extends Type = Type> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n}\n\nexport class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get children() { return this._children; }\n    public get typeId(): TType { return <any> Type.NONE; }\n\n    constructor(protected _children?: Field<TChildren[keyof TChildren]>[]) {}\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number;            };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number;            };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number;            };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: Int32Array;        };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number;            };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number;            };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number;            };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: Uint32Array;       };\n};\n\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(protected _isSigned: IType[T]['isSigned'],\n                protected _bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get isSigned() { return this._isSigned; }\n    public get bitWidth() { return this._bitWidth; }\n    public get ArrayType(): ArrayBufferViewConstructor<IType[T]['TArray']> {\n        switch (this._bitWidth) {\n            case  8: return (this._isSigned ?  Int8Array :  Uint8Array) as any;\n            case 16: return (this._isSigned ? Int16Array : Uint16Array) as any;\n            case 32: return (this._isSigned ? Int32Array : Uint32Array) as any;\n            case 64: return (this._isSigned ? Int32Array : Uint32Array) as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this._isSigned ? `I` : `Ui`}nt${this._bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float32Array;  TValue: number; };\n};\n\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(protected _precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get precision() { return this._precision; }\n    // @ts-ignore\n    public get ArrayType(): ArrayBufferViewConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array as any;\n            case Precision.SINGLE: return Float32Array as any;\n            case Precision.DOUBLE: return Float64Array as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: typeof Uint8Array; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: typeof Uint8Array; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: typeof Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(protected _scale: number,\n                protected _precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public get scale() { return this._scale; }\n    public get precision() { return this._precision; }\n    public toString() { return `Decimal[${this._precision}e${this._scale > 0 ? `+` : ``}${this._scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: typeof Int32Array; }\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(protected _unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public get unit() { return this._unit; }\n    public toString() { return `Date${(this._unit + 1) * 32}<${DateUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: typeof Int32Array; }\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(protected _unit: TimesType[T]['unit'],\n                protected _bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public get unit() { return this._unit; }\n    public get bitWidth() { return this._bitWidth; }\n    public toString() { return `Time${this._bitWidth}<${TimeUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: typeof Int32Array; }\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(protected _unit: TimeUnit, protected _timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public get unit() { return this._unit; }\n    public get timezone() { return this._timezone; }\n    public toString() { return `Timestamp<${TimeUnit[this._unit]}${this._timezone ? `, ${this._timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: typeof Int32Array; }\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(protected _unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public get unit() { return this._unit; }\n    public toString() { return `Interval<${IntervalUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: VType<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super([child]);\n    }\n    public get typeId() { return Type.List as Type.List; }\n    // @ts-ignore\n    protected _children: Field<T>[];\n    public toString() { return `List<${this.valueType}>`; }\n    public get children() { return this._children; }\n    public get valueType(): T { return this._children[0].type as T; }\n    public get valueField(): Field<T> { return this._children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct<T extends { [key: string]: DataType; } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\nexport class Struct<T extends { [key: string]: DataType; } = any> extends DataType<Type.Struct, T> {\n    constructor(protected _children: Field<T[keyof T]>[]) {\n        super(_children);\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public get children() { return this._children; }\n    public toString() { return `Struct<[${this._children.map((f) => f.type).join(`, `)}]>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int32Array; TValue: any[]; }\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    protected _typeIds: Int32Array;\n    protected _children: Field<any>[];\n    protected _typeIdToChildIndex: { [key: number]: number };\n    constructor(protected _mode: UnionMode, _typeIds: number[] | Int32Array, _children: Field<any>[]) {\n        super(_children);\n        this._children = _children;\n        this._typeIds = _typeIds = Int32Array.from(_typeIds);\n        this._typeIdToChildIndex = _typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public get mode() { return this._mode; }\n    public get typeIds() { return this._typeIds; }\n    public get children() { return this._children; }\n    public get typeIdToChildIndex() { return this._typeIdToChildIndex; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this._children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: typeof Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(protected _byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public get byteWidth() { return this._byteWidth; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: VType<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    constructor(protected _listSize: number, child: Field<T>) {\n        super([child]);\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    // @ts-ignore\n    protected _children: Field<T>[];\n    public get listSize() { return this._listSize; }\n    public get children() { return this._children; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this._listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\nexport interface Map_<T extends { [key: string]: DataType; } = any> extends DataType<Type.Map> { TArray: Uint8Array; TValue: RowLike<T>; dataTypes: T; }\nexport class Map_<T extends { [key: string]: DataType; } = any> extends DataType<Type.Map, T> {\n    constructor(protected _children: Field<T[keyof T]>[],\n                protected _keysSorted: boolean = false) {\n        super(_children);\n    }\n    public get typeId() { return Type.Map as Type.Map; }\n    public get children() { return this._children; }\n    public get keysSorted() { return this._keysSorted; }\n    public toString() { return `Map<{${this._children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    protected _id: number;\n    protected _indices: TKey;\n    protected _dictionary: T;\n    protected _isOrdered: boolean;\n    protected _dictionaryVector: Vector<T>;\n    public set dictionaryVector(v) { this._dictionaryVector = v; }\n    public get dictionaryVector() { return this._dictionaryVector; }\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null, dictionaryVector?: Vector<T>) {\n        super();\n        this._indices = indices;\n        this._dictionary = dictionary;\n        this._isOrdered = isOrdered || false;\n        this._dictionaryVector = dictionaryVector!;\n        this._id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get id() { return this._id; }\n    public get indices() { return this._indices; }\n    public get dictionary() { return this._dictionary; }\n    public get isOrdered() { return this._isOrdered; }\n    public set children(_: T['children']) {}\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType, Dictionary } from './type';\nimport { Vector as VType } from './interfaces';\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(vectors: VType<T[keyof T]>[], names: (keyof T)[] = []) {\n        return new Schema<T>(vectors.map((v, i) => new Field('' + (names[i] || i), v.type)));\n    }\n\n    protected _fields: Field[];\n    protected _metadata: Map<string, string>;\n    protected _dictionaries: Map<number, DataType>;\n    protected _dictionaryFields: Map<number, Field<Dictionary>[]>;\n    public get fields(): Field[] { return this._fields; }\n    public get metadata(): Map<string, string> { return this._metadata; }\n    public get dictionaries(): Map<number, DataType> { return this._dictionaries; }\n    public get dictionaryFields(): Map<number, Field<Dictionary>[]> { return this._dictionaryFields; }\n\n    constructor(fields: Field[],\n                metadata?: Map<string, string>,\n                dictionaries?: Map<number, DataType>,\n                dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n        this._fields = fields;\n        this._metadata = metadata || Schema.prototype._metadata;\n        if (!dictionaries || !dictionaryFields) {\n            ({ dictionaries, dictionaryFields } = generateDictionaryMap(\n                fields, dictionaries || new Map(), dictionaryFields || new Map()\n            ));\n        }\n        this._dictionaries = dictionaries;\n        this._dictionaryFields = dictionaryFields;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public static [Symbol.toStringTag] = ((prototype: Schema) => {\n        (prototype as any)._metadata = Object.freeze(new Map());\n        return 'Schema';\n    })(Schema.prototype);\n}\n\nexport class Field<T extends DataType = DataType> {\n    protected _type: T;\n    protected _name: string;\n    protected _nullable: true | false;\n    protected _metadata?: Map<string, string> | null;\n    constructor(name: string, type: T, nullable: true | false = false, metadata?: Map<string, string> | null) {\n        this._name = name;\n        this._type = type;\n        this._nullable = nullable;\n        this._metadata = metadata;\n    }\n    public get type() { return this._type; }\n    public get name() { return this._name; }\n    public get nullable() { return this._nullable; }\n    public get metadata() { return this._metadata; }\n    public get typeId() { return this._type.typeId; }\n    public get [Symbol.toStringTag](): string { return 'Field'; }\n    public get indices() {\n        return DataType.isDictionary(this._type) ? this._type.indices : this._type;\n    }\n    public toString() { return `${this.name}: ${this.type}`; }\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries: Map<number, DataType>, dictionaryFields: Map<number, Field<Dictionary>[]>) {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaryFields.get(type.id)) {\n                dictionaryFields.set(type.id, []);\n            }\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n                dictionaryFields.get(type.id)!.push(field as any);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children) {\n            generateDictionaryMap(type.children, dictionaries, dictionaryFields);\n        }\n    }\n\n    return { dictionaries, dictionaryFields };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        bytes.set((offset % 8 === 0)\n            // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n            ? bitmap.subarray(offset >> 3)\n            // Otherwise iterate each bit from the offset and return a new one\n            : packBools(iterateBits(bitmap, offset, length, null, getBool)));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let n = 0, i = 0;\n    let xs: number[] = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do { xs[i] = 0; } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { popcnt_bit_range } from './util/bit';\nimport { toArrayBufferView } from './util/buffer';\nimport { VectorType as BufferType, UnionMode } from './enum';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Array::null_count is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number>;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number>;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number>;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]?: Int32Array;\n        [BufferType.DATA]?: T['TArray'];\n    [BufferType.VALIDITY]?: Uint8Array;\n        [BufferType.TYPE]?: T['TArray'];\n}\n\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    protected _type: T;\n    protected _length: number;\n    protected _offset: number;\n\n    // @ts-ignore\n    protected _childData: Data[];\n    protected _buffers = [] as Buffers<T>;\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get offset() { return this._offset; }\n    public get typeId() { return this._type.typeId; }\n    public get childData() { return this._childData; }\n\n    public get ArrayType() { return this._type.ArrayType; }\n\n    public get buffers() { return this._buffers; }\n    public get values() { return this._buffers[BufferType.DATA]!; }\n    public get typeIds() { return this._buffers[BufferType.TYPE]!; }\n    public get nullBitmap() { return this._buffers[BufferType.VALIDITY]!; }\n    public get valueOffsets() { return this._buffers[BufferType.OFFSET]!; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount === kUnknownNullCount && (nullBitmap = this._buffers[BufferType.VALIDITY])) {\n            this._nullCount = nullCount = this._length - popcnt_bit_range(nullBitmap, this._offset, this._offset + this._length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Buffers<T>, childData?: (Data | Vector)[]) {\n        this._type = type;\n        this._offset = Math.floor(Math.max(offset || 0, 0));\n        this._length = Math.floor(Math.max(length || 0, 0));\n        this._buffers = Object.assign([], buffers) as Buffers<T>;\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this._childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n    }\n\n    public clone<R extends DataType>(type: R, offset = this._offset, length = this._length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this._buffers, childData: (Data | Vector)[] = this._childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const buffers = this.sliceBuffers(offset, length);\n        const childData = this.sliceChildren(offset, length);\n        return this.clone<T>(this._type, this._offset + offset, length, nullCount, buffers, childData);\n    }\n\n    protected sliceBuffers(offset: number, length: number): Buffers<T> {\n        let arr: any, buffers = Object.assign([], this._buffers) as Buffers<T>;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = this.sliceData(arr, offset, length));\n        return buffers;\n    }\n\n    protected sliceChildren(offset: number, length: number): Data[] {\n        // Only slice children if this isn't variable width data\n        if (!this._buffers[BufferType.OFFSET]) {\n            return this._childData.map((child) => child.slice(offset, length));\n        }\n        return this._childData;\n    }\n\n    protected sliceData(data: T['TArray'] & ArrayBufferView, offset: number, length: number) {\n        // Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        return this._type.typeId === 6 ? data : data.subarray(offset, offset + length);\n    }\n\n    protected sliceOffsets(valueOffsets: Int32Array, offset: number, length: number) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        });\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView<T['TArray']>(type.indices.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, childData: Data | Vector) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets)\n        }, [childData]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, childData: Data | Vector) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, [childData]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, childData: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, childData: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildData: ValueOffsetsBuffer | (Data | Vector)[], childData?: (Data | Vector)[]) {\n        const buffers = {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.TYPE]: toArrayBufferView(type.ArrayType, typeIds)\n        } as any;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildData as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toArrayBufferView(Int32Array, <ValueOffsetsBuffer> valueOffsetsOrChildData);\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function valueToString(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { MapVector } from '../vector/map';\nimport { DataType, RowLike } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { StructVector } from '../vector/struct';\n\n/** @ignore */ const columnDescriptor = { enumerable: true, configurable: false, get: () => {} };\n/** @ignore */ const lengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };\n/** @ignore */ const rowIndexDescriptor = { writable: false, enumerable: false, configurable: true, value: null as any };\n/** @ignore */ const rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null as any };\n/** @ignore */ const row = { parent: rowParentDescriptor, rowIndex: rowIndexDescriptor };\n\n/** @ignore */\nexport class Row<T extends { [key: string]: DataType }> implements Iterable<T[keyof T]['TValue']> {\n    [key: string]: T[keyof T]['TValue'];\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType }>(schemaOrFields: T | Field[], fieldsAreEnumerable = false): RowLike<T> & Row<T> {\n        let schema: T, fields: Field[];\n        if (Array.isArray(schemaOrFields)) {\n            fields = schemaOrFields;\n        } else {\n            schema = schemaOrFields;\n            fieldsAreEnumerable = true;\n            fields = Object.keys(schema).map((x) => new Field(x, schema[x]));\n        }\n        return new Row<T>(fields, fieldsAreEnumerable) as RowLike<T> & Row<T>;\n    }\n    // @ts-ignore\n    private parent: TParent;\n    // @ts-ignore\n    private rowIndex: number;\n    // @ts-ignore\n    public readonly length: number;\n    private constructor(fields: Field[], fieldsAreEnumerable: boolean) {\n        lengthDescriptor.value = fields.length;\n        Object.defineProperty(this, 'length', lengthDescriptor);\n        fields.forEach((field, columnIndex) => {\n            columnDescriptor.get = this._bindGetter(columnIndex);\n            // set configurable to true to ensure Object.defineProperty\n            // doesn't throw in the case of duplicate column names\n            columnDescriptor.configurable = true;\n            columnDescriptor.enumerable = fieldsAreEnumerable;\n            Object.defineProperty(this, field.name, columnDescriptor);\n            columnDescriptor.configurable = false;\n            columnDescriptor.enumerable = !fieldsAreEnumerable;\n            Object.defineProperty(this, columnIndex, columnDescriptor);\n            columnDescriptor.get = null as any;\n        });\n    }\n    *[Symbol.iterator](this: RowLike<T>) {\n        for (let i = -1, n = this.length; ++i < n;) {\n            yield this[i];\n        }\n    }\n    private _bindGetter(colIndex: number) {\n        return function (this: Row<T>) {\n            let child = this.parent.getChildAt(colIndex);\n            return child ? child.get(this.rowIndex) : null;\n        };\n    }\n    public get<K extends keyof T>(key: K) { return (this as any)[key] as T[K]['TValue']; }\n    public bind<TParent extends MapVector<T> | StructVector<T>>(parent: TParent, rowIndex: number) {\n        rowIndexDescriptor.value = rowIndex;\n        rowParentDescriptor.value = parent;\n        const bound = Object.create(this, row);\n        rowIndexDescriptor.value = null;\n        rowParentDescriptor.value = null;\n        return bound as RowLike<T>;\n    }\n    public toJSON(): any {\n        return DataType.isStruct(this.parent.type) ? [...this] :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = (this as any)[prop]) && props || props;\n            }, {});\n    }\n    public toString() {\n        return DataType.isStruct(this.parent.type) ?\n            [...this].map((x) => valueToString(x)).join(', ') :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = valueToString((this as any)[prop])) && props || props;\n            }, {});\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Row } from '../vector/row';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    // Compare primitives\n    if (search == null || typeof search !== 'object') {\n        return (value: any) => value === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare Array-likes\n    if (Array.isArray(search) || ArrayBuffer.isView(search)) {\n        const n = (search as any).length;\n        const fns = [] as ((x: any) => boolean)[];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator((search as any)[i]);\n        }\n        return (value: any) => {\n            if (!value || value.length !== n) { return false; }\n            // Handle the case where the search element is an Array, but the\n            // values are Rows or Vectors, e.g. list.indexOf(['foo', 'bar'])\n            if ((value instanceof Row) || (value instanceof Vector)) {\n                for (let i = -1, n = value.length; ++i < n;) {\n                    if (!(fns[i]((value as any).get(i)))) { return false; }\n                }\n                return true;\n            }\n            for (let i = -1, n = value.length; ++i < n;) {\n                if (!(fns[i](value[i]))) { return false; }\n            }\n            return true;\n        };\n    }\n    // Compare Rows and Vectors\n    if ((search instanceof Row) || (search instanceof Vector)) {\n        const n = search.length;\n        const C = search.constructor as any;\n        const fns = [] as ((x: any) => boolean)[];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator((search as any).get(i));\n        }\n        return (value: any) => {\n            if (!(value instanceof C)) { return false; }\n            if (!(value.length === n)) { return false; }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value.get(i)))) { return false; }\n            }\n            return true;\n        };\n    }\n    // Compare non-empty Objects\n    const keys = Object.keys(search);\n    if (keys.length > 0) {\n        const n = keys.length;\n        const fns = [] as ((x: any) => boolean)[];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator(search[keys[i]]);\n        }\n        return (value: any) => {\n            if (!value || typeof value !== 'object') { return false; }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value[keys[i]]))) { return false; }\n            }\n            return true;\n        };\n    }\n    // No valid comparator\n    return () => false;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { Clonable, Sliceable, Applicative } from '../vector';\nimport { DictionaryVector } from './dictionary';\n\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? T['dictionaryVector'] : null | never;\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\ntype SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends Vector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: Vector<T>[]) {\n        return vectors.reduce(function flatten(xs: any[], x: any): any[] {\n            return x instanceof Chunked ? x.chunks.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x: any): x is Vector<T> => x instanceof Vector);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...chunks: Vector<T>[]): Chunked<T> {\n        return new Chunked(chunks[0].type, Chunked.flatten(...chunks));\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId() { return this._type.typeId; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return (<any> this._type.dictionaryVector) as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let { ArrayType } = this._type;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new (ArrayType as any)(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, offset: number, length: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= offset + length) { continue; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= offset && (chunkOffset + chunkLength) <= offset + length) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - chunkOffset);\n            const end = begin + Math.min(chunkLength - begin, (offset + length) - chunkOffset);\n            slices.push(chunk.slice(begin, end) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset - 1;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[++idx] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\nimport { Clonable, Sliceable, Applicative } from './vector';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        super(field.type, Chunked.flatten(...vectors), offsets);\n        this._field = field;\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { Vector as VType } from '../interfaces';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\nexport interface BaseVector<T extends DataType = any> extends Clonable<VType<T>>, Sliceable<VType<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): VType<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[], stride?: number): VType<R>;\n}\n\nexport abstract class BaseVector<T extends DataType = any> extends Vector<T>\n    implements Clonable<VType<T>>, Sliceable<VType<T>>, Applicative<T, Chunked<T>> {\n\n    // @ts-ignore\n    protected _data: Data<T>;\n    protected _stride: number = 1;\n    protected _numChildren: number = 0;\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[], stride?: number) {\n        super();\n        this._children = children;\n        this._numChildren = data.childData.length;\n        this._bindDataAccessors(this._data = data);\n        this._stride = Math.floor(Math.max(stride || 1, 1));\n    }\n\n    public get data() { return this._data; }\n    public get stride() { return this._stride; }\n    public get numChildren() { return this._numChildren; }\n\n    public get type() { return this._data.type; }\n    public get typeId() { return this._data.typeId as T['TType']; }\n    public get length() { return this._data.length; }\n    public get offset() { return this._data.offset; }\n    public get nullCount() { return this._data.nullCount; }\n    public get VectorName() { return this.constructor.name; }\n\n    public get ArrayType(): T['ArrayType'] { return this._data.ArrayType; }\n\n    public get values() { return this._data.values; }\n    public get typeIds() { return this._data.typeIds; }\n    public get nullBitmap() { return this._data.nullBitmap; }\n    public get valueOffsets() { return this._data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children, stride = this._stride) {\n        return Vector.new<R>(data, children, stride) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this._data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    // @ts-ignore\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, offset: number, length: number) {\n        const stride = self.stride;\n        return self.clone(self.data.slice(offset * stride, (length - offset) * stride));\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Bool } from '../type';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { packBools } from '../util/bit';\n\nexport class BoolVector extends BaseVector<Bool> {\n    /** @nocollapse */\n    public static from(data: Iterable<boolean>) {\n        let length = 0, bitmap = packBools(function*() {\n            for (let x of data) { length++; yield x; }\n        }());\n        return Vector.new(Data.Bool(new Bool(), 0, length, 0, null, bitmap));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DateUnit } from '../enum';\nimport { BaseVector } from './base';\nimport * as IntUtil from '../util/int';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    /** @nocollapse */\n    public static from<T extends Date_ = DateMillisecond>(data: Date[], unit: T['unit'] = DateUnit.MILLISECOND) {\n        switch (unit) {\n            case DateUnit.DAY: {\n                const values = Int32Array.from(data.map((d) => d.valueOf() / 86400000));\n                return Vector.new(Data.Date(new DateDay(), 0, data.length, 0, null, values));\n            }\n            case DateUnit.MILLISECOND: {\n                const values = IntUtil.Int64.convertArray(data.map((d) => d.valueOf()));\n                return Vector.new(Data.Date(new DateMillisecond(), 0, data.length, 0, null, values));\n            }\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[unit]}\"`);\n    }\n    constructor(data: Data<T>) {\n        super(data, undefined, data.type.unit + 1);\n    }\n}\nexport class DateDayVector extends DateVector<DateDay> {}\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\nexport class DecimalVector extends BaseVector<Decimal> {\n    constructor(data: Data<Decimal>) {\n        super(data, undefined, 4);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { DataType, Dictionary, TKeys } from '../type';\n\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    /** @nocollapse */\n    public static from<T extends DataType<any>, TKey extends TKeys = TKeys>(\n        values: Vector<T>, indices: TKey,\n        keys: ArrayLike<number> | TKey['TArray']\n    ) {\n        const type = new Dictionary(values.type, indices, null, null, values);\n        return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys));\n    }\n    protected _indices: V<TKey>;\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data, void 0, 1);\n        this._indices = Vector.new(data.clone(this.type.indices));\n    }\n    // protected _bindDataAccessors() {}\n    public get indices() { return this._indices; }\n    public get dictionary() { return this._data.type.dictionaryVector; }\n    public isValid(index: number) { return this._indices.isValid(index); }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this._indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this._indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {\n    constructor(data: Data<FixedSizeBinary>) {\n        super(data, void 0, data.type.byteWidth);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {\n    constructor(data: Data<FixedSizeList<T>>) {\n        super(data, void 0, data.type.listSize);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n    /** @nocollapse */\n    public static from<T extends Float>(data: T['TArray']) {\n        switch (data.constructor) {\n            case Uint16Array: return Vector.new(Data.Float(new Float16(), 0, data.length, 0, null, data));\n            case Float32Array: return Vector.new(Data.Float(new Float32(), 0, data.length, 0, null, data));\n            case Float64Array: return Vector.new(Data.Float(new Float64(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n}\n\nexport class Float16Vector extends FloatVector<Float16> {}\nexport class Float32Vector extends FloatVector<Float32> {}\nexport class Float64Vector extends FloatVector<Float64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {\n    constructor(data: Data<T>) {\n        super(data, undefined, data.type.unit + 1);\n    }\n}\n\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\n\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n    public static from<T extends Int>(data: T['TArray']): V<T>;\n    public static from<T extends Int32 | Uint32>(data: T['TArray'], is64: true): V<T>;\n    /** @nocollapse */\n    public static from(data: any, is64?: boolean) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? Vector.new(Data.Int(new Int64(), 0, data.length, 0, null, data))\n                : Vector.new(Data.Int(new Uint64(), 0, data.length, 0, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return Vector.new(Data.Int(new Int8(), 0, data.length, 0, null, data));\n            case Int16Array: return Vector.new(Data.Int(new Int16(), 0, data.length, 0, null, data));\n            case Int32Array: return Vector.new(Data.Int(new Int32(), 0, data.length, 0, null, data));\n            case Uint8Array: return Vector.new(Data.Int(new Uint8(), 0, data.length, 0, null, data));\n            case Uint16Array: return Vector.new(Data.Int(new Uint16(), 0, data.length, 0, null, data));\n            case Uint32Array: return Vector.new(Data.Int(new Uint32(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    constructor(data: Data<T>) {\n        super(data, undefined, 1 + Number(data.type.bitWidth > 32));\n    }\n}\n\nexport class Int8Vector extends IntVector<Int8> {}\nexport class Int16Vector extends IntVector<Int16> {}\nexport class Int32Vector extends IntVector<Int32> {}\nexport class Int64Vector extends IntVector<Int64> {}\nexport class Uint8Vector extends IntVector<Uint8> {}\nexport class Uint16Vector extends IntVector<Uint16> {}\nexport class Uint32Vector extends IntVector<Uint32> {}\nexport class Uint64Vector extends IntVector<Uint64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class MapVector<T extends { [key: string]: DataType } = any> extends BaseVector<Map_<T>> {\n    public rowProxy: Row<T> = Row.new<T>(this.type.children || [], true);\n    public asStruct() {\n        return Vector.new(this.data.clone(new Struct(this.type.children)));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    public rowProxy: Row<T> = Row.new<T>(this.type.children || [], false);\n    public asMap(keysSorted: boolean = false) {\n        return Vector.new(this.data.clone(new Map_(this.type.children, keysSorted)));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {\n    constructor(data: Data<T>) {\n        super(data, undefined, 2);\n    }\n}\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {\n    constructor(data: Data<T>) {\n        super(data, undefined, 1 + Number(data.type.bitWidth > 32));\n    }\n}\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n}\n\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\n\nexport class Utf8Vector extends BaseVector<Utf8> {\n    /** @nocollapse */\n    public static from(values: string[]) {\n        const length = values.length;\n        const data = encodeUtf8(values.join(''));\n        const offsets = values.reduce((offsets, str, idx) => (\n            (!(offsets[idx + 1] = offsets[idx] + str.length) || true) && offsets\n        ), new Uint32Array(values.length + 1));\n        return Vector.new(Data.Utf8(new Utf8(), 0, length, 0, null, offsets, data));\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(node: any, ...args: any[]) {\n        return this.getVisitFn(node, false).call(this, node, ...args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { decodeUtf8 } from '../util/utf8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface GetVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[], indices: number[]): T['TValue'][];\n    visit     <T extends Vector>  (node: T, index: number       ): T['TValue'];\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: Vector<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: Vector<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: Vector<T>, index: number): T['TValue'];\n}\n\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n// /** @ignore */ const epochSecondsToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochSecondsToMs(data, index));\n// /** @ignore */ const epochNanosecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochNanosecondsLongToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: Vector<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: Vector<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number): T['TValue'] => (values[stride * index] - 32767) / 32767;\n/** @ignore */\nconst getNumericX2       = <T extends Numeric2X>      ({ stride, values }: Vector<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(<any> vector, index)\n        : getNumericX2(<any> vector, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as any, index)\n        : getFloat16(vector as any, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as any, index)\n        : getDateMillisecond(vector as any, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as Vector<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as Vector<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as Vector<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as Vector<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as Vector<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as Vector<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as Vector<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: Vector<T>, index: number): T['TValue'] => values.subarray(4 * index, 4 * (index + 1));\n\n/** @ignore */\nconst getList = <T extends List>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.rowProxy.bind(vector, index);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as Vector<DenseUnion>, index) :\n        getSparseUnion(vector as Vector<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: Vector<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: Vector<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as any, index)\n        : getIntervalYearMonth(vector as any, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =            getNumericX2;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =            getNumericX2;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getNested;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =               getNested;\n\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface SetVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    visit     <T extends Vector>  (node: T, index: number, value: T['TValue']          ): void;\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n}\n\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: Vector<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = (value * 32767) + 32767; };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(<any> vector, index, value as Numeric1X['TValue'])\n        : setNumericX2(<any> vector, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(<any> vector, index, value)\n        : setFloat16(<any> vector, index, value);\n};\n\n/* istanbul ignore next */\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector, index, value)\n        : setDateMillisecond(vector, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as Vector<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as Vector<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as Vector<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as Vector<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as Vector<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as Vector<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as Vector<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!;\n    const { valueOffsets, stride } = vector;\n    let idx = -1, offset = valueOffsets[index * stride];\n    let end = Math.min(value.length, valueOffsets[(index * stride) + 1] - offset);\n    while (offset < end) {\n        values.set(offset++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.children.forEach(({ name }, idx) => {\n        const kid = vector.getChildAt(idx);\n        kid && kid.set(index, value[name]);\n    });\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as Vector<DenseUnion>, index, value) :\n        setSparseUnion(vector as Vector<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector, index, value)\n        : setIntervalYearMonth(vector, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 getDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setNested;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =               setNested;\n\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IndexOfVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    visit     <T extends Vector>  (node: T, value: T['TValue'] | null, index?: number            ): number;\n    getVisitFn<T extends Type>    (node: T         ): (vector: Vector<T>, value: Vector<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: Vector<T> ): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: Data<T>   ): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: T         ): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n}\n\nexport class IndexOfVisitor extends Visitor {\n}\n\n/** @ignore */\nfunction nullIndexOf(vector: Vector<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: Vector<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IteratorVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[]     ): IterableIterator<T['TValue'] | null>[];\n    visit     <T extends Vector>  (node: T        ): IterableIterator<T['TValue'] | null>;\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n}\n\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: Vector<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Type, Precision } from '../enum';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface ToArrayVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[]     ): T['TArray'][];\n    visit     <T extends Vector>  (node: T        ): T['TArray'];\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>) => Vector<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: Vector<T>): Vector<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: Vector<T>): Vector<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: Vector<T>): Vector<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: Vector<T>): Vector<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: Vector<T>): Vector<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: Vector<T>): Vector<T>['TArray'];\n}\n\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: Vector<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n        case Type.Float:\n            return (type as Float).precision === Precision.HALF /* Precision.HALF */\n                ? new Float32Array(vector[Symbol.iterator]())\n                : vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\nexport interface ByteWidthVisitor extends Visitor {\n    visitMany <T extends DataType>(nodes: T[]     ): number[];\n    visit     <T extends DataType>(node: T        ): number;\n    getVisitFn<T extends Type>    (node: T        ): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: Vector<T>): (type: T          ) => number;\n    getVisitFn<T extends DataType>(node: Data<T>  ): (type: T          ) => number;\n    getVisitFn<T extends DataType>(node: T        ): (type: T          ) => number;\n}\n\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { Vector, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\nexport interface GetVectorConstructor extends Visitor {\n    visitMany <T extends Type>    (nodes: T[]     ): VectorCtor<T>[];\n    visit     <T extends Type>    (node: T,       ): VectorCtor<T>;\n    getVisitFn<T extends Type>    (node: T        ): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: Vector<T>): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: Data<T>  ): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: T        ): () => VectorCtor<T>;\n}\n\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Row } from './row';\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { Vector as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n    }\n}\n\ndeclare module './base' {\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn(data.type)())(data, ...args) as V<T>;\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .filter((typeId) => typeId !== Type.NONE && typeId !== Type[Type.NONE])\n    .map((T: any) => Type[T] as any).filter((T: any): T is Type => typeof T === 'number')\n    .forEach((typeId) => {\n        let typeIds: Type[];\n        switch (typeId) {\n            case Type.Int:       typeIds = [Type.Int8, Type.Int16, Type.Int32, Type.Int64, Type.Uint8, Type.Uint16, Type.Uint32, Type.Uint64]; break;\n            case Type.Float:     typeIds = [Type.Float16, Type.Float32, Type.Float64]; break;\n            case Type.Date:      typeIds = [Type.DateDay, Type.DateMillisecond]; break;\n            case Type.Time:      typeIds = [Type.TimeSecond, Type.TimeMillisecond, Type.TimeMicrosecond, Type.TimeNanosecond]; break;\n            case Type.Timestamp: typeIds = [Type.TimestampSecond, Type.TimestampMillisecond, Type.TimestampMicrosecond, Type.TimestampNanosecond]; break;\n            case Type.Interval:  typeIds = [Type.IntervalDayTime, Type.IntervalYearMonth]; break;\n            case Type.Union:     typeIds = [Type.DenseUnion, Type.SparseUnion]; break;\n            default:                typeIds = [typeId]; break;\n        }\n        typeIds.forEach((typeId) => {\n            const VectorCtor = getVectorConstructor.visit(typeId);\n            VectorCtor.prototype['get'] = partial1(getVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['set'] = partial2(setVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['indexOf'] = partial2(indexOfVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['toArray'] = partial0(toArrayVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['getByteWidth'] = partial0(byteWidthVisitor.getVisitFn(typeId));\n            VectorCtor.prototype[Symbol.iterator] = partial0(iteratorVisitor.getVisitFn(typeId));\n        });\n    });\n\n/** @ignore */\nfunction partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nfunction partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nfunction partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n\n/** @ignore */\nfunction wrapNullable1<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, a != null)) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const type = this.type;\n    this['get'] = getVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this['set'] = setVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this['indexOf'] = indexOfVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this['toArray'] = toArrayVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this[Symbol.iterator] = iteratorVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    if (this.nullCount > 0) {\n        this['get'] = wrapNullable1(this['get']);\n        this['set'] = wrapNullableSet(this['set']);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries, dictionaryFields\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries, dictionaryFields));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new DataType();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_(children || [], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/** @ignore */\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/** @ignore */\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/** @ignore */\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/** @ignore */\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/** @ignore */\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries, dictionaryFields);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries, dictionaryFields);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    return Array.from(\n        { length: batch.nodesLength() },\n        (_, i) => batch.nodes(i)!\n    ).filter(Boolean).map(FieldNode.decode);\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    return Array.from(\n        { length: batch.buffersLength() },\n        (_, i) => batch.buffers(i)!\n    ).filter(Boolean).map(v3Compat(version, BufferRegion.decode));\n}\n\n/** @ignore */\nfunction v3Compat(version: MetadataVersion, decode: (buffer: _Buffer) => BufferRegion) {\n    return (buffer: _Buffer, i: number) => {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        return decode(buffer);\n    };\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    return Array.from(\n        { length: schema.fieldsLength() },\n        (_, i) => schema.fields(i)!\n    ).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    return Array.from(\n        { length: field.childrenLength() },\n        (_, i) => field.children(i)!\n    ).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries, dictionaryFields));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new DataType();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_(children || [], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays((this._values as any[]).slice())[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                delete this._pending;\n                this.size = (await file.stat()).size;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json, _batchIndex, _dictionaryIndex } = this;\n        const numBatches = _json.batches.length;\n        const numDictionaries = _json.dictionaries.length;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { value: message, done: _batchIndex >= numBatches && _dictionaryIndex >= numDictionaries };\n        }\n        if (_dictionaryIndex < numDictionaries) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (_batchIndex < numBatches) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { Vector as VType } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\nexport interface VectorAssembler extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[]): this[];\n    visit     <T extends Vector>  (node: T   ): this;\n    getVisitFn<T extends Type>    (node: T       ): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: VType<T>): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: Data<T> ): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: T       ): (vector: VType<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: VType<T>): this;\n    visitInt                  <T extends Int>             (vector: VType<T>): this;\n    visitFloat                <T extends Float>           (vector: VType<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: VType<T>): this;\n    visitBinary               <T extends Binary>          (vector: VType<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: VType<T>): this;\n    visitDate                 <T extends Date_>           (vector: VType<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: VType<T>): this;\n    visitTime                 <T extends Time>            (vector: VType<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: VType<T>): this;\n    visitList                 <T extends List>            (vector: VType<T>): this;\n    visitStruct               <T extends Struct>          (vector: VType<T>): this;\n    visitUnion                <T extends Union>           (vector: VType<T>): this;\n    visitInterval             <T extends Interval>        (vector: VType<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: VType<T>): this;\n    visitMap                  <T extends Map_>            (vector: VType<T>): this;\n}\n\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n\n        const vectors = args.reduce(function flatten(xs: any[], x: any): any[] {\n            if (Array.isArray(x)) { return x.reduce(flatten, xs); }\n            if (!(x instanceof RecordBatch)) { return [...xs, x]; }\n            return [...xs, ...x.schema.fields.map((_, i) => x.getChildAt(i)!)];\n        }, []).filter((x: any): x is Vector => x instanceof Vector);\n\n        return new VectorAssembler().visitMany(vectors)[0];\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            addBuffer.call(this, nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : truncateBitmap(data.offset, length, data.nullBitmap)\n            ).nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: VType<T>) { return this; }\n    public visitDictionary<T extends Dictionary>(vector: VType<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: VType<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: VType<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: VType<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: VType<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends List | FixedSizeList>(this: VectorAssembler, vector: VType<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Map_ | Union>(this: VectorAssembler, vector: VType<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =   assembleNestedVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { RecordBatch } from '../recordbatch';\nimport { Vector as VType } from '../interfaces';\nimport { VectorType as BufferType } from '../enum';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: VType<T>): { };\n    visitBool                 <T extends Bool>            (vector: VType<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: VType<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: VType<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: VType<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: VType<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: VType<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: VType<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: VType<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: VType<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: VType<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: VType<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: VType<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: VType<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: VType<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: VType<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: VType<T>): { children: any[] };\n}\n\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n\n        const vectors = args.reduce(function flatten(xs: any[], x: any): any[] {\n            if (Array.isArray(x)) { return x.reduce(flatten, xs); }\n            if (!(x instanceof RecordBatch)) { return [...xs, x]; }\n            return xs.concat(x.schema.fields.map(\n                (f, i) => new Column(f, [x.getChildAt(i)!])));\n        }, []).filter((x: any): x is Column => x instanceof Column);\n\n        return new JSONVectorAssembler().visitMany(vectors);\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const buffers = { ...data.buffers, [BufferType.VALIDITY]: undefined };\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': nullCount <= 0\n                ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: VType<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: VType<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: VType<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: VType<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: VType<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: VType<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: VType<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: VType<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: VType<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: VType<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield bignumToString(values.subarray((i + 0) * stride, (i + 1) * stride));\n    }\n}\n\n/** @ignore */\nfunction bignumToString({ buffer, byteOffset, length }: Uint32Array | Int32Array) {\n\n    let digits = '', i = -1;\n    let r = new Uint32Array(2);\n    let a = new Uint16Array(buffer, byteOffset, length * 2);\n    let b = new Uint32Array((a = new Uint16Array(a).reverse()).buffer);\n    let n = a.length - 1;\n\n    do {\n        for (r[0] = a[i = 0]; i < n;) {\n            a[i++] = r[1] = r[0] / 10;\n            r[0] = ((r[0] - r[1] * 10) << 16) + a[i];\n        }\n        a[i] = r[1] = r[0] / 10;\n        r[0] = r[0] - r[1] * 10;\n        digits = `${r[0]}${digits}`;\n    } while (b[0] || b[1] || b[2] || b[3]);\n\n    return digits ? digits : `0`;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { DataType, Dictionary } from '../type';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream } from '../util/compat';\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: { autoDestroy: boolean }) {\n        super();\n        this._autoDestroy = options && (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter();\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n\n        if (!schema || (schema !== this._schema)) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(chunk?: Table<T> | RecordBatch<T> | null) {\n        let schema: Schema<T> | null;\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (!chunk || !(schema = chunk.schema)) {\n            return this.finish() && undefined;\n        } else if (schema !== this._schema) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n        (chunk instanceof Table)\n            ? this.writeAll(chunk.chunks)\n            : this._writeRecordBatch(chunk);\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const alignedSize = (flatbufferSize + 4 + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - 4;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - 4));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMessage(Message.from(schema))\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n\n    protected _writeFooter() {\n        return this._writePadding(4); // eos bytes\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(records: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(records);\n        const recordBatch = new metadata.RecordBatch(records.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(dictionaryFields: Map<number, Field<Dictionary<any, any>>[]>) {\n        for (const [id, fields] of dictionaryFields) {\n            const vector = fields[0].type.dictionaryVector;\n            if (!(vector instanceof Chunked)) {\n                this._writeDictionaryBatch(vector, id, false);\n            } else {\n                const chunks = vector.chunks;\n                for (let i = -1, n = chunks.length; ++i < n;) {\n                    this._writeDictionaryBatch(chunks[i], id, i > 0);\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>, options?: { autoDestroy: true }): RecordBatchStreamWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any, options?: { autoDestroy: true }) {\n        return new RecordBatchStreamWriter<T>(options).writeAll(input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchFileWriter<T>().writeAll(input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMagic()._writePadding(2)\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n\n    protected _writeFooter() {\n        const buffer = Footer.encode(new Footer(\n            this._schema!, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return this\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    protected _writeMessage() { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`)._writeDictionaries(schema.dictionaryFields);\n    }\n    protected _writeDictionaries(dictionaryFields: Map<number, Field<Dictionary<any, any>>[]>) {\n        this._write(`,\\n  \"dictionaries\": [\\n`);\n        super._writeDictionaries(dictionaryFields);\n        return this._write(`\\n  ]`);\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(this._schema!, dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(records: RecordBatch<T>) {\n        this._write(this._recordBatchBlocks.length === 0\n            ? `,\\n  \"batches\": [\\n    `\n            : `,\\n    `);\n        this._write(`${recordBatchToJSON(records)}`);\n        this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    public close() {\n        if (this._recordBatchBlocks.length > 0) {\n            this._write(`\\n  ]`);\n        }\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    const chunks = (input instanceof Table) ? input.chunks : input;\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(schema: Schema, dictionary: Vector, id: number, isDelta = false) {\n    const f = schema.dictionaryFields.get(id)![0];\n    const field = new Field(f.name, f.type.dictionary, f.nullable, f.metadata);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { isPromise } from './util/compat';\nimport { RecordBatch } from './recordbatch';\nimport { Vector as VType } from './interfaces';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { Vector, Chunked } from './vector/index';\nimport { DataType, RowLike, Struct } from './type';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\n\nexport interface Table<T extends { [key: string]: DataType; } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType; } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType; } = any>() { return new Table<T>(new Schema([]), []); }\n\n    public static from<T extends { [key: string]: DataType } = any>(): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source?: any) {\n\n        if (!source) { return Table.empty<T>(); }\n\n        let reader = RecordBatchReader.from<T>(source) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty<T>() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty<T>();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType; } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromVectors<T extends { [key: string]: DataType; } = any>(vectors: VType<T[keyof T]>[], names?: (keyof T)[]) {\n        return new Table(RecordBatch.from(vectors, names));\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType; } = any>(struct: Vector<Struct<T>>) {\n        const schema = new Schema<T>(struct.type.children);\n        const chunks = (struct instanceof Chunked ? struct.chunks : [struct]) as VType<Struct<T>>[];\n        return new Table(schema, chunks.map((chunk) => new RecordBatch(schema, chunk.data)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema, batches: RecordBatch<T>[]);\n    constructor(schema: Schema, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = args.reduce(function flatten(xs: any[], x: any): any[] {\n            return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x: any): x is RecordBatch<T> => x instanceof RecordBatch);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        if (!chunks[0]) { chunks[0] = new RecordBatch(schema, 0, []); }\n\n        super(chunks[0].type, chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> | null {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]> | null;\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let schema = this._schema;\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n        let columns = this._children || (this._children = []) as Column[];\n        if (column = columns[index]) { return column as Column<R>; }\n        if (field = ((schema.fields || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return writer.writeAll(this._chunks).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select(...columnNames: string[]) {\n        return new Table(this._chunks.map((batch) => batch.select(...columnNames)));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Schema, Field } from './schema';\nimport { DataType, Struct } from './type';\nimport { StructVector } from './vector/struct';\nimport { Vector as VType } from './interfaces';\nimport { Chunked } from './vector/chunked';\nimport { Clonable, Sliceable, Applicative } from './vector';\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(vectors: VType<T[keyof T]>[], names: (keyof T)[] = []) {\n        return new RecordBatch(\n            Schema.from(vectors, names),\n            vectors.reduce((len, vec) => Math.max(len, vec.length), 0),\n            vectors\n        );\n    }\n\n    protected _schema: Schema;\n\n    constructor(schema: Schema<T>, numRows: number, childData: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let schema = args[0];\n        let data: Data<Struct<T>>;\n        let children: Vector[] | undefined;\n        if (typeof args[1] === 'number') {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, numRows, childData] = args as [Schema<T>, number, Data[]];\n            data = Data.Struct(new Struct<T>(fields), 0, numRows, 0, null, childData);\n        } else {\n            [, data, children] = (args as [Schema<T>, Data<Struct<T>>, Vector[]?]);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const fields = this._schema.fields;\n        const schema = this._schema.select(...columnNames);\n        const childNames = columnNames.reduce((xs, x) => (xs[x] = true) && xs, <any> {});\n        const childData = this._data.childData.filter((_, i) => childNames[fields[i].name]);\n        const structData = Data.Struct(new Struct(schema.fields), 0, this.length, 0, null, childData);\n        return new RecordBatch<{ [P in K]: T[P] }>(schema, structData as Data<Struct<{ [P in K]: T[P] }>>);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\nexport interface VectorLoader extends Visitor {\n    visitMany <T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n    visit     <T extends DataType>(node:   Field<T> | T   ): Data<T>;\n}\n\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[]) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Null(type, 0, length, nullCount, this.readNullBitmap(type, nullCount));                                                                                }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices));                                                   }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n}\n\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[]) {\n        super(new Uint8Array(0), nodes, buffers);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { Vector } from '../vector';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        if (isDelta || !dictionaries.get(id)) {\n\n            const type = schema.dictionaries.get(id)!;\n            const vector = (isDelta ? dictionaries.get(id)!.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n\n            (schema.dictionaryFields.get(id) || []).forEach(({ type }) => type.dictionaryVector = vector);\n\n            return vector;\n        }\n        return dictionaries.get(id)!;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n        this.vector = batch.getChildAt(this.colidx)!;\n        return this.vector.get.bind(this.vector);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Vector as V } from '../interfaces';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        const schema = new Schema<{ values: T, counts: TCount }>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nexport class FilteredDataFrame<T extends { [key: string]: DataType; } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Schema, Field } from './schema';\nexport { Visitor } from './visitor';\nexport {\n    Row,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\nexport const util = {\n    ...util_int_,\n    ...util_bit_,\n    ...util_buffer_,\n    ...util_vector_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './ipc/whatwg/iterable';\nimport { recordBatchReaderThroughDOMStream } from './ipc/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './ipc/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util\n} from './Arrow';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"],"sourceRoot":""}