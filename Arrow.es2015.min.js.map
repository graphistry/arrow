{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","tslib/tslib.es6.js","flatbuffers/js/flatbuffers.mjs","io/interfaces.ts","util/compat.ts","util/buffer.ts","io/adapters.ts","vector.ts","fb/Schema.ts","fb/Message.ts","enum.ts","fb/File.ts","type.ts","schema.ts","ipc/metadata/file.ts","util/bit.ts","data.ts","util/pretty.ts","vector/row.ts","util/vector.ts","vector/chunked.ts","vector/base.ts","vector/struct.ts","recordbatch.ts","io/stream.ts","io/file.ts","text-encoding-utf-8/lib/encoding.lib.mjs","visitor.ts","util/int.ts","visitor/vectorloader.ts","visitor/typeassembler.ts","ipc/metadata/json.ts","ipc/metadata/message.ts","ipc/message.ts","ipc/reader.ts","visitor/vectorassembler.ts","ipc/writer.ts","column.ts","vector/binary.ts","vector/bool.ts","vector/date.ts","vector/decimal.ts","vector/dictionary.ts","vector/fixedsizebinary.ts","vector/fixedsizelist.ts","vector/float.ts","vector/interval.ts","vector/int.ts","vector/list.ts","vector/map.ts","vector/null.ts","vector/timestamp.ts","vector/time.ts","vector/union.ts","visitor/set.ts","vector/utf8.ts","visitor/get.ts","visitor/indexof.ts","visitor/iterator.ts","visitor/toarray.ts","visitor/bytewidth.ts","visitor/vectorctor.ts","vector/index.ts","table.ts","compute/predicate.ts","compute/dataframe.ts","Arrow.ts","Arrow.dom.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__values","iterator","length","__await","v","this","__asyncGenerator","asyncIterator","TypeError","g","q","verb","a","b","push","resume","fulfill","settle","f","shift","__asyncDelegator","__asyncValues","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","Int32Array","float32","Float32Array","buffer","float64","Float64Array","isLittleEndian","Uint16Array","Uint8Array","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","size","additional_bytes","align_size","capacity","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","Error","notNested","new_buf_size","nbb","setPosition","set","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","vt2","readInt16","j","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","ITERATOR_DONE","freeze","ArrowJSON","[object Object]","_json","schema","batches","dictionaries","ReadableInterop","_getReadableDOMStream","tee","writable","options","_getReadableNodeStream","pipe","pipeTo","duplex","pipeThrough","_readableDOMStream","toReadableDOMStream","_readableNodeStream","toReadableNodeStream","interfaces_AsyncQueue","super","values","resolvers","_closedPromise","_closedPromiseResolve","closed","reason","return","_ensureOpen","_error","error","undefined","adapters","_","abort","close","_args","constructor","hasFuncs","x","fn","hasProps","map","ks","isObject","every","k","isPromise","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isWritableDOMStream","isWritableNodeStream","isReadableDOMStream","isReadableNodeStream","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","memcpy","target","source","targetByteOffset","sourceByteLength","byteLength","targetByteLength","dst","byteOffset","src","Math","min","joinUint8Arrays","chunks","sliced","index","chunksLen","y","xOffset","xLen","yOffset","yLen","splice","collapseContiguousByteRanges","reduce","slice","toArrayBufferView","ArrayBufferViewCtor","input","chunk","decodeUtf8","isView","BYTES_PER_ELEMENT","from","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","toUint8Array","toUint16Array","toUint32Array","Uint32Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","pump","toArrayBufferViewIterator","ArrayCtor","wrap","buffers","it","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","arguments","emit","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","fromIterable","adapters_pump","cmd","threw","bufferLength","byteRange","isNaN","throw","fromAsyncIterable","fromReadableDOMStream","adapters_AdaptiveByteReader","releaseLock","fromReadableNodeStream","stream","events","event","err","onEvent","race","isFinite","evt","destroyed","cb","cleanup","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","read","readInto","handler","Vector","data","nullCount","isValid","Schema_org","arrow","apache","org","Message_org","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","VectorType","Endianness","Null","__init","builder","Struct_","List","FixedSizeList","listSize","Map","keysSorted","Union","Sparse","typeIdsOffset","numElems","Int","bitWidth","isSigned","FloatingPoint","HALF","precision","Utf8","Binary","FixedSizeBinary","byteWidth","Bool","Decimal","scale","Date","MILLISECOND","unit","Time","Timestamp","SECOND","optionalEncoding","timezoneOffset","Interval","YEAR_MONTH","VectorLayout","OFFSET","type","KeyValue","keyOffset","valueOffset","DictionaryEncoding","id","indexTypeOffset","isOrdered","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","layoutOffset","customMetadataOffset","Buffer","Schema","Little","endianness","fieldsOffset","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","DictionaryBatch","dataOffset","isDelta","Message","V1","version","headerType","headerOffset","bodyLength","File_org","ArrowType","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","metaDataLength","type_DataType","_TType","_children","TType","Float","Struct","Dictionary","children","proto","ArrayType","Array","type_Null","type_Int_","_isSigned","_bitWidth","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","type_Float","_precision","SINGLE","DOUBLE","type_Float16","type_Float32","type_Float64","type_Binary","type_Utf8","type_Bool","type_Decimal","_scale","type_Date_","_unit","type_DateDay","DAY","type_DateMillisecond","type_Time_","type_TimeSecond","type_TimeMillisecond","type_TimeMicrosecond","MICROSECOND","type_TimeNanosecond","NANOSECOND","type_Timestamp_","_timezone","timezone","type_TimestampSecond","type_TimestampMillisecond","type_TimestampMicrosecond","type_TimestampNanosecond","type_Interval_","type_IntervalDayTime","DAY_TIME","type_IntervalYearMonth","type_List","valueType","valueField","type_Struct","join","type_Union_","_mode","_typeIds","_typeIdToChildIndex","typeIdToChildIndex","typeId","idx","typeIds","type_DenseUnion","Dense","type_SparseUnion","type_FixedSizeBinary","_byteWidth","type_FixedSizeList","_listSize","type_Map_","_keysSorted","getId","atomicDictionaryId","type_Dictionary","dictionary","indices","dictionaryVector","_indices","_dictionary","_isOrdered","_id","fields","metadata","dictionaryFields","_fields","_metadata","generateDictionaryMap","isDictionary","has","_dictionaries","_dictionaryFields","vectors","names","schema_Field","columnNames","xs","filter","_name","_type","_nullable","file_ByteBuffer","_Block","_Footer","file_Footer_","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","buf","footer","getRootAsFooter","decode","OffHeapFooter","encode","startRecordBatchesVector","numRecordBatches","reverse","forEach","rb","FileBlock","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","finishFooterBuffer","endFooter","block","getRecordBatch","getDictionaryBatch","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","iterateBits","begin","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","arr","cnt","pos","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","kUnknownNullCount","data_Data","childData","_buffers","_offset","floor","max","_length","assign","_nullCount","_childData","TArray","TValue","DATA","TYPE","nullBitmap","VALIDITY","sliceBuffers","sliceChildren","clone","sliceData","sliceOffsets","child","valueOffsetsOrChildData","valueToString","JSON","stringify","columnDescriptor","configurable","lengthDescriptor","rowIndexDescriptor","rowParentDescriptor","row","parent","rowIndex","row_Row","fieldsAreEnumerable","columnIndex","_bindGetter","schemaOrFields","isArray","keys","colIndex","getChildAt","bound","isStruct","getOwnPropertyNames","props","prop","tmp","clampRange","end","chunked_ChunkedVector","offsets","calculateOffsets","_chunks","_chunkOffsets","_numChildren","flatten","numChildren","stride","others","concat","columns","vector","vec","mid","search","isValidInternal","getInternal","element","self","indexOfInternal","toArray","arraySet","typedSet","sliceInternal","chunkIndex","fromIndex","start","found","indexOf","column","slices","chunkOffsets","chunkLength","chunkOffset","base_BaseVector","_stride","bindDataAccessors","VectorName","new","struct_StructVector","rowProxy","recordbatch_RecordBatch","args","_schema","numRows","impl","numCols","select","childNames","structData","stream_AsyncByteQueue","write","sync","_c","_b","stream_ByteStream","stream_ByteStreamSource","peek","stream_AsyncByteStream","stream_AsyncByteStreamSource","body","cancel","file_RandomAccessFile","readAt","getInt32","nBytes","Infinity","file_AsyncRandomAccessFile","file","stat","bytesRead","inRange","ToDictionary","end_of_stream","Stream","tokens","endOfStream","prepend","token","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","TextDecoder","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","bite","code_point","UTF8Encoder","count","temp","input_stream","code_points","cp","codePointsToString","opt_string","string","u","stringToCodePoints","Visitor","nodes","node","visit","getVisitFn","throwIfNotFound","visitor","dtype","inferDType","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","_node","carryBit16","intAsHex","toString","kInt32DecimalDigits","kPowersOfTen","BaseInt64","L","R","product","lessThan","int_Uint64","_times","_plus","val","out_buffer","fromString","num","str","out","posn","group","parseInt","substr","multiple","times","plus","left","right","int_Int64","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","utf8Encoder","vectorloader_VectorLoader","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","visitMany","readTypeIds","nextBufferRange","vectorloader_JSONVectorLoader","sources","isTimestamp","convertArray","isInt","isTime","isDate","isDecimal","isBinary","isFixedSizeBinary","joined","binaryDataFromJSON","isBool","isUtf8","typeassembler_Long","typeassembler_Null","typeassembler_Binary","typeassembler_Bool","typeassembler_Utf8","typeassembler_Decimal","typeassembler_Date","typeassembler_List","typeassembler_Struct","typeassembler_FixedSizeBinary","typeassembler_FixedSizeList","typeassembler_Map_","instance","startNull","endNull","startInt","addBitWidth","addIsSigned","endInt","startFloatingPoint","addPrecision","endFloatingPoint","startBinary","endBinary","startBool","endBool","startUtf8","endUtf8","startDecimal","addScale","endDecimal","startDate","addUnit","endDate","startTime","endTime","startTimestamp","addTimezone","endTimestamp","startInterval","endInterval","startList","endList","startStruct_","endStruct_","startTypeIdsVector","createTypeIdsVector","startUnion","addMode","addTypeIds","endUnion","indexType","startDictionaryEncoding","addId","addIsOrdered","addIndexType","endDictionaryEncoding","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startFixedSizeList","addListSize","endFixedSizeList","startMap","addKeysSorted","endMap","recordBatchFromJSON","message_RecordBatch","fieldNodesFromJSON","fieldNodes","nullCountFromJSON","buffersFromJSON","BufferRegion","fieldChildrenFromJSON","_field","Boolean","fromJSON","validity","customMetadataFromJSON","entries","indexTypeFromJSON","typeFromJSON","message_Long","message_Builder","message_ByteBuffer","message_Type","_Field","_Schema","_Buffer","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","message_Message","header","_version","_headerType","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","startMessage","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","_nodes","_isDelta","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","startKeyValue","addKey","addValue","endKeyValue","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","addCustomMetadata","endField","dictType","dictMeta","dictField","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","startSchema","addFields","addEndianness","platformIsLittleEndian","Big","endSchema","fieldsLength","decodeSchemaFields","schemaFieldsFromJSON","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","batch","nodesLength","decodeFieldNodes","buffersLength","v3Compat","decodeBuffers","dictionaryBatch","startDictionaryBatch","addIsDelta","addData","endDictionaryBatch","createFieldNode","createBuffer","setInt16","ipc_message_ByteBuffer","invalidMessageType","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","message_MessageReader","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","message_AsyncMessageReader","message_JSONMessageReader","_body","_batchIndex","_dictionaryIndex","numBatches","flattenDataSources","MAGIC","MAGIC_STR","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","reader_RecordBatchReader","autoClose","reset","objectMode","reader_RecordBatchFileReader","reader_RecordBatchStreamReader","reader_AsyncRecordBatchFileReader","reader_AsyncRecordBatchStreamReader","fromFileHandle","fromAsyncByteStream","fromByteStream","reader_AsyncRecordBatchFileReaderImpl","reader_RecordBatchFileReaderImpl","open","readRecordBatch","reader_RecordBatchJSONReaderImpl","reader_RecordBatchStreamReaderImpl","reader_AsyncRecordBatchStreamReaderImpl","rest","reader_RecordBatchReaderImplBase","dictionaryIndex","recordBatchIndex","_loadVectors","types","readSchema","readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","readFooter","readDictionaryBatch","seek","_super","vectorassembler_VectorAssembler","_byteLength","_bufferRegions","RangeError","addBuffer","_nullV","bufferRegions","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","fill","shiftedOffsets","unshiftedOffsets","childIndex","childLength","kAlignmentBytes","writer_RecordBatchWriter","started","sink","dictionaryBlocks","recordBatchBlocks","_writeSchema","_writeRecordBatch","flatbufferSize","nPaddingBytes","_write","of","_writePadding","_writeMessage","_writeDictionaries","_writeMagic","records","assemble","_writeBodyBuffers","padding","_writeDictionaryBatch","writer_RecordBatchFileWriter","writer","batches_1_1","batches_1","_writeFooter","writer_RecordBatchStreamWriter","batches_2_1","batches_2","column_Column","binary_BinaryVector","bool_BoolVector","date_DateVector","valueOf","DateDayVector","DateMillisecondVector","decimal_DecimalVector","dictionary_DictionaryVector","fixedsizebinary_FixedSizeBinaryVector","fixedsizelist_FixedSizeListVector","float_FloatVector","Float16Vector","Float32Vector","Float64Vector","interval_IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","int_IntVector","is64","Int8Vector","Int16Vector","Int32Vector","Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","list_ListVector","map_MapVector","null_NullVector","timestamp_TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","time_TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","union_UnionVector","DenseUnionVector","SparseUnionVector","encodeUtf8","encoder","set_SetVisitor","setEpochMsToMillisecondsLong","epochMs","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","setTimestampSecond","setEpochMsToSeconds","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setNested","kid","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","set_instance","utf8_Utf8Vector","get_decodeUtf8","decoder","get_GetVisitor","epochMillisecondsLongToMs","epochMillisecondsToDate","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getNumericX2","getTimestampSecond","epochSecondsToMs","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getNested","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","get_instance","indexof_IndexOfVisitor","indexOfNull","valueIndexOf","searchElement","dateIndexOf","valueOfDate","arrayIndexOf","searching","listIndexOf","getSearchElement","indexOfNested","indexof_instance","iterator_IteratorVisitor","vectorIterator","getFn","nullByte","nullBit","nullableIterator","iterator_instance","toarray_ToArrayVisitor","arrayOfVector","toarray_instance","variableWidthColumnErrorMessage","bytewidth_instance","____","visitFields","vectorctor_instance","partial0","partial2","getByteWidth","T","VectorCtor","partial1","table_Table","_columns","_batches","_batchesUnion","batchesUnion","_numCols","empty","isSync","opening","reader_1_1","reader_1","struct","getColumnAt","getColumnIndex","findIndex","writeAll","Value","Literal","predicate_Equals","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","some","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","getKey","cols","func","CustomPredicate","bind_","predicate_lit","predicate_col","and","or","custom","scan","dataframe_Dataframe","predicate","countBy","dataframe_FilteredDataFrame","batchIndex","count_by","countByteLength","ceil","log","counts","dataframe_CountByResult","util","int_namespaceObject","bit_namespaceObject","buffer_namespaceObject","__webpack_exports__","predicate_namespaceObject","ReadableStream","controller","desiredSize","enqueue","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","through","readable","WritableStream","writableStrategy","readableStrategy"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\nexport type FileHandle = import('fs').promises.FileHandle;\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number };\n\n/**\n * @ignore\n */\nexport class ArrowJSON {\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\nObject.defineProperty(ArrowJSON.prototype, 'schema', { get() { return this._json['schema']; }});\nObject.defineProperty(ArrowJSON.prototype, 'batches', { get() { return (this._json['batches'] || []) as any[]; }});\nObject.defineProperty(ArrowJSON.prototype, 'dictionaries', { get() { return (this._json['dictionaries'] || []) as any[]; }});\n\n/**\n * @ignore\n */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/**\n * @ignore\n */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/**\n * @ignore\n */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toReadableDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toReadableNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\nexport abstract class ReadableInterop<T> {\n\n    public abstract toReadableDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toReadableNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getReadableDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getReadableNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getReadableDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getReadableDOMStream().pipeThrough(duplex, options);\n    }\n\n    private _readableDOMStream?: ReadableStream<T>;\n    private _getReadableDOMStream() {\n        return this._readableDOMStream || (this._readableDOMStream = this.toReadableDOMStream());\n    }\n\n    private _readableNodeStream?: import('stream').Readable;\n    private _getReadableNodeStream() {\n        return this._readableNodeStream || (this._readableNodeStream = this.toReadableNodeStream());\n    }\n}\n\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/**\n * @ignore\n */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this.values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toReadableDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toReadableDOMStream(this, options);\n    }\n    public toReadableNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toReadableNodeStream(this, options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; };\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; };\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this.values.length > 0) {\n            return Promise.resolve({ done: false, value: this.values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this.constructor.name} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\ntype FSReadStream = import('fs').ReadStream;\ntype FileHandle = import('fs').promises.FileHandle;\n\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\nconst isObject = (x: any) => x != null && Object(x) === x;\nconst hasFuncs = (x: any, ...fn: PropertyKey[]) => hasProps(x, ...fn.map((f) => [f, 'function'] as [PropertyKey, string]));\nconst hasProps = (x: any, ...ks: [PropertyKey, string?][]) => isObject(x) && ks.every(([k, t]) => t ? (x[k] != null && typeof x[k] === t) : (k in x));\n\n/** @ignore */ export const isPromise            = <T = any>(x: any): x is PromiseLike<T>        => hasFuncs(x, 'then');\n/** @ignore */ export const isObservable         = <T = any>(x: any): x is Observable<T>         => hasFuncs(x, 'subscribe');\n/** @ignore */ export const isIterable           = <T = any>(x: any): x is Iterable<T>           => hasFuncs(x, Symbol.iterator);\n/** @ignore */ export const isAsyncIterable      = <T = any>(x: any): x is AsyncIterable<T>      => hasFuncs(x, Symbol.asyncIterator);\n/** @ignore */ export const isArrowJSON          =          (x: any): x is ArrowJSONLike         => hasProps(x, ['schema', 'object']);\n/** @ignore */ export const isArrayLike          = <T = any>(x: any): x is ArrayLike<T>          => hasProps(x, ['length', 'number']);\n/** @ignore */ export const isIteratorResult     = <T = any>(x: any): x is IteratorResult<T>     => hasProps(x, ['done'], ['value']);\n/** @ignore */ export const isUnderlyingSink     = <T = any>(x: any): x is UnderlyingSink<T>     => hasFuncs(x, 'abort', 'close', 'start', 'write');\n/** @ignore */ export const isFileHandle         =          (x: any): x is FileHandle            => hasFuncs(x, 'stat') && hasProps(x, ['fd', 'number']);\n/** @ignore */ export const isFSReadStream       =          (x: any): x is FSReadStream          => isReadableNodeStream(x) && hasProps(x, ['bytesRead', 'number']);\n/** @ignore */ export const isFetchResponse      =          (x: any): x is Response              => hasProps(x, ['body'], ['bodyUsed', 'boolean'], ['ok', 'boolean']);\n/** @ignore */ export const isWritableDOMStream  = <T = any>(x: any): x is WritableStream<T>     => !(x instanceof ReadableInterop) && hasFuncs(x, 'abort', 'getWriter');\n/** @ignore */ export const isWritableNodeStream =          (x: any): x is NodeJS.WritableStream => !(x instanceof ReadableInterop) && hasFuncs(x, 'write', 'cork', 'uncork', 'end');\n/** @ignore */ export const isReadableDOMStream  = <T = any>(x: any): x is ReadableStream<T>     => !(x instanceof ReadableInterop) && hasFuncs(x, 'tee', 'cancel', 'pipeTo', 'getReader');\n/** @ignore */ export const isReadableNodeStream =          (x: any): x is NodeJS.ReadableStream => !(x instanceof ReadableInterop) && hasFuncs(x, 'read', 'pipe', 'unpipe', 'pause', 'resume', 'wrap');\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { ArrayBufferViewConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult } from './compat';\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    for (let x, y, i = 0; ++i < chunks.length;) {\n        x = chunks[i - 1];\n        y = chunks[i - 0];\n        // continue x and y don't share the same underlying ArrayBuffer\n        if (!x || !y || x.buffer !== y.buffer) { continue; }\n        const { byteOffset: xOffset, byteLength: xLen } = x;\n        const { byteOffset: yOffset, byteLength: yLen } = y;\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) { continue; }\n        chunks.splice(--i, 2, new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen));\n    }\n    return chunks;\n}\n\n/**\n * @ignore\n */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/**\n * @ignore\n */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[]] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    chunks = collapseContiguousByteRanges(chunks);\n    let offset = 0, index = -1, chunksLen = chunks.length;\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let length = typeof size === 'number' ? size : chunks.reduce((x, y) => x + y.length, 0);\n    while (++index < chunksLen) {\n        source = chunks[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                chunks[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        (buffer || (buffer = new Uint8Array(length))).set(sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), chunks.slice(index)];\n}\n\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/**\n * @ignore\n */\nexport function toArrayBufferView<T extends ArrayBufferView>(ArrayBufferViewCtor: ArrayBufferViewConstructor<T>, input: ArrayBufferViewInput): T {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = decodeUtf8(value); }\n    if (value instanceof ArrayBufferViewCtor) { return value; }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends ArrayBufferView>(ArrayCtor: ArrayBufferViewConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends ArrayBufferView>(ArrayCtor: ArrayBufferViewConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/**\n * @ignore\n */\nfunction decodeUtf8(chunk: string) {\n    const bytes = new Uint8Array(chunk.length);\n    for (let i = -1, n = chunk.length; ++i < n;) {\n        bytes[i] = chunk.charCodeAt(i);\n    }\n    return bytes;\n}\n\n/**\n * @ignore\n */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/**\n * @ignore\n */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromReadableDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromReadableDOMStream<T>(source));\n    },\n    fromReadableNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromReadableNodeStream(stream));\n    },\n    // @ts-ignore\n    toReadableDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toReadableDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toReadableNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toReadableNodeStream\" not available in this environment`);\n    },\n};\n\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\nasync function* fromReadableDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        source['locked'] && it.releaseLock();\n        (threw === false) && (await it['cancel']());\n    }\n}\n\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader } = this;\n        this.reader = null;\n        this.releaseLock();\n        if (reader) {\n            await reader['cancel'](reason);\n        }\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\ntype EventName = 'end' | 'error' | 'readable';\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\nasync function* fromReadableNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            const [evt, fn, closed] = onEvent(stream, 'close');\n            const destroyed = new Promise((resolve, reject) => {\n                const destroy = (stream as any)['destroy'] || ((e: T, cb: any) => cb(e));\n                destroy.call(stream, err, (e: T) => e != null ? reject(e) : resolve());\n            });\n            try {\n                await Promise.race([closed, destroyed]);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                stream['off'](evt, fn);\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\n\nexport abstract class Vector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    // @ts-ignore\n    protected bindDataAccessors(data: Data<T>) {\n        if (this.nullCount > 0) {\n            this['get'] && (this['get'] = wrapNullable1(this['get']));\n        }\n    }\n\n    public abstract readonly type: T;\n    public abstract readonly data: Data<T>;\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly TType: T['TType'];\n    public abstract readonly TArray: T['TArray'];\n    public abstract readonly TValue: T['TValue'];\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n\n    public abstract toArray(): T['TArray'];\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    public abstract slice(begin?: number, end?: number): Vector<T>;\n    public abstract concat(this: Vector<T>, ...others: Vector<T>[]): Vector<T>;\n\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nfunction wrapNullable1<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\nexport enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n\n    // These enum values are here so that TypeScript can narrow the type signatures further\n    // beyond the base Arrow types. The base Arrow types include metadata like bitWidths that\n    // impact the type signatures of the values we return. For example, the Int8Vector reads\n    // 1-byte numbers from an Int8Array, an Int32Vector reads a 4-byte number from an Int32Array,\n    // and an Int64Vector reads a pair of 4-byte lo, hi int32s, and returns them as a zero-copy\n    // slice from an underlying Int32Array. Library consumers benefit by doing this type narrowing,\n    // since we can ensure the types across all public methods are propagated and never bail to `any`.\n    // These values are _never_ actually used at runtime, and they will _never_ be written into the\n    // flatbuffers metadata of serialized Arrow IPC payloads.\n    Dictionary            = -1, // Dictionary aka Category type\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { Vector as VType } from './interfaces';\nimport { ArrayBufferViewConstructor } from './interfaces';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type, ArrowType,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\nexport type TimeBitWidth = 32 | 64;\nexport type IntBitWidth = 8 | 16 | 32 | 64;\nexport type IsSigned = { 'true': true; 'false': false };\n\nexport type RowLike<T extends { [key: string]: DataType; }> =\n      { readonly length: number }\n    & ( Iterable<T[keyof T]['TValue']> )\n    & { [P in keyof T]: T[P]['TValue'] }\n    & { get<K extends keyof T>(key: K): T[K]['TValue']; }\n    ;\n\nexport interface DataType<TType extends Type = Type> {\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n}\n\nexport class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.TType === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_             { return x && x.TType === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.TType === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.TType === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.TType === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.TType === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.TType === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.TType === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_            { return x && x.TType === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_       { return x && x.TType === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_        { return x && x.TType === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.TType === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.TType === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_           { return x && x.TType === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.TType === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.TType === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.TType === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.TType === Type.Dictionary;      }\n\n    public get TType() { return this._TType; }\n    public get children() { return this._children; }\n\n    constructor(protected _TType: TType = <any> Type.NONE,\n                protected _children?: Field<TChildren[keyof TChildren]>[]\n                ) {}\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    constructor() {\n        super(Type.Null);\n    }\n    public toString() { return `Null`; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number;            };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number;            };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number;            };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: Int32Array;        };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number;            };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number;            };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number;            };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: Uint32Array;       };\n};\n\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(protected _isSigned: IType[T]['isSigned'],\n                protected _bitWidth: IType[T]['bitWidth']) {\n        super(Type.Int as T);\n    }\n    public get isSigned() { return this._isSigned; }\n    public get bitWidth() { return this._bitWidth; }\n    public get ArrayType(): ArrayBufferViewConstructor<IType[T]['TArray']> {\n        switch (this._bitWidth) {\n            case  8: return (this._isSigned ?  Int8Array :  Uint8Array) as any;\n            case 16: return (this._isSigned ? Int16Array : Uint16Array) as any;\n            case 32: return (this._isSigned ? Int32Array : Uint32Array) as any;\n            case 64: return (this._isSigned ? Int32Array : Uint32Array) as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this._isSigned ? `I` : `Ui`}nt${this._bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float32Array;  TValue: number; };\n};\n\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(protected _precision: Precision) {\n        super(Type.Float as T);\n    }\n    public get precision() { return this._precision; }\n    // @ts-ignore\n    public get ArrayType(): ArrayBufferViewConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array as any;\n            case Precision.SINGLE: return Float32Array as any;\n            case Precision.DOUBLE: return Float64Array as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super(Type.Binary);\n    }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: typeof Uint8Array; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super(Type.Utf8);\n    }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: typeof Uint8Array; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super(Type.Bool);\n    }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: typeof Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(protected _scale: number,\n                protected _precision: number) {\n        super(Type.Decimal);\n    }\n    public get scale() { return this._scale; }\n    public get precision() { return this._precision; }\n    public toString() { return `Decimal[${this._precision}e${this._scale > 0 ? `+` : ``}${this._scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/* tslint:disable:class-name */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: typeof Int32Array; }\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(protected _unit: DateUnit) {\n        super(Type.Date as T);\n    }\n    public get unit() { return this._unit; }\n    public toString() { return `Date${(this._unit + 1) * 32}<${DateUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Uint32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;              };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;              };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Uint32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Uint32Array;         };\n};\n\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Uint32Array; TValue: TimesType[T]['TValue']; ArrayType: typeof Uint32Array; }\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(protected _unit: TimesType[T]['unit'],\n                protected _bitWidth: TimeBitWidth) {\n        super(Type.Time as T);\n    }\n    public get unit() { return this._unit; }\n    public get bitWidth() { return this._bitWidth; }\n    public toString() { return `Time${this._bitWidth}<${TimeUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor(bitWidth: TimeBitWidth) { super(TimeUnit.SECOND, bitWidth); } }\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor(bitWidth: TimeBitWidth) { super(TimeUnit.MILLISECOND, bitWidth); } }\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor(bitWidth: TimeBitWidth) { super(TimeUnit.MICROSECOND, bitWidth); } }\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor(bitWidth: TimeBitWidth) { super(TimeUnit.NANOSECOND, bitWidth); } }\n\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: typeof Int32Array; }\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(protected _unit: TimeUnit, protected _timezone?: string | null) {\n        super(Type.Timestamp as T);\n    }\n    public get unit() { return this._unit; }\n    public get timezone() { return this._timezone; }\n    public toString() { return `Timestamp<${TimeUnit[this._unit]}${this._timezone ? `, ${this._timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: typeof Int32Array; }\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(protected _unit: IntervalUnit) {\n        super(Type.Interval as T);\n    }\n    public get unit() { return this._unit; }\n    public toString() { return `Interval<${IntervalUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\nexport interface List<T extends DataType = any> extends DataType<Type.List>  { TArray: IterableArrayLike<T>; TValue: VType<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(protected _children: Field<T>[]) {\n        super(Type.List, _children);\n    }\n    public toString() { return `List<${this.valueType}>`; }\n    public get children() { return this._children; }\n    public get valueType(): T { return this._children[0].type as T; }\n    public get valueField(): Field<T> { return this._children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct<T extends { [key: string]: DataType; } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\nexport class Struct<T extends { [key: string]: DataType; } = any> extends DataType<Type.Struct, T> {\n    constructor(protected _children: Field<T[keyof T]>[]) {\n        super(Type.Struct, _children);\n    }\n    public get children() { return this._children; }\n    public toString() { return `Struct<${this._children.map((f) => f.type).join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any[]; }\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    protected _typeIdToChildIndex: Record<Type, number>;\n    constructor(protected _mode: UnionMode,\n                protected _typeIds: ArrowType[],\n                protected _children: Field<any>[]) {\n        super(Type.Union as T, _children);\n        this._typeIdToChildIndex = (_typeIds || []).reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as Record<Type, number>);\n    }\n    public get mode() { return this._mode; }\n    public get typeIds() { return this._typeIds; }\n    public get children() { return this._children; }\n    public get typeIdToChildIndex() { return this._typeIdToChildIndex; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this._children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: typeof Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(protected _byteWidth: number) {\n        super(Type.FixedSizeBinary);\n    }\n    public get byteWidth() { return this._byteWidth; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: VType<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    constructor(protected _listSize: number,\n                protected _children: Field<T>[]) {\n        super(Type.FixedSizeList, _children);\n    }\n    public get listSize() { return this._listSize; }\n    public get children() { return this._children; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this._listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Map_<T extends { [key: string]: DataType; } = any> extends DataType<Type.Map> { TArray: Uint8Array; TValue: RowLike<T>; dataTypes: T; }\nexport class Map_<T extends { [key: string]: DataType; } = any> extends DataType<Type.Map, T> {\n    constructor(protected _children: Field<T[keyof T]>[],\n                protected _keysSorted: boolean = false) {\n        super(Type.Map, _children);\n    }\n    public get children() { return this._children; }\n    public get keysSorted() { return this._keysSorted; }\n    public toString() { return `Map<${this.children.join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    protected _id: number;\n    protected _indices: TKey;\n    protected _dictionary: T;\n    protected _isOrdered: boolean;\n    // @ts-ignore;\n    public dictionaryVector: Vector<T>;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null, dictionaryVector?: Vector<T>) {\n        super(Type.Dictionary);\n        this._indices = indices;\n        this._dictionary = dictionary;\n        this._isOrdered = isOrdered || false;\n        this.dictionaryVector = dictionaryVector!;\n        this._id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get id() { return this._id; }\n    public get indices() { return this._indices; }\n    public get dictionary() { return this._dictionary; }\n    public get isOrdered() { return this._isOrdered; }\n    public set children(_: T['children']) {}\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType, Dictionary } from './type';\nimport { Vector as VType } from './interfaces';\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(vectors: VType<T[keyof T]>[], names: (keyof T)[] = []) {\n        return new Schema<T>(vectors.map((v, i) => new Field('' + (names[i] || i), v.type)));\n    }\n\n    protected _fields: Field[];\n    protected _metadata: Map<string, string>;\n    protected _dictionaries: Map<number, DataType>;\n    protected _dictionaryFields: Map<number, Field<Dictionary>[]>;\n    public get fields(): Field[] { return this._fields; }\n    public get metadata(): Map<string, string> { return this._metadata; }\n    public get dictionaries(): Map<number, DataType> { return this._dictionaries; }\n    public get dictionaryFields(): Map<number, Field<Dictionary>[]> { return this._dictionaryFields; }\n\n    constructor(fields: Field[],\n                metadata?: Map<string, string>,\n                dictionaries?: Map<number, DataType>,\n                dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n        this._fields = fields;\n        this._metadata = metadata || Schema.prototype._metadata;\n        if (!dictionaries || !dictionaryFields) {\n            ({ dictionaries, dictionaryFields } = generateDictionaryMap(\n                fields, dictionaries || new Map(), dictionaryFields || new Map()\n            ));\n        }\n        this._dictionaries = dictionaries;\n        this._dictionaryFields = dictionaryFields;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public static [Symbol.toStringTag] = ((prototype: Schema) => {\n        (prototype as any)._metadata = Object.freeze(new Map());\n        return 'Schema';\n    })(Schema.prototype);\n}\n\nexport class Field<T extends DataType = DataType> {\n    protected _type: T;\n    protected _name: string;\n    protected _nullable: true | false;\n    protected _metadata?: Map<string, string> | null;\n    constructor(name: string, type: T, nullable: true | false = false, metadata?: Map<string, string> | null) {\n        this._name = name;\n        this._type = type;\n        this._nullable = nullable;\n        this._metadata = metadata;\n    }\n    public get type() { return this._type; }\n    public get name() { return this._name; }\n    public get typeId() { return this.type.TType; }\n    public get nullable() { return this._nullable; }\n    public get metadata() { return this._metadata; }\n    public get [Symbol.toStringTag](): string { return 'Field'; }\n    public get indices() {\n        return DataType.isDictionary(this.type) ? this.type.indices : this.type;\n    }\n    public toString() { return `${this.name}: ${this.type}`; }\n}\n\nfunction generateDictionaryMap(fields: Field[], dictionaries: Map<number, DataType>, dictionaryFields: Map<number, Field<Dictionary>[]>) {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaryFields.get(type.id)) {\n                dictionaryFields.set(type.id, []);\n            }\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n                dictionaryFields.get(type.id)!.push(field as any);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children) {\n            generateDictionaryMap(type.children, dictionaries, dictionaryFields);\n        }\n    }\n\n    return { dictionaries, dictionaryFields };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n    \n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n    \n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n    \n        const dictionaryBatchesOffset = b.endVector();\n    \n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n    \n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @ignore\n */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/**\n * @ignore\n */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/**\n * @ignore\n */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/**\n * @ignore\n */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        bytes.set((offset % 8 === 0)\n            // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n            ? bitmap.subarray(offset >> 3)\n            // Otherwise iterate each bit from the offset and return a new one\n            : packBools(iterateBits(bitmap, offset, length, null, getBool)));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/**\n * @ignore\n */\nexport function packBools(values: Iterable<any>) {\n    let n = 0, i = 0;\n    let xs: number[] = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do { xs[i] = 0; } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n\n/**\n * @ignore\n */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/**\n * @ignore\n */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/**\n * @ignore\n */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/**\n * @ignore\n */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { popcnt_bit_range } from './util/bit';\nimport { toArrayBufferView } from './util/buffer';\nimport { Type, VectorType as BufferType, UnionMode } from './enum';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Array::null_count is called the\n// first time, the null count will be computed. See ARROW-33\nexport type kUnknownNullCount = -1;\nexport const kUnknownNullCount = -1;\n\nexport type NullBuffer = Uint8Array | null | undefined;\nexport type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number>;\nexport type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number>;\n\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]?: Int32Array;\n        [BufferType.DATA]?: T['TArray'];\n    [BufferType.VALIDITY]?: Uint8Array;\n        [BufferType.TYPE]?: T['TArray'];\n}\n\nexport class Data<T extends DataType = DataType> {\n\n    protected _type: T;\n    protected _length: number;\n    protected _offset: number;\n\n    // @ts-ignore\n    protected _childData: Data[];\n    protected _buffers = [] as Buffers<T>;\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get offset() { return this._offset; }\n    public get childData() { return this._childData; }\n\n    public get TType() { return this.type.TType; }\n    public get TArray() { return this.type.TArray; }\n    public get TValue() { return this.type.TValue; }\n    public get ArrayType() { return this.type.ArrayType; }\n\n    public get values() { return this._buffers[BufferType.DATA]!; }\n    public get typeIds() { return this._buffers[BufferType.TYPE]!; }\n    public get nullBitmap() { return this._buffers[BufferType.VALIDITY]!; }\n    public get valueOffsets() { return this._buffers[BufferType.OFFSET]!; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount === kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Buffers<T>, childData?: (Data | Vector)[]) {\n        this._type = type;\n        this._offset = Math.floor(Math.max(offset || 0, 0));\n        this._length = Math.floor(Math.max(length || 0, 0));\n        this._buffers = Object.assign([], buffers) as Buffers<T>;\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this._childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this._buffers, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const buffers = this.sliceBuffers(offset, length);\n        const childData = this.sliceChildren(offset, length);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers, childData);\n    }\n\n    protected sliceBuffers(offset: number, length: number): Buffers<T> {\n        let arr: any, buffers = Object.assign([], this._buffers) as Buffers<T>;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = this.sliceData(arr, offset, length));\n        return buffers;\n    }\n\n    protected sliceChildren(offset: number, length: number): Data[] {\n        // Only slice children if this isn't variable width data\n        if (!this.valueOffsets) {\n            return this.childData.map((child) => child.slice(offset, length));\n        }\n        return this.childData;\n    }\n\n    protected sliceData(data: T['TArray'] & ArrayBufferView, offset: number, length: number) {\n        // Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        return this.type.TType === Type.Bool ? data : data.subarray(offset, offset + length);\n    }\n\n    protected sliceOffsets(valueOffsets: Int32Array, offset: number, length: number) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        });\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView<T['TArray']>(type.indices.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, childData: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets)\n        }, childData);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, childData: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, childData: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, childData: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: Uint8Array, valueOffsetsOrChildData: ValueOffsetsBuffer | (Data | Vector)[], childData?: (Data | Vector)[]) {\n        const buffers = {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.TYPE]: toArrayBufferView(type.ArrayType, typeIds)\n        } as any;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildData as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toArrayBufferView(Int32Array, <ValueOffsetsBuffer> valueOffsetsOrChildData);\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport function valueToString(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { MapVector } from '../vector/map';\nimport { DataType, RowLike } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { StructVector } from '../vector/struct';\n\nconst columnDescriptor = { enumerable: true, configurable: false, get: () => {} };\nconst lengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };\nconst rowIndexDescriptor = { writable: false, enumerable: false, configurable: true, value: null as any };\nconst rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null as any };\nconst row = { parent: rowParentDescriptor, rowIndex: rowIndexDescriptor };\n\nexport class Row<T extends { [key: string]: DataType }> implements Iterable<T[keyof T]['TValue']> {\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType }>(schemaOrFields: T | Field[], fieldsAreEnumerable = false): RowLike<T> & Row<T> {\n        let schema: T, fields: Field[];\n        if (Array.isArray(schemaOrFields)) {\n            fields = schemaOrFields;\n        } else {\n            schema = schemaOrFields;\n            fieldsAreEnumerable = true;\n            fields = Object.keys(schema).map((x) => new Field(x, schema[x]));\n        }\n        return new Row<T>(fields, fieldsAreEnumerable) as RowLike<T> & Row<T>;\n    }\n    // @ts-ignore\n    private parent: TParent;\n    // @ts-ignore\n    private rowIndex: number;\n    // @ts-ignore\n    public readonly length: number;\n    private constructor(fields: Field[], fieldsAreEnumerable: boolean) {\n        lengthDescriptor.value = fields.length;\n        Object.defineProperty(this, 'length', lengthDescriptor);\n        fields.forEach((field, columnIndex) => {\n            columnDescriptor.get = this._bindGetter(columnIndex);\n            // set configurable to true to ensure Object.defineProperty\n            // doesn't throw in the case of duplicate column names\n            columnDescriptor.configurable = true;\n            columnDescriptor.enumerable = fieldsAreEnumerable;\n            Object.defineProperty(this, field.name, columnDescriptor);\n            columnDescriptor.configurable = false;\n            columnDescriptor.enumerable = !fieldsAreEnumerable;\n            Object.defineProperty(this, columnIndex, columnDescriptor);\n            columnDescriptor.get = null as any;\n        });\n    }\n    *[Symbol.iterator](this: RowLike<T>) {\n        for (let i = -1, n = this.length; ++i < n;) {\n            yield this[i];\n        }\n    }\n    private _bindGetter(colIndex: number) {\n        return function (this: Row<T>) {\n            let child = this.parent.getChildAt(colIndex);\n            return child ? child.get(this.rowIndex) : null;\n        };\n    }\n    public get<K extends keyof T>(key: K) { return (this as any)[key] as T[K]['TValue']; }\n    public bind<TParent extends MapVector<T> | StructVector<T>>(parent: TParent, rowIndex: number) {\n        rowIndexDescriptor.value = rowIndex;\n        rowParentDescriptor.value = parent;\n        const bound = Object.create(this, row);\n        rowIndexDescriptor.value = null;\n        rowParentDescriptor.value = null;\n        return bound as RowLike<T>;\n    }\n    public toJSON(): any {\n        return DataType.isStruct(this.parent.type) ? [...this] :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = (this as any)[prop]) && props || props\n            }, {});\n    }\n    public toString() {\n        return DataType.isStruct(this.parent.type) ?\n            [...this].map((x) => valueToString(x)).join(', ') :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = valueToString((this as any)[prop])) && props || props\n            }, {});\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\ntype RangeLike = { length: number; stride?: number };\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { clampRange } from '../util/vector';\n\ntype SearchContinuation<T extends ChunkedVector> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\nexport class ChunkedVector<T extends DataType = any> extends Vector<T> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: Vector<T>[]) {\n        return vectors.reduce(function flatten(xs: any[], x: any): any[] {\n            return x instanceof ChunkedVector ? x.chunks.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x: any): x is Vector<T> => x instanceof Vector);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: Vector<T>[]): Vector<T> {\n        return new ChunkedVector(vectors[0].type, ChunkedVector.flatten(...vectors));\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _numChildren: number;\n    protected _chunks: Vector<T>[];\n\n    protected _nullCount: number = -1;\n    protected _children?: ChunkedVector[];\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type:T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    protected bindDataAccessors() { /* do nothing */ }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get TType() { return this._type.TType; }\n    public get TArray() { return this._type.TArray; }\n    public get TValue() { return this._type.TValue; }\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n\n    public get data() { return this._chunks[0] ? this._chunks[0].data : <any> null; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public concat(...others: Vector<T>[]): Vector<T> {\n        return ChunkedVector.concat<T>(this, ...others);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): ChunkedVector<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: ChunkedVector<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new ChunkedVector<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<ChunkedVector<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<ChunkedVector<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let { ArrayType } = this._type;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new (ArrayType as any)(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    public slice(begin?: number, end?: number): ChunkedVector<T> {\n        return clampRange(this, begin, end, this.sliceInternal);\n    }\n\n    protected getInternal({ chunks }: ChunkedVector<T>, i: number, j: number) { return chunks[i].get(j); }\n    protected isValidInternal({ chunks }: ChunkedVector<T>, i: number, j: number) { return chunks[i].isValid(j); }\n    protected indexOfInternal({ chunks }: ChunkedVector<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected sliceInternal(column: ChunkedVector<T>, offset: number, length: number) {\n        const slices: Vector<T>[] = [];\n        const { type, chunks, _chunkOffsets: chunkOffsets } = column;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= offset + length) { continue; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= offset && (chunkOffset + chunkLength) <= offset + length) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - chunkOffset);\n            const end = begin + Math.min(chunkLength - begin, (offset + length) - chunkOffset);\n            slices.push(chunk.slice(begin, end) as Vector<T>);\n        }\n        return new ChunkedVector(type, slices);\n    }\n}\n\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset - 1;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[++idx] = src[i];\n    }\n    return idx;\n};\n\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { ChunkedVector } from './chunked';\nimport { clampRange } from '../util/vector';\n\nexport abstract class BaseVector<T extends DataType = any> extends Vector<T> {\n\n    // @ts-ignore\n    protected _data: Data<T>;\n    protected _stride: number = 1;\n    protected _numChildren: number = 0;\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[], stride?: number) {\n        super();\n        this._children = children;\n        this.bindDataAccessors(this._data = data);\n        this._numChildren = data.childData.length;\n        this._stride = Math.floor(Math.max(stride || 1, 1));\n    }\n\n    public get data() { return this._data; }\n    public get stride() { return this._stride; }\n    public get numChildren() { return this._numChildren; }\n\n    public get type() { return this.data.type; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get nullCount() { return this.data.nullCount; }\n    public get VectorName() { return this.constructor.name; }\n    public get TType(): T['TType'] { return this.data.TType; }\n    public get TArray(): T['TArray'] { return this.data.TArray; }\n    public get TValue(): T['TValue'] { return this.data.TValue; }\n    public get ArrayType(): T['ArrayType'] { return this.data.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children, stride = this.stride) {\n        return Vector.new<R>(data, children, stride);\n    }\n\n    public concat(...others: Vector<T>[]): Vector<T> {\n        return ChunkedVector.concat<T>(this, ...others) as Vector<T>;\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    // @ts-ignore\n    public toJSON(): any {}\n\n    public slice(begin?: number, end?: number): this {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this.sliceInternal) as any;\n    }\n\n    protected sliceInternal(vector: BaseVector<T>, offset: number, length: number) {\n        const stride = vector.stride;\n        return vector.clone(vector.data.slice(offset * stride, (length - offset) * stride));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    public rowProxy: Row<T> = Row.new<T>(this.type.children || [], false);\n    public asMap(keysSorted: boolean = false) {\n        return Vector.new(this.data.clone(new Map_(this.type.children, keysSorted)));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Schema, Field } from './schema';\nimport { DataType, Struct } from './type';\nimport { StructVector } from './vector/struct';\nimport { Vector as VType } from './interfaces';\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any> extends Vector<Struct<T>> {\n\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(vectors: VType<T[keyof T]>[], names: (keyof T)[] = []) {\n        return new RecordBatch(\n            Schema.from(vectors, names),\n            vectors.reduce((len, vec) => Math.max(len, vec.length), 0),\n            vectors\n        );\n    }\n  \n    protected _schema: Schema;\n    private impl: StructVector<T>;\n\n    constructor(schema: Schema<T>, numRows: number, childData: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        super();\n        this._schema = args[0];\n        let data: Data<Struct<T>>;\n        let children: Vector[] | undefined;\n        if (typeof args[1] === 'number') {\n            const fields = this.schema.fields as Field<T[keyof T]>[];\n            const [, numRows, childData] = args as [Schema<T>, number, Data[]];\n            data = Data.Struct(new Struct<T>(fields), 0, numRows, 0, null, childData);\n        } else {\n            [, data, children] = (args as [Schema<T>, Data<Struct<T>>, Vector[]?]);\n        }\n        this.impl = new StructVector(data, children);\n    }\n\n    public clone<R extends { [key: string]: DataType } = any>(data: Data<Struct<R>>, children = (this.impl as any).children) {\n        return new RecordBatch<R>(this.schema, data, children);\n    }\n\n    public get schema() { return this._schema; }\n    public get type() { return this.impl.type; }\n    public get data() { return this.impl.data; }\n    public get length() { return this.impl.length; }\n    public get stride() { return this.impl.stride; }\n    public get numCols() { return this.schema.fields.length; }\n    public get rowProxy() { return this.impl.rowProxy; }\n    public get nullCount() { return this.impl.nullCount; }\n    public get numChildren() { return this.impl.numChildren; }\n\n    public get TType() { return this.impl.TType; }\n    public get TArray() { return this.impl.TArray; }\n    public get TValue() { return this.impl.TValue; }\n    public get ArrayType() { return this.impl.ArrayType; }\n\n    public get(index: number): Struct<T>['TValue'] | null {\n        return this.impl.get(index);\n    }\n    public set(index: number, value: Struct<T>['TValue'] | null) {\n        this.impl.set(index, value);\n    }\n    public isValid(index: number) { return this.impl.isValid(index); }\n    public indexOf(value: Struct<T>['TValue'] | null, fromIndex?: number) { return this.impl.indexOf(value, fromIndex); }\n\n    public toArray() { return this.impl.toArray(); }\n    public [Symbol.iterator]() { return this.impl[Symbol.iterator](); }\n\n    public slice(begin?: number, end?: number): RecordBatch<T> {\n        const { length, childData } = this.impl.slice(begin, end).data;\n        return new RecordBatch<T>(this.schema, length, childData);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Vector<Struct<T>> {\n        return this.impl.concat(...others.map((x) => x instanceof RecordBatch ? x.impl : x) as Vector<Struct<T>>[]);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number) { return this.impl.getChildAt<R>(index); }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const fields = this.schema.fields;\n        const schema = this.schema.select(...columnNames);\n        const childNames = columnNames.reduce((xs, x) => (xs[x] = true) && xs, <any> {});\n        const childData = this.data.childData.filter((_, i) => childNames[fields[i].name]);\n        const structData = Data.Struct(new Struct(schema.fields), 0, this.length, 0, null, childData);\n        return new RecordBatch<{ [P in K]: T[P] }>(schema, structData);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/**\n * @ignore\n */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays((this.values as any[]).slice())[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/**\n * @ignore\n */\nexport class ByteStream {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array | null>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/**\n * @ignore\n */\nexport class AsyncByteStream implements Readable<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (!source) {}\n        else if (source instanceof AsyncByteStream) { this.source = (source as AsyncByteStream).source; }\n        else if (source instanceof AsyncByteQueue) { this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source)); }\n        else if (isReadableNodeStream(source)) { this.source = new AsyncByteStreamSource(streamAdapters.fromReadableNodeStream(source)); }\n        else if (isFetchResponse(source)) { this.source = new AsyncByteStreamSource(streamAdapters.fromReadableDOMStream(source.body!)); }\n        else if (isIterable<ArrayBufferViewInput>(source)) { this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source)); }\n        else if (isPromise<ArrayBufferViewInput>(source)) { this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source)); }\n        else if (isAsyncIterable<ArrayBufferViewInput>(source)) { this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source)); }\n        else if (isReadableDOMStream<ArrayBufferViewInput>(source)) { this.source = new AsyncByteStreamSource(streamAdapters.fromReadableDOMStream(source)); }\n    }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\n\n/**\n * @ignore\n */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: Uint8Array, byteLength = buffer.byteLength) {\n        super();\n        this.buffer = buffer;\n        this.size = byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/**\n * @ignore\n */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    public size: number;\n    public position: number = 0;\n    protected file: FileHandle | null;\n    constructor(file: FileHandle, byteLength: number) {\n        super();\n        this.file = file;\n        this.size = byteLength;\n        if ((typeof byteLength) !== 'number') {\n            (async () => this.size = (await file.stat()).size)();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        const { file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        const { file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this.file; this.file = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(node: any, ...args: any[]) {\n        return this.getVisitFn(node, false).call(this, node, ...args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.TType) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.TType]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst carryBit16 = 1 << 16;\n\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { TextEncoder } from 'text-encoding-utf-8';\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\nconst utf8Encoder = new TextEncoder('utf-8');\n\nexport interface VectorLoader extends Visitor {\n    visitMany <T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n    visit     <T extends DataType>(node: T                ): Data<T>;\n}\n\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[]) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n    }\n\n    public visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[] {\n        return nodes.map((node) => this.visit(node instanceof Field ? node.type : node));\n    }\n\n    public visitNull                 <T extends type.Null>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Null(type, 0, length, nullCount, this.readNullBitmap(type, nullCount));                                                                                }\n    public visitBool                 <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt                  <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat                <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8                 <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary               <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary      <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate                 <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp            <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime                 <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal              <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList                 <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visitMany(type.children));                         }\n    public visitStruct               <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion                <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion           <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion          <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary           <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices));                                                   }\n    public visitInterval             <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList        <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitMap                  <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n}\n\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[]) {\n        super(new Uint8Array(0), nodes, buffers);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int8Array, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return utf8Encoder.encode((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from '../../fb/Schema';\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries, dictionaryFields\n    );\n}\n\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries, dictionaryFields));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':    return new DataType();\n        case 'null':    return new Null();\n        case 'binary':  return new Binary();\n        case 'utf8':    return new Utf8();\n        case 'bool':    return new Bool();\n        case 'list':    return new List(children || []);\n        case 'struct': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []) as Type[], children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], children || []);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_(children || [], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n */\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n */\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n */\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n */\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n */\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries, dictionaryFields);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries, dictionaryFields);\n}\n\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    return Array.from(\n        { length: batch.nodesLength() },\n        (_, i) => batch.nodes(i)!\n    ).filter(Boolean).map(FieldNode.decode);\n}\n\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    return Array.from(\n        { length: batch.buffersLength() },\n        (_, i) => batch.buffers(i)!\n    ).filter(Boolean).map(v3Compat(version, BufferRegion.decode));\n}\n\nfunction v3Compat(version: MetadataVersion, decode: (buffer: _Buffer) => BufferRegion) {\n    return (buffer: _Buffer, i: number) => {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        return decode(buffer);\n    };\n}\n\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    return Array.from(\n        { length: schema.fieldsLength() },\n        (_, i) => schema.fields(i)!\n    ).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\n\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    return Array.from(\n        { length: field.childrenLength() },\n        (_, i) => field.children(i)!\n    ).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\n\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries, dictionaryFields));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new DataType();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List(children || []);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), (t.typeIdsArray() || []) as Type[], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), children || []);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_(children || [], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.TType;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\nconst invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\nconst nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\nconst invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\nconst invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        return buf.byteOffset % 8 === 0 ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : (isFileHandle(source) && typeof byteLength === 'number')\n            ? new AsyncRandomAccessFile(source, byteLength)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        return buf.byteOffset % 8 === 0 ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json, _batchIndex, _dictionaryIndex } = this;\n        const numBatches = _json.batches.length;\n        const numDictionaries = _json.dictionaries.length;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { value: message, done: _batchIndex >= numBatches && _dictionaryIndex >= numDictionaries };\n        }\n        if (_dictionaryIndex < numDictionaries) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (_batchIndex < numBatches) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\nexport const PADDING = 4;\nexport const MAGIC_STR = 'ARROW1';\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function isValidArrowFile(bb: ByteBuffer) {\n    let fileLength = bb.capacity(), footerLength: number, lengthOffset: number;\n    if ((fileLength < magicX2AndPadding /*                                  Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        (/*                                                                 Invalid footer length  */\n        (footerLength = bb.readInt32(lengthOffset = fileLength - magicAndPadding)) < 1 &&\n        (footerLength + lengthOffset > fileLength))) {\n        return false;\n    }\n    return true;\n}\n\nexport const magicLength = MAGIC.length;\nexport const magicAndPadding = magicLength + PADDING;\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { Vector } from '../vector';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { ArrowJSON, ArrowJSONLike, FileHandle, ReadableInterop, ITERATOR_DONE } from '../io/interfaces';\nimport { isPromise, isArrowJSON, isFileHandle, isFetchResponse, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\nimport { MessageReader, AsyncMessageReader, checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding, JSONMessageReader } from './message';\n\nexport type FromArg0 = ArrowJSONLike;\nexport type FromArg1 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\nexport type FromArg2 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\nexport type FromArg3 = NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\nexport type FromArg4 = Response | FileHandle | PromiseLike<FileHandle> | PromiseLike<Response>;\nexport type FromArgs = FromArg0 | FromArg3 | FromArg1 | FromArg2 | FromArg4;\n\nexport abstract class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected constructor(protected impl: IRecordBatchReaderImpl<T>) { super(); }\n\n    public get closed() { return this.impl.closed; }\n    public get schema() { return this.impl.schema; }\n    public get autoClose() { return this.impl.autoClose; }\n    public get dictionaries() { return this.impl.dictionaries; }\n    public get numDictionaries() { return this.impl.numDictionaries; }\n    public get numRecordBatches() { return this.impl.numRecordBatches; }\n\n    public next(value?: any) { return this.impl.next(value); }\n    public throw(value?: any) { return this.impl.throw(value); }\n    public return(value?: any) { return this.impl.return(value); }\n    public reset(schema?: Schema<T> | null) { this.impl.reset(schema); return this; }\n\n    public abstract cancel(): void | Promise<void>;\n    public abstract open(autoClose?: boolean): this | Promise<this>;\n    public abstract [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n    public abstract [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n\n    public toReadableDOMStream() { return streamAdapters.toReadableDOMStream(this); }\n    public toReadableNodeStream() { return streamAdapters.toReadableNodeStream(this, { objectMode: true }); }\n\n    public isSync(): this is RecordBatchFileReader<T> | RecordBatchStreamReader<T> {\n        return (this instanceof RecordBatchFileReader) || (this instanceof RecordBatchStreamReader);\n    }\n    public isAsync(): this is AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T> {\n        return (this instanceof AsyncRecordBatchFileReader) || (this instanceof AsyncRecordBatchStreamReader);\n    }\n    public isFile(): this is RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T> {\n        return (this instanceof RecordBatchFileReader) || (this instanceof AsyncRecordBatchFileReader);\n    }\n    public isStream(): this is RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T> {\n        return (this instanceof RecordBatchStreamReader) || (this instanceof AsyncRecordBatchStreamReader);\n    }\n\n    /** @nocollapse */\n    public static throughNode(): import('stream').Duplex { throw new Error(`\"asNodeStream\" not available in this environment`); }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"asDOMStream\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return RecordBatchReader.fromJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return RecordBatchReader.fromFileHandle<T>(source);\n        } else if (isPromise<FromArg1>(source)) {\n            return (async () => await RecordBatchReader.from<T>(await source))();\n        } else if (isPromise<FileHandle | Response>(source)) {\n            return (async () => await RecordBatchReader.from<T>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return RecordBatchReader.fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return RecordBatchReader.fromByteStream<T>(new ByteStream(source));\n    }\n    private static fromJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n        return new RecordBatchStreamReader<T>(new ArrowJSON(source));\n    }\n    private static fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n        const bytes = source.peek((magicLength + 7) & ~7);\n        return bytes && bytes.byteLength >= 4\n            ? checkForMagicArrowString(bytes)\n            ? new RecordBatchFileReader<T>(source.read())\n            : new RecordBatchStreamReader<T>(source)\n            : new RecordBatchStreamReader<T>(function*(): any {}());\n    }\n    private static async fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n        const bytes = await source.peek((magicLength + 7) & ~7);\n        return bytes && bytes.byteLength >= 4\n            ? checkForMagicArrowString(bytes)\n            ? new RecordBatchFileReader<T>(await source.read())\n            : new AsyncRecordBatchStreamReader<T>(source)\n            : new AsyncRecordBatchStreamReader<T>(async function*(): any {}());\n    }\n    private static async fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n        const { size } = await source.stat();\n        const file = new AsyncRandomAccessFile(source, size);\n        if (size >= magicX2AndPadding) {\n            if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n                return new AsyncRecordBatchFileReader<T>(file);\n            }\n        }\n        return new AsyncRecordBatchStreamReader<T>(file);\n    }\n}\n\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    // @ts-ignore\n    protected impl: RecordBatchFileReaderImpl<T>;\n    constructor(source: AsyncRecordBatchFileReaderImpl<T>);\n    constructor(source: RandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: ArrayBufferViewInput, dictionaries?: Map<number, Vector>);\n    constructor(source: AsyncRecordBatchFileReaderImpl<T> | RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        if (source instanceof AsyncRecordBatchFileReaderImpl) {\n            super(source);\n        } else if (source instanceof RandomAccessFile) {\n            super(new RecordBatchFileReaderImpl(source, dictionaries));\n        } else {\n            super(new RecordBatchFileReaderImpl(new RandomAccessFile(toUint8Array(source)), dictionaries));\n        }\n    }\n    public get footer() { return this.impl.footer; }\n    public cancel() { this.impl.close(); }\n    public open(autoClose?: boolean) { this.impl.open(autoClose); return this; }\n    public readRecordBatch(index: number) { return this.impl.readRecordBatch(index); }\n    public [Symbol.iterator]() { return (this.impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    // @ts-ignore\n    protected impl: RecordBatchStreamReaderImpl<T>;\n    constructor(source: ByteStream | ArrowJSON | ArrayBufferView | Iterable<ArrayBufferView>, dictionaries?: Map<number, Vector>) {\n        super(isArrowJSON(source)\n            ? new RecordBatchJSONReaderImpl(new JSONMessageReader(source), dictionaries)\n            : new RecordBatchStreamReaderImpl(new MessageReader(source), dictionaries));\n    }\n    public cancel() { this.impl.close(); }\n    public open(autoClose?: boolean) { this.impl.open(autoClose); return this; }\n    public [Symbol.iterator]() { return (this.impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    // @ts-ignore\n    protected impl: AsyncRecordBatchStreamReaderImpl<T>;\n    constructor(source: AsyncByteStream | FileHandle | NodeJS.ReadableStream | ReadableStream<ArrayBufferView> | AsyncIterable<ArrayBufferView>, byteLength?: number) {\n        super(new AsyncRecordBatchStreamReaderImpl(new AsyncMessageReader(source as FileHandle, byteLength)));\n    }\n    public async cancel() { await this.impl.close(); }\n    public async open(autoClose?: boolean) { await this.impl.open(autoClose); return this; }\n    public [Symbol.asyncIterator]() { return (this.impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n}\n\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    // @ts-ignore\n    protected impl: AsyncRecordBatchFileReaderImpl<T>;\n    constructor(source: AsyncRandomAccessFile);\n    constructor(source: AsyncRandomAccessFile, dictionaries: Map<number, Vector>);\n    constructor(source: FileHandle, byteLength: number, dictionaries: Map<number, Vector>);\n    constructor(source: AsyncRandomAccessFile | FileHandle, ...rest: (number | Map<number, Vector>)[]) {\n        let [byteLength, dictionaries] = rest as [number, Map<number, Vector>];\n        if (byteLength && typeof byteLength !== 'number') { dictionaries = byteLength; }\n        let file = source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength);\n        super(new AsyncRecordBatchFileReaderImpl(file, dictionaries));\n    }\n    public get footer() { return this.impl.footer; }\n    public async cancel() { await this.impl.close(); }\n    public async open(autoClose?: boolean) { await this.impl.open(autoClose); return this; }\n    public readRecordBatch(index: number) { return this.impl.readRecordBatch(index); }\n    public [Symbol.asyncIterator]() { return (this.impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchFileReader is not Iterable`); }\n}\n\nabstract class RecordBatchReaderImplBase<T extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoClose = true;\n    public dictionaryIndex = 0;\n    public recordBatchIndex = 0;\n    public dictionaries: Map<number, Vector>;\n    public get numDictionaries() { return this.dictionaryIndex; }\n    public get numRecordBatches() { return this.recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n    public reset(schema?: Schema<T> | null) {\n        this.dictionaryIndex = 0;\n        this.recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        if (isDelta || !dictionaries.get(id)) {\n\n            const type = schema.dictionaries.get(id)!;\n            const vector = (isDelta ? dictionaries.get(id)!.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n\n            (schema.dictionaryFields.get(id) || []).forEach(({ type }) => type.dictionaryVector = vector);\n\n            return vector;\n        }\n        return dictionaries.get(id)!;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any>\n    extends RecordBatchReaderImplBase<T>\n        implements IRecordBatchReaderImpl<T>, IterableIterator<RecordBatch<T>> {\n\n    constructor(protected reader: MessageReader, dictionaries = new Map<number, Vector>()) {\n        super(dictionaries);\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public close() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset().reader.return();\n            this.reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n        return this;\n    }\n    public open(autoClose = this.autoClose) {\n        if (!this.closed) {\n            this.autoClose = autoClose;\n            if (!(this.schema || (this.schema = this.reader.readSchema()!))) {\n                return this.close();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return this.reset().reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return this.reset().reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { reader } = this;\n        while (message = this.readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this.recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this.dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return this.return();\n    }\n    protected readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this.reader.readMessage<T>(type);\n    }\n}\n\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any>\n    extends RecordBatchReaderImplBase<T>\n        implements IRecordBatchReaderImpl<T>, AsyncIterableIterator<RecordBatch<T>> {\n\n    constructor(protected reader: AsyncMessageReader, dictionaries = new Map<number, Vector>()) {\n        super(dictionaries);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async close() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset().reader.return();\n            this.reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n        return this;\n    }\n    public async open(autoClose = this.autoClose) {\n        if (!this.closed) {\n            this.autoClose = autoClose;\n            if (!(this.schema || (this.schema = (await this.reader.readSchema())!))) {\n                return this.close();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return await this.reset().reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return await this.reset().reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { reader } = this;\n        while (message = await this.readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this.recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this.dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return await this.return();\n    }\n    protected async readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this.reader.readMessage<T>(type);\n    }\n}\n\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any>\n    extends RecordBatchStreamReaderImpl<T>\n        implements IRecordBatchFileReaderImpl<T>, IterableIterator<RecordBatch<T>> {\n\n    // @ts-ignore\n    public footer: Footer;\n    public get numDictionaries() { return this.footer.numDictionaries; }\n    public get numRecordBatches() { return this.footer.numRecordBatches; }\n\n    constructor(protected file: RandomAccessFile, dictionaries = new Map<number, Vector>()) {\n        super(new MessageReader(file), dictionaries);\n    }\n    public open(autoClose = this.autoClose) {\n        if (!this.closed && !this.footer) {\n            this.schema = (this.footer = this.readFooter()).schema;\n            for (const block of this.footer.dictionaryBatches()) {\n                block && this.readDictionaryBatch(this.dictionaryIndex++);\n            }\n        }\n        return super.open(autoClose);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this.footer) { this.open(); }\n        const block = this.footer.getRecordBatch(index);\n        if (block && this.file.seek(block.offset)) {\n            const message = this.reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this.reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected readDictionaryBatch(index: number) {\n        const block = this.footer.getDictionaryBatch(index);\n        if (block && this.file.seek(block.offset)) {\n            const message = this.reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this.reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected readFooter() {\n        const { file } = this;\n        const size = file.size;\n        const offset = size - magicAndPadding;\n        const length = file.readInt32(offset);\n        const buffer = file.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this.footer) { this.open(); }\n        if (this.recordBatchIndex < this.numRecordBatches) {\n            const block = this.footer.getRecordBatch(this.recordBatchIndex);\n            if (block && this.file.seek(block.offset)) {\n                return this.reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any>\n    extends AsyncRecordBatchStreamReaderImpl<T>\n        implements IRecordBatchFileReaderImpl<T>, AsyncIterableIterator<RecordBatch<T>> {\n\n    // @ts-ignore\n    public footer: Footer;\n    public get numDictionaries() { return this.footer.numDictionaries; }\n    public get numRecordBatches() { return this.footer.numRecordBatches; }\n\n    constructor(protected file: AsyncRandomAccessFile, dictionaries = new Map<number, Vector>()) {\n        super(new AsyncMessageReader(file), dictionaries);\n    }\n    public async open(autoClose = this.autoClose) {\n        if (!this.closed && !this.footer) {\n            this.schema = (this.footer = await this.readFooter()).schema;\n            for (const block of this.footer.dictionaryBatches()) {\n                block && this.readDictionaryBatch(this.dictionaryIndex++);\n            }\n        }\n        return await super.open(autoClose);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this.footer) { await this.open(); }\n        const block = this.footer.getRecordBatch(index);\n        if (block && (await this.file.seek(block.offset))) {\n            const message = await this.reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this.reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async readDictionaryBatch(index: number) {\n        const block = this.footer.getDictionaryBatch(index);\n        if (block && (await this.file.seek(block.offset))) {\n            const message = await this.reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this.reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async readFooter() {\n        const { file } = this;\n        const offset = file.size - magicAndPadding;\n        const length = await file.readInt32(offset);\n        const buffer = await file.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this.footer) { await this.open(); }\n        if (this.recordBatchIndex < this.numRecordBatches) {\n            const block = this.footer.getRecordBatch(this.recordBatchIndex);\n            if (block && await this.file.seek(block.offset)) {\n                return await this.reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(protected reader: JSONMessageReader, dictionaries = new Map<number, Vector>()) {\n        super(reader, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\ninterface IRecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoClose: boolean;\n    numDictionaries: number;\n    numRecordBatches: number;\n    dictionaries: Map<number, Vector>;\n\n    open(autoClose?: boolean): this | Promise<this>;\n    reset(schema?: Schema<T> | null): this;\n    close(): this | Promise<this>;\n\n    [Symbol.iterator]?(): IterableIterator<RecordBatch<T>>;\n    [Symbol.asyncIterator]?(): AsyncIterableIterator<RecordBatch<T>>;\n\n    throw(value?: any): IteratorResult<any> | Promise<IteratorResult<any>>;\n    return(value?: any): IteratorResult<any> | Promise<IteratorResult<any>>;\n    next(value?: any): IteratorResult<RecordBatch<T>> | Promise<IteratorResult<RecordBatch<T>>>;\n}\n\ninterface IRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends IRecordBatchReaderImpl<T> {\n\n    footer: Footer;\n\n    readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null>;\n}\n\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> {\n    cancel(): void;\n    open(autoClose?: boolean): this;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> {\n    cancel(): void;\n    open(autoClose?: boolean): this;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> {\n    cancel(): Promise<void>;\n    open(autoClose?: boolean): Promise<this>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> {\n    cancel(): Promise<void>;\n    open(autoClose?: boolean): Promise<this>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { Vector as VType } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\nexport interface VectorAssembler extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[]): this[];\n    visit     <T extends Vector>  (node: T   ): this;\n    getVisitFn<T extends Type>    (node: T       ): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: VType<T>): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: Data<T> ): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: T       ): (vector: VType<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: VType<T>): this;\n    visitInt                  <T extends Int>             (vector: VType<T>): this;\n    visitFloat                <T extends Float>           (vector: VType<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: VType<T>): this;\n    visitBinary               <T extends Binary>          (vector: VType<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: VType<T>): this;\n    visitDate                 <T extends Date_>           (vector: VType<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: VType<T>): this;\n    visitTime                 <T extends Time>            (vector: VType<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: VType<T>): this;\n    visitList                 <T extends List>            (vector: VType<T>): this;\n    visitStruct               <T extends Struct>          (vector: VType<T>): this;\n    visitUnion                <T extends Union>           (vector: VType<T>): this;\n    visitInterval             <T extends Interval>        (vector: VType<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: VType<T>): this;\n    visitMap                  <T extends Map_>            (vector: VType<T>): this;\n}\n\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n\n        const vectors = args.reduce(function flatten(xs: any[], x: any): any[] {\n            if (Array.isArray(x)) { return x.reduce(flatten, xs); }\n            if (!(x instanceof RecordBatch)) { return [...xs, x]; }\n            return [...xs, ...x.schema.fields.map((_, i) => x.getChildAt(i)!)];\n        }, []).filter((x: any): x is Vector => x instanceof Vector);\n\n        return new VectorAssembler().visitMany(vectors)[0];\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            addBuffer.call(this, nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : truncateBitmap(data.offset, length, data.nullBitmap)\n            ).nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: VType<T>) { return this; }\n    public visitDictionary<T extends Dictionary>(vector: VType<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: VType<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: VType<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate\n    // the values as bools and re-pack them into a Uint8Array (slow path)\n    return addBuffer.call(this, packBools(vector));\n}\n\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: VType<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: VType<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\nfunction assembleListVector<T extends List | FixedSizeList>(this: VectorAssembler, vector: VType<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\nfunction assembleNestedVector<T extends Struct | Map_ | Union>(this: VectorAssembler, vector: VType<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =   assembleNestedVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { DataType, Dictionary } from '../type';\nimport { ChunkedVector } from '../vector/chunked';\nimport { FileBlock, Footer } from './metadata/file';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { isWritableDOMStream, isWritableNodeStream, isAsyncIterable } from '../util/compat';\nimport { Writable, FileHandle, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\n\nconst kAlignmentBytes = new Uint8Array(64).fill(0);\n\nexport type OpenArgs = FileHandle | NodeJS.WritableStream | WritableStream<Uint8Array> | UnderlyingSink<Uint8Array>;\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    public static throughNode(): import('stream').Duplex { throw new Error(`\"throughNode\" not available in this environment`); }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(): { writable: WritableStream<RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    protected position = 0;\n    protected started = false;\n    // @ts-ignore\n    protected sink = new AsyncByteQueue();\n    protected schema: Schema | null = null;\n    protected dictionaryBlocks: FileBlock[] = [];\n    protected recordBatchBlocks: FileBlock[] = [];\n\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this.sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public get closed() { return this.sink.closed; }\n    public [Symbol.asyncIterator]() { return this.sink[Symbol.asyncIterator](); }\n    public toReadableDOMStream(options?: ReadableDOMStreamOptions) { return this.sink.toReadableDOMStream(options); }\n    public toReadableNodeStream(options?: import('stream').ReadableOptions) { return this.sink.toReadableNodeStream(options); }\n\n    public close() { return this.reset().sink.close(); }\n    public abort(reason?: any) { return this.reset().sink.abort(reason); }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this.sink, schema?: Schema<T>) {\n\n        if ((sink === this.sink) || (sink instanceof AsyncByteQueue)) {\n            this.sink = sink as AsyncByteQueue;\n        } else {\n            this.sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toReadableDOMStream().pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toReadableNodeStream().pipe(sink);\n            }\n        }\n\n        this.position = 0;\n        this.schema = null;\n        this.started = false;\n        this.dictionaryBlocks = [];\n        this.recordBatchBlocks = [];\n\n        if (schema instanceof Schema) {\n            this.started = true;\n            this.schema = schema;\n            this._writeSchema(schema);\n        }\n\n        return this;\n    }\n\n    public write(chunk: RecordBatch<T>) {\n        if (!this.sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        }\n        if (!this.started && (this.started = true)) {\n            this._writeSchema(this.schema = chunk.schema);\n        }\n        if (chunk.schema !== this.schema) {\n            throw new Error('Schemas unequal');\n        }\n        this._writeRecordBatch(chunk);\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const alignedSize = (flatbufferSize + 4 + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - 4;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this.recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this.position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this.dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this.position));\n        }\n\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - 4));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(buffer: ArrayBufferView) {\n        if (buffer && buffer.byteLength > 0) {\n            this.sink.write(buffer);\n            this.position += buffer.byteLength;\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMessage(Message.from(schema))\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n\n    protected _writeFooter() {\n\n        const { schema, recordBatchBlocks, dictionaryBlocks } = this;\n        const buffer = Footer.encode(new Footer(\n            schema!, MetadataVersion.V4,\n            recordBatchBlocks, dictionaryBlocks\n        ));\n\n        return this\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(kAlignmentBytes.subarray(0, nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(records: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(records);\n        const recordBatch = new metadata.RecordBatch(records.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(dictionaryFields: Map<number, Field<Dictionary<any, any>>[]>) {\n        for (const [id, fields] of dictionaryFields) {\n            const vector = fields[0].type.dictionaryVector;\n            if (!(vector instanceof ChunkedVector)) {\n                this._writeDictionaryBatch(vector, id, false);\n            } else {\n                const chunks = vector.chunks;\n                for (let i = -1, n = chunks.length; ++i < n;) {\n                    this._writeDictionaryBatch(chunks[i], id, i > 0);\n                }\n            }\n        }\n        return this;\n    }\n}\n\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(batches: Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(batches: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(batches: Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (!isAsyncIterable(batches)) {\n            for (const batch of batches) writer.write(batch); writer.close(); return writer;\n        }\n        return (async () => {\n            for await (const batch of batches) writer.write(batch); writer.close(); return writer;\n        })();\n    }\n\n    public close() {\n        this._writeFooter();\n        return super.close();\n    }\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMagic()._writePadding(2)\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n}\n\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(batches: Iterable<RecordBatch<T>>): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(batches: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(batches: Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        const writer = new RecordBatchStreamWriter<T>();\n        if (!isAsyncIterable(batches)) {\n            for (const batch of batches) writer.write(batch); writer.close(); return writer;\n        }\n        return (async () => {\n            for await (const batch of batches) writer.write(batch); writer.close(); return writer;\n        })();\n    }\n    public close() {\n        this._writePadding(4);\n        return super.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { ChunkedVector } from './vector/chunked';\n\nexport class Column<T extends DataType = any> extends ChunkedVector<T> {\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        super(field.type, ChunkedVector.flatten(...vectors), offsets);\n        this._field = field;\n    }\n\n    protected _children?: Column[];\n    protected _field: Field<T>;\n\n    public get field() { return this._field; }\n    public get name() { return this.field.name; }\n\n    public slice(begin?: number, end?: number): Column<T> {\n        return new Column(this.field, super.slice(begin, end).chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this.chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Bool } from '../type';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { packBools } from '../util/bit';\n\nexport class BoolVector extends BaseVector<Bool> {\n    /** @nocollapse */\n    public static from(data: Iterable<boolean>) {\n        let length = 0, bitmap = packBools(function*() {\n            for (let x of data) { length++; yield x; }\n        }());\n        return Vector.new(Data.Bool(new Bool(), 0, length, 0, null, bitmap));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DateUnit } from '../enum';\nimport { BaseVector } from './base';\nimport * as IntUtil from '../util/int';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    /** @nocollapse */\n    public static from<T extends Date_ = DateMillisecond>(data: Date[], unit: T['unit'] = DateUnit.MILLISECOND) {\n        switch (unit) {\n            case DateUnit.DAY: {\n                const values = Int32Array.from(data.map((d) => d.valueOf() / 86400000));\n                return Vector.new(Data.Date(new DateDay(), 0, data.length, 0, null, values));\n            }\n            case DateUnit.MILLISECOND: {\n                const values = IntUtil.Int64.convertArray(data.map((d) => d.valueOf()));\n                return Vector.new(Data.Date(new DateMillisecond(), 0, data.length, 0, null, values));\n            }\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[unit]}\"`);\n    }\n    constructor(data: Data<T>) {\n        super(data, undefined, data.type.unit + 1);\n    }\n}\nexport class DateDayVector extends DateVector<DateDay> {}\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\nexport class DecimalVector extends BaseVector<Decimal> {\n    constructor(data: Data<Decimal>) {\n        super(data, undefined, 4);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { DataType, Dictionary, TKeys } from '../type';\n\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    /** @nocollapse */\n    public static from<T extends DataType<any>, TKey extends TKeys = TKeys>(\n        values: Vector<T>, indices: TKey,\n        keys: ArrayLike<number> | TKey['TArray']\n    ) {\n        const type = new Dictionary(values.type, indices, null, null, values);\n        return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys));\n    }\n    protected _indices: V<TKey>;\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data, void 0, 1);\n        this._indices = Vector.new(data.clone(this.type.indices));\n    }\n    public get indices() { return this._indices; }\n    public get dictionary() { return this.type.dictionaryVector; }\n    public getKey(index: number): TKey['TValue'] | null { return this.indices.get(index); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public isValid(index: number) { return this.indices.isValid(index); }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {\n    constructor(data: Data<FixedSizeBinary>) {\n        super(data, void 0, data.type.byteWidth);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {\n    constructor(data: Data<FixedSizeList<T>>) {\n        super(data, void 0, data.type.listSize);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n    /** @nocollapse */\n    public static from<T extends Float>(data: T['TArray']) {\n        switch (data.constructor) {\n            case Uint16Array: return Vector.new(Data.Float(new Float16(), 0, data.length, 0, null, data));\n            case Float32Array: return Vector.new(Data.Float(new Float32(), 0, data.length, 0, null, data));\n            case Float64Array: return Vector.new(Data.Float(new Float64(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n}\n\nexport class Float16Vector extends FloatVector<Float16> {}\nexport class Float32Vector extends FloatVector<Float32> {}\nexport class Float64Vector extends FloatVector<Float64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {\n    constructor(data: Data<T>) {\n        super(data, undefined, data.type.unit + 1);\n    }\n}\n\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\n\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n    public static from<T extends Int>(data: T['TArray']): V<T>;\n    public static from<T extends Int32 | Uint32>(data: T['TArray'], is64: true): V<T>;\n    /** @nocollapse */\n    public static from(data: any, is64?: boolean) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? Vector.new(Data.Int(new Int64(), 0, data.length, 0, null, data))\n                : Vector.new(Data.Int(new Uint64(), 0, data.length, 0, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return Vector.new(Data.Int(new Int8(), 0, data.length, 0, null, data));\n            case Int16Array: return Vector.new(Data.Int(new Int16(), 0, data.length, 0, null, data));\n            case Int32Array: return Vector.new(Data.Int(new Int32(), 0, data.length, 0, null, data));\n            case Uint8Array: return Vector.new(Data.Int(new Uint8(), 0, data.length, 0, null, data));\n            case Uint16Array: return Vector.new(Data.Int(new Uint16(), 0, data.length, 0, null, data));\n            case Uint32Array: return Vector.new(Data.Int(new Uint32(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    constructor(data: Data<T>) {\n        super(data, undefined, data.type.bitWidth <= 32 ? 1 : 2);\n    }\n}\n\nexport class Int8Vector extends IntVector<Int8> {}\nexport class Int16Vector extends IntVector<Int16> {}\nexport class Int32Vector extends IntVector<Int32> {}\nexport class Int64Vector extends IntVector<Int64> {}\nexport class Uint8Vector extends IntVector<Uint8> {}\nexport class Uint16Vector extends IntVector<Uint16> {}\nexport class Uint32Vector extends IntVector<Uint32> {}\nexport class Uint64Vector extends IntVector<Uint64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class MapVector<T extends { [key: string]: DataType } = any> extends BaseVector<Map_<T>> {\n    public rowProxy: Row<T> = Row.new<T>(this.type.children || [], true);\n    public asStruct() {\n        return Vector.new(this.data.clone(new Struct(this.type.children)));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {\n    constructor(data: Data<T>) {\n        super(data, undefined, 2);\n    }\n}\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {\n    constructor(data: Data<T>) {\n        super(data, undefined, data.type.bitWidth <= 32 ? 1 : 2);\n    }\n}\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n}\n\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport const encodeUtf8 = ((encoder) =>\n    encoder.encode.bind(encoder) as (input?: string, options?: { stream?: boolean }) => Uint8Array\n)(new TextEncoder('utf-8'));\n\nexport interface SetVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    visit     <T extends Vector>  (node: T, index: number, value: T['TValue']          ): void;\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n}\n\nexport class SetVisitor extends Visitor {\n}\n\nconst setEpochMsToSeconds = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 1000) | 0; }\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs / 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs / 1000) / 4294967296) | 0;\n};\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs / 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs / 1000000) / 4294967296) | 0;\n};\n\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\nconst setBool = <T extends Bool>({ offset, values }: Vector<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\ntype Numeric2X = Int64 | Uint64;\n\nconst setDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\nconst setFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = (value * 32767) + 32767; };\nconst setNumericX2       = <T extends Numeric2X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\nconst setBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\nconst setInt = <T extends Int>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(<any> vector, index, value as Numeric1X['TValue'])\n        : setNumericX2(<any> vector, index, value as Numeric2X['TValue'])\n};\n\nconst setFloat = <T extends Float>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(<any> vector, index, value)\n        : setFloat16(<any> vector, index, value)\n};\n\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector, index, value)\n        : setDateMillisecond(vector, index, value)\n};\n\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToSeconds(values, index * 2, value);\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\nconst setTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as Vector<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as Vector<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as Vector<TimestampNanosecond>, index, value);\n    }\n};\n\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\nconst setTime            = <T extends Time>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as Vector<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as Vector<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as Vector<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as Vector<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\nconst setDecimal = <T extends Decimal>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\nconst setList = <T extends List>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!;\n    const { valueOffsets, stride } = vector;\n    let idx = -1, offset = valueOffsets[index * stride];\n    let end = Math.min(value.length, valueOffsets[(index * stride) + 1] - offset);\n    while (offset < end) {\n        values.set(offset++, value.get(++idx));\n    }\n};\n\nconst setNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.children.forEach(({ name }, idx) => {\n        const kid = vector.getChildAt(idx);\n        kid && kid.set(index, value[name]);\n    });\n};\n\nconst setUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as Vector<DenseUnion>, index, value) :\n        setSparseUnion(vector as Vector<SparseUnion>, index, value);\n};\n\nconst setDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index] as Type]);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\nconst setSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index] as Type]);\n    child && child.set(index, value);\n};\n\nconst setDictionary = <T extends Dictionary>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    return vector.dictionary.set(vector.indices.get(index) as number, value);\n};\n\nconst setIntervalValue = <T extends Interval>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector, index, value)\n        : setIntervalYearMonth(vector, index, value);\n};\n\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); }\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\nconst setFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(++idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 getDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setNested;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =               setNested;\n\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { encodeUtf8 } from '../visitor/set';\n\nexport class Utf8Vector extends BaseVector<Utf8> {\n    /** @nocollapse */\n    public static from(values: string[]) {\n        const length = values.length;\n        const data = encodeUtf8(values.join(''));\n        const offsets = values.reduce((offsets, str, idx) => (\n            (!(offsets[idx + 1] = offsets[idx] + str.length) || true) && offsets\n        ), new Uint32Array(values.length + 1));\n        return Vector.new(Data.Utf8(new Utf8(), 0, length, 0, null, offsets, data));\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { TextDecoder } from 'text-encoding-utf-8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport const decodeUtf8 = ((decoder) =>\n    decoder.decode.bind(decoder) as (input?: ArrayBufferLike | ArrayBufferView) => string\n)(new TextDecoder('utf-8'));\n\nexport interface GetVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[], indices: number[]): T['TValue'][];\n    visit     <T extends Vector>  (node: T, index: number       ): T['TValue'];\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: Vector<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: Vector<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: Vector<T>, index: number): T['TValue'];\n}\n\nexport class GetVisitor extends Visitor {}\n\nconst epochSecondsToMs = (data: Int32Array, index: number) => 1000 * data[index];\nconst epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\nconst epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\nconst epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\nconst epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\nconst epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\nconst epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n// const epochSecondsToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochSecondsToMs(data, index));\n// const epochNanosecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochNanosecondsLongToMs(data, index));\nconst epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\nconst getNull = <T extends Null>(_vector: Vector<T>, _index: number): T['TValue'] => null;\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\nconst getBool = <T extends Bool>({ offset, values }: Vector<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\ntype Numeric2X = Int64 | Uint64;\n\nconst getDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number): T['TValue'] => values[stride * index];\nconst getFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number): T['TValue'] => (values[stride * index] - 32767) / 32767;\nconst getNumericX2       = <T extends Numeric2X>      ({ stride, values }: Vector<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\nconst getBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\nconst getInt = <T extends Int>(vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(<any> vector, index)\n        : getNumericX2(<any> vector, index)\n);\n\nconst getFloat = <T extends Float> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as any, index)\n        : getFloat16(vector as any, index)\n);\n\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as any, index)\n        : getDateMillisecond(vector as any, index)\n);\n\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number): T['TValue'] => epochSecondsToMs(values, index * 2);\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\nconst getTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as Vector<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as Vector<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as Vector<TimestampNanosecond>, index);\n    }\n};\n\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * index + 1);\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * index + 1);\nconst getTime            = <T extends Time>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as Vector<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as Vector<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as Vector<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as Vector<TimeNanosecond>, index);\n    }\n};\n\nconst getDecimal = <T extends Decimal>({ values }: Vector<T>, index: number): T['TValue'] => values.subarray(4 * index, 4 * (index + 1));\n\nconst getList = <T extends List>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\nconst getNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.rowProxy.bind(vector, index);\n};\n\nconst getUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as Vector<DenseUnion>, index) :\n        getSparseUnion(vector as Vector<SparseUnion>, index);\n};\n\nconst getDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index] as Type]);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\nconst getSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index] as Type]);\n    return child ? child.get(index) : null;\n};\n\nconst getDictionary = <T extends Dictionary>(vector: Vector<T>, index: number): T['TValue'] => {\n    return vector.dictionary.get(vector.indices.get(index) as number);\n};\n\nconst getInterval = <T extends Interval>(vector: Vector<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as any, index)\n        : getIntervalYearMonth(vector as any, index);\n\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * index + 1);\n\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\nconst getFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =            getNumericX2;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =            getNumericX2;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getNested;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =               getNested;\n\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RowLike } from '../type';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IndexOfVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    visit     <T extends Vector>  (node: T, value: T['TValue'] | null, index?: number            ): number;\n    getVisitFn<T extends Type>    (node: T         ): (vector: Vector<T>, value: Vector<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: Vector<T> ): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: Data<T>   ): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: T         ): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n}\n\nexport class IndexOfVisitor extends Visitor {\n}\n\nfunction nullIndexOf(vector: Vector<Null>, searchElement?: null, fromIndex: number = -1) {\n     // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? fromIndex : -1;\n}\n\nfunction indexOfNull<T extends DataType>(vector: Vector<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\nfunction valueIndexOf<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (vector.get(i) === searchElement) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction dateIndexOf<T extends Date_>(vector: Vector<T>, searchElement?: Date | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const valueOfDate = searchElement.valueOf();\n    for (let d: Date | null, i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if ((d = vector.get(i)) && d.valueOf() === valueOfDate) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction dictionaryIndexOf<T extends DataType>(vector: Vector<Dictionary<T>>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const { dictionary, indices } = vector;\n    // First find the dictionary key for the desired value...\n    const key = dictionary.indexOf(searchElement);\n    // ... then find the first occurence of that key in indices\n    return key === -1 ? -1 : indices.indexOf(key, fromIndex);\n}\n\nfunction arrayIndexOf<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    searching:\n    for (let x = null, j = 0, i = (fromIndex || 0) - 1, n = vector.length, k = searchElement.length; ++i < n;) {\n        if ((x = vector.get(i)) && (j = x.length) === k) {\n            while (--j > -1) {\n                if (x[j] !== searchElement[j]) {\n                    continue searching;\n                }\n            }\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction listIndexOf<\n    T extends DataType,\n    R extends List<T> | FixedSizeList<T>\n>(vector: Vector<R>, searchElement?: R['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const getSearchElement = (Array.isArray(searchElement) || ArrayBuffer.isView(searchElement))\n        ? (i: number) => (searchElement as ArrayLike<T>)[i]\n        : (i: number) => (searchElement as Vector<T>).get(i);\n    searching:\n    for (let x = null, j = 0, i = (fromIndex || 0) - 1, n = vector.length, k = searchElement.length; ++i < n;) {\n        if ((x = vector.get(i)) && (j = x.length) === k) {\n            while (--j > -1) {\n                if (x.get(j) !== getSearchElement(j)) {\n                    continue searching;\n                }\n            }\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction indexOfNested<\n    T extends { [key: string]: DataType },\n    R extends Map_<T> | Struct<T>\n>(vector: Vector<R>, searchElement?: RowLike<T> | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    searching:\n    for (let x = null, j = 0, i = (fromIndex || 0) - 1, n = vector.length, k = searchElement.length; ++i < n;) {\n        if ((x = vector.get(i)) && (j = x.length) === k) {\n            while (--j > -1) {\n                if (x[j] !== searchElement[j]) {\n                    continue searching;\n                }\n            }\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =       nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 =      valueIndexOf;\nIndexOfVisitor.prototype.visitInt                  =      valueIndexOf;\nIndexOfVisitor.prototype.visitInt8                 =      valueIndexOf;\nIndexOfVisitor.prototype.visitInt16                =      valueIndexOf;\nIndexOfVisitor.prototype.visitInt32                =      valueIndexOf;\nIndexOfVisitor.prototype.visitInt64                =      arrayIndexOf;\nIndexOfVisitor.prototype.visitUint8                =      valueIndexOf;\nIndexOfVisitor.prototype.visitUint16               =      valueIndexOf;\nIndexOfVisitor.prototype.visitUint32               =      valueIndexOf;\nIndexOfVisitor.prototype.visitUint64               =      arrayIndexOf;\nIndexOfVisitor.prototype.visitFloat                =      valueIndexOf;\nIndexOfVisitor.prototype.visitFloat16              =      valueIndexOf;\nIndexOfVisitor.prototype.visitFloat32              =      valueIndexOf;\nIndexOfVisitor.prototype.visitFloat64              =      valueIndexOf;\nIndexOfVisitor.prototype.visitUtf8                 =      valueIndexOf;\nIndexOfVisitor.prototype.visitBinary               =      arrayIndexOf;\nIndexOfVisitor.prototype.visitFixedSizeBinary      =      arrayIndexOf;\nIndexOfVisitor.prototype.visitDate                 =       dateIndexOf;\nIndexOfVisitor.prototype.visitDateDay              =       dateIndexOf;\nIndexOfVisitor.prototype.visitDateMillisecond      =       dateIndexOf;\nIndexOfVisitor.prototype.visitTimestamp            =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimestampSecond      =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimestampMillisecond =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimestampMicrosecond =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimestampNanosecond  =      valueIndexOf;\nIndexOfVisitor.prototype.visitTime                 =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimeSecond           =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimeMillisecond      =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimeMicrosecond      =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimeNanosecond       =      valueIndexOf;\nIndexOfVisitor.prototype.visitDecimal              =      arrayIndexOf;\nIndexOfVisitor.prototype.visitList                 =       listIndexOf;\nIndexOfVisitor.prototype.visitStruct               =     indexOfNested;\nIndexOfVisitor.prototype.visitUnion                =      valueIndexOf;\nIndexOfVisitor.prototype.visitDenseUnion           =      valueIndexOf;\nIndexOfVisitor.prototype.visitSparseUnion          =      valueIndexOf;\nIndexOfVisitor.prototype.visitDictionary           = dictionaryIndexOf;\nIndexOfVisitor.prototype.visitInterval             =      valueIndexOf;\nIndexOfVisitor.prototype.visitIntervalDayTime      =      valueIndexOf;\nIndexOfVisitor.prototype.visitIntervalYearMonth    =      valueIndexOf;\nIndexOfVisitor.prototype.visitFixedSizeList        =       listIndexOf;\nIndexOfVisitor.prototype.visitMap                  =     indexOfNested;\n\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IteratorVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[]     ): IterableIterator<T['TValue'] | null>[];\n    visit     <T extends Vector>  (node: T        ): IterableIterator<T['TValue'] | null>;\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n}\n\nexport class IteratorVisitor extends Visitor {}\n\nfunction nullableIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: Vector<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\nfunction vectorIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (type.TType === Type.Timestamp) ||\n        (type.TType === Type.Int && (type as Int).bitWidth !== 64) ||\n        (type.TType === Type.Time && (type as Time).bitWidth !== 64) ||\n        (type.TType === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Type, Precision } from '../enum';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface ToArrayVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[]     ): T['TArray'][];\n    visit     <T extends Vector>  (node: T        ): T['TArray'];\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>) => Vector<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: Vector<T>): Vector<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: Vector<T>): Vector<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: Vector<T>): Vector<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: Vector<T>): Vector<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: Vector<T>): Vector<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: Vector<T>): Vector<T>['TArray'];\n}\n\nexport class ToArrayVisitor extends Visitor {}\n\nfunction arrayOfVector<T extends DataType>(vector: Vector<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.TType) {\n        case Type.Int: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n        case Type.Float:\n            return (type as Float).precision === Precision.HALF /* Precision.HALF */\n                ? new Float32Array(vector[Symbol.iterator]())\n                : vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\nexport const instance = new ToArrayVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\nconst sum = (x: number, y: number) => x + y;\nconst variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\nexport interface ByteWidthVisitor extends Visitor {\n    visitMany <T extends DataType>(nodes: T[]     ): number[];\n    visit     <T extends DataType>(node: T        ): number;\n    getVisitFn<T extends Type>    (node: T        ): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: Vector<T>): (type: T          ) => number;\n    getVisitFn<T extends DataType>(node: Data<T>  ): (type: T          ) => number;\n    getVisitFn<T extends DataType>(node: T        ): (type: T          ) => number;\n}\n\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport * as vecs from '../vector/all';\nimport { Vector, VectorCtor } from '../interfaces';\n\nexport interface GetVectorConstructor extends Visitor {\n    visitMany <T extends Type>    (nodes: T[]     ): VectorCtor<T>[];\n    visit     <T extends Type>    (node: T,       ): VectorCtor<T>;\n    getVisitFn<T extends Type>    (node: T        ): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: Vector<T>): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: Data<T>  ): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: T        ): () => VectorCtor<T>;\n}\n\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return vecs.NullVector; }\n    public visitBool                 () { return vecs.BoolVector; }\n    public visitInt                  () { return vecs.IntVector; }\n    public visitInt8                 () { return vecs.Int8Vector; }\n    public visitInt16                () { return vecs.Int16Vector; }\n    public visitInt32                () { return vecs.Int32Vector; }\n    public visitInt64                () { return vecs.Int64Vector; }\n    public visitUint8                () { return vecs.Uint8Vector; }\n    public visitUint16               () { return vecs.Uint16Vector; }\n    public visitUint32               () { return vecs.Uint32Vector; }\n    public visitUint64               () { return vecs.Uint64Vector; }\n    public visitFloat                () { return vecs.FloatVector; }\n    public visitFloat16              () { return vecs.Float16Vector; }\n    public visitFloat32              () { return vecs.Float32Vector; }\n    public visitFloat64              () { return vecs.Float64Vector; }\n    public visitUtf8                 () { return vecs.Utf8Vector; }\n    public visitBinary               () { return vecs.BinaryVector; }\n    public visitFixedSizeBinary      () { return vecs.FixedSizeBinaryVector; }\n    public visitDate                 () { return vecs.DateVector; }\n    public visitDateDay              () { return vecs.DateDayVector; }\n    public visitDateMillisecond      () { return vecs.DateMillisecondVector; }\n    public visitTimestamp            () { return vecs.TimestampVector; }\n    public visitTimestampSecond      () { return vecs.TimestampSecondVector; }\n    public visitTimestampMillisecond () { return vecs.TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return vecs.TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return vecs.TimestampNanosecondVector; }\n    public visitTime                 () { return vecs.TimeVector; }\n    public visitTimeSecond           () { return vecs.TimeSecondVector; }\n    public visitTimeMillisecond      () { return vecs.TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return vecs.TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return vecs.TimeNanosecondVector; }\n    public visitDecimal              () { return vecs.DecimalVector; }\n    public visitList                 () { return vecs.ListVector; }\n    public visitStruct               () { return vecs.StructVector; }\n    public visitUnion                () { return vecs.UnionVector; }\n    public visitDenseUnion           () { return vecs.DenseUnionVector; }\n    public visitSparseUnion          () { return vecs.SparseUnionVector; }\n    public visitDictionary           () { return vecs.DictionaryVector; }\n    public visitInterval             () { return vecs.IntervalVector; }\n    public visitIntervalDayTime      () { return vecs.IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return vecs.IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return vecs.FixedSizeListVector; }\n    public visitMap                  () { return vecs.MapVector; }\n}\n\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Row } from './all';\nexport { Vector } from './all';\nexport { BaseVector } from './all';\nexport { BinaryVector } from './all';\nexport { BoolVector } from './all';\nexport { ChunkedVector } from './all';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './all';\nexport { DecimalVector } from './all';\nexport { DictionaryVector } from './all';\nexport { FixedSizeBinaryVector } from './all';\nexport { FixedSizeListVector } from './all';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './all';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './all';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './all';\nexport { ListVector } from './all';\nexport { MapVector } from './all';\nexport { NullVector } from './all';\nexport { StructVector } from './all';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './all';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './all';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './all';\nexport { Utf8Vector } from './all';\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { Vector as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n    }\n}\n\ndeclare module './base' {\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn(data.type)())(data, ...args) as V<T>;\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .filter((TType) => TType !== Type.NONE && TType !== Type[Type.NONE])\n    .map((T: any) => Type[T] as any).filter((T: any): T is Type => typeof T === 'number')\n    .forEach((TType) => {\n        let typeIds: Type[];\n        switch (TType) {\n            case Type['Int']:       typeIds = [Type['Int8'], Type['Int16'], Type['Int32'], Type['Int64'], Type['Uint8'], Type['Uint16'], Type['Uint32'], Type['Uint64']]; break;\n            case Type['Float']:     typeIds = [Type['Float16'], Type['Float32'], Type['Float64']]; break;\n            case Type['Date']:      typeIds = [Type['DateDay'], Type['DateMillisecond']]; break;\n            case Type['Time']:      typeIds = [Type['TimeSecond'], Type['TimeMillisecond'], Type['TimeMicrosecond'], Type['TimeNanosecond']]; break;\n            case Type['Timestamp']: typeIds = [Type['TimestampSecond'], Type['TimestampMillisecond'], Type['TimestampMicrosecond'], Type['TimestampNanosecond']]; break;\n            case Type['Interval']:  typeIds = [Type['IntervalDayTime'], Type['IntervalYearMonth']]; break;\n            case Type['Union']:     typeIds = [Type['DenseUnion'], Type['SparseUnion']]; break;\n            default:                typeIds = [TType]; break;\n        }\n        typeIds.forEach((TType) => {\n            const VectorCtor = getVectorConstructor.visit(TType);\n            VectorCtor.prototype['get'] = partial1(getVisitor.getVisitFn(TType));\n            VectorCtor.prototype['set'] = partial2(setVisitor.getVisitFn(TType));\n            VectorCtor.prototype['indexOf'] = partial2(indexOfVisitor.getVisitFn(TType));\n            VectorCtor.prototype['toArray'] = partial0(toArrayVisitor.getVisitFn(TType));\n            VectorCtor.prototype['getByteWidth'] = partial0(byteWidthVisitor.getVisitFn(TType));\n            VectorCtor.prototype[Symbol.iterator] = partial0(iteratorVisitor.getVisitFn(TType));\n        });\n    });\n\nfunction partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\nfunction partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\nfunction partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, a != null)) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n// @ts-ignore\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>, data: Data<T>) {\n    const type = this.type;\n    this['get'] = getVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this['set'] = setVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this['indexOf'] = indexOfVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this['toArray'] = toArrayVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this[Symbol.iterator] = iteratorVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    if (this.nullCount > 0) {\n        this['set'] = wrapNullableSet(this['set']);\n    }\n    (Vector.prototype as any).bindDataAccessors.call(this, data);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { isPromise } from './util/compat';\nimport { RecordBatch } from './recordbatch';\nimport { Vector as VType } from './interfaces';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { Vector, ChunkedVector } from './vector/index';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\n\nexport interface DataFrame<T extends { [key: string]: DataType; } = any> {\n    count(): number;\n    filter(predicate: import('./compute/predicate').Predicate): DataFrame<T>;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n}\n\nexport class Table<T extends { [key: string]: DataType; } = any> implements DataFrame<T> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType; } = any>() { return new Table<T>(new Schema([]), []); }\n\n    public static from<T extends { [key: string]: DataType } = any>(): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source?: any) {\n\n        if (!source) { return Table.empty<T>(); }\n\n        let reader = RecordBatchReader.from<T>(source) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty<T>() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty<T>();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType; } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromVectors<T extends { [key: string]: DataType; } = any>(vectors: VType<T[keyof T]>[], names?: (keyof T)[]) {\n        return new Table(RecordBatch.from(vectors, names));\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType; } = any>(struct: Vector<Struct<T>>) {\n        const schema = new Schema<T>(struct.type.children);\n        const chunks = (struct instanceof ChunkedVector ? struct.chunks : [struct]) as VType<Struct<T>>[];\n        return new Table(schema, chunks.map((chunk) => new RecordBatch(schema, chunk.data)));\n    }\n\n    protected _schema: Schema;\n    protected _length: number;\n    protected _numCols: number;\n    // List of inner RecordBatches\n    protected _batches: RecordBatch<T>[];\n    // List of inner Vectors, possibly spanning batches\n    protected readonly _columns: Vector<any>[] = [];\n    // Union of all inner RecordBatches into one RecordBatch, possibly chunked.\n    // If the Table has just one inner RecordBatch, this points to that.\n    // If the Table has multiple inner RecordBatches, then this is a Chunked view\n    // over the list of RecordBatches. This allows us to delegate the responsibility\n    // of indexing, iterating, slicing, and visiting to the Nested/Chunked Data/Views.\n    protected _batchesUnion: Vector<Struct<T>>;\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema, batches: RecordBatch<T>[]);\n    constructor(schema: Schema, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema = null!;\n\n        if (args[0] instanceof Schema) {\n            schema = args.shift();\n        }\n\n        let batches = args.reduce(function flatten(xs: any[], x: any): any[] {\n            return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x: any): x is RecordBatch<T> => x instanceof RecordBatch);\n\n        if (!schema && !(schema = batches[0] && batches[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch with a Schema');\n        }\n\n        this._schema = schema;\n        this._batches = batches;\n        this._batchesUnion = batches.length == 0\n            ? new RecordBatch<T>(schema, 0, [])\n            : batches.length === 1 ? batches[0]\n            : ChunkedVector.concat<Struct<T>>(...batches) as Vector<Struct<T>>;\n\n        this._length = this.batchesUnion.length;\n        this._numCols = this.schema.fields.length;\n    }\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get numCols() { return this._numCols; }\n    public get batches() { return this._batches; }\n    public get batchesUnion() { return this._batchesUnion; }\n\n    public get(index: number): Struct<T>['TValue'] {\n        return this.batchesUnion.get(index)!;\n    }\n    public getColumn<R extends keyof T>(name: R): Vector<T[R]> | null {\n        return this.getColumnAt(this.getColumnIndex(name)) as Vector<T[R]> | null;\n    }\n    public getColumnAt<T extends DataType = any>(index: number): Vector<T> | null {\n        if (index < 0 || index >= this.numCols) {\n            return null;\n        }\n        if (this.batches.length === 1) {\n            return this.batches[0].getChildAt<T>(index) as Vector<T> | null;\n        }\n        return new Column<T>(\n            this.schema.fields[index] as Field<T>,\n            this.batches.map((b) => b.getChildAt<T>(index)! as Vector<T>));\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    public [Symbol.iterator]() {\n        return this.batchesUnion[Symbol.iterator]() as IterableIterator<RowLike<T>>;\n    }\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return writer.writeAll(this.batches).toUint8Array(true);\n    }\n    public count(): number {\n        return this.length;\n    }\n    public select(...columnNames: string[]) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n        this.vector = batch.getChildAt(this.colidx)!;\n        return this.vector.get.bind(this.vector);\n    }\n}\n\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[]\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p)\n        }, [])\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p)\n        }, [])\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Vector as V } from '../interfaces';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { Table, DataFrame as DF } from '../table';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\nexport type BindFunc = (batch: RecordBatch) => void;\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.scan = tableScan;\nTable.prototype.filter = tableFilter;\nTable.prototype.countBy = tableCountBy;\n\ndeclare module '../table' {\n    interface Table<T extends { [key: string]: DataType } = any> {\n        filter(predicate: Predicate): DF;\n        countBy(name: Col | string): CountByResult;\n        scan(next: NextFunc, bind?: BindFunc): void;\n    }\n}\n  \nexport class Dataframe<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): DF<T> {\n        return new FilteredDataFrame<T>(this.batches, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        const schema = new Schema<{ values: T, counts: TCount }>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nexport class FilteredDataFrame<T extends { [key: string]: DataType; } = any> implements DF<T> {\n    private predicate: Predicate;\n    private batches: RecordBatch<T>[];\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): DF<T> {\n        return new FilteredDataFrame<T>(\n            this.batches,\n            this.predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n    \n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n\nfunction tableScan(this: Table, next: NextFunc, bind?: BindFunc) {\n    return new Dataframe(this.batches).scan(next, bind);\n}\n\nfunction tableFilter(this: Table, predicate: Predicate): DF {\n    return new Dataframe(this.batches).filter(predicate);\n}\n\nfunction tableCountBy(this: Table, name: Col | string) {\n    return new Dataframe(this.batches).countBy(name);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table, DataFrame } from './table';\nexport { Column } from './column';\nexport { Schema, Field } from './schema';\nexport { Visitor } from './visitor';\nexport {\n    Row,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    ChunkedVector,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { Dataframe, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_buffer_ from './util/buffer';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\nexport const util = {\n    ...util_int_,\n    ...util_bit_,\n    ...util_buffer_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from './type';\nimport streamAdapters from './io/adapters';\nimport { RecordBatch } from './recordbatch';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { ReadableDOMStreamOptions } from './io/interfaces';\nimport { isIterable, isAsyncIterable } from './util/compat';\nimport { AsyncByteStream, AsyncByteQueue } from './io/stream';\n\nstreamAdapters.toReadableDOMStream = toReadableDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table, DataFrame,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    ChunkedVector,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    Dataframe, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util\n} from './Arrow';\n\nfunction recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>() {\n\n    const through = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await through.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(through), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from(through)).open();\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n\nfunction recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>>,\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const through = new AsyncByteQueue();\n    const writer = new this<T>().reset(through);\n    const reader = new AsyncByteStream(through);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await through.close(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, readableStrategy);\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            // Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n            controller.enqueue((buf.buffer.byteLength !== 0) ? buf : buf.slice());\n            if (size != null && (size -= buf.byteLength) <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n\nfunction toReadableDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    throw new Error(`toReadableDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<T> | null = null;\n        while ((size == null || size-- > 0) && !(r = it.next()).done) {\n            controller.enqueue(r.value);\n        }\n        r && r.done && controller.close();\n    }\n}\n\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<T> | null = null;\n        while ((size == null || size-- > 0) && !(r = await it.next()).done) {\n            controller.enqueue(r.value);\n        }\n        r && r.done && controller.close();\n    }\n}\n"],"sourceRoot":""}