{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap_141cfa76cb0ec65876ad","type.ts","vector.ts","util/bit.ts","vector/flat.ts","fb/Schema.ts","tslib/tslib.es6.js","flatbuffers/js/flatbuffers.mjs","ipc/metadata.ts","visitor.ts","data.ts","recordbatch.ts","fb/Message.ts","vector/chunked.ts","ipc/reader/vector.ts","ipc/magic.ts","vector/validity.ts","vector/dictionary.ts","vector/list.ts","text-encoding-utf-8/lib/encoding.lib.js","vector/nested.ts","util/int.ts","util/node.ts","predicate.ts","ipc/reader/arrow.ts","ipc/reader/node.ts","fb/File.ts","ipc/writer/binary.ts","Arrow.ts","table.ts","ipc/reader/json.ts","ipc/reader/binary.ts","ipc/writer/arrow.ts","util/compat.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","S","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Type","__WEBPACK_IMPORTED_MODULE_4__visitor__","ArrowType","__WEBPACK_IMPORTED_MODULE_2_flatbuffers__","Long","__WEBPACK_IMPORTED_MODULE_0__fb_Schema__","apache","arrow","flatbuf","DateUnit","TimeUnit","Precision","UnionMode","VectorType","IntervalUnit","MessageHeader","__WEBPACK_IMPORTED_MODULE_1__fb_Message__","MetadataVersion","Schema","[object Object]","fields","metadata","version","V4","dictionaries","Map","vectors","map","v","Field","type","bodyLength","_bodyLength","headerType","_headerType","fieldNames","namesToKeep","reduce","xs","x","create","newDictFields","newFields","filter","f","forEach","dictId","set","Symbol","toStringTag","nullable","typeId","TType","X","indices","DataType","isDictionary","__webpack_exports__","children","Null","Int","Float","Binary","Utf8","Bool","Decimal","Date","Time","Timestamp","Interval","List","Struct","Union","DenseUnion","SparseUnion","FixedSizeBinary","FixedSizeList","Dictionary","visitor","visitTypeInline","proto","ArrayType","Array","super","isSigned","bitWidth","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","precision","HALF","SINGLE","Float32Array","DOUBLE","Float64Array","scale","Date_","unit","timezone","valueType","valueField","join","mode","typeIds","Sparse","Dense","byteWidth","listSize","Map_","keysSorted","dictionary","id","isOrdered","__WEBPACK_IMPORTED_MODULE_3__ipc_metadata__","getId","low","__WEBPACK_IMPORTED_MODULE_9__util_bit__","Vector","data","view","nulls","length","__WEBPACK_IMPORTED_MODULE_0__data__","__WEBPACK_IMPORTED_MODULE_3__vector_chunked__","__WEBPACK_IMPORTED_MODULE_4__vector_validity__","nullBitmap","nullCount","createVector","source","others","a","b","concat","toArray","clone","constructor","index","isValid","value","indexOf","iterator","Boolean","vecs","chunkVectors","offsets","computeOffsets","chunksLength","chunkedData","begin","end","size","total","from","to","isFinite","slicedData","slice","Math","min","__WEBPACK_IMPORTED_MODULE_1__visitor__","FlatVector","values","asInt32","offset","stride","__WEBPACK_IMPORTED_MODULE_2__type__","int32s","IntVector","__WEBPACK_IMPORTED_MODULE_8__vector_flat__","ListVectorBase","valueOffsets","NestedVector","getChildAt","childData","_childData","chunks","cols","chunk","_","push","NullVector","BoolVector","defaultView","is64","TypeError","FloatVector","DateVector","DAY","MILLISECOND","DecimalVector","TimeVector","TimestampVector","SECOND","MICROSECOND","NANOSECOND","IntervalVector","YEAR_MONTH","BinaryVector","__WEBPACK_IMPORTED_MODULE_6__vector_list__","Utf8Vector","FixedSizeBinaryVector","ListVector","FixedSizeListVector","MapVector","__WEBPACK_IMPORTED_MODULE_7__vector_nested__","StructVector","UnionVector","DictionaryVector","__WEBPACK_IMPORTED_MODULE_5__vector_dictionary__","idxs","dict","key","VectorLoader","_type","getBit","_data","_index","byte","bit","iterateBits","bytes","context","byteIndex","remaining","popcnt_uint32","uint32","alignment","padding","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","arr","byteOffset","byteLength","cnt","pos","DataView","buffer","len","getUint32","getUint16","getUint8","popcnt_array","__WEBPACK_IMPORTED_MODULE_0__util_bit__","FlatView","subarray","search","boolBitIndex","PrimitiveView","getValue","setValue","FixedSizeView","every","epochMillisecondsToDate","epochDaysToMs","epochDaysToDate","valueOf","epochMillisecondsLongToMs","epochMillisecondsLongToDate","epochMs","epochSecondsToMs","epochMicrosecondsLongToMs","epochNanosecondsLongToMs","interval","org","Endianness","bb_pos","bb","obj","__init","readInt32","position","builder","startObject","endObject","Struct_","__offset","addFieldInt32","readInt8","addFieldInt8","readInt16","__vector","__vector_len","addFieldInt16","typeIdsOffset","addFieldOffset","startVector","addInt32","endVector","numElems","FloatingPoint","optionalEncoding","__string","timezoneOffset","VectorLayout","OFFSET","KeyValue","keyOffset","valueOffset","DictionaryEncoding","readInt64","createLong","__indirect","addFieldInt64","indexTypeOffset","readUint8","NONE","__union","nameOffset","typeType","typeOffset","dictionaryOffset","childrenOffset","addOffset","layoutOffset","customMetadataOffset","Buffer","prep","writeInt64","Little","endianness","fieldsOffset","finish","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","asyncIterator","g","q","verb","resume","r","__await","fulfill","settle","shift","__values","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","Ar","Sr","int32","float32","float64","isLittleEndian","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","additional_bytes","align_size","capacity","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeFloat32","writeFloat64","addInt8","addInt16","addInt64","addFloat32","addFloat64","voffset","defaultValue","slot","addFieldFloat32","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","setPosition","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","j","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","elem_size","num_elems","createString","utf8","codePoint","bytes_","position_","readUint16","readUint32","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","vtable_offset","t","opt_encoding","UTF8_BYTES","String","fromCharCode","__has_identifier","ident","__WEBPACK_IMPORTED_MODULE_1__type__","dictionaryBatches","recordBatches","schema","metaDataLength","Message","RecordBatch","DictionaryBatch","nodes","buffers","isDelta","atomicDictionaryId","Ti","_i","__WEBPACK_IMPORTED_MODULE_0__type__","acceptTypeVisitor","types","visit","visitNull","visitInt","visitFloat","visitBinary","visitUtf8","visitBool","visitDecimal","visitDate","visitTime","visitTimestamp","visitInterval","visitList","visitStruct","visitUnion","visitFixedSizeBinary","visitFixedSizeList","visitMap","visitDictionary","vector","acceptVectorVisitor","toTypedArray","ArrayBuffer","isView","BYTES_PER_ELEMENT","BaseData","floor","max","_nullCount","VALIDITY","sliceInternal","TYPE","sliceData","sliceOffsets","DATA","FlatData","FlatListData","DictionaryData","_indices","_dictionary","_offset","_length","NestedData","child","SingleNestedData","valueChildData","_valuesData","ListData","UnionData","SparseUnionData","DenseUnionData","ChunkedData","chunkOffsets","_chunkVectors","_chunkOffsets","chunkData","_chunkData","vec","chunkSlices","childIndex","numChildren","childLength","childOffset","childVectors","childOffsets","__WEBPACK_IMPORTED_MODULE_2__data__","__WEBPACK_IMPORTED_MODULE_1__vector__","args","numRows","col","numCols","columnNames","select","__WEBPACK_IMPORTED_MODULE_0__Schema__","FieldNode","null_count","nodesOffset","buffersOffset","dataOffset","V1","headerOffset","__WEBPACK_IMPORTED_MODULE_0__vector__","ChunkedView","_children","mid","numChunks","sources","sourcesLen","target","setValues","arraySet","typedArraySet","dstIdx","srcIdx","srcLen","messages","message","vs","loader","readRecordBatch","messages_1_1","messages_1","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_6__type__","__WEBPACK_IMPORTED_MODULE_4__metadata__","isRecordBatch","__WEBPACK_IMPORTED_MODULE_2__recordbatch__","visitFields","isDictionaryBatch","dictionaryId","dictionaryDataType","dictionaryVector","has","__WEBPACK_IMPORTED_MODULE_3__visitor__","visitNullType","visitFlatType","visitFlatList","visitBoolType","visitListType","visitNestedType","visitUnionType","visitFixedSizeListType","__WEBPACK_IMPORTED_MODULE_5__data__","getBufferMetadata","readData","getFieldMetadata","readNullBitmap","readOffsets","readTypeIds","MAGIC","MAGIC_STR","magicLength","magicAndPadding","magicX2AndPadding","ValidityView","nullBitIndex","getNullable","DictionaryView","__WEBPACK_IMPORTED_MODULE_1_text_encoding_utf_8__","encodeUtf8","encoder","encode","bind","decodeUtf8","decoder","decode","ListViewBase","getList","setList","VariableListViewBase","idx","inRange","ToDictionary","undefined","end_of_stream","Stream","tokens","zs","read","$s","token","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","TextDecoder","encoding","options","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","Cs","input","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","prepend","code_point","input_stream","code_points","endOfStream","cp","codePointsToString","Ms","opt_string","count","temp","string","u","stringToCodePoints","NestedView","JSON","stringify","getNested","setNested","UnionView","getChildValue","setChildValue","_valueOffsets","RowView","MapRowView","rowIndex","_typeIds","carryBit16","intAsHex","toString","kInt32DecimalDigits","kPowersOfTen","BaseInt64","L","R","product","lessThan","Uint64","_times","_plus","left","right","times","plus","Int64","this_high","other_high","str","out_buffer","negate","startsWith","out","posn","group","parseInt","substr","multiple","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","PipeIterator","error","throw","return","res","qs","write","err","emit","wait","AsyncPipeIterator","eval","stdout","Literal","Col","CustomPredicate","Value","Equals","LTeq","GTeq","Not","ge","le","eq","batch","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","ands","_batch","rtrn","left_func","right_func","lit","col_func","lastDictionary","reverseLookup","lastKey","getKey","func","bind_","parse","__WEBPACK_IMPORTED_MODULE_4__binary__","__WEBPACK_IMPORTED_MODULE_1__json__","__WEBPACK_IMPORTED_MODULE_5__vector__","_b","_a","readAsync","__WEBPACK_IMPORTED_MODULE_2__node__","recordBatch","bytesRead","messageLength","grown","getInt32","_Message","getRootAsMessage","__WEBPACK_IMPORTED_MODULE_1__magic__","__WEBPACK_IMPORTED_MODULE_3__fb_Message__","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","serializeMessage","getColumn","serializeDictionaryBatch","batches","serializeRecordBatch","metadataLength","__WEBPACK_IMPORTED_MODULE_3__util_bit__","__WEBPACK_IMPORTED_MODULE_2__magic__","Ou","footer","_Footer","finishFooterBuffer","node","writeSchema","startRecordBatchesVector","mapReverse","rb","writeBlock","dictionaryBatchesOffset","startDictionariesVector","db","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","endFooter","writeFooter","footerBytes","serializeFooter","setInt32","platformIsLittleEndian","__WEBPACK_IMPORTED_MODULE_9__fb_Message__","Bu","fieldNodes","Vu","buffersMeta","RecordBatchSerializer","visitRecordBatch","__WEBPACK_IMPORTED_MODULE_5__type__","concatBuffersWithMetadata","__WEBPACK_IMPORTED_MODULE_0__recordbatch__","rbMeta","finishMessageBuffer","messageHeaderOffset","isSchema","writeRecordBatch","_DictionaryBatch","startDictionaryBatch","addId","addIsDelta","addData","endDictionaryBatch","writeDictionaryBatch","startMessage","addHeader","addHeaderType","addBodyLength","endMessage","writeMessage","metadataBytes","dataByteLength","messageBytes","RangeError","nullBitmapAlignment","getTruncatedBitmap","addBuffer","_nullz","visitBoolVector","visitFlatVector","visitFlatListVector","visitListVector","visitNestedVector","xt","sliceOffset","maxChildTypeId","childLengths","fill","shiftedOffsets","unshiftedOffsets","getZeroBasedValueOffsets","bitmap","scaledLength","firstOffset","lastOffset","alignedLength","startOffset","destOffsets","__WEBPACK_IMPORTED_MODULE_6_flatbuffers__","_Block","__WEBPACK_IMPORTED_MODULE_7__fb_File__","_Field","__WEBPACK_IMPORTED_MODULE_8__fb_Schema__","_Schema","_Buffer","_KeyValue","_FieldNode","_RecordBatch","_DictionaryEncoding","_Endianness","_Null","_Int","_FloatingPoint","_Binary","_Bool","_Utf8","_Decimal","_Date","_Time","_Timestamp","_Interval","_List","_Struct","_Union","_FixedSizeBinary","_FixedSizeList","_Map","TypeSerializer","_node","startNull","endNull","startInt","addBitWidth","addIsSigned","endInt","startFloatingPoint","addPrecision","endFloatingPoint","startBinary","endBinary","startBool","endBool","startUtf8","endUtf8","startDecimal","addScale","endDecimal","startDate","addUnit","endDate","startTime","endTime","startTimestamp","addTimezone","endTimestamp","startInterval","endInterval","startList","endList","startStruct_","endStruct_","startTypeIdsVector","createTypeIdsVector","startUnion","addMode","addTypeIds","endUnion","indexType","startDictionaryEncoding","addIsOrdered","addIndexType","endDictionaryEncoding","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startFixedSizeList","addListSize","endFixedSizeList","startMap","addKeysSorted","endMap","totalByteLength","realBufferLength","createBlock","fieldOffsets","writeField","createChildrenVector","createCustomMetadataVector","k","val","startKeyValue","addKey","addValue","endKeyValue","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","addCustomMetadata","endField","startFieldsVector","createFieldsVector","startSchema","addFields","addEndianness","Big","endSchema","startNodesVector","createFieldNode","writeFieldNode","startBuffersVector","b_","createBuffer","writeBuffer","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","callbackfn","setInt16","util","enum_","predicate","__WEBPACK_IMPORTED_MODULE_3__util_int__","packBools","__WEBPACK_IMPORTED_MODULE_4__util_bit__","__WEBPACK_IMPORTED_MODULE_5__util_node__","__WEBPACK_IMPORTED_MODULE_1__data__","BoolData","Int8","Int16","Int32","Uint8","Uint16","Uint32","Float16","Float32","Float64","__WEBPACK_IMPORTED_MODULE_2__vector__","TypeVisitor","__WEBPACK_IMPORTED_MODULE_6__visitor__","VectorVisitor","__WEBPACK_IMPORTED_MODULE_7__vector_view__","ListView","FixedSizeListView","BinaryView","Utf8View","DenseUnionView","StructView","MapView","NullView","BoolView","Float16View","DateDayView","DateMillisecondView","TimestampDayView","TimestampSecondView","TimestampMillisecondView","TimestampMicrosecondView","TimestampNanosecondView","IntervalYearMonthView","IntervalYearView","IntervalMonthView","__WEBPACK_IMPORTED_MODULE_8__predicate__","custom","Arrow","__WEBPACK_IMPORTED_MODULE_12__ipc_reader_arrow__","__WEBPACK_IMPORTED_MODULE_11__ipc_reader_node__","__WEBPACK_IMPORTED_MODULE_13__ipc_writer_binary__","__WEBPACK_IMPORTED_MODULE_9__recordbatch__","__WEBPACK_IMPORTED_MODULE_10__table__","fromAsync","fromStruct","empty","add","fromString","isNull","isInt","isFloat","isBinary","isUtf8","isBool","isDecimal","isDate","isTime","isTimestamp","isInterval","isList","isStruct","isUnion","isDenseUnion","isSparseUnion","isFixedSizeBinary","isFixedSizeList","isMap","__WEBPACK_IMPORTED_MODULE_9__vector_chunked__","_columns","__WEBPACK_IMPORTED_MODULE_3__type__","__WEBPACK_IMPORTED_MODULE_1__recordbatch__","batchesUnion","union","__WEBPACK_IMPORTED_MODULE_4__ipc_reader_arrow__","__WEBPACK_IMPORTED_MODULE_7__util_compat__","struct","getColumnAt","getColumnIndex","findIndex","FilteredDataFrame","numBatches","batchIndex","count_by","__WEBPACK_IMPORTED_MODULE_2__predicate__","__WEBPACK_IMPORTED_MODULE_8__vector__","counts","keys","CountByResult","separator","row","rowsToString","__WEBPACK_IMPORTED_MODULE_5__ipc_writer_arrow__","__WEBPACK_IMPORTED_MODULE_6__util_node__","header","maxColumnWidths","leftPad","tableRowsToString","and","json","dictionaryFields","fieldsFromJSON","customMetadata","schemaFromJSON","__WEBPACK_IMPORTED_MODULE_5__metadata__","recordBatchFromJSON","JSONDataLoader","flattenDataSources","arrayIterator","__WEBPACK_IMPORTED_MODULE_8__data__","__WEBPACK_IMPORTED_MODULE_0_flatbuffers__","column","utf8Encoder","__WEBPACK_IMPORTED_MODULE_4_text_encoding_utf_8__","__WEBPACK_IMPORTED_MODULE_2__util_bit__","$u","int64DataFromJSON","decimalDataFromJSON","joined","binaryDataFromJSON","__WEBPACK_IMPORTED_MODULE_7__fb_Schema__","fieldNodesFromJSON","validity","buffersFromJSON","fs","dataType","keysMeta","dictMeta","typeFromJSON","intFromJSON","fieldFromJSON","entries","namesToTypeMap","null","int","floatingpoint","binary","bool","decimal","date","time","timestamp","list","fixedsizebinary","fixedsizelist","floatingPointFromJSON","dateFromJSON","timeFromJSON","timestampFromJSON","intervalFromJSON","listFromJSON","structFromJSON","unionFromJSON","fixedSizeBinaryFromJSON","fixedSizeListFromJSON","mapFromJSON","readMessages","toByteBuffer","Ru","readSchema","BinaryDataLoader","sources_1_1","sources_1","__WEBPACK_IMPORTED_MODULE_8__fb_Message__","__WEBPACK_IMPORTED_MODULE_1_flatbuffers__","messageOffset","footerLength","footerOffset","fileLength","__WEBPACK_IMPORTED_MODULE_3__magic__","getRootAsFooter","blocks","dictionariesLength","dictionaryBatchesFromFooter","recordBatchesLength","recordBatchesFromFooter","fieldsFromSchema","footerFromByteBuffer","readFileSchema","readMessage","readFileMessages","readStreamSchema","readStreamMessages","schemaFromMessage","recordBatchFromMessage","dictionaryBatchFromMessage","messageFromByteBuffer","__WEBPACK_IMPORTED_MODULE_6__fb_File__","nodesLength","fieldNodesFromRecordBatch","buffersLength","bufferFromRecordBatch","buffersFromRecordBatch","fieldsLength","fieldsFromField","childrenLength","typeFromField","intFromField","parent","entry","customMetadataLength","floatFromField","dateFromField","timeFromField","timestampFromField","intervalFromField","listFromField","structFromField","typeIdsArray","unionFromField","fixedSizeBinaryFromField","fixedSizeListFromField","mapFromField","concatBuffers","__WEBPACK_IMPORTED_MODULE_0__binary__"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 141cfa76cb0ec65876ad","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\nimport { Vector, View } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { DictionaryBatch } from './ipc/metadata';\nimport { TypeVisitor, VisitorNode } from './visitor';\n\nexport import Long = flatbuffers.Long;\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\nexport class Schema {\n    public static from(vectors: Vector[]) {\n        return new Schema(vectors.map((v, i) => new Field('' + i, v.type)));\n    }\n    // @ts-ignore\n    protected _bodyLength: number;\n    // @ts-ignore\n    protected _headerType: MessageHeader;\n    public readonly fields: Field[];\n    public readonly version: MetadataVersion;\n    public readonly metadata?: Map<string, string>;\n    public readonly dictionaries: Map<number, Field<Dictionary>>;\n    constructor(fields: Field[],\n                metadata?: Map<string, string>,\n                version: MetadataVersion = MetadataVersion.V4,\n                dictionaries: Map<number, Field<Dictionary>> = new Map()) {\n        this.fields = fields;\n        this.version = version;\n        this.metadata = metadata;\n        this.dictionaries = dictionaries;\n    }\n    public get bodyLength() { return this._bodyLength; }\n    public get headerType() { return this._headerType; }\n    public select(...fieldNames: string[]): Schema {\n        const namesToKeep = fieldNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        const newDictFields = new Map(), newFields = this.fields.filter((f) => namesToKeep[f.name]);\n        this.dictionaries.forEach((f, dictId) => (namesToKeep[f.name]) && newDictFields.set(dictId, f));\n        return new Schema(newFields, this.metadata, this.version, newDictFields);\n    }\n    public static [Symbol.toStringTag] = ((prototype: Schema) => {\n        prototype._bodyLength = 0;\n        prototype._headerType = MessageHeader.Schema;\n        return 'Schema';\n    })(Schema.prototype);\n}\n\nexport class Field<T extends DataType = DataType> {\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata?: Map<string, string> | null;\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata;\n    }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public get typeId(): T['TType'] { return this.type.TType; }\n    public get [Symbol.toStringTag](): string { return 'Field'; }\n    public get indices(): T | Int<any> {\n        return DataType.isDictionary(this.type) ? this.type.indices : this.type;\n    }\n}\n\nexport type TimeBitWidth = 32 | 64;\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n\nexport type NumericType = Int | Float | Date_ | Time | Interval | Timestamp;\nexport type FixedSizeType = Int64 |  Uint64 | Decimal | FixedSizeBinary;\nexport type PrimitiveType = NumericType | FixedSizeType;\n\nexport type FlatListType = Utf8 | Binary; // <-- these types have `offset`, `data`, and `validity` buffers\nexport type FlatType = Bool | PrimitiveType | FlatListType; // <-- these types have `data` and `validity` buffers\nexport type ListType = List<any>; // <-- these types have `offset` and `validity` buffers\nexport type NestedType = Map_ | Struct | List<any> | FixedSizeList<any> | Union<any>; // <-- these types have `validity` buffer and nested childData\nexport type SingleNestedType = List<any> | FixedSizeList<any>; // <-- these are nested types that can only have a single child\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\n export enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n    Dictionary      = 'Dictionary',  // Dictionary aka Category type\n    DenseUnion      = 'DenseUnion',  // Dense Union of logical types\n    SparseUnion     = 'SparseUnion',  // Sparse Union of logical types\n}\n\nexport interface DataType<TType extends Type = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n}\n\nexport abstract class DataType<TType extends Type = any> implements Partial<VisitorNode> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    static            isNull (x: any): x is Null            { return x && x.TType === Type.Null;            }\n    static             isInt (x: any): x is Int             { return x && x.TType === Type.Int;             }\n    static           isFloat (x: any): x is Float           { return x && x.TType === Type.Float;           }\n    static          isBinary (x: any): x is Binary          { return x && x.TType === Type.Binary;          }\n    static            isUtf8 (x: any): x is Utf8            { return x && x.TType === Type.Utf8;            }\n    static            isBool (x: any): x is Bool            { return x && x.TType === Type.Bool;            }\n    static         isDecimal (x: any): x is Decimal         { return x && x.TType === Type.Decimal;         }\n    static            isDate (x: any): x is Date_           { return x && x.TType === Type.Date;            }\n    static            isTime (x: any): x is Time            { return x && x.TType === Type.Time;            }\n    static       isTimestamp (x: any): x is Timestamp       { return x && x.TType === Type.Timestamp;       }\n    static        isInterval (x: any): x is Interval        { return x && x.TType === Type.Interval;        }\n    static            isList (x: any): x is List            { return x && x.TType === Type.List;            }\n    static          isStruct (x: any): x is Struct          { return x && x.TType === Type.Struct;          }\n    static           isUnion (x: any): x is Union           { return x && x.TType === Type.Union;           }\n    static      isDenseUnion (x: any): x is DenseUnion      { return x && x.TType === Type.DenseUnion;      }\n    static     isSparseUnion (x: any): x is SparseUnion     { return x && x.TType === Type.SparseUnion;     }\n    static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.TType === Type.FixedSizeBinary; }\n    static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.TType === Type.FixedSizeList;   }\n    static             isMap (x: any): x is Map_            { return x && x.TType === Type.Map;             }\n    static      isDictionary (x: any): x is Dictionary      { return x && x.TType === Type.Dictionary;      }\n\n    constructor(public readonly TType: TType,\n                public readonly children?: Field[]) {}\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    constructor() {\n        super(Type.Null);\n    }\n    public toString() { return `Null`; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\nexport interface Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> { TArray: TArrayType; TValue: TValueType; }\nexport class Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> {\n    constructor(public readonly isSigned: boolean,\n                public readonly bitWidth: IntBitWidth) {\n        super(Type.Int);\n    }\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.bitWidth) {\n            case  8: return (this.isSigned ?  Int8Array :  Uint8Array) as any;\n            case 16: return (this.isSigned ? Int16Array : Uint16Array) as any;\n            case 32: return (this.isSigned ? Int32Array : Uint32Array) as any;\n            case 64: return (this.isSigned ? Int32Array : Uint32Array) as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int) => {\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int.prototype);\n}\n\nexport class Int8 extends Int<number, Int8Array> { constructor() { super(true, 8); } }\nexport class Int16 extends Int<number, Int16Array> { constructor() { super(true, 16); } }\nexport class Int32 extends Int<number, Int32Array> { constructor() { super(true, 32); } }\nexport class Int64 extends Int<Int32Array, Int32Array> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int<number, Uint8Array> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int<number, Uint16Array> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int<number, Uint32Array> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int<Uint32Array, Uint32Array> { constructor() { super(false, 64); } }\n\nexport interface Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> { TArray: TArrayType; TValue: number; }\nexport class Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> {\n    constructor(public readonly precision: Precision) {\n        super(Type.Float);\n    }\n    // @ts-ignore\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array as any;\n            case Precision.SINGLE: return Float32Array as any;\n            case Precision.DOUBLE: return Float64Array as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Uint16Array> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Float32Array> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Float64Array> { constructor() { super(Precision.DOUBLE); } }\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super(Type.Binary);\n    }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super(Type.Utf8);\n    }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super(Type.Bool);\n    }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super(Type.Decimal);\n    }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Date_ extends DataType<Type.Date> { TArray: Int32Array; TValue: Date; }\nexport class Date_ extends DataType<Type.Date> {\n    constructor(public readonly unit: DateUnit) {\n        super(Type.Date);\n    }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport interface Time extends DataType<Type.Time> { TArray: Uint32Array; TValue: number; }\nexport class Time extends DataType<Type.Time> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly bitWidth: TimeBitWidth) {\n        super(Type.Time);\n    }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time.prototype);\n}\n\nexport interface Timestamp extends DataType<Type.Timestamp> { TArray: Int32Array; TValue: number; }\nexport class Timestamp extends DataType<Type.Timestamp> {\n    constructor(public unit: TimeUnit, public timezone?: string | null) {\n        super(Type.Timestamp);\n    }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp.prototype);\n}\n\nexport interface Interval extends DataType<Type.Interval> { TArray: Int32Array; TValue: Int32Array; }\nexport class Interval extends DataType<Type.Interval> {\n    constructor(public unit: IntervalUnit) {\n        super(Type.Interval);\n    }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval.prototype);\n}\n\nexport interface List<T extends DataType = any> extends DataType<Type.List>  { TArray: any; TValue: Vector<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List> {\n    constructor(public children: Field[]) {\n        super(Type.List, children);\n    }\n    public toString() { return `List<${this.valueType}>`; }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct extends DataType<Type.Struct> { TArray: any; TValue: View<any>; }\nexport class Struct extends DataType<Type.Struct> {\n    constructor(public children: Field[]) {\n        super(Type.Struct, children);\n    }\n    public toString() { return `Struct<${this.children.map((f) => f.type).join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\nexport interface Union<TType extends Type = any> extends DataType<TType> { TArray: Int8Array; TValue: any; }\nexport class Union<TType extends Type = any> extends DataType<TType> {\n    constructor(public readonly mode: UnionMode,\n                public readonly typeIds: ArrowType[],\n                public readonly children: Field[]) {\n        super(<TType> (mode === UnionMode.Sparse ? Type.SparseUnion : Type.DenseUnion), children);\n    }\n    public toString() { return `${this[Symbol.toStringTag]}<${this.typeIds.map((x) => Type[x]).join(` | `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union) => {\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union.prototype);\n}\n\nexport class DenseUnion extends Union<Type.DenseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DenseUnion) => {\n        return proto[Symbol.toStringTag] = 'DenseUnion';\n    })(DenseUnion.prototype);\n}\n\nexport class SparseUnion extends Union<Type.SparseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: SparseUnion) => {\n        return proto[Symbol.toStringTag] = 'SparseUnion';\n    })(SparseUnion.prototype);\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super(Type.FixedSizeBinary);\n    }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: any; TValue: Vector<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> {\n    constructor(public readonly listSize: number,\n                public readonly children: Field[]) {\n        super(Type.FixedSizeList, children);\n    }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Map_ extends DataType<Type.Map> { TArray: Uint8Array; TValue: View<any>; }\nexport class Map_ extends DataType<Type.Map> {\n    constructor(public readonly keysSorted: boolean,\n                public readonly children: Field[]) {\n        super(Type.Map, children);\n    }\n    public toString() { return `Map<${this.children.join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\nexport interface Dictionary<T extends DataType = any> extends DataType<Type.Dictionary> { TArray: T['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly dictionary: T;\n    public readonly indices: Int<any>;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: Int<any>, id?: Long | number | null, isOrdered?: boolean | null) {\n        super(Type.Dictionary);\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? DictionaryBatch.getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get ArrayType() { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n\nexport interface TypedArrayConstructor<T extends TypedArray = TypedArray> {\n    readonly prototype: T;\n    readonly BYTES_PER_ELEMENT: number;\n    new (length: number): T;\n    new (elements: Iterable<number>): T;\n    new (arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): T;\n    new (buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n    of(...items: number[]): T;\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): T;\n}\n\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\nexport interface TypedArray extends Iterable<number> {\n    [index: number]: number;\n    readonly length: number;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly buffer: ArrayBufferLike;\n    readonly BYTES_PER_ELEMENT: number;\n    [Symbol.toStringTag]: any;\n    [Symbol.iterator](): IterableIterator<number>;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n    copyWithin(target: number, start: number, end?: number): this;\n    every(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): this;\n    filter(callbackfn: (value: number, index: number, array: TypedArray) => any, thisArg?: any): TypedArray;\n    find(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: TypedArray) => void, thisArg?: any): void;\n    includes(searchElement: number, fromIndex?: number): boolean;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    map(callbackfn: (value: number, index: number, array: TypedArray) => number, thisArg?: any): TypedArray;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reverse(): TypedArray;\n    set(array: ArrayLike<number>, offset?: number): void;\n    slice(start?: number, end?: number): TypedArray;\n    some(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: (a: number, b: number) => number): this;\n    subarray(begin: number, end?: number): TypedArray;\n    toLocaleString(): string;\n    toString(): string;\n}\n\n\n\n// WEBPACK FOOTER //\n// type.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data, ChunkedData, FlatData, BoolData, FlatListData, NestedData, DictionaryData } from './data';\nimport { VisitorNode, TypeVisitor, VectorVisitor } from './visitor';\nimport { DataType, ListType, FlatType, NestedType, FlatListType, TimeUnit } from './type';\nimport { IterableArrayLike, Precision, DateUnit, IntervalUnit, UnionMode } from './type';\n\nexport interface VectorLike { length: number; nullCount: number; }\n\nexport interface View<T extends DataType> {\n    clone(data: Data<T>): this;\n    isValid(index: number): boolean;\n    get(index: number): T['TValue'] | null;\n    set(index: number, value: T['TValue']): void;\n    toArray(): IterableArrayLike<T['TValue'] | null>;\n    indexOf(search: T['TValue']): number;\n    [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n}\n\nexport class Vector<T extends DataType = any> implements VectorLike, View<T>, VisitorNode {\n    public static create<T extends DataType>(data: Data<T>): Vector<T> {\n        return createVector(data);\n    }\n    public static concat<T extends DataType>(source?: Vector<T> | null, ...others: Vector<T>[]): Vector<T> {\n        return others.reduce((a, b) => a ? a.concat(b) : b, source!);\n    }\n    public type: T;\n    public length: number;\n    public readonly data: Data<T>;\n    public readonly view: View<T>;\n    constructor(data: Data<T>, view: View<T>) {\n        this.data = data;\n        this.type = data.type;\n        this.length = data.length;\n        let nulls: Uint8Array;\n        if ((<any> data instanceof ChunkedData) && !(view instanceof ChunkedView)) {\n            this.view = new ChunkedView(data);\n        } else if (!(view instanceof ValidityView) && (nulls = data.nullBitmap!) && nulls.length > 0 && data.nullCount > 0) {\n            this.view = new ValidityView(data, view);\n        } else {\n            this.view = view;\n        }\n    }\n\n    public get nullCount() { return this.data.nullCount; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get [Symbol.toStringTag]() {\n        return `Vector<${this.type[Symbol.toStringTag]}>`;\n    }\n    public toJSON(): any { return this.toArray(); }\n    public clone<R extends T>(data: Data<R>, view: View<R> = this.view.clone(data) as any): this {\n        return new (this.constructor as any)(data, view);\n    }\n    public isValid(index: number): boolean {\n        return this.view.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this.view.get(index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.view.set(index, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return this.view.toArray();\n    }\n    public indexOf(value: T['TValue']) {\n        return this.view.indexOf(value);\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return this.view[Symbol.iterator]();\n    }\n    public concat(...others: Vector<T>[]): this {\n        if ((others = others.filter(Boolean)).length === 0) {\n            return this;\n        }\n        const { view } = this;\n        const vecs = !(view instanceof ChunkedView)\n            ? [this, ...others]\n            : [...view.chunkVectors, ...others];\n        const offsets = ChunkedData.computeOffsets(vecs);\n        const chunksLength = offsets[offsets.length - 1];\n        const chunkedData = new ChunkedData(this.type, chunksLength, vecs, 0, -1, offsets);\n        return this.clone(chunkedData, new ChunkedView(chunkedData)) as this;\n    }\n    public slice(begin?: number, end?: number): this {\n        let { length } = this;\n        let size = (this.view as any).size || 1;\n        let total = length, from = (begin || 0) * size;\n        let to = (typeof end === 'number' ? end : total) * size;\n        if (to < 0) { to = total - (to * -1) % total; }\n        if (from < 0) { from = total - (from * -1) % total; }\n        if (to < from) { [from, to] = [to, from]; }\n        total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;\n        const slicedData = this.data.slice(from, Math.min(total, length));\n        return this.clone(slicedData, this.view.clone(slicedData)) as this;\n    }\n\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this.type);\n    }\n    public acceptVectorVisitor(visitor: VectorVisitor): any {\n        return VectorVisitor.visitTypeInline(visitor, this.type, this);\n    }\n}\n\nexport abstract class FlatVector<T extends FlatType> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public lows(): IntVector<Int32> { return this.asInt32(0, 2); }\n    public highs(): IntVector<Int32> { return this.asInt32(1, 2); }\n    public asInt32(offset: number = 0, stride: number = 2): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        if (offset > 0) {\n            data = data.slice(offset, this.length - offset);\n        }\n        const int32s = new IntVector(data, new PrimitiveView(data, stride));\n        int32s.length = this.length / stride | 0;\n        return int32s;\n    }\n}\n\nexport abstract class ListVectorBase<T extends (ListType | FlatListType)> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n    public getValueOffset(index: number) {\n        return this.valueOffsets[index];\n    }\n    public getValueLength(index: number) {\n        return this.valueOffsets[index + 1] - this.valueOffsets[index];\n    }\n}\n\nexport abstract class NestedVector<T extends NestedType> extends Vector<T>  {\n    // @ts-ignore\n    public readonly view: NestedView<T>;\n    // @ts-ignore\n    protected _childData: Data<any>[];\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return this.view.getChildAt<R>(index);\n    }\n    public get childData(): Data<any>[] {\n        let data: Data<T> | Data<any>[];\n        if ((data = this._childData)) {\n            // Return the cached childData reference first\n            return data as Data<any>[];\n        } else if (!(<any> (data = this.data) instanceof ChunkedData)) {\n            // If data isn't chunked, cache and return NestedData's childData\n            return this._childData = (data as NestedData<T>).childData;\n        }\n        // Otherwise if the data is chunked, concatenate the childVectors from each chunk\n        // to construct a single chunked Vector for each column. Then return the ChunkedData\n        // instance from each unified chunked column as the childData of a chunked NestedVector\n        const chunks = ((data as ChunkedData<T>).chunkVectors as NestedVector<T>[]);\n        return this._childData = chunks\n            .reduce<(Vector<T> | null)[][]>((cols, chunk) => chunk.childData\n            .reduce<(Vector<T> | null)[][]>((cols, _, i) => (\n                (cols[i] || (cols[i] = [])).push(chunk.getChildAt(i))\n            ) && cols || cols, cols), [] as Vector<T>[][])\n        .map((vecs) => Vector.concat<T>(...vecs).data);\n    }\n}\n\nimport { List, Binary, Utf8, Bool, } from './type';\nimport { Null, Int, Float, Decimal, Date_, Time, Timestamp, Interval } from './type';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, Float16, Float32, Float64 } from './type';\nimport { Struct, Union, SparseUnion, DenseUnion, FixedSizeBinary, FixedSizeList, Map_, Dictionary } from './type';\n\nimport { ChunkedView } from './vector/chunked';\nimport { ValidityView } from './vector/validity';\nimport { DictionaryView } from './vector/dictionary';\nimport { ListView, FixedSizeListView, BinaryView, Utf8View } from './vector/list';\nimport { UnionView, DenseUnionView, NestedView, StructView, MapView } from './vector/nested';\nimport { FlatView, NullView, BoolView, PrimitiveView, FixedSizeView, Float16View } from './vector/flat';\nimport { DateDayView, DateMillisecondView, IntervalYearMonthView } from './vector/flat';\nimport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './vector/flat';\nimport { packBools } from './util/bit';\n\nexport class NullVector extends Vector<Null> {\n    constructor(data: Data<Null>, view: View<Null> = new NullView(data)) {\n        super(data, view);\n    }\n}\n\nexport class BoolVector extends Vector<Bool> {\n    public static from(data: IterableArrayLike<boolean>) {\n        return new BoolVector(new BoolData(new Bool(), data.length, null, packBools(data)));\n    }\n    public get values() { return this.data.values; }\n    constructor(data: Data<Bool>, view: View<Bool> = new BoolView(data)) {\n        super(data, view);\n    }\n}\n\nexport class IntVector<T extends Int = Int<any>> extends FlatVector<T> {\n    public static from(data: Int8Array): IntVector<Int8>;\n    public static from(data: Int16Array): IntVector<Int16>;\n    public static from(data: Int32Array): IntVector<Int32>;\n    public static from(data: Uint8Array): IntVector<Uint8>;\n    public static from(data: Uint16Array): IntVector<Uint16>;\n    public static from(data: Uint32Array): IntVector<Uint32>;\n    public static from(data: Int32Array, is64: true): IntVector<Int64>;\n    public static from(data: Uint32Array, is64: true): IntVector<Uint64>;\n    public static from(data: any, is64?: boolean) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? new IntVector(new FlatData(new Int64(), data.length, null, data))\n                : new IntVector(new FlatData(new Uint64(), data.length, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return new IntVector(new FlatData(new Int8(), data.length, null, data));\n            case Int16Array: return new IntVector(new FlatData(new Int16(), data.length, null, data));\n            case Int32Array: return new IntVector(new FlatData(new Int32(), data.length, null, data));\n            case Uint8Array: return new IntVector(new FlatData(new Uint8(), data.length, null, data));\n            case Uint16Array: return new IntVector(new FlatData(new Uint16(), data.length, null, data));\n            case Uint32Array: return new IntVector(new FlatData(new Uint32(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    static defaultView<T extends Int>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<T>, view: View<T> = IntVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class FloatVector<T extends Float = Float<any>> extends FlatVector<T> {\n    public static from(data: Uint16Array): FloatVector<Float16>;\n    public static from(data: Float32Array): FloatVector<Float32>;\n    public static from(data: Float64Array): FloatVector<Float64>;\n    public static from(data: any) {\n        switch (data.constructor) {\n            case Uint16Array: return new FloatVector(new FlatData(new Float16(), data.length, null, data));\n            case Float32Array: return new FloatVector(new FlatData(new Float32(), data.length, null, data));\n            case Float64Array: return new FloatVector(new FlatData(new Float64(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n    static defaultView<T extends Float>(data: Data<T>): FlatView<any> {\n        return data.type.precision !== Precision.HALF ? new FlatView(data) : new Float16View(data as Data<Float16>);\n    }\n    constructor(data: Data<T>, view: View<T> = FloatVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class DateVector extends FlatVector<Date_> {\n    static defaultView<T extends Date_>(data: Data<T>) {\n        return data.type.unit === DateUnit.DAY ? new DateDayView(data) : new DateMillisecondView(data, 2);\n    }\n    constructor(data: Data<Date_>, view: View<Date_> = DateVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case DateUnit.DAY: return new IntVector(data, new TimestampDayView(data as any, 1) as any);\n            case DateUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class DecimalVector extends FlatVector<Decimal> {\n    constructor(data: Data<Decimal>, view: View<Decimal> = new FixedSizeView(data, 4)) {\n        super(data, view);\n    }\n}\n\nexport class TimeVector extends FlatVector<Time> {\n    static defaultView<T extends Time>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<Time>, view: View<Time> = TimeVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class TimestampVector extends FlatVector<Timestamp> {\n    constructor(data: Data<Timestamp>, view: View<Timestamp> = new FixedSizeView(data, 2)) {\n        super(data, view);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case TimeUnit.SECOND: return new IntVector(data, new TimestampSecondView(data as any, 1) as any);\n            case TimeUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n            case TimeUnit.MICROSECOND: return new IntVector(data, new TimestampMicrosecondView(data as any, 2) as any);\n            case TimeUnit.NANOSECOND: return new IntVector(data, new TimestampNanosecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized time unit \"${TimeUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class IntervalVector extends FlatVector<Interval> {\n    static defaultView<T extends Interval>(data: Data<T>) {\n        return data.type.unit === IntervalUnit.YEAR_MONTH ? new IntervalYearMonthView(data) : new FixedSizeView(data, 2);\n    }\n    constructor(data: Data<Interval>, view: View<Interval> = IntervalVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class BinaryVector extends ListVectorBase<Binary> {\n    constructor(data: Data<Binary>, view: View<Binary> = new BinaryView(data)) {\n        super(data, view);\n    }\n    public asUtf8() {\n        return new Utf8Vector((this.data as FlatListData<any>).clone(new Utf8()));\n    }\n}\n\nexport class FixedSizeBinaryVector extends FlatVector<FixedSizeBinary> {\n    constructor(data: Data<FixedSizeBinary>, view: View<FixedSizeBinary> = new FixedSizeView(data, data.type.byteWidth)) {\n        super(data, view);\n    }\n}\n\nexport class Utf8Vector extends ListVectorBase<Utf8> {\n    constructor(data: Data<Utf8>, view: View<Utf8> = new Utf8View(data)) {\n        super(data, view);\n    }\n    public asBinary() {\n        return new BinaryVector((this.data as FlatListData<any>).clone(new Binary()));\n    }\n}\n\nexport class ListVector<T extends DataType = DataType> extends ListVectorBase<List<T>> {\n    // @ts-ignore\n    public readonly view: ListView<T>;\n    constructor(data: Data<T>, view: View<List<T>> = new ListView(data)) {\n        super(data, view);\n    }\n    public getChildAt(index: number): Vector<T> | null {\n        return this.view.getChildAt<T>(index);\n    }\n}\n\nexport class FixedSizeListVector<T extends DataType = DataType> extends Vector<FixedSizeList<T>> {\n    // @ts-ignore\n    public readonly view: FixedSizeListView<T>;\n    constructor(data: Data<FixedSizeList<T>>, view: View<FixedSizeList<T>> = new FixedSizeListView(data)) {\n        super(data, view);\n    }\n    public getChildAt(index: number): Vector<T> | null {\n        return this.view.getChildAt<T>(index);\n    }\n}\n\nexport class MapVector extends NestedVector<Map_> {\n    constructor(data: Data<Map_>, view: View<Map_> = new MapView(data)) {\n        super(data, view);\n    }\n    public asStruct() {\n        return new StructVector((this.data as NestedData<any>).clone(new Struct(this.type.children)));\n    }\n}\n\nexport class StructVector extends NestedVector<Struct> {\n    constructor(data: Data<Struct>, view: View<Struct> = new StructView(data)) {\n        super(data, view);\n    }\n    public asMap(keysSorted: boolean = false) {\n        return new MapVector((this.data as NestedData<any>).clone(new Map_(keysSorted, this.type.children)));\n    }\n}\n\nexport class UnionVector<T extends (SparseUnion | DenseUnion) = any> extends NestedVector<T> {\n    constructor(data: Data<T>, view: View<T> = <any> (data.type.mode === UnionMode.Sparse ? new UnionView<SparseUnion>(data as Data<SparseUnion>) : new DenseUnionView(data as Data<DenseUnion>))) {\n        super(data, view);\n    }\n}\n\nexport class DictionaryVector<T extends DataType = DataType> extends Vector<Dictionary<T>> {\n    // @ts-ignore\n    public readonly indices: Vector<Int>;\n    // @ts-ignore\n    public readonly dictionary: Vector<T>;\n    constructor(data: Data<Dictionary<T>>, view: View<Dictionary<T>> = new DictionaryView<T>(data.dictionary, new IntVector(data.indices))) {\n        super(data as Data<any>, view);\n        if (view instanceof ValidityView) {\n            view = (view as any).view;\n        }\n        if (data instanceof DictionaryData && view instanceof DictionaryView) {\n            this.indices = view.indices;\n            this.dictionary = data.dictionary;\n        } else if (data instanceof ChunkedData && view instanceof ChunkedView) {\n            const chunks = view.chunkVectors as DictionaryVector<T>[];\n            // Assume the last chunk's dictionary data is the most up-to-date,\n            // including data from DictionaryBatches that were marked as deltas\n            this.dictionary = chunks[chunks.length - 1].dictionary;\n            this.indices = chunks.reduce<Vector<Int> | null>(\n                (idxs: Vector<Int> | null, dict: DictionaryVector<T>) =>\n                    !idxs ? dict.indices! : idxs.concat(dict.indices!),\n                null\n            )!;\n        } else {\n            throw new TypeError(`Unrecognized DictionaryVector view`);\n        }\n    }\n    public getKey(index: number) { return this.indices.get(index); }\n    public getValue(key: number) { return this.dictionary.get(key); }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n}\n\nexport const createVector = ((VectorLoader: new <T extends DataType>(data: Data<T>) => TypeVisitor) => (\n    <T extends DataType>(data: Data<T>) => TypeVisitor.visitTypeInline(new VectorLoader(data), data.type) as Vector<T>\n))(class VectorLoader<T extends DataType> extends TypeVisitor {\n    constructor(private data: Data<T>) { super(); }\n    visitNull           (_type: Null)            { return new NullVector(this.data);            }\n    visitInt            (_type: Int)             { return new IntVector(this.data);             }\n    visitFloat          (_type: Float)           { return new FloatVector(this.data);           }\n    visitBinary         (_type: Binary)          { return new BinaryVector(this.data);          }\n    visitUtf8           (_type: Utf8)            { return new Utf8Vector(this.data);            }\n    visitBool           (_type: Bool)            { return new BoolVector(this.data);            }\n    visitDecimal        (_type: Decimal)         { return new DecimalVector(this.data);         }\n    visitDate           (_type: Date_)           { return new DateVector(this.data);            }\n    visitTime           (_type: Time)            { return new TimeVector(this.data);            }\n    visitTimestamp      (_type: Timestamp)       { return new TimestampVector(this.data);       }\n    visitInterval       (_type: Interval)        { return new IntervalVector(this.data);        }\n    visitList           (_type: List)            { return new ListVector(this.data);            }\n    visitStruct         (_type: Struct)          { return new StructVector(this.data);          }\n    visitUnion          (_type: Union)           { return new UnionVector(this.data);           }\n    visitFixedSizeBinary(_type: FixedSizeBinary) { return new FixedSizeBinaryVector(this.data); }\n    visitFixedSizeList  (_type: FixedSizeList)   { return new FixedSizeListVector(this.data);   }\n    visitMap            (_type: Map_)            { return new MapVector(this.data);             }\n    visitDictionary     (_type: Dictionary)      { return new DictionaryVector(this.data);      }\n});\n\n\n\n// WEBPACK FOOTER //\n// vector.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { TypedArray } from '../type';\n\nexport function align(value: number, alignment: number) {\n    return value + padding(value, alignment);\n}\n\nexport function padding(value: number, alignment: number) {\n    return (value % alignment === 0 ? 0 : alignment - value % alignment);\n}\n\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\nexport function packBools(values: Iterable<any>) {\n    let n = 0, i = 0;\n    let xs: number[] = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do { xs[i] = 0; } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\nexport function popcnt_array(arr: TypedArray, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n\n\n\n// WEBPACK FOOTER //\n// util/bit.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View } from '../vector';\nimport { getBool, setBool, iterateBits } from '../util/bit';\nimport { FlatType, PrimitiveType, IterableArrayLike } from '../type';\nimport { Bool, Float16, Date_, Interval, Null, Int32, Timestamp } from '../type';\n\nexport class FlatView<T extends FlatType> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public get(index: number): T['TValue'] {\n        return this.values[index];\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.values[index] = value;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values.subarray(0, this.length);\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue']> {\n        return this.values.subarray(0, this.length)[Symbol.iterator]() as IterableIterator<T['TValue']>;\n    }\n}\n\nexport class NullView implements View<Null> {\n    public length: number;\n    constructor(data: Data<Null>) {\n        this.length = data.length;\n    }\n    public clone(data: Data<Null>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public set(): void {}\n    public get() { return null; }\n    public toArray(): IterableArrayLike<null> {\n        return [...this];\n    }\n    public indexOf(search: any) {\n        // if you're looking for nulls and the view isn't empty, we've got 'em!\n        return search === null && this.length > 0 ? 0 : -1;\n    }\n    public *[Symbol.iterator](): IterableIterator<null> {\n        for (let index = -1, length = this.length; ++index < length;) {\n            yield null;\n        }\n    }\n}\n\nexport class BoolView extends FlatView<Bool> {\n    protected offset: number;\n    constructor(data: Data<Bool>) {\n        super(data);\n        this.offset = data.offset;\n    }\n    public toArray() { return [...this]; }\n    public get(index: number): boolean {\n        const boolBitIndex = this.offset + index;\n        return getBool(null, index, this.values[boolBitIndex >> 3], boolBitIndex % 8);\n    }\n    public set(index: number, value: boolean): void {\n        setBool(this.values, this.offset + index, value);\n    }\n    public [Symbol.iterator](): IterableIterator<boolean> {\n        return iterateBits<boolean>(this.values, this.offset, this.length, this.values, getBool);\n    }\n}\n\nexport class PrimitiveView<T extends PrimitiveType> extends FlatView<T> {\n    public size: number;\n    public ArrayType: T['ArrayType'];\n    constructor(data: Data<T>, size?: number) {\n        super(data);\n        this.size = size || 1;\n        this.ArrayType = data.type.ArrayType;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, this.size) as this;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values[index * size];\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values[index * size] = value;\n    }\n    public get(index: number): T['TValue'] {\n        return this.getValue(this.values, index, this.size);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setValue(this.values, index, this.size, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.size > 1 ?\n            new this.ArrayType(this) :\n            this.values.subarray(0, this.length);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getValue;\n        const { size, values, length } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, size);\n        }\n    }\n}\n\nexport class FixedSizeView<T extends PrimitiveType> extends PrimitiveView<T> {\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values;\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value.every((d: number, i: number) => d === search[i])) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values.subarray(index * size, index * size + size);\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values.set((value as T['TArray']).subarray(0, size), index * size);\n    }\n}\n\nexport class Float16View extends PrimitiveView<Float16> {\n    public toArray() { return new Float32Array(this); }\n    protected getValue(values: Uint16Array, index: number, size: number): number {\n        return (values[index * size] - 32767) / 32767;\n    }\n    protected setValue(values: Uint16Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 32767) + 32767;\n    }\n}\n\nexport class DateDayView extends PrimitiveView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochDaysToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        values[index * size] = value.valueOf() / 86400000;\n    }\n}\n\nexport class DateMillisecondView extends FixedSizeView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochMillisecondsLongToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        const epochMs = value.valueOf();\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampDayView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochDaysToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 86400000) | 0;\n    }\n}\n\nexport class TimestampSecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochSecondsToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 1000) | 0;\n    }\n}\n\nexport class TimestampMillisecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMillisecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampMicrosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMicrosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000) / 4294967296) | 0;\n    }\n}\n\nexport class TimestampNanosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochNanosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000000) / 4294967296) | 0;\n    }\n}\n\nexport class IntervalYearMonthView extends PrimitiveView<Interval> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Int32Array {\n        const interval = values[index * size];\n        return new Int32Array([interval / 12, /* years */ interval % 12  /* months */]);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Int32Array): void {\n        values[index * size] = (value[0] * 12) + (value[1] % 12);\n    }\n}\n\nexport class IntervalYearView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] / 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 12) + (values[index * size] % 12);\n    }\n}\n\nexport class IntervalMonthView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] % 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (values[index * size] * 12) + (value % 12);\n    }\n}\n\nexport function epochSecondsToMs(data: Int32Array, index: number) { return 1000 * data[index]; }\nexport function epochDaysToMs(data: Int32Array, index: number) { return 86400000 * data[index]; }\nexport function epochMillisecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1]) + (data[index] >>> 0); }\nexport function epochMicrosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000); }\nexport function epochNanosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000); }\n\nexport function epochMillisecondsToDate(epochMs: number) { return new Date(epochMs); }\nexport function epochDaysToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochDaysToMs(data, index)); }\nexport function epochSecondsToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochSecondsToMs(data, index)); }\nexport function epochNanosecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochNanosecondsLongToMs(data, index)); }\nexport function epochMillisecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index)); }\n\n\n\n// WEBPACK FOOTER //\n// vector/flat.ts","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// fb/Schema.ts","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslib/tslib.es6.js\n// module id = 5\n// module chunks = 0","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n/// @endcond\n/// @}\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/flatbuffers/js/flatbuffers.mjs\n// module id = 6\n// module chunks = 0","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { align } from '../util/bit';\nimport { Schema, Long, MessageHeader, MetadataVersion } from '../type';\n\nexport class Footer {\n    constructor(public dictionaryBatches: FileBlock[], public recordBatches: FileBlock[], public schema: Schema) {}\n}\n\nexport class FileBlock {\n    public offset: number;\n    public bodyLength: number;\n    constructor(public metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\nexport class Message {\n    public bodyLength: number;\n    public version: MetadataVersion;\n    public headerType: MessageHeader;\n    constructor(version: MetadataVersion, bodyLength: Long | number, headerType: MessageHeader) {\n        this.version = version;\n        this.headerType = headerType;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    static isSchema(m: Message): m is Schema { return m.headerType === MessageHeader.Schema; }\n    static isRecordBatch(m: Message): m is RecordBatchMetadata { return m.headerType === MessageHeader.RecordBatch; }\n    static isDictionaryBatch(m: Message): m is DictionaryBatch { return m.headerType === MessageHeader.DictionaryBatch; }\n}\n\nexport class RecordBatchMetadata extends Message {\n    public length: number;\n    public nodes: FieldMetadata[];\n    public buffers: BufferMetadata[];\n    constructor(version: MetadataVersion, length: Long | number, nodes: FieldMetadata[], buffers: BufferMetadata[]) {\n        super(version, buffers.reduce((s, b) => align(s + b.length + (b.offset - s), 8), 0), MessageHeader.RecordBatch);\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class DictionaryBatch extends Message {\n    public id: number;\n    public isDelta: boolean;\n    public data: RecordBatchMetadata;\n    constructor(version: MetadataVersion, data: RecordBatchMetadata, id: Long | number, isDelta: boolean = false) {\n        super(version, data.bodyLength, MessageHeader.DictionaryBatch);\n        this.isDelta = isDelta;\n        this.data = data;\n        this.id = typeof id === 'number' ? id : id.low;\n    }\n    private static atomicDictionaryId = 0;\n    public static getId() { return DictionaryBatch.atomicDictionaryId++; }\n    public get nodes(): FieldMetadata[] { return this.data.nodes; }\n    public get buffers(): BufferMetadata[] { return this.data.buffers; }\n}\n\nexport class BufferMetadata {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class FieldMetadata {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/metadata.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { Type, DataType, Dictionary } from './type';\nimport { Utf8, Binary, Decimal, FixedSizeBinary } from './type';\nimport { List, FixedSizeList, Union, Map_, Struct } from './type';\nimport { Bool, Null, Int, Float, Date_, Time, Interval, Timestamp } from './type';\n\nexport interface VisitorNode {\n    acceptTypeVisitor(visitor: TypeVisitor): any;\n    acceptVectorVisitor(visitor: VectorVisitor): any;\n}\n\nexport abstract class TypeVisitor {\n    visit(type: Partial<VisitorNode>): any {\n        return type.acceptTypeVisitor && type.acceptTypeVisitor(this) || null;\n    }\n    visitMany(types: Partial<VisitorNode>[]): any[] {\n        return types.map((type) => this.visit(type));\n    }\n    abstract visitNull?(type: Null): any;\n    abstract visitBool?(type: Bool): any;\n    abstract visitInt?(type: Int): any;\n    abstract visitFloat?(type: Float): any;\n    abstract visitUtf8?(type: Utf8): any;\n    abstract visitBinary?(type: Binary): any;\n    abstract visitFixedSizeBinary?(type: FixedSizeBinary): any;\n    abstract visitDate?(type: Date_): any;\n    abstract visitTimestamp?(type: Timestamp): any;\n    abstract visitTime?(type: Time): any;\n    abstract visitDecimal?(type: Decimal): any;\n    abstract visitList?(type: List): any;\n    abstract visitStruct?(type: Struct): any;\n    abstract visitUnion?(type: Union<any>): any;\n    abstract visitDictionary?(type: Dictionary): any;\n    abstract visitInterval?(type: Interval): any;\n    abstract visitFixedSizeList?(type: FixedSizeList): any;\n    abstract visitMap?(type: Map_): any;\n\n    static visitTypeInline<T extends DataType>(visitor: TypeVisitor, type: T): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull            && visitor.visitNull(type            as any as Null);\n            case Type.Int:             return visitor.visitInt             && visitor.visitInt(type             as any as Int);\n            case Type.Float:           return visitor.visitFloat           && visitor.visitFloat(type           as any as Float);\n            case Type.Binary:          return visitor.visitBinary          && visitor.visitBinary(type          as any as Binary);\n            case Type.Utf8:            return visitor.visitUtf8            && visitor.visitUtf8(type            as any as Utf8);\n            case Type.Bool:            return visitor.visitBool            && visitor.visitBool(type            as any as Bool);\n            case Type.Decimal:         return visitor.visitDecimal         && visitor.visitDecimal(type         as any as Decimal);\n            case Type.Date:            return visitor.visitDate            && visitor.visitDate(type            as any as Date_);\n            case Type.Time:            return visitor.visitTime            && visitor.visitTime(type            as any as Time);\n            case Type.Timestamp:       return visitor.visitTimestamp       && visitor.visitTimestamp(type       as any as Timestamp);\n            case Type.Interval:        return visitor.visitInterval        && visitor.visitInterval(type        as any as Interval);\n            case Type.List:            return visitor.visitList            && visitor.visitList(type            as any as List<T>);\n            case Type.Struct:          return visitor.visitStruct          && visitor.visitStruct(type          as any as Struct);\n            case Type.Union:           return visitor.visitUnion           && visitor.visitUnion(type           as any as Union);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(type as any as FixedSizeBinary);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList   && visitor.visitFixedSizeList(type   as any as FixedSizeList);\n            case Type.Map:             return visitor.visitMap             && visitor.visitMap(type             as any as Map_);\n            case Type.Dictionary:      return visitor.visitDictionary      && visitor.visitDictionary(type      as any as Dictionary);\n            default: return null;\n        }\n    }\n}\n\nexport abstract class VectorVisitor {\n    visit(vector: Partial<VisitorNode>): any {\n        return vector.acceptVectorVisitor && vector.acceptVectorVisitor(this) || null;\n    }\n    visitMany(vectors: Partial<VisitorNode>[]): any[] {\n        return vectors.map((vector) => this.visit(vector));\n    }\n    abstract visitNull?(vector: Vector<Null>): any;\n    abstract visitBool?(vector: Vector<Bool>): any;\n    abstract visitInt?(vector: Vector<Int>): any;\n    abstract visitFloat?(vector: Vector<Float>): any;\n    abstract visitUtf8?(vector: Vector<Utf8>): any;\n    abstract visitBinary?(vector: Vector<Binary>): any;\n    abstract visitFixedSizeBinary?(vector: Vector<FixedSizeBinary>): any;\n    abstract visitDate?(vector: Vector<Date_>): any;\n    abstract visitTimestamp?(vector: Vector<Timestamp>): any;\n    abstract visitTime?(vector: Vector<Time>): any;\n    abstract visitDecimal?(vector: Vector<Decimal>): any;\n    abstract visitList?(vector: Vector<List>): any;\n    abstract visitStruct?(vector: Vector<Struct>): any;\n    abstract visitUnion?(vector: Vector<Union<any>>): any;\n    abstract visitDictionary?(vector: Vector<Dictionary>): any;\n    abstract visitInterval?(vector: Vector<Interval>): any;\n    abstract visitFixedSizeList?(vector: Vector<FixedSizeList>): any;\n    abstract visitMap?(vector: Vector<Map_>): any;\n\n    static visitTypeInline<T extends DataType>(visitor: VectorVisitor, type: T, vector: Vector<T>): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull            && visitor.visitNull(vector            as any as Vector<Null>);\n            case Type.Int:             return visitor.visitInt             && visitor.visitInt(vector             as any as Vector<Int>);\n            case Type.Float:           return visitor.visitFloat           && visitor.visitFloat(vector           as any as Vector<Float>);\n            case Type.Binary:          return visitor.visitBinary          && visitor.visitBinary(vector          as any as Vector<Binary>);\n            case Type.Utf8:            return visitor.visitUtf8            && visitor.visitUtf8(vector            as any as Vector<Utf8>);\n            case Type.Bool:            return visitor.visitBool            && visitor.visitBool(vector            as any as Vector<Bool>);\n            case Type.Decimal:         return visitor.visitDecimal         && visitor.visitDecimal(vector         as any as Vector<Decimal>);\n            case Type.Date:            return visitor.visitDate            && visitor.visitDate(vector            as any as Vector<Date_>);\n            case Type.Time:            return visitor.visitTime            && visitor.visitTime(vector            as any as Vector<Time>);\n            case Type.Timestamp:       return visitor.visitTimestamp       && visitor.visitTimestamp(vector       as any as Vector<Timestamp>);\n            case Type.Interval:        return visitor.visitInterval        && visitor.visitInterval(vector        as any as Vector<Interval>);\n            case Type.List:            return visitor.visitList            && visitor.visitList(vector            as any as Vector<List<T>>);\n            case Type.Struct:          return visitor.visitStruct          && visitor.visitStruct(vector          as any as Vector<Struct>);\n            case Type.Union:           return visitor.visitUnion           && visitor.visitUnion(vector           as any as Vector<Union>);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(vector as any as Vector<FixedSizeBinary>);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList   && visitor.visitFixedSizeList(vector   as any as Vector<FixedSizeList>);\n            case Type.Map:             return visitor.visitMap             && visitor.visitMap(vector             as any as Vector<Map_>);\n            case Type.Dictionary:      return visitor.visitDictionary      && visitor.visitDictionary(vector      as any as Vector<Dictionary>);\n            default: return null;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// visitor.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { popcnt_bit_range } from './util/bit';\nimport { VectorLike, Vector } from './vector';\nimport { Int, Bool, FlatListType, List, Struct, Map_ } from './type';\nimport { VectorType, TypedArray, TypedArrayConstructor, Dictionary } from './type';\nimport { DataType, FlatType, ListType, NestedType, SingleNestedType, DenseUnion, SparseUnion } from './type';\n\nexport function toTypedArray<T extends TypedArray>(ArrayType: TypedArrayConstructor<T>, values?: T | ArrayLike<number> | Iterable<number> | null): T {\n    if (!ArrayType && ArrayBuffer.isView(values)) { return values; }\n    return values instanceof ArrayType ? values\n         : !values || !ArrayBuffer.isView(values) ? ArrayType.from(values || [])\n         : new ArrayType(values.buffer, values.byteOffset, values.byteLength / ArrayType.BYTES_PER_ELEMENT);\n}\n\nexport type Data<T extends DataType> = DataTypes<T>[T['TType']] & BaseData<T>;\nexport interface DataTypes<T extends DataType> {\n/*                [Type.NONE]*/  0: BaseData<T>;\n/*                [Type.Null]*/  1: FlatData<T>;\n/*                 [Type.Int]*/  2: FlatData<T>;\n/*               [Type.Float]*/  3: FlatData<T>;\n/*              [Type.Binary]*/  4: FlatListData<T>;\n/*                [Type.Utf8]*/  5: FlatListData<T>;\n/*                [Type.Bool]*/  6: BoolData;\n/*             [Type.Decimal]*/  7: FlatData<T>;\n/*                [Type.Date]*/  8: FlatData<T>;\n/*                [Type.Time]*/  9: FlatData<T>;\n/*           [Type.Timestamp]*/ 10: FlatData<T>;\n/*            [Type.Interval]*/ 11: FlatData<T>;\n/*                [Type.List]*/ 12: ListData<List<T>>;\n/*              [Type.Struct]*/ 13: NestedData<Struct>;\n/*               [Type.Union]*/ 14: UnionData;\n/*     [Type.FixedSizeBinary]*/ 15: FlatData<T>;\n/*       [Type.FixedSizeList]*/ 16: SingleNestedData<any>;\n/*                 [Type.Map]*/ 17: NestedData<Map_>;\n/*  [Type.DenseUnion]*/ DenseUnion: DenseUnionData;\n/*[Type.SparseUnion]*/ SparseUnion: SparseUnionData;\n/*[  Type.Dictionary]*/ Dictionary: DictionaryData<any>;\n}\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Array::null_count is called the\n// first time, the null count will be computed. See ARROW-33\nexport type kUnknownNullCount = -1;\nexport const kUnknownNullCount = -1;\n\nexport class BaseData<T extends DataType = DataType> implements VectorLike {\n    public type: T;\n    public length: number;\n    public offset: number;\n    // @ts-ignore\n    public childData: Data<any>[];\n    protected _nullCount: number | kUnknownNullCount;\n    protected /*  [VectorType.OFFSET]:*/ 0?: Int32Array;\n    protected /*    [VectorType.DATA]:*/ 1?: T['TArray'];\n    protected /*[VectorType.VALIDITY]:*/ 2?: Uint8Array;\n    protected /*    [VectorType.TYPE]:*/ 3?: Int8Array;\n    constructor(type: T, length: number, offset?: number, nullCount?: number) {\n        this.type = type;\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    }\n    public get typeId() { return this.type.TType; }\n    public get nullBitmap() { return this[VectorType.VALIDITY]; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount === -1 && (nullBitmap = this[VectorType.VALIDITY])) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new BaseData(type, length, offset, nullCount);\n    }\n    public slice(offset: number, length: number) {\n        return length <= 0 ? this : this.sliceInternal(this.clone(\n            this.type, length, this.offset + offset, +(this._nullCount === 0) - 1\n        ) as any, offset, length);\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        let arr: any;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = this[VectorType.TYPE]) && (clone[VectorType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = this[VectorType.OFFSET]) && (clone[VectorType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = this[VectorType.DATA]) && (clone[VectorType.DATA] = this.sliceData(arr, offset, length));\n        return clone;\n    }\n    protected sliceData(data: T['TArray'] & TypedArray, offset: number, length: number) {\n        return data.subarray(offset, offset + length);\n    }\n    protected sliceOffsets(valueOffsets: Int32Array, offset: number, length: number) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n}\n\nexport class FlatData<T extends FlatType> extends BaseData<T> {\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, data: Iterable<number>, offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this[VectorType.DATA] = toTypedArray(this.ArrayType, data);\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new (this.constructor as any)(type, length, this[VectorType.VALIDITY], this[VectorType.DATA], offset, nullCount) as FlatData<R>;\n    }\n}\n\nexport class BoolData extends FlatData<Bool> {\n    protected sliceData(data: Uint8Array) { return data; }\n}\n\nexport class FlatListData<T extends FlatListType> extends FlatData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, data: T['TArray'], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, data, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new FlatListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this[VectorType.DATA], offset, nullCount) as FlatListData<R>;\n    }\n}\n\nexport class DictionaryData<T extends DataType> extends BaseData<Dictionary<T>> {\n    protected _dictionary: Vector<T>;\n    protected _indices: Data<Int<any>>;\n    public get indices() { return this._indices; }\n    public get dictionary() { return this._dictionary; }\n    constructor(type: Dictionary<T>, dictionary: Vector<T>, indices: Data<Int<any>>) {\n        super(type, indices.length, indices.offset, (indices as any)._nullCount);\n        this._indices = indices;\n        this._dictionary = dictionary;\n    }\n    public get nullCount() { return this._indices.nullCount; }\n    public get nullBitmap() { return this._indices.nullBitmap; }\n    public clone<R extends Dictionary<T>>(type: R, length = this.length, offset = this.offset) {\n        const data = this._dictionary.data.clone(type.dictionary as any);\n        return new DictionaryData<R>(\n            this.type as any,\n            this._dictionary.clone(data) as any,\n            this._indices.slice(offset - this.offset, length)\n        ) as any;\n    }\n    protected sliceInternal(clone: this, _offset: number, _length: number) {\n        clone.length = clone._indices.length;\n        clone._nullCount = (clone._indices as any)._nullCount;\n        return clone;\n    }\n}\n\nexport class NestedData<T extends NestedType = NestedType> extends BaseData<T> {\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this.childData = childData;\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount);\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        if (!this[VectorType.OFFSET]) {\n            clone.childData = this.childData.map((child) => child.slice(offset, length));\n        }\n        return super.sliceInternal(clone, offset, length);\n    }\n}\n\nexport class SingleNestedData<T extends SingleNestedType> extends NestedData<T> {\n    protected _valuesData: Data<T>;\n    public get values() { return this._valuesData; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, [valueChildData], offset, nullCount);\n        this._valuesData = valueChildData;\n    }\n}\n\nexport class ListData<T extends ListType> extends SingleNestedData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, valueChildData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new ListData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this._valuesData as any, offset, nullCount);\n    }\n}\n\nexport class UnionData<T extends (DenseUnion | SparseUnion) = any> extends NestedData<T> {\n    public /*    [VectorType.TYPE]:*/ 3: T['TArray'];\n    public get typeIds() { return this[VectorType.TYPE]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, childData, offset, nullCount);\n        this[VectorType.TYPE] = toTypedArray(Int8Array, typeIds);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new UnionData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount);\n    }\n}\n\nexport class SparseUnionData extends UnionData<SparseUnion> {\n    constructor(type: SparseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n    }\n    public clone<R extends SparseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new SparseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this.childData,\n            offset, nullCount\n        ) as any as UnionData<R>;\n    }\n}\n\nexport class DenseUnionData extends UnionData<DenseUnion> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: DenseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, valueOffsets: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends DenseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new DenseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this[VectorType.OFFSET],\n            this.childData,\n            offset, nullCount\n        ) as any as UnionData<R>;\n    }\n}\n\nexport class ChunkedData<T extends DataType> extends BaseData<T> {\n    // @ts-ignore\n    protected _chunkData: Data<T>[];\n    protected _chunkVectors: Vector<T>[];\n    protected _chunkOffsets: Uint32Array;\n    public get chunkVectors() { return this._chunkVectors; }\n    public get chunkOffsets() { return this._chunkOffsets; }\n    public get chunkData() {\n        return this._chunkData || (\n               this._chunkData = this._chunkVectors.map(({ data }) => data));\n    }\n    constructor(type: T, length: number, chunkVectors: Vector<T>[], offset?: number, nullCount?: number, chunkOffsets?: Uint32Array) {\n        super(type, length, offset, nullCount);\n        this._chunkVectors = chunkVectors;\n        this._chunkOffsets = chunkOffsets || ChunkedData.computeOffsets(chunkVectors);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount === -1) {\n            this._nullCount = nullCount = this._chunkVectors.reduce((x, c) => x + c.nullCount, 0);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new ChunkedData<R>(\n            type, length,\n            this._chunkVectors.map((vec) => vec.clone(vec.data.clone(type))) as any,\n            offset, nullCount, this._chunkOffsets\n        );\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        const chunks = this._chunkVectors;\n        const offsets = this._chunkOffsets;\n        const chunkSlices: Vector<T>[] = [];\n        for (let childIndex = -1, numChildren = chunks.length; ++childIndex < numChildren;) {\n            const child = chunks[childIndex];\n            const childLength = child.length;\n            const childOffset = offsets[childIndex];\n            // If the child is to the right of the slice boundary, exclude\n            if (childOffset >= offset + length) { continue; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= childOffset + childLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (childOffset >= offset && (childOffset + childLength) <= offset + length) {\n                chunkSlices.push(child);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - childOffset);\n            const end = begin + Math.min(childLength - begin, (offset + length) - childOffset);\n            chunkSlices.push(child.slice(begin, end));\n        }\n        clone._chunkVectors = chunkSlices;\n        clone._chunkOffsets = ChunkedData.computeOffsets(chunkSlices);\n        return clone;\n    }\n    static computeOffsets<T extends DataType>(childVectors: Vector<T>[]) {\n        const childOffsets = new Uint32Array(childVectors.length + 1);\n        for (let index = 0, length = childOffsets.length, childOffset = childOffsets[0] = 0; ++index < length;) {\n            childOffsets[index] = (childOffset += childVectors[index - 1].length);\n        }\n        return childOffsets;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// data.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Struct, DataType } from './type';\nimport { flatbuffers } from 'flatbuffers';\nimport { View, Vector, StructVector } from './vector';\nimport { Data, NestedData } from './data';\n\nimport Long = flatbuffers.Long;\n\nexport class RecordBatch extends StructVector {\n    public static from(vectors: Vector[]) {\n        return new RecordBatch(Schema.from(vectors),\n            Math.max(...vectors.map((v) => v.length)),\n            vectors\n        );\n    }\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    constructor(schema: Schema, data: Data<Struct>, view: View<Struct>);\n    constructor(schema: Schema, numRows: Long | number, cols: Data<any> | Vector[]);\n    constructor(...args: any[]) {\n        if (typeof args[1] !== 'number') {\n            const data = args[1] as Data<Struct>;\n            super(data, args[2]);\n            this.schema = args[0];\n            this.length = data.length;\n        } else {\n            const [schema, numRows, cols] = args;\n            const childData: Data<any>[] = new Array(cols.length);\n            for (let index = -1, length = cols.length; ++index < length;) {\n                const col: Data<any> | Vector = cols[index];\n                childData[index] = col instanceof Vector ? col.data : col;\n            }\n            super(new NestedData(new Struct(schema.fields), numRows, null, childData));\n            this.schema = schema;\n            this.length = numRows;\n        }\n        this.numCols = this.schema.fields.length;\n    }\n    public clone<R extends Struct>(data: Data<R>, view: View<R> = this.view.clone(data)): this {\n        return new RecordBatch(this.schema, data as any, view) as any;\n    }\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numCols ? null : super.getChildAt<R>(index);\n    }\n    public select(...columnNames: string[]) {\n        const fields = this.schema.fields;\n        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new RecordBatch(\n            this.schema.select(...columnNames), this.length,\n            this.childData.filter((_, i) => namesToKeep[fields[i].name])\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// recordbatch.ts","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// fb/Message.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ChunkedData } from '../data';\nimport { View, Vector, NestedVector } from '../vector';\nimport { DataType, TypedArray, IterableArrayLike } from '../type';\n\nexport class ChunkedView<T extends DataType> implements View<T> {\n    public chunkVectors: Vector<T>[];\n    public chunkOffsets: Uint32Array;\n    // @ts-ignore\n    protected _children: Vector<any>[];\n    constructor(data: ChunkedData<T>) {\n        this.chunkVectors = data.chunkVectors;\n        this.chunkOffsets = data.chunkOffsets;\n    }\n    public clone(data: ChunkedData<T>): this {\n        return new ChunkedView(data) as this;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const vector of this.chunkVectors) {\n            yield* vector;\n        }\n    }\n    public getChildAt<R extends DataType = DataType>(index: number) {\n        return index < 0 ? null\n            : (this._children || (this._children = []))[index] ||\n              (this._children[index] = Vector.concat<R>(\n                  ...(<any> this.chunkVectors as NestedVector<any>[])\n                         .map((chunk) => chunk.getChildAt<R>(index))));\n    }\n    public isValid(index: number): boolean {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].isValid(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return false;\n    }\n    public get(index: number): T['TValue'] | null {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].get(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return null;\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].set(index - pos, value);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        const chunks = this.chunkVectors;\n        const numChunks = chunks.length;\n        if (numChunks === 1) {\n            return chunks[0].toArray();\n        }\n        let sources = new Array<any>(numChunks);\n        let sourcesLen = 0, ArrayType: any = Array;\n        for (let index = -1; ++index < numChunks;) {\n            let source = chunks[index].toArray();\n            sourcesLen += (sources[index] = source).length;\n            if (ArrayType !== source.constructor) {\n                ArrayType = source.constructor;\n            }\n        }\n        let target = new ArrayType(sourcesLen);\n        let setValues = ArrayType === Array ? arraySet : typedArraySet as any;\n        for (let index = -1, offset = 0; ++index < numChunks;) {\n            offset = setValues(sources[index], target, offset);\n        }\n        return target;\n    }\n    public indexOf(search: T['TValue']) {\n        let offset = 0, result;\n        for (const vector of this.chunkVectors) {\n            result = vector.indexOf(search);\n            if (result !== -1) { return result + offset; }\n            offset += vector.length;\n        }\n\n        return -1;\n    }\n}\n\nfunction typedArraySet(source: TypedArray, target: TypedArray, index: number) {\n    return target.set(source, index) || index + source.length;\n}\n\nfunction arraySet(source: any[], target: any[], index: number) {\n    let dstIdx = index - 1, srcIdx = -1, srcLen = source.length;\n    while (++srcIdx < srcLen) {\n        target[++dstIdx] = source[srcIdx];\n    }\n    return dstIdx;\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/chunked.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { RecordBatch } from '../../recordbatch';\nimport { TypeVisitor } from '../../visitor';\nimport { FlatType, NestedType, ListType } from '../../type';\nimport { Message, FieldMetadata, BufferMetadata } from '../metadata';\nimport { FlatData, ListData, NestedData, SingleNestedData, DenseUnionData, SparseUnionData, BoolData, FlatListData, DictionaryData } from '../../data';\nimport {\n    Schema, Field,\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n    UnionMode, SparseUnion, DenseUnion, FlatListType, DataType,\n} from '../../type';\n\nexport function* readRecordBatches(messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport async function* readRecordBatchesAsync(messages: AsyncIterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for await (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport function* readRecordBatch(schema: Schema, message: Message, loader: TypeDataLoader) {\n    if (Message.isRecordBatch(message)) {\n        yield new RecordBatch(schema, message.length, loader.visitFields(schema.fields));\n    } else if (Message.isDictionaryBatch(message)) {\n        const dictionaryId = message.id;\n        const dictionaries = loader.dictionaries;\n        const dictionaryField = schema.dictionaries.get(dictionaryId)!;\n        const dictionaryDataType = (dictionaryField.type as Dictionary).dictionary;\n        let dictionaryVector = Vector.create(loader.visit(dictionaryDataType));\n        if (message.isDelta && dictionaries.has(dictionaryId)) {\n            dictionaryVector = dictionaries.get(dictionaryId)!.concat(dictionaryVector);\n        }\n        dictionaries.set(dictionaryId, dictionaryVector);\n    }\n}\n\nexport abstract class TypeDataLoader extends TypeVisitor {\n\n    public dictionaries: Map<number, Vector>;\n    protected nodes: Iterator<FieldMetadata>;\n    protected buffers: Iterator<BufferMetadata>;\n\n    constructor(nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super();\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visitFields(fields: Field[]) { return fields.map((field) => this.visit(field.type)); }\n\n    public visitNull           (type: Null)            { return this.visitNullType(type);   }\n    public visitInt            (type: Int)             { return this.visitFlatType(type);   }\n    public visitFloat          (type: Float)           { return this.visitFlatType(type);   }\n    public visitBinary         (type: Binary)          { return this.visitFlatList(type);   }\n    public visitUtf8           (type: Utf8)            { return this.visitFlatList(type);   }\n    public visitBool           (type: Bool)            { return this.visitBoolType(type);   }\n    public visitDecimal        (type: Decimal)         { return this.visitFlatType(type);   }\n    public visitDate           (type: Date_)           { return this.visitFlatType(type);   }\n    public visitTime           (type: Time)            { return this.visitFlatType(type);   }\n    public visitTimestamp      (type: Timestamp)       { return this.visitFlatType(type);   }\n    public visitInterval       (type: Interval)        { return this.visitFlatType(type);   }\n    public visitList           (type: List)            { return this.visitListType(type);   }\n    public visitStruct         (type: Struct)          { return this.visitNestedType(type); }\n    public visitUnion          (type: Union)           { return this.visitUnionType(type);  }\n    public visitFixedSizeBinary(type: FixedSizeBinary) { return this.visitFlatType(type);   }\n    public visitFixedSizeList  (type: FixedSizeList)   { return this.visitFixedSizeListType(type); }\n    public visitMap            (type: Map_)            { return this.visitNestedType(type); }\n    public visitDictionary     (type: Dictionary)      {\n        return new DictionaryData(type, this.dictionaries.get(type.id)!, this.visit(type.indices));\n    }\n    protected getFieldMetadata() { return this.nodes.next().value; }\n    protected getBufferMetadata() { return this.buffers.next().value; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.getBufferMetadata()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected abstract readData<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected visitNullType(type: Null, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<any>(type, length, this.readNullBitmap(type, nullCount), new Uint8Array(0), 0, nullCount);\n    }\n    protected visitFlatType<T extends FlatType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<T>(type, length, this.readNullBitmap(type, nullCount), this.readData(type), 0, nullCount);\n    }\n    protected visitBoolType(type: Bool, { length, nullCount }: FieldMetadata = this.getFieldMetadata(), data?: Uint8Array) {\n        return new BoolData(type, length, this.readNullBitmap(type, nullCount), data || this.readData(type), 0, nullCount);\n    }\n    protected visitFlatList<T extends FlatListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type), 0, nullCount);\n    }\n    protected visitListType<T extends ListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new ListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitFixedSizeListType<T extends FixedSizeList>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new SingleNestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitNestedType<T extends NestedType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new NestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visitFields(type.children), 0, nullCount);\n    }\n    protected visitUnionType(type: DenseUnion | SparseUnion, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return type.mode === UnionMode.Sparse ?\n            new SparseUnionData(type as SparseUnion, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount) :\n            new DenseUnionData(type as DenseUnion, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitFields(type.children), 0, nullCount);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/vector.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport const PADDING = 4;\nexport const MAGIC_STR = 'ARROW1';\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport const magicLength = MAGIC.length;\nexport const magicAndPadding = magicLength + PADDING;\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n\n\n\n// WEBPACK FOOTER //\n// ipc/magic.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { NestedView } from './nested';\nimport { DataType, IterableArrayLike } from '../type';\nimport { getBool, setBool, iterateBits } from '../util/bit';\n\nexport class ValidityView<T extends DataType> implements View<T> {\n    protected view: View<T>;\n    protected length: number;\n    protected offset: number;\n    protected nullBitmap: Uint8Array;\n    constructor(data: Data<T>, view: View<T>) {\n        this.view = view;\n        this.length = data.length;\n        this.offset = data.offset;\n        this.nullBitmap = data.nullBitmap!;\n    }\n    public get size(): number {\n        return (this.view as any).size || 1;\n    }\n    public clone(data: Data<T>): this {\n        return new ValidityView(data, this.view.clone(data)) as this;\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return [...this];\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    public isValid(index: number): boolean {\n        const nullBitIndex = this.offset + index;\n        return getBool(null, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public get(index: number): T['TValue'] | null {\n        const nullBitIndex = this.offset + index;\n        return this.getNullable(this.view, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        if (setBool(this.nullBitmap, this.offset + index, value != null)) {\n            this.view.set(index, value);\n        }\n    }\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return (this.view as NestedView<any>).getChildAt<R>(index);\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return iterateBits<T['TValue'] | null>(this.nullBitmap, this.offset, this.length, this.view, this.getNullable);\n    }\n    protected getNullable(view: View<T>, index: number, byte: number, bit: number) {\n        return getBool(view, index, byte, bit) ? view.get(index) : null;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/validity.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike, DataType, Dictionary, Int } from '../type';\n\nexport class DictionaryView<T extends DataType> implements View<T> {\n    public indices: Vector<Int>;\n    public dictionary: Vector<T>;\n    constructor(dictionary: Vector<T>, indices: Vector<Int>) {\n        this.indices = indices;\n        this.dictionary = dictionary;\n    }\n    public clone(data: Data<Dictionary<T>>): this {\n        return new DictionaryView(data.dictionary, this.indices.clone(data.indices)) as this;\n    }\n    public isValid(index: number): boolean {\n        return this.indices.isValid(index);\n    }\n    public get(index: number): T['TValue'] {\n        return this.dictionary.get(this.indices.get(index));\n    }\n    public set(index: number, value: T['TValue']): void {\n        this.dictionary.set(this.indices.get(index), value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const values = this.dictionary, indices = this.indices;\n        for (let index = -1, n = indices.length; ++index < n;) {\n            yield values.get(indices.get(index));\n        }\n    }\n    public indexOf(search: T['TValue']) {\n        // First find the dictionary key for the desired value...\n        const key = this.dictionary.indexOf(search);\n        if (key === -1) { return key; }\n\n        // ... then find the first occurence of that key in indices\n        return this.indices.indexOf(key!);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/dictionary.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector, createVector } from '../vector';\nimport { TextEncoder, TextDecoder } from 'text-encoding-utf-8';\nimport { List, Binary, Utf8, FixedSizeList, FlatListType } from '../type';\nimport { ListType, SingleNestedType, DataType, IterableArrayLike } from '../type';\n\nexport const encodeUtf8 = ((encoder) =>\n    encoder.encode.bind(encoder) as (input?: string) => Uint8Array\n)(new TextEncoder('utf-8'));\n\nexport const decodeUtf8 = ((decoder) =>\n    decoder.decode.bind(decoder) as (input?: ArrayBufferLike | ArrayBufferView) => string\n)(new TextDecoder('utf-8'));\n\nexport abstract class ListViewBase<T extends (FlatListType | SingleNestedType)> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    public valueOffsets?: Int32Array;\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public get(index: number): T['TValue'] {\n        return this.getList(this.values, index, this.valueOffsets);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setList(this.values, index, value, this.valueOffsets);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getList, length = this.length;\n        const values = this.values, valueOffsets = this.valueOffsets;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, valueOffsets);\n        }\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    protected abstract getList(values: T['TArray'], index: number, valueOffsets?: Int32Array): T['TValue'];\n    protected abstract setList(values: T['TArray'], index: number, value: T['TValue'], valueOffsets?: Int32Array): void;\n}\n\nexport abstract class VariableListViewBase<T extends (ListType | FlatListType)> extends ListViewBase<T> {\n    constructor(data: Data<T>) {\n        super(data);\n        this.length = data.length;\n        this.valueOffsets = data.valueOffsets;\n    }\n}\n\nexport class ListView<T extends DataType> extends VariableListViewBase<List<T>> {\n    public values: Vector<T>;\n    constructor(data: Data<T>) {\n        super(data);\n        this.values = createVector(data.values);\n    }\n    public getChildAt<R extends T = T>(index: number): Vector<R> | null {\n        return index === 0 ? (this.values as Vector<R>) : null;\n    }\n    protected getList(values: Vector<T>, index: number, valueOffsets: Int32Array) {\n        return values.slice(valueOffsets[index], valueOffsets[index + 1]) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>, valueOffsets: Int32Array): void {\n        let idx = -1;\n        let offset = valueOffsets[index];\n        let end = Math.min(value.length, valueOffsets[index + 1] - offset);\n        while (offset < end) {\n            values.set(offset++, value.get(++idx));\n        }\n    }\n}\n\nexport class FixedSizeListView<T extends DataType> extends ListViewBase<FixedSizeList<T>> {\n    public size: number;\n    public values: Vector<T>;\n    constructor(data: Data<FixedSizeList<T>>) {\n        super(data);\n        this.size = data.type.listSize;\n        this.values = createVector(data.values);\n    }\n    public getChildAt<R extends T = T>(index: number): Vector<R> | null {\n        return index === 0 ? (this.values as Vector<R>) : null;\n    }\n    protected getList(values: Vector<T>, index: number) {\n        const size = this.size;\n        return values.slice(index *= size, index + size) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>): void {\n        let size = this.size;\n        for (let idx = -1, offset = index * size; ++idx < size;) {\n            values.set(offset + idx, value.get(++idx));\n        }\n    }\n}\n\nexport class BinaryView extends VariableListViewBase<Binary> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return values.subarray(valueOffsets[index], valueOffsets[index + 1]);\n    }\n    protected setList(values: Uint8Array, index: number, value: Uint8Array, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(value.subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\nexport class Utf8View extends VariableListViewBase<Utf8> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return decodeUtf8(values.subarray(valueOffsets[index], valueOffsets[index + 1]));\n    }\n    protected setList(values: Uint8Array, index: number, value: string, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(encodeUtf8(value).subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/list.ts","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input.constructor.name === 'ArrayBuffer') {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer.constructor.name === 'ArrayBuffer') {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexports.TextEncoder = TextEncoder;\nexports.TextDecoder = TextDecoder;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/text-encoding-utf-8/lib/encoding.lib.js\n// module id = 18\n// module chunks = 0","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike } from '../type';\nimport { DataType, NestedType, DenseUnion, SparseUnion, Struct, Map_ } from '../type';\n\nexport abstract class NestedView<T extends NestedType> implements View<T> {\n    public length: number;\n    public numChildren: number;\n    public childData: Data<any>[];\n    protected _children: Vector<any>[];\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        this.length = data.length;\n        this.childData = data.childData;\n        this.numChildren = data.childData.length;\n        this._children = children || new Array(this.numChildren);\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, this._children) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public indexOf(_: T['TValue']): number {\n        throw new Error(`Not implemented yet`);\n    }\n    public toJSON(): any { return this.toArray(); }\n    public toString() {\n        return [...this].map((x) => stringify(x)).join(', ');\n    }\n    public get(index: number): T['TValue'] {\n        return this.getNested(this, index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setNested(this, index, value);\n    }\n    protected abstract getNested(self: NestedView<T>, index: number): T['TValue'];\n    protected abstract setNested(self: NestedView<T>, index: number, value: T['TValue']): void;\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren\n            ? null\n            : (this._children[index] as Vector<R>) ||\n              (this._children[index] = Vector.create<R>(this.childData[index]));\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getNested;\n        const length = this.length;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index);\n        }\n    }\n}\n\nexport class UnionView<T extends (DenseUnion | SparseUnion) = SparseUnion> extends NestedView<T> {\n    // @ts-ignore\n    public typeIds: Int8Array;\n    // @ts-ignore\n    public valueOffsets?: Int32Array;\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        super(data, children);\n        this.length = data.length;\n        this.typeIds = data.typeIds;\n    }\n    protected getNested(self: UnionView<T>, index: number): T['TValue'] {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n    }\n    protected setNested(self: UnionView<T>, index: number, value: T['TValue']): void {\n        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets);\n    }\n    protected getChildValue(self: NestedView<T>, index: number, typeIds: Int8Array, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.get(index) : null;\n    }\n    protected setChildValue(self: NestedView<T>, index: number, value: T['TValue'], typeIds: Int8Array, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.set(index, value) : null;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const length = this.length;\n        const get = this.getChildValue;\n        const { typeIds, valueOffsets } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index, typeIds, valueOffsets);\n        }\n    }\n}\n\nexport class DenseUnionView extends UnionView<DenseUnion> {\n    public valueOffsets: Int32Array;\n    constructor(data: Data<DenseUnion>, children?: Vector<any>[]) {\n        super(data, children);\n        this.valueOffsets = data.valueOffsets;\n    }\n    protected getNested(self: DenseUnionView, index: number): any | null {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n    }\n    protected getChildValue(self: NestedView<DenseUnion>, index: number, typeIds: Int8Array, valueOffsets: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.get(valueOffsets[index]) : null;\n    }\n    protected setChildValue(self: NestedView<DenseUnion>, index: number, value: any, typeIds: Int8Array, valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.set(valueOffsets[index], value) : null;\n    }\n}\n\nexport class StructView extends NestedView<Struct> {\n    protected getNested(self: StructView, index: number) {\n        return new RowView(self as any, self._children, index);\n    }\n    protected setNested(self: StructView, index: number, value: any): void {\n        let idx = -1, len = self.numChildren, child: Vector | null;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value[idx]);\n                }\n            }\n        } else {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value.get(idx));\n                }\n            }\n        }\n    }\n}\n\nexport class MapView extends NestedView<Map_> {\n    public typeIds: { [k: string]: number };\n    constructor(data: Data<Map_>, children?: Vector<any>[]) {\n        super(data, children);\n        this.typeIds = data.type.children.reduce((xs, x, i) =>\n            (xs[x.name] = i) && xs || xs, Object.create(null));\n    }\n    protected getNested(self: MapView, index: number) {\n        return new MapRowView(self as any, self._children, index);\n    }\n    protected setNested(self: MapView, index: number, value: { [k: string]: any }): void {\n        let typeIds = self.typeIds as any, child: Vector | null;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value[key]);\n                }\n            }\n        } else {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value.get(key as any));\n                }\n            }\n        }\n    }\n}\n\nexport class RowView extends UnionView<SparseUnion> {\n    protected rowIndex: number;\n    constructor(data: Data<SparseUnion> & NestedView<any>, children?: Vector<any>[], rowIndex?: number) {\n        super(data, children);\n        this.rowIndex = rowIndex || 0;\n        this.length = data.numChildren;\n    }\n    public clone(data: Data<SparseUnion> & NestedView<any>): this {\n        return new (<any> this.constructor)(data, this._children, this.rowIndex) as this;\n    }\n    protected getChildValue(self: RowView, index: number, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: RowView, index: number, value: any, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\nexport class MapRowView extends RowView {\n    // @ts-ignore\n    public typeIds: any;\n    public toJSON() {\n        const get = this.getChildValue;\n        const result = {} as { [k: string]: any };\n        const typeIds = this.typeIds as { [k: string]: number };\n        for (const name in typeIds) {\n            result[name] = get(this, name, typeIds, null);\n        }\n        return result;\n    }\n    protected getChildValue(self: MapRowView, key: any, typeIds: any, _valueOffsets: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: MapRowView, key: any, value: any, typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\nfunction stringify(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : Array.isArray(x) ? JSON.stringify(x) : ArrayBuffer.isView(x) ? `[${x}]` : `${x}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/nested.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst carryBit16 = 1 << 16;\n\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    high(): number { return this.buffer[1]; }\n    low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// util/int.ts","\nexport class PipeIterator<T> implements IterableIterator<T> {\n    constructor(protected iterator: IterableIterator<T>, protected encoding?: any) {}\n    [Symbol.iterator]() { return this.iterator; }\n    next(value?: any) { return this.iterator.next(value); }\n    throw(error?: any) {\n        if (typeof this.iterator.throw === 'function') {\n            return this.iterator.throw(error);\n        }\n        return { done: true, value: null as any };\n    }\n    return(value?: any) {\n        if (typeof this.iterator.return === 'function') {\n            return this.iterator.return(value);\n        }\n        return { done: true, value: null as any };\n    }\n    pipe(stream: NodeJS.WritableStream) {\n        let { encoding } = this;\n        let res: IteratorResult<T>;\n        let write = (err?: any) => {\n            stream['removeListener']('error', write);\n            stream['removeListener']('drain', write);\n            if (err) return this.throw(err);\n            if (stream['writable']) {\n                do {\n                    if ((res = this.next()).done) break;\n                } while (emit(stream, encoding, res.value));\n            }\n            return wait(stream, encoding, res && res.done, write);\n        };\n        write();\n        return stream;\n    }\n}\n\nexport class AsyncPipeIterator<T> implements AsyncIterableIterator<T> {\n    constructor(protected iterator: AsyncIterableIterator<T>, protected encoding?: any) {}\n    [Symbol.asyncIterator]() { return this.iterator; }\n    next(value?: any) { return this.iterator.next(value); }\n    async throw(error?: any) {\n        if (typeof this.iterator.throw === 'function') {\n            return this.iterator.throw(error);\n        }\n        return { done: true, value: null as any };\n    }\n    async return(value?: any) {\n        if (typeof this.iterator.return === 'function') {\n            return this.iterator.return(value);\n        }\n        return { done: true, value: null as any };\n    }\n    pipe(stream: NodeJS.WritableStream) {\n        let { encoding } = this;\n        let res: IteratorResult<T>;\n        let write = async (err?: any) => {\n            stream['removeListener']('error', write);\n            stream['removeListener']('drain', write);\n            if (err) return this.throw(err);\n            if (stream['writable']) {\n                do {\n                    if ((res = await this.next()).done) break;\n                } while (emit(stream, encoding, res.value));\n            }\n            return wait(stream, encoding, res && res.done, write);\n        };\n        write();\n        return stream;\n    }\n}\n\nfunction emit(stream: NodeJS.WritableStream, encoding: string, value: any) {\n    return stream['write']((encoding === 'utf8' ? value + '\\n' : value) as any, encoding);\n}\n\nfunction wait(stream: NodeJS.WritableStream, encoding: string, done: boolean, write: (x?: any) => void) {\n    const p = eval('process'); // defeat closure compiler\n    if (!done) {\n        stream['once']('error', write);\n        stream['once']('drain', write);\n    } else if (!(!p || stream === p.stdout) && !(stream as any)['isTTY']) {\n        stream['end'](<any> (encoding === 'utf8' ? '\\n' : new Uint8Array(0)));\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// util/node.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Vector, DictionaryVector } from './vector';\n\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n        this.vector = batch.getChildAt(this.colidx)!;\n        return this.vector.get.bind(this.vector);\n    }\n}\n\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(expr: Predicate): Predicate { return new And(this, expr); }\n    or(expr: Predicate): Predicate { return new Or(this, expr); }\n    not(): Predicate { return new Not(this); }\n    ands(): Predicate[] { return [this]; }\n}\n\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\nexport abstract class CombinationPredicate extends Predicate {\n    constructor(public readonly left: Predicate, public readonly right: Predicate) {\n        super();\n    }\n}\n\nexport class And extends CombinationPredicate {\n    bind(batch: RecordBatch) {\n        const left = this.left.bind(batch);\n        const right = this.right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left(idx, batch) && right(idx, batch);\n    }\n    ands(): Predicate[] { return this.left.ands().concat(this.right.ands()); }\n}\n\nexport class Or extends CombinationPredicate {\n    bind(batch: RecordBatch) {\n        const left = this.left.bind(batch);\n        const right = this.right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left(idx, batch) || right(idx, batch);\n    }\n}\n\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n\n\n\n// WEBPACK FOOTER //\n// predicate.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { readJSON } from './json';\nimport { fromNodeStream } from './node';\nimport { RecordBatch } from '../../recordbatch';\nimport { readBuffers, readBuffersAsync } from './binary';\nimport { readRecordBatches, readRecordBatchesAsync, TypeDataLoader } from './vector';\nimport { Schema } from '../../type';\nimport { Message } from '../metadata';\n\nexport { readJSON, RecordBatch };\nexport { readBuffers, readBuffersAsync };\nexport { readRecordBatches, readRecordBatchesAsync };\n\nexport function* read(sources: Iterable<Uint8Array | Buffer | string> | object | string) {\n    let input: any = sources;\n    let messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>;\n    if (typeof input === 'string') {\n        try { input = JSON.parse(input); }\n        catch (e) { input = sources; }\n    }\n    if (!input || typeof input !== 'object') {\n        messages = (typeof input === 'string') ? readBuffers([input]) : [];\n    } else {\n        messages = (typeof input[Symbol.iterator] === 'function') ? readBuffers(input) : readJSON(input);\n    }\n    yield* readRecordBatches(messages);\n}\n\nexport async function* readAsync(sources: AsyncIterable<Uint8Array | Buffer | string>) {\n    for await (let recordBatch of readRecordBatchesAsync(readBuffersAsync(sources))) {\n        yield recordBatch;\n    }\n}\n\nexport async function* readNodeStream(stream: NodeJS.ReadableStream) {\n    for await (const recordBatch of readAsync(fromNodeStream(stream))) {\n        yield recordBatch as RecordBatch;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/arrow.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { PADDING } from '../magic';\nimport { flatbuffers } from 'flatbuffers';\nimport * as Message_ from '../../fb/Message';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\n\nexport async function* fromNodeStream(stream: NodeJS.ReadableStream) {\n\n    let bb: ByteBuffer;\n    let bytesRead = 0, bytes = new Uint8Array(0);\n    let messageLength = 0, message: _Message | null = null;\n\n    for await (let chunk of (stream as any as AsyncIterable<Uint8Array | Buffer | string>)) {\n\n        const grown = new Uint8Array(bytes.byteLength + chunk.length);\n\n        if (typeof chunk !== 'string') {\n            grown.set(bytes, 0) || grown.set(chunk, bytes.byteLength);\n        } else {\n            for (let i = -1, j = bytes.byteLength, n = chunk.length; ++i < n;) {\n                grown[i + j] = chunk.charCodeAt(i);\n            }\n        }\n\n        bytes = grown;\n\n        if (messageLength <= 0) {\n            messageLength = new DataView(bytes.buffer).getInt32(0, true);\n        }\n\n        while (messageLength < bytes.byteLength) {\n            if (!message) {\n                (bb = new ByteBuffer(bytes)).setPosition(4);\n                if (message = _Message.getRootAsMessage(bb)) {\n                    messageLength += message.bodyLength().low;\n                    continue;\n                }\n                throw new Error(`Invalid message at position ${bytesRead}`);\n            }\n            bytesRead += messageLength + PADDING;\n            yield bytes.subarray(0, messageLength + PADDING);\n            bytes = bytes.subarray(messageLength + PADDING);\n            messageLength = bytes.byteLength <= 0 ? 0 :\n                new DataView(bytes.buffer).getInt32(bytes.byteOffset, true);\n            message = null;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/node.ts","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// fb/File.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../../table';\nimport { DenseUnionData } from '../../data';\nimport { RecordBatch } from '../../recordbatch';\nimport { VectorVisitor, TypeVisitor } from '../../visitor';\nimport { MAGIC, magicLength, magicAndPadding, PADDING } from '../magic';\nimport { align, getBool, packBools, iterateBits } from '../../util/bit';\nimport { Vector, UnionVector, DictionaryVector, NestedVector, ListVector } from '../../vector';\nimport { BufferMetadata, FieldMetadata, Footer, FileBlock, Message, RecordBatchMetadata, DictionaryBatch } from '../metadata';\nimport {\n    Schema, Field, TypedArray, MetadataVersion,\n    DataType,\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n    FlatType, FlatListType, NestedType, UnionMode, SparseUnion, DenseUnion, SingleNestedType,\n} from '../../type';\n\nexport function* serializeStream(table: Table) {\n    yield serializeMessage(table.schema).buffer;\n    for (const [id, field] of table.schema.dictionaries) {\n        const vec = table.getColumn(field.name) as DictionaryVector;\n        if (vec && vec.dictionary) {\n            yield serializeDictionaryBatch(vec.dictionary, id).buffer;\n        }\n    }\n    for (const recordBatch of table.batches) {\n        yield serializeRecordBatch(recordBatch).buffer;\n    }\n}\n\nexport function* serializeFile(table: Table) {\n\n    const recordBatches = [];\n    const dictionaryBatches = [];\n\n    // First yield the magic string (aligned)\n    let buffer = new Uint8Array(align(magicLength, 8));\n    let metadataLength, byteLength = buffer.byteLength;\n    buffer.set(MAGIC, 0);\n    yield buffer;\n\n    // Then yield the schema\n    ({ metadataLength, buffer } = serializeMessage(table.schema));\n    byteLength += buffer.byteLength;\n    yield buffer;\n\n    for (const [id, field] of table.schema.dictionaries) {\n        const vec = table.getColumn(field.name) as DictionaryVector;\n        if (vec && vec.dictionary) {\n            ({ metadataLength, buffer } = serializeDictionaryBatch(vec.dictionary, id));\n            dictionaryBatches.push(new FileBlock(metadataLength, buffer.byteLength, byteLength));\n            byteLength += buffer.byteLength;\n            yield buffer;\n        }\n    }\n    for (const recordBatch of table.batches) {\n        ({ metadataLength, buffer } = serializeRecordBatch(recordBatch));\n        recordBatches.push(new FileBlock(metadataLength, buffer.byteLength, byteLength));\n        byteLength += buffer.byteLength;\n        yield buffer;\n    }\n\n    // Then yield the footer metadata (not aligned)\n    ({ metadataLength, buffer } = serializeFooter(new Footer(dictionaryBatches, recordBatches, table.schema)));\n    yield buffer;\n    \n    // Last, yield the footer length + terminating magic arrow string (aligned)\n    buffer = new Uint8Array(magicAndPadding);\n    new DataView(buffer.buffer).setInt32(0, metadataLength, platformIsLittleEndian);\n    buffer.set(MAGIC, buffer.byteLength - magicLength);\n    yield buffer;\n}\n\nexport function serializeRecordBatch(recordBatch: RecordBatch) {\n    const { byteLength, fieldNodes, buffers, buffersMeta } = new RecordBatchSerializer().visitRecordBatch(recordBatch);\n    const rbMeta = new RecordBatchMetadata(MetadataVersion.V4, recordBatch.length, fieldNodes, buffersMeta);\n    const rbData = concatBuffersWithMetadata(byteLength, buffers, buffersMeta);\n    return serializeMessage(rbMeta, rbData);\n}\n\nexport function serializeDictionaryBatch(dictionary: Vector, id: Long | number, isDelta: boolean = false) {\n    const { byteLength, fieldNodes, buffers, buffersMeta } = new RecordBatchSerializer().visitRecordBatch(RecordBatch.from([dictionary]));\n    const rbMeta = new RecordBatchMetadata(MetadataVersion.V4, dictionary.length, fieldNodes, buffersMeta);\n    const dbMeta = new DictionaryBatch(MetadataVersion.V4, rbMeta, id, isDelta);\n    const rbData = concatBuffersWithMetadata(byteLength, buffers, buffersMeta);\n    return serializeMessage(dbMeta, rbData);\n}\n\nexport function serializeMessage(message: Message, data?: Uint8Array) {\n    const b = new Builder();\n    _Message.finishMessageBuffer(b, writeMessage(b, message));\n    // Slice out the buffer that contains the message metadata\n    const metadataBytes = b.asUint8Array();\n    // Reserve 4 bytes for writing the message size at the front.\n    // Metadata length includes the metadata byteLength + the 4\n    // bytes for the length, and rounded up to the nearest 8 bytes.\n    const metadataLength = align(PADDING + metadataBytes.byteLength, 8);\n    // + the length of the optional data buffer at the end, padded\n    const dataByteLength = data ? data.byteLength : 0;\n    // ensure the entire message is aligned to an 8-byte boundary\n    const messageBytes = new Uint8Array(align(metadataLength + dataByteLength, 8));\n    // Write the metadata length into the first 4 bytes, but subtract the\n    // bytes we use to hold the length itself.\n    new DataView(messageBytes.buffer).setInt32(0, metadataLength - PADDING, platformIsLittleEndian);\n    // Copy the metadata bytes into the message buffer\n    messageBytes.set(metadataBytes, PADDING);\n    // Copy the optional data buffer after the metadata bytes\n    (data && dataByteLength > 0) && messageBytes.set(data, metadataLength);\n    // if (messageBytes.byteLength % 8 !== 0) { debugger; }\n    // Return the metadata length because we need to write it into each FileBlock also\n    return { metadataLength, buffer: messageBytes };\n}\n\nexport function serializeFooter(footer: Footer) {\n    const b = new Builder();\n    _Footer.finishFooterBuffer(b, writeFooter(b, footer));\n    // Slice out the buffer that contains the footer metadata\n    const footerBytes = b.asUint8Array();\n    const metadataLength = footerBytes.byteLength;\n    return { metadataLength, buffer: footerBytes };\n}\n\nclass RecordBatchSerializer extends VectorVisitor {\n    public byteLength = 0;\n    public buffers: TypedArray[] = [];\n    public fieldNodes: FieldMetadata[] = [];\n    public buffersMeta: BufferMetadata[] = [];\n    public visitRecordBatch(recordBatch: RecordBatch) {\n        this.buffers = [];\n        this.byteLength = 0;\n        this.fieldNodes = [];\n        this.buffersMeta = [];\n        for (let vector: Vector, index = -1, numCols = recordBatch.numCols; ++index < numCols;) {\n            if (vector = recordBatch.getChildAt(index)!) {\n                this.visit(vector);\n            }\n        }\n        return this;\n    }\n    public visit<T extends DataType>(vector: Vector<T>) {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            this.fieldNodes.push(new FieldMetadata(length, nullCount));\n\n            const nullBitmapAlignment = length <= 64 ? 8 : 64;\n            const nullBitmap = nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : this.getTruncatedBitmap(data.offset, length, data.nullBitmap!);\n            this.addBuffer(nullBitmap, nullBitmapAlignment);\n        }\n        return super.visit(vector);\n    }\n    public visitNull           (_nullz: Vector<Null>)            { return this;                              }\n    public visitBool           (vector: Vector<Bool>)            { return this.visitBoolVector(vector);      }\n    public visitInt            (vector: Vector<Int>)             { return this.visitFlatVector(vector);      }\n    public visitFloat          (vector: Vector<Float>)           { return this.visitFlatVector(vector);      }\n    public visitUtf8           (vector: Vector<Utf8>)            { return this.visitFlatListVector(vector);  }\n    public visitBinary         (vector: Vector<Binary>)          { return this.visitFlatListVector(vector);  }\n    public visitDate           (vector: Vector<Date_>)           { return this.visitFlatVector(vector);      }\n    public visitTimestamp      (vector: Vector<Timestamp>)       { return this.visitFlatVector(vector);      }\n    public visitTime           (vector: Vector<Time>)            { return this.visitFlatVector(vector);      }\n    public visitDecimal        (vector: Vector<Decimal>)         { return this.visitFlatVector(vector);      }\n    public visitInterval       (vector: Vector<Interval>)        { return this.visitFlatVector(vector);      }\n    public visitList           (vector: Vector<List>)            { return this.visitListVector(vector);      }\n    public visitStruct         (vector: Vector<Struct>)          { return this.visitNestedVector(vector);    }\n    public visitFixedSizeBinary(vector: Vector<FixedSizeBinary>) { return this.visitFlatVector(vector);      }\n    public visitFixedSizeList  (vector: Vector<FixedSizeList>)   { return this.visitListVector(vector);      }\n    public visitMap            (vector: Vector<Map_>)            { return this.visitNestedVector(vector);    }\n    public visitDictionary     (vector: DictionaryVector)        {\n        // Dictionary written out separately. Slice offset contained in the indices\n        return this.visit(vector.indices);\n    }\n    public visitUnion(vector: Vector<DenseUnion | SparseUnion>) {\n        const { data, type, length } = vector;\n        const { offset: sliceOffset, typeIds } = data;\n        // All Union Vectors have a typeIds buffer\n        this.addBuffer(typeIds);\n        // If this is a Sparse Union, treat it like all other Nested types\n        if (type.mode === UnionMode.Sparse) {\n            return this.visitNestedVector(vector);\n        } else if (type.mode === UnionMode.Dense) {\n            // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n            const valueOffsets = (data as DenseUnionData).valueOffsets;\n            if (sliceOffset <= 0) {\n                // If the Vector hasn't been sliced, write the existing valueOffsets\n                this.addBuffer(valueOffsets);\n                // We can treat this like all other Nested types\n                return this.visitNestedVector(vector);\n            } else {\n                // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n                // each child vector, we need to \"rebase\" the valueOffsets for each child\n                // Union typeIds are not necessary 0-indexed\n                const maxChildTypeId = Math.max(...type.typeIds);\n                const childLengths = new Int32Array(maxChildTypeId + 1);\n                // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n                const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n                const shiftedOffsets = new Int32Array(length);\n                const unshiftedOffsets = this.getZeroBasedValueOffsets(sliceOffset, length, valueOffsets);\n                for (let typeId, shift, index = -1; ++index < length;) {\n                    typeId = typeIds[index];\n                    // ~(-1) used to be faster than x === -1, so maybe worth benchmarking the difference of these two impls for large dense unions:\n                    // ~(shift = childOffsets[typeId]) || (shift = childOffsets[typeId] = unshiftedOffsets[index]);\n                    // Going with this form for now, as it's more readable\n                    if ((shift = childOffsets[typeId]) === -1) {\n                        shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                    }\n                    shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                    ++childLengths[typeId];\n                }\n                this.addBuffer(shiftedOffsets);\n                // Slice and visit children accordingly\n                for (let childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                    const typeId = type.typeIds[childIndex];\n                    const child = (vector as UnionVector).getChildAt(childIndex)!;\n                    this.visit(child.slice(childOffsets[typeId], Math.min(length, childLengths[typeId])));\n                }\n            }\n        }\n        return this;\n    }\n    protected visitBoolVector(vector: Vector<Bool>) {\n        // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n        let bitmap: Uint8Array;\n        let values, { data, length } = vector;\n        let alignment = length <= 64 ? 8 : 64;\n        if (vector.nullCount >= length) {\n            // If all values are null, just insert a placeholder empty data buffer (fastest path)\n            bitmap = new Uint8Array(0);\n        } else if (!((values = data.values) instanceof Uint8Array)) {\n            // Otherwise if the underlying data *isn't* a Uint8Array, enumerate\n            // the values as bools and re-pack them into a Uint8Array (slow path)\n            bitmap = packBools(vector);\n        } else {\n            // otherwise just slice the bitmap (fast path)\n            bitmap = this.getTruncatedBitmap(data.offset, length, values);\n        }\n        this.addBuffer(bitmap, alignment);\n        return this;\n    }\n    protected visitFlatVector<T extends FlatType>(vector: Vector<T>) {\n        const { view, data } = vector;\n        const { offset, length, values } = data;\n        const scaledLength = length * ((view as any).size || 1);\n        return this.addBuffer(values.subarray(offset, scaledLength));\n    }\n    protected visitFlatListVector<T extends FlatListType>(vector: Vector<T>) {\n        const { data, length } = vector;\n        const { offset, values, valueOffsets } = data;\n        const firstOffset = valueOffsets[0];\n        const lastOffset = valueOffsets[length];\n        const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n        // Push in the order FlatList types read their buffers\n        // valueOffsets buffer first\n        this.addBuffer(this.getZeroBasedValueOffsets(offset, length, valueOffsets));\n        // sliced values buffer second\n        this.addBuffer(values.subarray(firstOffset + offset, firstOffset + offset + byteLength));\n        return this;\n    }\n    protected visitListVector<T extends SingleNestedType>(vector: Vector<T>) {\n        const { data, length } = vector;\n        const { offset, valueOffsets } = <any> data;\n        // If we have valueOffsets (ListVector), push that buffer first\n        if (valueOffsets) {\n            this.addBuffer(this.getZeroBasedValueOffsets(offset, length, valueOffsets));\n        }\n        // Then insert the List's values child\n        return this.visit((vector as any as ListVector<T>).getChildAt(0)!);\n    }\n    protected visitNestedVector<T extends NestedType>(vector: Vector<T>) {\n        // Visit the children accordingly\n        const numChildren = (vector.type.children || []).length;\n        for (let child: Vector | null, childIndex = -1; ++childIndex < numChildren;) {\n            if (child = (vector as NestedVector<T>).getChildAt(childIndex)) {\n                this.visit(child);\n            }\n        }\n        return this;\n    }\n    protected addBuffer(values: TypedArray, alignment: number = 64) {\n        const length = align(values.byteLength, alignment);\n        this.buffers.push(values);\n        this.buffersMeta.push(new BufferMetadata(this.byteLength, length));\n        this.byteLength += length;\n        return this;\n    }\n    protected getTruncatedBitmap(offset: number, length: number, bitmap: Uint8Array) {\n        const alignedLength = align(length, length <= 64 ? 8 : 64);\n        if (offset > 0 || bitmap.length < alignedLength) {\n            // With a sliced array / non-zero offset, we have to copy the bitmap\n            const bytes = new Uint8Array(alignedLength);\n            bytes.set(\n                (offset % 8 === 0)\n                // If the slice offset is aligned to 1 byte, it's safe to slice the nullBitmap directly\n                ? bitmap.subarray(offset >> 3)\n                // iterate each bit starting from the slice offset, and repack into an aligned nullBitmap\n                : packBools(iterateBits(bitmap, offset, length, null, getBool))\n            );\n            return bytes;\n        }\n        return bitmap;\n    }\n    protected getZeroBasedValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n        // If we have a non-zero offset, then the value offsets do not start at\n        // zero. We must a) create a new offsets array with shifted offsets and\n        // b) slice the values array accordingly\n        if (offset > 0 || valueOffsets[0] !== 0) {\n            const startOffset = valueOffsets[0];\n            const destOffsets = new Int32Array(length + 1);\n            for (let index = -1; ++index < length;) {\n                destOffsets[index] = valueOffsets[index] - startOffset;\n            }\n            // Final offset\n            destOffsets[length] = valueOffsets[length] - startOffset;\n            return destOffsets;\n        }\n        return valueOffsets;\n    }\n}\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\n\nimport _Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport _Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport _Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport _List = Schema_.org.apache.arrow.flatbuf.List;\nimport _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport _Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport _Map = Schema_.org.apache.arrow.flatbuf.Map;\n\nexport class TypeSerializer extends TypeVisitor {\n    constructor(protected builder: Builder) {\n        super();\n    }\n    public visitNull(_node: Null) {\n        const b = this.builder;\n        return (\n            _Null.startNull(b) ||\n            _Null.endNull(b)\n        );\n    }\n    public visitInt(node: Int) {\n        const b = this.builder;\n        return (\n            _Int.startInt(b) ||\n            _Int.addBitWidth(b, node.bitWidth) ||\n            _Int.addIsSigned(b, node.isSigned) ||\n            _Int.endInt(b)\n        );\n    }\n    public visitFloat(node: Float) {\n        const b = this.builder;\n        return (\n            _FloatingPoint.startFloatingPoint(b) ||\n            _FloatingPoint.addPrecision(b, node.precision) ||\n            _FloatingPoint.endFloatingPoint(b)\n        );\n    }\n    public visitBinary(_node: Binary) {\n        const b = this.builder;\n        return (\n            _Binary.startBinary(b) ||\n            _Binary.endBinary(b)\n        );\n    }\n    public visitBool(_node: Bool) {\n        const b = this.builder;\n        return (\n            _Bool.startBool(b) ||\n            _Bool.endBool(b)\n        );\n    }\n    public visitUtf8(_node: Utf8) {\n        const b = this.builder;\n        return (\n            _Utf8.startUtf8(b) ||\n            _Utf8.endUtf8(b)\n        );\n    }\n    public visitDecimal(node: Decimal) {\n        const b = this.builder;\n        return (\n            _Decimal.startDecimal(b) ||\n            _Decimal.addScale(b, node.scale) ||\n            _Decimal.addPrecision(b, node.precision) ||\n            _Decimal.endDecimal(b)\n        );\n    }\n    public visitDate(node: Date_) {\n        const b = this.builder;\n        return _Date.startDate(b) || _Date.addUnit(b, node.unit) || _Date.endDate(b);\n    }\n    public visitTime(node: Time) {\n        const b = this.builder;\n        return (\n            _Time.startTime(b) ||\n            _Time.addUnit(b, node.unit) ||\n            _Time.addBitWidth(b, node.bitWidth) ||\n            _Time.endTime(b)\n        );\n    }\n    public visitTimestamp(node: Timestamp) {\n        const b = this.builder;\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        return (\n            _Timestamp.startTimestamp(b) ||\n            _Timestamp.addUnit(b, node.unit) ||\n            (timezone !== undefined && _Timestamp.addTimezone(b, timezone)) ||\n            _Timestamp.endTimestamp(b)\n        );\n    }\n    public visitInterval(node: Interval) {\n        const b = this.builder;\n        return (\n            _Interval.startInterval(b) || _Interval.addUnit(b, node.unit) || _Interval.endInterval(b)\n        );\n    }\n    public visitList(_node: List) {\n        const b = this.builder;\n        return (\n            _List.startList(b) ||\n            _List.endList(b)\n        );\n    }\n    public visitStruct(_node: Struct) {\n        const b = this.builder;\n        return (\n            _Struct.startStruct_(b) ||\n            _Struct.endStruct_(b)\n        );\n    }\n    public visitUnion(node: Union) {\n        const b = this.builder;\n        const typeIds =\n            _Union.startTypeIdsVector(b, node.typeIds.length) ||\n            _Union.createTypeIdsVector(b, node.typeIds);\n        return (\n            _Union.startUnion(b) ||\n            _Union.addMode(b, node.mode) ||\n            _Union.addTypeIds(b, typeIds) ||\n            _Union.endUnion(b)\n        );\n    }\n    public visitDictionary(node: Dictionary) {\n        const b = this.builder;\n        const indexType = this.visit(node.indices);\n        return (\n            _DictionaryEncoding.startDictionaryEncoding(b) ||\n            _DictionaryEncoding.addId(b, new Long(node.id, 0)) ||\n            _DictionaryEncoding.addIsOrdered(b, node.isOrdered) ||\n            (indexType !== undefined && _DictionaryEncoding.addIndexType(b, indexType)) ||\n            _DictionaryEncoding.endDictionaryEncoding(b)\n        );\n    }\n    public visitFixedSizeBinary(node: FixedSizeBinary) {\n        const b = this.builder;\n        return (\n            _FixedSizeBinary.startFixedSizeBinary(b) ||\n            _FixedSizeBinary.addByteWidth(b, node.byteWidth) ||\n            _FixedSizeBinary.endFixedSizeBinary(b)\n        );\n    }\n    public visitFixedSizeList(node: FixedSizeList) {\n        const b = this.builder;\n        return (\n            _FixedSizeList.startFixedSizeList(b) ||\n            _FixedSizeList.addListSize(b, node.listSize) ||\n            _FixedSizeList.endFixedSizeList(b)\n        );\n    }\n    public visitMap(node: Map_) {\n        const b = this.builder;\n        return (\n            _Map.startMap(b) ||\n            _Map.addKeysSorted(b, node.keysSorted) ||\n            _Map.endMap(b)\n        );\n    }\n}\n\nfunction concatBuffersWithMetadata(totalByteLength: number, buffers: Uint8Array[], buffersMeta: BufferMetadata[]) {\n    const data = new Uint8Array(totalByteLength);\n    for (let i = -1, n = buffers.length; ++i < n;) {\n        const { offset, length } = buffersMeta[i];\n        const { buffer, byteOffset, byteLength } = buffers[i];\n        const realBufferLength = Math.min(length, byteLength);\n        if (realBufferLength > 0) {\n            data.set(new Uint8Array(buffer, byteOffset, realBufferLength), offset);\n        }\n    }\n    return data;\n}\n\nfunction writeFooter(b: Builder, node: Footer) {\n    let schemaOffset = writeSchema(b, node.schema);\n    let recordBatches = (node.recordBatches || []);\n    let dictionaryBatches = (node.dictionaryBatches || []);\n    let recordBatchesOffset =\n        _Footer.startRecordBatchesVector(b, recordBatches.length) ||\n            mapReverse(recordBatches, (rb) => writeBlock(b, rb)) &&\n        b.endVector();\n\n    let dictionaryBatchesOffset =\n        _Footer.startDictionariesVector(b, dictionaryBatches.length) ||\n            mapReverse(dictionaryBatches, (db) => writeBlock(b, db)) &&\n        b.endVector();\n\n    return (\n        _Footer.startFooter(b) ||\n        _Footer.addSchema(b, schemaOffset) ||\n        _Footer.addVersion(b, node.schema.version) ||\n        _Footer.addRecordBatches(b, recordBatchesOffset) ||\n        _Footer.addDictionaries(b, dictionaryBatchesOffset) ||\n        _Footer.endFooter(b)\n    );\n}\n\nfunction writeBlock(b: Builder, node: FileBlock) {\n    return _Block.createBlock(b,\n        new Long(node.offset, 0),\n        node.metaDataLength,\n        new Long(node.bodyLength, 0)\n    );\n}\n\nfunction writeMessage(b: Builder, node: Message) {\n    let messageHeaderOffset = 0;\n    if (Message.isSchema(node)) {\n        messageHeaderOffset = writeSchema(b, node as Schema);\n    } else if (Message.isRecordBatch(node)) {\n        messageHeaderOffset = writeRecordBatch(b, node as RecordBatchMetadata);\n    } else if (Message.isDictionaryBatch(node)) {\n        messageHeaderOffset = writeDictionaryBatch(b, node as DictionaryBatch);\n    }\n    return (\n        _Message.startMessage(b) ||\n        _Message.addVersion(b, node.version) ||\n        _Message.addHeader(b, messageHeaderOffset) ||\n        _Message.addHeaderType(b, node.headerType) ||\n        _Message.addBodyLength(b, new Long(node.bodyLength, 0)) ||\n        _Message.endMessage(b)\n    );\n}\n\nfunction writeSchema(b: Builder, node: Schema) {\n    const fieldOffsets = node.fields.map((f) => writeField(b, f));\n    const fieldsOffset =\n        _Schema.startFieldsVector(b, fieldOffsets.length) ||\n        _Schema.createFieldsVector(b, fieldOffsets);\n    return (\n        _Schema.startSchema(b) ||\n        _Schema.addFields(b, fieldsOffset) ||\n        _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big) ||\n        _Schema.endSchema(b)\n    );\n}\n\nfunction writeRecordBatch(b: Builder, node: RecordBatchMetadata) {\n    let nodes = (node.nodes || []);\n    let buffers = (node.buffers || []);\n    let nodesOffset =\n        _RecordBatch.startNodesVector(b, nodes.length) ||\n        mapReverse(nodes, (n) => writeFieldNode(b, n)) &&\n        b.endVector();\n\n    let buffersOffset =\n        _RecordBatch.startBuffersVector(b, buffers.length) ||\n        mapReverse(buffers, (b_) => writeBuffer(b, b_)) &&\n        b.endVector();\n\n    return (\n        _RecordBatch.startRecordBatch(b) ||\n        _RecordBatch.addLength(b, new Long(node.length, 0)) ||\n        _RecordBatch.addNodes(b, nodesOffset) ||\n        _RecordBatch.addBuffers(b, buffersOffset) ||\n        _RecordBatch.endRecordBatch(b)\n    );\n}\n\nfunction writeDictionaryBatch(b: Builder, node: DictionaryBatch) {\n    const dataOffset = writeRecordBatch(b, node.data);\n    return (\n        _DictionaryBatch.startDictionaryBatch(b) ||\n        _DictionaryBatch.addId(b, new Long(node.id, 0)) ||\n        _DictionaryBatch.addIsDelta(b, node.isDelta) ||\n        _DictionaryBatch.addData(b, dataOffset) ||\n        _DictionaryBatch.endDictionaryBatch(b)\n    );\n}\n\nfunction writeBuffer(b: Builder, node: BufferMetadata) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\nfunction writeFieldNode(b: Builder, node: FieldMetadata) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\nfunction writeField(b: Builder, node: Field) {\n    let typeOffset = -1;\n    let type = node.type;\n    let typeId = node.typeId;\n    let name: number | undefined = undefined;\n    let metadata: number | undefined = undefined;\n    let dictionary: number | undefined = undefined;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = new TypeSerializer(b).visit(type);\n    } else {\n        typeId = type.dictionary.TType;\n        dictionary = new TypeSerializer(b).visit(type);\n        typeOffset = new TypeSerializer(b).visit(type.dictionary);\n    }\n\n    let children = _Field.createChildrenVector(b, (type.children || []).map((f) => writeField(b, f)));\n    if (node.metadata && node.metadata.size > 0) {\n        metadata = _Field.createCustomMetadataVector(\n            b,\n            [...node.metadata].map(([k, v]) => {\n                const key = b.createString(k);\n                const val = b.createString(v);\n                return (\n                    _KeyValue.startKeyValue(b) ||\n                    _KeyValue.addKey(b, key) ||\n                    _KeyValue.addValue(b, val) ||\n                    _KeyValue.endKeyValue(b)\n                );\n            })\n        );\n    }\n    if (node.name) {\n        name = b.createString(node.name);\n    }\n    return (\n        _Field.startField(b) ||\n        _Field.addType(b, typeOffset) ||\n        _Field.addTypeType(b, typeId) ||\n        _Field.addChildren(b, children) ||\n        _Field.addNullable(b, !!node.nullable) ||\n        (name !== undefined && _Field.addName(b, name)) ||\n        (dictionary !== undefined && _Field.addDictionary(b, dictionary)) ||\n        (metadata !== undefined && _Field.addCustomMetadata(b, metadata)) ||\n        _Field.endField(b)\n    );\n}\n\nfunction mapReverse<T, U>(source: T[], callbackfn: (value: T, index: number, array: T[]) => U): U[] {\n    const result = new Array(source.length);\n    for (let i = -1, j = source.length; --j > -1;) {\n        result[i] = callbackfn(source[j], i, source);\n    }\n    return result;\n}\n\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n\n\n// WEBPACK FOOTER //\n// ipc/writer/binary.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type_ from './type';\nimport * as data_ from './data';\nimport * as vector_ from './vector';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_node from './util/node';\nimport * as visitor_ from './visitor';\nimport * as view_ from './vector/view';\nimport * as predicate_ from './predicate';\nimport { Vector } from './vector';\nimport { RecordBatch } from './recordbatch';\nimport { Schema, Field, Type } from './type';\nimport { Table, DataFrame, NextFunc, BindFunc, CountByResult } from './table';\nimport { fromNodeStream } from './ipc/reader/node';\nimport { read, readAsync, readNodeStream } from './ipc/reader/arrow';\nimport { serializeFile, serializeStream } from './ipc/writer/binary';\n\nexport import View = vector_.View;\nexport import VectorLike = vector_.VectorLike;\nexport import TypedArray = type_.TypedArray;\nexport import IntBitWidth = type_.IntBitWidth;\nexport import TimeBitWidth = type_.TimeBitWidth;\nexport import TypedArrayConstructor = type_.TypedArrayConstructor;\n\nexport { fromNodeStream };\nexport { read, readAsync, readNodeStream };\nexport { serializeFile, serializeStream };\nexport { Table, DataFrame, NextFunc, BindFunc, CountByResult };\nexport { Field, Schema, RecordBatch, Vector, Type };\n\nexport namespace util {\n    export import Uint64 = util_int_.Uint64;\n    export import Int64 = util_int_.Int64;\n    export import Int128 = util_int_.Int128;\n    export import packBools = util_bit_.packBools;\n    export import PipeIterator = util_node.PipeIterator;\n    export import AsyncPipeIterator = util_node.AsyncPipeIterator;\n}\n\nexport namespace data {\n    export import BaseData = data_.BaseData;\n    export import FlatData = data_.FlatData;\n    export import BoolData = data_.BoolData;\n    export import FlatListData = data_.FlatListData;\n    export import DictionaryData = data_.DictionaryData;\n    export import NestedData = data_.NestedData;\n    export import ListData = data_.ListData;\n    export import UnionData = data_.UnionData;\n    export import SparseUnionData = data_.SparseUnionData;\n    export import DenseUnionData = data_.DenseUnionData;\n    export import ChunkedData = data_.ChunkedData;\n}\n\nexport namespace enum_ {\n    export import Type = type_.ArrowType;\n    export import DateUnit = type_.DateUnit;\n    export import TimeUnit = type_.TimeUnit;\n    export import Precision = type_.Precision;\n    export import UnionMode = type_.UnionMode;\n    export import VectorType = type_.VectorType;\n    export import IntervalUnit = type_.IntervalUnit;\n    export import MessageHeader = type_.MessageHeader;\n    export import MetadataVersion = type_.MetadataVersion;\n}\n\nexport namespace type {\n    export import Schema = type_.Schema;\n    export import Field = type_.Field;\n    export import Null = type_.Null;\n    export import Int = type_.Int;\n    export import Int8 = type_.Int8;\n    export import Int16 = type_.Int16;\n    export import Int32 = type_.Int32;\n    export import Int64 = type_.Int64;\n    export import Uint8 = type_.Uint8;\n    export import Uint16 = type_.Uint16;\n    export import Uint32 = type_.Uint32;\n    export import Uint64 = type_.Uint64;\n    export import Float = type_.Float;\n    export import Float16 = type_.Float16;\n    export import Float32 = type_.Float32;\n    export import Float64 = type_.Float64;\n    export import Binary = type_.Binary;\n    export import Utf8 = type_.Utf8;\n    export import Bool = type_.Bool;\n    export import Decimal = type_.Decimal;\n    export import Date_ = type_.Date_;\n    export import Time = type_.Time;\n    export import Timestamp = type_.Timestamp;\n    export import Interval = type_.Interval;\n    export import List = type_.List;\n    export import Struct = type_.Struct;\n    export import Union = type_.Union;\n    export import DenseUnion = type_.DenseUnion;\n    export import SparseUnion = type_.SparseUnion;\n    export import FixedSizeBinary = type_.FixedSizeBinary;\n    export import FixedSizeList = type_.FixedSizeList;\n    export import Map_ = type_.Map_;\n    export import Dictionary = type_.Dictionary;\n}\n\nexport namespace vector {\n    export import Vector = vector_.Vector;\n    export import NullVector = vector_.NullVector;\n    export import BoolVector = vector_.BoolVector;\n    export import IntVector = vector_.IntVector;\n    export import FloatVector = vector_.FloatVector;\n    export import DateVector = vector_.DateVector;\n    export import DecimalVector = vector_.DecimalVector;\n    export import TimeVector = vector_.TimeVector;\n    export import TimestampVector = vector_.TimestampVector;\n    export import IntervalVector = vector_.IntervalVector;\n    export import BinaryVector = vector_.BinaryVector;\n    export import FixedSizeBinaryVector = vector_.FixedSizeBinaryVector;\n    export import Utf8Vector = vector_.Utf8Vector;\n    export import ListVector = vector_.ListVector;\n    export import FixedSizeListVector = vector_.FixedSizeListVector;\n    export import MapVector = vector_.MapVector;\n    export import StructVector = vector_.StructVector;\n    export import UnionVector = vector_.UnionVector;\n    export import DictionaryVector = vector_.DictionaryVector;\n}\n\nexport namespace visitor {\n    export import TypeVisitor = visitor_.TypeVisitor;\n    export import VectorVisitor = visitor_.VectorVisitor;\n}\n\nexport namespace view {\n    export import ChunkedView = view_.ChunkedView;\n    export import DictionaryView = view_.DictionaryView;\n    export import ListView = view_.ListView;\n    export import FixedSizeListView = view_.FixedSizeListView;\n    export import BinaryView = view_.BinaryView;\n    export import Utf8View = view_.Utf8View;\n    export import UnionView = view_.UnionView;\n    export import DenseUnionView = view_.DenseUnionView;\n    export import NestedView = view_.NestedView;\n    export import StructView = view_.StructView;\n    export import MapView = view_.MapView;\n    export import FlatView = view_.FlatView;\n    export import NullView = view_.NullView;\n    export import BoolView = view_.BoolView;\n    export import ValidityView = view_.ValidityView;\n    export import PrimitiveView = view_.PrimitiveView;\n    export import FixedSizeView = view_.FixedSizeView;\n    export import Float16View = view_.Float16View;\n    export import DateDayView = view_.DateDayView;\n    export import DateMillisecondView = view_.DateMillisecondView;\n    export import TimestampDayView = view_.TimestampDayView;\n    export import TimestampSecondView = view_.TimestampSecondView;\n    export import TimestampMillisecondView = view_.TimestampMillisecondView;\n    export import TimestampMicrosecondView = view_.TimestampMicrosecondView;\n    export import TimestampNanosecondView = view_.TimestampNanosecondView;\n    export import IntervalYearMonthView = view_.IntervalYearMonthView;\n    export import IntervalYearView = view_.IntervalYearView;\n    export import IntervalMonthView = view_.IntervalMonthView;\n}\n\nexport namespace predicate {\n    export import col = predicate_.col;\n    export import lit = predicate_.lit;\n    export import custom = predicate_.custom;\n\n    export import Or = predicate_.Or;\n    export import Col = predicate_.Col;\n    export import And = predicate_.And;\n    export import Not = predicate_.Not;\n    export import GTeq = predicate_.GTeq;\n    export import LTeq = predicate_.LTeq;\n    export import Value = predicate_.Value;\n    export import Equals = predicate_.Equals;\n    export import Literal = predicate_.Literal;\n    export import Predicate = predicate_.Predicate;\n\n    export import PredicateFunc = predicate_.PredicateFunc;\n}\n\n/* These exports are needed for the closure and uglify umd targets */\ntry {\n    let Arrow: any = eval('exports');\n    if (Arrow && typeof Arrow === 'object') {\n        // string indexers tell closure and uglify not to rename these properties\n        Arrow['data'] = data;\n        Arrow['type'] = type;\n        Arrow['util'] = util;\n        Arrow['view'] = view;\n        Arrow['enum_'] = enum_;\n        Arrow['vector'] = vector;\n        Arrow['visitor'] = visitor;\n        Arrow['predicate'] = predicate;\n\n        Arrow['read'] = read;\n        Arrow['readAsync'] = readAsync;\n        Arrow['readNodeStream'] = readNodeStream;\n        Arrow['fromNodeStream'] = fromNodeStream;\n\n        Arrow['serializeFile'] = serializeFile;\n        Arrow['serializeStream'] = serializeStream;\n\n        Arrow['Type'] = Type;\n        Arrow['Field'] = Field;\n        Arrow['Schema'] = Schema;\n        Arrow['Vector'] = Vector;\n        Arrow['RecordBatch'] = RecordBatch;\n\n        Arrow['Table'] = Table;\n        Arrow['CountByResult'] = CountByResult;\n    }\n} catch (e) { /* not the UMD bundle */ }\n/* end umd exports */\n\n// closure compiler erases static properties/methods:\n// https://github.com/google/closure-compiler/issues/1776\n// set them via string indexers to save them from the mangler\nSchema['from'] = Schema.from;\nTable['from'] = Table.from;\nTable['fromAsync'] = Table.fromAsync;\nTable['fromStruct'] = Table.fromStruct;\nTable['empty'] = Table.empty;\nVector['create'] = Vector.create;\nRecordBatch['from'] = RecordBatch.from;\n\nutil_int_.Uint64['add'] = util_int_.Uint64.add;\nutil_int_.Uint64['multiply'] = util_int_.Uint64.multiply;\n\nutil_int_.Int64['add'] = util_int_.Int64.add;\nutil_int_.Int64['multiply'] = util_int_.Int64.multiply;\nutil_int_.Int64['fromString'] = util_int_.Int64.fromString;\n\nutil_int_.Int128['add'] = util_int_.Int128.add;\nutil_int_.Int128['multiply'] = util_int_.Int128.multiply;\nutil_int_.Int128['fromString'] = util_int_.Int128.fromString;\n\ndata_.ChunkedData['computeOffsets'] = data_.ChunkedData.computeOffsets;\n\n(type_.Type as any)['NONE'] = type_.Type.NONE;\n(type_.Type as any)['Null'] = type_.Type.Null;\n(type_.Type as any)['Int'] = type_.Type.Int;\n(type_.Type as any)['Float'] = type_.Type.Float;\n(type_.Type as any)['Binary'] = type_.Type.Binary;\n(type_.Type as any)['Utf8'] = type_.Type.Utf8;\n(type_.Type as any)['Bool'] = type_.Type.Bool;\n(type_.Type as any)['Decimal'] = type_.Type.Decimal;\n(type_.Type as any)['Date'] = type_.Type.Date;\n(type_.Type as any)['Time'] = type_.Type.Time;\n(type_.Type as any)['Timestamp'] = type_.Type.Timestamp;\n(type_.Type as any)['Interval'] = type_.Type.Interval;\n(type_.Type as any)['List'] = type_.Type.List;\n(type_.Type as any)['Struct'] = type_.Type.Struct;\n(type_.Type as any)['Union'] = type_.Type.Union;\n(type_.Type as any)['FixedSizeBinary'] = type_.Type.FixedSizeBinary;\n(type_.Type as any)['FixedSizeList'] = type_.Type.FixedSizeList;\n(type_.Type as any)['Map'] = type_.Type.Map;\n(type_.Type as any)['Dictionary'] = type_.Type.Dictionary;\n(type_.Type as any)['DenseUnion'] = type_.Type.DenseUnion;\n(type_.Type as any)['SparseUnion'] = type_.Type.SparseUnion;\n\ntype_.DataType['isNull'] = type_.DataType.isNull;\ntype_.DataType['isInt'] = type_.DataType.isInt;\ntype_.DataType['isFloat'] = type_.DataType.isFloat;\ntype_.DataType['isBinary'] = type_.DataType.isBinary;\ntype_.DataType['isUtf8'] = type_.DataType.isUtf8;\ntype_.DataType['isBool'] = type_.DataType.isBool;\ntype_.DataType['isDecimal'] = type_.DataType.isDecimal;\ntype_.DataType['isDate'] = type_.DataType.isDate;\ntype_.DataType['isTime'] = type_.DataType.isTime;\ntype_.DataType['isTimestamp'] = type_.DataType.isTimestamp;\ntype_.DataType['isInterval'] = type_.DataType.isInterval;\ntype_.DataType['isList'] = type_.DataType.isList;\ntype_.DataType['isStruct'] = type_.DataType.isStruct;\ntype_.DataType['isUnion'] = type_.DataType.isUnion;\ntype_.DataType['isDenseUnion'] = type_.DataType.isDenseUnion;\ntype_.DataType['isSparseUnion'] = type_.DataType.isSparseUnion;\ntype_.DataType['isFixedSizeBinary'] = type_.DataType.isFixedSizeBinary;\ntype_.DataType['isFixedSizeList'] = type_.DataType.isFixedSizeList;\ntype_.DataType['isMap'] = type_.DataType.isMap;\ntype_.DataType['isDictionary'] = type_.DataType.isDictionary;\n\nvector_.BoolVector['from'] = vector_.BoolVector.from;\nvector_.IntVector['from'] = vector_.IntVector.from;\nvector_.FloatVector['from'] = vector_.FloatVector.from;\n\nvisitor_.TypeVisitor['visitTypeInline'] = visitor_.TypeVisitor.visitTypeInline;\nvisitor_.VectorVisitor['visitTypeInline'] = visitor_.VectorVisitor.visitTypeInline;\n\n\n// WEBPACK FOOTER //\n// Arrow.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Col, Predicate } from './predicate';\nimport { Schema, Field, Struct } from './type';\nimport { read, readAsync } from './ipc/reader/arrow';\nimport { writeTableBinary } from './ipc/writer/arrow';\nimport { PipeIterator } from './util/node';\nimport { isPromise, isAsyncIterable } from './util/compat';\nimport { Vector, DictionaryVector, IntVector, StructVector } from './vector';\nimport { ChunkedView } from './vector/chunked';\n\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\nexport type BindFunc = (batch: RecordBatch) => void;\n\nexport interface DataFrame {\n    filter(predicate: Predicate): DataFrame;\n    scan(next: NextFunc, bind?: BindFunc): void;\n    count(): number;\n    countBy(col: (Col|string)): CountByResult;\n}\n\nexport class Table implements DataFrame {\n    static empty() { return new Table(new Schema([]), []); }\n    static from(sources?: Iterable<Uint8Array | Buffer | string> | object | string) {\n        if (sources) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for (let recordBatch of read(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        }\n        return Table.empty();\n    }\n    static async fromAsync(sources?: AsyncIterable<Uint8Array | Buffer | string>) {\n        if (isAsyncIterable(sources)) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for await (let recordBatch of readAsync(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        } else if (isPromise(sources)) {\n            return Table.from(await sources);\n        } else if (sources) {\n            return Table.from(sources);\n        }\n        return Table.empty();\n    }\n    static fromStruct(struct: StructVector) {\n        const schema = new Schema(struct.type.children);\n        const chunks = struct.view instanceof ChunkedView ?\n                            (struct.view.chunkVectors as StructVector[]) :\n                            [struct];\n        return new Table(chunks.map((chunk) => new RecordBatch(schema, chunk.length, chunk.view.childData)));\n    }\n\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    // List of inner RecordBatches\n    public readonly batches: RecordBatch[];\n    // List of inner Vectors, possibly spanning batches\n    protected readonly _columns: Vector<any>[] = [];\n    // Union of all inner RecordBatches into one RecordBatch, possibly chunked.\n    // If the Table has just one inner RecordBatch, this points to that.\n    // If the Table has multiple inner RecordBatches, then this is a Chunked view\n    // over the list of RecordBatches. This allows us to delegate the responsibility\n    // of indexing, iterating, slicing, and visiting to the Nested/Chunked Data/Views.\n    public readonly batchesUnion: RecordBatch;\n\n    constructor(batches: RecordBatch[]);\n    constructor(...batches: RecordBatch[]);\n    constructor(schema: Schema, batches: RecordBatch[]);\n    constructor(schema: Schema, ...batches: RecordBatch[]);\n    constructor(...args: any[]) {\n        let schema: Schema;\n        let batches: RecordBatch[];\n        if (args[0] instanceof Schema) {\n            schema = args[0];\n            batches = Array.isArray(args[1][0]) ? args[1][0] : args[1];\n        } else if (args[0] instanceof RecordBatch) {\n            schema = (batches = args)[0].schema;\n        } else {\n            schema = (batches = args[0])[0].schema;\n        }\n        this.schema = schema;\n        this.batches = batches;\n        this.batchesUnion = batches.length == 0 ?\n            new RecordBatch(schema, 0, []) :\n            batches.reduce((union, batch) => union.concat(batch));\n        this.length = this.batchesUnion.length;\n        this.numCols = this.batchesUnion.numCols;\n    }\n    public get(index: number): Struct['TValue'] {\n        return this.batchesUnion.get(index)!;\n    }\n    public getColumn(name: string) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    public getColumnAt(index: number) {\n        return index < 0 || index >= this.numCols\n            ? null\n            : this._columns[index] || (\n              this._columns[index] = this.batchesUnion.getChildAt(index)!);\n    }\n    public getColumnIndex(name: string) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    public [Symbol.iterator](): IterableIterator<Struct['TValue']> {\n        return this.batchesUnion[Symbol.iterator]() as any;\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(this.batches, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public count(): number { return this.length; }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n    public select(...columnNames: string[]) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n    public toString(separator?: string) {\n        let str = '';\n        for (const row of this.rowsToString(separator)) {\n            str += row + '\\n';\n        }\n        return str;\n    }\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        return writeTableBinary(this, stream);\n    }\n    public rowsToString(separator = ' | ') {\n        return new PipeIterator(tableRowsToString(this, separator), 'utf8');\n    }\n}\n\nclass FilteredDataFrame implements DataFrame {\n    private predicate: Predicate;\n    private batches: RecordBatch[];\n    constructor (batches: RecordBatch[], predicate: Predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(\n            this.batches,\n            this.predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult extends Table implements DataFrame {\n    constructor(values: Vector, counts: IntVector<any>) {\n        super(\n            new RecordBatch(new Schema([\n                new Field('values', values.type),\n                new Field('counts', counts.type)\n            ]),\n            counts.length, [values, counts]\n        ));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nfunction* tableRowsToString(table: Table, separator = ' | ') {\n    const fields = table.schema.fields;\n    const header = ['row_id', ...fields.map((f) => `${f}`)].map(stringify);\n    const maxColumnWidths = header.map(x => x.length);\n    // Pass one to convert to strings and count max column widths\n    for (let i = -1, n = table.length - 1; ++i < n;) {\n        let val, row = [i, ...table.get(i)];\n        for (let j = -1, k = row.length; ++j < k; ) {\n            val = stringify(row[j]);\n            maxColumnWidths[j] = Math.max(maxColumnWidths[j], val.length);\n        }\n    }\n    yield header.map((x, j) => leftPad(x, ' ', maxColumnWidths[j])).join(separator);\n    for (let i = -1; ++i < table.length;) {\n        yield [i, ...table.get(i)]\n            .map((x) => stringify(x))\n            .map((x, j) => leftPad(x, ' ', maxColumnWidths[j]))\n            .join(separator);\n    }\n}\n\nfunction leftPad(str: string, fill: string, n: number) {\n    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n}\n\nfunction stringify(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n\n\n\n// WEBPACK FOOTER //\n// table.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { packBools } from '../../util/bit';\nimport * as IntUtil from '../../util/int';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport Long = flatbuffers.Long;\n\nexport function* readJSON(json: any) {\n    const schema = schemaFromJSON(json['schema']);\n    const dictionaries = new Map<number, Vector>();\n    for (const batch of (json['dictionaries'] || [])) {\n        const message = dictionaryBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['data']['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n    for (const batch of (json['batches'] || [])) {\n        const message = recordBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\nfunction flattenDataSources(xs: any[]): any[][] {\n    return (xs || []).reduce<any[][]>((buffers, column: any) => [\n        ...buffers,\n        ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n        ...(column['OFFSET'] && [column['OFFSET']] || []),\n        ...(column['DATA'] && [column['DATA']] || []),\n        ...flattenDataSources(column['children'])\n    ], [] as any[][]);\n}\n\nconst utf8Encoder = new TextEncoder('utf-8');\n\nexport class JSONDataLoader extends TypeDataLoader {\n    constructor(private sources: any[][], nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.getBufferMetadata()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int32Array(this.sources[offset]);\n    }\n    protected readTypeIds<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int8Array(this.sources[offset]);\n    }\n    protected readData<T extends DataType>(type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type) === true) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type) === true) {\n            return new Uint8Array(decimalDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) === true || DataType.isFixedSizeBinary(type) === true) {\n            return new Uint8Array(binaryDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBool(type) === true) {\n            return new Uint8Array(packBools(sources[offset] as number[]).buffer);\n        } else if (DataType.isUtf8(type) === true) {\n            return utf8Encoder.encode((sources[offset] as string[]).join(''));\n        } else {\n            return toTypedArray(type.ArrayType, sources[offset].map((x) => +x)) as any;\n        }\n    }\n}\n\nfunction int64DataFromJSON(values: string[]) {\n    const data = new Uint32Array(values.length * 2);\n    for (let i = -1, n = values.length; ++i < n;) {\n        // Force all values (even numbers) to be parsed as strings since\n        // pulling out high and low bits seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        IntUtil.Int64.fromString(values[i].toString(), new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n    return data.buffer;\n}\n\nfunction decimalDataFromJSON(values: string[]) {\n    const data = new Uint32Array(values.length * 4);\n    for (let i = -1, n = values.length; ++i < n;) {\n        IntUtil.Int128.fromString(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n    }\n    return data.buffer;\n}\n\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data.buffer;\n}\n\nimport * as Schema_ from '../../fb/Schema';\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nimport TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport { toTypedArray } from '../../data';\n\nfunction schemaFromJSON(s: any): Schema {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    return new Schema(\n        fieldsFromJSON(s['fields'], dictionaryFields),\n        customMetadata(s['customMetadata']),\n        MetadataVersion.V4, dictionaryFields\n    );\n}\n\nfunction recordBatchFromJSON(b: any): RecordBatchMetadata {\n    return new RecordBatchMetadata(\n        MetadataVersion.V4,\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\nfunction dictionaryBatchFromJSON(b: any): DictionaryBatch {\n    return new DictionaryBatch(\n        MetadataVersion.V4,\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\nfunction fieldsFromJSON(fs: any[], dictionaryFields: Map<number, Field<Dictionary>> | null): Field[] {\n    return (fs || [])\n        .map((f) => fieldFromJSON(f, dictionaryFields))\n        .filter((f) => f != null) as Field[];\n}\n\nfunction fieldNodesFromJSON(xs: any[]): FieldMetadata[] {\n    return (xs || []).reduce<FieldMetadata[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldMetadata(\n            new Long(column['count'], 0),\n            new Long(nullCountFromJSON(column['VALIDITY']), 0)\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldMetadata[]);\n}\n\nfunction buffersFromJSON(xs: any[], buffers: BufferMetadata[] = []): BufferMetadata[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));\n        column['OFFSET'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));\n        column['DATA'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\nfunction fieldFromJSON(f: any, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f['name'];\n    let field: Field | void;\n    let nullable = f['nullable'];\n    let dataType: DataType<any> | null;\n    let id: number, keysMeta: any, dictMeta: any;\n    let metadata = customMetadata(f['customMetadata']);\n    if (!dictionaryFields || !(dictMeta = f['dictionary'])) {\n        if (dataType = typeFromJSON(f['type'], fieldsFromJSON(f['children'], dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta['id'])\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromJSON(f['type'], fieldsFromJSON(f['children'], null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta['indexType']) ? intFromJSON(keysMeta)! : new Int32(),\n            id, dictMeta['isOrdered']\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(metadata?: any) {\n    return new Map<string, string>(Object.entries(metadata || {}));\n}\n\nconst namesToTypeMap: { [n: string]: Type }  = {\n    'NONE': Type.NONE,\n    'null': Type.Null,\n    'int': Type.Int,\n    'floatingpoint': Type.FloatingPoint,\n    'binary': Type.Binary,\n    'bool': Type.Bool,\n    'utf8': Type.Utf8,\n    'decimal': Type.Decimal,\n    'date': Type.Date,\n    'time': Type.Time,\n    'timestamp': Type.Timestamp,\n    'interval': Type.Interval,\n    'list': Type.List,\n    'struct': Type.Struct_,\n    'union': Type.Union,\n    'fixedsizebinary': Type.FixedSizeBinary,\n    'fixedsizelist': Type.FixedSizeList,\n    'map': Type.Map,\n};\n\nfunction typeFromJSON(t: any, children?: Field[]) {\n    switch (namesToTypeMap[t['name']]) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromJSON(t);\n        case Type.Int: return intFromJSON(t);\n        case Type.FloatingPoint: return floatingPointFromJSON(t);\n        case Type.Binary: return binaryFromJSON(t);\n        case Type.Utf8: return utf8FromJSON(t);\n        case Type.Bool: return boolFromJSON(t);\n        case Type.Decimal: return decimalFromJSON(t);\n        case Type.Date: return dateFromJSON(t);\n        case Type.Time: return timeFromJSON(t);\n        case Type.Timestamp: return timestampFromJSON(t);\n        case Type.Interval: return intervalFromJSON(t);\n        case Type.List: return listFromJSON(t, children || []);\n        case Type.Struct_: return structFromJSON(t, children || []);\n        case Type.Union: return unionFromJSON(t, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromJSON(t);\n        case Type.FixedSizeList: return fixedSizeListFromJSON(t, children || []);\n        case Type.Map: return mapFromJSON(t, children || []);\n    }\n    throw new Error(`Unrecognized type ${t['name']}`);\n}\n\nfunction nullFromJSON           (_type: any)                    { return new Null();                                                                  }\nfunction intFromJSON            (_type: any)                    { switch (_type['bitWidth']) {\n                                                                      case  8: return _type['isSigned'] ? new  Int8() : new  Uint8();\n                                                                      case 16: return _type['isSigned'] ? new Int16() : new Uint16();\n                                                                      case 32: return _type['isSigned'] ? new Int32() : new Uint32();\n                                                                      case 64: return _type['isSigned'] ? new Int64() : new Uint64();\n                                                                  }\n                                                                  return null;                                                                        }\nfunction floatingPointFromJSON  (_type: any)                    { switch (Precision[_type['precision']] as any) {\n                                                                      case Precision.HALF: return new Float16();\n                                                                      case Precision.SINGLE: return new Float32();\n                                                                      case Precision.DOUBLE: return new Float64();\n                                                                  }\n                                                                  return null;                                                                        }\nfunction binaryFromJSON         (_type: any)                    { return new Binary();                                                                }\nfunction utf8FromJSON           (_type: any)                    { return new Utf8();                                                                  }\nfunction boolFromJSON           (_type: any)                    { return new Bool();                                                                  }\nfunction decimalFromJSON        (_type: any)                    { return new Decimal(_type['scale'], _type['precision']);                             }\nfunction dateFromJSON           (_type: any)                    { return new Date_(DateUnit[_type['unit']] as any);                                   }\nfunction timeFromJSON           (_type: any)                    { return new Time(TimeUnit[_type['unit']] as any, _type['bitWidth'] as TimeBitWidth); }\nfunction timestampFromJSON      (_type: any)                    { return new Timestamp(TimeUnit[_type['unit']] as any, _type['timezone']);            }\nfunction intervalFromJSON       (_type: any)                    { return new Interval(IntervalUnit[_type['unit']] as any);                            }\nfunction listFromJSON           (_type: any, children: Field[]) { return new List(children);                                                          }\nfunction structFromJSON         (_type: any, children: Field[]) { return new Struct(children);                                                        }\nfunction unionFromJSON          (_type: any, children: Field[]) { return new Union(_type['mode'], (_type['typeIdsArray'] || []) as Type[], children); }\nfunction fixedSizeBinaryFromJSON(_type: any)                    { return new FixedSizeBinary(_type['byteWidth']);                                     }\nfunction fixedSizeListFromJSON  (_type: any, children: Field[]) { return new FixedSizeList(_type['listSize'], children);                              }\nfunction mapFromJSON            (_type: any, children: Field[]) { return new Map_(_type['keysSorted'], children);                                     }\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/json.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { checkForMagicArrowString, PADDING, magicLength, magicAndPadding, magicX2AndPadding } from '../magic';\nimport { Message, Footer, FileBlock, RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata, } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\ntype MessageReader = (bb: ByteBuffer) => IterableIterator<RecordBatchMetadata | DictionaryBatch>;\n\nexport function* readBuffers<T extends Uint8Array | Buffer | string>(sources: Iterable<T> | Uint8Array | Buffer | string) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    if (ArrayBuffer.isView(sources) || typeof sources === 'string') {\n        sources = [sources as T];\n    }\n    for (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator(message.nodes),\n                        arrayIterator(message.buffers),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport async function* readBuffersAsync<T extends Uint8Array | Buffer | string>(sources: AsyncIterable<T>) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    for await (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator(message.nodes),\n                        arrayIterator(message.buffers),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport class BinaryDataLoader extends TypeDataLoader {\n    private bytes: Uint8Array;\n    private messageOffset: number;\n    constructor(bb: ByteBuffer, nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n        this.bytes = bb.bytes();\n        this.messageOffset = bb.position();\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Uint8Array(this.bytes.buffer, this.bytes.byteOffset + this.messageOffset + offset, length);\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\n\nfunction toByteBuffer(bytes?: Uint8Array | Buffer | string) {\n    let arr: Uint8Array = bytes as any || new Uint8Array(0);\n    if (typeof bytes === 'string') {\n        arr = new Uint8Array(bytes.length);\n        for (let i = -1, n = bytes.length; ++i < n;) {\n            arr[i] = bytes.charCodeAt(i);\n        }\n        return new ByteBuffer(arr);\n    }\n    return new ByteBuffer(arr);\n}\n\nfunction readSchema(bb: ByteBuffer) {\n    let schema: Schema, readMessages, footer: Footer | null;\n    if (footer = readFileSchema(bb)) {\n        schema = footer.schema;\n        readMessages = readFileMessages(footer);\n    } else if (schema = readStreamSchema(bb)!) {\n        readMessages = readStreamMessages;\n    } else {\n        throw new Error('Invalid Arrow buffer');\n    }\n    return { schema, readMessages };\n}\n\nfunction readStreamSchema(bb: ByteBuffer) {\n    if (!checkForMagicArrowString(bb.bytes(), 0)) {\n        for (const message of readMessages(bb)) {\n            if (Message.isSchema(message)) {\n                return message as Schema;\n            }\n        }\n    }\n    return null;\n}\n\nfunction* readStreamMessages(bb: ByteBuffer) {\n    for (const message of readMessages(bb)) {\n        if (Message.isRecordBatch(message)) {\n            yield message;\n        } else if (Message.isDictionaryBatch(message)) {\n            yield message;\n        } else {\n            continue;\n        }\n        // position the buffer after the body to read the next message\n        bb.setPosition(bb.position() + message.bodyLength);\n    }\n}\n\nfunction readFileSchema(bb: ByteBuffer) {\n    let fileLength = bb.capacity(), footerLength: number, footerOffset: number;\n    if ((fileLength < magicX2AndPadding /*                     Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        (/*                                                    Invalid footer length  */\n        (footerLength = bb.readInt32(footerOffset = fileLength - magicAndPadding)) < 1 &&\n        (footerLength + footerOffset > fileLength))) {\n        return null;\n    }\n    bb.setPosition(footerOffset - footerLength);\n    return footerFromByteBuffer(bb);\n}\n\nfunction readFileMessages(footer: Footer) {\n    return function* (bb: ByteBuffer) {\n        let message: RecordBatchMetadata | DictionaryBatch;\n        for (let i = -1, batches = footer.dictionaryBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset);\n            if (message = readMessage(bb, bb.readInt32(bb.position())) as DictionaryBatch) {\n                yield message;\n            }\n        }\n        for (let i = -1, batches = footer.recordBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset);\n            if (message = readMessage(bb, bb.readInt32(bb.position())) as RecordBatchMetadata) {\n                yield message;\n            }\n        }\n    };\n}\n\nfunction* readMessages(bb: ByteBuffer) {\n    let length: number, message: Schema | RecordBatchMetadata | DictionaryBatch;\n    while (bb.position() < bb.capacity() &&\n          (length = bb.readInt32(bb.position())) > 0) {\n        if (message = readMessage(bb, length)!) {\n            yield message;\n        }\n    }\n}\n\nfunction readMessage(bb: ByteBuffer, length: number) {\n    bb.setPosition(bb.position() + PADDING);\n    const message = messageFromByteBuffer(bb);\n    bb.setPosition(bb.position() + length);\n    return message;\n}\n\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport _Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport _Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport _Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport _List = Schema_.org.apache.arrow.flatbuf.List;\nimport _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport _Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport _Map = Schema_.org.apache.arrow.flatbuf.Map;\n\nfunction footerFromByteBuffer(bb: ByteBuffer) {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    const f = _Footer.getRootAsFooter(bb), s = f.schema()!;\n    return new Footer(\n        dictionaryBatchesFromFooter(f), recordBatchesFromFooter(f),\n        new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), f.version(), dictionaryFields)\n    );\n}\n\nfunction messageFromByteBuffer(bb: ByteBuffer) {\n    const m = _Message.getRootAsMessage(bb)!, type = m.headerType(), version = m.version();\n    switch (type) {\n        case MessageHeader.Schema: return schemaFromMessage(version, m.header(new _Schema())!, new Map());\n        case MessageHeader.RecordBatch: return recordBatchFromMessage(version, m.header(new _RecordBatch())!);\n        case MessageHeader.DictionaryBatch: return dictionaryBatchFromMessage(version, m.header(new _DictionaryBatch())!);\n    }\n    return null;\n    // throw new Error(`Unrecognized Message type '${type}'`);\n}\n\nfunction schemaFromMessage(version: MetadataVersion, s: _Schema, dictionaryFields: Map<number, Field<Dictionary>>) {\n    return new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), version, dictionaryFields);\n}\n\nfunction recordBatchFromMessage(version: MetadataVersion, b: _RecordBatch) {\n    return new RecordBatchMetadata(version, b.length(), fieldNodesFromRecordBatch(b), buffersFromRecordBatch(b, version));\n}\n\nfunction dictionaryBatchFromMessage(version: MetadataVersion, d: _DictionaryBatch) {\n    return new DictionaryBatch(version, recordBatchFromMessage(version, d.data()!), d.id(), d.isDelta());\n}\n\nfunction dictionaryBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.dictionariesLength(); ++i < n;) {\n        if (b = f.dictionaries(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction recordBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.recordBatchesLength(); ++i < n;) {\n        if (b = f.recordBatches(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction fieldsFromSchema(s: _Schema, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = s && s.fieldsLength(); ++i < n;) {\n        if (c = field(s.fields(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldsFromField(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = f && f.childrenLength(); ++i < n;) {\n        if (c = field(f.children(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldNodesFromRecordBatch(b: _RecordBatch) {\n    const fieldNodes = [] as FieldMetadata[];\n    for (let i = -1, n = b.nodesLength(); ++i < n;) {\n        fieldNodes.push(fieldNodeFromRecordBatch(b.nodes(i)!));\n    }\n    return fieldNodes;\n}\n\nfunction buffersFromRecordBatch(b: _RecordBatch, version: MetadataVersion) {\n    const buffers = [] as BufferMetadata[];\n    for (let i = -1, n = b.buffersLength(); ++i < n;) {\n        let buffer = b.buffers(i)!;\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page id field.\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        buffers.push(bufferFromRecordBatch(buffer));\n    }\n    return buffers;\n}\n\nfunction field(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f.name()!;\n    let field: Field | void;\n    let nullable = f.nullable();\n    let metadata = customMetadata(f);\n    let dataType: DataType<any> | null;\n    let keysMeta: _Int | null, id: number;\n    let dictMeta: _DictionaryEncoding | null;\n    if (!dictionaryFields || !(dictMeta = f.dictionary())) {\n        if (dataType = typeFromField(f, fieldsFromField(f, dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta.id().low)\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromField(f, fieldsFromField(f, null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta.indexType()) ? intFromField(keysMeta)! : new Int32(),\n            id, dictMeta.isOrdered()\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\nfunction fieldNodeFromRecordBatch(f: _FieldNode) {\n    return new FieldMetadata(f.length(), f.nullCount());\n}\n\nfunction bufferFromRecordBatch(b: _Buffer) {\n    return new BufferMetadata(b.offset(), b.length());\n}\n\nfunction typeFromField(f: _Field, children?: Field[]): DataType<any> | null {\n    switch (f.typeType()) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromField(f.type(new _Null())!);\n        case Type.Int: return intFromField(f.type(new _Int())!);\n        case Type.FloatingPoint: return floatFromField(f.type(new _FloatingPoint())!);\n        case Type.Binary: return binaryFromField(f.type(new _Binary())!);\n        case Type.Utf8: return utf8FromField(f.type(new _Utf8())!);\n        case Type.Bool: return boolFromField(f.type(new _Bool())!);\n        case Type.Decimal: return decimalFromField(f.type(new _Decimal())!);\n        case Type.Date: return dateFromField(f.type(new _Date())!);\n        case Type.Time: return timeFromField(f.type(new _Time())!);\n        case Type.Timestamp: return timestampFromField(f.type(new _Timestamp())!);\n        case Type.Interval: return intervalFromField(f.type(new _Interval())!);\n        case Type.List: return listFromField(f.type(new _List())!, children || []);\n        case Type.Struct_: return structFromField(f.type(new _Struct())!, children || []);\n        case Type.Union: return unionFromField(f.type(new _Union())!, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromField(f.type(new _FixedSizeBinary())!);\n        case Type.FixedSizeList: return fixedSizeListFromField(f.type(new _FixedSizeList())!, children || []);\n        case Type.Map: return mapFromField(f.type(new _Map())!, children || []);\n    }\n    throw new Error(`Unrecognized type ${f.typeType()}`);\n}\n\nfunction nullFromField           (_type: _Null)                             { return new Null();                                                                }\nfunction intFromField            (_type: _Int)                              { switch (_type.bitWidth()) {\n                                                                                  case  8: return _type.isSigned() ? new  Int8() : new  Uint8();\n                                                                                  case 16: return _type.isSigned() ? new Int16() : new Uint16();\n                                                                                  case 32: return _type.isSigned() ? new Int32() : new Uint32();\n                                                                                  case 64: return _type.isSigned() ? new Int64() : new Uint64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction floatFromField          (_type: _FloatingPoint)                    { switch (_type.precision()) {\n                                                                                  case Precision.HALF: return new Float16();\n                                                                                  case Precision.SINGLE: return new Float32();\n                                                                                  case Precision.DOUBLE: return new Float64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction binaryFromField         (_type: _Binary)                           { return new Binary();                                                              }\nfunction utf8FromField           (_type: _Utf8)                             { return new Utf8();                                                                }\nfunction boolFromField           (_type: _Bool)                             { return new Bool();                                                                }\nfunction decimalFromField        (_type: _Decimal)                          { return new Decimal(_type.scale(), _type.precision());                             }\nfunction dateFromField           (_type: _Date)                             { return new Date_(_type.unit());                                                   }\nfunction timeFromField           (_type: _Time)                             { return new Time(_type.unit(), _type.bitWidth() as TimeBitWidth);                  }\nfunction timestampFromField      (_type: _Timestamp)                        { return new Timestamp(_type.unit(), _type.timezone());                             }\nfunction intervalFromField       (_type: _Interval)                         { return new Interval(_type.unit());                                                }\nfunction listFromField           (_type: _List, children: Field[])          { return new List(children);                                                        }\nfunction structFromField         (_type: _Struct, children: Field[])        { return new Struct(children);                                                      }\nfunction unionFromField          (_type: _Union, children: Field[])         { return new Union(_type.mode(), (_type.typeIdsArray() || []) as Type[], children); }\nfunction fixedSizeBinaryFromField(_type: _FixedSizeBinary)                  { return new FixedSizeBinary(_type.byteWidth());                                    }\nfunction fixedSizeListFromField  (_type: _FixedSizeList, children: Field[]) { return new FixedSizeList(_type.listSize(), children);                             }\nfunction mapFromField            (_type: _Map, children: Field[])           { return new Map_(_type.keysSorted(), children);                                    }\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/binary.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../../table';\nimport { serializeStream, serializeFile } from './binary';\n\nexport function writeTableBinary(table: Table, stream = true) {\n    return concatBuffers(stream ? serializeStream(table) : serializeFile(table));\n}\n\nfunction concatBuffers(messages: Iterable<Uint8Array | Buffer>) {\n\n    let buffers = [], byteLength = 0;\n\n    for (const message of messages) {\n        buffers.push(message);\n        byteLength += message.byteLength;\n    }\n\n    const { buffer } = buffers.reduce(({ buffer, byteOffset }, bytes) => {\n        buffer.set(bytes, byteOffset);\n        return { buffer, byteOffset: byteOffset + bytes.byteLength };\n    }, { buffer: new Uint8Array(byteLength), byteOffset: 0 });\n\n    return buffer;\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/writer/arrow.ts","export interface Subscription {\n    unsubscribe: () => void;\n}\n\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/**\n * @ignore\n */\nexport function isPromise(x: any): x is PromiseLike<any> {\n    return x != null && Object(x) === x && typeof x['then'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isObservable(x: any): x is Observable<any> {\n    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isArrayLike(x: any): x is ArrayLike<any> {\n    return x != null && Object(x) === x && typeof x['length'] === 'number';\n}\n\n/**\n * @ignore\n */\nexport function isIterable(x: any): x is Iterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.iterator] !== 'undefined';\n}\n\n/**\n * @ignore\n */\nexport function isAsyncIterable(x: any): x is AsyncIterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.asyncIterator] !== 'undefined';\n}\n\n\n\n// WEBPACK FOOTER //\n// util/compat.ts"],"sourceRoot":""}