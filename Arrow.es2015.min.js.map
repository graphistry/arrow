{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap_2d130cec14791d55740e","type.ts","vector.ts","vector/flat.ts","fb/Schema.ts","util/bit.ts","data.ts","ipc/metadata.ts","visitor.ts","recordbatch.ts","tslib/tslib.es6.js","flatbuffers/js/flatbuffers.mjs","vector/chunked.ts","ipc/reader/vector.ts","fb/Message.ts","vector/dictionary.ts","vector/list.ts","text-encoding-utf-8/lib/encoding.lib.js","vector/nested.ts","util/int.ts","predicate.ts","ipc/reader/arrow.ts","Arrow.ts","table.ts","ipc/reader/json.ts","ipc/reader/binary.ts","fb/File.ts","util/compat.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","S","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Type","__WEBPACK_IMPORTED_MODULE_4__visitor__","ArrowType","__WEBPACK_IMPORTED_MODULE_2_flatbuffers__","Long","__WEBPACK_IMPORTED_MODULE_0__fb_Schema__","apache","arrow","flatbuf","DateUnit","TimeUnit","Precision","UnionMode","VectorType","IntervalUnit","MessageHeader","__WEBPACK_IMPORTED_MODULE_1__fb_Message__","MetadataVersion","Schema","[object Object]","fields","metadata","version","V4","dictionaries","Map","vectors","map","v","Field","type","bodyLength","_bodyLength","headerType","_headerType","fieldNames","namesToKeep","reduce","xs","x","create","newDictFields","newFields","filter","f","forEach","dictId","set","Symbol","toStringTag","nullable","typeId","TType","Z","indicies","DataType","isDictionary","__webpack_exports__","children","Null","Int","Float","Binary","Utf8","Bool","Decimal","Date","Time","Timestamp","Interval","List","Struct","Union","DenseUnion","SparseUnion","FixedSizeBinary","FixedSizeList","Dictionary","visitor","visitTypeInline","proto","ArrayType","Array","super","isSigned","bitWidth","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","precision","HALF","SINGLE","Float32Array","DOUBLE","Float64Array","scale","Date_","unit","timezone","valueType","valueField","join","mode","typeIds","Sparse","Dense","byteWidth","listSize","Map_","keysSorted","dictionary","id","isOrdered","__WEBPACK_IMPORTED_MODULE_3__ipc_metadata__","getId","low","__WEBPACK_IMPORTED_MODULE_8__util_bit__","Vector","data","view","nulls","length","__WEBPACK_IMPORTED_MODULE_0__data__","__WEBPACK_IMPORTED_MODULE_3__vector_chunked__","__WEBPACK_IMPORTED_MODULE_7__vector_flat__","nullBitmap","nullCount","createVector","source","others","a","b","concat","toArray","clone","constructor","index","isValid","value","iterator","Boolean","vecs","chunkVectors","offsets","computeOffsets","chunksLength","chunkedData","begin","end","size","total","from","to","isFinite","slicedData","slice","Math","min","__WEBPACK_IMPORTED_MODULE_1__visitor__","FlatVector","values","asInt32","offset","stride","__WEBPACK_IMPORTED_MODULE_2__type__","int32s","IntVector","ListVectorBase","valueOffsets","NestedVector","getChildAt","childData","_childData","chunks","cols","chunk","_","push","NullVector","BoolVector","defaultView","is64","TypeError","FloatVector","DateVector","DAY","MILLISECOND","DecimalVector","TimeVector","TimestampVector","SECOND","MICROSECOND","NANOSECOND","IntervalVector","YEAR_MONTH","BinaryVector","__WEBPACK_IMPORTED_MODULE_5__vector_list__","Utf8Vector","FixedSizeBinaryVector","ListVector","FixedSizeListVector","MapVector","__WEBPACK_IMPORTED_MODULE_6__vector_nested__","StructVector","UnionVector","DictionaryVector","__WEBPACK_IMPORTED_MODULE_4__vector_dictionary__","idxs","dict","key","VectorLoader","_type","__WEBPACK_IMPORTED_MODULE_0__util_bit__","FlatView","subarray","boolBitIndex","ValidityView","nullBitIndex","getNullable","byte","bit","PrimitiveView","getValue","setValue","FixedSizeView","epochMillisecondsToDate","epochDaysToMs","epochDaysToDate","valueOf","epochMillisecondsLongToMs","epochMillisecondsLongToDate","epochMs","epochSecondsToMs","epochMicrosecondsLongToMs","epochNanosecondsLongToMs","interval","org","Endianness","bb_pos","bb","obj","__init","readInt32","position","builder","startObject","endObject","Struct_","__offset","addFieldInt32","readInt8","addFieldInt8","readInt16","__vector","__vector_len","bytes","buffer","byteOffset","addFieldInt16","typeIdsOffset","addFieldOffset","startVector","addInt32","endVector","numElems","FloatingPoint","optionalEncoding","__string","timezoneOffset","VectorLayout","OFFSET","KeyValue","keyOffset","valueOffset","DictionaryEncoding","readInt64","createLong","__indirect","addFieldInt64","indexTypeOffset","readUint8","NONE","__union","nameOffset","typeType","typeOffset","dictionaryOffset","childrenOffset","addOffset","layoutOffset","customMetadataOffset","Buffer","prep","writeInt64","Little","endianness","fieldsOffset","finish","getBit","_data","_index","iterateBits","context","byteIndex","remaining","popcnt_uint32","uint32","alignment","padding","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","arr","byteLength","cnt","pos","DataView","len","getUint32","getUint16","getUint8","popcnt_array","__WEBPACK_IMPORTED_MODULE_1__type__","toTypedArray","ArrayBuffer","isView","BYTES_PER_ELEMENT","BaseData","floor","max","_nullCount","VALIDITY","sliceInternal","TYPE","sliceData","sliceOffsets","DATA","FlatData","FlatListData","DictionaryData","_indicies","_dictionary","_offset","_length","NestedData","child","SingleNestedData","valueChildData","_valuesData","ListData","UnionData","SparseUnionData","DenseUnionData","ChunkedData","chunkOffsets","_chunkVectors","_chunkOffsets","chunkData","_chunkData","vec","chunkSlices","childIndex","numChildren","childLength","childOffset","childVectors","childOffsets","dictionaryBatches","recordBatches","schema","metaDataLength","Message","RecordBatch","DictionaryBatch","nodes","buffers","isDelta","atomicDictionaryId","Bs","Vs","__WEBPACK_IMPORTED_MODULE_0__type__","acceptTypeVisitor","types","visit","visitNull","visitInt","visitFloat","visitBinary","visitUtf8","visitBool","visitDecimal","visitDate","visitTime","visitTimestamp","visitInterval","visitList","visitStruct","visitUnion","visitFixedSizeBinary","visitFixedSizeList","visitMap","visitDictionary","vector","acceptVectorVisitor","__WEBPACK_IMPORTED_MODULE_2__data__","__WEBPACK_IMPORTED_MODULE_1__vector__","args","numRows","col","numCols","columnNames","select","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","asyncIterator","g","q","verb","resume","r","__await","fulfill","settle","shift","__values","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","Cs","Ns","int32","float32","float64","isLittleEndian","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","additional_bytes","align_size","capacity","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeFloat32","writeFloat64","addInt8","addInt16","addInt64","addFloat32","addFloat64","voffset","defaultValue","slot","addFieldFloat32","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","setPosition","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","j","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","elem_size","num_elems","createString","utf8","codePoint","bytes_","position_","readUint16","readUint32","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","vtable_offset","t","opt_encoding","UTF8_BYTES","String","fromCharCode","__has_identifier","ident","__WEBPACK_IMPORTED_MODULE_0__vector__","ChunkedView","_children","mid","numChunks","sources","sourcesLen","target","setValues","arraySet","typedArraySet","dstIdx","srcIdx","srcLen","messages","message","zr","loader","readRecordBatch","messages_1_1","messages_1","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_6__type__","__WEBPACK_IMPORTED_MODULE_4__metadata__","isRecordBatch","__WEBPACK_IMPORTED_MODULE_2__recordbatch__","visitFields","isDictionaryBatch","dictionaryId","dictionaryDataType","dictionaryVector","has","__WEBPACK_IMPORTED_MODULE_3__visitor__","visitNullType","visitFlatType","visitFlatList","visitBoolType","visitListType","visitNestedType","visitUnionType","visitFixedSizeListType","__WEBPACK_IMPORTED_MODULE_5__data__","getBufferMetadata","readData","getFieldMetadata","readNullBitmap","readOffsets","readTypeIds","__WEBPACK_IMPORTED_MODULE_0__Schema__","FieldNode","null_count","nodesOffset","buffersOffset","dataOffset","V1","headerOffset","DictionaryView","__WEBPACK_IMPORTED_MODULE_1_text_encoding_utf_8__","encodeUtf8","encoder","encode","bind","decodeUtf8","decoder","decode","ListViewBase","getList","setList","VariableListViewBase","idx","inRange","ToDictionary","undefined","end_of_stream","Stream","tokens","Mi","read","Ci","token","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","TextDecoder","encoding","options","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","Oi","input","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","prepend","code_point","input_stream","code_points","endOfStream","indexOf","cp","codePointsToString","Ti","opt_string","count","temp","string","u","stringToCodePoints","NestedView","JSON","stringify","getNested","setNested","UnionView","getChildValue","setChildValue","_valueOffsets","RowView","MapRowView","rowIndex","_typeIds","carryBit16","intAsHex","toString","kInt32DecimalDigits","kPowersOfTen","BaseInt64","L","R","product","lessThan","Uint64","_times","_plus","left","right","times","plus","Int64","this_high","other_high","str","out_buffer","negate","startsWith","out","posn","group","parseInt","substr","multiple","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","Literal","Col","Value","Equals","LTeq","GTeq","batch","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","ands","_batch","rtrn","left_func","right_func","lit","col_func","getKey","parse","__WEBPACK_IMPORTED_MODULE_3__binary__","__WEBPACK_IMPORTED_MODULE_1__json__","__WEBPACK_IMPORTED_MODULE_4__vector__","_b","_a","recordBatch","util","enum_","predicate","__WEBPACK_IMPORTED_MODULE_3__util_int__","__WEBPACK_IMPORTED_MODULE_1__data__","BoolData","Int8","Int16","Int32","Uint8","Uint16","Uint32","Float16","Float32","Float64","__WEBPACK_IMPORTED_MODULE_2__vector__","TypeVisitor","VectorVisitor","__WEBPACK_IMPORTED_MODULE_5__vector_view__","ListView","FixedSizeListView","BinaryView","Utf8View","DenseUnionView","StructView","MapView","NullView","BoolView","Float16View","DateDayView","DateMillisecondView","TimestampDayView","TimestampSecondView","TimestampMillisecondView","TimestampMicrosecondView","TimestampNanosecondView","IntervalYearMonthView","IntervalYearView","IntervalMonthView","__WEBPACK_IMPORTED_MODULE_6__predicate__","Arrow","eval","__WEBPACK_IMPORTED_MODULE_9__ipc_reader_arrow__","__WEBPACK_IMPORTED_MODULE_7__recordbatch__","__WEBPACK_IMPORTED_MODULE_8__table__","fromAsync","empty","add","fromString","isNull","isInt","isFloat","isBinary","isUtf8","isBool","isDecimal","isDate","isTime","isTimestamp","isInterval","isList","isStruct","isUnion","isDenseUnion","isSparseUnion","isFixedSizeBinary","isFixedSizeList","isMap","__WEBPACK_IMPORTED_MODULE_7__vector_chunked__","batches","_columns","__WEBPACK_IMPORTED_MODULE_3__type__","__WEBPACK_IMPORTED_MODULE_1__recordbatch__","batchesUnion","union","__WEBPACK_IMPORTED_MODULE_4__ipc_reader_arrow__","__WEBPACK_IMPORTED_MODULE_5__util_compat__","struct","getColumnAt","getColumnIndex","findIndex","FilteredDataFrame","numBatches","batchIndex","count_by","__WEBPACK_IMPORTED_MODULE_2__predicate__","__WEBPACK_IMPORTED_MODULE_6__vector__","counts","keys","CountByResult","separator","row","rowsToString","TableToStringIterator","header","maxColumnWidths","val","k","leftPad","tableRowsToString","and","error","throw","return","res","write","fill","json","dictionaryFields","fieldsFromJSON","customMetadata","schemaFromJSON","__WEBPACK_IMPORTED_MODULE_5__metadata__","recordBatchFromJSON","JSONDataLoader","flattenDataSources","arrayIterator","__WEBPACK_IMPORTED_MODULE_8__data__","__WEBPACK_IMPORTED_MODULE_0_flatbuffers__","column","utf8Encoder","__WEBPACK_IMPORTED_MODULE_4_text_encoding_utf_8__","bt","__WEBPACK_IMPORTED_MODULE_2__util_bit__","su","int64DataFromJSON","decimalDataFromJSON","joined","binaryDataFromJSON","__WEBPACK_IMPORTED_MODULE_7__fb_Schema__","fieldNodesFromJSON","fieldNodes","validity","buffersFromJSON","fs","dataType","keysMeta","dictMeta","typeFromJSON","intFromJSON","fieldFromJSON","entries","namesToTypeMap","null","int","floatingpoint","binary","bool","decimal","date","time","timestamp","list","fixedsizebinary","fixedsizelist","floatingPointFromJSON","dateFromJSON","timeFromJSON","timestampFromJSON","intervalFromJSON","listFromJSON","structFromJSON","unionFromJSON","fixedSizeBinaryFromJSON","fixedSizeListFromJSON","mapFromJSON","readMessages","toByteBuffer","ru","readSchema","BinaryDataLoader","sources_1_1","sources_1","__WEBPACK_IMPORTED_MODULE_7__fb_Message__","__WEBPACK_IMPORTED_MODULE_1_flatbuffers__","messageOffset","footer","footerLength","footerOffset","fileLength","magicX2AndPadding","checkForMagicArrowString","magicLength","magicAndPadding","_Footer","getRootAsFooter","__WEBPACK_IMPORTED_MODULE_3__metadata__","blocks","dictionariesLength","dictionaryBatchesFromFooter","recordBatchesLength","recordBatchesFromFooter","__WEBPACK_IMPORTED_MODULE_4__type__","fieldsFromSchema","footerFromByteBuffer","readFileSchema","readMessage","readFileMessages","readStreamSchema","readStreamMessages","PADDING","MAGIC","MAGIC_STR","isSchema","_Message","getRootAsMessage","schemaFromMessage","_Schema","recordBatchFromMessage","_RecordBatch","dictionaryBatchFromMessage","_DictionaryBatch","messageFromByteBuffer","__WEBPACK_IMPORTED_MODULE_6__fb_Schema__","__WEBPACK_IMPORTED_MODULE_5__fb_File__","Footer","_Null","_Int","_FloatingPoint","_Binary","_Bool","_Utf8","_Decimal","_Date","_Time","_Timestamp","_Interval","_List","_Struct","_Union","_FixedSizeBinary","_FixedSizeList","_Map","nodesLength","fieldNodesFromRecordBatch","buffersLength","bufferFromRecordBatch","buffersFromRecordBatch","fieldsLength","fieldsFromField","childrenLength","typeFromField","indexType","intFromField","parent","entry","customMetadataLength","floatFromField","dateFromField","timeFromField","timestampFromField","intervalFromField","listFromField","structFromField","typeIdsArray","unionFromField","fixedSizeBinaryFromField","fixedSizeListFromField","mapFromField","Block","schemaOffset","dictionariesOffset","recordBatchesOffset"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2d130cec14791d55740e","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\nimport { Vector, View } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { DictionaryBatch } from './ipc/metadata';\nimport { TypeVisitor, VisitorNode } from './visitor';\n\nexport import Long = flatbuffers.Long;\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\nexport class Schema {\n    public static from(vectors: Vector[]) {\n        return new Schema(vectors.map((v, i) => new Field('' + i, v.type)));\n    }\n    // @ts-ignore\n    protected _bodyLength: number;\n    // @ts-ignore\n    protected _headerType: MessageHeader;\n    public readonly fields: Field[];\n    public readonly version: MetadataVersion;\n    public readonly metadata?: Map<string, string>;\n    public readonly dictionaries: Map<number, Field<Dictionary>>;\n    constructor(fields: Field[],\n                metadata?: Map<string, string>,\n                version: MetadataVersion = MetadataVersion.V4,\n                dictionaries: Map<number, Field<Dictionary>> = new Map()) {\n        this.fields = fields;\n        this.version = version;\n        this.metadata = metadata;\n        this.dictionaries = dictionaries;\n    }\n    public get bodyLength() { return this._bodyLength; }\n    public get headerType() { return this._headerType; }\n    public select(...fieldNames: string[]): Schema {\n        const namesToKeep = fieldNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        const newDictFields = new Map(), newFields = this.fields.filter((f) => namesToKeep[f.name]);\n        this.dictionaries.forEach((f, dictId) => (namesToKeep[f.name]) && newDictFields.set(dictId, f));\n        return new Schema(newFields, this.metadata, this.version, newDictFields);\n    }\n    public static [Symbol.toStringTag] = ((prototype: Schema) => {\n        prototype._bodyLength = 0;\n        prototype._headerType = MessageHeader.Schema;\n        return 'Schema';\n    })(Schema.prototype);\n}\n\nexport class Field<T extends DataType = DataType> {\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata?: Map<string, string> | null;\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata;\n    }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public get typeId(): T['TType'] { return this.type.TType; }\n    public get [Symbol.toStringTag](): string { return 'Field'; }\n    public get indicies(): T | Int<any> {\n        return DataType.isDictionary(this.type) ? this.type.indicies : this.type;\n    }\n}\n\nexport type TimeBitWidth = 32 | 64;\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n\nexport type NumericType = Int | Float | Date_ | Time | Interval | Timestamp;\nexport type FixedSizeType = Int64 |  Uint64 | Decimal | FixedSizeBinary;\nexport type PrimitiveType = NumericType | FixedSizeType;\n\nexport type FlatListType = Utf8 | Binary; // <-- these types have `offset`, `data`, and `validity` buffers\nexport type FlatType = Bool | PrimitiveType | FlatListType; // <-- these types have `data` and `validity` buffers\nexport type ListType = List<any>; // <-- these types have `offset` and `validity` buffers\nexport type NestedType = Map_ | Struct | List<any> | FixedSizeList<any> | Union<any>; // <-- these types have `validity` buffer and nested childData\nexport type SingleNestedType = List<any> | FixedSizeList<any>; // <-- these are nested types that can only have a single child\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\n export enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n    Dictionary      = 'Dictionary',  // Dictionary aka Category type\n    DenseUnion      = 'DenseUnion',  // Dense Union of logical types\n    SparseUnion     = 'SparseUnion',  // Sparse Union of logical types\n}\n\nexport interface DataType<TType extends Type = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n}\n\nexport abstract class DataType<TType extends Type = any> implements Partial<VisitorNode> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    static            isNull (x: any): x is Null            { return x && x.TType === Type.Null;            }\n    static             isInt (x: any): x is Int             { return x && x.TType === Type.Int;             }\n    static           isFloat (x: any): x is Float           { return x && x.TType === Type.Float;           }\n    static          isBinary (x: any): x is Binary          { return x && x.TType === Type.Binary;          }\n    static            isUtf8 (x: any): x is Utf8            { return x && x.TType === Type.Utf8;            }\n    static            isBool (x: any): x is Bool            { return x && x.TType === Type.Bool;            }\n    static         isDecimal (x: any): x is Decimal         { return x && x.TType === Type.Decimal;         }\n    static            isDate (x: any): x is Date_           { return x && x.TType === Type.Date;            }\n    static            isTime (x: any): x is Time            { return x && x.TType === Type.Time;            }\n    static       isTimestamp (x: any): x is Timestamp       { return x && x.TType === Type.Timestamp;       }\n    static        isInterval (x: any): x is Interval        { return x && x.TType === Type.Interval;        }\n    static            isList (x: any): x is List            { return x && x.TType === Type.List;            }\n    static          isStruct (x: any): x is Struct          { return x && x.TType === Type.Struct;          }\n    static           isUnion (x: any): x is Union           { return x && x.TType === Type.Union;           }\n    static      isDenseUnion (x: any): x is DenseUnion      { return x && x.TType === Type.DenseUnion;      }\n    static     isSparseUnion (x: any): x is SparseUnion     { return x && x.TType === Type.SparseUnion;     }\n    static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.TType === Type.FixedSizeBinary; }\n    static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.TType === Type.FixedSizeList;   }\n    static             isMap (x: any): x is Map_            { return x && x.TType === Type.Map;             }\n    static      isDictionary (x: any): x is Dictionary      { return x && x.TType === Type.Dictionary;      }\n\n    constructor(public readonly TType: TType,\n                public readonly children?: Field[]) {}\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    constructor() {\n        super(Type.Null);\n    }\n    public toString() { return `Null`; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\nexport interface Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> { TArray: TArrayType; TValue: TValueType; }\nexport class Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> {\n    constructor(public readonly isSigned: boolean,\n                public readonly bitWidth: IntBitWidth) {\n        super(Type.Int);\n    }\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.bitWidth) {\n            case  8: return (this.isSigned ?  Int8Array :  Uint8Array) as any;\n            case 16: return (this.isSigned ? Int16Array : Uint16Array) as any;\n            case 32: return (this.isSigned ? Int32Array : Uint32Array) as any;\n            case 64: return (this.isSigned ? Int32Array : Uint32Array) as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int) => {\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int.prototype);\n}\n\nexport class Int8 extends Int<number, Int8Array> { constructor() { super(true, 8); } }\nexport class Int16 extends Int<number, Int16Array> { constructor() { super(true, 16); } }\nexport class Int32 extends Int<number, Int32Array> { constructor() { super(true, 32); } }\nexport class Int64 extends Int<Int32Array, Int32Array> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int<number, Uint8Array> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int<number, Uint16Array> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int<number, Uint32Array> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int<Uint32Array, Uint32Array> { constructor() { super(false, 64); } }\n\nexport interface Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> { TArray: TArrayType; TValue: number; }\nexport class Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> {\n    constructor(public readonly precision: Precision) {\n        super(Type.Float);\n    }\n    // @ts-ignore\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array as any;\n            case Precision.SINGLE: return Float32Array as any;\n            case Precision.DOUBLE: return Float64Array as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Uint16Array> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Float32Array> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Float64Array> { constructor() { super(Precision.DOUBLE); } }\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super(Type.Binary);\n    }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super(Type.Utf8);\n    }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super(Type.Bool);\n    }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super(Type.Decimal);\n    }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Date_ extends DataType<Type.Date> { TArray: Int32Array; TValue: Date; }\nexport class Date_ extends DataType<Type.Date> {\n    constructor(public readonly unit: DateUnit) {\n        super(Type.Date);\n    }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport interface Time extends DataType<Type.Time> { TArray: Uint32Array; TValue: number; }\nexport class Time extends DataType<Type.Time> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly bitWidth: TimeBitWidth) {\n        super(Type.Time);\n    }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time.prototype);\n}\n\nexport interface Timestamp extends DataType<Type.Timestamp> { TArray: Int32Array; TValue: number; }\nexport class Timestamp extends DataType<Type.Timestamp> {\n    constructor(public unit: TimeUnit, public timezone?: string | null) {\n        super(Type.Timestamp);\n    }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp.prototype);\n}\n\nexport interface Interval extends DataType<Type.Interval> { TArray: Int32Array; TValue: Int32Array; }\nexport class Interval extends DataType<Type.Interval> {\n    constructor(public unit: IntervalUnit) {\n        super(Type.Interval);\n    }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval.prototype);\n}\n\nexport interface List<T extends DataType = any> extends DataType<Type.List>  { TArray: any; TValue: Vector<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List> {\n    constructor(public children: Field[]) {\n        super(Type.List, children);\n    }\n    public toString() { return `List<${this.valueType}>`; }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct extends DataType<Type.Struct> { TArray: any; TValue: View<any>; }\nexport class Struct extends DataType<Type.Struct> {\n    constructor(public children: Field[]) {\n        super(Type.Struct, children);\n    }\n    public toString() { return `Struct<${this.children.map((f) => f.type).join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\nexport interface Union<TType extends Type = any> extends DataType<TType> { TArray: Int8Array; TValue: any; }\nexport class Union<TType extends Type = any> extends DataType<TType> {\n    constructor(public readonly mode: UnionMode,\n                public readonly typeIds: ArrowType[],\n                public readonly children: Field[]) {\n        super(<TType> (mode === UnionMode.Sparse ? Type.SparseUnion : Type.DenseUnion), children);\n    }\n    public toString() { return `${this[Symbol.toStringTag]}<${this.typeIds.map((x) => Type[x]).join(` | `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union) => {\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union.prototype);\n}\n\nexport class DenseUnion extends Union<Type.DenseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DenseUnion) => {\n        return proto[Symbol.toStringTag] = 'DenseUnion';\n    })(DenseUnion.prototype);\n}\n\nexport class SparseUnion extends Union<Type.SparseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: SparseUnion) => {\n        return proto[Symbol.toStringTag] = 'SparseUnion';\n    })(SparseUnion.prototype);\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super(Type.FixedSizeBinary);\n    }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: any; TValue: Vector<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> {\n    constructor(public readonly listSize: number,\n                public readonly children: Field[]) {\n        super(Type.FixedSizeList, children);\n    }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Map_ extends DataType<Type.Map> { TArray: Uint8Array; TValue: View<any>; }\nexport class Map_ extends DataType<Type.Map> {\n    constructor(public readonly keysSorted: boolean,\n                public readonly children: Field[]) {\n        super(Type.Map, children);\n    }\n    public toString() { return `Map<${this.children.join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\nexport interface Dictionary<T extends DataType = any> extends DataType<Type.Dictionary> { TArray: T['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly dictionary: T;\n    public readonly indicies: Int<any>;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indicies: Int<any>, id?: Long | number | null, isOrdered?: boolean | null) {\n        super(Type.Dictionary);\n        this.indicies = indicies;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? DictionaryBatch.getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get ArrayType() { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indicies}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n\nexport interface TypedArrayConstructor<T extends TypedArray = TypedArray> {\n    readonly prototype: T;\n    readonly BYTES_PER_ELEMENT: number;\n    new (length: number): T;\n    new (elements: Iterable<number>): T;\n    new (arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): T;\n    new (buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n    of(...items: number[]): T;\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): T;\n}\n\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\nexport interface TypedArray extends Iterable<number> {\n    [index: number]: number;\n    readonly length: number;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly buffer: ArrayBufferLike;\n    readonly BYTES_PER_ELEMENT: number;\n    [Symbol.toStringTag]: any;\n    [Symbol.iterator](): IterableIterator<number>;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n    copyWithin(target: number, start: number, end?: number): this;\n    every(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): this;\n    filter(callbackfn: (value: number, index: number, array: TypedArray) => any, thisArg?: any): TypedArray;\n    find(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: TypedArray) => void, thisArg?: any): void;\n    includes(searchElement: number, fromIndex?: number): boolean;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    map(callbackfn: (value: number, index: number, array: TypedArray) => number, thisArg?: any): TypedArray;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reverse(): TypedArray;\n    set(array: ArrayLike<number>, offset?: number): void;\n    slice(start?: number, end?: number): TypedArray;\n    some(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: (a: number, b: number) => number): this;\n    subarray(begin: number, end?: number): TypedArray;\n    toLocaleString(): string;\n    toString(): string;\n}\n\n\n\n// WEBPACK FOOTER //\n// type.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data, ChunkedData, FlatData, BoolData, FlatListData, NestedData, DictionaryData } from './data';\nimport { VisitorNode, TypeVisitor, VectorVisitor } from './visitor';\nimport { DataType, ListType, FlatType, NestedType, FlatListType, TimeUnit } from './type';\nimport { IterableArrayLike, Precision, DateUnit, IntervalUnit, UnionMode } from './type';\n\nexport interface VectorLike { length: number; nullCount: number; }\n\nexport interface View<T extends DataType> {\n    clone(data: Data<T>): this;\n    isValid(index: number): boolean;\n    get(index: number): T['TValue'] | null;\n    set(index: number, value: T['TValue']): void;\n    toArray(): IterableArrayLike<T['TValue'] | null>;\n    [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n}\n\nexport class Vector<T extends DataType = any> implements VectorLike, View<T>, VisitorNode {\n    public static create<T extends DataType>(data: Data<T>): Vector<T> {\n        return createVector(data);\n    }\n    public static concat<T extends DataType>(source?: Vector<T> | null, ...others: Vector<T>[]): Vector<T> {\n        return others.reduce((a, b) => a ? a.concat(b) : b, source!);\n    }\n    public type: T;\n    public length: number;\n    public readonly data: Data<T>;\n    public readonly view: View<T>;\n    constructor(data: Data<T>, view: View<T>) {\n        this.data = data;\n        this.type = data.type;\n        this.length = data.length;\n        let nulls: Uint8Array;\n        if ((<any> data instanceof ChunkedData) && !(view instanceof ChunkedView)) {\n            this.view = new ChunkedView(data);\n        } else if (!(view instanceof ValidityView) && (nulls = data.nullBitmap!) && nulls.length > 0 && data.nullCount > 0) {\n            this.view = new ValidityView(data, view);\n        } else {\n            this.view = view;\n        }\n    }\n\n    public get nullCount() { return this.data.nullCount; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get [Symbol.toStringTag]() {\n        return `Vector<${this.type[Symbol.toStringTag]}>`;\n    }\n    public toJSON(): any { return this.toArray(); }\n    public clone<R extends T>(data: Data<R>, view: View<R> = this.view.clone(data) as any): this {\n        return new (this.constructor as any)(data, view);\n    }\n    public isValid(index: number): boolean {\n        return this.view.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this.view.get(index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.view.set(index, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return this.view.toArray();\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return this.view[Symbol.iterator]();\n    }\n    public concat(...others: Vector<T>[]): this {\n        if ((others = others.filter(Boolean)).length === 0) {\n            return this;\n        }\n        const { view } = this;\n        const vecs = !(view instanceof ChunkedView)\n            ? [this, ...others]\n            : [...view.chunkVectors, ...others];\n        const offsets = ChunkedData.computeOffsets(vecs);\n        const chunksLength = offsets[offsets.length - 1];\n        const chunkedData = new ChunkedData(this.type, chunksLength, vecs, 0, -1, offsets);\n        return this.clone(chunkedData, new ChunkedView(chunkedData)) as this;\n    }\n    public slice(begin?: number, end?: number): this {\n        let { length } = this;\n        let size = (this.view as any).size || 1;\n        let total = length, from = (begin || 0) * size;\n        let to = (typeof end === 'number' ? end : total) * size;\n        if (to < 0) { to = total - (to * -1) % total; }\n        if (from < 0) { from = total - (from * -1) % total; }\n        if (to < from) { [from, to] = [to, from]; }\n        total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;\n        const slicedData = this.data.slice(from, Math.min(total, length));\n        return this.clone(slicedData, this.view.clone(slicedData)) as this;\n    }\n\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this.type);\n    }\n    public acceptVectorVisitor(visitor: VectorVisitor): any {\n        return VectorVisitor.visitTypeInline(visitor, this.type, this);\n    }\n}\n\nexport abstract class FlatVector<T extends FlatType> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public lows(): IntVector<Int32> { return this.asInt32(0, 2); }\n    public highs(): IntVector<Int32> { return this.asInt32(1, 2); }\n    public asInt32(offset: number = 0, stride: number = 2): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        if (offset > 0) {\n            data = data.slice(offset, this.length - offset);\n        }\n        const int32s = new IntVector(data, new PrimitiveView(data, stride));\n        int32s.length = this.length / stride | 0;\n        return int32s;\n    }\n}\n\nexport abstract class ListVectorBase<T extends (ListType | FlatListType)> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n    public getValueOffset(index: number) {\n        return this.valueOffsets[index];\n    }\n    public getValueLength(index: number) {\n        return this.valueOffsets[index + 1] - this.valueOffsets[index];\n    }\n}\n\nexport abstract class NestedVector<T extends NestedType> extends Vector<T>  {\n    // @ts-ignore\n    public readonly view: NestedView<T>;\n    // @ts-ignore\n    protected _childData: Data<any>[];\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return this.view.getChildAt<R>(index);\n    }\n    public get childData(): Data<any>[] {\n        let data: Data<T> | Data<any>[];\n        if ((data = this._childData)) {\n            // Return the cached childData reference first\n            return data as Data<any>[];\n        } else if (!(<any> (data = this.data) instanceof ChunkedData)) {\n            // If data isn't chunked, cache and return NestedData's childData\n            return this._childData = (data as NestedData<T>).childData;\n        }\n        // Otherwise if the data is chunked, concatenate the childVectors from each chunk\n        // to construct a single chunked Vector for each column. Then return the ChunkedData\n        // instance from each unified chunked column as the childData of a chunked NestedVector\n        const chunks = ((data as ChunkedData<T>).chunkVectors as NestedVector<T>[]);\n        return this._childData = chunks\n            .reduce<(Vector<T> | null)[][]>((cols, chunk) => chunk.childData\n            .reduce<(Vector<T> | null)[][]>((cols, _, i) => (\n                (cols[i] || (cols[i] = [])).push(chunk.getChildAt(i))\n            ) && cols || cols, cols), [] as Vector<T>[][])\n        .map((vecs) => Vector.concat<T>(...vecs).data);\n    }\n}\n\nimport { List, Binary, Utf8, Bool, } from './type';\nimport { Null, Int, Float, Decimal, Date_, Time, Timestamp, Interval } from './type';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, Float16, Float32, Float64 } from './type';\nimport { Struct, Union, SparseUnion, DenseUnion, FixedSizeBinary, FixedSizeList, Map_, Dictionary } from './type';\n\nimport { ChunkedView } from './vector/chunked';\nimport { DictionaryView } from './vector/dictionary';\nimport { ListView, FixedSizeListView, BinaryView, Utf8View } from './vector/list';\nimport { UnionView, DenseUnionView, NestedView, StructView, MapView } from './vector/nested';\nimport { FlatView, NullView, BoolView, ValidityView, PrimitiveView, FixedSizeView, Float16View } from './vector/flat';\nimport { DateDayView, DateMillisecondView, IntervalYearMonthView } from './vector/flat';\nimport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './vector/flat';\nimport { packBools } from './util/bit';\n\nexport class NullVector extends Vector<Null> {\n    constructor(data: Data<Null>, view: View<Null> = new NullView(data)) {\n        super(data, view);\n    }\n}\n\nexport class BoolVector extends Vector<Bool> {\n    public static from(data: IterableArrayLike<boolean>) {\n        return new BoolVector(new BoolData(new Bool(), data.length, null, packBools(data)));\n    }\n    public get values() { return this.data.values; }\n    constructor(data: Data<Bool>, view: View<Bool> = new BoolView(data)) {\n        super(data, view);\n    }\n}\n\nexport class IntVector<T extends Int = Int<any>> extends FlatVector<T> {\n    public static from(data: Int8Array): IntVector<Int8>;\n    public static from(data: Int16Array): IntVector<Int16>;\n    public static from(data: Int32Array): IntVector<Int32>;\n    public static from(data: Uint8Array): IntVector<Uint8>;\n    public static from(data: Uint16Array): IntVector<Uint16>;\n    public static from(data: Uint32Array): IntVector<Uint32>;\n    public static from(data: Int32Array, is64: true): IntVector<Int64>;\n    public static from(data: Uint32Array, is64: true): IntVector<Uint64>;\n    public static from(data: any, is64?: boolean) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? new IntVector(new FlatData(new Int64(), data.length, null, data))\n                : new IntVector(new FlatData(new Uint64(), data.length, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return new IntVector(new FlatData(new Int8(), data.length, null, data));\n            case Int16Array: return new IntVector(new FlatData(new Int16(), data.length, null, data));\n            case Int32Array: return new IntVector(new FlatData(new Int32(), data.length, null, data));\n            case Uint8Array: return new IntVector(new FlatData(new Uint8(), data.length, null, data));\n            case Uint16Array: return new IntVector(new FlatData(new Uint16(), data.length, null, data));\n            case Uint32Array: return new IntVector(new FlatData(new Uint32(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    static defaultView<T extends Int>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<T>, view: View<T> = IntVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class FloatVector<T extends Float = Float<any>> extends FlatVector<T> {\n    public static from(data: Uint16Array): FloatVector<Float16>;\n    public static from(data: Float32Array): FloatVector<Float32>;\n    public static from(data: Float64Array): FloatVector<Float64>;\n    public static from(data: any) {\n        switch (data.constructor) {\n            case Uint16Array: return new FloatVector(new FlatData(new Float16(), data.length, null, data));\n            case Float32Array: return new FloatVector(new FlatData(new Float32(), data.length, null, data));\n            case Float64Array: return new FloatVector(new FlatData(new Float64(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n    static defaultView<T extends Float>(data: Data<T>): FlatView<any> {\n        return data.type.precision !== Precision.HALF ? new FlatView(data) : new Float16View(data as Data<Float16>);\n    }\n    constructor(data: Data<T>, view: View<T> = FloatVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class DateVector extends FlatVector<Date_> {\n    static defaultView<T extends Date_>(data: Data<T>) {\n        return data.type.unit === DateUnit.DAY ? new DateDayView(data) : new DateMillisecondView(data, 2);\n    }\n    constructor(data: Data<Date_>, view: View<Date_> = DateVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case DateUnit.DAY: return new IntVector(data, new TimestampDayView(data as any, 1) as any);\n            case DateUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class DecimalVector extends FlatVector<Decimal> {\n    constructor(data: Data<Decimal>, view: View<Decimal> = new FixedSizeView(data, 4)) {\n        super(data, view);\n    }\n}\n\nexport class TimeVector extends FlatVector<Time> {\n    static defaultView<T extends Time>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<Time>, view: View<Time> = TimeVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class TimestampVector extends FlatVector<Timestamp> {\n    constructor(data: Data<Timestamp>, view: View<Timestamp> = new FixedSizeView(data, 2)) {\n        super(data, view);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case TimeUnit.SECOND: return new IntVector(data, new TimestampSecondView(data as any, 1) as any);\n            case TimeUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n            case TimeUnit.MICROSECOND: return new IntVector(data, new TimestampMicrosecondView(data as any, 2) as any);\n            case TimeUnit.NANOSECOND: return new IntVector(data, new TimestampNanosecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized time unit \"${TimeUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class IntervalVector extends FlatVector<Interval> {\n    static defaultView<T extends Interval>(data: Data<T>) {\n        return data.type.unit === IntervalUnit.YEAR_MONTH ? new IntervalYearMonthView(data) : new FixedSizeView(data, 2);\n    }\n    constructor(data: Data<Interval>, view: View<Interval> = IntervalVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class BinaryVector extends ListVectorBase<Binary> {\n    constructor(data: Data<Binary>, view: View<Binary> = new BinaryView(data)) {\n        super(data, view);\n    }\n    public asUtf8() {\n        return new Utf8Vector((this.data as FlatListData<any>).clone(new Utf8()));\n    }\n}\n\nexport class FixedSizeBinaryVector extends FlatVector<FixedSizeBinary> {\n    constructor(data: Data<FixedSizeBinary>, view: View<FixedSizeBinary> = new FixedSizeView(data, data.type.byteWidth)) {\n        super(data, view);\n    }\n}\n\nexport class Utf8Vector extends ListVectorBase<Utf8> {\n    constructor(data: Data<Utf8>, view: View<Utf8> = new Utf8View(data)) {\n        super(data, view);\n    }\n    public asBinary() {\n        return new BinaryVector((this.data as FlatListData<any>).clone(new Binary()));\n    }\n}\n\nexport class ListVector<T extends DataType = DataType> extends ListVectorBase<List<T>> {\n    constructor(data: Data<List<T>>, view: View<List<T>> = new ListView(data)) {\n        super(data, view);\n    }\n}\n\nexport class FixedSizeListVector extends Vector<FixedSizeList> {\n    constructor(data: Data<FixedSizeList>, view: View<FixedSizeList> = new FixedSizeListView(data)) {\n        super(data, view);\n    }\n}\n\nexport class MapVector extends NestedVector<Map_> {\n    constructor(data: Data<Map_>, view: View<Map_> = new MapView(data)) {\n        super(data, view);\n    }\n    public asStruct() {\n        return new StructVector((this.data as NestedData<any>).clone(new Struct(this.type.children)));\n    }\n}\n\nexport class StructVector extends NestedVector<Struct> {\n    constructor(data: Data<Struct>, view: View<Struct> = new StructView(data)) {\n        super(data, view);\n    }\n    public asMap(keysSorted: boolean = false) {\n        return new MapVector((this.data as NestedData<any>).clone(new Map_(keysSorted, this.type.children)));\n    }\n}\n\nexport class UnionVector<T extends (SparseUnion | DenseUnion) = any> extends NestedVector<T> {\n    constructor(data: Data<T>, view: View<T> = <any> (data.type.mode === UnionMode.Sparse ? new UnionView<SparseUnion>(data as Data<SparseUnion>) : new DenseUnionView(data as Data<DenseUnion>))) {\n        super(data, view);\n    }\n}\n\nexport class DictionaryVector<T extends DataType = DataType> extends Vector<Dictionary<T>> {\n    // @ts-ignore\n    public readonly indicies: Vector<Int>;\n    // @ts-ignore\n    public readonly dictionary: Vector<T>;\n    constructor(data: Data<Dictionary<T>>, view: View<Dictionary<T>> = new DictionaryView<T>(data.dictionary, new IntVector(data.indicies))) {\n        super(data as Data<any>, view);\n        if (data instanceof DictionaryData && view instanceof DictionaryView) {\n            this.indicies = view.indicies;\n            this.dictionary = data.dictionary;\n        } else if (data instanceof ChunkedData && view instanceof ChunkedView) {\n            const chunks = view.chunkVectors as DictionaryVector<T>[];\n            // Assume the last chunk's dictionary data is the most up-to-date,\n            // including data from DictionaryBatches that were marked as deltas\n            this.dictionary = chunks[chunks.length - 1].dictionary;\n            this.indicies = chunks.reduce<Vector<Int> | null>(\n                (idxs: Vector<Int> | null, dict: DictionaryVector<T>) =>\n                    !idxs ? dict.indicies! : idxs.concat(dict.indicies!),\n                null\n            )!;\n        } else {\n            throw new TypeError(`Unrecognized DictionaryVector view`);\n        }\n    }\n    public getKey(index: number) { return this.indicies.get(index); }\n    public getValue(key: number) { return this.dictionary.get(key); }\n}\n\nexport const createVector = ((VectorLoader: new <T extends DataType>(data: Data<T>) => TypeVisitor) => (\n    <T extends DataType>(data: Data<T>) => TypeVisitor.visitTypeInline(new VectorLoader(data), data.type) as Vector<T>\n))(class VectorLoader<T extends DataType> extends TypeVisitor {\n    constructor(private data: Data<T>) { super(); }\n    visitNull           (_type: Null)            { return new NullVector(this.data);            }\n    visitInt            (_type: Int)             { return new IntVector(this.data);             }\n    visitFloat          (_type: Float)           { return new FloatVector(this.data);           }\n    visitBinary         (_type: Binary)          { return new BinaryVector(this.data);          }\n    visitUtf8           (_type: Utf8)            { return new Utf8Vector(this.data);            }\n    visitBool           (_type: Bool)            { return new BoolVector(this.data);            }\n    visitDecimal        (_type: Decimal)         { return new DecimalVector(this.data);         }\n    visitDate           (_type: Date_)           { return new DateVector(this.data);            }\n    visitTime           (_type: Time)            { return new TimeVector(this.data);            }\n    visitTimestamp      (_type: Timestamp)       { return new TimestampVector(this.data);       }\n    visitInterval       (_type: Interval)        { return new IntervalVector(this.data);        }\n    visitList           (_type: List)            { return new ListVector(this.data);            }\n    visitStruct         (_type: Struct)          { return new StructVector(this.data);          }\n    visitUnion          (_type: Union)           { return new UnionVector(this.data);           }\n    visitFixedSizeBinary(_type: FixedSizeBinary) { return new FixedSizeBinaryVector(this.data); }\n    visitFixedSizeList  (_type: FixedSizeList)   { return new FixedSizeListVector(this.data);   }\n    visitMap            (_type: Map_)            { return new MapVector(this.data);             }\n    visitDictionary     (_type: Dictionary)      { return new DictionaryVector(this.data);      }\n});\n\n\n\n// WEBPACK FOOTER //\n// vector.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View } from '../vector';\nimport { getBool, setBool, iterateBits } from '../util/bit';\nimport { Bool, Float16, Date_, Interval, Null, Int32, Timestamp } from '../type';\nimport { DataType, FlatType, PrimitiveType, IterableArrayLike } from '../type';\n\nexport class FlatView<T extends FlatType> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public get(index: number): T['TValue'] {\n        return this.values[index];\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.values[index] = value;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values.subarray(0, this.length);\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue']> {\n        return this.values.subarray(0, this.length)[Symbol.iterator]() as IterableIterator<T['TValue']>;\n    }\n}\n\nexport class NullView implements View<Null> {\n    public length: number;\n    constructor(data: Data<Null>) {\n        this.length = data.length;\n    }\n    public clone(data: Data<Null>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public set(): void {}\n    public get() { return null; }\n    public toArray(): IterableArrayLike<null> {\n        return [...this];\n    }\n    public *[Symbol.iterator](): IterableIterator<null> {\n        for (let index = -1, length = this.length; ++index < length;) {\n            yield null;\n        }\n    }\n}\n\nexport class BoolView extends FlatView<Bool> {\n    protected offset: number;\n    constructor(data: Data<Bool>) {\n        super(data);\n        this.offset = data.offset;\n    }\n    public toArray() { return [...this]; }\n    public get(index: number): boolean {\n        const boolBitIndex = this.offset + index;\n        return getBool(null, index, this.values[boolBitIndex >> 3], boolBitIndex % 8);\n    }\n    public set(index: number, value: boolean): void {\n        setBool(this.values, this.offset + index, value);\n    }\n    public [Symbol.iterator](): IterableIterator<boolean> {\n        return iterateBits<boolean>(this.values, this.offset, this.length, this.values, getBool);\n    }\n}\n\nexport class ValidityView<T extends DataType> implements View<T> {\n    protected view: View<T>;\n    protected length: number;\n    protected offset: number;\n    protected nullBitmap: Uint8Array;\n    constructor(data: Data<T>, view: View<T>) {\n        this.view = view;\n        this.length = data.length;\n        this.offset = data.offset;\n        this.nullBitmap = data.nullBitmap!;\n    }\n    public clone(data: Data<T>): this {\n        return new ValidityView(data, this.view.clone(data)) as this;\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return [...this];\n    }\n    public isValid(index: number): boolean {\n        const nullBitIndex = this.offset + index;\n        return getBool(null, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public get(index: number): T['TValue'] | null {\n        const nullBitIndex = this.offset + index;\n        return this.getNullable(this.view, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        if (setBool(this.nullBitmap, this.offset + index, value != null)) {\n            this.view.set(index, value);\n        }\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return iterateBits<T['TValue'] | null>(this.nullBitmap, this.offset, this.length, this.view, this.getNullable);\n    }\n    protected getNullable(view: View<T>, index: number, byte: number, bit: number) {\n        return getBool(view, index, byte, bit) ? view.get(index) : null;\n    }\n}\n\nexport class PrimitiveView<T extends PrimitiveType> extends FlatView<T> {\n    public size: number;\n    public ArrayType: T['ArrayType'];\n    constructor(data: Data<T>, size?: number) {\n        super(data);\n        this.size = size || 1;\n        this.ArrayType = data.type.ArrayType;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, this.size) as this;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values[index * size];\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values[index * size] = value;\n    }\n    public get(index: number): T['TValue'] {\n        return this.getValue(this.values, index, this.size);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setValue(this.values, index, this.size, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.size > 1 ?\n            new this.ArrayType(this) :\n            this.values.subarray(0, this.length);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getValue;\n        const { size, values, length } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, size);\n        }\n    }\n}\n\nexport class FixedSizeView<T extends PrimitiveType> extends PrimitiveView<T> {\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values.subarray(index * size, index * size + size);\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values.set((value as T['TArray']).subarray(0, size), index * size);\n    }\n}\n\nexport class Float16View extends PrimitiveView<Float16> {\n    public toArray() { return new Float32Array(this); }\n    protected getValue(values: Uint16Array, index: number, size: number): number {\n        return (values[index * size] - 32767) / 32767;\n    }\n    protected setValue(values: Uint16Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 32767) + 32767;\n    }\n}\n\nexport class DateDayView extends PrimitiveView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochDaysToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        values[index * size] = value.valueOf() / 86400000;\n    }\n}\n\nexport class DateMillisecondView extends FixedSizeView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochMillisecondsLongToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        const epochMs = value.valueOf();\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampDayView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochDaysToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 86400000) | 0;\n    }\n}\n\nexport class TimestampSecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochSecondsToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 1000) | 0;\n    }\n}\n\nexport class TimestampMillisecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMillisecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampMicrosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMicrosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000) / 4294967296) | 0;\n    }\n}\n\nexport class TimestampNanosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochNanosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000000) / 4294967296) | 0;\n    }\n}\n\nexport class IntervalYearMonthView extends PrimitiveView<Interval> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Int32Array {\n        const interval = values[index * size];\n        return new Int32Array([interval / 12, /* years */ interval % 12  /* months */]);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Int32Array): void {\n        values[index * size] = (value[0] * 12) + (value[1] % 12);\n    }\n}\n\nexport class IntervalYearView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] / 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 12) + (values[index * size] % 12);\n    }\n}\n\nexport class IntervalMonthView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] % 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (values[index * size] * 12) + (value % 12);\n    }\n}\n\nexport function epochSecondsToMs(data: Int32Array, index: number) { return 1000 * data[index]; }\nexport function epochDaysToMs(data: Int32Array, index: number) { return 86400000 * data[index]; }\nexport function epochMillisecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1]) + data[index]; }\nexport function epochMicrosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000) + (data[index] / 1000); }\nexport function epochNanosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000000) + (data[index] / 1000000); }\n\nexport function epochMillisecondsToDate(epochMs: number) { return new Date(epochMs); }\nexport function epochDaysToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochDaysToMs(data, index)); }\nexport function epochSecondsToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochSecondsToMs(data, index)); }\nexport function epochNanosecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochNanosecondsLongToMs(data, index)); }\nexport function epochMillisecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index)); }\n\n\n\n// WEBPACK FOOTER //\n// vector/flat.ts","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// fb/Schema.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { TypedArray } from '../type';\n\nexport function align(value: number, alignment: number) {\n    return value + padding(value, alignment);\n}\n\nexport function padding(value: number, alignment: number) {\n    return (value % alignment === 0 ? 0 : alignment - value % alignment);\n}\n\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\nexport function packBools(values: Iterable<any>) {\n    let n = 0, i = 0;\n    let xs: number[] = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do { xs[i] = 0; } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\nexport function popcnt_array(arr: TypedArray, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n\n\n\n// WEBPACK FOOTER //\n// util/bit.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { popcnt_bit_range } from './util/bit';\nimport { VectorLike, Vector } from './vector';\nimport { VectorType, TypedArray, TypedArrayConstructor, Dictionary } from './type';\nimport { Int, Bool, FlatListType, List, FixedSizeList, Struct, Map_ } from './type';\nimport { DataType, FlatType, ListType, NestedType, SingleNestedType, DenseUnion, SparseUnion } from './type';\n\nexport function toTypedArray<T extends TypedArray>(ArrayType: TypedArrayConstructor<T>, values?: T | ArrayLike<number> | Iterable<number> | null): T {\n    if (!ArrayType && ArrayBuffer.isView(values)) { return values; }\n    return values instanceof ArrayType ? values\n         : !values || !ArrayBuffer.isView(values) ? ArrayType.from(values || [])\n         : new ArrayType(values.buffer, values.byteOffset, values.byteLength / ArrayType.BYTES_PER_ELEMENT);\n}\n\nexport type Data<T extends DataType> = DataTypes<T>[T['TType']] & BaseData<T>;\nexport interface DataTypes<T extends DataType> {\n/*                [Type.NONE]*/  0: BaseData<T>;\n/*                [Type.Null]*/  1: FlatData<T>;\n/*                 [Type.Int]*/  2: FlatData<T>;\n/*               [Type.Float]*/  3: FlatData<T>;\n/*              [Type.Binary]*/  4: FlatListData<T>;\n/*                [Type.Utf8]*/  5: FlatListData<T>;\n/*                [Type.Bool]*/  6: BoolData;\n/*             [Type.Decimal]*/  7: FlatData<T>;\n/*                [Type.Date]*/  8: FlatData<T>;\n/*                [Type.Time]*/  9: FlatData<T>;\n/*           [Type.Timestamp]*/ 10: FlatData<T>;\n/*            [Type.Interval]*/ 11: FlatData<T>;\n/*                [Type.List]*/ 12: ListData<List<T>>;\n/*              [Type.Struct]*/ 13: NestedData<Struct>;\n/*               [Type.Union]*/ 14: UnionData;\n/*     [Type.FixedSizeBinary]*/ 15: FlatData<T>;\n/*       [Type.FixedSizeList]*/ 16: SingleNestedData<FixedSizeList<T>>;\n/*                 [Type.Map]*/ 17: NestedData<Map_>;\n/*  [Type.DenseUnion]*/ DenseUnion: DenseUnionData;\n/*[Type.SparseUnion]*/ SparseUnion: SparseUnionData;\n/*[  Type.Dictionary]*/ Dictionary: DictionaryData<any>;\n}\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Array::null_count is called the\n// first time, the null count will be computed. See ARROW-33\nexport type kUnknownNullCount = -1;\nexport const kUnknownNullCount = -1;\n\nexport class BaseData<T extends DataType = DataType> implements VectorLike {\n    public type: T;\n    public length: number;\n    public offset: number;\n    // @ts-ignore\n    public childData: Data<any>[];\n    protected _nullCount: number | kUnknownNullCount;\n    protected /*  [VectorType.OFFSET]:*/ 0?: Int32Array;\n    protected /*    [VectorType.DATA]:*/ 1?: T['TArray'];\n    protected /*[VectorType.VALIDITY]:*/ 2?: Uint8Array;\n    protected /*    [VectorType.TYPE]:*/ 3?: Int8Array;\n    constructor(type: T, length: number, offset?: number, nullCount?: number) {\n        this.type = type;\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    }\n    public get typeId() { return this.type.TType; }\n    public get nullBitmap() { return this[VectorType.VALIDITY]; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount === -1 && (nullBitmap = this[VectorType.VALIDITY])) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new BaseData(type, length, offset, nullCount);\n    }\n    public slice(offset: number, length: number) {\n        return length <= 0 ? this : this.sliceInternal(this.clone(\n            this.type, length, this.offset + offset, +(this._nullCount === 0) - 1\n        ) as any, offset, length);\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        let arr: any;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = this[VectorType.TYPE]) && (clone[VectorType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = this[VectorType.OFFSET]) && (clone[VectorType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = this[VectorType.DATA]) && (clone[VectorType.DATA] = this.sliceData(arr, offset, length));\n        return clone;\n    }\n    protected sliceData(data: T['TArray'] & TypedArray, offset: number, length: number) {\n        return data.subarray(offset, offset + length);\n    }\n    protected sliceOffsets(valueOffsets: Int32Array, offset: number, length: number) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n}\n\nexport class FlatData<T extends FlatType> extends BaseData<T> {\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, data: Iterable<number>, offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this[VectorType.DATA] = toTypedArray(this.ArrayType, data);\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new (this.constructor as any)(type, length, this[VectorType.VALIDITY], this[VectorType.DATA], offset, nullCount) as FlatData<R>;\n    }\n}\n\nexport class BoolData extends FlatData<Bool> {\n    protected sliceData(data: Uint8Array) { return data; }\n}\n\nexport class FlatListData<T extends FlatListType> extends FlatData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, data: T['TArray'], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, data, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new FlatListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this[VectorType.DATA], offset, nullCount) as FlatListData<R>;\n    }\n}\n\nexport class DictionaryData<T extends DataType> extends BaseData<Dictionary<T>> {\n    protected _dictionary: Vector<T>;\n    protected _indicies: Data<Int<any>>;\n    public get indicies() { return this._indicies; }\n    public get dictionary() { return this._dictionary; }\n    constructor(type: Dictionary<T>, dictionary: Vector<T>, indicies: Data<Int<any>>) {\n        super(type, indicies.length, (indicies as any)._nullCount);\n        this._indicies = indicies;\n        this._dictionary = dictionary;\n        this.length = this._indicies.length;\n    }\n    public get nullCount() { return this._indicies.nullCount; }\n    public clone<R extends Dictionary<T>>(type: R, length = this.length, offset = this.offset) {\n        const data = this._dictionary.data.clone(type.dictionary as any);\n        return new DictionaryData<R>(\n            this.type as any,\n            this._dictionary.clone(data) as any,\n            this._indicies.slice(offset - this.offset, length)\n        ) as any;\n    }\n    protected sliceInternal(clone: this, _offset: number, _length: number) {\n        clone.length = clone._indicies.length;\n        clone._nullCount = (clone._indicies as any)._nullCount;\n        return clone;\n    }\n}\n\nexport class NestedData<T extends NestedType = NestedType> extends BaseData<T> {\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this.childData = childData;\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount);\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        if (!this[VectorType.OFFSET]) {\n            clone.childData = this.childData.map((child) => child.slice(offset, length));\n        }\n        return super.sliceInternal(clone, offset, length);\n    }\n}\n\nexport class SingleNestedData<T extends SingleNestedType> extends NestedData<T> {\n    protected _valuesData: Data<T>;\n    public get values() { return this._valuesData; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, [valueChildData], offset, nullCount);\n        this._valuesData = valueChildData;\n    }\n}\n\nexport class ListData<T extends ListType> extends SingleNestedData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, valueChildData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new ListData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this._valuesData as any, offset, nullCount);\n    }\n}\n\nexport class UnionData<T extends (DenseUnion | SparseUnion) = any> extends NestedData<T> {\n    public /*    [VectorType.TYPE]:*/ 3: T['TArray'];\n    public get typeIds() { return this[VectorType.TYPE]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, childData, offset, nullCount);\n        this[VectorType.TYPE] = toTypedArray(Int8Array, typeIds);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new UnionData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount);\n    }\n}\n\nexport class SparseUnionData extends UnionData<SparseUnion> {\n    constructor(type: SparseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n    }\n    public clone<R extends SparseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new SparseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this.childData,\n            offset, nullCount\n        ) as any as UnionData<R>;\n    }\n}\n\nexport class DenseUnionData extends UnionData<DenseUnion> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: DenseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, valueOffsets: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends DenseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new DenseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this[VectorType.OFFSET],\n            this.childData,\n            offset, nullCount\n        ) as any as UnionData<R>;\n    }\n}\n\nexport class ChunkedData<T extends DataType> extends BaseData<T> {\n    // @ts-ignore\n    protected _chunkData: Data<T>[];\n    protected _chunkVectors: Vector<T>[];\n    protected _chunkOffsets: Uint32Array;\n    public get chunkVectors() { return this._chunkVectors; }\n    public get chunkOffsets() { return this._chunkOffsets; }\n    public get chunkData() {\n        return this._chunkData || (\n               this._chunkData = this._chunkVectors.map(({ data }) => data));\n    }\n    constructor(type: T, length: number, chunkVectors: Vector<T>[], offset?: number, nullCount?: number, chunkOffsets?: Uint32Array) {\n        super(type, length, offset, nullCount);\n        this._chunkVectors = chunkVectors;\n        this._chunkOffsets = chunkOffsets || ChunkedData.computeOffsets(chunkVectors);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount === -1) {\n            this._nullCount = nullCount = this._chunkVectors.reduce((x, c) => x + c.nullCount, 0);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new ChunkedData<R>(\n            type, length,\n            this._chunkVectors.map((vec) => vec.clone(vec.data.clone(type))) as any,\n            offset, nullCount, this._chunkOffsets\n        );\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        const chunks = this._chunkVectors;\n        const offsets = this._chunkOffsets;\n        const chunkSlices: Vector<T>[] = [];\n        for (let childIndex = -1, numChildren = chunks.length; ++childIndex < numChildren;) {\n            const child = chunks[childIndex];\n            const childLength = child.length;\n            const childOffset = offsets[childIndex];\n            // If the child is to the right of the slice boundary, exclude\n            if (childOffset >= offset + length) { continue; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= childOffset + childLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (childOffset >= offset && (childOffset + childLength) <= offset + length) {\n                chunkSlices.push(child);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - childOffset);\n            const end = begin + Math.min(childLength - begin, (offset + length) - childOffset);\n            chunkSlices.push(child.slice(begin, end));\n        }\n        clone._chunkVectors = chunkSlices;\n        clone._chunkOffsets = ChunkedData.computeOffsets(chunkSlices);\n        return clone;\n    }\n    static computeOffsets<T extends DataType>(childVectors: Vector<T>[]) {\n        const childOffsets = new Uint32Array(childVectors.length + 1);\n        for (let index = 0, length = childOffsets.length, childOffset = childOffsets[0] = 0; ++index < length;) {\n            childOffsets[index] = (childOffset += childVectors[index - 1].length);\n        }\n        return childOffsets;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// data.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { align } from '../util/bit';\nimport { Schema, Long, MessageHeader, MetadataVersion } from '../type';\n\nexport class Footer {\n    constructor(public dictionaryBatches: FileBlock[], public recordBatches: FileBlock[], public schema: Schema) {}\n}\n\nexport class FileBlock {\n    constructor(public metaDataLength: number, public bodyLength: Long, public offset: Long) {}\n}\n\nexport class Message {\n    public bodyLength: number;\n    public version: MetadataVersion;\n    public headerType: MessageHeader;\n    constructor(version: MetadataVersion, bodyLength: Long | number, headerType: MessageHeader) {\n        this.version = version;\n        this.headerType = headerType;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    static isSchema(m: Message): m is Schema { return m.headerType === MessageHeader.Schema; }\n    static isRecordBatch(m: Message): m is RecordBatchMetadata { return m.headerType === MessageHeader.RecordBatch; }\n    static isDictionaryBatch(m: Message): m is DictionaryBatch { return m.headerType === MessageHeader.DictionaryBatch; }\n}\n\nexport class RecordBatchMetadata extends Message {\n    public length: number;\n    public nodes: FieldMetadata[];\n    public buffers: BufferMetadata[];\n    constructor(version: MetadataVersion, length: Long | number, nodes: FieldMetadata[], buffers: BufferMetadata[]) {\n        super(version, buffers.reduce((s, b) => align(s + b.length + (b.offset - s), 8), 0), MessageHeader.RecordBatch);\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class DictionaryBatch extends Message {\n    public id: number;\n    public isDelta: boolean;\n    public data: RecordBatchMetadata;\n    constructor(version: MetadataVersion, data: RecordBatchMetadata, id: Long | number, isDelta: boolean = false) {\n        super(version, data.bodyLength, MessageHeader.DictionaryBatch);\n        this.isDelta = isDelta;\n        this.data = data;\n        this.id = typeof id === 'number' ? id : id.low;\n    }\n    private static atomicDictionaryId = 0;\n    public static getId() { return DictionaryBatch.atomicDictionaryId++; }\n    public get nodes(): FieldMetadata[] { return this.data.nodes; }\n    public get buffers(): BufferMetadata[] { return this.data.buffers; }\n}\n\nexport class BufferMetadata {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class FieldMetadata {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/metadata.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { Type, DataType, Dictionary } from './type';\nimport { Utf8, Binary, Decimal, FixedSizeBinary } from './type';\nimport { List, FixedSizeList, Union, Map_, Struct } from './type';\nimport { Bool, Null, Int, Float, Date_, Time, Interval, Timestamp } from './type';\n\nexport interface VisitorNode {\n    acceptTypeVisitor(visitor: TypeVisitor): any;\n    acceptVectorVisitor(visitor: VectorVisitor): any;\n}\n\nexport abstract class TypeVisitor {\n    visit(type: Partial<VisitorNode>): any {\n        return type.acceptTypeVisitor && type.acceptTypeVisitor(this) || null;\n    }\n    visitMany(types: Partial<VisitorNode>[]): any[] {\n        return types.map((type) => this.visit(type));\n    }\n    abstract visitNull?(type: Null): any;\n    abstract visitBool?(type: Bool): any;\n    abstract visitInt?(type: Int): any;\n    abstract visitFloat?(type: Float): any;\n    abstract visitUtf8?(type: Utf8): any;\n    abstract visitBinary?(type: Binary): any;\n    abstract visitFixedSizeBinary?(type: FixedSizeBinary): any;\n    abstract visitDate?(type: Date_): any;\n    abstract visitTimestamp?(type: Timestamp): any;\n    abstract visitTime?(type: Time): any;\n    abstract visitDecimal?(type: Decimal): any;\n    abstract visitList?(type: List): any;\n    abstract visitStruct?(type: Struct): any;\n    abstract visitUnion?(type: Union<any>): any;\n    abstract visitDictionary?(type: Dictionary): any;\n    abstract visitInterval?(type: Interval): any;\n    abstract visitFixedSizeList?(type: FixedSizeList): any;\n    abstract visitMap?(type: Map_): any;\n\n    static visitTypeInline<T extends DataType>(visitor: TypeVisitor, type: T): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull            && visitor.visitNull(type            as any as Null);\n            case Type.Int:             return visitor.visitInt             && visitor.visitInt(type             as any as Int);\n            case Type.Float:           return visitor.visitFloat           && visitor.visitFloat(type           as any as Float);\n            case Type.Binary:          return visitor.visitBinary          && visitor.visitBinary(type          as any as Binary);\n            case Type.Utf8:            return visitor.visitUtf8            && visitor.visitUtf8(type            as any as Utf8);\n            case Type.Bool:            return visitor.visitBool            && visitor.visitBool(type            as any as Bool);\n            case Type.Decimal:         return visitor.visitDecimal         && visitor.visitDecimal(type         as any as Decimal);\n            case Type.Date:            return visitor.visitDate            && visitor.visitDate(type            as any as Date_);\n            case Type.Time:            return visitor.visitTime            && visitor.visitTime(type            as any as Time);\n            case Type.Timestamp:       return visitor.visitTimestamp       && visitor.visitTimestamp(type       as any as Timestamp);\n            case Type.Interval:        return visitor.visitInterval        && visitor.visitInterval(type        as any as Interval);\n            case Type.List:            return visitor.visitList            && visitor.visitList(type            as any as List<T>);\n            case Type.Struct:          return visitor.visitStruct          && visitor.visitStruct(type          as any as Struct);\n            case Type.Union:           return visitor.visitUnion           && visitor.visitUnion(type           as any as Union);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(type as any as FixedSizeBinary);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList   && visitor.visitFixedSizeList(type   as any as FixedSizeList);\n            case Type.Map:             return visitor.visitMap             && visitor.visitMap(type             as any as Map_);\n            case Type.Dictionary:      return visitor.visitDictionary      && visitor.visitDictionary(type      as any as Dictionary);\n            default: return null;\n        }\n    }\n}\n\nexport abstract class VectorVisitor {\n    visit(vector: Partial<VisitorNode>): any {\n        return vector.acceptVectorVisitor && vector.acceptVectorVisitor(this) || null;\n    }\n    visitMany(vectors: Partial<VisitorNode>[]): any[] {\n        return vectors.map((vector) => this.visit(vector));\n    }\n    abstract visitNull?(vector: Vector<Null>): any;\n    abstract visitBool?(vector: Vector<Bool>): any;\n    abstract visitInt?(vector: Vector<Int>): any;\n    abstract visitFloat?(vector: Vector<Float>): any;\n    abstract visitUtf8?(vector: Vector<Utf8>): any;\n    abstract visitBinary?(vector: Vector<Binary>): any;\n    abstract visitFixedSizeBinary?(vector: Vector<FixedSizeBinary>): any;\n    abstract visitDate?(vector: Vector<Date_>): any;\n    abstract visitTimestamp?(vector: Vector<Timestamp>): any;\n    abstract visitTime?(vector: Vector<Time>): any;\n    abstract visitDecimal?(vector: Vector<Decimal>): any;\n    abstract visitList?(vector: Vector<List>): any;\n    abstract visitStruct?(vector: Vector<Struct>): any;\n    abstract visitUnion?(vector: Vector<Union<any>>): any;\n    abstract visitDictionary?(vector: Vector<Dictionary>): any;\n    abstract visitInterval?(vector: Vector<Interval>): any;\n    abstract visitFixedSizeList?(vector: Vector<FixedSizeList>): any;\n    abstract visitMap?(vector: Vector<Map_>): any;\n\n    static visitTypeInline<T extends DataType>(visitor: VectorVisitor, type: T, vector: Vector<T>): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull            && visitor.visitNull(vector            as any as Vector<Null>);\n            case Type.Int:             return visitor.visitInt             && visitor.visitInt(vector             as any as Vector<Int>);\n            case Type.Float:           return visitor.visitFloat           && visitor.visitFloat(vector           as any as Vector<Float>);\n            case Type.Binary:          return visitor.visitBinary          && visitor.visitBinary(vector          as any as Vector<Binary>);\n            case Type.Utf8:            return visitor.visitUtf8            && visitor.visitUtf8(vector            as any as Vector<Utf8>);\n            case Type.Bool:            return visitor.visitBool            && visitor.visitBool(vector            as any as Vector<Bool>);\n            case Type.Decimal:         return visitor.visitDecimal         && visitor.visitDecimal(vector         as any as Vector<Decimal>);\n            case Type.Date:            return visitor.visitDate            && visitor.visitDate(vector            as any as Vector<Date_>);\n            case Type.Time:            return visitor.visitTime            && visitor.visitTime(vector            as any as Vector<Time>);\n            case Type.Timestamp:       return visitor.visitTimestamp       && visitor.visitTimestamp(vector       as any as Vector<Timestamp>);\n            case Type.Interval:        return visitor.visitInterval        && visitor.visitInterval(vector        as any as Vector<Interval>);\n            case Type.List:            return visitor.visitList            && visitor.visitList(vector            as any as Vector<List<T>>);\n            case Type.Struct:          return visitor.visitStruct          && visitor.visitStruct(vector          as any as Vector<Struct>);\n            case Type.Union:           return visitor.visitUnion           && visitor.visitUnion(vector           as any as Vector<Union>);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(vector as any as Vector<FixedSizeBinary>);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList   && visitor.visitFixedSizeList(vector   as any as Vector<FixedSizeList>);\n            case Type.Map:             return visitor.visitMap             && visitor.visitMap(vector             as any as Vector<Map_>);\n            case Type.Dictionary:      return visitor.visitDictionary      && visitor.visitDictionary(vector      as any as Vector<Dictionary>);\n            default: return null;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// visitor.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Struct, DataType } from './type';\nimport { flatbuffers } from 'flatbuffers';\nimport { View, Vector, StructVector } from './vector';\nimport { Data, NestedData } from './data';\n\nimport Long = flatbuffers.Long;\n\nexport class RecordBatch extends StructVector {\n    public static from(vectors: Vector[]) {\n        return new RecordBatch(Schema.from(vectors),\n            Math.max(...vectors.map((v) => v.length)),\n            vectors\n        );\n    }\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    constructor(schema: Schema, data: Data<Struct>, view: View<Struct>);\n    constructor(schema: Schema, numRows: Long | number, cols: Data<any> | Vector[]);\n    constructor(...args: any[]) {\n        if (typeof args[1] !== 'number') {\n            const data = args[1] as Data<Struct>;\n            super(data, args[2]);\n            this.schema = args[0];\n            this.length = data.length;\n        } else {\n            const [schema, numRows, cols] = args;\n            const childData: Data<any>[] = new Array(cols.length);\n            for (let index = -1, length = cols.length; ++index < length;) {\n                const col: Data<any> | Vector = cols[index];\n                childData[index] = col instanceof Vector ? col.data : col;\n            }\n            super(new NestedData(new Struct(schema.fields), numRows, null, childData));\n            this.schema = schema;\n            this.length = numRows;\n        }\n        this.numCols = this.schema.fields.length;\n    }\n    public clone<R extends Struct>(data: Data<R>, view: View<R> = this.view.clone(data)): this {\n        return new RecordBatch(this.schema, data as any, view) as any;\n    }\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numCols ? null : super.getChildAt<R>(index);\n    }\n    public select(...columnNames: string[]) {\n        const fields = this.schema.fields;\n        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new RecordBatch(\n            this.schema.select(...columnNames), this.length,\n            this.childData.filter((_, i) => namesToKeep[fields[i].name])\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// recordbatch.ts","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslib/tslib.es6.js\n// module id = 9\n// module chunks = 0","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n/// @endcond\n/// @}\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/flatbuffers/js/flatbuffers.mjs\n// module id = 10\n// module chunks = 0","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ChunkedData } from '../data';\nimport { View, Vector, NestedVector } from '../vector';\nimport { DataType, TypedArray, IterableArrayLike } from '../type';\n\nexport class ChunkedView<T extends DataType> implements View<T> {\n    public chunkVectors: Vector<T>[];\n    public chunkOffsets: Uint32Array;\n    // @ts-ignore\n    protected _children: Vector<any>[];\n    constructor(data: ChunkedData<T>) {\n        this.chunkVectors = data.chunkVectors;\n        this.chunkOffsets = data.chunkOffsets;\n    }\n    public clone(data: ChunkedData<T>): this {\n        return new ChunkedView(data) as this;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const vector of this.chunkVectors) {\n            yield* vector;\n        }\n    }\n    public getChildAt<R extends DataType = DataType>(index: number) {\n        return index < 0 ? null\n            : (this._children || (this._children = []))[index] ||\n              (this._children[index] = Vector.concat<R>(\n                  ...(<any> this.chunkVectors as NestedVector<any>[])\n                         .map((chunk) => chunk.getChildAt<R>(index))));\n    }\n    public isValid(index: number): boolean {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].isValid(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return false;\n    }\n    public get(index: number): T['TValue'] | null {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].get(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return null;\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].set(index - pos, value);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        const chunks = this.chunkVectors;\n        const numChunks = chunks.length;\n        if (numChunks === 1) {\n            return chunks[0].toArray();\n        }\n        let sources = new Array<any>(numChunks);\n        let sourcesLen = 0, ArrayType: any = Array;\n        for (let index = -1; ++index < numChunks;) {\n            let source = chunks[index].toArray();\n            sourcesLen += (sources[index] = source).length;\n            if (ArrayType !== source.constructor) {\n                ArrayType = source.constructor;\n            }\n        }\n        let target = new ArrayType(sourcesLen);\n        let setValues = ArrayType === Array ? arraySet : typedArraySet as any;\n        for (let index = -1, offset = 0; ++index < numChunks;) {\n            offset = setValues(sources[index], target, offset);\n        }\n        return target;\n    }\n}\n\nfunction typedArraySet(source: TypedArray, target: TypedArray, index: number) {\n    return target.set(source, index) || index + source.length;\n}\n\nfunction arraySet(source: any[], target: any[], index: number) {\n    let dstIdx = index - 1, srcIdx = -1, srcLen = source.length;\n    while (++srcIdx < srcLen) {\n        target[++dstIdx] = source[srcIdx];\n    }\n    return dstIdx;\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/chunked.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { RecordBatch } from '../../recordbatch';\nimport { TypeVisitor } from '../../visitor';\nimport { FlatType, NestedType, ListType } from '../../type';\nimport { Message, FieldMetadata, BufferMetadata } from '../metadata';\nimport { FlatData, ListData, NestedData, SingleNestedData, DenseUnionData, SparseUnionData, BoolData, FlatListData, DictionaryData } from '../../data';\nimport {\n    Schema, Field,\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n    UnionMode, SparseUnion, DenseUnion, FlatListType, DataType,\n} from '../../type';\n\nexport function* readRecordBatches(messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport async function* readRecordBatchesAsync(messages: AsyncIterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for await (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport function* readRecordBatch(schema: Schema, message: Message, loader: TypeDataLoader) {\n    if (Message.isRecordBatch(message)) {\n        yield new RecordBatch(schema, message.length, loader.visitFields(schema.fields));\n    } else if (Message.isDictionaryBatch(message)) {\n        const dictionaryId = message.id;\n        const dictionaries = loader.dictionaries;\n        const dictionaryField = schema.dictionaries.get(dictionaryId)!;\n        const dictionaryDataType = (dictionaryField.type as Dictionary).dictionary;\n        let dictionaryVector = Vector.create(loader.visit(dictionaryDataType));\n        if (message.isDelta && dictionaries.has(dictionaryId)) {\n            dictionaryVector = dictionaries.get(dictionaryId)!.concat(dictionaryVector);\n        }\n        dictionaries.set(dictionaryId, dictionaryVector);\n    }\n}\n\nexport abstract class TypeDataLoader extends TypeVisitor {\n\n    public dictionaries: Map<number, Vector>;\n    protected nodes: Iterator<FieldMetadata>;\n    protected buffers: Iterator<BufferMetadata>;\n\n    constructor(nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super();\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visitFields(fields: Field[]) { return fields.map((field) => this.visit(field.type)); }\n\n    public visitNull           (type: Null)            { return this.visitNullType(type);   }\n    public visitInt            (type: Int)             { return this.visitFlatType(type);   }\n    public visitFloat          (type: Float)           { return this.visitFlatType(type);   }\n    public visitBinary         (type: Binary)          { return this.visitFlatList(type);   }\n    public visitUtf8           (type: Utf8)            { return this.visitFlatList(type);   }\n    public visitBool           (type: Bool)            { return this.visitBoolType(type);   }\n    public visitDecimal        (type: Decimal)         { return this.visitFlatType(type);   }\n    public visitDate           (type: Date_)           { return this.visitFlatType(type);   }\n    public visitTime           (type: Time)            { return this.visitFlatType(type);   }\n    public visitTimestamp      (type: Timestamp)       { return this.visitFlatType(type);   }\n    public visitInterval       (type: Interval)        { return this.visitFlatType(type);   }\n    public visitList           (type: List)            { return this.visitListType(type);   }\n    public visitStruct         (type: Struct)          { return this.visitNestedType(type); }\n    public visitUnion          (type: Union)           { return this.visitUnionType(type);  }\n    public visitFixedSizeBinary(type: FixedSizeBinary) { return this.visitFlatType(type);   }\n    public visitFixedSizeList  (type: FixedSizeList)   { return this.visitFixedSizeListType(type); }\n    public visitMap            (type: Map_)            { return this.visitNestedType(type); }\n    public visitDictionary     (type: Dictionary)      {\n        return new DictionaryData(type, this.dictionaries.get(type.id)!, this.visit(type.indicies));\n    }\n    protected getFieldMetadata() { return this.nodes.next().value; }\n    protected getBufferMetadata() { return this.buffers.next().value; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.getBufferMetadata()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected abstract readData<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected visitNullType(type: Null, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<any>(type, length, this.readNullBitmap(type, nullCount), new Uint8Array(0), 0, nullCount);\n    }\n    protected visitFlatType<T extends FlatType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<T>(type, length, this.readNullBitmap(type, nullCount), this.readData(type), 0, nullCount);\n    }\n    protected visitBoolType(type: Bool, { length, nullCount }: FieldMetadata = this.getFieldMetadata(), data?: Uint8Array) {\n        return new BoolData(type, length, this.readNullBitmap(type, nullCount), data || this.readData(type), 0, nullCount);\n    }\n    protected visitFlatList<T extends FlatListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type), 0, nullCount);\n    }\n    protected visitListType<T extends ListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new ListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitFixedSizeListType<T extends FixedSizeList>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new SingleNestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitNestedType<T extends NestedType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new NestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visitFields(type.children), 0, nullCount);\n    }\n    protected visitUnionType(type: DenseUnion | SparseUnion, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return type.mode === UnionMode.Sparse ?\n            new SparseUnionData(type as SparseUnion, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount) :\n            new DenseUnionData(type as DenseUnion, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/vector.ts","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// fb/Message.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike, DataType, Dictionary, Int } from '../type';\n\nexport class DictionaryView<T extends DataType> implements View<T> {\n    public indicies: Vector<Int>;\n    public dictionary: Vector<T>;\n    constructor(dictionary: Vector<T>, indicies: Vector<Int>) {\n        this.indicies = indicies;\n        this.dictionary = dictionary;\n    }\n    public clone(data: Data<Dictionary<T>>): this {\n        return new DictionaryView(data.dictionary, this.indicies.clone(data.indicies)) as this;\n    }\n    public isValid(index: number): boolean {\n        return this.indicies.isValid(index);\n    }\n    public get(index: number): T['TValue'] {\n        return this.dictionary.get(this.indicies.get(index));\n    }\n    public set(index: number, value: T['TValue']): void {\n        this.dictionary.set(this.indicies.get(index), value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const values = this.dictionary, indicies = this.indicies;\n        for (let index = -1, n = indicies.length; ++index < n;) {\n            yield values.get(indicies.get(index));\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/dictionary.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector, createVector } from '../vector';\nimport { TextEncoder, TextDecoder } from 'text-encoding-utf-8';\nimport { List, Binary, Utf8, FixedSizeList, FlatListType } from '../type';\nimport { ListType, DataType, IterableArrayLike } from '../type';\n\nexport const encodeUtf8 = ((encoder) =>\n    encoder.encode.bind(encoder) as (input?: string) => Uint8Array\n)(new TextEncoder('utf-8'));\n\nexport const decodeUtf8 = ((decoder) =>\n    decoder.decode.bind(decoder) as (input?: ArrayBufferLike | ArrayBufferView) => string\n)(new TextDecoder('utf-8'));\n\nexport abstract class ListViewBase<T extends (ListType | FlatListType | FixedSizeList)> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    public valueOffsets?: Int32Array;\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public get(index: number): T['TValue'] {\n        return this.getList(this.values, index, this.valueOffsets);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setList(this.values, index, value, this.valueOffsets);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getList, length = this.length;\n        const values = this.values, valueOffsets = this.valueOffsets;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, valueOffsets);\n        }\n    }\n    protected abstract getList(values: T['TArray'], index: number, valueOffsets?: Int32Array): T['TValue'];\n    protected abstract setList(values: T['TArray'], index: number, value: T['TValue'], valueOffsets?: Int32Array): void;\n}\n\nexport abstract class VariableListViewBase<T extends (ListType | FlatListType)> extends ListViewBase<T> {\n    constructor(data: Data<T>) {\n        super(data);\n        this.length = data.length;\n        this.valueOffsets = data.valueOffsets;\n    }\n}\n\nexport class ListView<T extends DataType> extends VariableListViewBase<List<T>> {\n    constructor(data: Data<List<T>>) {\n        super(data);\n        this.values = createVector(data.values);\n    }\n    protected getList(values: Vector<T>, index: number, valueOffsets: Int32Array) {\n        return values.slice(valueOffsets[index], valueOffsets[index + 1]) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>, valueOffsets: Int32Array): void {\n        let idx = -1;\n        let offset = valueOffsets[index];\n        let end = Math.min(value.length, valueOffsets[index + 1] - offset);\n        while (offset < end) {\n            values.set(offset++, value.get(++idx));\n        }\n    }\n}\n\nexport class FixedSizeListView<T extends DataType> extends ListViewBase<FixedSizeList<T>> {\n    public size: number;\n    constructor(data: Data<FixedSizeList<T>>) {\n        super(data);\n        this.size = data.type.listSize;\n        this.values = createVector(data.values);\n    }\n    protected getList(values: Vector<T>, index: number) {\n        const size = this.size;\n        return values.slice(index *= size, index + size) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>): void {\n        let size = this.size;\n        for (let idx = -1, offset = index * size; ++idx < size;) {\n            values.set(offset + idx, value.get(++idx));\n        }\n    }\n}\n\nexport class BinaryView extends VariableListViewBase<Binary> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return values.subarray(valueOffsets[index], valueOffsets[index + 1]);\n    }\n    protected setList(values: Uint8Array, index: number, value: Uint8Array, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(value.subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\nexport class Utf8View extends VariableListViewBase<Utf8> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return decodeUtf8(values.subarray(valueOffsets[index], valueOffsets[index + 1]));\n    }\n    protected setList(values: Uint8Array, index: number, value: string, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(encodeUtf8(value).subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/list.ts","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexports.TextEncoder = TextEncoder;\nexports.TextDecoder = TextDecoder;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/text-encoding-utf-8/lib/encoding.lib.js\n// module id = 16\n// module chunks = 0","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike } from '../type';\nimport { DataType, NestedType, DenseUnion, SparseUnion, Struct, Map_ } from '../type';\n\nexport abstract class NestedView<T extends NestedType> implements View<T> {\n    public length: number;\n    public numChildren: number;\n    public childData: Data<any>[];\n    protected _children: Vector<any>[];\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        this.length = data.length;\n        this.childData = data.childData;\n        this.numChildren = data.childData.length;\n        this._children = children || new Array(this.numChildren);\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, this._children) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public toJSON(): any { return this.toArray(); }\n    public toString() {\n        return [...this].map((x) => stringify(x)).join(', ');\n    }\n    public get(index: number): T['TValue'] {\n        return this.getNested(this, index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setNested(this, index, value);\n    }\n    protected abstract getNested(self: NestedView<T>, index: number): T['TValue'];\n    protected abstract setNested(self: NestedView<T>, index: number, value: T['TValue']): void;\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren\n            ? null\n            : (this._children[index] as Vector<R>) ||\n              (this._children[index] = Vector.create<R>(this.childData[index]));\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getNested;\n        const length = this.length;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index);\n        }\n    }\n}\n\nexport class UnionView<T extends (DenseUnion | SparseUnion) = SparseUnion> extends NestedView<T> {\n    // @ts-ignore\n    public typeIds: Int8Array;\n    // @ts-ignore\n    public valueOffsets?: Int32Array;\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        super(data, children);\n        this.length = data.length;\n        this.typeIds = data.typeIds;\n    }\n    protected getNested(self: UnionView<T>, index: number): T['TValue'] {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n    }\n    protected setNested(self: UnionView<T>, index: number, value: T['TValue']): void {\n        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets);\n    }\n    protected getChildValue(self: NestedView<T>, index: number, typeIds: Int8Array, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.get(index) : null;\n    }\n    protected setChildValue(self: NestedView<T>, index: number, value: T['TValue'], typeIds: Int8Array, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.set(index, value) : null;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const length = this.length;\n        const get = this.getChildValue;\n        const { typeIds, valueOffsets } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index, typeIds, valueOffsets);\n        }\n    }\n}\n\nexport class DenseUnionView extends UnionView<DenseUnion> {\n    public valueOffsets: Int32Array;\n    constructor(data: Data<DenseUnion>, children?: Vector<any>[]) {\n        super(data, children);\n        this.valueOffsets = data.valueOffsets;\n    }\n    protected getNested(self: DenseUnionView, index: number): any | null {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n    }\n    protected getChildValue(self: NestedView<DenseUnion>, index: number, typeIds: Int8Array, valueOffsets: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.get(valueOffsets[index]) : null;\n    }\n    protected setChildValue(self: NestedView<DenseUnion>, index: number, value: any, typeIds: Int8Array, valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.set(valueOffsets[index], value) : null;\n    }\n}\n\nexport class StructView extends NestedView<Struct> {\n    protected getNested(self: StructView, index: number) {\n        return new RowView(self as any, self._children, index);\n    }\n    protected setNested(self: StructView, index: number, value: any): void {\n        let idx = -1, len = self.numChildren, child: Vector | null;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value[idx]);\n                }\n            }\n        } else {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value.get(idx));\n                }\n            }\n        }\n    }\n}\n\nexport class MapView extends NestedView<Map_> {\n    public typeIds: { [k: string]: number };\n    constructor(data: Data<Map_>, children?: Vector<any>[]) {\n        super(data, children);\n        this.typeIds = data.type.children.reduce((xs, x, i) =>\n            (xs[x.name] = i) && xs || xs, Object.create(null));\n    }\n    protected getNested(self: MapView, index: number) {\n        return new MapRowView(self as any, self._children, index);\n    }\n    protected setNested(self: MapView, index: number, value: { [k: string]: any }): void {\n        let typeIds = self.typeIds as any, child: Vector | null;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value[key]);\n                }\n            }\n        } else {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value.get(key as any));\n                }\n            }\n        }\n    }\n}\n\nexport class RowView extends UnionView<SparseUnion> {\n    protected rowIndex: number;\n    constructor(data: Data<SparseUnion> & NestedView<any>, children?: Vector<any>[], rowIndex?: number) {\n        super(data, children);\n        this.rowIndex = rowIndex || 0;\n        this.length = data.numChildren;\n    }\n    public clone(data: Data<SparseUnion> & NestedView<any>): this {\n        return new (<any> this.constructor)(data, this._children, this.rowIndex) as this;\n    }\n    protected getChildValue(self: RowView, index: number, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: RowView, index: number, value: any, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\nexport class MapRowView extends RowView {\n    // @ts-ignore\n    public typeIds: any;\n    public toJSON() {\n        const get = this.getChildValue;\n        const result = {} as { [k: string]: any };\n        const typeIds = this.typeIds as { [k: string]: number };\n        for (const name in typeIds) {\n            result[name] = get(this, name, typeIds, null);\n        }\n        return result;\n    }\n    protected getChildValue(self: MapRowView, key: any, typeIds: any, _valueOffsets: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: MapRowView, key: any, value: any, typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\nfunction stringify(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : Array.isArray(x) ? JSON.stringify(x) : ArrayBuffer.isView(x) ? `[${x}]` : `${x}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/nested.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst carryBit16 = 1 << 16;\n\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    high(): number { return this.buffer[1]; }\n    low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// util/int.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Vector, DictionaryVector } from './vector';\n\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    lteq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    gteq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n}\n\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n        this.vector = batch.getChildAt(this.colidx)!;\n        return this.vector.get.bind(this.vector);\n    }\n}\n\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(expr: Predicate): Predicate { return new And(this, expr); }\n    or(expr: Predicate): Predicate { return new Or(this, expr); }\n    ands(): Predicate[] { return [this]; }\n}\n\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\nexport abstract class CombinationPredicate extends Predicate {\n    constructor(public readonly left: Predicate, public readonly right: Predicate) {\n        super();\n    }\n}\n\nexport class And extends CombinationPredicate {\n    bind(batch: RecordBatch) {\n        const left = this.left.bind(batch);\n        const right = this.right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left(idx, batch) && right(idx, batch);\n    }\n    ands(): Predicate[] { return this.left.ands().concat(this.right.ands()); }\n}\n\nexport class Or extends CombinationPredicate {\n    bind(batch: RecordBatch) {\n        const left = this.left.bind(batch);\n        const right = this.right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left(idx, batch) || right(idx, batch);\n    }\n}\n\nexport class Equals extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            // Assume that there is only one key with the value `lit.v`\n            // TODO: add lazily-computed reverse dictionary lookups, associated\n            // with col.vector.data so that we only have to do this once per\n            // dictionary\n            let key = -1;\n            let dict = col.vector;\n            let data = dict.dictionary!;\n            for (let len = data.length; ++key < len;) {\n                if (data.get(key) === lit.v) {\n                    break;\n                }\n            }\n\n            if (key == data.length) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return dict.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\n\n\n\n// WEBPACK FOOTER //\n// predicate.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { readJSON } from './json';\nimport { RecordBatch } from '../../recordbatch';\nimport { readBuffers, readBuffersAsync } from './binary';\nimport { readRecordBatches, readRecordBatchesAsync, TypeDataLoader } from './vector';\nimport { Schema } from '../../type';\nimport { Message } from '../metadata';\n\nexport { readJSON, RecordBatch };\nexport { readBuffers, readBuffersAsync };\nexport { readRecordBatches, readRecordBatchesAsync };\n\nexport function* read(sources: Iterable<Uint8Array | Buffer | string> | object | string) {\n    let input: any = sources;\n    let messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>;\n    if (typeof input === 'string') {\n        try { input = JSON.parse(input); }\n        catch (e) { input = sources; }\n    }\n    if (!input || typeof input !== 'object') {\n        messages = (typeof input === 'string') ? readBuffers([input]) : [];\n    } else {\n        messages = (typeof input[Symbol.iterator] === 'function') ? readBuffers(input) : readJSON(input);\n    }\n    yield* readRecordBatches(messages);\n}\n\nexport async function* readAsync(sources: AsyncIterable<Uint8Array | Buffer | string>) {\n    for await (let recordBatch of readRecordBatchesAsync(readBuffersAsync(sources))) {\n        yield recordBatch;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/arrow.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type_ from './type';\nimport * as data_ from './data';\nimport * as vector_ from './vector';\nimport * as util_ from './util/int';\nimport * as visitor_ from './visitor';\nimport * as view_ from './vector/view';\nimport * as predicate_ from './predicate';\nimport { Vector } from './vector';\nimport { RecordBatch } from './recordbatch';\nimport { Schema, Field, Type } from './type';\nimport { Table, DataFrame, NextFunc, BindFunc, CountByResult } from './table';\nimport { read, readAsync } from './ipc/reader/arrow';\n\nexport import View = vector_.View;\nexport import VectorLike = vector_.VectorLike;\nexport import TypedArray = type_.TypedArray;\nexport import IntBitWidth = type_.IntBitWidth;\nexport import TimeBitWidth = type_.TimeBitWidth;\nexport import TypedArrayConstructor = type_.TypedArrayConstructor;\n\nexport { read, readAsync };\nexport { Table, DataFrame, NextFunc, BindFunc, CountByResult };\nexport { Field, Schema, RecordBatch, Vector, Type };\n\nexport namespace util {\n    export import Uint64 = util_.Uint64;\n    export import Int64 = util_.Int64;\n    export import Int128 = util_.Int128;\n}\n\nexport namespace data {\n    export import BaseData = data_.BaseData;\n    export import FlatData = data_.FlatData;\n    export import BoolData = data_.BoolData;\n    export import FlatListData = data_.FlatListData;\n    export import DictionaryData = data_.DictionaryData;\n    export import NestedData = data_.NestedData;\n    export import ListData = data_.ListData;\n    export import UnionData = data_.UnionData;\n    export import SparseUnionData = data_.SparseUnionData;\n    export import DenseUnionData = data_.DenseUnionData;\n    export import ChunkedData = data_.ChunkedData;\n}\n\nexport namespace enum_ {\n    export import Type = type_.ArrowType;\n    export import DateUnit = type_.DateUnit;\n    export import TimeUnit = type_.TimeUnit;\n    export import Precision = type_.Precision;\n    export import UnionMode = type_.UnionMode;\n    export import VectorType = type_.VectorType;\n    export import IntervalUnit = type_.IntervalUnit;\n    export import MessageHeader = type_.MessageHeader;\n    export import MetadataVersion = type_.MetadataVersion;\n}\n\nexport namespace type {\n    export import Schema = type_.Schema;\n    export import Field = type_.Field;\n    export import Null = type_.Null;\n    export import Int = type_.Int;\n    export import Int8 = type_.Int8;\n    export import Int16 = type_.Int16;\n    export import Int32 = type_.Int32;\n    export import Int64 = type_.Int64;\n    export import Uint8 = type_.Uint8;\n    export import Uint16 = type_.Uint16;\n    export import Uint32 = type_.Uint32;\n    export import Uint64 = type_.Uint64;\n    export import Float = type_.Float;\n    export import Float16 = type_.Float16;\n    export import Float32 = type_.Float32;\n    export import Float64 = type_.Float64;\n    export import Binary = type_.Binary;\n    export import Utf8 = type_.Utf8;\n    export import Bool = type_.Bool;\n    export import Decimal = type_.Decimal;\n    export import Date_ = type_.Date_;\n    export import Time = type_.Time;\n    export import Timestamp = type_.Timestamp;\n    export import Interval = type_.Interval;\n    export import List = type_.List;\n    export import Struct = type_.Struct;\n    export import Union = type_.Union;\n    export import DenseUnion = type_.DenseUnion;\n    export import SparseUnion = type_.SparseUnion;\n    export import FixedSizeBinary = type_.FixedSizeBinary;\n    export import FixedSizeList = type_.FixedSizeList;\n    export import Map_ = type_.Map_;\n    export import Dictionary = type_.Dictionary;\n}\n\nexport namespace vector {\n    export import Vector = vector_.Vector;\n    export import NullVector = vector_.NullVector;\n    export import BoolVector = vector_.BoolVector;\n    export import IntVector = vector_.IntVector;\n    export import FloatVector = vector_.FloatVector;\n    export import DateVector = vector_.DateVector;\n    export import DecimalVector = vector_.DecimalVector;\n    export import TimeVector = vector_.TimeVector;\n    export import TimestampVector = vector_.TimestampVector;\n    export import IntervalVector = vector_.IntervalVector;\n    export import BinaryVector = vector_.BinaryVector;\n    export import FixedSizeBinaryVector = vector_.FixedSizeBinaryVector;\n    export import Utf8Vector = vector_.Utf8Vector;\n    export import ListVector = vector_.ListVector;\n    export import FixedSizeListVector = vector_.FixedSizeListVector;\n    export import MapVector = vector_.MapVector;\n    export import StructVector = vector_.StructVector;\n    export import UnionVector = vector_.UnionVector;\n    export import DictionaryVector = vector_.DictionaryVector;\n}\n\nexport namespace visitor {\n    export import TypeVisitor = visitor_.TypeVisitor;\n    export import VectorVisitor = visitor_.VectorVisitor;\n}\n\nexport namespace view {\n    export import ChunkedView = view_.ChunkedView;\n    export import DictionaryView = view_.DictionaryView;\n    export import ListView = view_.ListView;\n    export import FixedSizeListView = view_.FixedSizeListView;\n    export import BinaryView = view_.BinaryView;\n    export import Utf8View = view_.Utf8View;\n    export import UnionView = view_.UnionView;\n    export import DenseUnionView = view_.DenseUnionView;\n    export import NestedView = view_.NestedView;\n    export import StructView = view_.StructView;\n    export import MapView = view_.MapView;\n    export import FlatView = view_.FlatView;\n    export import NullView = view_.NullView;\n    export import BoolView = view_.BoolView;\n    export import ValidityView = view_.ValidityView;\n    export import PrimitiveView = view_.PrimitiveView;\n    export import FixedSizeView = view_.FixedSizeView;\n    export import Float16View = view_.Float16View;\n    export import DateDayView = view_.DateDayView;\n    export import DateMillisecondView = view_.DateMillisecondView;\n    export import TimestampDayView = view_.TimestampDayView;\n    export import TimestampSecondView = view_.TimestampSecondView;\n    export import TimestampMillisecondView = view_.TimestampMillisecondView;\n    export import TimestampMicrosecondView = view_.TimestampMicrosecondView;\n    export import TimestampNanosecondView = view_.TimestampNanosecondView;\n    export import IntervalYearMonthView = view_.IntervalYearMonthView;\n    export import IntervalYearView = view_.IntervalYearView;\n    export import IntervalMonthView = view_.IntervalMonthView;\n}\n\nexport namespace predicate {\n    export import col = predicate_.col;\n    export import lit = predicate_.lit;\n\n    export import Or = predicate_.Or;\n    export import Col = predicate_.Col;\n    export import And = predicate_.And;\n    export import GTeq = predicate_.GTeq;\n    export import LTeq = predicate_.LTeq;\n    export import Value = predicate_.Value;\n    export import Equals = predicate_.Equals;\n    export import Literal = predicate_.Literal;\n    export import Predicate = predicate_.Predicate;\n\n    export import PredicateFunc = predicate_.PredicateFunc;\n}\n\n/* These exports are needed for the closure and uglify umd targets */\ntry {\n    let Arrow: any = eval('exports');\n    if (Arrow && typeof Arrow === 'object') {\n        // string indexers tell closure and uglify not to rename these properties\n        Arrow['data'] = data;\n        Arrow['type'] = type;\n        Arrow['util'] = util;\n        Arrow['view'] = view;\n        Arrow['enum_'] = enum_;\n        Arrow['vector'] = vector;\n        Arrow['visitor'] = visitor;\n        Arrow['predicate'] = predicate;\n\n        Arrow['read'] = read;\n        Arrow['readAsync'] = readAsync;\n\n        Arrow['Type'] = Type;\n        Arrow['Field'] = Field;\n        Arrow['Schema'] = Schema;\n        Arrow['Vector'] = Vector;\n        Arrow['RecordBatch'] = RecordBatch;\n\n        Arrow['Table'] = Table;\n        Arrow['CountByResult'] = CountByResult;\n    }\n} catch (e) { /* not the UMD bundle */ }\n/* end umd exports */\n\n// closure compiler erases static properties/methods:\n// https://github.com/google/closure-compiler/issues/1776\n// set them via string indexers to save them from the mangler\nSchema['from'] = Schema.from;\nTable['from'] = Table.from;\nTable['fromAsync'] = Table.fromAsync;\nTable['empty'] = Table.empty;\nVector['create'] = Vector.create;\nRecordBatch['from'] = RecordBatch.from;\n\nutil_.Uint64['add'] = util_.Uint64.add;\nutil_.Uint64['multiply'] = util_.Uint64.multiply;\n\nutil_.Int64['add'] = util_.Int64.add;\nutil_.Int64['multiply'] = util_.Int64.multiply;\nutil_.Int64['fromString'] = util_.Int64.fromString;\n\nutil_.Int128['add'] = util_.Int128.add;\nutil_.Int128['multiply'] = util_.Int128.multiply;\nutil_.Int128['fromString'] = util_.Int128.fromString;\n\ndata_.ChunkedData['computeOffsets'] = data_.ChunkedData.computeOffsets;\n\n(type_.Type as any)['NONE'] = type_.Type.NONE;\n(type_.Type as any)['Null'] = type_.Type.Null;\n(type_.Type as any)['Int'] = type_.Type.Int;\n(type_.Type as any)['Float'] = type_.Type.Float;\n(type_.Type as any)['Binary'] = type_.Type.Binary;\n(type_.Type as any)['Utf8'] = type_.Type.Utf8;\n(type_.Type as any)['Bool'] = type_.Type.Bool;\n(type_.Type as any)['Decimal'] = type_.Type.Decimal;\n(type_.Type as any)['Date'] = type_.Type.Date;\n(type_.Type as any)['Time'] = type_.Type.Time;\n(type_.Type as any)['Timestamp'] = type_.Type.Timestamp;\n(type_.Type as any)['Interval'] = type_.Type.Interval;\n(type_.Type as any)['List'] = type_.Type.List;\n(type_.Type as any)['Struct'] = type_.Type.Struct;\n(type_.Type as any)['Union'] = type_.Type.Union;\n(type_.Type as any)['FixedSizeBinary'] = type_.Type.FixedSizeBinary;\n(type_.Type as any)['FixedSizeList'] = type_.Type.FixedSizeList;\n(type_.Type as any)['Map'] = type_.Type.Map;\n(type_.Type as any)['Dictionary'] = type_.Type.Dictionary;\n(type_.Type as any)['DenseUnion'] = type_.Type.DenseUnion;\n(type_.Type as any)['SparseUnion'] = type_.Type.SparseUnion;\n\ntype_.DataType['isNull'] = type_.DataType.isNull;\ntype_.DataType['isInt'] = type_.DataType.isInt;\ntype_.DataType['isFloat'] = type_.DataType.isFloat;\ntype_.DataType['isBinary'] = type_.DataType.isBinary;\ntype_.DataType['isUtf8'] = type_.DataType.isUtf8;\ntype_.DataType['isBool'] = type_.DataType.isBool;\ntype_.DataType['isDecimal'] = type_.DataType.isDecimal;\ntype_.DataType['isDate'] = type_.DataType.isDate;\ntype_.DataType['isTime'] = type_.DataType.isTime;\ntype_.DataType['isTimestamp'] = type_.DataType.isTimestamp;\ntype_.DataType['isInterval'] = type_.DataType.isInterval;\ntype_.DataType['isList'] = type_.DataType.isList;\ntype_.DataType['isStruct'] = type_.DataType.isStruct;\ntype_.DataType['isUnion'] = type_.DataType.isUnion;\ntype_.DataType['isDenseUnion'] = type_.DataType.isDenseUnion;\ntype_.DataType['isSparseUnion'] = type_.DataType.isSparseUnion;\ntype_.DataType['isFixedSizeBinary'] = type_.DataType.isFixedSizeBinary;\ntype_.DataType['isFixedSizeList'] = type_.DataType.isFixedSizeList;\ntype_.DataType['isMap'] = type_.DataType.isMap;\ntype_.DataType['isDictionary'] = type_.DataType.isDictionary;\n\nvector_.BoolVector['from'] = vector_.BoolVector.from;\nvector_.IntVector['from'] = vector_.IntVector.from;\nvector_.FloatVector['from'] = vector_.FloatVector.from;\n\nvisitor_.TypeVisitor['visitTypeInline'] = visitor_.TypeVisitor.visitTypeInline;\nvisitor_.VectorVisitor['visitTypeInline'] = visitor_.VectorVisitor.visitTypeInline;\n\n\n// WEBPACK FOOTER //\n// Arrow.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Col, Predicate } from './predicate';\nimport { Schema, Field, Struct } from './type';\nimport { read, readAsync } from './ipc/reader/arrow';\nimport { isPromise, isAsyncIterable } from './util/compat';\nimport { Vector, DictionaryVector, IntVector, StructVector } from './vector';\nimport { ChunkedView } from './vector/chunked';\n\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\nexport type BindFunc = (batch: RecordBatch) => void;\n\nexport interface DataFrame {\n    filter(predicate: Predicate): DataFrame;\n    scan(next: NextFunc, bind?: BindFunc): void;\n    count(): number;\n    countBy(col: (Col|string)): CountByResult;\n}\n\nexport class Table implements DataFrame {\n    static empty() { return new Table(new Schema([]), []); }\n    static from(sources?: Iterable<Uint8Array | Buffer | string> | object | string) {\n        if (sources) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for (let recordBatch of read(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        }\n        return Table.empty();\n    }\n    static async fromAsync(sources?: AsyncIterable<Uint8Array | Buffer | string>) {\n        if (isAsyncIterable(sources)) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for await (let recordBatch of readAsync(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        } else if (isPromise(sources)) {\n            return Table.from(await sources);\n        } else if (sources) {\n            return Table.from(sources);\n        }\n        return Table.empty();\n    }\n    static fromStruct(struct: StructVector) {\n        const schema = new Schema(struct.type.children);\n        const chunks = struct.view instanceof ChunkedView ?\n                            (struct.view.chunkVectors as StructVector[]) :\n                            [struct];\n        return new Table(chunks.map((chunk) => new RecordBatch(schema, chunk.length, chunk.view.childData)));\n    }\n\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    // List of inner RecordBatches\n    public readonly batches: RecordBatch[];\n    // List of inner Vectors, possibly spanning batches\n    protected readonly _columns: Vector<any>[] = [];\n    // Union of all inner RecordBatches into one RecordBatch, possibly chunked.\n    // If the Table has just one inner RecordBatch, this points to that.\n    // If the Table has multiple inner RecordBatches, then this is a Chunked view\n    // over the list of RecordBatches. This allows us to delegate the responsibility\n    // of indexing, iterating, slicing, and visiting to the Nested/Chunked Data/Views.\n    public readonly batchesUnion: RecordBatch;\n\n    constructor(batches: RecordBatch[]);\n    constructor(...batches: RecordBatch[]);\n    constructor(schema: Schema, batches: RecordBatch[]);\n    constructor(schema: Schema, ...batches: RecordBatch[]);\n    constructor(...args: any[]) {\n        let schema: Schema;\n        let batches: RecordBatch[];\n        if (args[0] instanceof Schema) {\n            schema = args[0];\n            batches = Array.isArray(args[1][0]) ? args[1][0] : args[1];\n        } else if (args[0] instanceof RecordBatch) {\n            schema = (batches = args)[0].schema;\n        } else {\n            schema = (batches = args[0])[0].schema;\n        }\n        this.schema = schema;\n        this.batches = batches;\n        this.batchesUnion = batches.length == 0 ?\n            new RecordBatch(schema, 0, []) :\n            batches.reduce((union, batch) => union.concat(batch));\n        this.length = this.batchesUnion.length;\n        this.numCols = this.batchesUnion.numCols;\n    }\n    public get(index: number): Struct['TValue'] {\n        return this.batchesUnion.get(index)!;\n    }\n    public getColumn(name: string) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    public getColumnAt(index: number) {\n        return index < 0 || index >= this.numCols\n            ? null\n            : this._columns[index] || (\n              this._columns[index] = this.batchesUnion.getChildAt(index)!);\n    }\n    public getColumnIndex(name: string) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    public [Symbol.iterator](): IterableIterator<Struct['TValue']> {\n        return this.batchesUnion[Symbol.iterator]() as any;\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(this.batches, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public count(): number { return this.length; }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indicies;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n    public select(...columnNames: string[]) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n    public toString(separator?: string) {\n        let str = '';\n        for (const row of this.rowsToString(separator)) {\n            str += row + '\\n';\n        }\n        return str;\n    }\n    public rowsToString(separator = ' | '): TableToStringIterator {\n        return new TableToStringIterator(tableRowsToString(this, separator));\n    }\n}\n\nclass FilteredDataFrame implements DataFrame {\n    private predicate: Predicate;\n    private batches: RecordBatch[];\n    constructor (batches: RecordBatch[], predicate: Predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(\n            this.batches,\n            this.predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indicies;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult extends Table implements DataFrame {\n    constructor(values: Vector, counts: IntVector<any>) {\n        super(\n            new RecordBatch(new Schema([\n                new Field('values', values.type),\n                new Field('counts', counts.type)\n            ]),\n            counts.length, [values, counts]\n        ));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nexport class TableToStringIterator implements IterableIterator<string> {\n    constructor(private iterator: IterableIterator<string>) {}\n    [Symbol.iterator]() { return this.iterator; }\n    next(value?: any) { return this.iterator.next(value); }\n    throw(error?: any) { return this.iterator.throw && this.iterator.throw(error) || { done: true, value: '' }; }\n    return(value?: any) { return this.iterator.return && this.iterator.return(value) || { done: true, value: '' }; }\n    pipe(stream: NodeJS.WritableStream) {\n        let res: IteratorResult<string>;\n        let write = () => {\n            if (stream['writable']) {\n                do {\n                    if ((res = this.next()).done) { break; }\n                } while (stream['write'](res.value + '\\n', 'utf8'));\n            }\n            if (!res || !res.done) {\n                stream['once']('drain', write);\n            } else if (!(stream as any)['isTTY']) {\n                stream['end']('\\n');\n            }\n        };\n        write();\n    }\n}\n\nfunction* tableRowsToString(table: Table, separator = ' | ') {\n    const fields = table.schema.fields;\n    const header = ['row_id', ...fields.map((f) => `${f}`)].map(stringify);\n    const maxColumnWidths = header.map(x => x.length);\n    // Pass one to convert to strings and count max column widths\n    for (let i = -1, n = table.length - 1; ++i < n;) {\n        let val, row = [i, ...table.get(i)];\n        for (let j = -1, k = row.length; ++j < k; ) {\n            val = stringify(row[j]);\n            maxColumnWidths[j] = Math.max(maxColumnWidths[j], val.length);\n        }\n    }\n    yield header.map((x, j) => leftPad(x, ' ', maxColumnWidths[j])).join(separator);\n    for (let i = -1; ++i < table.length;) {\n        yield [i, ...table.get(i)]\n            .map((x) => stringify(x))\n            .map((x, j) => leftPad(x, ' ', maxColumnWidths[j]))\n            .join(separator);\n    }\n}\n\nfunction leftPad(str: string, fill: string, n: number) {\n    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n}\n\nfunction stringify(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n\n\n\n// WEBPACK FOOTER //\n// table.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { packBools } from '../../util/bit';\nimport * as IntUtil from '../../util/int';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport Long = flatbuffers.Long;\n\nexport function* readJSON(json: any) {\n    const schema = schemaFromJSON(json['schema']);\n    const dictionaries = new Map<number, Vector>();\n    for (const batch of (json['dictionaries'] || [])) {\n        const message = dictionaryBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['data']['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n    for (const batch of (json['batches'] || [])) {\n        const message = recordBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\nfunction flattenDataSources(xs: any[]): any[][] {\n    return (xs || []).reduce<any[][]>((buffers, column: any) => [\n        ...buffers,\n        ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n        ...(column['OFFSET'] && [column['OFFSET']] || []),\n        ...(column['DATA'] && [column['DATA']] || []),\n        ...flattenDataSources(column['children'])\n    ], [] as any[][]);\n}\n\nconst utf8Encoder = new TextEncoder('utf-8');\n\nexport class JSONDataLoader extends TypeDataLoader {\n    constructor(private sources: any[][], nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.getBufferMetadata()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int32Array(this.sources[offset]);\n    }\n    protected readTypeIds<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int8Array(this.sources[offset]);\n    }\n    protected readData<T extends DataType>(type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type) === true) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type) === true) {\n            return new Uint8Array(decimalDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) === true) {\n            return new Uint8Array(binaryDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBool(type) === true) {\n            return new Uint8Array(packBools(sources[offset] as number[]).buffer);\n        } else if (DataType.isUtf8(type) === true) {\n            return utf8Encoder.encode((sources[offset] as string[]).join(''));\n        } else {\n            return toTypedArray(type.ArrayType, sources[offset].map((x) => +x)) as any;\n        }\n    }\n}\n\nfunction int64DataFromJSON(values: string[]) {\n    const data = new Uint32Array(values.length * 2);\n    for (let i = -1, n = values.length; ++i < n;) {\n        // Force all values (even numbers) to be parsed as strings since\n        // pulling out high and low bits seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        IntUtil.Int64.fromString(values[i].toString(), new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n    return data.buffer;\n}\n\nfunction decimalDataFromJSON(values: string[]) {\n    const data = new Uint32Array(values.length * 4);\n    for (let i = -1, n = values.length; ++i < n;) {\n        IntUtil.Int128.fromString(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n    }\n    return data.buffer;\n}\n\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data.buffer;\n}\n\nimport * as Schema_ from '../../fb/Schema';\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nimport TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport { toTypedArray } from '../../data';\n\nfunction schemaFromJSON(s: any): Schema {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    return new Schema(\n        fieldsFromJSON(s['fields'], dictionaryFields),\n        customMetadata(s['customMetadata']),\n        MetadataVersion.V4, dictionaryFields\n    );\n}\n\nfunction recordBatchFromJSON(b: any): RecordBatchMetadata {\n    return new RecordBatchMetadata(\n        MetadataVersion.V4,\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\nfunction dictionaryBatchFromJSON(b: any): DictionaryBatch {\n    return new DictionaryBatch(\n        MetadataVersion.V4,\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\nfunction fieldsFromJSON(fs: any[], dictionaryFields: Map<number, Field<Dictionary>> | null): Field[] {\n    return (fs || [])\n        .map((f) => fieldFromJSON(f, dictionaryFields))\n        .filter((f) => f != null) as Field[];\n}\n\nfunction fieldNodesFromJSON(xs: any[]): FieldMetadata[] {\n    return (xs || []).reduce<FieldMetadata[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldMetadata(\n            new Long(column['count'], 0),\n            new Long(nullCountFromJSON(column['VALIDITY']), 0)\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldMetadata[]);\n}\n\nfunction buffersFromJSON(xs: any[], buffers: BufferMetadata[] = []): BufferMetadata[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));\n        column['OFFSET'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));\n        column['DATA'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\nfunction fieldFromJSON(f: any, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f['name'];\n    let field: Field | void;\n    let nullable = f['nullable'];\n    let dataType: DataType<any> | null;\n    let id: number, keysMeta: any, dictMeta: any;\n    let metadata = customMetadata(f['customMetadata']);\n    if (!dictionaryFields || !(dictMeta = f['dictionary'])) {\n        if (dataType = typeFromJSON(f['type'], fieldsFromJSON(f['children'], dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta['id'])\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromJSON(f['type'], fieldsFromJSON(f['children'], null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta['indexType']) ? intFromJSON(keysMeta)! : new Int32(),\n            id, dictMeta['isOrdered']\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(metadata?: any) {\n    return new Map<string, string>(Object.entries(metadata || {}));\n}\n\nconst namesToTypeMap: { [n: string]: Type }  = {\n    'NONE': Type.NONE,\n    'null': Type.Null,\n    'int': Type.Int,\n    'floatingpoint': Type.FloatingPoint,\n    'binary': Type.Binary,\n    'bool': Type.Bool,\n    'utf8': Type.Utf8,\n    'decimal': Type.Decimal,\n    'date': Type.Date,\n    'time': Type.Time,\n    'timestamp': Type.Timestamp,\n    'interval': Type.Interval,\n    'list': Type.List,\n    'struct': Type.Struct_,\n    'union': Type.Union,\n    'fixedsizebinary': Type.FixedSizeBinary,\n    'fixedsizelist': Type.FixedSizeList,\n    'map': Type.Map,\n};\n\nfunction typeFromJSON(t: any, children?: Field[]) {\n    switch (namesToTypeMap[t['name']]) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromJSON(t);\n        case Type.Int: return intFromJSON(t);\n        case Type.FloatingPoint: return floatingPointFromJSON(t);\n        case Type.Binary: return binaryFromJSON(t);\n        case Type.Utf8: return utf8FromJSON(t);\n        case Type.Bool: return boolFromJSON(t);\n        case Type.Decimal: return decimalFromJSON(t);\n        case Type.Date: return dateFromJSON(t);\n        case Type.Time: return timeFromJSON(t);\n        case Type.Timestamp: return timestampFromJSON(t);\n        case Type.Interval: return intervalFromJSON(t);\n        case Type.List: return listFromJSON(t, children || []);\n        case Type.Struct_: return structFromJSON(t, children || []);\n        case Type.Union: return unionFromJSON(t, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromJSON(t);\n        case Type.FixedSizeList: return fixedSizeListFromJSON(t, children || []);\n        case Type.Map: return mapFromJSON(t, children || []);\n    }\n    throw new Error(`Unrecognized type ${t['name']}`);\n}\n\nfunction nullFromJSON           (_type: any)                    { return new Null();                                                                  }\nfunction intFromJSON            (_type: any)                    { switch (_type['bitWidth']) {\n                                                                      case  8: return _type['isSigned'] ? new  Int8() : new  Uint8();\n                                                                      case 16: return _type['isSigned'] ? new Int16() : new Uint16();\n                                                                      case 32: return _type['isSigned'] ? new Int32() : new Uint32();\n                                                                      case 64: return _type['isSigned'] ? new Int64() : new Uint64();\n                                                                  }\n                                                                  return null;                                                                        }\nfunction floatingPointFromJSON  (_type: any)                    { switch (Precision[_type['precision']] as any) {\n                                                                      case Precision.HALF: return new Float16();\n                                                                      case Precision.SINGLE: return new Float32();\n                                                                      case Precision.DOUBLE: return new Float64();\n                                                                  }\n                                                                  return null;                                                                        }\nfunction binaryFromJSON         (_type: any)                    { return new Binary();                                                                }\nfunction utf8FromJSON           (_type: any)                    { return new Utf8();                                                                  }\nfunction boolFromJSON           (_type: any)                    { return new Bool();                                                                  }\nfunction decimalFromJSON        (_type: any)                    { return new Decimal(_type['scale'], _type['precision']);                             }\nfunction dateFromJSON           (_type: any)                    { return new Date_(DateUnit[_type['unit']] as any);                                   }\nfunction timeFromJSON           (_type: any)                    { return new Time(TimeUnit[_type['unit']] as any, _type['bitWidth'] as TimeBitWidth); }\nfunction timestampFromJSON      (_type: any)                    { return new Timestamp(TimeUnit[_type['unit']] as any, _type['timezone']);            }\nfunction intervalFromJSON       (_type: any)                    { return new Interval(IntervalUnit[_type['unit']] as any);                            }\nfunction listFromJSON           (_type: any, children: Field[]) { return new List(children);                                                          }\nfunction structFromJSON         (_type: any, children: Field[]) { return new Struct(children);                                                        }\nfunction unionFromJSON          (_type: any, children: Field[]) { return new Union(_type['mode'], (_type['typeIdsArray'] || []) as Type[], children); }\nfunction fixedSizeBinaryFromJSON(_type: any)                    { return new FixedSizeBinary(_type['byteWidth']);                                     }\nfunction fixedSizeListFromJSON  (_type: any, children: Field[]) { return new FixedSizeList(_type['listSize'], children);                              }\nfunction mapFromJSON            (_type: any, children: Field[]) { return new Map_(_type['keysSorted'], children);                                     }\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/json.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { Message, Footer, FileBlock, RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata, } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\ntype MessageReader = (bb: ByteBuffer) => IterableIterator<RecordBatchMetadata | DictionaryBatch>;\n\nexport function* readBuffers<T extends Uint8Array | Buffer | string>(sources: Iterable<T> | Uint8Array | Buffer | string) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    if (ArrayBuffer.isView(sources) || typeof sources === 'string') {\n        sources = [sources as T];\n    }\n    for (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb))) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator(message.nodes),\n                        arrayIterator(message.buffers),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport async function* readBuffersAsync<T extends Uint8Array | Buffer | string>(sources: AsyncIterable<T>) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    for await (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb))) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator(message.nodes),\n                        arrayIterator(message.buffers),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport class BinaryDataLoader extends TypeDataLoader {\n    private bytes: Uint8Array;\n    private messageOffset: number;\n    constructor(bb: ByteBuffer, nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n        this.bytes = bb.bytes();\n        this.messageOffset = bb.position();\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Uint8Array(this.bytes.buffer, this.bytes.byteOffset + this.messageOffset + offset, length);\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\n\nfunction toByteBuffer(bytes?: Uint8Array | Buffer | string) {\n    let arr: Uint8Array = bytes as any || new Uint8Array(0);\n    if (typeof bytes === 'string') {\n        arr = new Uint8Array(bytes.length);\n        for (let i = -1, n = bytes.length; ++i < n;) {\n            arr[i] = bytes.charCodeAt(i);\n        }\n        return new ByteBuffer(arr);\n    }\n    return new ByteBuffer(arr);\n}\n\nfunction readSchema(bb: ByteBuffer) {\n    let schema: Schema, readMessages, footer: Footer | null;\n    if (footer = readFileSchema(bb)) {\n        schema = footer.schema;\n        readMessages = readFileMessages(footer);\n    } else if (schema = readStreamSchema(bb)!) {\n        readMessages = readStreamMessages;\n    } else {\n        throw new Error('Invalid Arrow buffer');\n    }\n    return { schema, readMessages };\n}\n\nconst PADDING = 4;\nconst MAGIC_STR = 'ARROW1';\nconst MAGIC = new Uint8Array(MAGIC_STR.length);\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\nfunction checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst magicLength = MAGIC.length;\nconst magicAndPadding = magicLength + PADDING;\nconst magicX2AndPadding = magicLength * 2 + PADDING;\n\nfunction readStreamSchema(bb: ByteBuffer) {\n    if (!checkForMagicArrowString(bb.bytes(), 0)) {\n        for (const message of readMessages(bb)) {\n            if (Message.isSchema(message)) {\n                return message as Schema;\n            }\n        }\n    }\n    return null;\n}\n\nfunction* readStreamMessages(bb: ByteBuffer) {\n    for (const message of readMessages(bb)) {\n        if (Message.isRecordBatch(message)) {\n            yield message;\n        } else if (Message.isDictionaryBatch(message)) {\n            yield message;\n        } else {\n            continue;\n        }\n        // position the buffer after the body to read the next message\n        bb.setPosition(bb.position() + message.bodyLength);\n    }\n}\n\nfunction readFileSchema(bb: ByteBuffer) {\n    let fileLength = bb.capacity(), footerLength: number, footerOffset: number;\n    if ((fileLength < magicX2AndPadding /*                     Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        (/*                                                    Invalid footer length  */\n        (footerLength = bb.readInt32(footerOffset = fileLength - magicAndPadding)) < 1 &&\n        (footerLength + magicX2AndPadding > fileLength))) {\n        return null;\n    }\n    bb.setPosition(footerOffset - footerLength);\n    return footerFromByteBuffer(bb);\n}\n\nfunction readFileMessages(footer: Footer) {\n    return function* (bb: ByteBuffer) {\n        for (let i = -1, batches = footer.dictionaryBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset.low);\n            yield readMessage(bb, bb.readInt32(bb.position())) as DictionaryBatch;\n        }\n        for (let i = -1, batches = footer.recordBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset.low);\n            yield readMessage(bb, bb.readInt32(bb.position())) as RecordBatchMetadata;\n        }\n    };\n}\n\nfunction* readMessages(bb: ByteBuffer) {\n    let length: number, message: Schema | RecordBatchMetadata | DictionaryBatch;\n    while (bb.position() < bb.capacity() &&\n          (length = bb.readInt32(bb.position())) > 0) {\n        if (message = readMessage(bb, length)!) {\n            yield message;\n        }\n    }\n}\n\nfunction readMessage(bb: ByteBuffer, length: number) {\n    bb.setPosition(bb.position() + PADDING);\n    const message = messageFromByteBuffer(bb);\n    bb.setPosition(bb.position() + length);\n    return message;\n}\n\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport _Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport _Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport _Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport _List = Schema_.org.apache.arrow.flatbuf.List;\nimport _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport _Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport _Map = Schema_.org.apache.arrow.flatbuf.Map;\n\nfunction footerFromByteBuffer(bb: ByteBuffer) {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    const f = _Footer.getRootAsFooter(bb), s = f.schema()!;\n    return new Footer(\n        dictionaryBatchesFromFooter(f), recordBatchesFromFooter(f),\n        new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), f.version(), dictionaryFields)\n    );\n}\n\nfunction messageFromByteBuffer(bb: ByteBuffer) {\n    const m = _Message.getRootAsMessage(bb)!, type = m.headerType(), version = m.version();\n    switch (type) {\n        case MessageHeader.Schema: return schemaFromMessage(version, m.header(new _Schema())!, new Map());\n        case MessageHeader.RecordBatch: return recordBatchFromMessage(version, m.header(new _RecordBatch())!);\n        case MessageHeader.DictionaryBatch: return dictionaryBatchFromMessage(version, m.header(new _DictionaryBatch())!);\n    }\n    return null;\n    // throw new Error(`Unrecognized Message type '${type}'`);\n}\n\nfunction schemaFromMessage(version: MetadataVersion, s: _Schema, dictionaryFields: Map<number, Field<Dictionary>>) {\n    return new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), version, dictionaryFields);\n}\n\nfunction recordBatchFromMessage(version: MetadataVersion, b: _RecordBatch) {\n    return new RecordBatchMetadata(version, b.length(), fieldNodesFromRecordBatch(b), buffersFromRecordBatch(b, version));\n}\n\nfunction dictionaryBatchFromMessage(version: MetadataVersion, d: _DictionaryBatch) {\n    return new DictionaryBatch(version, recordBatchFromMessage(version, d.data()!), d.id(), d.isDelta());\n}\n\nfunction dictionaryBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.dictionariesLength(); ++i < n;) {\n        if (b = f.dictionaries(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction recordBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.recordBatchesLength(); ++i < n;) {\n        if (b = f.recordBatches(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction fieldsFromSchema(s: _Schema, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = s && s.fieldsLength(); ++i < n;) {\n        if (c = field(s.fields(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldsFromField(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = f && f.childrenLength(); ++i < n;) {\n        if (c = field(f.children(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldNodesFromRecordBatch(b: _RecordBatch) {\n    const fieldNodes = [] as FieldMetadata[];\n    for (let i = -1, n = b.nodesLength(); ++i < n;) {\n        fieldNodes.push(fieldNodeFromRecordBatch(b.nodes(i)!));\n    }\n    return fieldNodes;\n}\n\nfunction buffersFromRecordBatch(b: _RecordBatch, version: MetadataVersion) {\n    const buffers = [] as BufferMetadata[];\n    for (let i = -1, n = b.buffersLength(); ++i < n;) {\n        let buffer = b.buffers(i)!;\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page id field.\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        buffers.push(bufferFromRecordBatch(buffer));\n    }\n    return buffers;\n}\n\nfunction field(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f.name()!;\n    let field: Field | void;\n    let nullable = f.nullable();\n    let metadata = customMetadata(f);\n    let dataType: DataType<any> | null;\n    let keysMeta: _Int | null, id: number;\n    let dictMeta: _DictionaryEncoding | null;\n    if (!dictionaryFields || !(dictMeta = f.dictionary())) {\n        if (dataType = typeFromField(f, fieldsFromField(f, dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta.id().low)\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromField(f, fieldsFromField(f, null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta.indexType()) ? intFromField(keysMeta)! : new Int32(),\n            id, dictMeta.isOrdered()\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\nfunction fieldNodeFromRecordBatch(f: _FieldNode) {\n    return new FieldMetadata(f.length(), f.nullCount());\n}\n\nfunction bufferFromRecordBatch(b: _Buffer) {\n    return new BufferMetadata(b.offset(), b.length());\n}\n\nfunction typeFromField(f: _Field, children?: Field[]): DataType<any> | null {\n    switch (f.typeType()) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromField(f.type(new _Null())!);\n        case Type.Int: return intFromField(f.type(new _Int())!);\n        case Type.FloatingPoint: return floatFromField(f.type(new _FloatingPoint())!);\n        case Type.Binary: return binaryFromField(f.type(new _Binary())!);\n        case Type.Utf8: return utf8FromField(f.type(new _Utf8())!);\n        case Type.Bool: return boolFromField(f.type(new _Bool())!);\n        case Type.Decimal: return decimalFromField(f.type(new _Decimal())!);\n        case Type.Date: return dateFromField(f.type(new _Date())!);\n        case Type.Time: return timeFromField(f.type(new _Time())!);\n        case Type.Timestamp: return timestampFromField(f.type(new _Timestamp())!);\n        case Type.Interval: return intervalFromField(f.type(new _Interval())!);\n        case Type.List: return listFromField(f.type(new _List())!, children || []);\n        case Type.Struct_: return structFromField(f.type(new _Struct())!, children || []);\n        case Type.Union: return unionFromField(f.type(new _Union())!, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromField(f.type(new _FixedSizeBinary())!);\n        case Type.FixedSizeList: return fixedSizeListFromField(f.type(new _FixedSizeList())!, children || []);\n        case Type.Map: return mapFromField(f.type(new _Map())!, children || []);\n    }\n    throw new Error(`Unrecognized type ${f.typeType()}`);\n}\n\nfunction nullFromField           (_type: _Null)                             { return new Null();                                                                }\nfunction intFromField            (_type: _Int)                              { switch (_type.bitWidth()) {\n                                                                                  case  8: return _type.isSigned() ? new  Int8() : new  Uint8();\n                                                                                  case 16: return _type.isSigned() ? new Int16() : new Uint16();\n                                                                                  case 32: return _type.isSigned() ? new Int32() : new Uint32();\n                                                                                  case 64: return _type.isSigned() ? new Int64() : new Uint64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction floatFromField          (_type: _FloatingPoint)                    { switch (_type.precision()) {\n                                                                                  case Precision.HALF: return new Float16();\n                                                                                  case Precision.SINGLE: return new Float32();\n                                                                                  case Precision.DOUBLE: return new Float64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction binaryFromField         (_type: _Binary)                           { return new Binary();                                                              }\nfunction utf8FromField           (_type: _Utf8)                             { return new Utf8();                                                                }\nfunction boolFromField           (_type: _Bool)                             { return new Bool();                                                                }\nfunction decimalFromField        (_type: _Decimal)                          { return new Decimal(_type.scale(), _type.precision());                             }\nfunction dateFromField           (_type: _Date)                             { return new Date_(_type.unit());                                                   }\nfunction timeFromField           (_type: _Time)                             { return new Time(_type.unit(), _type.bitWidth() as TimeBitWidth);                  }\nfunction timestampFromField      (_type: _Timestamp)                        { return new Timestamp(_type.unit(), _type.timezone());                             }\nfunction intervalFromField       (_type: _Interval)                         { return new Interval(_type.unit());                                                }\nfunction listFromField           (_type: _List, children: Field[])          { return new List(children);                                                        }\nfunction structFromField         (_type: _Struct, children: Field[])        { return new Struct(children);                                                      }\nfunction unionFromField          (_type: _Union, children: Field[])         { return new Union(_type.mode(), (_type.typeIdsArray() || []) as Type[], children); }\nfunction fixedSizeBinaryFromField(_type: _FixedSizeBinary)                  { return new FixedSizeBinary(_type.byteWidth());                                    }\nfunction fixedSizeListFromField  (_type: _FixedSizeList, children: Field[]) { return new FixedSizeList(_type.listSize(), children);                             }\nfunction mapFromField            (_type: _Map, children: Field[])           { return new Map_(_type.keysSorted(), children);                                    }\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/binary.ts","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// fb/File.ts","export interface Subscription {\n    unsubscribe: () => void;\n}\n\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/**\n * @ignore\n */\nexport function isPromise(x: any): x is PromiseLike<any> {\n    return x != null && Object(x) === x && typeof x['then'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isObservable(x: any): x is Observable<any> {\n    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isArrayLike(x: any): x is ArrayLike<any> {\n    return x != null && Object(x) === x && typeof x['length'] === 'number';\n}\n\n/**\n * @ignore\n */\nexport function isIterable(x: any): x is Iterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.iterator] !== 'undefined';\n}\n\n/**\n * @ignore\n */\nexport function isAsyncIterable(x: any): x is AsyncIterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.asyncIterator] !== 'undefined';\n}\n\n\n\n// WEBPACK FOOTER //\n// util/compat.ts"],"sourceRoot":""}