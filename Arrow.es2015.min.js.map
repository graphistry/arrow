{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap_bc158b134421b50e488f","type.ts","vector.ts","vector/flat.ts","fb/Schema.ts","util/bit.ts","data.ts","ipc/metadata.ts","recordbatch.ts","tslib/tslib.es6.js","flatbuffers/js/flatbuffers.mjs","visitor.ts","vector/chunked.ts","ipc/reader/vector.ts","fb/Message.ts","vector/dictionary.ts","vector/list.ts","text-encoding-utf-8/lib/encoding.lib.js","vector/nested.ts","util/int.ts","predicate.ts","ipc/reader/arrow.ts","Arrow.ts","table.ts","ipc/reader/json.ts","ipc/reader/binary.ts","fb/File.ts","util/compat.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","S","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Type","__WEBPACK_IMPORTED_MODULE_3__ipc_metadata__","DateUnit","__WEBPACK_IMPORTED_MODULE_2_flatbuffers__","Long","__WEBPACK_IMPORTED_MODULE_0__fb_Schema__","apache","arrow","flatbuf","TimeUnit","Precision","UnionMode","VectorType","IntervalUnit","MessageHeader","__WEBPACK_IMPORTED_MODULE_1__fb_Message__","MetadataVersion","Schema","[object Object]","fields","metadata","version","V4","dictionaries","Map","vectors","map","v","Field","type","bodyLength","_bodyLength","headerType","_headerType","fieldNames","namesToKeep","reduce","xs","x","create","newDictFields","newFields","filter","f","forEach","dictId","set","Symbol","toStringTag","nullable","typeId","TType","Q","indicies","DataType","isDictionary","__webpack_exports__","children","Null","Int","Float","Binary","Utf8","Bool","Decimal","Date","Time","Timestamp","Interval","List","Struct","Union","DenseUnion","SparseUnion","FixedSizeBinary","FixedSizeList","Dictionary","visitor","isNull","visitNull","isInt","visitInt","isFloat","visitFloat","isBinary","visitBinary","isUtf8","visitUtf8","isBool","visitBool","isDecimal","visitDecimal","isDate","visitDate","isTime","visitTime","isTimestamp","visitTimestamp","isInterval","visitInterval","isList","visitList","isStruct","visitStruct","isUnion","visitUnion","isFixedSizeBinary","visitFixedSizeBinary","isFixedSizeList","visitFixedSizeList","isMap","visitMap","visitDictionary","proto","ArrayType","Array","super","isSigned","bitWidth","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","precision","HALF","SINGLE","Float32Array","DOUBLE","Float64Array","scale","Date_","unit","timezone","valueType","valueField","join","mode","typeIds","Sparse","Dense","byteWidth","listSize","Map_","keysSorted","dictionary","id","isOrdered","getId","low","__WEBPACK_IMPORTED_MODULE_8__util_bit__","Vector","data","view","nulls","length","__WEBPACK_IMPORTED_MODULE_0__data__","__WEBPACK_IMPORTED_MODULE_3__vector_chunked__","__WEBPACK_IMPORTED_MODULE_7__vector_flat__","nullBitmap","nullCount","createVector","sources","a","b","concat","toArray","clone","constructor","index","isValid","value","iterator","others","Boolean","vecs","chunkVectors","offsets","computeOffsets","chunksLength","chunkedData","begin","end","size","total","from","to","isFinite","slicedData","slice","Math","min","__WEBPACK_IMPORTED_MODULE_1__visitor__","visitTypeInline","FlatVector","values","asInt32","offset","stride","__WEBPACK_IMPORTED_MODULE_2__type__","int32s","IntVector","ListVectorBase","valueOffsets","NestedVector","getChildAt","childData","_childData","chunks","columns","chunk","_","cols","NullVector","BoolVector","defaultView","is64","TypeError","FloatVector","DateVector","DAY","MILLISECOND","DecimalVector","TimeVector","TimestampVector","SECOND","MICROSECOND","NANOSECOND","IntervalVector","YEAR_MONTH","BinaryVector","__WEBPACK_IMPORTED_MODULE_5__vector_list__","Utf8Vector","FixedSizeBinaryVector","ListVector","FixedSizeListVector","MapVector","__WEBPACK_IMPORTED_MODULE_6__vector_nested__","StructVector","UnionVector","DictionaryVector","__WEBPACK_IMPORTED_MODULE_4__vector_dictionary__","idxs","dict","key","VectorLoader","_type","__WEBPACK_IMPORTED_MODULE_0__util_bit__","FlatView","subarray","boolBitIndex","ValidityView","nullBitIndex","getNullable","byte","bit","PrimitiveView","getValue","setValue","FixedSizeView","epochMillisecondsToDate","epochDaysToMs","valueOf","epochMillisecondsLongToMs","epochMs","epochSecondsToMs","epochNanosecondsLongToMs","interval","org","Endianness","bb_pos","bb","obj","__init","readInt32","position","builder","startObject","endObject","Struct_","__offset","addFieldInt32","readInt8","addFieldInt8","readInt16","__vector","__vector_len","bytes","buffer","byteOffset","addFieldInt16","typeIdsOffset","addFieldOffset","startVector","addInt32","endVector","numElems","FloatingPoint","optionalEncoding","__string","timezoneOffset","VectorLayout","OFFSET","KeyValue","keyOffset","valueOffset","DictionaryEncoding","readInt64","createLong","__indirect","addFieldInt64","indexTypeOffset","readUint8","NONE","__union","nameOffset","typeType","typeOffset","dictionaryOffset","childrenOffset","addOffset","layoutOffset","customMetadataOffset","Buffer","prep","writeInt64","Little","endianness","fieldsOffset","finish","getBit","_data","_index","iterateBits","context","byteIndex","remaining","popcnt_uint32","uint32","alignment","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","arr","byteLength","cnt","pos","DataView","len","getUint32","getUint16","getUint8","popcnt_array","__WEBPACK_IMPORTED_MODULE_1__type__","toTypedArray","ArrayBuffer","isView","BYTES_PER_ELEMENT","BaseData","floor","max","_nullCount","VALIDITY","sliceInternal","TYPE","sliceData","sliceOffsets","DATA","FlatData","FlatListData","DictionaryData","_indicies","_dictionary","_offset","_length","NestedData","child","SingleNestedData","valueChildData","_valuesData","ListData","UnionData","SparseUnionData","DenseUnionData","ChunkedData","chunkOffsets","_chunkVectors","_chunkOffsets","chunkData","_chunkData","vec","chunkSlices","childIndex","numChildren","childLength","childOffset","push","childVectors","childOffsets","dictionaryBatches","recordBatches","schema","metaDataLength","Message","RecordBatch","DictionaryBatch","nodes","buffers","isDelta","atomicDictionaryId","xr","Ur","__WEBPACK_IMPORTED_MODULE_2__data__","__WEBPACK_IMPORTED_MODULE_1__vector__","__WEBPACK_IMPORTED_MODULE_0__type__","args","numRows","col","numCols","columnNames","select","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","asyncIterator","g","q","verb","resume","r","__await","fulfill","settle","shift","__values","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","Fr","Lr","int32","float32","float64","isLittleEndian","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","additional_bytes","align_size","capacity","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeFloat32","writeFloat64","addInt8","addInt16","addInt64","addFloat32","addFloat64","voffset","defaultValue","slot","addFieldFloat32","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","setPosition","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","j","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","elem_size","num_elems","createString","utf8","codePoint","bytes_","position_","readUint16","readUint32","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","vtable_offset","t","opt_encoding","UTF8_BYTES","String","fromCharCode","__has_identifier","ident","node","acceptTypeVisitor","visit","acceptVectorVisitor","vector","visitNullVector","visitIntVector","visitFloatVector","visitBinaryVector","visitUtf8Vector","visitBoolVector","visitDecimalVector","visitDateVector","visitTimeVector","visitTimestampVector","visitIntervalVector","visitListVector","visitStructVector","visitUnionVector","visitFixedSizeBinaryVector","visitFixedSizeListVector","visitMapVector","visitDictionaryVector","__WEBPACK_IMPORTED_MODULE_0__vector__","ChunkedView","_children","mid","numChunks","sourcesLen","source","target","setValues","arraySet","typedArraySet","dstIdx","srcIdx","srcLen","messages","message","ti","loader","readRecordBatch","messages_1_1","messages_1","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_6__type__","__WEBPACK_IMPORTED_MODULE_4__metadata__","isRecordBatch","__WEBPACK_IMPORTED_MODULE_2__recordbatch__","visitFields","isDictionaryBatch","dictionaryId","dictionaryDataType","dictionaryVector","has","__WEBPACK_IMPORTED_MODULE_3__visitor__","visitNullType","visitFlatType","visitFlatList","visitBoolType","visitListType","visitNestedType","visitUnionType","visitFixedSizeListType","__WEBPACK_IMPORTED_MODULE_5__data__","getBufferMetadata","readData","getFieldMetadata","readNullBitmap","readOffsets","readTypeIds","__WEBPACK_IMPORTED_MODULE_0__Schema__","FieldNode","null_count","nodesOffset","buffersOffset","dataOffset","V1","headerOffset","DictionaryView","__WEBPACK_IMPORTED_MODULE_1_text_encoding_utf_8__","encodeUtf8","encoder","encode","bind","decodeUtf8","decoder","decode","ListViewBase","getList","setList","VariableListViewBase","idx","inRange","ToDictionary","undefined","end_of_stream","Stream","tokens","qi","read","Hi","token","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","TextDecoder","encoding","options","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","Wi","input","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","prepend","code_point","input_stream","code_points","endOfStream","indexOf","cp","codePointsToString","Pi","opt_string","count","temp","string","u","stringToCodePoints","NestedView","_childColumns","JSON","stringify","getNested","setNested","UnionView","getChildValue","setChildValue","_valueOffsets","RowView","MapRowView","rowIndex","_typeIds","carryBit16","intAsHex","toString","kInt32DecimalDigits","kPowersOfTen","BaseInt64","L","R","product","lessThan","Uint64","_times","_plus","left","right","times","plus","Int64","this_high","other_high","str","out_buffer","negate","startsWith","out","posn","group","parseInt","substr","multiple","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","Literal","Col","Value","Equals","LTeq","GTeq","batch","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindColLit","_bindColCol","CombinationPredicate","ands","_batch","rtrn","left_func","right_func","lit","col_func","getKey","parse","__WEBPACK_IMPORTED_MODULE_3__binary__","__WEBPACK_IMPORTED_MODULE_1__json__","__WEBPACK_IMPORTED_MODULE_4__vector__","_b","_a","recordBatch","util","__WEBPACK_IMPORTED_MODULE_3__util_int__","__WEBPACK_IMPORTED_MODULE_1__data__","BoolData","Int8","Int16","Int32","Uint8","Uint16","Uint32","Float16","Float32","Float64","__WEBPACK_IMPORTED_MODULE_2__vector__","TypeVisitor","__WEBPACK_IMPORTED_MODULE_4__visitor__","VectorVisitor","__WEBPACK_IMPORTED_MODULE_5__vector_view__","ListView","FixedSizeListView","BinaryView","Utf8View","DenseUnionView","StructView","MapView","NullView","BoolView","Float16View","DateDayView","DateMillisecondView","TimestampDayView","TimestampSecondView","TimestampMillisecondView","TimestampMicrosecondView","TimestampNanosecondView","IntervalYearMonthView","IntervalYearView","IntervalMonthView","Arrow","eval","__WEBPACK_IMPORTED_MODULE_9__ipc_reader_arrow__","__WEBPACK_IMPORTED_MODULE_6__recordbatch__","__WEBPACK_IMPORTED_MODULE_7__table__","__WEBPACK_IMPORTED_MODULE_8__predicate__","fromAsync","empty","add","fromString","isDenseUnion","isSparseUnion","__WEBPACK_IMPORTED_MODULE_7__vector_chunked__","batches","_columns","__WEBPACK_IMPORTED_MODULE_3__type__","__WEBPACK_IMPORTED_MODULE_1__recordbatch__","batchesUnion","union","__WEBPACK_IMPORTED_MODULE_4__ipc_reader_arrow__","__WEBPACK_IMPORTED_MODULE_5__util_compat__","struct","getColumnAt","getColumnIndex","findIndex","predicate","FilteredDataFrame","numBatches","batchIndex","count_by","__WEBPACK_IMPORTED_MODULE_2__predicate__","__WEBPACK_IMPORTED_MODULE_6__vector__","counts","keys","CountByResult","separator","row","rowsToString","TableToStringIterator","header","maxColumnWidths","val","k","leftPad","tableRowsToString","and","error","throw","return","res","write","writable","isTTY","once","fill","json","dictionaryFields","fieldsFromJSON","customMetadata","schemaFromJSON","__WEBPACK_IMPORTED_MODULE_5__metadata__","recordBatchFromJSON","JSONDataLoader","flattenDataSources","arrayIterator","__WEBPACK_IMPORTED_MODULE_8__data__","__WEBPACK_IMPORTED_MODULE_0_flatbuffers__","column","utf8Encoder","__WEBPACK_IMPORTED_MODULE_4_text_encoding_utf_8__","mt","__WEBPACK_IMPORTED_MODULE_2__util_bit__","Ou","int64DataFromJSON","decimalDataFromJSON","joined","binaryDataFromJSON","__WEBPACK_IMPORTED_MODULE_7__fb_Schema__","fieldNodesFromJSON","fieldNodes","validity","buffersFromJSON","fs","dataType","keysMeta","dictMeta","typeFromJSON","intFromJSON","fieldFromJSON","entries","namesToTypeMap","null","int","floatingpoint","binary","bool","decimal","date","time","timestamp","list","fixedsizebinary","fixedsizelist","floatingPointFromJSON","readMessages","toByteBuffer","Fu","readSchema","BinaryDataLoader","sources_1_1","sources_1","__WEBPACK_IMPORTED_MODULE_7__fb_Message__","__WEBPACK_IMPORTED_MODULE_1_flatbuffers__","messageOffset","footer","footerLength","footerOffset","fileLength","magicX2AndPadding","checkForMagicArrowString","magicLength","magicAndPadding","_Footer","getRootAsFooter","__WEBPACK_IMPORTED_MODULE_3__metadata__","blocks","dictionariesLength","dictionaryBatchesFromFooter","recordBatchesLength","recordBatchesFromFooter","__WEBPACK_IMPORTED_MODULE_4__type__","fieldsFromSchema","footerFromByteBuffer","readFileSchema","readMessage","isSchema","readStreamSchema","readStreamMessages","PADDING","MAGIC_STR","MAGIC","_Message","getRootAsMessage","_Schema","recordBatchFromMessage","_RecordBatch","_DictionaryBatch","messageFromByteBuffer","__WEBPACK_IMPORTED_MODULE_6__fb_Schema__","__WEBPACK_IMPORTED_MODULE_5__fb_File__","Footer","_Null","_Int","_FloatingPoint","_Binary","_Bool","_Utf8","_Decimal","_Date","_Time","_Timestamp","_Interval","_List","_Struct","_Union","_FixedSizeBinary","_FixedSizeList","_Map","nodesLength","fieldNodesFromRecordBatch","buffersLength","buffersFromRecordBatch","fieldsLength","fieldsFromField","childrenLength","typeFromField","indexType","intFromField","parent","entry","customMetadataLength","floatFromField","typeIdsArray","Block","schemaOffset","dictionariesOffset","recordBatchesOffset"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bc158b134421b50e488f","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\nimport { Vector, View } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { DictionaryBatch } from './ipc/metadata';\nimport { TypeVisitor, VisitorNode } from './visitor';\n\nexport import Long = flatbuffers.Long;\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\nexport class Schema {\n    public static from(vectors: Vector[]) {\n        return new Schema(vectors.map((v, i) => new Field('' + i, v.type)));\n    }\n    // @ts-ignore\n    protected _bodyLength: number;\n    // @ts-ignore\n    protected _headerType: MessageHeader;\n    public readonly fields: Field[];\n    public readonly version: MetadataVersion;\n    public readonly metadata?: Map<string, string>;\n    public readonly dictionaries: Map<number, Field<Dictionary>>;\n    constructor(fields: Field[],\n                metadata?: Map<string, string>,\n                version: MetadataVersion = MetadataVersion.V4,\n                dictionaries: Map<number, Field<Dictionary>> = new Map()) {\n        this.fields = fields;\n        this.version = version;\n        this.metadata = metadata;\n        this.dictionaries = dictionaries;\n    }\n    public get bodyLength() { return this._bodyLength; }\n    public get headerType() { return this._headerType; }\n    public select(...fieldNames: string[]): Schema {\n        const namesToKeep = fieldNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        const newDictFields = new Map(), newFields = this.fields.filter((f) => namesToKeep[f.name]);\n        this.dictionaries.forEach((f, dictId) => (namesToKeep[f.name]) && newDictFields.set(dictId, f));\n        return new Schema(newFields, this.metadata, this.version, newDictFields);\n    }\n    public static [Symbol.toStringTag] = ((prototype: Schema) => {\n        prototype._bodyLength = 0;\n        prototype._headerType = MessageHeader.Schema;\n        return 'Schema';\n    })(Schema.prototype);\n}\n\nexport class Field<T extends DataType = DataType> {\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata?: Map<string, string> | null;\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata;\n    }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public get typeId(): T['TType'] { return this.type.TType; }\n    public get [Symbol.toStringTag](): string { return 'Field'; }\n    public get indicies(): T | Int<any> {\n        return DataType.isDictionary(this.type) ? this.type.indicies : this.type;\n    }\n}\n\nexport type TimeBitWidth = 32 | 64;\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n\nexport type NumericType = Int | Float | Date_ | Time | Interval | Timestamp;\nexport type FixedSizeType = Int64 |  Uint64 | Decimal | FixedSizeBinary;\nexport type PrimitiveType = NumericType | FixedSizeType;\n\nexport type FlatListType = Utf8 | Binary; // <-- these types have `offset`, `data`, and `validity` buffers\nexport type FlatType = Bool | PrimitiveType | FlatListType; // <-- these types have `data` and `validity` buffers\nexport type ListType = List<any>; // <-- these types have `offset` and `validity` buffers\nexport type NestedType = Map_ | Struct | List<any> | FixedSizeList<any> | Union<any>; // <-- these types have `validity` buffer and nested childData\nexport type SingleNestedType = List<any> | FixedSizeList<any>; // <-- these are nested types that can only have a single child\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\n export enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n    Dictionary      = 'Dictionary',  // Dictionary aka Category type\n    DenseUnion      = 'DenseUnion',  // Dense Union of logical types\n    SparseUnion     = 'SparseUnion',  // Sparse Union of logical types\n}\n\nexport interface DataType<TType extends Type = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n}\n\nexport abstract class DataType<TType extends Type = any> implements Partial<VisitorNode> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    static            isNull (x: DataType): x is Null            { return x.TType === Type.Null;            }\n    static             isInt (x: DataType): x is Int             { return x.TType === Type.Int;             }\n    static           isFloat (x: DataType): x is Float           { return x.TType === Type.Float;           }\n    static          isBinary (x: DataType): x is Binary          { return x.TType === Type.Binary;          }\n    static            isUtf8 (x: DataType): x is Utf8            { return x.TType === Type.Utf8;            }\n    static            isBool (x: DataType): x is Bool            { return x.TType === Type.Bool;            }\n    static         isDecimal (x: DataType): x is Decimal         { return x.TType === Type.Decimal;         }\n    static            isDate (x: DataType): x is Date_           { return x.TType === Type.Date;            }\n    static            isTime (x: DataType): x is Time            { return x.TType === Type.Time;            }\n    static       isTimestamp (x: DataType): x is Timestamp       { return x.TType === Type.Timestamp;       }\n    static        isInterval (x: DataType): x is Interval        { return x.TType === Type.Interval;        }\n    static            isList (x: DataType): x is List            { return x.TType === Type.List;            }\n    static          isStruct (x: DataType): x is Struct          { return x.TType === Type.Struct;          }\n    static           isUnion (x: DataType): x is Union           { return x.TType === Type.Union;           }\n    static      isDenseUnion (x: DataType): x is DenseUnion      { return x.TType === Type.DenseUnion;      }\n    static     isSparseUnion (x: DataType): x is SparseUnion     { return x.TType === Type.SparseUnion;     }\n    static isFixedSizeBinary (x: DataType): x is FixedSizeBinary { return x.TType === Type.FixedSizeBinary; }\n    static   isFixedSizeList (x: DataType): x is FixedSizeList   { return x.TType === Type.FixedSizeList;   }\n    static             isMap (x: DataType): x is Map_            { return x.TType === Type.Map;             }\n    static      isDictionary (x: DataType): x is Dictionary      { return x.TType === Type.Dictionary;      }\n\n    constructor(public readonly TType: TType,\n                public readonly children?: Field[]) {}\n\n    acceptTypeVisitor(visitor: TypeVisitor): any {\n        switch (this.TType) {\n            case Type.Null:            return DataType.isNull(this)            && visitor.visitNull(this)            || null;\n            case Type.Int:             return DataType.isInt(this)             && visitor.visitInt(this)             || null;\n            case Type.Float:           return DataType.isFloat(this)           && visitor.visitFloat(this)           || null;\n            case Type.Binary:          return DataType.isBinary(this)          && visitor.visitBinary(this)          || null;\n            case Type.Utf8:            return DataType.isUtf8(this)            && visitor.visitUtf8(this)            || null;\n            case Type.Bool:            return DataType.isBool(this)            && visitor.visitBool(this)            || null;\n            case Type.Decimal:         return DataType.isDecimal(this)         && visitor.visitDecimal(this)         || null;\n            case Type.Date:            return DataType.isDate(this)            && visitor.visitDate(this)            || null;\n            case Type.Time:            return DataType.isTime(this)            && visitor.visitTime(this)            || null;\n            case Type.Timestamp:       return DataType.isTimestamp(this)       && visitor.visitTimestamp(this)       || null;\n            case Type.Interval:        return DataType.isInterval(this)        && visitor.visitInterval(this)        || null;\n            case Type.List:            return DataType.isList(this)            && visitor.visitList(this)            || null;\n            case Type.Struct:          return DataType.isStruct(this)          && visitor.visitStruct(this)          || null;\n            case Type.Union:           return DataType.isUnion(this)           && visitor.visitUnion(this)           || null;\n            case Type.FixedSizeBinary: return DataType.isFixedSizeBinary(this) && visitor.visitFixedSizeBinary(this) || null;\n            case Type.FixedSizeList:   return DataType.isFixedSizeList(this)   && visitor.visitFixedSizeList(this)   || null;\n            case Type.Map:             return DataType.isMap(this)             && visitor.visitMap(this)             || null;\n            case Type.Dictionary:      return DataType.isDictionary(this)      && visitor.visitDictionary(this)      || null;\n            default: return null;\n        }\n    }\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    constructor() {\n        super(Type.Null);\n    }\n    public toString() { return `Null`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return visitor.visitNull(this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\nexport interface Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> { TArray: TArrayType; TValue: TValueType; }\nexport class Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> {\n    constructor(public readonly isSigned: boolean,\n                public readonly bitWidth: IntBitWidth) {\n        super(Type.Int);\n    }\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.bitWidth) {\n            case  8: return (this.isSigned ? Int8Array : Uint8Array) as any;\n            case 16: return (this.isSigned ? Int16Array : Uint16Array) as any;\n            case 32: return (this.isSigned ? Int32Array : Uint32Array) as any;\n            case 64: return (this.isSigned ? Int32Array : Uint32Array) as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any { return visitor.visitInt(this); }\n    protected static [Symbol.toStringTag] = ((proto: Int) => {\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int.prototype);\n}\n\nexport class Int8 extends Int<number, Int8Array> { constructor() { super(true, 8); } }\nexport class Int16 extends Int<number, Int16Array> { constructor() { super(true, 16); } }\nexport class Int32 extends Int<number, Int32Array> { constructor() { super(true, 32); } }\nexport class Int64 extends Int<Int32Array, Int32Array> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int<number, Uint8Array> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int<number, Uint16Array> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int<number, Uint32Array> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int<Uint32Array, Uint32Array> { constructor() { super(false, 64); } }\n\nexport interface Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> { TArray: TArrayType; TValue: number; }\nexport class Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> {\n    constructor(public readonly precision: Precision) {\n        super(Type.Float);\n    }\n    // @ts-ignore\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array as any;\n            case Precision.SINGLE: return Float32Array as any;\n            case Precision.DOUBLE: return Float64Array as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any { return visitor.visitFloat(this); }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Uint16Array> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Float32Array> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Float64Array> { constructor() { super(Precision.DOUBLE); } }\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super(Type.Binary);\n    }\n    public toString() { return `Binary`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return visitor.visitBinary(this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super(Type.Utf8);\n    }\n    public toString() { return `Utf8`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return visitor.visitUtf8(this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super(Type.Bool);\n    }\n    public toString() { return `Bool`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return visitor.visitBool(this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super(Type.Decimal);\n    }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return visitor.visitDecimal(this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Date_ extends DataType<Type.Date> { TArray: Int32Array; TValue: Date; }\nexport class Date_ extends DataType<Type.Date> {\n    constructor(public readonly unit: DateUnit) {\n        super(Type.Date);\n    }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return visitor.visitDate(this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport interface Time extends DataType<Type.Time> { TArray: Uint32Array; TValue: number; }\nexport class Time extends DataType<Type.Time> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly bitWidth: TimeBitWidth) {\n        super(Type.Time);\n    }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return visitor.visitTime(this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Time) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time.prototype);\n}\n\nexport interface Timestamp extends DataType<Type.Timestamp> { TArray: Int32Array; TValue: number; }\nexport class Timestamp extends DataType<Type.Timestamp> {\n    constructor(public unit: TimeUnit, public timezone?: string | null) {\n        super(Type.Timestamp);\n    }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return visitor.visitTimestamp(this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp.prototype);\n}\n\nexport interface Interval extends DataType<Type.Interval> { TArray: Int32Array; TValue: Int32Array; }\nexport class Interval extends DataType<Type.Interval> {\n    constructor(public unit: IntervalUnit) {\n        super(Type.Interval);\n    }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return visitor.visitInterval(this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Interval) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval.prototype);\n}\n\nexport interface List<T extends DataType = any> extends DataType<Type.List>  { TArray: any; TValue: Vector<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List> {\n    constructor(public children: Field[]) {\n        super(Type.List, children);\n    }\n    public toString() { return `List<${this.valueType}>`; }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return visitor.visitList(this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct extends DataType<Type.Struct> { TArray: any; TValue: View<any>; }\nexport class Struct extends DataType<Type.Struct> {\n    constructor(public children: Field[]) {\n        super(Type.Struct, children);\n    }\n    public toString() { return `Struct<${this.children.map((f) => f.type).join(`, `)}>`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return visitor.visitStruct(this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\nexport interface Union<TType extends Type = any> extends DataType<TType> { TArray: Int8Array; TValue: any; }\nexport class Union<TType extends Type = any> extends DataType<TType> {\n    constructor(public readonly mode: UnionMode,\n                public readonly typeIds: ArrowType[],\n                public readonly children: Field[]) {\n        super(<TType> (mode === UnionMode.Sparse ? Type.SparseUnion : Type.DenseUnion), children);\n    }\n    public toString() { return `${this[Symbol.toStringTag]}<${this.typeIds.map((x) => Type[x]).join(` | `)}>`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any { return visitor.visitUnion(this); }\n    protected static [Symbol.toStringTag] = ((proto: Union) => {\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union.prototype);\n}\n\nexport class DenseUnion extends Union<Type.DenseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DenseUnion) => {\n        return proto[Symbol.toStringTag] = 'DenseUnion';\n    })(DenseUnion.prototype);\n}\n\nexport class SparseUnion extends Union<Type.SparseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: SparseUnion) => {\n        return proto[Symbol.toStringTag] = 'SparseUnion';\n    })(SparseUnion.prototype);\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super(Type.FixedSizeBinary);\n    }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any { return visitor.visitFixedSizeBinary(this); }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: any; TValue: Vector<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> {\n    constructor(public readonly listSize: number,\n                public readonly children: Field[]) {\n        super(Type.FixedSizeList, children);\n    }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any { return visitor.visitFixedSizeList(this); }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Map_ extends DataType<Type.Map> { TArray: Uint8Array; TValue: View<any>; }\nexport class Map_ extends DataType<Type.Map> {\n    constructor(public readonly keysSorted: boolean,\n                public readonly children: Field[]) {\n        super(Type.Map, children);\n    }\n    public toString() { return `Map<${this.children.join(`, `)}>`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any { return visitor.visitMap(this); }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\nexport interface Dictionary<T extends DataType = any> extends DataType<Type.Dictionary> { TArray: T['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly dictionary: T;\n    public readonly indicies: Int<any>;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indicies: Int<any>, id?: Long | number | null, isOrdered?: boolean | null) {\n        super(Type.Dictionary);\n        this.indicies = indicies;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? DictionaryBatch.getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get ArrayType() { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.dictionary}, ${this.indicies}>`; }\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return visitor.visitDictionary(this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n\nexport interface TypedArrayConstructor<T extends TypedArray = TypedArray> {\n    readonly prototype: T;\n    readonly BYTES_PER_ELEMENT: number;\n    new (length: number): T;\n    new (elements: Iterable<number>): T;\n    new (arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): T;\n    new (buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n    of(...items: number[]): T;\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): T;\n}\n\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\nexport interface TypedArray extends Iterable<number> {\n    [index: number]: number;\n    readonly length: number;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly buffer: ArrayBufferLike;\n    readonly BYTES_PER_ELEMENT: number;\n    [Symbol.toStringTag]: any;\n    [Symbol.iterator](): IterableIterator<number>;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n    copyWithin(target: number, start: number, end?: number): this;\n    every(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): this;\n    filter(callbackfn: (value: number, index: number, array: TypedArray) => any, thisArg?: any): TypedArray;\n    find(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: TypedArray) => void, thisArg?: any): void;\n    includes(searchElement: number, fromIndex?: number): boolean;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    map(callbackfn: (value: number, index: number, array: TypedArray) => number, thisArg?: any): TypedArray;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reverse(): TypedArray;\n    set(array: ArrayLike<number>, offset?: number): void;\n    slice(start?: number, end?: number): TypedArray;\n    some(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: (a: number, b: number) => number): this;\n    subarray(begin: number, end?: number): TypedArray;\n    toLocaleString(): string;\n    toString(): string;\n}\n\n\n\n// WEBPACK FOOTER //\n// type.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data, ChunkedData, FlatData, BoolData, FlatListData, NestedData, DictionaryData } from './data';\nimport { VisitorNode, TypeVisitor, VectorVisitor } from './visitor';\nimport { DataType, ListType, FlatType, NestedType, FlatListType, TimeUnit } from './type';\nimport { IterableArrayLike, Precision, DateUnit, IntervalUnit, UnionMode } from './type';\n\nexport interface VectorLike { length: number; nullCount: number; }\n\nexport interface View<T extends DataType> {\n    clone(data: Data<T>): this;\n    isValid(index: number): boolean;\n    get(index: number): T['TValue'] | null;\n    set(index: number, value: T['TValue']): void;\n    toArray(): IterableArrayLike<T['TValue'] | null>;\n    [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n}\n\nexport class Vector<T extends DataType = any> implements VectorLike, View<T>, VisitorNode {\n    public static create<T extends DataType>(data: Data<T>): Vector<T> {\n        return createVector(data);\n    }\n    public static concat<T extends DataType>(...sources: Vector<T>[]): Vector<T> {\n        return sources.length === 1 ? sources[0] : sources.reduce((a, b) => a.concat(b));\n    }\n    public type: T;\n    public length: number;\n    public readonly data: Data<T>;\n    public readonly view: View<T>;\n    constructor(data: Data<T>, view: View<T>) {\n        this.data = data;\n        this.type = data.type;\n        this.length = data.length;\n        let nulls: Uint8Array;\n        if ((<any> data instanceof ChunkedData) && !(view instanceof ChunkedView)) {\n            this.view = new ChunkedView(data);\n        } else if (!(view instanceof ValidityView) && (nulls = data.nullBitmap!) && nulls.length > 0 && data.nullCount > 0) {\n            this.view = new ValidityView(data, view);\n        } else {\n            this.view = view;\n        }\n    }\n\n    public get nullCount() { return this.data.nullCount; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get [Symbol.toStringTag]() {\n        return `Vector<${this.type[Symbol.toStringTag]}>`;\n    }\n    public toJSON(): any { return this.toArray(); }\n    public clone<R extends T>(data: Data<R>, view: View<R> = this.view.clone(data) as any): this {\n        return new (this.constructor as any)(data, view);\n    }\n    public isValid(index: number): boolean {\n        return this.view.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this.view.get(index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.view.set(index, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return this.view.toArray();\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return this.view[Symbol.iterator]();\n    }\n    public concat(...others: Vector<T>[]): this {\n        if ((others = others.filter(Boolean)).length === 0) {\n            return this;\n        }\n        const { view } = this;\n        const vecs = !(view instanceof ChunkedView)\n            ? [this, ...others]\n            : [...view.chunkVectors, ...others];\n        const offsets = ChunkedData.computeOffsets(vecs);\n        const chunksLength = offsets[offsets.length - 1];\n        const chunkedData = new ChunkedData(this.type, chunksLength, vecs, 0, -1, offsets);\n        return this.clone(chunkedData, new ChunkedView(chunkedData)) as this;\n    }\n    public slice(begin?: number, end?: number): this {\n        let { length } = this;\n        let size = (this.view as any).size || 1;\n        let total = length, from = (begin || 0) * size;\n        let to = (typeof end === 'number' ? end : total) * size;\n        if (to < 0) { to = total - (to * -1) % total; }\n        if (from < 0) { from = total - (from * -1) % total; }\n        if (to < from) { [from, to] = [to, from]; }\n        total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;\n        const slicedData = this.data.slice(from, Math.min(total, length));\n        return this.clone(slicedData, this.view.clone(slicedData)) as this;\n    }\n\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this.type);\n    }\n    public acceptVectorVisitor(visitor: VectorVisitor): any {\n        return VectorVisitor.visitTypeInline(visitor, this.type, this);\n    }\n}\n\nexport abstract class FlatVector<T extends FlatType> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public lows(): IntVector<Int32> { return this.asInt32(0, 2); }\n    public highs(): IntVector<Int32> { return this.asInt32(1, 2); }\n    public asInt32(offset: number = 0, stride: number = 2): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        if (offset > 0) {\n            data = data.slice(offset, this.length - offset);\n        }\n        const int32s = new IntVector(data, new PrimitiveView(data, stride));\n        int32s.length = this.length / stride | 0;\n        return int32s;\n    }\n}\n\nexport abstract class ListVectorBase<T extends (ListType | FlatListType)> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n    public getValueOffset(index: number) {\n        return this.valueOffsets[index];\n    }\n    public getValueLength(index: number) {\n        return this.valueOffsets[index + 1] - this.valueOffsets[index];\n    }\n}\n\nexport abstract class NestedVector<T extends NestedType> extends Vector<T>  {\n    // @ts-ignore\n    public readonly view: NestedView<T>;\n    // @ts-ignore\n    protected _childData: Data<any>[];\n    public getChildAt<R extends DataType = DataType>(index: number) {\n        return this.view.getChildAt<R>(index);\n    }\n    public get childData(): Data<any>[] {\n        let data: Data<T> | Data<any>[];\n        if ((data = this._childData)) {\n            return data as Data<any>[];\n        } else if (!(<any> (data = this.data) instanceof ChunkedData)) {\n            return this._childData = (data as NestedData<T>).childData;\n        }\n        const chunks = ((data as ChunkedData<T>).chunkVectors as NestedVector<T>[]);\n        return this._childData = chunks.reduce<Vector<T>[][]>((columns, chunk) =>\n                chunk.childData.reduce<Vector<T>[][]>((columns, _, i) => (\n                    columns[i] = [...(columns[i] || []), chunk.getChildAt(i)]\n                ) && columns, columns\n            ), [] as Vector<T>[][]\n        ).map((cols) => Vector.concat<T>(...cols).data);\n    }\n}\n\nimport { List, Binary, Utf8, Bool, } from './type';\nimport { Null, Int, Float, Decimal, Date_, Time, Timestamp, Interval } from './type';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, Float16, Float32, Float64 } from './type';\nimport { Struct, Union, SparseUnion, DenseUnion, FixedSizeBinary, FixedSizeList, Map_, Dictionary } from './type';\n\nimport { ChunkedView } from './vector/chunked';\nimport { DictionaryView } from './vector/dictionary';\nimport { ListView, FixedSizeListView, BinaryView, Utf8View } from './vector/list';\nimport { UnionView, DenseUnionView, NestedView, StructView, MapView } from './vector/nested';\nimport { FlatView, NullView, BoolView, ValidityView, PrimitiveView, FixedSizeView, Float16View } from './vector/flat';\nimport { DateDayView, DateMillisecondView, IntervalYearMonthView } from './vector/flat';\nimport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './vector/flat';\nimport { packBools } from './util/bit';\n\nexport class NullVector extends Vector<Null> {\n    constructor(data: Data<Null>, view: View<Null> = new NullView(data)) {\n        super(data, view);\n    }\n}\n\nexport class BoolVector extends Vector<Bool> {\n    public static from(data: IterableArrayLike<boolean>) {\n        return new BoolVector(new BoolData(new Bool(), data.length, null, packBools(data)));\n    }\n    public get values() { return this.data.values; }\n    constructor(data: Data<Bool>, view: View<Bool> = new BoolView(data)) {\n        super(data, view);\n    }\n}\n\nexport class IntVector<T extends Int = Int<any>> extends FlatVector<T> {\n    public static from(data: Int8Array): IntVector<Int8>;\n    public static from(data: Int16Array): IntVector<Int16>;\n    public static from(data: Int32Array): IntVector<Int32>;\n    public static from(data: Uint8Array): IntVector<Uint8>;\n    public static from(data: Uint16Array): IntVector<Uint16>;\n    public static from(data: Uint32Array): IntVector<Uint32>;\n    public static from(data: Int32Array, is64: true): IntVector<Int64>;\n    public static from(data: Uint32Array, is64: true): IntVector<Uint64>;\n    public static from(data: any, is64?: boolean) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? new IntVector(new FlatData(new Int64(), data.length, null, data))\n                : new IntVector(new FlatData(new Uint64(), data.length, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return new IntVector(new FlatData(new Int8(), data.length, null, data));\n            case Int16Array: return new IntVector(new FlatData(new Int16(), data.length, null, data));\n            case Int32Array: return new IntVector(new FlatData(new Int32(), data.length, null, data));\n            case Uint8Array: return new IntVector(new FlatData(new Uint8(), data.length, null, data));\n            case Uint16Array: return new IntVector(new FlatData(new Uint16(), data.length, null, data));\n            case Uint32Array: return new IntVector(new FlatData(new Uint32(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    static defaultView<T extends Int>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<T>, view: View<T> = IntVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class FloatVector<T extends Float = Float<any>> extends FlatVector<T> {\n    public static from(data: Uint16Array): FloatVector<Float16>;\n    public static from(data: Float32Array): FloatVector<Float32>;\n    public static from(data: Float64Array): FloatVector<Float64>;\n    public static from(data: any) {\n        switch (data.constructor) {\n            case Uint16Array: return new FloatVector(new FlatData(new Float16(), data.length, null, data));\n            case Float32Array: return new FloatVector(new FlatData(new Float32(), data.length, null, data));\n            case Float64Array: return new FloatVector(new FlatData(new Float64(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n    static defaultView<T extends Float>(data: Data<T>): FlatView<any> {\n        return data.type.precision !== Precision.HALF ? new FlatView(data) : new Float16View(data as Data<Float16>);\n    }\n    constructor(data: Data<T>, view: View<T> = FloatVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class DateVector extends FlatVector<Date_> {\n    static defaultView<T extends Date_>(data: Data<T>) {\n        return data.type.unit === DateUnit.DAY ? new DateDayView(data) : new DateMillisecondView(data, 2);\n    }\n    constructor(data: Data<Date_>, view: View<Date_> = DateVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case DateUnit.DAY: return new IntVector(data, new TimestampDayView(data as any, 1) as any);\n            case DateUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class DecimalVector extends FlatVector<Decimal> {\n    constructor(data: Data<Decimal>, view: View<Decimal> = new FixedSizeView(data, 4)) {\n        super(data, view);\n    }\n}\n\nexport class TimeVector extends FlatVector<Time> {\n    static defaultView<T extends Time>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<Time>, view: View<Time> = TimeVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class TimestampVector extends FlatVector<Timestamp> {\n    constructor(data: Data<Timestamp>, view: View<Timestamp> = new FixedSizeView(data, 2)) {\n        super(data, view);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case TimeUnit.SECOND: return new IntVector(data, new TimestampSecondView(data as any, 1) as any);\n            case TimeUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n            case TimeUnit.MICROSECOND: return new IntVector(data, new TimestampMicrosecondView(data as any, 2) as any);\n            case TimeUnit.NANOSECOND: return new IntVector(data, new TimestampNanosecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized time unit \"${TimeUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class IntervalVector extends FlatVector<Interval> {\n    static defaultView<T extends Interval>(data: Data<T>) {\n        return data.type.unit === IntervalUnit.YEAR_MONTH ? new IntervalYearMonthView(data) : new FixedSizeView(data, 2);\n    }\n    constructor(data: Data<Interval>, view: View<Interval> = IntervalVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class BinaryVector extends ListVectorBase<Binary> {\n    constructor(data: Data<Binary>, view: View<Binary> = new BinaryView(data)) {\n        super(data, view);\n    }\n    public asUtf8() {\n        return new Utf8Vector((this.data as FlatListData<any>).clone(new Utf8()));\n    }\n}\n\nexport class FixedSizeBinaryVector extends FlatVector<FixedSizeBinary> {\n    constructor(data: Data<FixedSizeBinary>, view: View<FixedSizeBinary> = new FixedSizeView(data, data.type.byteWidth)) {\n        super(data, view);\n    }\n}\n\nexport class Utf8Vector extends ListVectorBase<Utf8> {\n    constructor(data: Data<Utf8>, view: View<Utf8> = new Utf8View(data)) {\n        super(data, view);\n    }\n    public asBinary() {\n        return new BinaryVector((this.data as FlatListData<any>).clone(new Binary()));\n    }\n}\n\nexport class ListVector<T extends DataType = DataType> extends ListVectorBase<List<T>> {\n    constructor(data: Data<List<T>>, view: View<List<T>> = new ListView(data)) {\n        super(data, view);\n    }\n}\n\nexport class FixedSizeListVector extends Vector<FixedSizeList> {\n    constructor(data: Data<FixedSizeList>, view: View<FixedSizeList> = new FixedSizeListView(data)) {\n        super(data, view);\n    }\n}\n\nexport class MapVector extends NestedVector<Map_> {\n    constructor(data: Data<Map_>, view: View<Map_> = new MapView(data)) {\n        super(data, view);\n    }\n    public asStruct() {\n        return new StructVector((this.data as NestedData<any>).clone(new Struct(this.type.children)));\n    }\n}\n\nexport class StructVector extends NestedVector<Struct> {\n    constructor(data: Data<Struct>, view: View<Struct> = new StructView(data)) {\n        super(data, view);\n    }\n    public asMap(keysSorted: boolean = false) {\n        return new MapVector((this.data as NestedData<any>).clone(new Map_(keysSorted, this.type.children)));\n    }\n}\n\nexport class UnionVector<T extends (SparseUnion | DenseUnion) = any> extends NestedVector<T> {\n    constructor(data: Data<T>, view: View<T> = <any> (data.type.mode === UnionMode.Sparse ? new UnionView<SparseUnion>(data as Data<SparseUnion>) : new DenseUnionView(data as Data<DenseUnion>))) {\n        super(data, view);\n    }\n}\n\nexport class DictionaryVector<T extends DataType = DataType> extends Vector<Dictionary<T>> {\n    // @ts-ignore\n    public readonly indicies: Vector<Int>;\n    // @ts-ignore\n    public readonly dictionary: Vector<T>;\n    constructor(data: Data<Dictionary<T>>, view: View<Dictionary<T>> = new DictionaryView<T>(data.dictionary, new IntVector(data.indicies))) {\n        super(data as Data<any>, view);\n        if (data instanceof DictionaryData && view instanceof DictionaryView) {\n            this.indicies = view.indicies;\n            this.dictionary = data.dictionary;\n        } else if (data instanceof ChunkedData && view instanceof ChunkedView) {\n            const chunks = view.chunkVectors as DictionaryVector<T>[];\n            // Assume the last chunk's dictionary data is the most up-to-date,\n            // including data from DictionaryBatches that were marked as deltas\n            this.dictionary = chunks[chunks.length - 1].dictionary;\n            this.indicies = chunks.reduce<Vector<Int> | null>(\n                (idxs: Vector<Int> | null, dict: DictionaryVector<T>) =>\n                    !idxs ? dict.indicies! : idxs.concat(dict.indicies!),\n                null\n            )!;\n        } else {\n            throw new TypeError(`Unrecognized DictionaryVector view`);\n        }\n    }\n    public getKey(index: number) { return this.indicies.get(index); }\n    public getValue(key: number) { return this.dictionary.get(key); }\n}\n\nexport const createVector = ((VectorLoader: new <T extends DataType>(data: Data<T>) => TypeVisitor) => (\n    <T extends DataType>(data: Data<T>) => TypeVisitor.visitTypeInline(new VectorLoader(data), data.type) as Vector<T>\n))(class VectorLoader<T extends DataType> extends TypeVisitor {\n    constructor(private data: Data<T>) { super(); }\n    visitNull           (_type: Null)            { return new NullVector(this.data);            }\n    visitInt            (_type: Int)             { return new IntVector(this.data);             }\n    visitFloat          (_type: Float)           { return new FloatVector(this.data);           }\n    visitBinary         (_type: Binary)          { return new BinaryVector(this.data);          }\n    visitUtf8           (_type: Utf8)            { return new Utf8Vector(this.data);            }\n    visitBool           (_type: Bool)            { return new BoolVector(this.data);            }\n    visitDecimal        (_type: Decimal)         { return new DecimalVector(this.data);         }\n    visitDate           (_type: Date_)           { return new DateVector(this.data);            }\n    visitTime           (_type: Time)            { return new TimeVector(this.data);            }\n    visitTimestamp      (_type: Timestamp)       { return new TimestampVector(this.data);       }\n    visitInterval       (_type: Interval)        { return new IntervalVector(this.data);        }\n    visitList           (_type: List)            { return new ListVector(this.data);            }\n    visitStruct         (_type: Struct)          { return new StructVector(this.data);          }\n    visitUnion          (_type: Union)           { return new UnionVector(this.data);           }\n    visitFixedSizeBinary(_type: FixedSizeBinary) { return new FixedSizeBinaryVector(this.data); }\n    visitFixedSizeList  (_type: FixedSizeList)   { return new FixedSizeListVector(this.data);   }\n    visitMap            (_type: Map_)            { return new MapVector(this.data);             }\n    visitDictionary     (_type: Dictionary)      { return new DictionaryVector(this.data);      }\n});\n\n\n\n// WEBPACK FOOTER //\n// vector.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View } from '../vector';\nimport { getBool, setBool, iterateBits } from '../util/bit';\nimport { Bool, Float16, Date_, Interval, Null, Int32, Timestamp } from '../type';\nimport { DataType, FlatType, PrimitiveType, IterableArrayLike } from '../type';\n\nexport class FlatView<T extends FlatType> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public get(index: number): T['TValue'] {\n        return this.values[index];\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.values[index] = value;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values.subarray(0, this.length);\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue']> {\n        return this.values.subarray(0, this.length)[Symbol.iterator]() as IterableIterator<T['TValue']>;\n    }\n}\n\nexport class NullView implements View<Null> {\n    public length: number;\n    constructor(data: Data<Null>) {\n        this.length = data.length;\n    }\n    public clone(data: Data<Null>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public set(): void {}\n    public get() { return null; }\n    public toArray(): IterableArrayLike<null> {\n        return [...this];\n    }\n    public *[Symbol.iterator](): IterableIterator<null> {\n        for (let index = -1, length = this.length; ++index < length;) {\n            yield null;\n        }\n    }\n}\n\nexport class BoolView extends FlatView<Bool> {\n    protected offset: number;\n    constructor(data: Data<Bool>) {\n        super(data);\n        this.offset = data.offset;\n    }\n    public toArray() { return [...this]; }\n    public get(index: number): boolean {\n        const boolBitIndex = this.offset + index;\n        return getBool(null, index, this.values[boolBitIndex >> 3], boolBitIndex % 8);\n    }\n    public set(index: number, value: boolean): void {\n        setBool(this.values, this.offset + index, value);\n    }\n    public [Symbol.iterator](): IterableIterator<boolean> {\n        return iterateBits<boolean>(this.values, this.offset, this.length, this.values, getBool);\n    }\n}\n\nexport class ValidityView<T extends DataType> implements View<T> {\n    protected view: View<T>;\n    protected length: number;\n    protected offset: number;\n    protected nullBitmap: Uint8Array;\n    constructor(data: Data<T>, view: View<T>) {\n        this.view = view;\n        this.length = data.length;\n        this.offset = data.offset;\n        this.nullBitmap = data.nullBitmap!;\n    }\n    public clone(data: Data<T>): this {\n        return new ValidityView(data, this.view.clone(data)) as this;\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return [...this];\n    }\n    public isValid(index: number): boolean {\n        const nullBitIndex = this.offset + index;\n        return getBool(null, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public get(index: number): T['TValue'] | null {\n        const nullBitIndex = this.offset + index;\n        return this.getNullable(this.view, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        if (setBool(this.nullBitmap, this.offset + index, value != null)) {\n            this.view.set(index, value);\n        }\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return iterateBits<T['TValue'] | null>(this.nullBitmap, this.offset, this.length, this.view, this.getNullable);\n    }\n    protected getNullable(view: View<T>, index: number, byte: number, bit: number) {\n        return getBool(view, index, byte, bit) ? view.get(index) : null;\n    }\n}\n\nexport class PrimitiveView<T extends PrimitiveType> extends FlatView<T> {\n    public size: number;\n    public ArrayType: T['ArrayType'];\n    constructor(data: Data<T>, size?: number) {\n        super(data);\n        this.size = size || 1;\n        this.ArrayType = data.type.ArrayType;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, this.size) as this;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values[index * size];\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values[index * size] = value;\n    }\n    public get(index: number): T['TValue'] {\n        return this.getValue(this.values, index, this.size);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setValue(this.values, index, this.size, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.size > 1 ?\n            new this.ArrayType(this) :\n            this.values.subarray(0, this.length);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getValue;\n        const { size, values, length } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, size);\n        }\n    }\n}\n\nexport class FixedSizeView<T extends PrimitiveType> extends PrimitiveView<T> {\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values.subarray(index * size, index * size + size);\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values.set((value as T['TArray']).subarray(0, size), index * size);\n    }\n}\n\nexport class Float16View extends PrimitiveView<Float16> {\n    public toArray() { return new Float32Array(this); }\n    protected getValue(values: Uint16Array, index: number, size: number): number {\n        return (values[index * size] - 32767) / 32767;\n    }\n    protected setValue(values: Uint16Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 32767) + 32767;\n    }\n}\n\nexport class DateDayView extends PrimitiveView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochDaysToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        values[index * size] = value.valueOf() / 86400000;\n    }\n}\n\nexport class DateMillisecondView extends FixedSizeView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochMillisecondsLongToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        const epochMs = value.valueOf();\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampDayView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochDaysToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 86400000) | 0;\n    }\n}\n\nexport class TimestampSecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochSecondsToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 1000) | 0;\n    }\n}\n\nexport class TimestampMillisecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMillisecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampMicrosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMicrosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000) / 4294967296) | 0;\n    }\n}\n\nexport class TimestampNanosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochNanosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000000) / 4294967296) | 0;\n    }\n}\n\nexport class IntervalYearMonthView extends PrimitiveView<Interval> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Int32Array {\n        const interval = values[index * size];\n        return new Int32Array([interval / 12, /* years */ interval % 12  /* months */]);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Int32Array): void {\n        values[index * size] = (value[0] * 12) + (value[1] % 12);\n    }\n}\n\nexport class IntervalYearView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] / 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 12) + (values[index * size] % 12);\n    }\n}\n\nexport class IntervalMonthView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] % 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (values[index * size] * 12) + (value % 12);\n    }\n}\n\nexport function epochSecondsToMs(data: Int32Array, index: number) { return 1000 * data[index]; }\nexport function epochDaysToMs(data: Int32Array, index: number) { return 86400000 * data[index]; }\nexport function epochMillisecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1]) + data[index]; }\nexport function epochMicrosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000) + (data[index] / 1000); }\nexport function epochNanosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000000) + (data[index] / 1000000); }\n\nexport function epochMillisecondsToDate(epochMs: number) { return new Date(epochMs); }\nexport function epochDaysToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochDaysToMs(data, index)); }\nexport function epochSecondsToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochSecondsToMs(data, index)); }\nexport function epochNanosecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochNanosecondsLongToMs(data, index)); }\nexport function epochMillisecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index)); }\n\n\n\n// WEBPACK FOOTER //\n// vector/flat.ts","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// fb/Schema.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { TypedArray } from '../type';\n\nexport function align(value: number, alignment: number) {\n    return value + padding(value, alignment);\n}\n\nexport function padding(value: number, alignment: number) {\n    return (value % alignment === 0 ? 0 : alignment - value % alignment);\n}\n\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\nexport function packBools(values: Iterable<any>) {\n    let n = 0, i = 0;\n    let xs: number[] = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do { xs[i] = 0; } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\nexport function popcnt_array(arr: TypedArray, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n\n\n\n// WEBPACK FOOTER //\n// util/bit.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { popcnt_bit_range } from './util/bit';\nimport { VectorLike, Vector } from './vector';\nimport { VectorType, TypedArray, TypedArrayConstructor, Dictionary } from './type';\nimport { Int, Bool, FlatListType, List, FixedSizeList, Struct, Map_ } from './type';\nimport { DataType, FlatType, ListType, NestedType, SingleNestedType, DenseUnion, SparseUnion } from './type';\n\nexport function toTypedArray<T extends TypedArray>(ArrayType: TypedArrayConstructor<T>, values?: T | ArrayLike<number> | Iterable<number> | null): T {\n    if (!ArrayType && ArrayBuffer.isView(values)) { return values; }\n    return values instanceof ArrayType ? values\n         : !values || !ArrayBuffer.isView(values) ? ArrayType.from(values || [])\n         : new ArrayType(values.buffer, values.byteOffset, values.byteLength / ArrayType.BYTES_PER_ELEMENT);\n}\n\nexport type Data<T extends DataType> = DataTypes<T>[T['TType']] & BaseData<T>;\nexport interface DataTypes<T extends DataType> {\n/*                [Type.NONE]*/  0: BaseData<T>;\n/*                [Type.Null]*/  1: FlatData<T>;\n/*                 [Type.Int]*/  2: FlatData<T>;\n/*               [Type.Float]*/  3: FlatData<T>;\n/*              [Type.Binary]*/  4: FlatListData<T>;\n/*                [Type.Utf8]*/  5: FlatListData<T>;\n/*                [Type.Bool]*/  6: BoolData;\n/*             [Type.Decimal]*/  7: FlatData<T>;\n/*                [Type.Date]*/  8: FlatData<T>;\n/*                [Type.Time]*/  9: FlatData<T>;\n/*           [Type.Timestamp]*/ 10: FlatData<T>;\n/*            [Type.Interval]*/ 11: FlatData<T>;\n/*                [Type.List]*/ 12: ListData<List<T>>;\n/*              [Type.Struct]*/ 13: NestedData<Struct>;\n/*               [Type.Union]*/ 14: UnionData;\n/*     [Type.FixedSizeBinary]*/ 15: FlatData<T>;\n/*       [Type.FixedSizeList]*/ 16: SingleNestedData<FixedSizeList<T>>;\n/*                 [Type.Map]*/ 17: NestedData<Map_>;\n/*  [Type.DenseUnion]*/ DenseUnion: DenseUnionData;\n/*[Type.SparseUnion]*/ SparseUnion: SparseUnionData;\n/*[  Type.Dictionary]*/ Dictionary: DictionaryData<any>;\n}\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Array::null_count is called the\n// first time, the null count will be computed. See ARROW-33\nexport type kUnknownNullCount = -1;\nexport const kUnknownNullCount = -1;\n\nexport class BaseData<T extends DataType = DataType> implements VectorLike {\n    public type: T;\n    public length: number;\n    public offset: number;\n    // @ts-ignore\n    public childData: Data<any>[];\n    protected _nullCount: number | kUnknownNullCount;\n    protected /*  [VectorType.OFFSET]:*/ 0?: Int32Array;\n    protected /*    [VectorType.DATA]:*/ 1?: T['TArray'];\n    protected /*[VectorType.VALIDITY]:*/ 2?: Uint8Array;\n    protected /*    [VectorType.TYPE]:*/ 3?: Int8Array;\n    constructor(type: T, length: number, offset?: number, nullCount?: number) {\n        this.type = type;\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    }\n    public get typeId() { return this.type.TType; }\n    public get nullBitmap() { return this[VectorType.VALIDITY]; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount === -1 && (nullBitmap = this[VectorType.VALIDITY])) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new BaseData(type, length, offset, nullCount);\n    }\n    public slice(offset: number, length: number) {\n        return length <= 0 ? this : this.sliceInternal(this.clone(\n            this.type, length, this.offset + offset, +(this._nullCount === 0) - 1\n        ) as any, offset, length);\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        let arr: any;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = this[VectorType.TYPE]) && (clone[VectorType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = this[VectorType.OFFSET]) && (clone[VectorType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = this[VectorType.DATA]) && (clone[VectorType.DATA] = this.sliceData(arr, offset, length));\n        return clone;\n    }\n    protected sliceData(data: T['TArray'] & TypedArray, offset: number, length: number) {\n        return data.subarray(offset, offset + length);\n    }\n    protected sliceOffsets(valueOffsets: Int32Array, offset: number, length: number) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n}\n\nexport class FlatData<T extends FlatType> extends BaseData<T> {\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, data: Iterable<number>, offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this[VectorType.DATA] = toTypedArray(this.ArrayType, data);\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new (this.constructor as any)(type, length, this[VectorType.VALIDITY], this[VectorType.DATA], offset, nullCount) as FlatData<R>;\n    }\n}\n\nexport class BoolData extends FlatData<Bool> {\n    protected sliceData(data: Uint8Array) { return data; }\n}\n\nexport class FlatListData<T extends FlatListType> extends FlatData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, data: T['TArray'], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, data, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new FlatListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this[VectorType.DATA], offset, nullCount);\n    }\n}\n\nexport class DictionaryData<T extends DataType> extends BaseData<Dictionary<T>> {\n    protected _dictionary: Vector<T>;\n    protected _indicies: Data<Int<any>>;\n    public get indicies() { return this._indicies; }\n    public get dictionary() { return this._dictionary; }\n    constructor(type: Dictionary<T>, dictionary: Vector<T>, indicies: Data<Int<any>>) {\n        super(type, indicies.length, (indicies as any)._nullCount);\n        this._indicies = indicies;\n        this._dictionary = dictionary;\n        this.length = this._indicies.length;\n    }\n    public get nullCount() { return this._indicies.nullCount; }\n    public clone<R extends Dictionary<T>>(type: R, length = this.length, offset = this.offset) {\n        const data = this._dictionary.data.clone(type.dictionary as any);\n        return new DictionaryData<R>(\n            this.type as any,\n            this._dictionary.clone(data) as any,\n            this._indicies.slice(offset - this.offset, length)\n        ) as any;\n    }\n    protected sliceInternal(clone: this, _offset: number, _length: number) {\n        clone.length = clone._indicies.length;\n        clone._nullCount = (clone._indicies as any)._nullCount;\n        return clone;\n    }\n}\n\nexport class NestedData<T extends NestedType = NestedType> extends BaseData<T> {\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this.childData = childData;\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount);\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        if (!this[VectorType.OFFSET]) {\n            clone.childData = this.childData.map((child) => child.slice(offset, length));\n        }\n        return super.sliceInternal(clone, offset, length);\n    }\n}\n\nexport class SingleNestedData<T extends SingleNestedType> extends NestedData<T> {\n    protected _valuesData: Data<T>;\n    public get values() { return this._valuesData; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, [valueChildData], offset, nullCount);\n        this._valuesData = valueChildData;\n    }\n}\n\nexport class ListData<T extends ListType> extends SingleNestedData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, valueChildData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new ListData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this._valuesData as any, offset, nullCount);\n    }\n}\n\nexport class UnionData<T extends (DenseUnion | SparseUnion) = any> extends NestedData<T> {\n    public /*    [VectorType.TYPE]:*/ 3: T['TArray'];\n    public get typeIds() { return this[VectorType.TYPE]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, childData, offset, nullCount);\n        this[VectorType.TYPE] = toTypedArray(Int8Array, typeIds);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new UnionData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount);\n    }\n}\n\nexport class SparseUnionData extends UnionData<SparseUnion> {\n    constructor(type: SparseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n    }\n    public clone<R extends SparseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new SparseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this.childData,\n            offset, nullCount\n        ) as any as UnionData<R>;\n    }\n}\n\nexport class DenseUnionData extends UnionData<DenseUnion> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: DenseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, valueOffsets: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends DenseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new DenseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this[VectorType.OFFSET],\n            this.childData,\n            offset, nullCount\n        ) as any as UnionData<R>;\n    }\n}\n\nexport class ChunkedData<T extends DataType> extends BaseData<T> {\n    // @ts-ignore\n    protected _chunkData: Data<T>[];\n    protected _chunkVectors: Vector<T>[];\n    protected _chunkOffsets: Uint32Array;\n    public get chunkVectors() { return this._chunkVectors; }\n    public get chunkOffsets() { return this._chunkOffsets; }\n    public get chunkData() {\n        return this._chunkData || (\n               this._chunkData = this._chunkVectors.map(({ data }) => data));\n    }\n    constructor(type: T, length: number, chunkVectors: Vector<T>[], offset?: number, nullCount?: number, chunkOffsets?: Uint32Array) {\n        super(type, length, offset, nullCount);\n        this._chunkVectors = chunkVectors;\n        this._chunkOffsets = chunkOffsets || ChunkedData.computeOffsets(chunkVectors);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount === -1) {\n            this._nullCount = nullCount = this._chunkVectors.reduce((x, c) => x + c.nullCount, 0);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new ChunkedData<R>(\n            type, length,\n            this._chunkVectors.map((vec) => vec.clone(vec.data.clone(type))) as any,\n            offset, nullCount, this._chunkOffsets\n        );\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        const chunks = this._chunkVectors;\n        const offsets = this._chunkOffsets;\n        const chunkSlices: Vector<T>[] = [];\n        for (let childIndex = -1, numChildren = chunks.length; ++childIndex < numChildren;) {\n            const child = chunks[childIndex];\n            const childLength = child.length;\n            const childOffset = offsets[childIndex];\n            // If the child is to the right of the slice boundary, exclude\n            if (childOffset >= offset + length) { continue; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= childOffset + childLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (childOffset >= offset && (childOffset + childLength) <= offset + length) {\n                chunkSlices.push(child);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - childOffset);\n            const end = begin + Math.min(childLength - begin, (offset + length) - childOffset);\n            chunkSlices.push(child.slice(begin, end));\n        }\n        clone._chunkVectors = chunkSlices;\n        clone._chunkOffsets = ChunkedData.computeOffsets(chunkSlices);\n        return clone;\n    }\n    static computeOffsets<T extends DataType>(childVectors: Vector<T>[]) {\n        const childOffsets = new Uint32Array(childVectors.length + 1);\n        for (let index = 0, length = childOffsets.length, childOffset = childOffsets[0] = 0; ++index < length;) {\n            childOffsets[index] = (childOffset += childVectors[index - 1].length);\n        }\n        return childOffsets;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// data.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { align } from '../util/bit';\nimport { Schema, Long, MessageHeader, MetadataVersion } from '../type';\n\nexport class Footer {\n    constructor(public dictionaryBatches: FileBlock[], public recordBatches: FileBlock[], public schema: Schema) {}\n}\n\nexport class FileBlock {\n    constructor(public metaDataLength: number, public bodyLength: Long, public offset: Long) {}\n}\n\nexport class Message {\n    public bodyLength: number;\n    public version: MetadataVersion;\n    public headerType: MessageHeader;\n    constructor(version: MetadataVersion, bodyLength: Long | number, headerType: MessageHeader) {\n        this.version = version;\n        this.headerType = headerType;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    static isSchema(m: Message): m is Schema { return m.headerType === MessageHeader.Schema; }\n    static isRecordBatch(m: Message): m is RecordBatchMetadata { return m.headerType === MessageHeader.RecordBatch; }\n    static isDictionaryBatch(m: Message): m is DictionaryBatch { return m.headerType === MessageHeader.DictionaryBatch; }\n}\n\nexport class RecordBatchMetadata extends Message {\n    public length: number;\n    public nodes: FieldMetadata[];\n    public buffers: BufferMetadata[];\n    constructor(version: MetadataVersion, length: Long | number, nodes: FieldMetadata[], buffers: BufferMetadata[]) {\n        super(version, buffers.reduce((s, b) => align(s + b.length + (b.offset - s), 8), 0), MessageHeader.RecordBatch);\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class DictionaryBatch extends Message {\n    public id: number;\n    public isDelta: boolean;\n    public data: RecordBatchMetadata;\n    constructor(version: MetadataVersion, data: RecordBatchMetadata, id: Long | number, isDelta: boolean = false) {\n        super(version, data.bodyLength, MessageHeader.DictionaryBatch);\n        this.isDelta = isDelta;\n        this.data = data;\n        this.id = typeof id === 'number' ? id : id.low;\n    }\n    private static atomicDictionaryId = 0;\n    public static getId() { return DictionaryBatch.atomicDictionaryId++; }\n    public get nodes(): FieldMetadata[] { return this.data.nodes; }\n    public get buffers(): BufferMetadata[] { return this.data.buffers; }\n}\n\nexport class BufferMetadata {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class FieldMetadata {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/metadata.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Struct } from './type';\nimport { flatbuffers } from 'flatbuffers';\nimport { View, Vector, StructVector } from './vector';\nimport { Data, NestedData } from './data';\n\nimport Long = flatbuffers.Long;\n\nexport class RecordBatch extends StructVector {\n    public static from(vectors: Vector[]) {\n        return new RecordBatch(Schema.from(vectors),\n            Math.max(...vectors.map((v) => v.length)),\n            vectors\n        );\n    }\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    constructor(schema: Schema, data: Data<Struct>, view: View<Struct>);\n    constructor(schema: Schema, numRows: Long | number, cols: Data<any> | Vector[]);\n    constructor(...args: any[]) {\n        if (typeof args[1] !== 'number') {\n            const data = args[1] as Data<Struct>;\n            super(data, args[2]);\n            this.schema = args[0];\n            this.length = data.length;\n        } else {\n            const [schema, numRows, cols] = args;\n            const childData: Data<any>[] = new Array(cols.length);\n            for (let index = -1, length = cols.length; ++index < length;) {\n                const col: Data<any> | Vector = cols[index];\n                childData[index] = col instanceof Vector ? col.data : col;\n            }\n            super(new NestedData(new Struct(schema.fields), numRows, null, childData));\n            this.schema = schema;\n            this.length = numRows;\n        }\n        this.numCols = this.schema.fields.length;\n    }\n    public clone<R extends Struct>(data: Data<R>, view: View<R> = this.view.clone(data)): this {\n        return new RecordBatch(this.schema, data as any, view) as any;\n    }\n    public select(...columnNames: string[]) {\n        const fields = this.schema.fields;\n        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new RecordBatch(\n            this.schema.select(...columnNames), this.length,\n            this.childData.filter((_, i) => namesToKeep[fields[i].name])\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// recordbatch.ts","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslib/tslib.es6.js\n// module id = 8\n// module chunks = 0","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n/// @endcond\n/// @}\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/flatbuffers/js/flatbuffers.mjs\n// module id = 9\n// module chunks = 0","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { Type, DataType, Dictionary } from './type';\nimport { Utf8, Binary, Decimal, FixedSizeBinary } from './type';\nimport { List, FixedSizeList, Union, Map_, Struct } from './type';\nimport { Bool, Null, Int, Float, Date_, Time, Interval, Timestamp } from './type';\n\nexport interface VisitorNode {\n    acceptTypeVisitor(visitor: TypeVisitor): any;\n    acceptVectorVisitor(visitor: VectorVisitor): any;\n    // acceptMessageVisitor(visitor: MessageVisitor): any;\n}\n\nexport abstract class TypeVisitor {\n    visit(node: Partial<VisitorNode>): any {\n        return node.acceptTypeVisitor!(this);\n    }\n    visitMany(nodes: Partial<VisitorNode>[]): any[] {\n        return nodes.map((node) => this.visit(node));\n    }\n    abstract visitNull(node: Null): any;\n    abstract visitBool(node: Bool): any;\n    abstract visitInt(node: Int): any;\n    abstract visitFloat(node: Float): any;\n    abstract visitUtf8(node: Utf8): any;\n    abstract visitBinary(node: Binary): any;\n    abstract visitFixedSizeBinary(node: FixedSizeBinary): any;\n    abstract visitDate(node: Date_): any;\n    abstract visitTimestamp(node: Timestamp): any;\n    abstract visitTime(node: Time): any;\n    abstract visitDecimal(node: Decimal): any;\n    abstract visitList(node: List): any;\n    abstract visitStruct(node: Struct): any;\n    abstract visitUnion(node: Union<any>): any;\n    abstract visitDictionary(node: Dictionary): any;\n    abstract visitInterval(node: Interval): any;\n    abstract visitFixedSizeList(node: FixedSizeList): any;\n    abstract visitMap(node: Map_): any;\n\n    static visitTypeInline<T extends DataType>(visitor: TypeVisitor, type: T): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull(type            as any as Null);\n            case Type.Int:             return visitor.visitInt(type             as any as Int);\n            case Type.Float:           return visitor.visitFloat(type           as any as Float);\n            case Type.Binary:          return visitor.visitBinary(type          as any as Binary);\n            case Type.Utf8:            return visitor.visitUtf8(type            as any as Utf8);\n            case Type.Bool:            return visitor.visitBool(type            as any as Bool);\n            case Type.Decimal:         return visitor.visitDecimal(type         as any as Decimal);\n            case Type.Date:            return visitor.visitDate(type            as any as Date_);\n            case Type.Time:            return visitor.visitTime(type            as any as Time);\n            case Type.Timestamp:       return visitor.visitTimestamp(type       as any as Timestamp);\n            case Type.Interval:        return visitor.visitInterval(type        as any as Interval);\n            case Type.List:            return visitor.visitList(type            as any as List<T>);\n            case Type.Struct:          return visitor.visitStruct(type          as any as Struct);\n            case Type.Union:           return visitor.visitUnion(type           as any as Union);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary(type as any as FixedSizeBinary);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList(type   as any as FixedSizeList);\n            case Type.Map:             return visitor.visitMap(type             as any as Map_);\n            case Type.Dictionary:      return visitor.visitDictionary(type      as any as Dictionary);\n            default: return null;\n        }\n    }\n}\n\nexport abstract class VectorVisitor {\n    visit(node: Partial<VisitorNode>): any {\n        return node.acceptVectorVisitor!(this);\n    }\n    visitMany(nodes: Partial<VisitorNode>[]): any[] {\n        return nodes.map((node) => this.visit(node));\n    }\n    abstract visitNullVector(node: Vector<Null>): any;\n    abstract visitBoolVector(node: Vector<Bool>): any;\n    abstract visitIntVector(node: Vector<Int>): any;\n    abstract visitFloatVector(node: Vector<Float>): any;\n    abstract visitUtf8Vector(node: Vector<Utf8>): any;\n    abstract visitBinaryVector(node: Vector<Binary>): any;\n    abstract visitFixedSizeBinaryVector(node: Vector<FixedSizeBinary>): any;\n    abstract visitDateVector(node: Vector<Date_>): any;\n    abstract visitTimestampVector(node: Vector<Timestamp>): any;\n    abstract visitTimeVector(node: Vector<Time>): any;\n    abstract visitDecimalVector(node: Vector<Decimal>): any;\n    abstract visitListVector(node: Vector<List>): any;\n    abstract visitStructVector(node: Vector<Struct>): any;\n    abstract visitUnionVector(node: Vector<Union<any>>): any;\n    abstract visitDictionaryVector(node: Vector<Dictionary>): any;\n    abstract visitIntervalVector(node: Vector<Interval>): any;\n    abstract visitFixedSizeListVector(node: Vector<FixedSizeList>): any;\n    abstract visitMapVector(node: Vector<Map_>): any;\n\n    static visitTypeInline<T extends DataType>(visitor: VectorVisitor, type: T, vector: Vector<T>): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNullVector(vector            as any as Vector<Null>);\n            case Type.Int:             return visitor.visitIntVector(vector             as any as Vector<Int>);\n            case Type.Float:           return visitor.visitFloatVector(vector           as any as Vector<Float>);\n            case Type.Binary:          return visitor.visitBinaryVector(vector          as any as Vector<Binary>);\n            case Type.Utf8:            return visitor.visitUtf8Vector(vector            as any as Vector<Utf8>);\n            case Type.Bool:            return visitor.visitBoolVector(vector            as any as Vector<Bool>);\n            case Type.Decimal:         return visitor.visitDecimalVector(vector         as any as Vector<Decimal>);\n            case Type.Date:            return visitor.visitDateVector(vector            as any as Vector<Date_>);\n            case Type.Time:            return visitor.visitTimeVector(vector            as any as Vector<Time>);\n            case Type.Timestamp:       return visitor.visitTimestampVector(vector       as any as Vector<Timestamp>);\n            case Type.Interval:        return visitor.visitIntervalVector(vector        as any as Vector<Interval>);\n            case Type.List:            return visitor.visitListVector(vector            as any as Vector<List<T>>);\n            case Type.Struct:          return visitor.visitStructVector(vector          as any as Vector<Struct>);\n            case Type.Union:           return visitor.visitUnionVector(vector           as any as Vector<Union>);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinaryVector(vector as any as Vector<FixedSizeBinary>);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeListVector(vector   as any as Vector<FixedSizeList>);\n            case Type.Map:             return visitor.visitMapVector(vector             as any as Vector<Map_>);\n            case Type.Dictionary:      return visitor.visitDictionaryVector(vector      as any as Vector<Dictionary>);\n            default: return null;\n        }\n    }\n}\n\n// import { Footer, Block } from './ipc/message';\n// import { Field, FieldNode, Buffer } from './ipc/message';\n// import { Message, Schema, RecordBatch, DictionaryBatch } from './ipc/message';\n\n// export abstract class MessageVisitor {\n//     visit(node: VisitorNode): any {\n//         return node.acceptMessageVisitor(this);\n//     }\n//     visitMany(nodes: VisitorNode[]): any[] {\n//         return nodes.map((node) => this.visit(node));\n//     }\n//     abstract visitFooter(node: Footer): any;\n//     abstract visitBlock(node: Block): any;\n//     abstract visitMessage(node: Message): any;\n//     abstract visitSchema(node: Schema): any;\n//     abstract visitField<T extends DataType>(node: Field<T>): any;\n//     abstract visitBuffer(node: Buffer): any;\n//     abstract visitFieldNode(node: FieldNode): any;\n//     abstract visitDataType<T extends Type>(node: DataType<T>): any;\n//     abstract visitDictionary(node: Dictionary): any;\n//     abstract visitRecordBatch(node: RecordBatch): any;\n//     abstract visitDictionaryBatch(node: DictionaryBatch): any;\n// }\n\n\n\n// WEBPACK FOOTER //\n// visitor.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ChunkedData } from '../data';\nimport { View, Vector, NestedVector } from '../vector';\nimport { DataType, TypedArray, IterableArrayLike } from '../type';\n\nexport class ChunkedView<T extends DataType> implements View<T> {\n    public chunkVectors: Vector<T>[];\n    public chunkOffsets: Uint32Array;\n    protected _children: Vector<any>[];\n    constructor(data: ChunkedData<T>) {\n        this.chunkVectors = data.chunkVectors;\n        this.chunkOffsets = data.chunkOffsets;\n    }\n    public clone(data: ChunkedData<T>): this {\n        return new ChunkedView(data) as this;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const vector of this.chunkVectors) {\n            yield* vector;\n        }\n    }\n    public getChildAt<R extends DataType = DataType>(index: number) {\n        return (this._children || (this._children = []))[index] || (\n               this._children[index] = Vector.concat<R>(\n                   ...(<any> this.chunkVectors as NestedVector<any>[]).map((v) => v.getChildAt(index))));\n    }\n    public isValid(index: number): boolean {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].isValid(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return false;\n    }\n    public get(index: number): T['TValue'] | null {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].get(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return null;\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].set(index - pos, value);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        const chunks = this.chunkVectors;\n        const numChunks = chunks.length;\n        if (numChunks === 1) {\n            return chunks[0].toArray();\n        }\n        let sources = new Array<any>(numChunks);\n        let sourcesLen = 0, ArrayType: any = Array;\n        for (let index = -1; ++index < numChunks;) {\n            let source = chunks[index].toArray();\n            sourcesLen += (sources[index] = source).length;\n            if (ArrayType !== source.constructor) {\n                ArrayType = source.constructor;\n            }\n        }\n        let target = new ArrayType(sourcesLen);\n        let setValues = ArrayType === Array ? arraySet : typedArraySet as any;\n        for (let index = -1, offset = 0; ++index < numChunks;) {\n            offset = setValues(sources[index], target, offset);\n        }\n        return target;\n    }\n}\n\nfunction typedArraySet(source: TypedArray, target: TypedArray, index: number) {\n    return target.set(source, index) || index + source.length;\n}\n\nfunction arraySet(source: any[], target: any[], index: number) {\n    let dstIdx = index - 1, srcIdx = -1, srcLen = source.length;\n    while (++srcIdx < srcLen) {\n        target[++dstIdx] = source[srcIdx];\n    }\n    return dstIdx;\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/chunked.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { RecordBatch } from '../../recordbatch';\nimport { TypeVisitor } from '../../visitor';\nimport { FlatType, NestedType, ListType } from '../../type';\nimport { Message, FieldMetadata, BufferMetadata } from '../metadata';\nimport { FlatData, ListData, NestedData, SingleNestedData, DenseUnionData, SparseUnionData, BoolData, FlatListData, DictionaryData } from '../../data';\nimport {\n    Schema, Field,\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n    UnionMode, SparseUnion, DenseUnion, FlatListType, DataType,\n} from '../../type';\n\nexport function* readRecordBatches(messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport async function* readRecordBatchesAsync(messages: AsyncIterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for await (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport function* readRecordBatch(schema: Schema, message: Message, loader: TypeDataLoader) {\n    if (Message.isRecordBatch(message)) {\n        yield new RecordBatch(schema, message.length, loader.visitFields(schema.fields));\n    } else if (Message.isDictionaryBatch(message)) {\n        const dictionaryId = message.id;\n        const dictionaries = loader.dictionaries;\n        const dictionaryField = schema.dictionaries.get(dictionaryId)!;\n        const dictionaryDataType = (dictionaryField.type as Dictionary).dictionary;\n        let dictionaryVector = Vector.create(loader.visit(dictionaryDataType));\n        if (message.isDelta && dictionaries.has(dictionaryId)) {\n            dictionaryVector = dictionaries.get(dictionaryId)!.concat(dictionaryVector);\n        }\n        dictionaries.set(dictionaryId, dictionaryVector);\n    }\n}\n\nexport abstract class TypeDataLoader extends TypeVisitor {\n\n    public dictionaries: Map<number, Vector>;\n    protected nodes: Iterator<FieldMetadata>;\n    protected buffers: Iterator<BufferMetadata>;\n\n    constructor(nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super();\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visitFields(fields: Field[]) { return fields.map((field) => this.visit(field.type)); }\n\n    public visitNull           (type: Null)            { return this.visitNullType(type);   }\n    public visitInt            (type: Int)             { return this.visitFlatType(type);   }\n    public visitFloat          (type: Float)           { return this.visitFlatType(type);   }\n    public visitBinary         (type: Binary)          { return this.visitFlatList(type);   }\n    public visitUtf8           (type: Utf8)            { return this.visitFlatList(type);   }\n    public visitBool           (type: Bool)            { return this.visitBoolType(type);   }\n    public visitDecimal        (type: Decimal)         { return this.visitFlatType(type);   }\n    public visitDate           (type: Date_)           { return this.visitFlatType(type);   }\n    public visitTime           (type: Time)            { return this.visitFlatType(type);   }\n    public visitTimestamp      (type: Timestamp)       { return this.visitFlatType(type);   }\n    public visitInterval       (type: Interval)        { return this.visitFlatType(type);   }\n    public visitList           (type: List)            { return this.visitListType(type);   }\n    public visitStruct         (type: Struct)          { return this.visitNestedType(type); }\n    public visitUnion          (type: Union)           { return this.visitUnionType(type);  }\n    public visitFixedSizeBinary(type: FixedSizeBinary) { return this.visitFlatType(type);   }\n    public visitFixedSizeList  (type: FixedSizeList)   { return this.visitFixedSizeListType(type); }\n    public visitMap            (type: Map_)            { return this.visitNestedType(type); }\n    public visitDictionary     (type: Dictionary)      {\n        return new DictionaryData(type, this.dictionaries.get(type.id)!, this.visit(type.indicies));\n    }\n    protected getFieldMetadata() { return this.nodes.next().value; }\n    protected getBufferMetadata() { return this.buffers.next().value; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.getBufferMetadata()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected abstract readData<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected visitNullType(type: Null, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<any>(type, length, this.readNullBitmap(type, nullCount), new Uint8Array(0), 0, nullCount);\n    }\n    protected visitFlatType<T extends FlatType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<T>(type, length, this.readNullBitmap(type, nullCount), this.readData(type), 0, nullCount);\n    }\n    protected visitBoolType(type: Bool, { length, nullCount }: FieldMetadata = this.getFieldMetadata(), data?: Uint8Array) {\n        return new BoolData(type, length, this.readNullBitmap(type, nullCount), data || this.readData(type), 0, nullCount);\n    }\n    protected visitFlatList<T extends FlatListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type), 0, nullCount);\n    }\n    protected visitListType<T extends ListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new ListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitFixedSizeListType<T extends FixedSizeList>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new SingleNestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitNestedType<T extends NestedType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new NestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visitFields(type.children), 0, nullCount);\n    }\n    protected visitUnionType(type: DenseUnion | SparseUnion, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return type.mode === UnionMode.Sparse ?\n            new SparseUnionData(type as SparseUnion, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount) :\n            new DenseUnionData(type as DenseUnion, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/vector.ts","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// fb/Message.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike, DataType, Dictionary, Int } from '../type';\n\nexport class DictionaryView<T extends DataType> implements View<T> {\n    public indicies: Vector<Int>;\n    public dictionary: Vector<T>;\n    constructor(dictionary: Vector<T>, indicies: Vector<Int>) {\n        this.indicies = indicies;\n        this.dictionary = dictionary;\n    }\n    public clone(data: Data<Dictionary<T>>): this {\n        return new DictionaryView(data.dictionary, this.indicies.clone(data.indicies)) as this;\n    }\n    public isValid(index: number): boolean {\n        return this.indicies.isValid(index);\n    }\n    public get(index: number): T['TValue'] {\n        return this.dictionary.get(this.indicies.get(index));\n    }\n    public set(index: number, value: T['TValue']): void {\n        this.dictionary.set(this.indicies.get(index), value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const values = this.dictionary, indicies = this.indicies;\n        for (let index = -1, n = indicies.length; ++index < n;) {\n            yield values.get(indicies.get(index));\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/dictionary.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector, createVector } from '../vector';\nimport { TextEncoder, TextDecoder } from 'text-encoding-utf-8';\nimport { List, Binary, Utf8, FixedSizeList, FlatListType } from '../type';\nimport { ListType, DataType, IterableArrayLike } from '../type';\n\nexport const encodeUtf8 = ((encoder) =>\n    encoder.encode.bind(encoder) as (input?: string) => Uint8Array\n)(new TextEncoder('utf-8'));\n\nexport const decodeUtf8 = ((decoder) =>\n    decoder.decode.bind(decoder) as (input?: ArrayBufferLike | ArrayBufferView) => string\n)(new TextDecoder('utf-8'));\n\nexport abstract class ListViewBase<T extends (ListType | FlatListType | FixedSizeList)> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    public valueOffsets?: Int32Array;\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public get(index: number): T['TValue'] {\n        return this.getList(this.values, index, this.valueOffsets);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setList(this.values, index, value, this.valueOffsets);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getList, length = this.length;\n        const values = this.values, valueOffsets = this.valueOffsets;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, valueOffsets);\n        }\n    }\n    protected abstract getList(values: T['TArray'], index: number, valueOffsets?: Int32Array): T['TValue'];\n    protected abstract setList(values: T['TArray'], index: number, value: T['TValue'], valueOffsets?: Int32Array): void;\n}\n\nexport abstract class VariableListViewBase<T extends (ListType | FlatListType)> extends ListViewBase<T> {\n    constructor(data: Data<T>) {\n        super(data);\n        this.length = data.length;\n        this.valueOffsets = data.valueOffsets;\n    }\n}\n\nexport class ListView<T extends DataType> extends VariableListViewBase<List<T>> {\n    constructor(data: Data<List<T>>) {\n        super(data);\n        this.values = createVector(data.values);\n    }\n    protected getList(values: Vector<T>, index: number, valueOffsets: Int32Array) {\n        return values.slice(valueOffsets[index], valueOffsets[index + 1]) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>, valueOffsets: Int32Array): void {\n        let idx = -1;\n        let offset = valueOffsets[index];\n        let end = Math.min(value.length, valueOffsets[index + 1] - offset);\n        while (offset < end) {\n            values.set(offset++, value.get(++idx));\n        }\n    }\n}\n\nexport class FixedSizeListView<T extends DataType> extends ListViewBase<FixedSizeList<T>> {\n    public size: number;\n    constructor(data: Data<FixedSizeList<T>>) {\n        super(data);\n        this.size = data.type.listSize;\n        this.values = createVector(data.values);\n    }\n    protected getList(values: Vector<T>, index: number) {\n        const size = this.size;\n        return values.slice(index *= size, index + size) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>): void {\n        let size = this.size;\n        for (let idx = -1, offset = index * size; ++idx < size;) {\n            values.set(offset + idx, value.get(++idx));\n        }\n    }\n}\n\nexport class BinaryView extends VariableListViewBase<Binary> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return values.subarray(valueOffsets[index], valueOffsets[index + 1]);\n    }\n    protected setList(values: Uint8Array, index: number, value: Uint8Array, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(value.subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\nexport class Utf8View extends VariableListViewBase<Utf8> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return decodeUtf8(values.subarray(valueOffsets[index], valueOffsets[index + 1]));\n    }\n    protected setList(values: Uint8Array, index: number, value: string, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(encodeUtf8(value).subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/list.ts","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexports.TextEncoder = TextEncoder;\nexports.TextDecoder = TextDecoder;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/text-encoding-utf-8/lib/encoding.lib.js\n// module id = 16\n// module chunks = 0","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike } from '../type';\nimport { DataType, NestedType, DenseUnion, SparseUnion, Struct, Map_ } from '../type';\n\nexport abstract class NestedView<T extends NestedType> implements View<T> {\n    public length: number;\n    public numChildren: number;\n    public childData: Data<any>[];\n    protected _childColumns: Vector<any>[];\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        this.length = data.length;\n        this.childData = data.childData;\n        this.numChildren = data.childData.length;\n        this._childColumns = children || new Array(this.numChildren);\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, this._childColumns) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public toJSON(): any { return this.toArray(); }\n    public toString() {\n        return [...this].map((x) => stringify(x)).join(', ');\n    }\n    public get(index: number): T['TValue'] {\n        return this.getNested(this, index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setNested(this, index, value);\n    }\n    protected abstract getNested(self: NestedView<T>, index: number): T['TValue'];\n    protected abstract setNested(self: NestedView<T>, index: number, value: T['TValue']): void;\n    public getChildAt<R extends DataType = DataType>(index: number) {\n        return this._childColumns[index] || (\n               this._childColumns[index] = Vector.create<R>(this.childData[index]));\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getNested;\n        const length = this.length;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index);\n        }\n    }\n}\n\nexport class UnionView<T extends (DenseUnion | SparseUnion) = SparseUnion> extends NestedView<T> {\n    // @ts-ignore\n    public typeIds: Int8Array;\n    // @ts-ignore\n    public valueOffsets?: Int32Array;\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        super(data, children);\n        this.length = data.length;\n        this.typeIds = data.typeIds;\n    }\n    protected getNested(self: UnionView<T>, index: number): T['TValue'] {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n    }\n    protected setNested(self: UnionView<T>, index: number, value: T['TValue']): void {\n        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets);\n    }\n    protected getChildValue(self: NestedView<T>, index: number, typeIds: Int8Array, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.get(index) : null;\n    }\n    protected setChildValue(self: NestedView<T>, index: number, value: T['TValue'], typeIds: Int8Array, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.set(index, value) : null;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const length = this.length;\n        const get = this.getChildValue;\n        const { typeIds, valueOffsets } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index, typeIds, valueOffsets);\n        }\n    }\n}\n\nexport class DenseUnionView extends UnionView<DenseUnion> {\n    public valueOffsets: Int32Array;\n    constructor(data: Data<DenseUnion>, children?: Vector<any>[]) {\n        super(data, children);\n        this.valueOffsets = data.valueOffsets;\n    }\n    protected getNested(self: DenseUnionView, index: number): any | null {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n    }\n    protected getChildValue(self: NestedView<DenseUnion>, index: number, typeIds: Int8Array, valueOffsets: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.get(valueOffsets[index]) : null;\n    }\n    protected setChildValue(self: NestedView<DenseUnion>, index: number, value: any, typeIds: Int8Array, valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.set(valueOffsets[index], value) : null;\n    }\n}\n\nexport class StructView extends NestedView<Struct> {\n    protected getNested(self: StructView, index: number) {\n        return new RowView(self as any, self._childColumns, index);\n    }\n    protected setNested(self: StructView, index: number, value: any): void {\n        let idx = -1, len = self.numChildren;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            while (++idx < len) { self.getChildAt(idx).set(index, value[idx]); }\n        } else {\n            while (++idx < len) { self.getChildAt(idx).set(index, value.get(idx)); }\n        }\n    }\n}\n\nexport class MapView extends NestedView<Map_> {\n    public typeIds: { [k: string]: number };\n    constructor(data: Data<Map_>, children?: Vector<any>[]) {\n        super(data, children);\n        this.typeIds = data.type.children.reduce((xs, x, i) =>\n            (xs[x.name] = i) && xs || xs, Object.create(null));\n    }\n    protected getNested(self: MapView, index: number) {\n        return new MapRowView(self as any, self._childColumns, index);\n    }\n    protected setNested(self: MapView, index: number, value: { [k: string]: any }): void {\n        const typeIds = self.typeIds as any;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            for (const key in typeIds) { self.getChildAt(typeIds[key]).set(index, value[key]); }\n        } else {\n            for (const key in typeIds) { self.getChildAt(typeIds[key]).set(index, value.get(key as any)); }\n        }\n    }\n}\n\nexport class RowView extends UnionView<SparseUnion> {\n    protected rowIndex: number;\n    constructor(data: Data<SparseUnion> & NestedView<any>, children?: Vector<any>[], rowIndex?: number) {\n        super(data, children);\n        this.rowIndex = rowIndex || 0;\n        this.length = data.numChildren;\n    }\n    public clone(data: Data<SparseUnion> & NestedView<any>): this {\n        return new (<any> this.constructor)(data, this._childColumns, this.rowIndex) as this;\n    }\n    protected getChildValue(self: RowView, index: number, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: RowView, index: number, value: any, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\nexport class MapRowView extends RowView {\n    // @ts-ignore\n    public typeIds: any;\n    public toJSON() {\n        const get = this.getChildValue;\n        const result = {} as { [k: string]: any };\n        const typeIds = this.typeIds as { [k: string]: number };\n        for (const name in typeIds) {\n            result[name] = get(this, name, typeIds, null);\n        }\n        return result;\n    }\n    protected getChildValue(self: MapRowView, key: any, typeIds: any, _valueOffsets: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: MapRowView, key: any, value: any, typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\nfunction stringify(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : Array.isArray(x) ? JSON.stringify(x) : ArrayBuffer.isView(x) ? `[${x}]` : `${x}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// vector/nested.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst carryBit16 = 1 << 16;\n\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    high(): number { return this.buffer[1]; }\n    low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// util/int.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Vector, DictionaryVector } from './vector';\n\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    lteq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    gteq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n}\n\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n        this.vector = batch.getChildAt(this.colidx);\n        return this.vector.get.bind(this.vector);\n    }\n\n    emitString() { return `cols[${this.colidx}].get(idx)`; }\n}\n\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(expr: Predicate): Predicate { return new And(this, expr); }\n    or(expr: Predicate): Predicate { return new Or(this, expr); }\n    ands(): Predicate[] { return [this]; }\n}\n\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindColLit(batch, this.right as Col, this.left);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n}\n\nabstract class CombinationPredicate extends Predicate {\n    constructor(public readonly left: Predicate, public readonly right: Predicate) {\n        super();\n    }\n}\n\nclass And extends CombinationPredicate {\n    bind(batch: RecordBatch) {\n        const left = this.left.bind(batch);\n        const right = this.right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left(idx, batch) && right(idx, batch);\n    }\n    ands(): Predicate[] { return this.left.ands().concat(this.right.ands()); }\n}\n\nclass Or extends CombinationPredicate {\n    bind(batch: RecordBatch) {\n        const left = this.left.bind(batch);\n        const right = this.right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left(idx, batch) || right(idx, batch);\n    }\n}\n\nexport class Equals extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            // Assume that there is only one key with the value `lit.v`\n            // TODO: add lazily-computed reverse dictionary lookups, associated\n            // with col.vector.data so that we only have to do this once per\n            // dictionary\n            let key = -1;\n            let dict = col.vector;\n            let data = dict.dictionary!;\n            for (let len = data.length; ++key < len;) {\n                if (data.get(key) === lit.v) {\n                    break;\n                }\n            }\n\n            if (key == data.length) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return dict.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n}\n\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n}\n\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n}\n\nexport function lit(n: number): Value<any> { return new Literal(n); }\nexport function col(n: string): Col<any> { return new Col(n); }\n\n\n\n// WEBPACK FOOTER //\n// predicate.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { readJSON } from './json';\nimport { RecordBatch } from '../../recordbatch';\nimport { readBuffers, readBuffersAsync } from './binary';\nimport { readRecordBatches, readRecordBatchesAsync, TypeDataLoader } from './vector';\nimport { Schema } from '../../type';\nimport { Message } from '../metadata';\n\nexport { readJSON, RecordBatch };\nexport { readBuffers, readBuffersAsync };\nexport { readRecordBatches, readRecordBatchesAsync };\n\nexport function* read(sources: Iterable<Uint8Array | Buffer | string> | object | string) {\n    let input: any = sources;\n    let messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>;\n    if (typeof input === 'string') {\n        try { input = JSON.parse(input); }\n        catch (e) { input = sources; }\n    }\n    if (!input || typeof input !== 'object') {\n        messages = (typeof input === 'string') ? readBuffers([input]) : [];\n    } else {\n        messages = (typeof input[Symbol.iterator] === 'function') ? readBuffers(input) : readJSON(input);\n    }\n    yield* readRecordBatches(messages);\n}\n\nexport async function* readAsync(sources: AsyncIterable<Uint8Array | Buffer | string>) {\n    for await (let recordBatch of readRecordBatchesAsync(readBuffersAsync(sources))) {\n        yield recordBatch;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/arrow.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type_ from './type';\nimport * as data_ from './data';\nimport * as vector_ from './vector';\nimport * as util_ from './util/int';\nimport * as visitor_ from './visitor';\nimport * as view_ from './vector/view';\nimport { Vector } from './vector';\nimport { RecordBatch } from './recordbatch';\nimport { Schema, Field, Type } from './type';\nimport { Table, CountByResult } from './table';\nimport { lit, col, Col, Value } from './predicate';\nimport { read, readAsync } from './ipc/reader/arrow';\n\nexport import View = vector_.View;\nexport import VectorLike = vector_.VectorLike;\nexport import TypedArray = type_.TypedArray;\nexport import IntBitWidth = type_.IntBitWidth;\nexport import TimeBitWidth = type_.TimeBitWidth;\nexport import TypedArrayConstructor = type_.TypedArrayConstructor;\n\nexport { read, readAsync };\nexport { Table, CountByResult };\nexport { lit, col, Col, Value };\nexport { Field, Schema, RecordBatch, Vector, Type };\n\nexport namespace util {\n    export import Uint64 = util_.Uint64;\n    export import Int64 = util_.Int64;\n    export import Int128 = util_.Int128;\n}\n\nexport namespace data {\n    export import BaseData = data_.BaseData;\n    export import FlatData = data_.FlatData;\n    export import BoolData = data_.BoolData;\n    export import FlatListData = data_.FlatListData;\n    export import DictionaryData = data_.DictionaryData;\n    export import NestedData = data_.NestedData;\n    export import ListData = data_.ListData;\n    export import UnionData = data_.UnionData;\n    export import SparseUnionData = data_.SparseUnionData;\n    export import DenseUnionData = data_.DenseUnionData;\n    export import ChunkedData = data_.ChunkedData;\n}\n\nexport namespace type {\n    export import Schema = type_.Schema;\n    export import Field = type_.Field;\n    export import Null = type_.Null;\n    export import Int = type_.Int;\n    export import Int8 = type_.Int8;\n    export import Int16 = type_.Int16;\n    export import Int32 = type_.Int32;\n    export import Int64 = type_.Int64;\n    export import Uint8 = type_.Uint8;\n    export import Uint16 = type_.Uint16;\n    export import Uint32 = type_.Uint32;\n    export import Uint64 = type_.Uint64;\n    export import Float = type_.Float;\n    export import Float16 = type_.Float16;\n    export import Float32 = type_.Float32;\n    export import Float64 = type_.Float64;\n    export import Binary = type_.Binary;\n    export import Utf8 = type_.Utf8;\n    export import Bool = type_.Bool;\n    export import Decimal = type_.Decimal;\n    export import Date_ = type_.Date_;\n    export import Time = type_.Time;\n    export import Timestamp = type_.Timestamp;\n    export import Interval = type_.Interval;\n    export import List = type_.List;\n    export import Struct = type_.Struct;\n    export import Union = type_.Union;\n    export import DenseUnion = type_.DenseUnion;\n    export import SparseUnion = type_.SparseUnion;\n    export import FixedSizeBinary = type_.FixedSizeBinary;\n    export import FixedSizeList = type_.FixedSizeList;\n    export import Map_ = type_.Map_;\n    export import Dictionary = type_.Dictionary;\n}\n\nexport namespace vector {\n    export import Vector = vector_.Vector;\n    export import NullVector = vector_.NullVector;\n    export import BoolVector = vector_.BoolVector;\n    export import IntVector = vector_.IntVector;\n    export import FloatVector = vector_.FloatVector;\n    export import DateVector = vector_.DateVector;\n    export import DecimalVector = vector_.DecimalVector;\n    export import TimeVector = vector_.TimeVector;\n    export import TimestampVector = vector_.TimestampVector;\n    export import IntervalVector = vector_.IntervalVector;\n    export import BinaryVector = vector_.BinaryVector;\n    export import FixedSizeBinaryVector = vector_.FixedSizeBinaryVector;\n    export import Utf8Vector = vector_.Utf8Vector;\n    export import ListVector = vector_.ListVector;\n    export import FixedSizeListVector = vector_.FixedSizeListVector;\n    export import MapVector = vector_.MapVector;\n    export import StructVector = vector_.StructVector;\n    export import UnionVector = vector_.UnionVector;\n    export import DictionaryVector = vector_.DictionaryVector;\n}\n\nexport namespace visitor {\n    export import TypeVisitor = visitor_.TypeVisitor;\n    export import VectorVisitor = visitor_.VectorVisitor;\n}\n\nexport namespace view {\n    export import ChunkedView = view_.ChunkedView;\n    export import DictionaryView = view_.DictionaryView;\n    export import ListView = view_.ListView;\n    export import FixedSizeListView = view_.FixedSizeListView;\n    export import BinaryView = view_.BinaryView;\n    export import Utf8View = view_.Utf8View;\n    export import UnionView = view_.UnionView;\n    export import DenseUnionView = view_.DenseUnionView;\n    export import NestedView = view_.NestedView;\n    export import StructView = view_.StructView;\n    export import MapView = view_.MapView;\n    export import FlatView = view_.FlatView;\n    export import NullView = view_.NullView;\n    export import BoolView = view_.BoolView;\n    export import ValidityView = view_.ValidityView;\n    export import PrimitiveView = view_.PrimitiveView;\n    export import FixedSizeView = view_.FixedSizeView;\n    export import Float16View = view_.Float16View;\n    export import DateDayView = view_.DateDayView;\n    export import DateMillisecondView = view_.DateMillisecondView;\n    export import TimestampDayView = view_.TimestampDayView;\n    export import TimestampSecondView = view_.TimestampSecondView;\n    export import TimestampMillisecondView = view_.TimestampMillisecondView;\n    export import TimestampMicrosecondView = view_.TimestampMicrosecondView;\n    export import TimestampNanosecondView = view_.TimestampNanosecondView;\n    export import IntervalYearMonthView = view_.IntervalYearMonthView;\n    export import IntervalYearView = view_.IntervalYearView;\n    export import IntervalMonthView = view_.IntervalMonthView;\n}\n\n/* These exports are needed for the closure and uglify umd targets */\ntry {\n    let Arrow: any = eval('exports');\n    if (Arrow && typeof Arrow === 'object') {\n        // string indexers tell closure and uglify not to rename these properties\n        Arrow['data'] = data;\n        Arrow['type'] = type;\n        Arrow['util'] = util;\n        Arrow['view'] = view;\n        Arrow['vector'] = vector;\n        Arrow['visitor'] = visitor;\n\n        Arrow['read'] = read;\n        Arrow['readAsync'] = readAsync;\n\n        Arrow['Type'] = Type;\n        Arrow['Field'] = Field;\n        Arrow['Schema'] = Schema;\n        Arrow['Vector'] = Vector;\n        Arrow['RecordBatch'] = RecordBatch;\n\n        Arrow['Table'] = Table;\n        Arrow['CountByResult'] = CountByResult;\n        Arrow['Value'] = Value;\n        Arrow['lit'] = lit;\n        Arrow['col'] = col;\n        Arrow['Col'] = Col;\n    }\n} catch (e) { /* not the UMD bundle */ }\n/* end umd exports */\n\n// closure compiler erases static properties/methods:\n// https://github.com/google/closure-compiler/issues/1776\n// set them via string indexers to save them from the mangler\nSchema['from'] = Schema.from;\nTable['from'] = Table.from;\nTable['fromAsync'] = Table.fromAsync;\nTable['empty'] = Table.empty;\nVector['create'] = Vector.create;\nRecordBatch['from'] = RecordBatch.from;\n\nutil_.Uint64['add'] = util_.Uint64.add;\nutil_.Uint64['multiply'] = util_.Uint64.multiply;\n\nutil_.Int64['add'] = util_.Int64.add;\nutil_.Int64['multiply'] = util_.Int64.multiply;\nutil_.Int64['fromString'] = util_.Int64.fromString;\n\nutil_.Int128['add'] = util_.Int128.add;\nutil_.Int128['multiply'] = util_.Int128.multiply;\nutil_.Int128['fromString'] = util_.Int128.fromString;\n\ndata_.ChunkedData['computeOffsets'] = data_.ChunkedData.computeOffsets;\n\n(type_.Type as any)['NONE'] = type_.Type.NONE;\n(type_.Type as any)['Null'] = type_.Type.Null;\n(type_.Type as any)['Int'] = type_.Type.Int;\n(type_.Type as any)['Float'] = type_.Type.Float;\n(type_.Type as any)['Binary'] = type_.Type.Binary;\n(type_.Type as any)['Utf8'] = type_.Type.Utf8;\n(type_.Type as any)['Bool'] = type_.Type.Bool;\n(type_.Type as any)['Decimal'] = type_.Type.Decimal;\n(type_.Type as any)['Date'] = type_.Type.Date;\n(type_.Type as any)['Time'] = type_.Type.Time;\n(type_.Type as any)['Timestamp'] = type_.Type.Timestamp;\n(type_.Type as any)['Interval'] = type_.Type.Interval;\n(type_.Type as any)['List'] = type_.Type.List;\n(type_.Type as any)['Struct'] = type_.Type.Struct;\n(type_.Type as any)['Union'] = type_.Type.Union;\n(type_.Type as any)['FixedSizeBinary'] = type_.Type.FixedSizeBinary;\n(type_.Type as any)['FixedSizeList'] = type_.Type.FixedSizeList;\n(type_.Type as any)['Map'] = type_.Type.Map;\n(type_.Type as any)['Dictionary'] = type_.Type.Dictionary;\n(type_.Type as any)['DenseUnion'] = type_.Type.DenseUnion;\n(type_.Type as any)['SparseUnion'] = type_.Type.SparseUnion;\n\ntype_.DataType['isNull'] = type_.DataType.isNull;\ntype_.DataType['isInt'] = type_.DataType.isInt;\ntype_.DataType['isFloat'] = type_.DataType.isFloat;\ntype_.DataType['isBinary'] = type_.DataType.isBinary;\ntype_.DataType['isUtf8'] = type_.DataType.isUtf8;\ntype_.DataType['isBool'] = type_.DataType.isBool;\ntype_.DataType['isDecimal'] = type_.DataType.isDecimal;\ntype_.DataType['isDate'] = type_.DataType.isDate;\ntype_.DataType['isTime'] = type_.DataType.isTime;\ntype_.DataType['isTimestamp'] = type_.DataType.isTimestamp;\ntype_.DataType['isInterval'] = type_.DataType.isInterval;\ntype_.DataType['isList'] = type_.DataType.isList;\ntype_.DataType['isStruct'] = type_.DataType.isStruct;\ntype_.DataType['isUnion'] = type_.DataType.isUnion;\ntype_.DataType['isDenseUnion'] = type_.DataType.isDenseUnion;\ntype_.DataType['isSparseUnion'] = type_.DataType.isSparseUnion;\ntype_.DataType['isFixedSizeBinary'] = type_.DataType.isFixedSizeBinary;\ntype_.DataType['isFixedSizeList'] = type_.DataType.isFixedSizeList;\ntype_.DataType['isMap'] = type_.DataType.isMap;\ntype_.DataType['isDictionary'] = type_.DataType.isDictionary;\n\nvector_.BoolVector['from'] = vector_.BoolVector.from;\nvector_.IntVector['from'] = vector_.IntVector.from;\nvector_.FloatVector['from'] = vector_.FloatVector.from;\n\nvisitor_.TypeVisitor['visitTypeInline'] = visitor_.TypeVisitor.visitTypeInline;\nvisitor_.VectorVisitor['visitTypeInline'] = visitor_.VectorVisitor.visitTypeInline;\n\n\n// WEBPACK FOOTER //\n// Arrow.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Col, Predicate } from './predicate';\nimport { Schema, Field, Struct } from './type';\nimport { read, readAsync } from './ipc/reader/arrow';\nimport { isPromise, isAsyncIterable } from './util/compat';\nimport { Vector, DictionaryVector, IntVector, StructVector } from './vector';\nimport { ChunkedView } from './vector/chunked';\n\nexport type NextFunc = (idx: number, cols: RecordBatch) => void;\n\nexport interface DataFrame {\n    filter(predicate: Predicate): DataFrame;\n    scan(next: NextFunc): void;\n    count(): number;\n    countBy(col: (Col|string)): CountByResult;\n}\n\nexport class Table implements DataFrame {\n    static empty() { return new Table(new Schema([]), []); }\n    static from(sources?: Iterable<Uint8Array | Buffer | string> | object | string) {\n        if (sources) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for (let recordBatch of read(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        }\n        return Table.empty();\n    }\n    static async fromAsync(sources?: AsyncIterable<Uint8Array | Buffer | string>) {\n        if (isAsyncIterable(sources)) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for await (let recordBatch of readAsync(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        } else if (isPromise(sources)) {\n            return Table.from(await sources);\n        } else if (sources) {\n            return Table.from(sources);\n        }\n        return Table.empty();\n    }\n    static fromStruct(struct: StructVector) {\n        const schema = new Schema(struct.type.children);\n        const chunks = struct.view instanceof ChunkedView ?\n                            (struct.view.chunkVectors as StructVector[]) :\n                            [struct];\n        return new Table(chunks.map((chunk) => new RecordBatch(schema, chunk.length, chunk.view.childData)));\n    }\n\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    // List of inner RecordBatches\n    public readonly batches: RecordBatch[];\n    // List of inner Vectors, possibly spanning batches\n    protected readonly _columns: Vector<any>[] = [];\n    // Union of all inner RecordBatches into one RecordBatch, possibly chunked.\n    // If the Table has just one inner RecordBatch, this points to that.\n    // If the Table has multiple inner RecordBatches, then this is a Chunked view\n    // over the list of RecordBatches. This allows us to delegate the responsibility\n    // of indexing, iterating, slicing, and visiting to the Nested/Chunked Data/Views.\n    public readonly batchesUnion: RecordBatch;\n\n    constructor(batches: RecordBatch[]);\n    constructor(...batches: RecordBatch[]);\n    constructor(schema: Schema, batches: RecordBatch[]);\n    constructor(schema: Schema, ...batches: RecordBatch[]);\n    constructor(...args: any[]) {\n        let schema: Schema;\n        let batches: RecordBatch[];\n        if (args[0] instanceof Schema) {\n            schema = args[0];\n            batches = Array.isArray(args[1][0]) ? args[1][0] : args[1];\n        } else if (args[0] instanceof RecordBatch) {\n            schema = (batches = args)[0].schema;\n        } else {\n            schema = (batches = args[0])[0].schema;\n        }\n        this.schema = schema;\n        this.batches = batches;\n        this.batchesUnion = batches.reduce((union, batch) => union.concat(batch));\n        this.length = this.batchesUnion.length;\n        this.numCols = this.batchesUnion.numCols;\n    }\n    public get(index: number): Struct['TValue'] {\n        return this.batchesUnion.get(index)!;\n    }\n    public getColumn(name: string) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    public getColumnAt(index: number) {\n        return this._columns[index] || (\n               this._columns[index] = this.batchesUnion.getChildAt(index));\n    }\n    public getColumnIndex(name: string) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    public [Symbol.iterator](): IterableIterator<Struct['TValue']> {\n        return this.batchesUnion[Symbol.iterator]() as any;\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(this.batches, predicate);\n    }\n    public scan(next: NextFunc) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public count(): number { return this.length; }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indicies;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n    public select(...columnNames: string[]) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n    public toString(separator?: string) {\n        let str = '';\n        for (const row of this.rowsToString(separator)) {\n            str += row + '\\n';\n        }\n        return str;\n    }\n    public rowsToString(separator = ' | '): TableToStringIterator {\n        return new TableToStringIterator(tableRowsToString(this, separator));\n    }\n}\n\nclass FilteredDataFrame implements DataFrame {\n    private predicate: Predicate;\n    private batches: RecordBatch[];\n    constructor (batches: RecordBatch[], predicate: Predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    public scan(next: NextFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(\n            this.batches,\n            this.predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indicies;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult extends Table implements DataFrame {\n    constructor(values: Vector, counts: IntVector<any>) {\n        super(\n            new RecordBatch(new Schema([\n                new Field('values', values.type),\n                new Field('counts', counts.type)\n            ]),\n            counts.length, [values, counts]\n        ));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0);\n        const counts = this.getColumnAt(1);\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nexport class TableToStringIterator implements IterableIterator<string> {\n    constructor(private iterator: IterableIterator<string>) {}\n    [Symbol.iterator]() { return this.iterator; }\n    next(value?: any) { return this.iterator.next(value); }\n    throw(error?: any) { return this.iterator.throw && this.iterator.throw(error) || { done: true, value: '' }; }\n    return(value?: any) { return this.iterator.return && this.iterator.return(value) || { done: true, value: '' }; }\n    pipe(stream: NodeJS.WritableStream) {\n        let res: IteratorResult<string>;\n        let write = () => {\n            if (stream.writable) {\n                do {\n                    if ((res = this.next()).done) { break; }\n                } while (stream.write(res.value + '\\n', 'utf8'));\n            }\n            if (!res || !res.done) {\n                stream.once('drain', write);\n            } else if (!(stream as any).isTTY) {\n                stream.end('\\n');\n            }\n        };\n        write();\n    }\n}\n\nfunction* tableRowsToString(table: Table, separator = ' | ') {\n    const fields = table.schema.fields;\n    const header = ['row_id', ...fields.map((f) => `${f}`)].map(stringify);\n    const maxColumnWidths = header.map(x => x.length);\n    // Pass one to convert to strings and count max column widths\n    for (let i = -1, n = table.length - 1; ++i < n;) {\n        let val, row = [i, ...table.get(i)];\n        for (let j = -1, k = row.length; ++j < k; ) {\n            val = stringify(row[j]);\n            maxColumnWidths[j] = Math.max(maxColumnWidths[j], val.length);\n        }\n    }\n    yield header.map((x, j) => leftPad(x, ' ', maxColumnWidths[j])).join(separator);\n    for (let i = -1, n = table.length; ++i < n;) {\n        yield [i, ...table.get(i)]\n            .map((x) => stringify(x))\n            .map((x, j) => leftPad(x, ' ', maxColumnWidths[j]))\n            .join(separator);\n    }\n}\n\nfunction leftPad(str: string, fill: string, n: number) {\n    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n}\n\nfunction stringify(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n\n\n\n// WEBPACK FOOTER //\n// table.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { packBools } from '../../util/bit';\nimport * as IntUtil from '../../util/int';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport Long = flatbuffers.Long;\n\nexport function* readJSON(json: any) {\n    const schema = schemaFromJSON(json['schema']);\n    const dictionaries = new Map<number, Vector>();\n    for (const batch of (json['dictionaries'] || [])) {\n        const message = dictionaryBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['data']['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n    for (const batch of (json['batches'] || [])) {\n        const message = recordBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\nfunction flattenDataSources(xs: any[]): any[][] {\n    return (xs || []).reduce<any[][]>((buffers, column: any) => [\n        ...buffers,\n        ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n        ...(column['OFFSET'] && [column['OFFSET']] || []),\n        ...(column['DATA'] && [column['DATA']] || []),\n        ...flattenDataSources(column['children'])\n    ], [] as any[][]);\n}\n\nconst utf8Encoder = new TextEncoder('utf-8');\n\nexport class JSONDataLoader extends TypeDataLoader {\n    constructor(private sources: any[][], nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.getBufferMetadata()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int32Array(this.sources[offset]);\n    }\n    protected readTypeIds<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int8Array(this.sources[offset]);\n    }\n    protected readData<T extends DataType>(type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type) === true) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type) === true) {\n            return new Uint8Array(decimalDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) === true) {\n            return new Uint8Array(binaryDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBool(type) === true) {\n            return new Uint8Array(packBools(sources[offset] as number[]).buffer);\n        } else if (DataType.isUtf8(type) === true) {\n            return utf8Encoder.encode((sources[offset] as string[]).join(''));\n        } else {\n            return toTypedArray(type.ArrayType, sources[offset].map((x) => +x)) as any;\n        }\n    }\n}\n\nfunction int64DataFromJSON(values: string[]) {\n    const data = new Uint32Array(values.length * 2);\n    for (let i = -1, n = values.length; ++i < n;) {\n        // Force all values (even numbers) to be parsed as strings since\n        // pulling out high and low bits seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        IntUtil.Int64.fromString(values[i].toString(), new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n    return data.buffer;\n}\n\nfunction decimalDataFromJSON(values: string[]) {\n    const data = new Uint32Array(values.length * 4);\n    for (let i = -1, n = values.length; ++i < n;) {\n        IntUtil.Int128.fromString(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n    }\n    return data.buffer;\n}\n\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data.buffer;\n}\n\nimport * as Schema_ from '../../fb/Schema';\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nimport TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport { toTypedArray } from '../../data';\n\nfunction schemaFromJSON(s: any): Schema {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    return new Schema(\n        fieldsFromJSON(s['fields'], dictionaryFields),\n        customMetadata(s['customMetadata']),\n        MetadataVersion.V4, dictionaryFields\n    );\n}\n\nfunction recordBatchFromJSON(b: any): RecordBatchMetadata {\n    return new RecordBatchMetadata(\n        MetadataVersion.V4,\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\nfunction dictionaryBatchFromJSON(b: any): DictionaryBatch {\n    return new DictionaryBatch(\n        MetadataVersion.V4,\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\nfunction fieldsFromJSON(fs: any[], dictionaryFields: Map<number, Field<Dictionary>> | null): Field[] {\n    return (fs || [])\n        .map((f) => fieldFromJSON(f, dictionaryFields))\n        .filter((f) => f != null) as Field[];\n}\n\nfunction fieldNodesFromJSON(xs: any[]): FieldMetadata[] {\n    return (xs || []).reduce<FieldMetadata[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldMetadata(\n            new Long(column['count'], 0),\n            new Long(nullCountFromJSON(column['VALIDITY']), 0)\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldMetadata[]);\n}\n\nfunction buffersFromJSON(xs: any[], buffers: BufferMetadata[] = []): BufferMetadata[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));\n        column['OFFSET'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));\n        column['DATA'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\nfunction fieldFromJSON(f: any, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f['name'];\n    let field: Field | void;\n    let nullable = f['nullable'];\n    let dataType: DataType<any> | null;\n    let id: number, keysMeta: any, dictMeta: any;\n    let metadata = customMetadata(f['customMetadata']);\n    if (!dictionaryFields || !(dictMeta = f['dictionary'])) {\n        if (dataType = typeFromJSON(f['type'], fieldsFromJSON(f['children'], dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta['id'])\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromJSON(f['type'], fieldsFromJSON(f['children'], null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta['indexType']) ? intFromJSON(keysMeta)! : new Int32(),\n            id, dictMeta['isOrdered']\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(metadata?: any) {\n    return new Map<string, string>(Object.entries(metadata || {}));\n}\n\nconst namesToTypeMap: { [n: string]: Type }  = {\n    'NONE': Type.NONE,\n    'null': Type.Null,\n    'int': Type.Int,\n    'floatingpoint': Type.FloatingPoint,\n    'binary': Type.Binary,\n    'bool': Type.Bool,\n    'utf8': Type.Utf8,\n    'decimal': Type.Decimal,\n    'date': Type.Date,\n    'time': Type.Time,\n    'timestamp': Type.Timestamp,\n    'interval': Type.Interval,\n    'list': Type.List,\n    'struct': Type.Struct_,\n    'union': Type.Union,\n    'fixedsizebinary': Type.FixedSizeBinary,\n    'fixedsizelist': Type.FixedSizeList,\n    'map': Type.Map,\n};\n\nfunction typeFromJSON(t: any, children?: Field[]) {\n    switch (namesToTypeMap[t['name']]) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromJSON(t);\n        case Type.Int: return intFromJSON(t);\n        case Type.FloatingPoint: return floatingPointFromJSON(t);\n        case Type.Binary: return binaryFromJSON(t);\n        case Type.Utf8: return utf8FromJSON(t);\n        case Type.Bool: return boolFromJSON(t);\n        case Type.Decimal: return decimalFromJSON(t);\n        case Type.Date: return dateFromJSON(t);\n        case Type.Time: return timeFromJSON(t);\n        case Type.Timestamp: return timestampFromJSON(t);\n        case Type.Interval: return intervalFromJSON(t);\n        case Type.List: return listFromJSON(t, children || []);\n        case Type.Struct_: return structFromJSON(t, children || []);\n        case Type.Union: return unionFromJSON(t, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromJSON(t);\n        case Type.FixedSizeList: return fixedSizeListFromJSON(t, children || []);\n        case Type.Map: return mapFromJSON(t, children || []);\n    }\n    throw new Error(`Unrecognized type ${t['name']}`);\n}\n\nfunction nullFromJSON           (_type: any)                    { return new Null();                                                                  }\nfunction intFromJSON            (_type: any)                    { switch (_type['bitWidth']) {\n                                                                      case  8: return _type['isSigned'] ? new  Int8() : new  Uint8();\n                                                                      case 16: return _type['isSigned'] ? new Int16() : new Uint16();\n                                                                      case 32: return _type['isSigned'] ? new Int32() : new Uint32();\n                                                                      case 64: return _type['isSigned'] ? new Int64() : new Uint64();\n                                                                  }\n                                                                  return null;                                                                        }\nfunction floatingPointFromJSON  (_type: any)                    { switch (Precision[_type['precision']] as any) {\n                                                                      case Precision.HALF: return new Float16();\n                                                                      case Precision.SINGLE: return new Float32();\n                                                                      case Precision.DOUBLE: return new Float64();\n                                                                  }\n                                                                  return null;                                                                        }\nfunction binaryFromJSON         (_type: any)                    { return new Binary();                                                                }\nfunction utf8FromJSON           (_type: any)                    { return new Utf8();                                                                  }\nfunction boolFromJSON           (_type: any)                    { return new Bool();                                                                  }\nfunction decimalFromJSON        (_type: any)                    { return new Decimal(_type['scale'], _type['precision']);                             }\nfunction dateFromJSON           (_type: any)                    { return new Date_(DateUnit[_type['unit']] as any);                                   }\nfunction timeFromJSON           (_type: any)                    { return new Time(TimeUnit[_type['unit']] as any, _type['bitWidth'] as TimeBitWidth); }\nfunction timestampFromJSON      (_type: any)                    { return new Timestamp(TimeUnit[_type['unit']] as any, _type['timezone']);            }\nfunction intervalFromJSON       (_type: any)                    { return new Interval(IntervalUnit[_type['unit']] as any);                            }\nfunction listFromJSON           (_type: any, children: Field[]) { return new List(children);                                                          }\nfunction structFromJSON         (_type: any, children: Field[]) { return new Struct(children);                                                        }\nfunction unionFromJSON          (_type: any, children: Field[]) { return new Union(_type['mode'], (_type['typeIdsArray'] || []) as Type[], children); }\nfunction fixedSizeBinaryFromJSON(_type: any)                    { return new FixedSizeBinary(_type['byteWidth']);                                     }\nfunction fixedSizeListFromJSON  (_type: any, children: Field[]) { return new FixedSizeList(_type['listSize'], children);                              }\nfunction mapFromJSON            (_type: any, children: Field[]) { return new Map_(_type['keysSorted'], children);                                     }\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/json.ts","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { Message, Footer, FileBlock, RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata, } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\ntype MessageReader = (bb: ByteBuffer) => IterableIterator<RecordBatchMetadata | DictionaryBatch>;\n\nexport function* readBuffers<T extends Uint8Array | Buffer | string>(sources: Iterable<T> | Uint8Array | Buffer | string) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    if (ArrayBuffer.isView(sources) || typeof sources === 'string') {\n        sources = [sources as T];\n    }\n    for (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb))) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator(message.nodes),\n                        arrayIterator(message.buffers),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport async function* readBuffersAsync<T extends Uint8Array | Buffer | string>(sources: AsyncIterable<T>) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    for await (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb))) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator(message.nodes),\n                        arrayIterator(message.buffers),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport class BinaryDataLoader extends TypeDataLoader {\n    private bytes: Uint8Array;\n    private messageOffset: number;\n    constructor(bb: ByteBuffer, nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n        this.bytes = bb.bytes();\n        this.messageOffset = bb.position();\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Uint8Array(this.bytes.buffer, this.bytes.byteOffset + this.messageOffset + offset, length);\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\n\nfunction toByteBuffer(bytes?: Uint8Array | Buffer | string) {\n    let arr: Uint8Array = bytes as any || new Uint8Array(0);\n    if (typeof bytes === 'string') {\n        arr = new Uint8Array(bytes.length);\n        for (let i = -1, n = bytes.length; ++i < n;) {\n            arr[i] = bytes.charCodeAt(i);\n        }\n        return new ByteBuffer(arr);\n    }\n    return new ByteBuffer(arr);\n}\n\nfunction readSchema(bb: ByteBuffer) {\n    let schema: Schema, readMessages, footer: Footer | null;\n    if (footer = readFileSchema(bb)) {\n        schema = footer.schema;\n        readMessages = readFileMessages(footer);\n    } else if (schema = readStreamSchema(bb)!) {\n        readMessages = readStreamMessages;\n    } else {\n        throw new Error('Invalid Arrow buffer');\n    }\n    return { schema, readMessages };\n}\n\nconst PADDING = 4;\nconst MAGIC_STR = 'ARROW1';\nconst MAGIC = new Uint8Array(MAGIC_STR.length);\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\nfunction checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst magicLength = MAGIC.length;\nconst magicAndPadding = magicLength + PADDING;\nconst magicX2AndPadding = magicLength * 2 + PADDING;\n\nfunction readStreamSchema(bb: ByteBuffer) {\n    if (!checkForMagicArrowString(bb.bytes(), 0)) {\n        for (const message of readMessages(bb)) {\n            if (Message.isSchema(message)) {\n                return message as Schema;\n            }\n        }\n    }\n    return null;\n}\n\nfunction* readStreamMessages(bb: ByteBuffer) {\n    for (const message of readMessages(bb)) {\n        if (Message.isRecordBatch(message)) {\n            yield message;\n        } else if (Message.isDictionaryBatch(message)) {\n            yield message;\n        } else {\n            continue;\n        }\n        // position the buffer after the body to read the next message\n        bb.setPosition(bb.position() + message.bodyLength);\n    }\n}\n\nfunction readFileSchema(bb: ByteBuffer) {\n    let fileLength = bb.capacity(), footerLength: number, footerOffset: number;\n    if ((fileLength < magicX2AndPadding /*                     Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        (/*                                                    Invalid footer length  */\n        (footerLength = bb.readInt32(footerOffset = fileLength - magicAndPadding)) < 1 &&\n        (footerLength + magicX2AndPadding > fileLength))) {\n        return null;\n    }\n    bb.setPosition(footerOffset - footerLength);\n    return footerFromByteBuffer(bb);\n}\n\nfunction readFileMessages(footer: Footer) {\n    return function* (bb: ByteBuffer) {\n        for (let i = -1, batches = footer.dictionaryBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset.low);\n            yield readMessage(bb, bb.readInt32(bb.position())) as DictionaryBatch;\n        }\n        for (let i = -1, batches = footer.recordBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset.low);\n            yield readMessage(bb, bb.readInt32(bb.position())) as RecordBatchMetadata;\n        }\n    };\n}\n\nfunction* readMessages(bb: ByteBuffer) {\n    let length: number, message: Schema | RecordBatchMetadata | DictionaryBatch;\n    while (bb.position() < bb.capacity() &&\n          (length = bb.readInt32(bb.position())) > 0) {\n        if (message = readMessage(bb, length)!) {\n            yield message;\n        }\n    }\n}\n\nfunction readMessage(bb: ByteBuffer, length: number) {\n    bb.setPosition(bb.position() + PADDING);\n    const message = messageFromByteBuffer(bb);\n    bb.setPosition(bb.position() + length);\n    return message;\n}\n\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport _Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport _Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport _Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport _List = Schema_.org.apache.arrow.flatbuf.List;\nimport _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport _Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport _Map = Schema_.org.apache.arrow.flatbuf.Map;\n\nfunction footerFromByteBuffer(bb: ByteBuffer) {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    const f = _Footer.getRootAsFooter(bb), s = f.schema()!;\n    return new Footer(\n        dictionaryBatchesFromFooter(f), recordBatchesFromFooter(f),\n        new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), f.version(), dictionaryFields)\n    );\n}\n\nfunction messageFromByteBuffer(bb: ByteBuffer) {\n    const m = _Message.getRootAsMessage(bb)!, type = m.headerType(), version = m.version();\n    switch (type) {\n        case MessageHeader.Schema: return schemaFromMessage(version, m.header(new _Schema())!, new Map());\n        case MessageHeader.RecordBatch: return recordBatchFromMessage(version, m.header(new _RecordBatch())!);\n        case MessageHeader.DictionaryBatch: return dictionaryBatchFromMessage(version, m.header(new _DictionaryBatch())!);\n    }\n    return null;\n    // throw new Error(`Unrecognized Message type '${type}'`);\n}\n\nfunction schemaFromMessage(version: MetadataVersion, s: _Schema, dictionaryFields: Map<number, Field<Dictionary>>) {\n    return new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), version, dictionaryFields);\n}\n\nfunction recordBatchFromMessage(version: MetadataVersion, b: _RecordBatch) {\n    return new RecordBatchMetadata(version, b.length(), fieldNodesFromRecordBatch(b), buffersFromRecordBatch(b, version));\n}\n\nfunction dictionaryBatchFromMessage(version: MetadataVersion, d: _DictionaryBatch) {\n    return new DictionaryBatch(version, recordBatchFromMessage(version, d.data()!), d.id(), d.isDelta());\n}\n\nfunction dictionaryBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.dictionariesLength(); ++i < n;) {\n        if (b = f.dictionaries(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction recordBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.recordBatchesLength(); ++i < n;) {\n        if (b = f.recordBatches(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction fieldsFromSchema(s: _Schema, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = s && s.fieldsLength(); ++i < n;) {\n        if (c = field(s.fields(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldsFromField(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = f && f.childrenLength(); ++i < n;) {\n        if (c = field(f.children(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldNodesFromRecordBatch(b: _RecordBatch) {\n    const fieldNodes = [] as FieldMetadata[];\n    for (let i = -1, n = b.nodesLength(); ++i < n;) {\n        fieldNodes.push(fieldNodeFromRecordBatch(b.nodes(i)!));\n    }\n    return fieldNodes;\n}\n\nfunction buffersFromRecordBatch(b: _RecordBatch, version: MetadataVersion) {\n    const buffers = [] as BufferMetadata[];\n    for (let i = -1, n = b.buffersLength(); ++i < n;) {\n        let buffer = b.buffers(i)!;\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page id field.\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        buffers.push(bufferFromRecordBatch(buffer));\n    }\n    return buffers;\n}\n\nfunction field(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f.name()!;\n    let field: Field | void;\n    let nullable = f.nullable();\n    let metadata = customMetadata(f);\n    let dataType: DataType<any> | null;\n    let keysMeta: _Int | null, id: number;\n    let dictMeta: _DictionaryEncoding | null;\n    if (!dictionaryFields || !(dictMeta = f.dictionary())) {\n        if (dataType = typeFromField(f, fieldsFromField(f, dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta.id().low)\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromField(f, fieldsFromField(f, null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta.indexType()) ? intFromField(keysMeta)! : new Int32(),\n            id, dictMeta.isOrdered()\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\nfunction fieldNodeFromRecordBatch(f: _FieldNode) {\n    return new FieldMetadata(f.length(), f.nullCount());\n}\n\nfunction bufferFromRecordBatch(b: _Buffer) {\n    return new BufferMetadata(b.offset(), b.length());\n}\n\nfunction typeFromField(f: _Field, children?: Field[]): DataType<any> | null {\n    switch (f.typeType()) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromField(f.type(new _Null())!);\n        case Type.Int: return intFromField(f.type(new _Int())!);\n        case Type.FloatingPoint: return floatFromField(f.type(new _FloatingPoint())!);\n        case Type.Binary: return binaryFromField(f.type(new _Binary())!);\n        case Type.Utf8: return utf8FromField(f.type(new _Utf8())!);\n        case Type.Bool: return boolFromField(f.type(new _Bool())!);\n        case Type.Decimal: return decimalFromField(f.type(new _Decimal())!);\n        case Type.Date: return dateFromField(f.type(new _Date())!);\n        case Type.Time: return timeFromField(f.type(new _Time())!);\n        case Type.Timestamp: return timestampFromField(f.type(new _Timestamp())!);\n        case Type.Interval: return intervalFromField(f.type(new _Interval())!);\n        case Type.List: return listFromField(f.type(new _List())!, children || []);\n        case Type.Struct_: return structFromField(f.type(new _Struct())!, children || []);\n        case Type.Union: return unionFromField(f.type(new _Union())!, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromField(f.type(new _FixedSizeBinary())!);\n        case Type.FixedSizeList: return fixedSizeListFromField(f.type(new _FixedSizeList())!, children || []);\n        case Type.Map: return mapFromField(f.type(new _Map())!, children || []);\n    }\n    throw new Error(`Unrecognized type ${f.typeType()}`);\n}\n\nfunction nullFromField           (_type: _Null)                             { return new Null();                                                                }\nfunction intFromField            (_type: _Int)                              { switch (_type.bitWidth()) {\n                                                                                  case  8: return _type.isSigned() ? new  Int8() : new  Uint8();\n                                                                                  case 16: return _type.isSigned() ? new Int16() : new Uint16();\n                                                                                  case 32: return _type.isSigned() ? new Int32() : new Uint32();\n                                                                                  case 64: return _type.isSigned() ? new Int64() : new Uint64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction floatFromField          (_type: _FloatingPoint)                    { switch (_type.precision()) {\n                                                                                  case Precision.HALF: return new Float16();\n                                                                                  case Precision.SINGLE: return new Float32();\n                                                                                  case Precision.DOUBLE: return new Float64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction binaryFromField         (_type: _Binary)                           { return new Binary();                                                              }\nfunction utf8FromField           (_type: _Utf8)                             { return new Utf8();                                                                }\nfunction boolFromField           (_type: _Bool)                             { return new Bool();                                                                }\nfunction decimalFromField        (_type: _Decimal)                          { return new Decimal(_type.scale(), _type.precision());                             }\nfunction dateFromField           (_type: _Date)                             { return new Date_(_type.unit());                                                   }\nfunction timeFromField           (_type: _Time)                             { return new Time(_type.unit(), _type.bitWidth() as TimeBitWidth);                  }\nfunction timestampFromField      (_type: _Timestamp)                        { return new Timestamp(_type.unit(), _type.timezone());                             }\nfunction intervalFromField       (_type: _Interval)                         { return new Interval(_type.unit());                                                }\nfunction listFromField           (_type: _List, children: Field[])          { return new List(children);                                                        }\nfunction structFromField         (_type: _Struct, children: Field[])        { return new Struct(children);                                                      }\nfunction unionFromField          (_type: _Union, children: Field[])         { return new Union(_type.mode(), (_type.typeIdsArray() || []) as Type[], children); }\nfunction fixedSizeBinaryFromField(_type: _FixedSizeBinary)                  { return new FixedSizeBinary(_type.byteWidth());                                    }\nfunction fixedSizeListFromField  (_type: _FixedSizeList, children: Field[]) { return new FixedSizeList(_type.listSize(), children);                             }\nfunction mapFromField            (_type: _Map, children: Field[])           { return new Map_(_type.keysSorted(), children);                                    }\n\n\n\n// WEBPACK FOOTER //\n// ipc/reader/binary.ts","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// fb/File.ts","export interface Subscription {\n    unsubscribe: () => void;\n}\n\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/**\n * @ignore\n */\nexport function isPromise(x: any): x is PromiseLike<any> {\n    return x != null && Object(x) === x && typeof x['then'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isObservable(x: any): x is Observable<any> {\n    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isArrayLike(x: any): x is ArrayLike<any> {\n    return x != null && Object(x) === x && typeof x['length'] === 'number';\n}\n\n/**\n * @ignore\n */\nexport function isIterable(x: any): x is Iterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.iterator] !== 'undefined';\n}\n\n/**\n * @ignore\n */\nexport function isAsyncIterable(x: any): x is AsyncIterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.asyncIterator] !== 'undefined';\n}\n\n\n\n// WEBPACK FOOTER //\n// util/compat.ts"],"sourceRoot":""}