{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","tslib/tslib.es6.js","util/buffer.ts","util/compat.ts","io/interfaces.ts","io/adapters.ts","flatbuffers/js/flatbuffers.mjs","util/utf8.ts","text-encoding-utf-8/lib/encoding.lib.mjs","buffer/index.js","(webpack)/buildin/global.js","base64-js/index.js","ieee754/index.js","isarray/index.js","fb/Schema.ts","fb/Message.ts","vector.ts","enum.ts","fb/File.ts","type.ts","schema.ts","ipc/metadata/file.ts","util/bit.ts","data.ts","util/pretty.ts","vector/row.ts","util/vector.ts","vector/chunked.ts","column.ts","vector/base.ts","vector/binary.ts","vector/bool.ts","util/int.ts","vector/date.ts","vector/decimal.ts","vector/dictionary.ts","vector/fixedsizebinary.ts","vector/fixedsizelist.ts","vector/float.ts","vector/interval.ts","vector/int.ts","vector/list.ts","vector/map.ts","vector/null.ts","vector/struct.ts","vector/timestamp.ts","vector/time.ts","vector/union.ts","vector/utf8.ts","util/bn.ts","visitor.ts","visitor/get.ts","visitor/set.ts","visitor/indexof.ts","visitor/iterator.ts","visitor/toarray.ts","visitor/bytewidth.ts","visitor/vectorctor.ts","vector/index.ts","visitor/typeassembler.ts","ipc/metadata/json.ts","ipc/metadata/message.ts","io/stream.ts","io/file.ts","ipc/message.ts","visitor/vectorassembler.ts","visitor/jsontypeassembler.ts","visitor/jsonvectorassembler.ts","ipc/writer.ts","table.ts","recordbatch.ts","visitor/vectorloader.ts","ipc/reader.ts","compute/predicate.ts","compute/dataframe.ts","Arrow.ts","Arrow.dom.ts","ipc/whatwg/iterable.ts","ipc/whatwg/reader.ts","ipc/whatwg/writer.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","__awaiter","__await","__asyncGenerator","__asyncDelegator","__asyncValues","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__values","iterator","length","v","this","asyncIterator","TypeError","g","q","verb","a","b","push","resume","fulfill","settle","f","shift","memcpy","joinUint8Arrays","toArrayBufferView","toInt8Array","toInt16Array","toInt32Array","toUint8Array","toUint16Array","toUint32Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","toArrayBufferViewIterator","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","compareArrayLike","tslib__WEBPACK_IMPORTED_MODULE_0__","flatbuffers__WEBPACK_IMPORTED_MODULE_1__","_util_utf8__WEBPACK_IMPORTED_MODULE_2__","_compat__WEBPACK_IMPORTED_MODULE_3__","ByteBuffer","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","target","source","targetByteOffset","sourceByteLength","byteLength","targetByteLength","dst","Uint8Array","buffer","byteOffset","src","Math","min","set","chunks","size","sliced","xOffset","yOffset","xLen","yLen","x","y","j","collapseContiguousByteRanges","reduce","offset","index","Infinity","subarray","slice","ArrayBufferViewCtor","input","constructor","BYTES_PER_ELEMENT","bytes","isView","from","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","Uint8ClampedArray","pump","ArrayCtor","wrap","buffers","it","arguments","emit","valueOffsets","isPromise","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isWritableDOMStream","isReadableDOMStream","isWritableNodeStream","isReadableNodeStream","_io_interfaces__WEBPACK_IMPORTED_MODULE_0__","isNumber","isBoolean","isFunction","isObject","ITERATOR_DONE","ArrowJSON","ReadableInterop","AsyncQueue","_adapters__WEBPACK_IMPORTED_MODULE_1__","freeze","[object Object]","_json","schema","batches","dictionaries","_getDOMStream","tee","writable","options","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","super","_values","resolvers","_closedPromise","_closedPromiseResolve","closed","reason","return","_ensureOpen","_error","error","undefined","_","abort","close","_args","Error","_util_buffer__WEBPACK_IMPORTED_MODULE_1__","fromIterable","cmd","threw","bufferLength","byteRange","isNaN","throw","fromAsyncIterable","fromDOMStream","AdaptiveByteReader","releaseLock","fromNodeStream","stream","events","event","err","onEvent","race","map","isFinite","evt","fn","destroy","cleanup","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","read","readInto","handler","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","position","prep","additional_bytes","align_size","capacity","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","Buffer","decodeUtf8","encodeUtf8","_buffer__WEBPACK_IMPORTED_MODULE_0__","text_encoding_utf_8__WEBPACK_IMPORTED_MODULE_1__","_Buffer","useNativeEncoders","TextDecoder","TextEncoder","decoder","decode","toString","encoder","encode","inRange","max","ToDictionary","end_of_stream","Stream","tokens","endOfStream","prepend","token","Array","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","bite","code_point","UTF8Encoder","count","temp","input_stream","code_points","indexOf","cp","codePointsToString","opt_string","string","u","stringToCodePoints","global","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","array","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","isBuffer","checked","copy","val","type","data","fromObject","assertSize","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","buf","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","concat","list","pos","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","match","join","thisStart","thisEnd","thisCopy","targetCopy","includes","toJSON","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","Function","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","Schema_org","arrow","apache","org","Message_org","Vector","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","VectorType","Endianness","Null","__init","builder","Struct_","List","FixedSizeList","listSize","Map","keysSorted","Union","Sparse","typeIdsOffset","numElems","Int","bitWidth","isSigned","FloatingPoint","HALF","precision","Utf8","Binary","FixedSizeBinary","byteWidth","Bool","Decimal","scale","Date","MILLISECOND","unit","Time","Timestamp","SECOND","optionalEncoding","timezoneOffset","Interval","YEAR_MONTH","VectorLayout","OFFSET","KeyValue","keyOffset","valueOffset","DictionaryEncoding","id","indexTypeOffset","isOrdered","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","layoutOffset","customMetadataOffset","Schema","Little","endianness","fieldsOffset","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","DictionaryBatch","dataOffset","isDelta","Message","V1","version","headerType","headerOffset","bodyLength","File_org","ArrowType","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","metaDataLength","type_DataType","_children","typeId","Float","Struct","Dictionary","children","proto","ArrayType","type_Null","type_Int_","_isSigned","_bitWidth","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","type_Float","_precision","SINGLE","DOUBLE","type_Float16","type_Float32","type_Float64","type_Binary","type_Utf8","type_Bool","type_Decimal","_scale","type_Date_","_unit","type_DateDay","DAY","type_DateMillisecond","type_Time_","type_TimeSecond","type_TimeMillisecond","type_TimeMicrosecond","MICROSECOND","type_TimeNanosecond","NANOSECOND","type_Timestamp_","_timezone","timezone","type_TimestampSecond","type_TimestampMillisecond","type_TimestampMicrosecond","type_TimestampNanosecond","type_Interval_","type_IntervalDayTime","DAY_TIME","type_IntervalYearMonth","type_List","child","valueType","valueField","type_Struct","type_Union_","_mode","_typeIds","_typeIdToChildIndex","typeIdToChildIndex","idx","typeIds","type_DenseUnion","Dense","type_SparseUnion","type_FixedSizeBinary","_byteWidth","type_FixedSizeList","_listSize","type_Map_","_keysSorted","getId","atomicDictionaryId","type_Dictionary","dictionary","indices","dictionaryVector","_indices","_dictionary","_isOrdered","_dictionaryVector","_id","fields","metadata","dictionaryFields","_fields","_metadata","generateDictionaryMap","isDictionary","has","_dictionaries","_dictionaryFields","vectors","names","schema_Field","columnNames","xs","filter","_name","_type","_nullable","_Block","_Footer","file_Footer_","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","util_buffer","footer","getRootAsFooter","OffHeapFooter","startRecordBatchesVector","numRecordBatches","reverse","forEach","rb","FileBlock","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","finishFooterBuffer","endFooter","block","getRecordBatch","getDictionaryBatch","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","iterateBits","values","begin","context","byteIndex","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","cnt","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","kUnknownNullCount","data_Data","nullCount","childData","_nullCount","stride","nullBitmap","childStride","_sliceBuffers","clone","_sliceChildren","TYPE","DATA","valueOffsetsOrChildren","undf","valueToString","toPrimitive","JSON","stringify","columnDescriptor","lengthDescriptor","rowIndexDescriptor","rowParentDescriptor","row","parent","rowIndex","row_Row","fieldsAreEnumerable","columnIndex","_bindGetter","schemaOrFields","keys","colIndex","getChildAt","bound","isStruct","getOwnPropertyNames","props","prop","clampIndex","adjust","clampRange","createElementComparator","search","valueOfSearch","valueOf","fns","C","chunked_Chunked","offsets","calculateOffsets","_chunks","_chunkOffsets","_length","_numChildren","flatten","numChildren","chunk","others","_sliceInternal","columns","vector","vec","mid","isValidInternal","getInternal","element","self","indexOfInternal","toArray","arraySet","typedSet","isValid","chunkIndex","fromIndex","slices","chunkOffsets","chunkLength","chunkOffset","to","column_Column","_field","SingleChunkColumn","column","_chunk","base_BaseVector","_bindDataAccessors","VectorName","new","isConcatSpreadable","binary_BinaryVector","bool_BoolVector","carryBit16","intAsHex","kInt32DecimalDigits","kPowersOfTen","BaseInt64","L","R","product","lessThan","int_Uint64","_times","_plus","out_buffer","posn","group","multiple","times","plus","left","right","int_Int64","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","date_DateVector","convertArray","DateDayVector","DateMillisecondVector","decimal_DecimalVector","dictionary_DictionaryVector","fixedsizebinary_FixedSizeBinaryVector","fixedsizelist_FixedSizeListVector","float_FloatVector","Float16Vector","Float32Vector","Float64Vector","interval_IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","int_IntVector","is64","Int8Vector","Int16Vector","Int32Vector","Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","list_ListVector","map_MapVector","rowProxy","_rowProxy","null_NullVector","struct_StructVector","timestamp_TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","time_TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","union_UnionVector","DenseUnionVector","SparseUnionVector","utf8_Utf8Vector","BigNumNMixin","bignumToString","bignumToNumber","hint","BigInt","SignedBigNumNMixin","assign","signed","UnsignedBigNumNMixin","bn_BN","unsigned","Ctor","bn","int64","words","base32","checks","Visitor","nodes","args","node","visit","getVisitFn","throwIfNotFound","visitor","dtype","inferDType","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","_node","get_GetVisitor","epochMillisecondsLongToMs","epochMillisecondsToDate","epochMs","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getBigInts","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getNested","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","getValue","getKey","instance","set_SetVisitor","setEpochMsToMillisecondsLong","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setNested","kid","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","setValue","set_instance","indexof_IndexOfVisitor","indexOfValue","searchElement","indexOfNull","indexOfUnion","indexof_instance","iterator_IteratorVisitor","vectorIterator","getFn","nullByte","nullBit","nullableIterator","iterator_instance","toarray_ToArrayVisitor","arrayOfVector","toarray_instance","variableWidthColumnErrorMessage","bytewidth_instance","____","visitFields","vectorctor_instance","partial0","partial2","getByteWidth","wrapNullableSet","T","VectorCtor","partial1","partialType0","typeassembler_Long","typeassembler_Null","typeassembler_Binary","typeassembler_Bool","typeassembler_Utf8","typeassembler_Decimal","typeassembler_Date","typeassembler_List","typeassembler_Struct","typeassembler_FixedSizeBinary","typeassembler_FixedSizeList","typeassembler_Map_","typeassembler_instance","startNull","endNull","startInt","addBitWidth","addIsSigned","endInt","startFloatingPoint","addPrecision","endFloatingPoint","startBinary","endBinary","startBool","endBool","startUtf8","endUtf8","startDecimal","addScale","endDecimal","startDate","addUnit","endDate","startTime","endTime","startTimestamp","addTimezone","endTimestamp","startInterval","endInterval","startList","endList","startStruct_","endStruct_","startTypeIdsVector","createTypeIdsVector","startUnion","addMode","addTypeIds","endUnion","indexType","startDictionaryEncoding","addId","addIsOrdered","addIndexType","endDictionaryEncoding","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startFixedSizeList","addListSize","endFixedSizeList","startMap","addKeysSorted","endMap","recordBatchFromJSON","message_RecordBatch","fieldNodesFromJSON","fieldNodes","nullCountFromJSON","buffersFromJSON","BufferRegion","fieldChildrenFromJSON","Boolean","fromJSON","validity","customMetadataFromJSON","entries","indexTypeFromJSON","typeFromJSON","message_Long","message_Builder","message_ByteBuffer","message_Type","_Field","_Schema","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","message_Message","header","_version","_headerType","body","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","startMessage","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","_nodes","_buffers","_isDelta","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","k","startKeyValue","addKey","addValue","endKeyValue","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","addCustomMetadata","endField","dictType","dictMeta","dictField","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","startSchema","addFields","addEndianness","platformIsLittleEndian","Big","endSchema","_schema","fieldsLength","decodeSchemaFields","schemaFieldsFromJSON","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","batch","nodesLength","decodeFieldNodes","bufferRegions","buffersLength","decodeBuffers","dictionaryBatch","startDictionaryBatch","addIsDelta","addData","endDictionaryBatch","createFieldNode","setInt16","stream_AsyncByteQueue","interfaces","sync","tslib_es6","_c","_b","stream_ByteStream","stream_ByteStreamSource","adapters","peek","stream_AsyncByteStream","stream_AsyncByteStreamSource","compat","cancel","file_RandomAccessFile","readAt","getInt32","file_AsyncRandomAccessFile","file","_handle","_pending","stat","bytesRead","ipc_message_ByteBuffer","invalidMessageType","nullMessage","invalidMessageMetadata","expected","invalidMessageBodyLength","message_MessageReader","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","message_AsyncMessageReader","message_JSONMessageReader","_body","_batchIndex","_dictionaryIndex","numBatches","flattenDataSources","MAGIC","MAGIC_STR","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","vectorassembler_VectorAssembler","_bufferRegions","recordbatch_RecordBatch","visitMany","addBuffer","_nullV","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childIndex","childLength","jsontypeassembler_JSONTypeAssembler","jsonvectorassembler_JSONVectorAssembler","VALIDITY","bigNumsToStrings","binaryToString","octets","toUpperCase","writer_RecordBatchWriter","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_autoDestroy","autoDestroy","writableStrategy","readableStrategy","writeAll","writer","batches_1","batches_1_1","writeAllAsync","table_Table","reset","sink","objectMode","_writeFooter","_writeSchema","_writeRecordBatch","flatbufferSize","nPaddingBytes","_write","of","_writePadding","_writeMessage","_writeDictionaries","records","assemble","_writeBodyBuffers","padding","_writeDictionaryBatch","RecordBatchStreamWriter","writer_RecordBatchFileWriter","_writeMagic","writer_RecordBatchJSONWriter","fieldToJSON","dictionaryBatchToJSON","recordBatchToJSON","assembler","empty","reader_RecordBatchReader","isSync","open","opening","reader_1_1","reader_1","struct","numCols","getColumnAt","getColumnIndex","findIndex","select","numRows","childNames","structData","vectorloader_VectorLoader","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","readTypeIds","nextBufferRange","vectorloader_JSONVectorLoader","sources","isTimestamp","isInt","isTime","isDate","isDecimal","isBinary","isFixedSizeBinary","joined","binaryDataFromJSON","isBool","isUtf8","impl","_impl","isFile","isAsync","isStream","readRecordBatch","reader_RecordBatchStreamReader","reader_RecordBatchJSONReaderImpl","fromArrowJSON","AsyncRecordBatchFileReader","reader_AsyncRecordBatchFileReaderImpl","AsyncRecordBatchStreamReader","reader_AsyncRecordBatchStreamReaderImpl","fromFileHandle","RecordBatchFileReader","reader_RecordBatchFileReaderImpl","fromAsyncByteStream","reader_RecordBatchStreamReaderImpl","fromByteStream","readAllSync","readAllAsync","reader_RecordBatchReaderImpl","_recordBatchIndex","_loadVectors","types","_reader","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","_readFooter","_readDictionaryBatch","seek","rest","_super","Value","Literal","predicate_Equals","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","every","some","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","cols","func","CustomPredicate","bind_","predicate_lit","predicate_col","and","or","custom","countBy","dataframe_DataFrame","scan","predicate","dataframe_FilteredDataFrame","batchIndex","count_by","countByteLength","ceil","counts","dataframe_CountByResult","_predicate","util","int_namespaceObject","bit_namespaceObject","util_vector_namespaceObject","predicate_namespaceObject","bm","hwm","highWaterMark","ReadableStream","controller","desiredSize","enqueue","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable","WritableStream"],"mappings":"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extC,UAAUilC,UAA4BwI,GACrDD,GAAextC,UAAUklC,UAA4BuI,GACrDD,GAAextC,UAAUmlC,SAA4BsI,GACrDD,GAAextC,UAAUolC,UAA4BqI,GACrDD,GAAextC,UAAUqlC,WAA4BoI,GACrDD,GAAextC,UAAUslC,WAA4BmI,GACrDD,GAAextC,UAAUulC,WAA4BkI,GACrDD,GAAextC,UAAUwlC,WAA4BiI,GACrDD,GAAextC,UAAUylC,YAA4BgI,GACrDD,GAAextC,UAAU0lC,YAA4B+H,GACrDD,GAAextC,UAAU2lC,YAA4B8H,GACrDD,GAAextC,UAAU4lC,WAA4B6H,GACrDD,GAAextC,UAAU8lC,aAA4B2H,GACrDD,GAAextC,UAAUgmC,aAA4ByH,GACrDD,GAAextC,UAAUkmC,aAA4BuH,GACrDD,GAAextC,UAAUmmC,UAA4BsH,GACrDD,GAAextC,UAAUomC,YAA4BqH,GACrDD,GAAextC,UAAUqmC,qBAA4BoH,GACrDD,GAAextC,UAAUsmC,UAA4BmH,GACrDD,GAAextC,UAAUwmC,aAA4BiH,GACrDD,GAAextC,UAAU0mC,qBAA4B+G,GACrDD,GAAextC,UAAU2mC,eAA4B8G,GACrDD,GAAextC,UAAU6mC,qBAA4B4G,GACrDD,GAAextC,UAAU+mC,0BAA4B0G,GACrDD,GAAextC,UAAUinC,0BAA4BwG,GACrDD,GAAextC,UAAUmnC,yBAA4BsG,GACrDD,GAAextC,UAAUonC,UAA4BqG,GACrDD,GAAextC,UAAUsnC,gBAA4BmG,GACrDD,GAAextC,UAAUwnC,qBAA4BiG,GACrDD,GAAextC,UAAU0nC,qBAA4B+F,GACrDD,GAAextC,UAAU4nC,oBAA4B6F,GACrDD,GAAextC,UAAU6nC,aAA4B4F,GACrDD,GAAextC,UAAU8nC,UAA4B2F,GACrDD,GAAextC,UAAU+nC,YAA4B0F,GACrDD,GAAextC,UAAUgoC,WAA4ByF,GACrDD,GAAextC,UAAUkoC,gBAA4BuF,GACrDD,GAAextC,UAAUooC,iBAA4BqF,GACrDD,GAAextC,UAAUqoC,gBAA4BoF,GACrDD,GAAextC,UAAUsoC,cAA4BmF,GACrDD,GAAextC,UAAUwoC,qBAA4BiF,GACrDD,GAAextC,UAAU0oC,uBAA4B+E,GACrDD,GAAextC,UAAU2oC,mBAA4B8E,GACrDD,GAAextC,UAAU4oC,SAA4B6E,GAE9C,MAAMC,GAAW,IAAIF,GCvHP3V,GAAM,CAAClxB,EAAWC,IAAcD,EAAIC,EACpC+mC,GAAmCvxB,6DAA6EA,IAgC9H,MAAMwxB,GAAW,IAvBjB,cAA+BrJ,GAC3Br6B,UAAsB2jC,GAA0B,OAAO,EACvD3jC,SAAsBkS,GAA0B,OAAOA,EAAKkN,SAAW,EACvEpf,WAAsBkS,GAA0B,OAAOA,EAAK8R,UAAU1mB,kBACtE0C,YAAsBkS,GAA0B,MAAUhQ,MAAMuhC,GAAgCvxB,IAChGlS,UAAsBkS,GAA0B,MAAUhQ,MAAMuhC,GAAgCvxB,IAChGlS,UAAsB2jC,GAA0B,OAAO,EAAI,EAC3D3jC,aAAsB2jC,GAA0B,OAAO,GACvD3jC,UAAsBkS,GAA0B,OAAyB,GAAjBA,EAAKgO,KAAO,GACpElgB,UAAsBkS,GAA0B,OAAOA,EAAKkN,SAAW,EACvEpf,eAAsBkS,GAA0B,OAAOA,EAAKgO,OAASjC,EAASoC,OAAS,EAAI,EAC3FrgB,cAAsBkS,GAA0B,OAAyB,GAAjBA,EAAKgO,KAAO,GACpElgB,UAAsBkS,GAA0B,MAAUhQ,MAAMuhC,GAAgCvxB,IAChGlS,YAAsBkS,GAA0B,OAAOta,KAAKgsC,YAAY1xB,EAAK4R,UAAUjnB,OAAO8wB,GAAK,GACnG3tB,WAAsBkS,GAA0B,OAAOta,KAAKgsC,YAAY1xB,EAAK4R,UAAUjnB,OAAO8wB,GAAK,GACnG3tB,qBAAsBkS,GAA0B,OAAOA,EAAK0N,UAC5D5f,mBAAsBkS,GAA0B,OAAOA,EAAK0M,SAAWhnB,KAAKgsC,YAAY1xB,EAAK4R,UAAUjnB,OAAO8wB,GAAK,GACnH3tB,SAAsBkS,GAA0B,OAAOta,KAAKgsC,YAAY1xB,EAAK4R,UAAUjnB,OAAO8wB,GAAK,GACnG3tB,gBAAsBkS,GAA0B,OAAOta,KAAK6iC,MAAMvoB,EAAKuW,SACvEzoB,YAAsBgpB,GAA0B,OAAQA,GAAU,IAAI1lB,IAAK+G,GAAUzS,KAAK6iC,MAAMpwB,EAAM6H,OACtGlS,YAAsBE,GAA0B,OAAOtI,KAAKgsC,YAAY1jC,EAAO8oB,QAAQnsB,OAAO8wB,GAAK,KCkCvG,MAAMkW,GAAW,IA9CjB,cAAmCxJ,GAC/Br6B,YAA+B,OAAOo4B,GACtCp4B,YAA+B,OAAOk0B,GACtCl0B,WAA+B,OAAOs3B,GACtCt3B,YAA+B,OAAOw3B,GACtCx3B,aAA+B,OAAOy3B,GACtCz3B,aAA+B,OAAO03B,GACtC13B,aAA+B,OAAO23B,GACtC33B,aAA+B,OAAO43B,GACtC53B,cAA+B,OAAO63B,GACtC73B,cAA+B,OAAO83B,GACtC93B,cAA+B,OAAO+3B,GACtC/3B,aAA+B,OAAO+2B,GACtC/2B,eAA+B,OAAOg3B,GACtCh3B,eAA+B,OAAOi3B,GACtCj3B,eAA+B,OAAOk3B,GACtCl3B,YAA+B,OAAOm5B,GACtCn5B,cAA+B,OAAOi0B,GACtCj0B,uBAA+B,OAAO62B,GACtC72B,YAA+B,OAAOu2B,GACtCv2B,eAA+B,OAAOy2B,GACtCz2B,uBAA+B,OAAO02B,GACtC12B,iBAA+B,OAAOs4B,GACtCt4B,uBAA+B,OAAOu4B,GACtCv4B,4BAA+B,OAAOw4B,GACtCx4B,4BAA+B,OAAOy4B,GACtCz4B,2BAA+B,OAAO04B,GACtC14B,YAA+B,OAAO24B,GACtC34B,kBAA+B,OAAO44B,GACtC54B,uBAA+B,OAAO64B,GACtC74B,uBAA+B,OAAO84B,GACtC94B,sBAA+B,OAAO+4B,GACtC/4B,eAA+B,OAAO22B,GACtC32B,YAA+B,OAAOg4B,GACtCh4B,cAA+B,OAAOq4B,GACtCr4B,aAA+B,OAAOg5B,GACtCh5B,kBAA+B,OAAOi5B,GACtCj5B,mBAA+B,OAAOk5B,GACtCl5B,kBAA+B,OAAO42B,GACtC52B,gBAA+B,OAAOm3B,GACtCn3B,uBAA+B,OAAOo3B,GACtCp3B,yBAA+B,OAAOq3B,GACtCr3B,qBAA+B,OAAO82B,GACtC92B,WAA+B,OAAOi4B,KCkDjD,SAAS6L,GAAYrJ,GACjB,OAAO,WAAoB,OAAOA,EAAM7iC,OAc5C,SAASmsC,GAAYtJ,GACjB,OAAO,SAAkBviC,EAAQC,GAAU,OAAOsiC,EAAM7iC,KAAMM,EAAGC,IArFrEwlB,EAAOoW,IAGP,SAAuC5hB,KAAkBooB,GACrD,OAAO,IAAKsJ,GAAqBnJ,WAAWvoB,EAAKD,KAAtC,GAAJ,CAAmDC,KAASooB,IAWvE3G,GAAW99B,UAAUf,IAAM,SAAgEgI,GACvF,OAAO8jC,GAAWpG,MAAM7iC,KAAMmF,IAGlC62B,GAAW99B,UAAUmG,IAAM,SAAgEc,EAAe5H,GACtG,OAAOqtC,GAAW/H,MAAM7iC,KAAMmF,EAAO5H,IAGzCy+B,GAAW99B,UAAUsa,QAAU,SAAoEjb,EAA2B89B,GAC1H,OAAO6P,GAAerI,MAAM7iC,KAAMzC,EAAO89B,IAG7CW,GAAW99B,UAAU88B,QAAU,WAC3B,OAAO4Q,GAAe/I,MAAM7iC,OAGhCg8B,GAAW99B,UAAUkuC,aAAe,WAChC,OAAON,GAAiBjJ,MAAM7iC,KAAKsa,OAGvC0hB,GAAW99B,UAAUb,OAAOwC,UAAY,WACpC,OAAO4rC,GAAgB5I,MAAM7iC,OAGhCg8B,GAAW99B,UAAkB+9B,mBAgE9B,WACI,MAAMhF,EAAaj3B,KAAKi3B,WACpBA,GAAcA,EAAWrzB,WAAa,IACtC5D,KAAK7C,KAjBiF0O,EAiB7D7L,KAAK7C,IAhB3B,SAAkBb,GAAa,OAAO0D,KAAKm7B,QAAQ7+B,GAAKuP,EAAGpP,KAAKuD,KAAM1D,GAAK,OAiB9E0D,KAAKqE,IAbb,SAA6GwH,GACzG,OAAO,SAAkBvP,EAAWgE,GAC5B40B,GAAQl1B,KAAKi3B,WAAYj3B,KAAKkF,OAAS5I,EAAQ,MAALgE,IAC1CuL,EAAGpP,KAAKuD,KAAM1D,EAAGgE,IAUV+rC,CAAgBrsC,KAAKqE,MAlBxC,IAA8FwH,GA/C7F7O,OAAO07B,KAAKnS,GACR4L,OAAQrG,GAAWA,IAAWvF,EAAKiD,MAAQsC,IAAWvF,EAAKA,EAAKiD,OAChE9d,IAAK4gC,GAAW/lB,EAAK+lB,IAAWna,OAAQma,GAAmC,iBAANA,GACrEhZ,QAASxH,IACN,IAAIiE,EACJ,OAAQjE,GACJ,KAAKvF,EAAKgB,IAAWwI,EAAU,CAACxJ,EAAKkG,KAAMlG,EAAKmG,MAAOnG,EAAKoG,MAAOpG,EAAKqG,MAAOrG,EAAKsG,MAAOtG,EAAKuG,OAAQvG,EAAKwG,OAAQxG,EAAKyG,QAAS,MACnI,KAAKzG,EAAKwF,MAAWgE,EAAU,CAACxJ,EAAKwd,QAASxd,EAAK0d,QAAS1d,EAAK4d,SAAU,MAC3E,KAAK5d,EAAK6B,KAAW2H,EAAU,CAACxJ,EAAKke,QAASle,EAAKoe,iBAAkB,MACrE,KAAKpe,EAAKgC,KAAWwH,EAAU,CAACxJ,EAAKgf,WAAYhf,EAAKkf,gBAAiBlf,EAAKof,gBAAiBpf,EAAKsf,gBAAiB,MACnH,KAAKtf,EAAKiC,UAAWuH,EAAU,CAACxJ,EAAKue,gBAAiBve,EAAKye,qBAAsBze,EAAK2e,qBAAsB3e,EAAK6e,qBAAsB,MACvI,KAAK7e,EAAKqC,SAAWmH,EAAU,CAACxJ,EAAKkgB,gBAAiBlgB,EAAKogB,mBAAoB,MAC/E,KAAKpgB,EAAKY,MAAW4I,EAAU,CAACxJ,EAAK4f,WAAY5f,EAAK8f,aAAc,MACpE,QAAwBtW,EAAU,CAACjE,GAEvCiE,EAAQuD,QAASxH,IACb,MAAMygB,EAAaN,GAAqBpJ,MAAM/W,GAC9CygB,EAAWruC,UAAe,IAoBtC,SAAqB2kC,GACjB,OAAO,SAAkBviC,GAAU,OAAOuiC,EAAM7iC,KAAMM,IArBhBksC,CAASvD,GAAWnG,WAAWhX,IAC7DygB,EAAWruC,UAAe,IAAIiuC,GAASvB,GAAW9H,WAAWhX,IAC7DygB,EAAWruC,UAAmB,QAAIiuC,GAASjB,GAAepI,WAAWhX,IACrEygB,EAAWruC,UAAmB,QAAIguC,GAASN,GAAe9I,WAAWhX,IACrEygB,EAAWruC,UAAwB,aAW/C,SAAwC2kC,GACpC,OAAO,WAAoB,OAAOA,EAAM7iC,KAAKsa,OAZEmyB,CAAaX,GAAiBhJ,WAAWhX,IAChFygB,EAAWruC,UAAUb,OAAOwC,UAAYqsC,GAAST,GAAgB3I,WAAWhX,QCvHxF,IAAO4gB,GAAO//B,EAAA,EAAYa,KAOnBm/B,GAAOjnB,EAAYE,OAAOD,MAAMK,QAAQU,KACxCa,GAAM7B,EAAYE,OAAOD,MAAMK,QAAQuB,IACvCG,GAAgBhC,EAAYE,OAAOD,MAAMK,QAAQ0B,cACjDklB,GAASlnB,EAAYE,OAAOD,MAAMK,QAAQ8B,OAC1C+kB,GAAOnnB,EAAYE,OAAOD,MAAMK,QAAQiC,KACxC6kB,GAAOpnB,EAAYE,OAAOD,MAAMK,QAAQ6B,KACxCklB,GAAUrnB,EAAYE,OAAOD,MAAMK,QAAQkC,QAC3C8kB,GAAOtnB,EAAYE,OAAOD,MAAMK,QAAQoC,KACxCG,GAAO7C,EAAYE,OAAOD,MAAMK,QAAQuC,KACxCC,GAAY9C,EAAYE,OAAOD,MAAMK,QAAQwC,UAC7CI,GAAWlD,EAAYE,OAAOD,MAAMK,QAAQ4C,SAC5CqkB,GAAOvnB,EAAYE,OAAOD,MAAMK,QAAQc,KACxComB,GAASxnB,EAAYE,OAAOD,MAAMK,QAAQa,QAC1CM,GAAQzB,EAAYE,OAAOD,MAAMK,QAAQmB,MACzCgC,GAAqBzD,EAAYE,OAAOD,MAAMK,QAAQmD,mBACtDgkB,GAAkBznB,EAAYE,OAAOD,MAAMK,QAAQ+B,gBACnDqlB,GAAgB1nB,EAAYE,OAAOD,MAAMK,QAAQe,cACjDsmB,GAAO3nB,EAAYE,OAAOD,MAAMK,QAAQiB,IA+GxC,MAAMqmB,GAAW,IAzGjB,cAA4B7K,GACxBr6B,MAA+Bw6B,EAAShc,GAC3C,OAAgB,MAARgc,GAA2B,MAAXhc,OAAmB3c,EAAYX,MAAMu5B,MAAMD,EAAMhc,GAEtExe,UAA+B2+B,EAAUxmC,GAE5C,OADAosC,GAAKY,UAAUhtC,GACRosC,GAAKa,QAAQjtC,GAEjB6H,SAA6Bw6B,EAASriC,GAIzC,OAHAgnB,GAAIkmB,SAASltC,GACbgnB,GAAImmB,YAAYntC,EAAGqiC,EAAKpb,UACxBD,GAAIomB,YAAYptC,EAAGqiC,EAAKnb,UACjBF,GAAIqmB,OAAOrtC,GAEf6H,WAAiCw6B,EAASriC,GAG7C,OAFAmnB,GAAcmmB,mBAAmBttC,GACjCmnB,GAAcomB,aAAavtC,EAAGqiC,EAAKhb,WAC5BF,GAAcqmB,iBAAiBxtC,GAEnC6H,YAAmC2+B,EAAUxmC,GAEhD,OADAqsC,GAAOoB,YAAYztC,GACZqsC,GAAOqB,UAAU1tC,GAErB6H,UAA+B2+B,EAAUxmC,GAE5C,OADAssC,GAAKqB,UAAU3tC,GACRssC,GAAKsB,QAAQ5tC,GAEjB6H,UAA+B2+B,EAAUxmC,GAE5C,OADAusC,GAAKsB,UAAU7tC,GACRusC,GAAKuB,QAAQ9tC,GAEjB6H,aAAqCw6B,EAASriC,GAIjD,OAHAwsC,GAAQuB,aAAa/tC,GACrBwsC,GAAQwB,SAAShuC,EAAGqiC,EAAKza,OACzB4kB,GAAQe,aAAavtC,EAAGqiC,EAAKhb,WACtBmlB,GAAQyB,WAAWjuC,GAEvB6H,UAAgCw6B,EAASriC,GAG5C,OAFAysC,GAAKyB,UAAUluC,GACfysC,GAAK0B,QAAQnuC,EAAGqiC,EAAKta,MACd0kB,GAAK2B,QAAQpuC,GAEjB6H,UAA+Bw6B,EAASriC,GAI3C,OAHAgoB,GAAKqmB,UAAUruC,GACfgoB,GAAKmmB,QAAQnuC,EAAGqiC,EAAKta,MACrBC,GAAKmlB,YAAYntC,EAAGqiC,EAAKpb,UAClBe,GAAKsmB,QAAQtuC,GAEjB6H,eAAyCw6B,EAASriC,GACrD,MAAMouB,EAAYiU,EAAKjU,UAAYpuB,EAAE2S,aAAa0vB,EAAKjU,gBAAc1kB,EAMrE,OALAue,GAAUsmB,eAAevuC,GACzBioB,GAAUkmB,QAAQnuC,EAAGqiC,EAAKta,WACTre,IAAb0kB,GACAnG,GAAUumB,YAAYxuC,EAAGouB,GAEtBnG,GAAUwmB,aAAazuC,GAE3B6H,cAAuCw6B,EAASriC,GAGnD,OAFAqoB,GAASqmB,cAAc1uC,GACvBqoB,GAAS8lB,QAAQnuC,EAAGqiC,EAAKta,MAClBM,GAASsmB,YAAY3uC,GAEzB6H,UAA+B2+B,EAAUxmC,GAE5C,OADA0sC,GAAKkC,UAAU5uC,GACR0sC,GAAKmC,QAAQ7uC,GAEjB6H,YAAmC2+B,EAAUxmC,GAEhD,OADA2sC,GAAOmC,aAAa9uC,GACb2sC,GAAOoC,WAAW/uC,GAEtB6H,WAAiCw6B,EAASriC,GAC7C4mB,GAAMooB,mBAAmBhvC,EAAGqiC,EAAK7S,QAAQjwB,QACzC,MAAMiwB,EAAU5I,GAAMqoB,oBAAoBjvC,EAAGqiC,EAAK7S,SAIlD,OAHA5I,GAAMsoB,WAAWlvC,GACjB4mB,GAAMuoB,QAAQnvC,EAAGqiC,EAAKnlC,MACtB0pB,GAAMwoB,WAAWpvC,EAAGwvB,GACb5I,GAAMyoB,SAASrvC,GAEnB6H,gBAA2Cw6B,EAASriC,GACvD,MAAMsvC,EAAY7vC,KAAK6iC,MAAMD,EAAK/R,QAAStwB,GAO3C,OANA4oB,GAAmB2mB,wBAAwBvvC,GAC3C4oB,GAAmB4mB,MAAMxvC,EAAG,IAAImsC,GAAK9J,EAAKxZ,GAAI,IAC9CD,GAAmB6mB,aAAazvC,EAAGqiC,EAAKtZ,gBACtBrf,IAAd4lC,GACA1mB,GAAmB8mB,aAAa1vC,EAAGsvC,GAEhC1mB,GAAmB+mB,sBAAsB3vC,GAE7C6H,qBAAqDw6B,EAASriC,GAGjE,OAFA4sC,GAAgBgD,qBAAqB5vC,GACrC4sC,GAAgBiD,aAAa7vC,EAAGqiC,EAAK5a,WAC9BmlB,GAAgBkD,mBAAmB9vC,GAEvC6H,mBAAiDw6B,EAASriC,GAG7D,OAFA6sC,GAAckD,mBAAmB/vC,GACjC6sC,GAAcmD,YAAYhwC,EAAGqiC,EAAK5b,UAC3BomB,GAAcoD,iBAAiBjwC,GAEnC6H,SAA8Bw6B,EAASriC,GAG1C,OAFA8sC,GAAKoD,SAASlwC,GACd8sC,GAAKqD,cAAcnwC,EAAGqiC,EAAK1b,YACpBmmB,GAAKsD,OAAOpwC,KC/GpB,SAASqwC,GAAoBrwC,GAChC,OAAO,IAAIswC,GACPtwC,EAAS,MAyBjB,SAASuwC,EAAmB5e,GACxB,OAAQA,GAAM,IAAIjtB,OAAoB,CAAC8rC,EAAYjV,IAAgB,IAC5DiV,EACH,IAAIzmB,GACAwR,EAAc,MACdkV,GAAkBlV,EAAiB,cAEpCgV,EAAmBhV,EAAiB,WACxC,IAhCCgV,CAAmBvwC,EAAW,SAoCtC,SAAS0wC,EAAgB/e,EAAWzrB,EAA0B,IAC1D,IAAK,IAAInK,GAAK,EAAGyB,GAAKm0B,GAAM,IAAIpyB,SAAUxD,EAAIyB,GAAI,CAC9C,MAAM+9B,EAAS5J,EAAG51B,GAClBw/B,EAAiB,UAAKr1B,EAAQjG,KAAK,IAAI0wC,GAAazqC,EAAQ3G,OAAQg8B,EAAiB,SAAEh8B,SACvFg8B,EAAa,MAAKr1B,EAAQjG,KAAK,IAAI0wC,GAAazqC,EAAQ3G,OAAQg8B,EAAa,KAAEh8B,SAC/Eg8B,EAAe,QAAKr1B,EAAQjG,KAAK,IAAI0wC,GAAazqC,EAAQ3G,OAAQg8B,EAAe,OAAEh8B,SACnFg8B,EAAa,MAAKr1B,EAAQjG,KAAK,IAAI0wC,GAAazqC,EAAQ3G,OAAQg8B,EAAa,KAAEh8B,SAC/E2G,EAAUwqC,EAAgBnV,EAAiB,SAAGr1B,GAElD,OAAOA,EA5CHwqC,CAAgB1wC,EAAW,UAkBnC,SAAS4wC,GAAsBvV,EAAapzB,EAAsC8oB,GAC9E,OAAQsK,EAAiB,UAAK,IAAIzJ,OAAOif,SAAS1lC,IAAK9K,GAAWoxB,GAAMqf,SAASzwC,EAAG4H,EAAc8oB,IA6BtG,SAAS0f,GAAkBM,GACvB,OAAQA,GAAY,IAAIrsC,OAAO,CAAC8wB,EAAK1b,IAAQ0b,KAAgB,IAAR1b,GAAY,GA4CrE,SAASk3B,GAAuB/f,GAC5B,OAAO,IAAIvK,IAAoBjqB,OAAOw0C,QAAQhgB,GAAa,KAI/D,SAASigB,GAAkBpf,GACvB,OAAO,IAAI/F,EAAI+F,EAAgB,SAAGA,EAAgB,UAItD,SAASqf,GAAa9wC,EAAQsrB,GAE1B,MAAMJ,EAASlrB,EAAQ,KAAQ,KAE/B,OAAQkrB,GACJ,IAAK,OAAU,OAAO,IAAIF,EAC1B,IAAK,OAAU,OAAO,IAAIS,EAC1B,IAAK,SAAU,OAAO,IAAImB,EAC1B,IAAK,OAAU,OAAO,IAAIC,EAC1B,IAAK,OAAU,OAAO,IAAIC,EAC1B,IAAK,OAAU,OAAO,IAAI0B,IAAMlD,GAAY,IAAI,IAChD,IAAK,SACL,IAAK,UAAW,OAAO,IAAIsD,GAAOtD,GAAY,IAGlD,OAAQJ,GACJ,IAAK,MAAO,CACR,MAAMtuB,EAAIoD,EAAQ,KAClB,OAAO,IAAI0rB,EAAI9uB,EAAY,SAAGA,EAAY,UAE9C,IAAK,gBAAiB,CAClB,MAAMA,EAAIoD,EAAQ,KAClB,OAAO,IAAIqsB,EAAM9G,EAAU3oB,EAAa,YAE5C,IAAK,UAAW,CACZ,MAAMA,EAAIoD,EAAQ,KAClB,OAAO,IAAI+sB,EAAQnwB,EAAS,MAAGA,EAAa,WAEhD,IAAK,OAAQ,CACT,MAAMA,EAAIoD,EAAQ,KAClB,OAAO,IAAIitB,EAAMzH,EAAS5oB,EAAQ,OAEtC,IAAK,OAAQ,CACT,MAAMA,EAAIoD,EAAQ,KAClB,OAAO,IAAIstB,EAAK7H,EAAS7oB,EAAQ,MAAWA,EAAY,UAE5D,IAAK,YAAa,CACd,MAAMA,EAAIoD,EAAQ,KAClB,OAAO,IAAI6tB,GAAUpI,EAAS7oB,EAAQ,MAAWA,EAAY,UAEjE,IAAK,WAAY,CACb,MAAMA,EAAIoD,EAAQ,KAClB,OAAO,IAAIouB,GAAS1I,EAAa9oB,EAAQ,OAE7C,IAAK,QAAS,CACV,MAAMA,EAAIoD,EAAQ,KAClB,OAAO,IAAI6uB,GAAMvJ,EAAU1oB,EAAQ,MAAYA,EAAW,SAAK,GAAK0uB,GAAY,IAEpF,IAAK,kBAAmB,CACpB,MAAM1uB,EAAIoD,EAAQ,KAClB,OAAO,IAAIuvB,GAAgB3yB,EAAa,WAE5C,IAAK,gBAAiB,CAClB,MAAMA,EAAIoD,EAAQ,KAClB,OAAO,IAAIyvB,GAAc7yB,EAAY,UAAI0uB,GAAY,IAAI,IAE7D,IAAK,MAAO,CACR,MAAM1uB,EAAIoD,EAAQ,KAClB,OAAO,IAAI2vB,GAAKrE,GAAY,GAAI1uB,EAAc,aAGtD,MAAU8M,6BAA6BwhB,MClL3C,IAAO6lB,GAAOhlC,EAAA,EAAYa,KACnBokC,GAAUjlC,EAAA,EAAYoB,QACtB8jC,GAAallC,EAAA,EAAYvJ,WAEzB0uC,GAAOpsB,EAAYE,OAAOD,MAAMK,QAAQO,KACxCwrB,GAASrsB,EAAYE,OAAOD,MAAMK,QAAQuD,MAC1CyoB,GAAUtsB,EAAYE,OAAOD,MAAMK,QAAQiE,OAC3C1U,GAAUmQ,EAAYE,OAAOD,MAAMK,QAAQ9Q,OAC3C+8B,GAAWnsB,EAAaF,OAAOD,MAAMK,QAAQ8E,QAC7ConB,GAAYxsB,EAAYE,OAAOD,MAAMK,QAAQgD,SAC7CmpB,GAAarsB,EAAaF,OAAOD,MAAMK,QAAQsE,UAC/C8nB,GAAc1sB,EAAYE,OAAOD,MAAMK,QAAQS,WAC/C4rB,GAAevsB,EAAaF,OAAOD,MAAMK,QAAQwE,YACjD8nB,GAAmBxsB,EAAaF,OAAOD,MAAMK,QAAQ2E,gBAWrD,MAAM4nB,GAsETnqC,YAAY+iB,EAA2BH,EAA0BC,EAAeunB,GAC5ExyC,KAAKyyC,SAAWznB,EAChBhrB,KAAK0yC,YAAcznB,EACnBjrB,KAAK2yC,KAAO,IAAI5uC,WAAW,GAC3ByuC,IAAWxyC,KAAK4yC,cAAgB,KAAMJ,IACtCxyC,KAAK6yC,YAAoC,iBAAf1nB,EAA0BA,EAAaA,EAAW1d,IAxEzErF,gBAAyC0qC,EAAU7nB,GACtD,MAAM8nB,EAAU,IAAIR,GAAQ,EAAGtsB,EAAgByM,GAAIzH,GAEnD,OADA8nB,EAAQH,cAiIhB,SAA+BG,EAAcz4B,GACzC,MAAO,KACH,OAAQA,GACJ,KAAK+P,EAAcJ,OAAQ,OAAOA,GAAOonB,SAAS0B,GAClD,KAAK1oB,EAAcG,YAAa,OAAOqmB,GAAYQ,SAAS0B,GAC5D,KAAK1oB,EAAcM,gBAAiB,OAAOA,GAAgB0mB,SAAS0B,GAExE,MAAUzoC,4CAA4C+f,EAAc/P,aAAgBA,QAxI5D04B,CAAsBF,EAAK7nB,GAC5C8nB,EAIJ3qC,cAAckT,GACjBA,EAAM,IAAIu2B,GAAW70C,OAAA+1B,GAAA,aAAA/1B,CAAase,IAClC,MAAM23B,EAAWhB,GAASiB,iBAAiB53B,GACrC6P,EAAmB8nB,EAAS9nB,aAC5BH,EAA2BioB,EAASjoB,UACpCC,EAA4BgoB,EAAShoB,aACrC8nB,EAAU,IAAIR,GAAQpnB,EAAYH,EAASC,GAEjD,OADA8nB,EAAQH,cAgIhB,SAA6BG,EAAmBz4B,GAC5C,MAAO,KACH,OAAQA,GACJ,KAAK+P,EAAcJ,OAAQ,OAAOA,GAAOrU,OAAOm9B,EAAQP,OAAO,IAAIR,KACnE,KAAK3nB,EAAcG,YAAa,OAAOqmB,GAAYj7B,OAAOm9B,EAAQP,OAAO,IAAIH,IAAkBU,EAAQ/nB,WACvG,KAAKX,EAAcM,gBAAiB,OAAOA,GAAgB/U,OAAOm9B,EAAQP,OAAO,IAAIF,IAAsBS,EAAQ/nB,WAEvH,MAAU1gB,4CAA4C+f,EAAc/P,aAAgBA,QAvI5D64B,CAAoBF,EAAUhoB,GAC/C8nB,EAIJ3qC,cAAuC2qC,GAC1C,IAAIxyC,EAAI,IAAIqxC,GAAW1mB,GAAgB,EAcvC,OAbI6nB,EAAQK,WACRloB,EAAejB,GAAOlU,OAAOxV,EAAGwyC,EAAQP,UACjCO,EAAQM,gBACfnoB,EAAe2lB,GAAY96B,OAAOxV,EAAGwyC,EAAQP,UACtCO,EAAQO,sBACfpoB,EAAeP,GAAgB5U,OAAOxV,EAAGwyC,EAAQP,WAErDP,GAASsB,aAAahzC,GACtB0xC,GAASle,WAAWxzB,EAAG0lB,EAAgByM,IACvCuf,GAASuB,UAAUjzC,EAAG2qB,GACtB+mB,GAASwB,cAAclzC,EAAGwyC,EAAQ9nB,YAClCgnB,GAASyB,cAAcnzC,EAAG,IAAIoxC,GAAKoB,EAAQ5nB,WAAY,IACvD8mB,GAAS0B,oBAAoBpzC,EAAG0xC,GAAS2B,WAAWrzC,IAC7CA,EAAEwO,eAIN3G,YAAYoqC,EAAgDrnB,EAAa,GAC5E,GAAIqnB,aAAkBvoB,GAClB,OAAO,IAAIsoB,GAAQ,EAAGtsB,EAAgByM,GAAIrI,EAAcJ,OAAQuoB,GAEpE,GAAIA,aAAkB3B,GAClB,OAAO,IAAI0B,GAAQpnB,EAAYlF,EAAgByM,GAAIrI,EAAcG,YAAagoB,GAElF,GAAIA,aAAkB7nB,GAClB,OAAO,IAAI4nB,GAAQpnB,EAAYlF,EAAgByM,GAAIrI,EAAcM,gBAAiB6nB,GAEtF,MAAUloC,sCAAsCkoC,KAQpDl4B,WAAoB,OAAOta,KAAKirB,WAChCD,cAAuB,OAAOhrB,KAAKyyC,SACnCxnB,iBAA0B,OAAOjrB,KAAK0yC,YACtCvnB,iBAA0B,OAAOnrB,KAAK6yC,YAG/BzqC,SAAW,OAAOpI,KAAK4yC,gBACvBxqC,WAAoD,OAAOpI,KAAKirB,aAAeZ,EAAcJ,OAC7F7hB,gBAA8D,OAAOpI,KAAKirB,aAAeZ,EAAcG,YACvGpiB,oBAAsE,OAAOpI,KAAKirB,aAAeZ,EAAcM,iBAYnH,MAAMkmB,GAITnO,YAAqB,OAAO1iC,KAAK6zC,OACjC/zC,aAAsB,OAAOE,KAAKg6B,QAClCvzB,cAAuB,OAAOzG,KAAK8zC,SACnC1rC,YAAYtI,EAAuB4iC,EAAoBj8B,GACnDzG,KAAK6zC,OAASnR,EACd1iC,KAAK8zC,SAAWrtC,EAChBzG,KAAKg6B,QAA4B,iBAAXl6B,EAAsBA,EAASA,EAAO2N,KAK7D,MAAMkd,GAKTvB,SAAkB,OAAOppB,KAAKmxB,IAC9B5W,WAAoB,OAAOva,KAAK60B,MAChChK,cAAuB,OAAO7qB,KAAK+zC,SACnCj0C,aAA8B,OAAOE,KAAKua,KAAKza,OAC/C4iC,YAAkC,OAAO1iC,KAAKua,KAAKmoB,MACnDj8B,cAAuC,OAAOzG,KAAKua,KAAK9T,QAExD2B,YAAYmS,EAAmB6O,EAAmByB,GAAmB,GACjE7qB,KAAK60B,MAAQta,EACbva,KAAK+zC,SAAWlpB,EAChB7qB,KAAKmxB,IAAoB,iBAAP/H,EAAkBA,EAAKA,EAAG3b,KAK7C,MAAMyjC,GAGT9oC,YAAYlD,EAAuBpF,GAC/BE,KAAKkF,OAA2B,iBAAXA,EAAsBA,EAASA,EAAOuI,IAC3DzN,KAAKF,OAA2B,iBAAXA,EAAsBA,EAASA,EAAO2N,KAK5D,MAAM6c,GAGTliB,YAAYtI,EAAuB+2B,GAC/B72B,KAAKF,OAA2B,iBAAXA,EAAsBA,EAASA,EAAO2N,IAC3DzN,KAAK62B,UAAiC,iBAAdA,EAAyBA,EAAYA,EAAUppB,KAoJ/E,SAASumC,GAAoBvhC,EAAejK,EAAsC8oB,GAC9E,MAAMpF,EAAW,GACjB,IAAK,IAAItrB,EAAGtE,GAAK,EAAGyI,GAAK,EAAGhH,EAAI0U,EAAMwhC,mBAAoB33C,EAAIyB,IACtD6C,EAAI6R,EAAMyZ,SAAS5vB,MACnB4vB,IAAWnnB,GAAKitB,GAAMpc,OAAOhV,EAAG4H,EAAc8oB,IAGtD,OAAOpF,EA4CX,SAASgoB,GAAqB/b,GAC1B,MAAM5d,EAAO,IAAI0M,IACjB,GAAIkR,EACA,IAAK,IAAIgc,EAAOt2C,EAAKvB,GAAK,EAAGyB,EAAoC,EAAhCo6B,EAAOic,yBAA8B93C,EAAIyB,IACjEo2C,EAAQhc,EAAOkc,eAAe/3C,KAA8B,OAAtBuB,EAAMs2C,EAAMt2C,QACnD0c,EAAKlW,IAAIxG,EAAKs2C,EAAM52C,SAIhC,OAAOgd,EAIX,SAAS+5B,GAAgBjiB,GACrB,OAAO,IAAI/F,EAAI+F,EAAM5K,WAAY4K,EAAM7K,YAI3C,SAAS+sB,GAAgB3zC,EAAWsrB,GAEhC,MAAMJ,EAASlrB,EAAE+oB,WAEjB,OAAQmC,GACJ,KAAKgmB,GAAKtoB,KAAS,OAAO,IAAIoC,EAC9B,KAAKkmB,GAAKprB,KAAS,OAAO,IAAI2F,EAC9B,KAAKylB,GAAKhqB,OAAS,OAAO,IAAI0F,EAC9B,KAAKskB,GAAKjqB,KAAS,OAAO,IAAI4F,EAC9B,KAAKqkB,GAAK7pB,KAAS,OAAO,IAAIyF,EAC9B,KAAKokB,GAAKhrB,KAAS,OAAO,IAAIsI,IAAMlD,GAAY,IAAI,IACpD,KAAK4lB,GAAKjrB,QAAS,OAAO,IAAI2I,GAAOtD,GAAY,IAGrD,OAAQJ,GACJ,KAAKgmB,GAAKvqB,IAAK,CACX,MAAM/pB,EAAIoD,EAAE0Z,KAAK,IAAIoL,EAAYE,OAAOD,MAAMK,QAAQuB,KACtD,OAAO,IAAI+E,EAAI9uB,EAAEiqB,WAAYjqB,EAAEgqB,YAEnC,KAAKsqB,GAAKpqB,cAAe,CACrB,MAAMlqB,EAAIoD,EAAE0Z,KAAK,IAAIoL,EAAYE,OAAOD,MAAMK,QAAQ0B,eACtD,OAAO,IAAIuF,EAAMzvB,EAAEoqB,aAEvB,KAAKkqB,GAAK5pB,QAAS,CACf,MAAM1qB,EAAIoD,EAAE0Z,KAAK,IAAIoL,EAAYE,OAAOD,MAAMK,QAAQkC,SACtD,OAAO,IAAIyF,EAAQnwB,EAAE2qB,QAAS3qB,EAAEoqB,aAEpC,KAAKkqB,GAAK1pB,KAAM,CACZ,MAAM5qB,EAAIoD,EAAE0Z,KAAK,IAAIoL,EAAYE,OAAOD,MAAMK,QAAQoC,MACtD,OAAO,IAAIyF,EAAMrwB,EAAE8qB,QAEvB,KAAKwpB,GAAKvpB,KAAM,CACZ,MAAM/qB,EAAIoD,EAAE0Z,KAAK,IAAIoL,EAAYE,OAAOD,MAAMK,QAAQuC,MACtD,OAAO,IAAI2F,EAAK1wB,EAAE8qB,OAAQ9qB,EAAEgqB,YAEhC,KAAKsqB,GAAKtpB,UAAW,CACjB,MAAMhrB,EAAIoD,EAAE0Z,KAAK,IAAIoL,EAAYE,OAAOD,MAAMK,QAAQwC,WACtD,OAAO,IAAIiG,GAAUjxB,EAAE8qB,OAAQ9qB,EAAEmxB,YAErC,KAAKmjB,GAAKlpB,SAAU,CAChB,MAAMprB,EAAIoD,EAAE0Z,KAAK,IAAIoL,EAAYE,OAAOD,MAAMK,QAAQ4C,UACtD,OAAO,IAAIoG,GAASxxB,EAAE8qB,QAE1B,KAAKwpB,GAAK3qB,MAAO,CACb,MAAM3pB,EAAIoD,EAAE0Z,KAAK,IAAIoL,EAAYE,OAAOD,MAAMK,QAAQmB,OACtD,OAAO,IAAIsI,GAAMjyB,EAAEC,OAAQD,EAAEg3C,gBAAkB,GAAItoB,GAAY,IAEnE,KAAK4lB,GAAK/pB,gBAAiB,CACvB,MAAMvqB,EAAIoD,EAAE0Z,KAAK,IAAIoL,EAAYE,OAAOD,MAAMK,QAAQ+B,iBACtD,OAAO,IAAIoI,GAAgB3yB,EAAEwqB,aAEjC,KAAK8pB,GAAK/qB,cAAe,CACrB,MAAMvpB,EAAIoD,EAAE0Z,KAAK,IAAIoL,EAAYE,OAAOD,MAAMK,QAAQe,eACtD,OAAO,IAAIsJ,GAAc7yB,EAAEwpB,YAAakF,GAAY,IAAI,IAE5D,KAAK4lB,GAAK7qB,IAAK,CACX,MAAMzpB,EAAIoD,EAAE0Z,KAAK,IAAIoL,EAAYE,OAAOD,MAAMK,QAAQiB,KACtD,OAAO,IAAIsJ,GAAKrE,GAAY,GAAI1uB,EAAE0pB,eAG1C,MAAU5c,6BAA6BwnC,GAAKhmB,QAAaA,MA3P7DkG,GAAc,OA2Rd,SAAqBzxB,EAAYkS,GAE7B,IAAIgX,GAAc,EACdG,GAAc,EACdC,GAAoB,EAEpBvP,EAAO7H,EAAM6H,KACbwR,EAAqBrZ,EAAMqZ,OAE1BF,EAAS8F,aAAapX,IAGvBwR,EAASxR,EAAKsW,WAAW9E,OACzBjC,EAAmByjB,GAAczK,MAAMvoB,EAAM/Z,GAC7CqpB,EAAa0jB,GAAczK,MAAMvoB,EAAKsW,WAAYrwB,IAJlDqpB,EAAa0jB,GAAczK,MAAMvoB,EAAM/Z,GAO3C,MAAMk0C,GAAgBn6B,EAAK4R,UAAY,IAAIxgB,IAAK9K,GAAaoxB,GAAMjc,OAAOxV,EAAGK,IACvE8zC,EAAuB3C,GAAO4C,qBAAqBp0C,EAAGk0C,GAEtDG,EAAmBniC,EAAM4e,UAAY5e,EAAM4e,SAAS9sB,KAAO,EAC7DwtC,GAAO8C,2BAA2Bt0C,EAAG,IAAIkS,EAAM4e,UAAU3lB,IAAI,EAAEopC,EAAG/0C,MAC9D,MAAMlC,EAAM0C,EAAE2S,gBAAgB4hC,KACxBz6B,EAAM9Z,EAAE2S,gBAAgBnT,KAI9B,OAHAmyC,GAAU6C,cAAcx0C,GACxB2xC,GAAU8C,OAAOz0C,EAAG1C,GACpBq0C,GAAU+C,SAAS10C,EAAG8Z,GACf63B,GAAUgD,YAAY30C,OAPkC,EAUnEkS,EAAM5V,OACN4sB,EAAalpB,EAAE2S,aAAaT,EAAM5V,OAGtCk1C,GAAOoD,WAAW50C,GAClBwxC,GAAOqD,QAAQ70C,EAAGqpB,GAClBmoB,GAAOsD,YAAY90C,EAAGurB,GACtBimB,GAAOuD,YAAY/0C,EAAGm0C,GACtB3C,GAAOwD,YAAYh1C,IAAKkS,EAAMiX,WAEV,IAAhBD,GAAqBsoB,GAAOyD,QAAQj1C,EAAGkpB,IACjB,IAAtBI,GAA2BkoB,GAAO0D,cAAcl1C,EAAGspB,IAC/B,IAApB+qB,GAAyB7C,GAAO2D,kBAAkBn1C,EAAGq0C,GAEzD,OAAO7C,GAAO4D,SAASp1C,IAtU3ByxB,GAAc,OAoId,SAAqBpxB,EAAW4H,EAAsC8oB,GAElE,IAAIlI,EACA3W,EACA6H,EACAoe,EACAkd,EACAC,EACAC,EAGCttC,GAAiB8oB,IAAsBukB,EAAWj1C,EAAEgwB,cAQ/CpoB,EAAampB,IAAIvI,EAAKysB,EAASzsB,KAAK3b,MAY1CirB,GAAQA,EAAOmd,EAAShG,aAAeyE,GAAgB5b,GAAiB,IAAI/L,EAC5EipB,EAAW,IAAIjlB,GAAWnoB,EAAarL,IAAIisB,GAAMsP,EAAMtP,EAAIysB,EAASvsB,aACpEwsB,EAAY,IAAI9jB,GAAMpxB,EAAE/D,OAAS+4C,EAAUh1C,EAAE8oB,WAAYwqB,GAAqBtzC,IAC9E0wB,EAAiBn0B,IAAIisB,GAAK5oB,KAAKiS,EAAQqjC,KAbvCpd,GAAQA,EAAOmd,EAAShG,aAAeyE,GAAgB5b,GAAiB,IAAI/L,EAC5EnkB,EAAanE,IAAI+kB,EAAI9O,EAAOi6B,GAAgB3zC,EAAGozC,GAAoBpzC,KACnEg1C,EAAW,IAAIjlB,GAAWrW,EAAMoe,EAAMtP,EAAIysB,EAASvsB,aACnDwsB,EAAY,IAAI9jB,GAAMpxB,EAAE/D,OAAS+4C,EAAUh1C,EAAE8oB,WAAYwqB,GAAqBtzC,IAC9E0wB,EAAiBjtB,IAAI+kB,EAAI,CAAC3W,EAAQqjC,MAblCx7B,EAAOi6B,GAAgB3zC,EAAGozC,GAAoBpzC,EAAG4H,EAAc8oB,IAC/D7e,EAAQ,IAAIuf,GAAMpxB,EAAE/D,OAASyd,EAAM1Z,EAAE8oB,WAAYwqB,GAAqBtzC,KAuB1E,OAAO6R,GAAS,MAvKpBuf,GAAgB,SDnHT,SAAuB4J,EAAapzB,EAAsC8oB,GAE7E,IAAIlI,EACAsP,EACAjmB,EACAojC,EACAv7B,EACAs7B,EACAE,EA4BJ,OAzBKttC,GAAiB8oB,IAAsBukB,EAAWja,EAAmB,YAQhEpzB,EAAampB,IAAIvI,EAAKysB,EAAa,KAYzCnd,GAAQA,EAAOmd,EAAoB,WAAKpE,GAAkB/Y,GAAiB,IAAI/L,EAC/EipB,EAAW,IAAIjlB,GAAWnoB,EAAarL,IAAIisB,GAAMsP,EAAMtP,EAAIysB,EAAoB,WAC/EC,EAAY,IAAI9jB,GAAM4J,EAAa,KAAGga,EAAUha,EAAiB,SAAG2V,GAAuB3V,EAAuB,iBAClHtK,EAAiBn0B,IAAIisB,GAAK5oB,KAAKiS,EAAQqjC,KAbvCpd,GAAQA,EAAOmd,EAAoB,WAAKpE,GAAkB/Y,GAAiB,IAAI/L,EAC/EnkB,EAAanE,IAAI+kB,EAAI9O,EAAOo3B,GAAa9V,EAAQuV,GAAsBvV,KACvEga,EAAW,IAAIjlB,GAAWrW,EAAMoe,EAAMtP,EAAIysB,EAAoB,WAC9DC,EAAY,IAAI9jB,GAAM4J,EAAa,KAAGga,EAAUha,EAAiB,SAAG2V,GAAuB3V,EAAuB,iBAClHtK,EAAiBjtB,IAAI+kB,EAAI,CAAC3W,EAAQqjC,MAblCx7B,EAAOo3B,GAAa9V,EAAQuV,GAAsBvV,EAAQpzB,EAAc8oB,IACxE7e,EAAQ,IAAIuf,GAAM4J,EAAa,KAAGthB,EAAMshB,EAAiB,SAAG2V,GAAuB3V,EAAuB,kBAuBvGnpB,GAAS,MCiFpBwX,GAAe,OA2Pf,SAAsB1pB,EAAY+H,GAE9B,MAAMytC,EAAeztC,EAAO8oB,OAAO1lB,IAAK9K,GAAMoxB,GAAMjc,OAAOxV,EAAGK,IAE9DoxC,GAAQgE,kBAAkBz1C,EAAGw1C,EAAaj2C,QAE1C,MAAMm2C,EAAqBjE,GAAQkE,mBAAmB31C,EAAGw1C,GAEnDnB,EAAmBtsC,EAAO+oB,UAAY/oB,EAAO+oB,SAAS9sB,KAAO,EAC/DytC,GAAQ6C,2BAA2Bt0C,EAAG,IAAI+H,EAAO+oB,UAAU3lB,IAAI,EAAEopC,EAAG/0C,MAChE,MAAMlC,EAAM0C,EAAE2S,gBAAgB4hC,KACxBz6B,EAAM9Z,EAAE2S,gBAAgBnT,KAI9B,OAHAmyC,GAAU6C,cAAcx0C,GACxB2xC,GAAU8C,OAAOz0C,EAAG1C,GACpBq0C,GAAU+C,SAAS10C,EAAG8Z,GACf63B,GAAUgD,YAAY30C,OAPoC,EAUzEyxC,GAAQmE,YAAY51C,GACpByxC,GAAQoE,UAAU71C,EAAG01C,GACrBjE,GAAQqE,cAAc91C,EAAG+1C,GAAyBlE,GAAYloB,OAASkoB,GAAYmE,MAE3D,IAApB3B,GAAyB5C,GAAQ0D,kBAAkBn1C,EAAGq0C,GAE1D,OAAO5C,GAAQwE,UAAUj2C,IAlR7B0pB,GAAe,OAoDf,SAAsBwsB,EAAkBjuC,EAAsC,IAAIye,IAAOqK,EAAqD,IAAIrK,KAC9I,MAAMmK,EAqDV,SAA4B9oB,EAAiBE,EAAsC8oB,GAC/E,MAAMF,EAAS,GACf,IAAK,IAAIxwB,EAAGtE,GAAK,EAAGyI,GAAK,EAAGhH,EAAIuK,EAAOouC,iBAAkBp6C,EAAIyB,IACrD6C,EAAI0H,EAAO8oB,OAAO90B,MAClB80B,IAASrsB,GAAKitB,GAAMpc,OAAOhV,EAAG4H,EAAc8oB,IAGpD,OAAOF,EA5DQulB,CAAmBF,EAASjuC,EAAc8oB,GACzD,OAAO,IAAIrH,GAAOmH,EAAQ8iB,GAAqBuC,GAAUjuC,EAAc8oB,IArD3ErH,GAAiB,SDzLV,SAAwBwsB,EAAcjuC,EAAsC,IAAIye,IAAOqK,EAAqD,IAAIrK,KACnJ,OAAO,IAAIgD,GAyBf,SAA8BwsB,EAAcjuC,EAAsC8oB,GAC9E,OAAQmlB,EAAgB,QAAK,IAAItkB,OAAOif,SAAS1lC,IAAK9K,GAAWoxB,GAAMqf,SAASzwC,EAAG4H,EAAc8oB,IAzB7FslB,CAAqBH,EAASjuC,EAAc8oB,GAC5CigB,GAAuBkF,EAAwB,gBAC/CjuC,EAAc8oB,ICuLtBuf,GAAoB,OAmUpB,SAA2BtwC,EAAYs2C,GAEnC,MAAMnU,EAAQmU,EAAYnU,OAAS,GAC7Bj8B,EAAUowC,EAAYpwC,SAAW,GAEvC4rC,GAAayE,iBAAiBv2C,EAAGmiC,EAAM5iC,QACvC4iC,EAAMp9B,QAAQ+tB,UAAUC,QAASv1B,GAAMusB,GAAUvU,OAAOxV,EAAGxC,IAE3D,MAAMg5C,EAAoBx2C,EAAE0S,YAE5Bo/B,GAAa2E,mBAAmBz2C,EAAGkG,EAAQ3G,QAC3C2G,EAAQnB,QAAQ+tB,UAAUC,QAAS2jB,GAAO/F,GAAan7B,OAAOxV,EAAG02C,IAEjE,MAAMC,EAAsB32C,EAAE0S,YAM9B,OAJAo/B,GAAa8E,iBAAiB52C,GAC9B8xC,GAAa+E,UAAU72C,EAAG,IAAIoxC,GAAKkF,EAAY/2C,OAAQ,IACvDuyC,GAAagF,SAAS92C,EAAGw2C,GACzB1E,GAAaiF,WAAW/2C,EAAG22C,GACpB7E,GAAakF,eAAeh3C,IArVvCswC,GAAoB,OAsDpB,SAA2B2G,EAAqBxsB,EAAU/E,EAAgByM,IACtE,OAAO,IAAIme,GAAY2G,EAAM13C,SAmBjC,SAA0B03C,GACtB,MAAM9U,EAAQ,GACd,IAAK,IAAI9hC,EAAGtE,GAAK,EAAGyI,GAAK,EAAGhH,EAAIy5C,EAAMC,gBAAiBn7C,EAAIyB,IACnD6C,EAAI42C,EAAM9U,MAAMpmC,MAChBomC,IAAQ39B,GAAKulB,GAAU1U,OAAOhV,IAGtC,OAAO8hC,EA1BgCgV,CAAiBF,GA8B5D,SAAuBA,EAAqBxsB,GACxC,MAAM2sB,EAAgB,GACtB,IAAK,IAAIp3C,EAAGjE,GAAK,EAAGyI,GAAK,EAAGhH,EAAIy5C,EAAMI,kBAAmBt7C,EAAIyB,IACrDwC,EAAIi3C,EAAM/wC,QAAQnK,MAIlB0uB,EAAU/E,EAAgByM,KACtBnyB,EAAEiU,QAAW,GAAKlY,EAAI,IAE1Bq7C,IAAgB5yC,GAAKmsC,GAAat7B,OAAOrV,IAGjD,OAAOo3C,EA3CyDE,CAAcL,EAAOxsB,KAtDzF6lB,GAAsB,SAAID,GAE1BjmB,GAAwB,OAsVxB,SAA+BpqB,EAAYu3C,GACvC,MAAMltB,EAAaimB,GAAY96B,OAAOxV,EAAGu3C,EAAgBv9B,MAKzD,OAJA+3B,GAAiByF,qBAAqBx3C,GACtC+xC,GAAiBvC,MAAMxvC,EAAG,IAAIoxC,GAAKmG,EAAgB1uB,GAAI,IACvDkpB,GAAiB0F,WAAWz3C,EAAGu3C,EAAgBjtB,SAC/CynB,GAAiB2F,QAAQ13C,EAAGqqB,GACrB0nB,GAAiB4F,mBAAmB33C,IA3V/CoqB,GAAwB,OAuDxB,SAA+B6sB,EAAyBxsB,EAAU/E,EAAgByM,IAC9E,OAAO,IAAI/H,GAAgBkmB,GAAYj7B,OAAO4hC,EAAMj9B,OAASyQ,GAAUwsB,EAAMpuB,KAAMouB,EAAM3sB,YAvD7FF,GAA0B,SD/KnB,SAAiCpqB,GACpC,OAAO,IAAIoqB,GACPimB,GAAoBrwC,EAAQ,MAC5BA,EAAM,GAAGA,EAAW,UC8K5B+pB,GAAkB,OA4VlB,SAAyB/pB,EAAYqiC,GACjC,OAAOuP,GAAWgG,gBAAgB53C,EAAG,IAAIoxC,GAAK/O,EAAK9iC,OAAQ,GAAI,IAAI6xC,GAAK/O,EAAK/L,UAAW,KA5V5FvM,GAAkB,OA6DlB,SAAyB1pB,GACrB,OAAO,IAAI0pB,GAAU1pB,EAAEd,SAAUc,EAAEi2B,cA5DvCqa,GAAqB,OA8VrB,SAA4B3wC,EAAYqiC,GACpC,OAAOrtB,GAAQ6D,aAAa7Y,EAAG,IAAIoxC,GAAK/O,EAAK19B,OAAQ,GAAI,IAAIysC,GAAK/O,EAAK9iC,OAAQ,KA9VnFoxC,GAAqB,OAqDrB,SAA4B3wC,GACxB,OAAO,IAAI2wC,GAAa3wC,EAAE2E,SAAU3E,EAAET,WA4S1C,MAAMw2C,GAAyB,WAC3B,MAAMtyC,EAAS,IAAIT,YAAY,GAG/B,OAFA,IAAI8yB,SAASryB,GAAQo0C,SAAS,EAAG,KAAK,GAED,MAA9B,IAAIryC,WAAW/B,GAAQ,GAJH,eCpiBxB,MAAMq0C,WAAoEC,GAAA,EACtElwC,MAAM7K,GACT,IAAKA,EAAQP,OAAA+1B,GAAA,aAAA/1B,CAAaO,IAAQqG,WAAa,EAC3C,OAAO0F,MAAM0Q,MAAMzc,GAKpB6K,SAASmwC,GAAO,GACnB,OAAOA,EACDv7C,OAAAmW,GAAA,EAAAnW,CAAWgD,KAAKoB,cAAa,IAC7BpB,KAAKoB,cAAa,GAAO1B,KAAKyT,GAAA,GAIjC/K,aAAamwC,GAAO,GACvB,OAAOA,EAAOv7C,OAAA+1B,GAAA,gBAAA/1B,CAAgBgD,KAAKuJ,SAAkB,GAAK,KAAaivC,EAAA,EAAAx4C,UAAA,6BACnE,IAAIyG,EAAU,GAAI7C,EAAa,MAC/B,IAA0B,IAAI60C,EAAJC,EAAAF,EAAA,EAAAx4C,QAAIy4C,QAAAC,EAAAr5C,QAAAI,MAAA,CAAnB,MAAM26B,EAAKqe,EAAAl7C,MAClBkJ,EAAQjG,KAAK45B,GACbx2B,GAAcw2B,EAAMx2B,qHAExB,OAAO5G,OAAA+1B,GAAA,gBAAA/1B,CAAgByJ,EAAS7C,GAAY,KANU,IAY3D,MAAM+0C,GAGTvwC,YAAY3E,GACJA,IACAzD,KAAKyD,OAAS,IAAIm1C,GAAiBC,EAAA,EAAeruC,aAAa/G,KAGvE2E,CAAC/K,OAAOwC,YAAc,OAAOG,KACtBoI,KAAK7K,GAAe,OAAOyC,KAAKyD,OAAOpE,KAAK9B,GAC5C6K,MAAM7K,GAAe,OAAOyC,KAAKyD,OAAOqH,MAAMvN,GAC9C6K,OAAO7K,GAAe,OAAOyC,KAAKyD,OAAOoG,OAAOtM,GAChD6K,KAAK7D,GAAwB,OAAOvE,KAAKyD,OAAOq1C,KAAKv0C,GACrD6D,KAAK7D,GAAwB,OAAOvE,KAAKyD,OAAO+I,KAAKjI,IAIzD,MAAMw0C,GAGT3wC,YAAY3E,GACJA,aAAkBs1C,GAClB/4C,KAAKyD,OAAUA,EAA2BA,OACnCA,aAAkB40C,GACzBr4C,KAAKyD,OAAS,IAAIu1C,GAAsBH,EAAA,EAAe9tC,kBAAkBtH,IAClEzG,OAAAi8C,GAAA,EAAAj8C,CAAqByG,GAC5BzD,KAAKyD,OAAS,IAAIu1C,GAAsBH,EAAA,EAAe1tC,eAAe1H,IAC/DzG,OAAAi8C,GAAA,EAAAj8C,CAAgByG,GACvBzD,KAAKyD,OAAS,IAAIu1C,GAAsBH,EAAA,EAAe7tC,cAAcvH,EAAOkvC,OACrE31C,OAAAi8C,GAAA,EAAAj8C,CAAiCyG,GACxCzD,KAAKyD,OAAS,IAAIu1C,GAAsBH,EAAA,EAAeruC,aAAa/G,IAC7DzG,OAAAi8C,GAAA,EAAAj8C,CAAgCyG,GACvCzD,KAAKyD,OAAS,IAAIu1C,GAAsBH,EAAA,EAAe9tC,kBAAkBtH,IAClEzG,OAAAi8C,GAAA,EAAAj8C,CAAsCyG,GAC7CzD,KAAKyD,OAAS,IAAIu1C,GAAsBH,EAAA,EAAe9tC,kBAAkBtH,IAClEzG,OAAAi8C,GAAA,EAAAj8C,CAA0CyG,KACjDzD,KAAKyD,OAAS,IAAIu1C,GAAsBH,EAAA,EAAe7tC,cAAcvH,KAG7E2E,CAAC/K,OAAO4C,iBAAmB,OAAOD,KAC3BoI,KAAK7K,GAAe,OAAOyC,KAAKyD,OAAOpE,KAAK9B,GAC5C6K,MAAM7K,GAAe,OAAOyC,KAAKyD,OAAOqH,MAAMvN,GAC9C6K,OAAO7K,GAAe,OAAOyC,KAAKyD,OAAOoG,OAAOtM,GACvDoM,aAAqC,OAAO3J,KAAKyD,OAAOkG,OACjDvB,OAAOwB,GAAgB,OAAO5J,KAAKyD,OAAOy1C,OAAOtvC,GACjDxB,KAAK7D,GAAwB,OAAOvE,KAAKyD,OAAOq1C,KAAKv0C,GACrD6D,KAAK7D,GAAwB,OAAOvE,KAAKyD,OAAO+I,KAAKjI,IAchE,MAAMq0C,GACFxwC,YAAsB3E,GAAAzD,KAAAyD,SACf2E,OAAOwB,GAAgB5J,KAAK6J,OAAOD,GACnCxB,KAAK7D,GAAkC,OAAOvE,KAAKX,KAAKkF,EAAM,QAAQhH,MACtE6K,KAAK7D,GAAkC,OAAOvE,KAAKX,KAAKkF,EAAM,QAAQhH,MACtE6K,KAAK7D,EAAsBkG,EAAuB,QAAU,OAAOzK,KAAKyD,OAAOpE,KAAK,CAAEoL,MAAKlG,SAC3F6D,MAAM7K,GAAe,OAAOP,OAAOY,OAAQoC,KAAKyD,OAAOqH,OAAS9K,KAAKyD,OAAOqH,MAAMvN,IAAW+6C,GAAA,GAC7FlwC,OAAO7K,GAAe,OAAOP,OAAOY,OAAQoC,KAAKyD,OAAOoG,QAAU7J,KAAKyD,OAAOoG,OAAOtM,IAAW+6C,GAAA,IAI3G,MAAMU,GAIF5wC,YAAuB3E,GAAAzD,KAAAyD,SACnBzD,KAAKyJ,eAAiB,IAAIzK,QAAS5B,GAAM4C,KAAK0J,sBAAwBtM,GAE7DgL,OAAOwB,mDAAsB5J,KAAK6J,OAAOD,KACtDD,aAAqC,OAAO3J,KAAKyJ,eACpCrB,KAAK7D,6CAA2C,aAAcvE,KAAKX,KAAKkF,EAAM,SAAShH,QACvF6K,KAAK7D,6CAA2C,aAAcvE,KAAKX,KAAKkF,EAAM,SAAShH,QACvF6K,KAAK7D,EAAsBkG,EAAuB,kDAAU,aAAczK,KAAKyD,OAAOpE,KAAK,CAAEoL,MAAKlG,WAClG6D,MAAM7K,6CACf,MAAMiC,EAAUQ,KAAKyD,OAAOqH,cAAe9K,KAAKyD,OAAOqH,MAAMvN,KAAW+6C,GAAA,EAGxE,OAFAt4C,KAAK0J,uBAAyB1J,KAAK0J,wBACnC1J,KAAK0J,2BAAwBO,EACtBjN,OAAOY,OAAO4B,KAEZ4I,OAAO7K,6CAChB,MAAMiC,EAAUQ,KAAKyD,OAAOoG,eAAgB7J,KAAKyD,OAAOoG,OAAOtM,KAAW+6C,GAAA,EAG1E,OAFAt4C,KAAK0J,uBAAyB1J,KAAK0J,wBACnC1J,KAAK0J,2BAAwBO,EACtBjN,OAAOY,OAAO4B,MCrItB,MAAM25C,WAAyBR,GAIlCvwC,YAAYpE,EAA8BJ,GACtC0F,QAHGtJ,KAAAgP,SAAmB,EAItBhP,KAAKgE,OAAShH,OAAA+1B,GAAA,aAAA/1B,CAAagH,GAC3BhE,KAAKuE,UAA6B,IAAfX,EAA6B5D,KAAKgE,OAAOJ,WAAaA,EAEtEwE,UAAU4G,GACb,MAAMhL,OAAEA,EAAMC,WAAEA,GAAejE,KAAKo5C,OAAOpqC,EAAU,GACrD,OAAO,IAAIqnB,SAASryB,EAAQC,GAAYo1C,SAAS,GAAG,GAEjDjxC,KAAK4G,GAER,OADAhP,KAAKgP,SAAW7K,KAAKC,IAAI4K,EAAUhP,KAAKuE,MACjCyK,EAAWhP,KAAKuE,KAEpB6D,KAAK4c,GACR,MAAMhhB,OAAEA,EAAMO,KAAEA,EAAIyK,SAAEA,GAAahP,KACnC,OAAIgE,GAAUgL,EAAWzK,GACC,iBAAXygB,IAAuBA,EAAS5f,KAC3CpF,KAAKgP,SAAW7K,KAAKC,IAAIG,EACpByK,EAAW7K,KAAKC,IAAIG,EAAOyK,EAAUgW,IACnChhB,EAAOqB,SAAS2J,EAAUhP,KAAKgP,WAEnC,KAEJ5G,OAAO4G,EAAkBgW,GAC5B,MAAM1J,EAAMtb,KAAKgE,OACX+Y,EAAM5Y,KAAKC,IAAIpE,KAAKuE,KAAMyK,EAAWgW,GAC3C,OAAO1J,EAAMA,EAAIjW,SAAS2J,EAAU+N,GAAO,IAAIhZ,WAAWihB,GAEvD5c,QAAUpI,KAAKgE,SAAWhE,KAAKgE,OAAS,MACxCoE,MAAM7K,GAA6B,OAAdyC,KAAKoK,QAAgB,CAAE3K,MAAM,EAAMlC,SACxD6K,OAAO7K,GAA6B,OAAdyC,KAAKoK,QAAgB,CAAE3K,MAAM,EAAMlC,UAI7D,MAAM+7C,WAA8BP,GAMvC3wC,YAAYmxC,EAAkB31C,GAC1B0F,QAJGtJ,KAAAgP,SAAmB,EAKtBhP,KAAKw5C,QAAUD,EACW,iBAAf31C,EACP5D,KAAKuE,KAAOX,EAEZ5D,KAAKy5C,SAAW,KAAajB,EAAA,EAAAx4C,UAAA,4BAClBA,KAAKy5C,SACZz5C,KAAKuE,YAAcg1C,EAAKG,QAAQn1C,OAFpB,GAMX6D,UAAU4G,6CACnB,MAAMhL,OAAEA,EAAMC,WAAEA,SAAqBjE,KAAKo5C,OAAOpqC,EAAU,GAC3D,OAAO,IAAIqnB,SAASryB,EAAQC,GAAYo1C,SAAS,GAAG,KAE3CjxC,KAAK4G,6CAGd,OAFAhP,KAAKy5C,iBAAkBz5C,KAAKy5C,UAC5Bz5C,KAAKgP,SAAW7K,KAAKC,IAAI4K,EAAUhP,KAAKuE,MACjCyK,EAAWhP,KAAKuE,OAEd6D,KAAK4c,6CACdhlB,KAAKy5C,iBAAkBz5C,KAAKy5C,UAC5B,MAAQD,QAASD,EAAIh1C,KAAEA,EAAIyK,SAAEA,GAAahP,KAC1C,GAAIu5C,GAAQvqC,EAAWzK,EAAM,CACH,iBAAXygB,IAAuBA,EAAS5f,KAC3C,IAAIuZ,EAAM3P,EAAU9J,EAAS,EAAGy0C,EAAY,EACxC58B,EAAM5Y,KAAKC,IAAIG,EAAMoa,EAAMxa,KAAKC,IAAIG,EAAOoa,EAAKqG,IAChDhhB,EAAS,IAAID,WAAWI,KAAK8R,IAAI,GAAIjW,KAAKgP,SAAW+N,GAAO4B,IAChE,MAAQA,GAAOg7B,GAAa58B,IAAQ7X,GAAUy0C,GAAa31C,EAAOJ,cAC3D+1C,mBAAoBJ,EAAK/sC,KAAKxI,EAAQkB,EAAQlB,EAAOJ,WAAasB,EAAQyZ,IAEjF,OAAO3a,EAEX,OAAO,OAEEoE,OAAO4G,EAAkBgW,6CAClChlB,KAAKy5C,iBAAkBz5C,KAAKy5C,UAC5B,MAAQD,QAASD,EAAIh1C,KAAEA,GAASvE,KAChC,GAAIu5C,GAASvqC,EAAWgW,EAAUzgB,EAAM,CACpC,MACMP,EAAS,IAAID,WADPI,KAAKC,IAAIG,EAAMyK,EAAWgW,GACFhW,GACpC,aAAcuqC,EAAK/sC,KAAKxI,EAAQ,EAAGghB,EAAQhW,IAAWhL,OAE1D,OAAO,IAAID,WAAWihB,KAEb5c,kDAAU,MAAMxH,EAAIZ,KAAKw5C,QAASx5C,KAAKw5C,QAAU,KAAM54C,UAAWA,EAAEwJ,WACpEhC,MAAM7K,6CAAmC,aAAdyC,KAAKoK,QAAgB,CAAE3K,MAAM,EAAMlC,WAC9D6K,OAAO7K,6CAAmC,aAAdyC,KAAKoK,QAAgB,CAAE3K,MAAM,EAAMlC,YC/FhF,IAAOq8C,GAAajtC,EAAA,EAAYvJ,WAQjB,MAAMy2C,GAA4Bv/B,eAAoC+P,EAAc/P,kDAC9Ew/B,GAA4Bx/B,2CAAgE+P,EAAc/P,kCAC1Gy/B,GAA2B,CAACC,EAAkBjgC,wBAAuCigC,mCAA0CjgC,KAC/HkgC,GAA2B,CAACD,EAAkBjgC,wBAAuCigC,2CAAkDjgC,KAGrJ,MAAMmgC,GAET9xC,YAAY3E,GACRzD,KAAKyD,OAASA,aAAkBk1C,GAAal1C,EAAS,IAAIk1C,GAAWl1C,GAElE2E,CAAC/K,OAAOwC,YAAyC,OAAOG,KACxDoI,OACH,IAAIhL,EACJ,OAAKA,EAAI4C,KAAKm6C,sBAAsB16C,KAAe64C,GAAA,GAC9Cl7C,EAAI4C,KAAKo6C,aAAah9C,EAAEG,QAAQkC,KAAe64C,GAAA,EACtCl7C,EAEXgL,MAAM7K,GAAe,OAAOyC,KAAKyD,OAAOqH,MAAMvN,GAC9C6K,OAAO7K,GAAe,OAAOyC,KAAKyD,OAAOoG,OAAOtM,GAChD6K,YAAqCkS,GACxC,IAAIld,EACJ,IAAKA,EAAI4C,KAAKX,QAAQI,KAAQ,OAAO,KACrC,GAAa,MAAR6a,GAAiBld,EAAEG,MAAM0tB,aAAe3Q,EACzC,MAAUhQ,MAAMuvC,GAAmBv/B,IAEvC,OAAOld,EAAEG,MAEN6K,gBAAgB+iB,GACnB,GAAIA,GAAc,EAAK,OAAO,IAAIpnB,WAAW,GAC7C,MAAMuX,EAAMte,OAAA+1B,GAAA,aAAA/1B,CAAagD,KAAKyD,OAAO+I,KAAK2e,IAC1C,GAAI7P,EAAI1X,WAAaunB,EACjB,MAAU7gB,MAAM2vC,GAAyB9uB,EAAY7P,EAAI1X,aAI7D,OAAiB0X,EAAIrX,WAAa,GAAM,GACvBqX,EAAIrX,WAAaqX,EAAI1X,YAAe0X,EAAItX,OAAOJ,WAAa0X,EAAMA,EAAIhW,QAEpF8C,WAAWiyC,GAAc,GAC5B,MAAM//B,EAAO+P,EAAcJ,OACrB8oB,EAAU/yC,KAAKs6C,YAAYhgC,GAC3BhS,EAASyqC,GAAWA,EAAQP,SAClC,GAAI6H,IAAgB/xC,EAChB,MAAUgC,MAAMwvC,GAAYx/B,IAEhC,OAAOhS,EAEDF,qBACN,MAAMkT,EAAMtb,KAAKyD,OAAO+I,KAAK+tC,IACvBrsC,EAAKoN,GAAO,IAAIs+B,GAAWt+B,GAC3B1J,IAAQ1D,GAAMA,EAAG0E,UAAU,IACjC,MAAO,CAAEnT,KAAMmS,GAAO,EAAGrU,MAAOqU,GAE1BxJ,aAAaoyC,GACnB,MAAMl/B,EAAMtb,KAAKyD,OAAO+I,KAAKguC,GAC7B,IAAKl/B,EAAO,OAAOg9B,GAAA,EACnB,GAAIh9B,EAAI1X,WAAa42C,EACjB,MAAUlwC,MAAMyvC,GAAuBS,EAAgBl/B,EAAI1X,aAE/D,MAAO,CAAEnE,MAAM,EAAOlC,MAAOg1C,GAAQ38B,OAAO0F,KAK7C,MAAMm/B,GAITryC,YAAY3E,EAAaG,GACrB5D,KAAKyD,OAASA,aAAkBs1C,GAAkBt1C,EAC5CzG,OAAAi8C,GAAA,EAAAj8C,CAAayG,GACb,IAAI61C,GAAsB71C,EAAQG,GAClC,IAAIm1C,GAAgBt1C,GAEvB2E,CAAC/K,OAAO4C,iBAAmD,OAAOD,KAC5DoI,iDACT,IAAIhL,EACJ,OAAKA,QAAU4C,KAAKm6C,sBAAsB16C,KAAe64C,GAAA,GACpDl7C,QAAU4C,KAAKo6C,aAAah9C,EAAEG,QAAQkC,KAAe64C,GAAA,EAC5Cl7C,IAELgL,MAAM7K,6CAAe,aAAayC,KAAKyD,OAAOqH,MAAMvN,KACpD6K,OAAO7K,6CAAe,aAAayC,KAAKyD,OAAOoG,OAAOtM,KACtD6K,YAAqCkS,6CAC9C,IAAIld,EACJ,IAAKA,QAAU4C,KAAKX,QAAQI,KAAQ,OAAO,KAC3C,GAAa,MAAR6a,GAAiBld,EAAEG,MAAM0tB,aAAe3Q,EACzC,MAAUhQ,MAAMuvC,GAAmBv/B,IAEvC,OAAOld,EAAEG,QAEA6K,gBAAgB+iB,6CACzB,GAAIA,GAAc,EAAK,OAAO,IAAIpnB,WAAW,GAC7C,MAAMuX,EAAMte,OAAA+1B,GAAA,aAAA/1B,OAAmBgD,KAAKyD,OAAO+I,KAAK2e,IAChD,GAAI7P,EAAI1X,WAAaunB,EACjB,MAAU7gB,MAAM2vC,GAAyB9uB,EAAY7P,EAAI1X,aAI7D,OAAiB0X,EAAIrX,WAAa,GAAM,GACvBqX,EAAIrX,WAAaqX,EAAI1X,YAAe0X,EAAItX,OAAOJ,WAAa0X,EAAMA,EAAIhW,UAE9E8C,WAAWiyC,GAAc,6CAClC,MAAM//B,EAAO+P,EAAcJ,OACrB8oB,QAAgB/yC,KAAKs6C,YAAYhgC,GACjChS,EAASyqC,GAAWA,EAAQP,SAClC,GAAI6H,IAAgB/xC,EAChB,MAAUgC,MAAMwvC,GAAYx/B,IAEhC,OAAOhS,IAEKF,+DACZ,MAAMkT,QAAYtb,KAAKyD,OAAO+I,KAAK+tC,IAC7BrsC,EAAKoN,GAAO,IAAIs+B,GAAWt+B,GAC3B1J,IAAQ1D,GAAMA,EAAG0E,UAAU,IACjC,MAAO,CAAEnT,KAAMmS,GAAO,EAAGrU,MAAOqU,KAEpBxJ,aAAaoyC,6CACzB,MAAMl/B,QAAYtb,KAAKyD,OAAO+I,KAAKguC,GACnC,IAAKl/B,EAAO,OAAOg9B,GAAA,EACnB,GAAIh9B,EAAI1X,WAAa42C,EACjB,MAAUlwC,MAAMyvC,GAAuBS,EAAgBl/B,EAAI1X,aAE/D,MAAO,CAAEnE,MAAM,EAAOlC,MAAOg1C,GAAQ38B,OAAO0F,OAK7C,MAAMo/B,WAA0BR,GAMnC9xC,YAAY3E,GACR6F,MAAM,IAAIvF,WAAW,IANjB/D,KAAAy2C,SAAU,EAEVz2C,KAAA26C,MAAe,GACf36C,KAAA46C,YAAc,EACd56C,KAAA66C,iBAAmB,EAGvB76C,KAAKqI,MAAQ5E,aAAkB60C,GAAA,EAAY70C,EAAS,IAAI60C,GAAA,EAAU70C,GAE/D2E,OACH,MAAMC,MAAEA,EAAKuyC,YAAEA,EAAWC,iBAAEA,GAAqB76C,KAC3C86C,EAAazyC,EAAME,QAAQzI,OAC3B4zB,EAAkBrrB,EAAMG,aAAa1I,OAC3C,IAAKE,KAAKy2C,QAAS,CAGf,OAFAz2C,KAAKy2C,SAAU,EAER,CAAEl5C,MADOg1C,GAAQlB,SAAShpC,EAAMC,OAAQ+hB,EAAcJ,QACpCxqB,KAAMm7C,GAAeE,GAAcD,GAAoBnnB,GAEpF,GAAImnB,EAAmBnnB,EAAiB,CACpC,MAAM8jB,EAAQnvC,EAAMG,aAAaxI,KAAK66C,oBAGtC,OAFA76C,KAAK26C,MAAQnD,EAAY,KAAW,QAE7B,CAAE/3C,MAAM,EAAOlC,MADNg1C,GAAQlB,SAASmG,EAAOntB,EAAcM,kBAG1D,GAAIiwB,EAAcE,EAAY,CAC1B,MAAMtD,EAAQnvC,EAAME,QAAQvI,KAAK46C,eAGjC,OAFA56C,KAAK26C,MAAQnD,EAAe,QAErB,CAAE/3C,MAAM,EAAOlC,MADNg1C,GAAQlB,SAASmG,EAAOntB,EAAcG,cAI1D,OADAxqB,KAAK26C,MAAQ,GACNrC,GAAA,EAEJlwC,gBAAgByqC,GACnB,OACA,SAASkI,EAAmB7oB,GACxB,OAAQA,GAAM,IAAIjtB,OAAgB,CAACwB,EAASq1B,IAAgB,IACrDr1B,KACCq1B,EAAiB,UAAK,CAACA,EAAiB,WAAM,MAC9CA,EAAa,MAAK,CAACA,EAAa,OAAM,MACtCA,EAAe,QAAK,CAACA,EAAe,SAAM,MAC1CA,EAAa,MAAK,CAACA,EAAa,OAAM,MACvCif,EAAmBjf,EAAiB,WACxC,IATAif,CAAmB/6C,KAAK26C,OAY5BvyC,YAAqCkS,GACxC,IAAIld,EACJ,IAAKA,EAAI4C,KAAKX,QAAQI,KAAQ,OAAO,KACrC,GAAa,MAAR6a,GAAiBld,EAAEG,MAAM0tB,aAAe3Q,EACzC,MAAUhQ,MAAMuvC,GAAmBv/B,IAEvC,OAAOld,EAAEG,MAEN6K,aACH,MAAMkS,EAAO+P,EAAcJ,OACrB8oB,EAAU/yC,KAAKs6C,YAAYhgC,GAC3BhS,EAASyqC,GAAWA,EAAQP,SAClC,IAAKO,IAAYzqC,EACb,MAAUgC,MAAMwvC,GAAYx/B,IAEhC,OAAOhS,GAKR,MAAMiyC,GAAU,EAIVS,GAAQ,IAAIj3C,WAAWk3C,GAEpC,IAAK,IAAI3+C,GAAI,EAAGA,GAAI2+C,EAAkB3+C,IAAK,EACvC0+C,GAAM1+C,IALe,SAKAgW,WAAWhW,IAI7B,SAAS4+C,GAAyBl3C,EAAoBmB,EAAQ,GACjE,IAAK,IAAI7I,GAAK,EAAGyB,EAAIi9C,GAAMl7C,SAAUxD,EAAIyB,GACrC,GAAIi9C,GAAM1+C,KAAO0H,EAAOmB,EAAQ7I,GAC5B,OAAO,EAGf,OAAO,EAIJ,MAAM6+C,GAAcH,GAAMl7C,OAEpBs7C,GAAkBD,GAAcZ,GAEhCc,GAAkC,EAAdF,GAAkBZ,GChM5C,MAAMe,WAAwB7Y,GAcjCr6B,cAAwBkB,QA4BdtJ,KAAAmkB,YAAc,EACdnkB,KAAA6zC,OAAsB,GACtB7zC,KAAA8zC,SAA8B,GAC9B9zC,KAAAu7C,eAAiC,GA1CpCnzC,mBAAmDu6B,GAEtD,MAAM7Q,EAAU6Q,EAAK19B,OAAO,SAASi1B,EAAQhI,EAAWrtB,GACpD,OAAI4R,MAAMC,QAAQ7R,GAAaA,EAAEI,OAAOi1B,EAAShI,GAC3CrtB,aAAa22C,GACZ,IAAItpB,KAAOrtB,EAAEyD,OAAO8oB,OAAO1lB,IAAI,CAACxB,EAAG5N,IAAMuI,EAAE+zB,WAAWt8B,KADnB,IAAI41B,EAAIrtB,IAEnD,IAAIstB,OAAQttB,GAAwBA,aAAakhB,GAEpD,OAAO,IAAIu1B,IAAkBG,UAAU3pB,GAAS,GAK7C1pB,MAAwBoyB,GAC3B,IAAK5O,EAAS8F,aAAa8I,EAAOlgB,MAAO,CACrC,MAAMC,KAAEA,EAAIza,OAAEA,EAAM+2B,UAAEA,GAAc2D,EACpC,GAAI16B,EAAS,WAET,MAAM,IAAIwZ,WAAW,sDAEzBoiC,GAAUj/C,KAAKuD,KAAM62B,GAAa,EAC5B,IAAI9yB,WAAW,GACfoxB,GAAe5a,EAAKrV,OAAQpF,EAAQya,EAAK0c,aAC7CyL,MAAMliC,KAAK,IAAI8pB,GAAUxqB,EAAQ+2B,IAEvC,OAAOvtB,MAAMu5B,MAAMrI,GAGhBpyB,UAA0BuzC,GAAoB,OAAO37C,KACrDoI,gBAAsCoyB,GAEzC,OAAOx6B,KAAK6iC,MAAMrI,EAAO3J,SAG7B6R,YAAqB,OAAO1iC,KAAK6zC,OACjCptC,cAAuB,OAAOzG,KAAK8zC,SACnClwC,iBAA0B,OAAO5D,KAAKmkB,YACtCwzB,oBAA6B,OAAO33C,KAAKu7C,gBAS7C,SAASG,GAAiClmB,GACtC,MAAM5xB,EAAc4xB,EAAO5xB,WAAa,GAAK,EAI7C,OAHA5D,KAAKyG,QAAQjG,KAAKg1B,GAClBx1B,KAAK23C,cAAcn3C,KAAK,IAAI0wC,GAAalxC,KAAKmkB,YAAavgB,IAC3D5D,KAAKmkB,aAAevgB,EACb5D,KAwEX,SAAS47C,GAAmIphB,GACxI,OAAOkhB,GAAUj/C,KAAKuD,KAAMw6B,EAAOhF,OAAOnwB,SAAS,EAAGm1B,EAAO16B,OAAS06B,EAAOxD,SAIjF,SAAS6kB,GAAuErhB,GAC5E,MAAM16B,OAAEA,EAAM01B,OAAEA,EAAM3uB,aAAEA,GAAiB2zB,EACnCshB,EAAcj1C,EAAa,GAC3Bk1C,EAAal1C,EAAa/G,GAC1B8D,EAAaO,KAAKC,IAAI23C,EAAaD,EAAatmB,EAAO5xB,WAAak4C,GAI1E,OAFAJ,GAAUj/C,KAAKuD,KAAMhD,OAAA+1B,GAAA,mBAAA/1B,EAAoB6J,EAAa,GAAI/G,EAAQ+G,IAClE60C,GAAUj/C,KAAKuD,KAAMw1B,EAAOnwB,SAASy2C,EAAaA,EAAcl4C,IACzD5D,KAIX,SAASg8C,GAA0ExhB,GAC/E,MAAM16B,OAAEA,EAAM+G,aAAEA,GAAiB2zB,EAMjC,OAJI3zB,GACA60C,GAAUj/C,KAAKuD,KAAMhD,OAAA+1B,GAAA,mBAAA/1B,CAAmB6J,EAAa,GAAI/G,EAAQ+G,IAG9D7G,KAAK6iC,MAAMrI,EAAO5B,WAAW,IAIxC,SAASqjB,GAA6EzhB,GAClF,OAAOx6B,KAAKy7C,UAAUjhB,EAAOlgB,KAAK4R,SAASxgB,IAAI,CAACxB,EAAG5N,IAAMk+B,EAAO5B,WAAWt8B,IAAK61B,OAAOif,UAAU,GAGrGkK,GAAgBp9C,UAAUklC,UAnD1B,SAAmE5I,GAE/D,IAAIhF,EACJ,OAAIgF,EAAO3D,WAAa2D,EAAO16B,OAEpB47C,GAAUj/C,KAAKuD,KAAM,IAAI+D,WAAW,KACnCyxB,EAASgF,EAAOhF,kBAAmBzxB,WAEpC23C,GAAUj/C,KAAKuD,KAAMm1B,GAAeqF,EAAOt1B,OAAQs1B,EAAO16B,OAAQ01B,IAOtEkmB,GAAUj/C,KAAKuD,KAAMs1B,GAAUkF,KAqC1C8gB,GAAgBp9C,UAAUmlC,SAA2BuY,GACrDN,GAAgBp9C,UAAU4lC,WAA2B8X,GACrDN,GAAgBp9C,UAAUmmC,UAAuBwX,GACjDP,GAAgBp9C,UAAUomC,YAAuBuX,GACjDP,GAAgBp9C,UAAUqmC,qBAA2BqX,GACrDN,GAAgBp9C,UAAUsmC,UAA2BoX,GACrDN,GAAgBp9C,UAAU2mC,eAA2B+W,GACrDN,GAAgBp9C,UAAUonC,UAA2BsW,GACrDN,GAAgBp9C,UAAU6nC,aAA2B6V,GACrDN,GAAgBp9C,UAAU8nC,UAA2BgW,GACrDV,GAAgBp9C,UAAU+nC,YAAyBgW,GACnDX,GAAgBp9C,UAAUgoC,WAhH1B,SAA+D1L,GAC3D,MAAMlgB,KAAEA,EAAIxa,OAAEA,EAAMiwB,QAAEA,EAAOlpB,aAAEA,GAAiB2zB,EAIhD,GAFAkhB,GAAUj/C,KAAKuD,KAAM+vB,GAEjBzV,EAAK7c,OAASyoB,EAAUkB,OACxB,OAAO60B,GAAqBx/C,KAAKuD,KAAMw6B,GACpC,GAAIlgB,EAAK7c,OAASyoB,EAAU+J,MAAO,CAEtC,GAAIuK,EAAOt1B,QAAU,EAIjB,OAFAw2C,GAAUj/C,KAAKuD,KAAM6G,GAEdo1C,GAAqBx/C,KAAKuD,KAAMw6B,GACpC,CAIH,MAAM0hB,EAAiBnsB,EAAQ9qB,OAAO,CAACJ,EAAGC,IAAMX,KAAK8R,IAAIpR,EAAGC,GAAIirB,EAAQ,IAClEosB,EAAe,IAAIn2C,WAAWk2C,EAAiB,GAE/CzH,EAAe,IAAIzuC,WAAWk2C,EAAiB,GAAG79B,MAAM,GACxD+9B,EAAiB,IAAIp2C,WAAWlG,GAIhCu8C,EAAmBr/C,OAAA+1B,GAAA,mBAAA/1B,EAAoB6J,EAAa,GAAI/G,EAAQ+G,GACtE,IAAK,IAAIilB,EAAQjrB,EAAOsE,GAAS,IAAKA,EAAQrF,IACe,KAApDe,EAAQ4zC,EAAa3oB,EAASiE,EAAQ5qB,OACvCtE,EAAQ4zC,EAAa3oB,GAAUuwB,EAAiBvwB,IAEpDswB,EAAej3C,GAASk3C,EAAiBl3C,GAAStE,IAChDs7C,EAAarwB,GAEnB4vB,GAAUj/C,KAAKuD,KAAMo8C,GAErB,IAAK,IAAI/sB,EAAsBitB,GAAc,EAAGniB,EAAc7f,EAAK4R,SAASpsB,SAAUw8C,EAAaniB,GAC/F,GAAI9K,EAAQmL,EAAO5B,WAAW0jB,GAAa,CACvC,MAAMxwB,EAASxR,EAAKyV,QAAQusB,GACtBC,EAAcp4C,KAAKC,IAAItE,EAAQq8C,EAAarwB,IAClD9rB,KAAK6iC,MAAMxT,EAAM/pB,MAAMmvC,EAAa3oB,GAASywB,MAK7D,OAAOv8C,MAoEXs7C,GAAgBp9C,UAAUsoC,cAA2BoV,GACrDN,GAAgBp9C,UAAU2oC,mBAA2BmV,GACrDV,GAAgBp9C,UAAU4oC,SAAyBmV,GC5M5C,MAAMO,WAA0B/Z,GAC5Br6B,MAA+Bw6B,GAClC,OAAe,MAARA,OAAe34B,EAAYX,MAAMu5B,MAAMD,GAE3Cx6B,WAA+B0jB,OAAEA,IACpC,MAAO,CAAEjvB,KAAQwuB,EAAUS,GAAQ3U,eAEhC/O,UAA6B0jB,OAAEA,EAAMtE,SAAEA,EAAQC,SAAEA,IACpD,MAAO,CAAE5qB,KAAQwuB,EAAUS,GAAQ3U,cAAeqQ,SAAYA,EAAUC,SAAYA,GAEjFrf,YAAiC0jB,OAAEA,EAAMlE,UAAEA,IAC9C,MAAO,CAAE/qB,KAAQwuB,EAAUS,GAAQ3U,cAAeyQ,UAAazB,EAAUyB,IAEtExf,aAAmC0jB,OAAEA,IACxC,MAAO,CAAEjvB,KAAQwuB,EAAUS,GAAQ3U,eAEhC/O,WAA+B0jB,OAAEA,IACpC,MAAO,CAAEjvB,KAAQwuB,EAAUS,GAAQ3U,eAEhC/O,WAA+B0jB,OAAEA,IACpC,MAAO,CAAEjvB,KAAQwuB,EAAUS,GAAQ3U,eAEhC/O,cAAqC0jB,OAAEA,EAAM3D,MAAEA,EAAKP,UAAEA,IACzD,MAAO,CAAE/qB,KAAQwuB,EAAUS,GAAQ3U,cAAegR,MAASA,EAAOP,UAAaA,GAE5Exf,WAAgC0jB,OAAEA,EAAMxD,KAAEA,IAC7C,MAAO,CAAEzrB,KAAQwuB,EAAUS,GAAQ3U,cAAemR,KAAQlC,EAASkC,IAEhElgB,WAA+B0jB,OAAEA,EAAMxD,KAAEA,EAAId,SAAEA,IAClD,MAAO,CAAE3qB,KAAQwuB,EAAUS,GAAQ3U,cAAemR,KAAQjC,EAASiC,GAAOd,YAEvEpf,gBAAyC0jB,OAAEA,EAAM6C,SAAEA,EAAQrG,KAAEA,IAChE,MAAO,CAAEzrB,KAAQwuB,EAAUS,GAAQ3U,cAAemR,KAAQjC,EAASiC,GAAOqG,YAEvEvmB,eAAuC0jB,OAAEA,EAAMxD,KAAEA,IACpD,MAAO,CAAEzrB,KAAQwuB,EAAUS,GAAQ3U,cAAemR,KAAQhC,EAAagC,IAEpElgB,WAA+B0jB,OAAEA,IACpC,MAAO,CAAEjvB,KAAQwuB,EAAUS,GAAQ3U,eAEhC/O,aAAmC0jB,OAAEA,IACxC,MAAO,CAAEjvB,KAAQwuB,EAAUS,GAAQ3U,eAEhC/O,YAAiC0jB,OAAEA,EAAMruB,KAAEA,EAAIsyB,QAAEA,IACpD,MAAO,CACHlzB,KAAQwuB,EAAUS,GAAQ3U,cAC1B1Z,KAAQyoB,EAAUzoB,GAClBsyB,QAAW,IAAIA,IAGhB3nB,gBAA2Cw6B,GAC9C,OAAO5iC,KAAK6iC,MAAMD,EAAKhS,YAEpBxoB,sBAAqD0jB,OAAEA,EAAM9D,UAAEA,IAClE,MAAO,CAAEnrB,KAAQwuB,EAAUS,GAAQ3U,cAAe6Q,UAAaA,GAE5D5f,oBAAiD0jB,OAAEA,EAAM9E,SAAEA,IAC9D,MAAO,CAAEnqB,KAAQwuB,EAAUS,GAAQ3U,cAAe6P,SAAYA,GAE3D5e,UAA8B0jB,OAAEA,EAAM5E,WAAEA,IAC3C,MAAO,CAAErqB,KAAQwuB,EAAUS,GAAQ3U,cAAe+P,WAAcA,IC5BjE,MAAMu1B,WAA4Bha,GAG9Br6B,mBAAmDu6B,GAEtD,MAAM7Q,EAAU6Q,EAAK19B,OAAO,SAASi1B,EAAQhI,EAAWrtB,GACpD,OAAI4R,MAAMC,QAAQ7R,GAAaA,EAAEI,OAAOi1B,EAAShI,GAC3CrtB,aAAa22C,GACZtpB,EAAGzT,OAAO5Z,EAAEyD,OAAO8oB,OAAO1lB,IAC7B,CAAC9K,EAAGtE,IAAM,IAAIq/B,GAAO/6B,EAAG,CAACiE,EAAE+zB,WAAWt8B,OAFA,IAAI41B,EAAIrtB,IAGnD,IAAIstB,OAAQttB,GAAwBA,aAAa82B,IAEpD,OAAO,IAAI8gB,IAAsBhB,UAAU3pB,GAGxC1pB,MAAwB0zB,GAC3B,MAAMvhB,KAAEA,EAAI1d,KAAEA,EAAIiD,OAAEA,GAAWg8B,GACzB52B,OAAEA,EAAM2xB,UAAEA,EAASI,WAAEA,GAAe1c,EACpCD,EAAOsR,EAAS8F,aAAaoK,EAAOxhB,MAAQwhB,EAAOxhB,KAAKuW,QAAUiL,EAAOxhB,KACzE7T,EAAUzJ,OAAO8kC,OAAO,GAAIvnB,EAAK9T,QAAS,CAAE2B,CAACoe,EAAWk2B,eAAWzyC,IACzE,OAAAjN,OAAA8kC,OAAA,CACIjlC,KAAQA,EACRub,MAAStY,EACT48C,SAAY7lB,GAAa,EACnBpgB,MAAM5Q,KAAK,CAAE/F,UAAU,IAAM,GAC7B,IAAIy1B,GAAY0B,EAAY/xB,EAAQpF,EAAQ,KAAMm1B,MACrD3rB,MAAMu5B,MAAM9c,EAAOoW,IAAI5hB,EAAK6c,MAAM9c,EAAMpV,EAAQpF,EAAQ,EAAG2G,MAG/D2B,YAAc,MAAO,GACrBA,WAA0BotB,OAAEA,EAAMtwB,OAAEA,EAAMpF,OAAEA,IAC/C,MAAO,CAAEy3B,KAAQ,IAAIhC,GAAYC,EAAQtwB,EAAQpF,EAAQ,KAAM80B,MAE5DxsB,SAAwBoyB,GAC3B,MAAO,CACHjD,KAAQiD,EAAOlgB,KAAKkN,SAAW,GACzB,IAAIgT,EAAOhF,QACX,IAAImnB,GAAiBniB,EAAOhF,OAAsC,KAGzEptB,WAA4BoyB,GAC/B,MAAO,CAAEjD,KAAQ,IAAIiD,EAAOhF,SAEzBptB,UAA0BoyB,GAC7B,MAAO,CAAEjD,KAAQ,IAAIiD,GAASzR,OAAU,IAAIyR,EAAO3zB,eAEhDuB,YAA8BoyB,GACjC,MAAO,CAAEjD,KAAQ,IAAIqlB,GAAepiB,IAAUzR,OAAQ,IAAIyR,EAAO3zB,eAE9DuB,qBAAgDoyB,GACnD,MAAO,CAAEjD,KAAQ,IAAIqlB,GAAepiB,KAEjCpyB,UAA2BoyB,GAC9B,MAAO,CACHjD,KAAQiD,EAAOlgB,KAAKgO,OAASlC,EAAS4H,IAChC,IAAIwM,EAAOhF,QACX,IAAImnB,GAAiBniB,EAAOhF,OAAQ,KAG3CptB,eAAoCoyB,GACvC,MAAO,CAAEjD,KAAQ,IAAIolB,GAAiBniB,EAAOhF,OAAQ,KAElDptB,UAA0BoyB,GAC7B,MAAO,CACHjD,KAAQiD,EAAOlgB,KAAKgO,KAAOjC,EAASiI,YAC9B,IAAIkM,EAAOhF,QACX,IAAImnB,GAAiBniB,EAAOhF,OAAQ,KAG3CptB,aAAgCoyB,GACnC,MAAO,CAAEjD,KAAQ,IAAIolB,GAAiBniB,EAAOhF,OAAQ,KAElDptB,UAA0BoyB,GAC7B,MAAO,CACHzR,OAAU,IAAIyR,EAAO3zB,cACrBqlB,SAAYsO,EAAOlgB,KAAK4R,SAASxgB,IAAI,CAAC9K,EAAGtE,IACrC0D,KAAK6iC,MAAM,IAAIlH,GAAO/6B,EAAG,CAAC45B,EAAO5B,WAAWt8B,QAGjD8L,YAA8BoyB,GACjC,MAAO,CACHtO,SAAYsO,EAAOlgB,KAAK4R,SAASxgB,IAAI,CAAC9K,EAAGtE,IACrC0D,KAAK6iC,MAAM,IAAIlH,GAAO/6B,EAAG,CAAC45B,EAAO5B,WAAWt8B,QAGjD8L,WAA4BoyB,GAC/B,MAAO,CACHlD,KAAQ,IAAIkD,EAAOzK,SACnBhH,OAAUyR,EAAOlgB,KAAK7c,OAASyoB,EAAU+J,MAAQ,IAAIuK,EAAO3zB,mBAAgBoD,EAC5EiiB,SAAYsO,EAAOlgB,KAAK4R,SAASxgB,IAAI,CAAC9K,EAAGtE,IAAM0D,KAAK6iC,MAAM,IAAIlH,GAAO/6B,EAAG,CAAC45B,EAAO5B,WAAWt8B,QAG5F8L,cAAkCoyB,GACrC,MAAO,CAAEjD,KAAQ,IAAIiD,EAAOhF,SAEzBptB,mBAA4CoyB,GAC/C,MAAO,CACHtO,SAAYsO,EAAOlgB,KAAK4R,SAASxgB,IAAI,CAAC9K,EAAGtE,IACrC0D,KAAK6iC,MAAM,IAAIlH,GAAO/6B,EAAG,CAAC45B,EAAO5B,WAAWt8B,QAGjD8L,SAAyBoyB,GAC5B,MAAO,CACHtO,SAAYsO,EAAOlgB,KAAK4R,SAASxgB,IAAI,CAAC9K,EAAGtE,IACrC0D,KAAK6iC,MAAM,IAAIlH,GAAO/6B,EAAG,CAAC45B,EAAO5B,WAAWt8B,SAM5D,SAAUsgD,GAAepiB,GACrB,IAAK,MAAMqiB,KAAUriB,QACXqiB,EAAO53C,OAAO,CAACkX,EAAK4Y,OACZ5Y,KAAO,KAAc,IAAP4Y,GAAalf,SAAS,KAAKvQ,OAAO,KAC3D,IAAIw3C,cAKf,SAAUH,GAAiBnnB,EAAkCwB,GACzD,IAAK,IAAI16B,GAAK,EAAGyB,EAAIy3B,EAAO11B,OAASk3B,IAAU16B,EAAIyB,WACtCkkC,GAAG9F,IAAI3G,EAAOnwB,UAAU/I,EAAI,GAAK06B,GAAS16B,EAAI,GAAK06B,MC7I7D,MAAM+lB,WAAuEzE,GAAA,EAiBhFlwC,YAAYQ,GACRU,QAIMtJ,KAAAg9C,UAAY,EACZh9C,KAAAi9C,UAAW,EAGXj9C,KAAAk9C,MAAQ,IAAI7E,GACZr4C,KAAAy2C,QAAyB,KACzBz2C,KAAAm9C,kBAAiC,GACjCn9C,KAAAo9C,mBAAkC,GAVxCp9C,KAAKq9C,cAAez0C,GAA2C,kBAAxBA,EAAQ00C,aAA6B10C,EAAQ00C,YAfjFl1C,mBAAmBQ,GACtB,MAAU0B,MAAM,mDAGblC,kBAEHm1C,EAEAC,GAEA,MAAUlzC,MAAM,kDAmBblC,SAASmwC,GAAY,GACxB,OAAOv4C,KAAKk9C,MAAMrnC,SAAS0iC,GAIxBnwC,aAAamwC,GAAY,GAC5B,OAAOv4C,KAAKk9C,MAAM97C,aAAam3C,GAO5BnwC,SAAS5C,GACZ,OAAIxI,OAAAi8C,GAAA,EAAAj8C,CAAewI,GACRA,EAAM9F,KAAMmF,GAAM7E,KAAKy9C,SAAS54C,IAChC7H,OAAAi8C,GAAA,EAAAj8C,CAAgCwI,GA+RnD,SAA0Ek4C,EAA8Bn1C,iEACpG,IAA0Bo1C,EAAAnF,EAAA,EAAAjwC,KAAOq1C,QAAAD,EAAAt+C,QAAAI,MAAA,CAAtB,MAAM+3C,EAAKoG,EAAArgD,MAClBmgD,EAAO1jC,MAAMw9B,6GAEjB,OAAOkG,EAAOxrC,WAlSC2rC,CAAc79C,KAAMwF,GAqRvC,SAA+Dk4C,EAA8Bl4C,GACzF,MAAMlB,EAAUkB,aAAiBs4C,GAASt4C,EAAMlB,OAASkB,EACzD,IAAK,MAAMgyC,KAASlzC,EAChBo5C,EAAO1jC,MAAMw9B,GAEjB,OAAOkG,EAAOxrC,SAxRHurC,CAASz9C,KAAYwF,GAGhCmE,aAAsB,OAAO3J,KAAKk9C,MAAMvzC,OACjCvB,CAAC/K,OAAO4C,iBAAmB,OAAOD,KAAKk9C,MAAM7/C,OAAO4C,iBACpDmI,YAAYQ,GAAsC,OAAO5I,KAAKk9C,MAAM/zC,YAAYP,GAChFR,aAAaQ,GAA8C,OAAO5I,KAAKk9C,MAAM7zC,aAAaT,GAE1FR,QACH,OAAOpI,KAAK+9C,QAAQb,MAAM9yC,QAEvBhC,MAAMwB,GACT,OAAO5J,KAAK+9C,QAAQb,MAAM/yC,MAAMP,GAE7BxB,SAEH,OADApI,KAAKq9C,aAAer9C,KAAKoK,QAAUpK,KAAK+9C,MAAM/9C,KAAKk9C,MAAOl9C,KAAKy2C,SACxDz2C,KAEJoI,MAAM41C,EAA2Ch+C,KAAKk9C,MAAO50C,EAA2B,MAgC3F,OA9BK01C,IAASh+C,KAAKk9C,OAAWc,aAAgB3F,GAC1Cr4C,KAAKk9C,MAAQc,GAEbh+C,KAAKk9C,MAAQ,IAAI7E,GACb2F,GAAQhhD,OAAAi8C,GAAA,EAAAj8C,CAAoBghD,GAC5Bh+C,KAAKmJ,YAAY,CAAEmR,KAAM,UAAWvR,OAAOi1C,GACpCA,GAAQhhD,OAAAi8C,GAAA,EAAAj8C,CAAqBghD,IACpCh+C,KAAKqJ,aAAa,CAAE40C,YAAY,IAASn1C,KAAKk1C,IAIlDh+C,KAAKi9C,UAAYj9C,KAAKy2C,SACtBz2C,KAAKk+C,eAGTl+C,KAAKi9C,UAAW,EAChBj9C,KAAKm9C,kBAAoB,GACzBn9C,KAAKo9C,mBAAqB,GAErB90C,GAAWA,IAAWtI,KAAKy2C,UACb,OAAXnuC,GACAtI,KAAKg9C,UAAY,EACjBh9C,KAAKy2C,QAAU,OAEfz2C,KAAKi9C,UAAW,EAChBj9C,KAAKy2C,QAAUnuC,EACftI,KAAKm+C,aAAa71C,KAInBtI,KAGJoI,MAAMgyB,GACT,IAAI9xB,EACJ,IAAKtI,KAAKk9C,MACN,MAAU5yC,MAAM,+BACb,IAAK8vB,KAAW9xB,EAAS8xB,EAAM9xB,QAClC,OAAOtI,KAAKkS,eAAYjI,EACrB,GAAI3B,IAAWtI,KAAKy2C,QAAS,CAChC,GAAIz2C,KAAKi9C,UAAYj9C,KAAKq9C,aACtB,OAAOr9C,KAAKoK,QAEhBpK,KAAK+9C,MAAM/9C,KAAKk9C,MAAO50C,GAE1B8xB,aAAiB0jB,GACZ99C,KAAKy9C,SAASrjB,EAAM91B,QACpBtE,KAAKo+C,kBAAkBhkB,GAGvBhyB,cAAuC2qC,EAAqB//B,EAAY,GAE9E,MAAM1S,EAAI0S,EAAY,EAChBhP,EAASuuC,GAAQx8B,OAAOg9B,GACxBsL,EAAiBr6C,EAAOJ,WACxByxB,EAAegpB,EAAiB,EAAI/9C,GAAMA,EAC1Cg+C,EAAgBjpB,EAAcgpB,EAAiB,EAarD,OAXItL,EAAQ9nB,aAAeZ,EAAcG,YACrCxqB,KAAKo9C,mBAAmB58C,KAAK,IAAIgzB,GAAU6B,EAAa0d,EAAQ5nB,WAAYnrB,KAAKg9C,YAC1EjK,EAAQ9nB,aAAeZ,EAAcM,iBAC5C3qB,KAAKm9C,kBAAkB38C,KAAK,IAAIgzB,GAAU6B,EAAa0d,EAAQ5nB,WAAYnrB,KAAKg9C,YAIpFh9C,KAAKu+C,OAAOv4C,WAAWw4C,GAAGnpB,EAAc,IAEpCgpB,EAAiB,GAAKr+C,KAAKu+C,OAAOv6C,GAE/BhE,KAAKy+C,cAAcH,GAGpBl2C,OAAOgyB,GACb,GAAIp6B,KAAKi9C,SAAU,CACf,MAAMj5C,EAAShH,OAAA+1B,GAAA,aAAA/1B,CAAao9B,GACxBp2B,GAAUA,EAAOJ,WAAa,IAC9B5D,KAAKk9C,MAAMljC,MAAMhW,GACjBhE,KAAKg9C,WAAah5C,EAAOJ,YAGjC,OAAO5D,KAGDoI,aAAaE,GACnB,OAAOtI,KACF0+C,cAAcnM,GAAQ1sC,KAAKyC,IAC3Bq2C,mBAAmBr2C,EAAOgpB,kBAGzBlpB,eACN,OAAOpI,KAAKy+C,cAAc,GAGpBr2C,cACN,OAAOpI,KAAKu+C,OAAOvD,IAGb5yC,cAAc4c,GACpB,OAAOA,EAAS,EAAIhlB,KAAKu+C,OAAO,IAAIx6C,WAAWihB,IAAWhlB,KAGpDoI,kBAAkBw2C,GACxB,MAAMh7C,WAAEA,EAAU8+B,MAAEA,EAAKiV,cAAEA,EAAalxC,QAAEA,GAAY60C,GAAgBuD,SAASD,GACzE/H,EAAc,IAAIhG,GAAqB+N,EAAQ9+C,OAAQ4iC,EAAOiV,GAC9D5E,EAAUR,GAAQ1sC,KAAKgxC,EAAajzC,GAC1C,OAAO5D,KACF0+C,cAAc3L,GACd+L,kBAAkBr4C,GAGjB2B,sBAAsBwoB,EAAoBxH,EAAYyB,GAAU,GACtE,MAAMjnB,WAAEA,EAAU8+B,MAAEA,EAAKiV,cAAEA,EAAalxC,QAAEA,GAAY60C,GAAgBuD,SAASjuB,GACzEimB,EAAc,IAAIhG,GAAqBjgB,EAAW9wB,OAAQ4iC,EAAOiV,GACjEG,EAAkB,IAAIntB,GAAyBksB,EAAaztB,EAAIyB,GAChEkoB,EAAUR,GAAQ1sC,KAAKiyC,EAAiBl0C,GAC9C,OAAO5D,KACF0+C,cAAc3L,GACd+L,kBAAkBr4C,GAGjB2B,kBAAkB3B,GACxB,IAAIzC,EACAO,EAAcw6C,EAClB,IAAK,IAAIziD,GAAK,EAAGyB,EAAI0I,EAAQ3G,SAAUxD,EAAIyB,IAClCiG,EAASyC,EAAQnK,MAAQiI,EAAOP,EAAOJ,YAAc,IACtD5D,KAAKu+C,OAAOv6C,IACP+6C,GAAYx6C,EAAO,GAAK,GAAMA,GAAQ,GACvCvE,KAAKy+C,cAAcM,IAI/B,OAAO/+C,KAGDoI,mBAAmBkpB,GACzB,IAAK,MAAOlI,EAAIgI,KAAWE,EAAkB,CACzC,MAAMkJ,EAASpJ,EAAO,GAAG9W,KAAKwW,iBAC9B,GAAM0J,aAAkBb,GAEjB,CACH,MAAMr1B,EAASk2B,EAAOl2B,OACtB,IAAK,IAAIhI,GAAK,EAAGyB,EAAIuG,EAAOxE,SAAUxD,EAAIyB,GACtCiC,KAAKg/C,sBAAsB16C,EAAOhI,GAAI8sB,EAAI9sB,EAAI,QAJlD0D,KAAKg/C,sBAAsBxkB,EAAQpR,GAAI,GAQ/C,OAAOppB,MAKR,MAAMi/C,WAA6ElC,GAQ/E30C,gBAA6F5C,EAAYoD,GAC5G,OAAO,IAAIq2C,GAA2Br2C,GAAS60C,SAASj4C,IAKzD,MAAM05C,WAA2EnC,GAYpF30C,cACIkB,QACAtJ,KAAKq9C,cAAe,EANjBj1C,gBAA6F5C,GAChG,OAAO,IAAI05C,IAA2BzB,SAASj4C,GAQzC4C,aAAaE,GACnB,OAAOtI,KACFm/C,cAAcV,cAAc,GAC5BE,mBAAmBr2C,EAAOgpB,kBAGzBlpB,eACN,MAAMpE,EAASyuB,GAAO1c,OAAO,IAAI0c,GAC7BzyB,KAAKy2C,QAAUxwB,EAAgByM,GAC/B1yB,KAAKo9C,mBAAoBp9C,KAAKm9C,oBAElC,OAAOn9C,KACFu+C,OAAOv6C,GACPu6C,OAAOv4C,WAAWw4C,GAAGx6C,EAAOJ,aAC5Bu7C,eAKN,MAAMC,WAA2ErC,GAYpF30C,cACIkB,QACAtJ,KAAKq9C,cAAe,EANjBj1C,gBAA6F5C,GAChG,OAAO,IAAI45C,IAA2B3B,SAASj4C,GAQzC4C,gBAAkB,OAAOpI,KACzBoI,aAAaE,GACnB,OAAOtI,KAAKu+C,yBACR3mB,KAAKC,UAAU,CAAEzG,OAAQ9oB,EAAO8oB,OAAO1lB,IAAI2zC,KAAgB,KAAM,MACjEV,mBAAmBr2C,EAAOgpB,kBAExBlpB,mBAAmBkpB,GAGzB,OAFAtxB,KAAKu+C,OAAO,4BACZj1C,MAAMq1C,mBAAmBrtB,GAClBtxB,KAAKu+C,OAAO,SAEbn2C,sBAAsBwoB,EAAoBxH,EAAYyB,GAAU,GAItE,OAHA7qB,KAAKu+C,OAAyC,IAAlCv+C,KAAKm9C,kBAAkBr9C,OAAe,OAAS,WAC3DE,KAAKu+C,UAwDb,SAA+Bj2C,EAAgBsoB,EAAoBxH,EAAYyB,GAAU,GACrF,MAAMjqB,EAAI0H,EAAOgpB,iBAAiBn0B,IAAIisB,GAAK,GACrC3W,EAAQ,IAAIuf,GAAMpxB,EAAE/D,KAAM+D,EAAE0Z,KAAKsW,WAAYhwB,EAAE8oB,SAAU9oB,EAAEywB,UAC3DkJ,EAAUkiB,GAAoBoC,SAAS,IAAIljB,GAAOlpB,EAAO,CAACme,KAChE,OAAOgH,KAAKC,UAAU,CAClBzO,GAAMA,EACNyB,QAAWA,EACXtQ,KAAQ,CACJnC,MAASwY,EAAW9wB,OACpBy6B,QAAWA,IAEhB,KAAM,GAnEU+kB,CAAsBt/C,KAAKy2C,QAAU7lB,EAAYxH,EAAIyB,MACpE7qB,KAAKm9C,kBAAkB38C,KAAK,IAAIgzB,GAAU,EAAG,EAAG,IACzCxzB,KAEDoI,kBAAkBw2C,GAMxB,OALA5+C,KAAKu+C,OAA0C,IAAnCv+C,KAAKo9C,mBAAmBt9C,OAC9B,0BACA,WACNE,KAAKu+C,UA+Db,SAA2BK,GACvB,OAAOhnB,KAAKC,UAAU,CAClBzf,MAASwmC,EAAQ9+C,OACjBy6B,QAAWkiB,GAAoBoC,SAASD,IACzC,KAAM,GAnEUW,CAAkBX,MACjC5+C,KAAKo9C,mBAAmB58C,KAAK,IAAIgzB,GAAU,EAAG,EAAG,IAC1CxzB,KAEJoI,QAOH,OANIpI,KAAKo9C,mBAAmBt9C,OAAS,GACjCE,KAAKu+C,OAAO,SAEZv+C,KAAKy2C,SACLz2C,KAAKu+C,OAAO,OAETj1C,MAAMc,SAsBrB,SAASi1C,IAAYxiD,KAAEA,EAAIyd,KAAEA,EAAIoP,SAAEA,IAC/B,MAAM81B,EAAY,IAAIhD,GACtB,MAAO,CACH3/C,KAAQA,EAAM6sB,SAAYA,EAC1BpP,KAAQklC,EAAU3c,MAAMvoB,GACxB4R,UAAa5R,EAAK4R,UAAY,IAAIxgB,IAAI2zC,IACtCzuB,WAAehF,EAAS8F,aAAapX,GAAoB,CACrD8O,GAAM9O,EAAK8O,GACXE,UAAahP,EAAKgP,UAClBumB,UAAa2P,EAAU3c,MAAMvoB,EAAKuW,eAHO5mB,GCxV9C,MAAM6zC,WACDnkB,GAkERvxB,eAAeu6B,GAEX,IAAIr6B,EAAiB,KAEjBq6B,EAAK,aAAc1Y,KAAU3hB,EAASq6B,EAAK9hC,SAE/C,IAAIyD,EAASq+B,EAAK19B,OAAO,SAASi1B,EAAQhI,EAAWrtB,GACjD,OAAO4R,MAAMC,QAAQ7R,GAAKA,EAAEI,OAAOi1B,EAAShI,GAAM,IAAIA,EAAIrtB,IAC3D,IAAIstB,OAAQttB,GAAgCA,aAAa22C,IAE5D,IAAKlzC,KAAYA,EAAShE,EAAO,IAAMA,EAAO,GAAGgE,QAC7C,MAAM,IAAIpI,UAAU,uEAGnBoE,EAAO,KAAMA,EAAO,GAAK,IAAIk3C,GAAYlzC,EAAQ,EAAG,KAEzDgB,MAAMhF,EAAO,GAAGgW,KAAMhW,GAEtBtE,KAAKy2C,QAAUnuC,EACftI,KAAK85B,QAAUx1B,EA9EZ8D,eAA+D,OAAO,IAAI01C,GAAS,IAAI7zB,GAAO,IAAK,IAYnG7hB,YAAyD3E,GAE5D,IAAKA,EAAU,OAAOq6C,GAAM2B,QAE5B,IAAItzC,EAASuzC,GAAkB75C,KAAQpC,GAEvC,OAAIzG,OAAAi8C,GAAA,EAAAj8C,CAAgCmP,GACzB,KAAaqsC,EAAA,EAAAx4C,UAAA,kCAAM89C,GAAMj4C,WAAWsG,KAApC,GAEPA,EAAOwzC,WAAaxzC,EAASA,EAAOyzC,QAC5BzzC,EAAO7D,OAA4B,IAAIw1C,GAAS3xC,EAAO7D,OAAQ,IAAI6D,IAAnD2xC,GAAM2B,QAE3B,CAAQI,GAAYrH,EAAA,EAAAx4C,UAAA,6BACvB,MAAMmM,QAAe0zC,EACfv3C,EAAS6D,EAAO7D,OAChBC,EAAyB,GAC/B,GAAID,EAAQ,KACR,IAAwB,IAAMw3C,EAANC,EAAAvH,EAAA,EAAArsC,KAAM2zC,QAAAC,EAAA1gD,QAAAI,MAAA,CAAnB,IAAI+3C,EAAKsI,EAAAviD,MAChBgL,EAAQ/H,KAAKg3C,6GAEjB,OAAO,IAAIsG,GAASx1C,EAAQC,GAEhC,OAAOu1C,GAAM2B,UAVV,CAWJtzC,EAAOyzC,QAIPx3C,iBAAqE3E,6CACxE,aAAaq6C,GAAMj4C,KAAQpC,KAIxB2E,mBAAiE0pB,EAA8BC,GAClG,OAAO,IAAI+rB,GAAMtC,GAAY31C,KAAKisB,EAASC,IAIxC3pB,kBAAgE43C,GACnE,MAAM13C,EAAS,IAAI2hB,GAAU+1B,EAAO1lC,KAAK4R,UACnC5nB,EAAU07C,aAAkBrmB,GAAUqmB,EAAO17C,OAAS,CAAC07C,GAC7D,OAAO,IAAIlC,GAAMx1C,EAAQhE,EAAOoH,IAAK0uB,GAAU,IAAIohB,GAAYlzC,EAAQ8xB,EAAM7f,QAkCjFjS,aAAsB,OAAOtI,KAAKy2C,QAClC32C,aAAsB,OAAOE,KAAKg6B,QAClC11B,aAAsB,OAAOtE,KAAK85B,QAClCmmB,cAAuB,OAAOjgD,KAAKi6B,aAE5B7xB,MAAM9D,EAAStE,KAAK85B,SACvB,OAAO,IAAIgkB,GAAS99C,KAAKy2C,QAASnyC,GAG/B8D,YAAsCjD,GACzC,OAAOnF,KAAK44B,WAAWzzB,GAEpBiD,UAA6BvL,GAChC,OAAOmD,KAAKkgD,YAAYlgD,KAAKmgD,eAAetjD,IAEzCuL,eAAkCvL,GACrC,OAAOmD,KAAKy2C,QAAQrlB,OAAOgvB,UAAWx/C,GAAMA,EAAE/D,OAASA,GAEpDuL,WAAqCjD,GACxC,GAAIA,EAAQ,GAAKA,GAASnF,KAAKm6B,YAAe,OAAO,KACrD,IACI2B,EAAmBrpB,EAAiBnO,EADpCgE,EAAStI,KAAKy2C,QAEdlc,EAAUv6B,KAAK6rB,YAAc7rB,KAAK6rB,UAAY,IAClD,OAAIiQ,EAASvB,EAAQp1B,IAAiB22B,GAClCrpB,GAAUnK,EAAO8oB,QAAU,IAAIjsB,MAC/Bb,EAAStE,KAAK85B,QACTpuB,IAAK0uB,GAAUA,EAAMxB,WAAczzB,IACnCgtB,OAAQsI,GAAiC,MAAPA,IAC5B36B,OAAS,EACRy6B,EAAQp1B,GAAS,IAAIw2B,GAAUlpB,EAAOnO,GAG/C,KAIJ8D,UAAU8O,EAAW,SAAU9L,GAAS,GAI3C,OAHgBA,EAEV6zC,GADAC,IAEQzB,SAASz9C,KAAK85B,SAAS14B,cAAa,GAE/CgH,QACH,OAAOpI,KAAKg6B,QAET5xB,UAAU6pB,GACb,OAAO,IAAI6rB,GAAM99C,KAAK85B,QAAQpuB,IAAK8rC,GAAUA,EAAM6I,UAAUpuB,MCtJ9D,MAAMupB,WACD/a,GAkBRr4B,eAAeu6B,GACX,IACIpoB,EACA2R,EAFA5jB,EAASq6B,EAAK,GAGlB,GAAuB,iBAAZA,EAAK,GAAiB,CAC7B,MAAMvR,EAAS9oB,EAAO8oB,QACf,CAAEkvB,EAASxpB,GAAa6L,EAC/BpoB,EAAOqc,GAAK5K,OAAO,IAAIwD,GAAU4B,GAAS,EAAGkvB,EAAS,EAAG,KAAMxpB,QAE9D,CAAEvc,EAAM2R,GAAayW,EAE1Br5B,MAAMiR,EAAM2R,GACZlsB,KAAKy2C,QAAUnuC,EAxBZF,YAAyD0pB,EAA8BC,EAAqB,IAC/G,OAAO,IAAIypB,GACPvxB,GAAOpkB,KAAKisB,EAASC,GACrBD,EAAQ7sB,OAAO,CAAC2M,EAAK6oB,IAAQt2B,KAAK8R,IAAIrE,EAAK6oB,EAAI36B,QAAS,GACxDgyB,GAuBD1pB,MAAMmS,EAAuB2R,EAAWlsB,KAAK6rB,WAChD,OAAO,IAAI2vB,GAAex7C,KAAKy2C,QAASl8B,EAAM2R,GAG3C9jB,UAAUiyB,GACb,MAAM/xB,EAAStI,KAAKy2C,QAASnyC,EAASq1B,GAAQO,QAAQl6B,QAASq6B,GAC/D,OAAO,IAAIyjB,GAAMx1C,EAAQhE,EAAOoH,IAAI,EAAG6O,UAAW,IAAIihC,GAAYlzC,EAAQiS,KAG9EjS,aAAsB,OAAOtI,KAAKy2C,QAClCwJ,cAAuB,OAAOjgD,KAAKy2C,QAAQrlB,OAAOtxB,OAE3CsI,UAAmC6pB,GACtC,MAAMb,EAASpxB,KAAKy2C,QAAQrlB,OACtB9oB,EAAStI,KAAKy2C,QAAQ4J,UAAUpuB,GAChCsuB,EAAatuB,EAAYhtB,OAAO,CAACitB,EAAIrtB,KAAOqtB,EAAGrtB,IAAK,IAASqtB,EAAU,IACvE4E,EAAY92B,KAAKua,KAAKuc,UAAU3E,OAAO,CAACjoB,EAAG5N,IAAMikD,EAAWnvB,EAAO90B,GAAGO,OACtE2jD,EAAa5pB,GAAK5K,OAAO,IAAIwD,GAAOlnB,EAAO8oB,QAAS,EAAGpxB,KAAKF,OAAQ,EAAG,KAAMg3B,GACnF,OAAO,IAAI0kB,GAAgClzC,EAAQk4C,ICnDpD,MAAMC,WAAqBhe,GAM9Br6B,YAAYzC,EAAmB+8B,EAAoBj8B,GAC/C6C,QAJItJ,KAAA0gD,YAAsB,EAEtB1gD,KAAA2gD,cAAwB,EAG5B3gD,KAAK2F,MAAQA,EACb3F,KAAK0iC,MAAQA,EACb1iC,KAAKyG,QAAUA,EAGZ2B,MAA0Bw6B,GAC7B,OAAOt5B,MAAMu5B,MAAMD,aAAgB5Q,GAAQ4Q,EAAKtoB,KAAOsoB,GAGpDx6B,UAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAkBhqB,GAAKlQ,KAAKpM,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,IAClMzuB,UAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAkBhqB,GAAK3O,KAAK3N,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK8gD,SAASxmC,IAC5NlS,SAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAmBhqB,GAAKrP,IAAIjN,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK8gD,SAASxmC,IAC5NlS,WAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAiBhqB,GAAK7K,MAAMzR,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK8gD,SAASxmC,IAC5NlS,UAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAkBhqB,GAAK/O,KAAKvN,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK+gD,YAAYzmC,GAAOta,KAAK8gD,SAASxmC,IACpPlS,YAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAgBhqB,GAAK9O,OAAOxN,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK+gD,YAAYzmC,GAAOta,KAAK8gD,SAASxmC,IACpPlS,qBAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAOhqB,GAAK7O,gBAAgBzN,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK8gD,SAASxmC,IAC5NlS,UAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAkBhqB,GAAKxO,KAAK9N,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK8gD,SAASxmC,IAC5NlS,eAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAahqB,GAAKpO,UAAUlO,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK8gD,SAASxmC,IAC5NlS,UAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAkBhqB,GAAKrO,KAAKjO,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK8gD,SAASxmC,IAC5NlS,aAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAehqB,GAAK1O,QAAQ5N,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK8gD,SAASxmC,IAC5NlS,UAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAkBhqB,GAAK9P,KAAKxM,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK+gD,YAAYzmC,GAAOta,KAAK6iC,MAAMvoB,EAAK4R,SAAS,KAC/P9jB,YAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAgBhqB,GAAK5K,OAAO1R,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAKy7C,UAAUnhC,EAAK4R,WAClO9jB,WAAuDkS,GAAyD,OAAOA,EAAK7c,OAASyoB,EAAUkB,OAASpnB,KAAKsmC,iBAAiBhsB,GAA4Bta,KAAKomC,gBAAgB9rB,GAC/NlS,gBAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAiBhqB,GAAKzP,MAAM7M,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAKghD,YAAY1mC,GAAOta,KAAK+gD,YAAYzmC,GAAOta,KAAKy7C,UAAUnhC,EAAK4R,WAClR9jB,iBAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAiBhqB,GAAKzP,MAAM7M,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAKghD,YAAY1mC,GAAOta,KAAKy7C,UAAUnhC,EAAK4R,WAC1P9jB,gBAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAYhqB,GAAK3K,WAAW3R,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK8gD,SAASxmC,EAAKuW,UACjOzoB,cAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAchqB,GAAKhO,SAAStO,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK8gD,SAASxmC,IAC5NlS,mBAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAShqB,GAAK7P,cAAczM,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAK6iC,MAAMvoB,EAAK4R,SAAS,KACvO9jB,SAAuDkS,GAASxa,OAAEA,EAAM+2B,UAAEA,GAAc72B,KAAK4gD,iBAAmB,OAAmBhqB,GAAK3P,IAAI3M,EAAM,EAAGxa,EAAQ+2B,EAAW72B,KAAK6gD,eAAevmC,EAAMuc,GAAY72B,KAAKy7C,UAAUnhC,EAAK4R,WAE/N9jB,gBAAkB,OAAOpI,KAAK0iC,QAAQ1iC,KAAK0gD,YAC3Ct4C,kBAAoB,OAAOpI,KAAKyG,UAAUzG,KAAK2gD,cAC/Cv4C,eAAmCkS,EAASuc,EAAmB7yB,EAAShE,KAAKihD,mBACnF,OAAOpqB,EAAY,GAAK72B,KAAK8gD,SAASxmC,EAAMtW,IAAW,IAAID,WAAW,GAEhEqE,YAAgCkS,EAAStW,GAAyB,OAAOhE,KAAK8gD,SAASxmC,EAAMtW,GAC7FoE,YAAgCkS,EAAStW,GAAyB,OAAOhE,KAAK8gD,SAASxmC,EAAMtW,GAC7FoE,SAA6BiqB,GAAUvyB,OAAEA,EAAMoF,OAAEA,GAAWlF,KAAKihD,mBACvE,OAAOjhD,KAAK2F,MAAMN,SAASH,EAAQA,EAASpF,IAI7C,MAAMohD,WAAyBT,GAElCr4C,YAAY+4C,EAAkBze,EAAoBj8B,GAC9C6C,MAAM,IAAIvF,WAAW,GAAI2+B,EAAOj8B,GAChCzG,KAAKmhD,QAAUA,EAET/4C,eAAmCiqB,EAAUwE,GAAmB3xB,OAAEA,GAAWlF,KAAKihD,mBACxF,OAAOpqB,GAAa,EAAI,IAAI9yB,WAAW,GAAKuxB,GAAUt1B,KAAKmhD,QAAQj8C,IAE7DkD,YAAgCiqB,GAAUntB,OAAEA,GAAWlF,KAAKihD,mBAClE,OAAOjkD,OAAA+1B,GAAA,kBAAA/1B,CAAkB+G,WAAY/G,OAAA+1B,GAAA,kBAAA/1B,CAAkBgJ,WAAYhG,KAAKmhD,QAAQj8C,KAE1EkD,YAAgCkS,GAASpV,OAAEA,GAAWlF,KAAKihD,mBACjE,OAAOjkD,OAAA+1B,GAAA,kBAAA/1B,CAAkB+G,WAAY/G,OAAA+1B,GAAA,kBAAA/1B,CAAkBsd,EAAK8R,UAAWpsB,KAAKmhD,QAAQj8C,KAE9EkD,SAA6BkS,GAASpV,OAAEA,GAAWlF,KAAKihD,mBAC9D,MAAME,QAAEA,GAAYnhD,KACpB,OAAI4rB,EAASw1B,YAAY9mC,GACdtd,OAAA+1B,GAAA,kBAAA/1B,CAAkB+G,WAAY45B,GAAMiB,aAAauiB,EAAQj8C,MACxD0mB,EAASy1B,MAAM/mC,IAASsR,EAAS01B,OAAOhnC,KAA4B,KAAlBA,EAAKkN,SACxDxqB,OAAA+1B,GAAA,kBAAA/1B,CAAkB+G,WAAY45B,GAAMiB,aAAauiB,EAAQj8C,KACzD0mB,EAAS21B,OAAOjnC,IAASA,EAAKgO,OAASlC,EAASiC,YAChDrrB,OAAA+1B,GAAA,kBAAA/1B,CAAkB+G,WAAY45B,GAAMiB,aAAauiB,EAAQj8C,KACzD0mB,EAAS41B,UAAUlnC,GACnBtd,OAAA+1B,GAAA,kBAAA/1B,CAAkB+G,WAAYi6B,GAAOY,aAAauiB,EAAQj8C,KAC1D0mB,EAAS61B,SAASnnC,IAASsR,EAAS81B,kBAAkBpnC,GAYzE,SAA4Bkb,GAIxB,MAAMmsB,EAASnsB,EAAOnW,KAAK,IACrB9E,EAAO,IAAIxW,WAAW49C,EAAO7hD,OAAS,GAC5C,IAAK,IAAIxD,EAAI,EAAGA,EAAIqlD,EAAO7hD,OAAQxD,GAAK,EACpCie,EAAKje,GAAK,GAAKwf,SAAS6lC,EAAO5lC,OAAOzf,EAAG,GAAI,IAEjD,OAAOie,EApBQqnC,CAAmBT,EAAQj8C,IAC3B0mB,EAASi2B,OAAOvnC,GAChBgb,GAAU6rB,EAAQj8C,IAClB0mB,EAASk2B,OAAOxnC,GAChBtd,OAAAmW,GAAA,EAAAnW,CAAYmkD,EAAQj8C,GAAqBma,KAAK,KAElDriB,OAAA+1B,GAAA,kBAAA/1B,CAAkB+G,WAAY/G,OAAA+1B,GAAA,kBAAA/1B,CAAkBsd,EAAK8R,UAAW+0B,EAAQj8C,GAAQwG,IAAK7G,IAAOA,MCtDpG,MAAM66C,WAAuEpH,GAAA,EAGhFlwC,YAAsB25C,GAClBz4C,QACAtJ,KAAKgiD,MAAQD,EAGjBp4C,aAAsB,OAAO3J,KAAKgiD,MAAMr4C,OACxCrB,aAAsB,OAAOtI,KAAKgiD,MAAM15C,OACxCg1C,kBAA2B,OAAOt9C,KAAKgiD,MAAM1E,YAC7C90C,mBAA4B,OAAOxI,KAAKgiD,MAAMx5C,aAC9CkrB,sBAA+B,OAAO1zB,KAAKgiD,MAAMtuB,gBACjDN,uBAAgC,OAAOpzB,KAAKgiD,MAAM5uB,iBAClDJ,aAAsB,OAAOhzB,KAAKgiD,MAAMC,SAAWjiD,KAAKgiD,MAAMhvB,OAAS,KAEhE5qB,SAA0C,OAAOpI,KAAKgiD,MAAMrC,SAC5Dv3C,UAAgD,OAAOpI,KAAKgiD,MAAME,UAClE95C,SAA8C,OAAOpI,KAAKgiD,MAAMC,SAChE75C,WAAkD,OAAOpI,KAAKgiD,MAAMG,WAEpE/5C,OACH,OAAOpI,KAAKgiD,MAAM3iD,OAEf+I,MAAM7K,GACT,OAAOyC,KAAKgiD,MAAMl3C,MAAMvN,GAErB6K,OAAO7K,GACV,OAAOyC,KAAKgiD,MAAMn4C,OAAOtM,GAEtB6K,SACH,OAAOpI,KAAKgiD,MAAM9I,SAEf9wC,MAAME,GAET,OADAtI,KAAKgiD,MAAMjE,MAAMz1C,GACVtI,KAEJoI,KAAKQ,GACR,MAAMi3C,EAAU7/C,KAAKgiD,MAAMpC,KAAKh3C,GAChC,OAAO5L,OAAAi8C,GAAA,EAAAj8C,CAAU6iD,GAAWA,EAAQngD,KAAK,IAAMM,MAAQA,KAEpDoI,gBAAgBjD,GACnB,OAAOnF,KAAKgiD,MAAMC,SAAWjiD,KAAKgiD,MAAMI,gBAAgBj9C,GAAS,KAE9DiD,CAAC/K,OAAOwC,YACX,OAA2CG,KAAKgiD,MAAO3kD,OAAOwC,YAE3DuI,CAAC/K,OAAO4C,iBACX,OAAgDD,KAAKgiD,MAAO3kD,OAAO4C,iBAEhEmI,cACH,OAAOywC,EAAA,EAAe1vC,YACjBnJ,KAAK2/C,SACA,CAAEv3C,CAAC/K,OAAOwC,UAAW,IAAMG,MAC3B,CAAEoI,CAAC/K,OAAO4C,eAAgB,IAAMD,OAEvCoI,eACH,OAAOywC,EAAA,EAAexvC,aACjBrJ,KAAK2/C,SACA,CAAEv3C,CAAC/K,OAAOwC,UAAW,IAAMG,MAC3B,CAAEoI,CAAC/K,OAAO4C,eAAgB,IAAMD,MACtC,CAAEi+C,YAAY,IAKf71C,mBAAmBQ,GACtB,MAAU0B,MAAM,mDAGblC,kBAEHm1C,EAEAC,GAEA,MAAUlzC,MAAM,kDAWblC,YAAyD3E,GAC5D,OAAIA,aAAkBi8C,GACXj8C,EACAzG,OAAAi8C,GAAA,EAAAj8C,CAAYyG,GAwiB/B,SAA8DA,GAC1D,OAAO,IAAI4+C,GAAwB,IAAIC,GAA6B7+C,IAxiBrD8+C,CAAiB9+C,GACjBzG,OAAAi8C,GAAA,EAAAj8C,CAAayG,GA6jBhC,SAAqEA,6CACjE,MAAMc,KAAEA,SAAed,EAAOi2C,OACxBH,EAAO,IAAID,GAAsB71C,EAAQc,GAC/C,OAAIA,GAAQ82C,IACJH,SAA+B3B,EAAKH,OAAO,EAAI+B,GAAc,GAAK,IAC3D,IAAIqH,GAA2B,IAAIC,GAAkClJ,IAG7E,IAAImJ,GAA6B,IAAIC,GAAoCpJ,MApkBjEqJ,CAAkBn/C,GAClBzG,OAAAi8C,GAAA,EAAAj8C,CAAeyG,GACf,KAAa+0C,EAAA,EAAAx4C,UAAA,kCAAM0/C,GAAkB75C,WAAgBpC,KAArD,GACAzG,OAAAi8C,GAAA,EAAAj8C,CAAgByG,IAAWzG,OAAAi8C,GAAA,EAAAj8C,CAAoByG,IAAWzG,OAAAi8C,GAAA,EAAAj8C,CAAqByG,IAAWzG,OAAAi8C,GAAA,EAAAj8C,CAAgByG,GAgjB7H,SAA0EA,6CACtE,MAAMkC,QAAclC,EAAOq1C,KAAMqC,GAAc,GAAK,GACpD,OAAOx1C,GAASA,EAAM/B,YAAc,EAAKs3C,GAAyBv1C,GAE5D,IAAIk9C,GAAsB,IAAIC,SAAmCr/C,EAAO+I,SADxE,IAAIk2C,GAA6B,IAAIC,GAAoCl/C,IAEzE,IAAIi/C,GAA6B,IAAIC,GAAoC,kBAAAnK,EAAA,EAAAx4C,KAAA2G,UAAA,sBApjBhEo8C,CAAuB,IAAIhK,GAAgBt1C,IAsiB9D,SAA+DA,GAC3D,MAAMkC,EAAQlC,EAAOq1C,KAAMqC,GAAc,GAAK,GAC9C,OAAOx1C,GAASA,EAAM/B,YAAc,EAAKs3C,GAAyBv1C,GAE5D,IAAIk9C,GAAsB,IAAIC,GAA6Br/C,EAAO+I,SADlE,IAAI61C,GAAwB,IAAIW,GAA+Bv/C,IAE/D,IAAI4+C,GAAwB,IAAIW,GAA+B,kBAziB1DC,CAAkB,IAAItK,GAAWl1C,IAWrC2E,eAA4D3E,GAC/D,OAAIA,aAAkBi8C,GACXj8C,EAAOk8C,SAAWuD,GAAYz/C,GAAU0/C,GAAa1/C,GACrDzG,OAAAi8C,GAAA,EAAAj8C,CAAYyG,IAAWF,YAAYqC,OAAOnC,IAAWzG,OAAAi8C,GAAA,EAAAj8C,CAAiCyG,IAAWzG,OAAAi8C,GAAA,EAAAj8C,CAAiByG,GAClHy/C,GAAez/C,GAEnB0/C,GAAgB1/C,IAyBxB,MAAM4+C,WAA6E3C,GACtFt3C,YAAsB45C,GAAyC14C,MAAO04C,GAAhDhiD,KAAAgiD,QACf55C,CAAC/K,OAAOwC,YAAc,OAAQG,KAAKgiD,MAA2C3kD,OAAOwC,YAC9EuI,CAAC/K,OAAO4C,iBAAc,OAAAu4C,EAAA,EAAAx4C,KAAA2G,UAAA,kBAA4C6xC,EAAA,QAAOA,EAAA,EAAAA,EAAA,EAAAx4C,KAAK3C,OAAOwC,kBAGhG,MAAM6iD,WAAkFhD,GAC3Ft3C,YAAsB45C,GAA8C14C,MAAO04C,GAArDhiD,KAAAgiD,QACf55C,CAAC/K,OAAOwC,YAAgD,MAAUyK,MAAM,gDACxElC,CAAC/K,OAAO4C,iBAAmB,OAAQD,KAAKgiD,MAAgD3kD,OAAO4C,kBAGnG,MAAM4iD,WAA2ER,GACpFj6C,YAAsB45C,GAAuC14C,MAAO04C,GAA9ChiD,KAAAgiD,SAGnB,MAAMQ,WAAgFE,GACzFt6C,YAAsB45C,GAA4C14C,MAAO04C,GAAnDhiD,KAAAgiD,SAkG1B,MAAeoB,GAaXh7C,YAAYI,EAAe,IAAIye,KATxBjnB,KAAA2J,QAAS,EACT3J,KAAAs9C,aAAc,EAGXt9C,KAAA66C,iBAAmB,EACnB76C,KAAAqjD,kBAAoB,EAK1BrjD,KAAKwI,aAAeA,EAJxBkrB,sBAA+B,OAAO1zB,KAAK66C,iBAC3CznB,uBAAgC,OAAOpzB,KAAKqjD,kBAMrCj7C,SAA0C,OAAO,EACjDA,UAAgD,OAAO,EACvDA,SAA8C,OAAO,EACrDA,WAAkD,OAAO,EAEzDA,MAAME,GAKT,OAJAtI,KAAK66C,iBAAmB,EACxB76C,KAAKqjD,kBAAoB,EACzBrjD,KAAKsI,OAAeA,EACpBtI,KAAKwI,aAAe,IAAIye,IACjBjnB,KAGDoI,iBAAiBoqC,EAA8BG,GACrD,OAAO,IAAI6I,GAAex7C,KAAKsI,OAAQkqC,EAAO1yC,OAAQE,KAAKsjD,aAAa9Q,EAAQG,EAAM3yC,KAAKsI,OAAO8oB,SAE5FhpB,qBAAqBoqC,EAAkCG,GAC7D,MAAMvpB,GAAEA,EAAEyB,QAAEA,EAAOtQ,KAAEA,GAASi4B,GACxBhqC,aAAEA,EAAYF,OAAEA,GAAWtI,KACjC,GAAI6qB,IAAYriB,EAAarL,IAAIisB,GAAK,CAElC,MAAM9O,EAAOhS,EAAOE,aAAarL,IAAIisB,GAC/BoR,EAAU3P,EAAUriB,EAAarL,IAAIisB,GAAK3K,OAC5CsH,EAAOoW,IAAIn8B,KAAKsjD,aAAa/oC,EAAMo4B,EAAM,CAACr4B,IAAO,KACjDyL,EAAOoW,IAAIn8B,KAAKsjD,aAAa/oC,EAAMo4B,EAAM,CAACr4B,IAAO,IAIrD,OAFChS,EAAOgpB,iBAAiBn0B,IAAIisB,IAAO,IAAIkK,QAAQ,EAAGhZ,UAAWA,EAAKwW,iBAAmB0J,GAE/EA,EAEX,OAAOhyB,EAAarL,IAAIisB,GAElBhhB,aAAaoqC,EAA8BG,EAAW4Q,GAC5D,OAAO,IAAI9C,GAAa9N,EAAMH,EAAO9P,MAAO8P,EAAO/rC,SAASg1C,UAAU8H,IAK9E,MAAMP,WAAiFI,GAKnFh7C,YAAY3E,EAAoC+E,GAC5Cc,MAAMd,GACNxI,KAAKwjD,QAAWxmD,OAAAi8C,GAAA,EAAAj8C,CAAYyG,GAEtB,IAAIi3C,GAAkB16C,KAAKw5C,QAAU/1C,GADrC,IAAIy2C,GAAcl6C,KAAKw5C,QAAU/1C,GAIpC2E,SAA0C,OAAO,EACjDA,WAAkD,OAAO,EACzDA,CAAC/K,OAAOwC,YACX,OAAOG,KAEJoI,UACEpI,KAAK2J,SAAW3J,KAAK2J,QAAS,KAC/B3J,KAAK+9C,QAAQyF,QAAQ35C,SACrB7J,KAAKwjD,QAAgB,KACrBxjD,KAAKwI,aAAqB,MAG3BJ,KAAKQ,GAOR,OANK5I,KAAK2J,SACN3J,KAAKs9C,YAAcmG,GAAkBzjD,KAAM4I,GACrC5I,KAAKsI,SAAWtI,KAAKsI,OAAStI,KAAKwjD,QAAQE,eAC7C1jD,KAAKk5C,UAGNl5C,KAEJoI,MAAM7K,GACT,OAAKyC,KAAK2J,QAAU3J,KAAKs9C,cAAgBt9C,KAAK2J,QAAS,GAC5C3J,KAAK+9C,QAAQyF,QAAQ14C,MAAMvN,GAE/B+6C,GAAA,EAEJlwC,OAAO7K,GACV,OAAKyC,KAAK2J,QAAU3J,KAAKs9C,cAAgBt9C,KAAK2J,QAAS,GAC5C3J,KAAK+9C,QAAQyF,QAAQ35C,OAAOtM,GAEhC+6C,GAAA,EAEJlwC,OACH,GAAIpI,KAAK2J,OAAU,OAAO2uC,GAAA,EAC1B,IAAIvF,GAA2ByQ,QAASr3C,GAAWnM,KACnD,KAAO+yC,EAAU/yC,KAAK2jD,+BAClB,GAAI5Q,EAAQK,WACRpzC,KAAK+9C,MAAMhL,EAAQP,cAChB,IAAIO,EAAQM,gBAAiB,CAChCrzC,KAAKqjD,oBACL,MAAM7Q,EAASO,EAAQP,SACjBxuC,EAASmI,EAAOy3C,gBAAgB7Q,EAAQ5nB,YAE9C,MAAO,CAAE1rB,MAAM,EAAOlC,MADFyC,KAAK6jD,iBAAiBrR,EAAQxuC,IAE/C,GAAI+uC,EAAQO,oBAAqB,CACpCtzC,KAAK66C,mBACL,MAAMrI,EAASO,EAAQP,SACjBxuC,EAASmI,EAAOy3C,gBAAgB7Q,EAAQ5nB,YACxCqP,EAASx6B,KAAK8jD,qBAAqBtR,EAAQxuC,GACjDhE,KAAKwI,aAAanE,IAAImuC,EAAOppB,GAAIoR,IAGzC,OAAOx6B,KAAK6J,SAENzB,4BAAqDkS,GAC3D,OAAOta,KAAKwjD,QAAQlJ,YAAehgC,IAK3C,MAAMqoC,WAAsFS,GAKxFh7C,YAAY3E,EAAyB+E,GACjCc,MAAMd,GACNxI,KAAKwjD,QAAU,IAAI/I,GAAmBz6C,KAAKw5C,QAAU/1C,GAElD2E,UAAgD,OAAO,EACvDA,WAAkD,OAAO,EACzDA,CAAC/K,OAAO4C,iBACX,OAAOD,KAEEoI,oDACJpI,KAAK2J,SAAW3J,KAAK2J,QAAS,WACzB3J,KAAK+9C,QAAQyF,QAAQ35C,SAC3B7J,KAAKwjD,QAAgB,KACrBxjD,KAAKwI,aAAqB,QAGrBJ,KAAKQ,6CAOd,OANK5I,KAAK2J,SACN3J,KAAKs9C,YAAcmG,GAAkBzjD,KAAM4I,GACrC5I,KAAKsI,SAAWtI,KAAKsI,aAAgBtI,KAAKwjD,QAAQE,sBAC9C1jD,KAAKk5C,WAGZl5C,OAEEoI,MAAM7K,6CACf,OAAKyC,KAAK2J,QAAU3J,KAAKs9C,cAAgBt9C,KAAK2J,QAAS,SACtC3J,KAAK+9C,QAAQyF,QAAQ14C,MAAMvN,GAErC+6C,GAAA,IAEElwC,OAAO7K,6CAChB,OAAKyC,KAAK2J,QAAU3J,KAAKs9C,cAAgBt9C,KAAK2J,QAAS,SACtC3J,KAAK+9C,QAAQyF,QAAQ35C,OAAOtM,GAEtC+6C,GAAA,IAEElwC,iDACT,GAAIpI,KAAK2J,OAAU,OAAO2uC,GAAA,EAC1B,IAAIvF,GAA2ByQ,QAASr3C,GAAWnM,KACnD,KAAO+yC,QAAgB/yC,KAAK2jD,+BACxB,GAAI5Q,EAAQK,iBACFpzC,KAAK+9C,MAAMhL,EAAQP,cACtB,IAAIO,EAAQM,gBAAiB,CAChCrzC,KAAKqjD,oBACL,MAAM7Q,EAASO,EAAQP,SACjBxuC,QAAemI,EAAOy3C,gBAAgB7Q,EAAQ5nB,YAEpD,MAAO,CAAE1rB,MAAM,EAAOlC,MADFyC,KAAK6jD,iBAAiBrR,EAAQxuC,IAE/C,GAAI+uC,EAAQO,oBAAqB,CACpCtzC,KAAK66C,mBACL,MAAMrI,EAASO,EAAQP,SACjBxuC,QAAemI,EAAOy3C,gBAAgB7Q,EAAQ5nB,YAC9CqP,EAASx6B,KAAK8jD,qBAAqBtR,EAAQxuC,GACjDhE,KAAKwI,aAAanE,IAAImuC,EAAOppB,GAAIoR,IAGzC,aAAax6B,KAAK6J,WAENzB,4BAAqDkS,6CACjE,aAAata,KAAKwjD,QAAQlJ,YAAehgC,MAKjD,MAAMwoC,WAA+EE,GAUjF56C,YAAY3E,EAAiD+E,GACzDc,MAAM7F,aAAkB01C,GAAmB11C,EAAS,IAAI01C,GAAiB11C,GAAS+E,GALtFwqB,aAAsB,OAAOhzB,KAAKu0B,QAClCb,sBAA+B,OAAO1zB,KAAKu0B,QAAUv0B,KAAKu0B,QAAQb,gBAAkB,EACpFN,uBAAgC,OAAOpzB,KAAKu0B,QAAUv0B,KAAKu0B,QAAQnB,iBAAmB,EAK/EhrB,SAA0C,OAAO,EACjDA,SAA8C,OAAO,EACrDA,KAAKQ,GACR,IAAK5I,KAAK2J,SAAW3J,KAAKu0B,QAAS,CAC/Bv0B,KAAKsI,QAAUtI,KAAKu0B,QAAUv0B,KAAK+jD,eAAez7C,OAClD,IAAK,MAAM8rB,KAASp0B,KAAKu0B,QAAQ3B,oBAC7BwB,GAASp0B,KAAKgkD,qBAAqBhkD,KAAK66C,oBAGhD,OAAOvxC,MAAMs2C,KAAKh3C,GAEfR,gBAAgBjD,GACnB,GAAInF,KAAK2J,OAAU,OAAO,KACrB3J,KAAKu0B,SAAWv0B,KAAK4/C,OAC1B,MAAMxrB,EAAQp0B,KAAKu0B,SAAWv0B,KAAKu0B,QAAQF,eAAelvB,GAC1D,GAAIivB,GAASp0B,KAAKw5C,QAAQyK,KAAK7vB,EAAMlvB,QAAS,CAC1C,MAAM6tC,EAAU/yC,KAAKwjD,QAAQlJ,YAAYjwB,EAAcG,aACvD,GAAIuoB,GAAWA,EAAQM,gBAAiB,CACpC,MAAMb,EAASO,EAAQP,SACjBxuC,EAAShE,KAAKwjD,QAAQI,gBAAgB7Q,EAAQ5nB,YAEpD,OADoBnrB,KAAK6jD,iBAAiBrR,EAAQxuC,IAI1D,OAAO,KAEDoE,qBAAqBjD,GAC3B,MAAMivB,EAAQp0B,KAAKu0B,SAAWv0B,KAAKu0B,QAAQD,mBAAmBnvB,GAC9D,GAAIivB,GAASp0B,KAAKw5C,QAAQyK,KAAK7vB,EAAMlvB,QAAS,CAC1C,MAAM6tC,EAAU/yC,KAAKwjD,QAAQlJ,YAAYjwB,EAAcM,iBACvD,GAAIooB,GAAWA,EAAQO,oBAAqB,CACxC,MAAMd,EAASO,EAAQP,SACjBxuC,EAAShE,KAAKwjD,QAAQI,gBAAgB7Q,EAAQ5nB,YAC9CqP,EAASx6B,KAAK8jD,qBAAqBtR,EAAQxuC,GACjDhE,KAAKwI,aAAanE,IAAImuC,EAAOppB,GAAIoR,KAInCpyB,cACN,MAAMoxC,QAAEA,GAAYx5C,KACdkF,EAASs0C,EAAQj1C,KAAO62C,GACxBt7C,EAAS05C,EAAQ5mC,UAAU1N,GAC3BlB,EAASw1C,EAAQJ,OAAOl0C,EAASpF,EAAQA,GAC/C,OAAO2yB,GAAO7c,OAAO5R,GAEfoE,4BAAqDkS,GAE3D,GADKta,KAAKu0B,SAAWv0B,KAAK4/C,OACtB5/C,KAAKu0B,SAAWv0B,KAAKqjD,kBAAoBrjD,KAAKozB,iBAAkB,CAChE,MAAMgB,EAAQp0B,KAAKu0B,SAAWv0B,KAAKu0B,QAAQF,eAAer0B,KAAKqjD,mBAC/D,GAAIjvB,GAASp0B,KAAKw5C,QAAQyK,KAAK7vB,EAAMlvB,QACjC,OAAOlF,KAAKwjD,QAAQlJ,YAAYhgC,GAGxC,OAAO,MAKf,MAAMmoC,WAAoFE,GAYtFv6C,YAAY3E,KAA+CygD,GACvD,MAAMtgD,EAAgC,iBAAZsgD,EAAK,GAA2BA,EAAKrjD,aAAUoJ,EACnEzB,EAAe07C,EAAK,aAAcj9B,IAA4Bi9B,EAAKrjD,aAAUoJ,EACnFX,MAAM7F,aAAkB61C,GAAwB71C,EAAS,IAAI61C,GAAsB71C,EAAQG,GAAa4E,GAT5GwqB,aAAsB,OAAOhzB,KAAKu0B,QAClCb,sBAA+B,OAAO1zB,KAAKu0B,QAAUv0B,KAAKu0B,QAAQb,gBAAkB,EACpFN,uBAAgC,OAAOpzB,KAAKu0B,QAAUv0B,KAAKu0B,QAAQnB,iBAAmB,EAS/EhrB,SAA8C,OAAO,EACrDA,UAAgD,OAAO,EACjDA,KAAKQ,qGACd,IAAK5I,KAAK2J,SAAW3J,KAAKu0B,QAAS,CAC/Bv0B,KAAKsI,QAAUtI,KAAKu0B,cAAgBv0B,KAAK+jD,eAAez7C,OACxD,IAAK,MAAM8rB,KAASp0B,KAAKu0B,QAAQ3B,oBAC7BwB,UAAep0B,KAAKgkD,qBAAqBhkD,KAAK66C,qBAGtD,aAAasJ,EAAMvE,KAAInjD,KAAAuD,KAAC4I,KAEfR,gBAAgBjD,6CACzB,GAAInF,KAAK2J,OAAU,OAAO,KACrB3J,KAAKu0B,gBAAiBv0B,KAAK4/C,QAChC,MAAMxrB,EAAQp0B,KAAKu0B,SAAWv0B,KAAKu0B,QAAQF,eAAelvB,GAC1D,GAAIivB,UAAgBp0B,KAAKw5C,QAAQyK,KAAK7vB,EAAMlvB,SAAU,CAClD,MAAM6tC,QAAgB/yC,KAAKwjD,QAAQlJ,YAAYjwB,EAAcG,aAC7D,GAAIuoB,GAAWA,EAAQM,gBAAiB,CACpC,MAAMb,EAASO,EAAQP,SACjBxuC,QAAehE,KAAKwjD,QAAQI,gBAAgB7Q,EAAQ5nB,YAE1D,OADoBnrB,KAAK6jD,iBAAiBrR,EAAQxuC,IAI1D,OAAO,OAEKoE,qBAAqBjD,6CACjC,MAAMivB,EAAQp0B,KAAKu0B,SAAWv0B,KAAKu0B,QAAQD,mBAAmBnvB,GAC9D,GAAIivB,UAAgBp0B,KAAKw5C,QAAQyK,KAAK7vB,EAAMlvB,SAAU,CAClD,MAAM6tC,QAAgB/yC,KAAKwjD,QAAQlJ,YAAYjwB,EAAcM,iBAC7D,GAAIooB,GAAWA,EAAQO,oBAAqB,CACxC,MAAMd,EAASO,EAAQP,SACjBxuC,QAAehE,KAAKwjD,QAAQI,gBAAgB7Q,EAAQ5nB,YACpDqP,EAASx6B,KAAK8jD,qBAAqBtR,EAAQxuC,GACjDhE,KAAKwI,aAAanE,IAAImuC,EAAOppB,GAAIoR,OAI7BpyB,wDACZ,MAAMoxC,QAAEA,GAAYx5C,KACpBw5C,EAAQC,iBAAkBD,EAAQC,UAClC,MAAMv0C,EAASs0C,EAAQj1C,KAAO62C,GACxBt7C,QAAe05C,EAAQ5mC,UAAU1N,GACjClB,QAAew1C,EAAQJ,OAAOl0C,EAASpF,EAAQA,GACrD,OAAO2yB,GAAO7c,OAAO5R,KAEToE,4BAAqDkS,6CAEjE,GADKta,KAAKu0B,gBAAiBv0B,KAAK4/C,QAC5B5/C,KAAKu0B,SAAWv0B,KAAKqjD,kBAAoBrjD,KAAKozB,iBAAkB,CAChE,MAAMgB,EAAQp0B,KAAKu0B,QAAQF,eAAer0B,KAAKqjD,mBAC/C,GAAIjvB,UAAep0B,KAAKw5C,QAAQyK,KAAK7vB,EAAMlvB,SACvC,aAAalF,KAAKwjD,QAAQlJ,YAAYhgC,GAG9C,OAAO,QAKf,MAAMgoC,WAA+EU,GACjF56C,YAAY3E,EAAuB+E,GAC/Bc,MAAM7F,EAAQ+E,GAERJ,aAAaoqC,EAA8BG,EAAW4Q,GAC5D,OAAO,IAAIrC,GAAiBvO,EAAMH,EAAO9P,MAAO8P,EAAO/rC,SAASg1C,UAAU8H,IAWlF,SAASE,GAAkB3oB,EAAgClyB,GACvD,OAAOA,GAA8C,kBAA3BA,EAAqB,YAAmBA,EAAqB,YAAIkyB,EAAkB,YAIjH,SAAUooB,GAAyDz/C,GAC/D,MAAM0I,EAASuzC,GAAkB75C,KAAcpC,GAC/C,IACI,IAAK0I,EAAOyzC,KAAK,CAAEtC,aAAa,IAAS3zC,OACrC,SAAWwC,SAAmBA,EAAO4xC,QAAQ6B,OAAQj2C,gBAEjDwC,EAAO+sC,UAIvB,SAAgBiK,GAA0D1/C,yCACtE,MAAM0I,QAASqsC,EAAA,EAAMkH,GAAkB75C,KAAcpC,IACrD,IACI,WAAM+0C,EAAA,EAAMrsC,EAAOyzC,KAAK,CAAEtC,aAAa,MAAU3zC,OAC7C,eAAK6uC,EAAA,EAAMrsC,iBAAmBqsC,EAAA,EAAMrsC,EAAO4xC,QAAQ6B,SAAQj2C,sBAEvD6uC,EAAA,EAAMrsC,EAAO+sC,aCjqBtB,MAAekL,GAClBh8C,GAAG0F,GAEC,OADMA,aAAiBs2C,KAAUt2C,EAAQ,IAAIu2C,GAAQv2C,IAC9C,IAAIw2C,GAAOtkD,KAAM8N,GAE5B1F,GAAG0F,GAEC,OADMA,aAAiBs2C,KAAUt2C,EAAQ,IAAIu2C,GAAQv2C,IAC9C,IAAIy2C,GAAKvkD,KAAM8N,GAE1B1F,GAAG0F,GAEC,OADMA,aAAiBs2C,KAAUt2C,EAAQ,IAAIu2C,GAAQv2C,IAC9C,IAAI02C,GAAKxkD,KAAM8N,GAE1B1F,GAAG0F,GACC,OAAO,IAAI22C,GAAIzkD,KAAK0kD,GAAG52C,IAE3B1F,GAAG0F,GACC,OAAO,IAAI22C,GAAIzkD,KAAK2kD,GAAG72C,IAE3B1F,GAAG0F,GACC,OAAO,IAAI22C,GAAIzkD,KAAK4kD,GAAG92C,KAKxB,MAAMu2C,WAAwBD,GACjCh8C,YAAmBrI,GAAQuJ,QAARtJ,KAAAD,KAIhB,MAAM8kD,WAAoBT,GAM7Bh8C,YAAmBvL,GAAgByM,QAAhBtJ,KAAAnD,OACnBuL,KAAKovC,GACD,IAAKx3C,KAAK8kD,OAAQ,CAGd9kD,KAAK8kD,QAAU,EACf,MAAM1zB,EAASomB,EAAMlvC,OAAO8oB,OAC5B,IAAK,IAAItB,GAAO,IAAKA,EAAMsB,EAAOtxB,QAC9B,GAAIsxB,EAAOtB,GAAKjzB,OAASmD,KAAKnD,KAAM,CAChCmD,KAAK8kD,OAASh1B,EACd,MAGR,GAAI9vB,KAAK8kD,OAAS,EAAK,MAAUx6C,6BAA6BtK,KAAKnD,SAGvE,MAAM49B,EAAMz6B,KAAKw6B,OAASgd,EAAM5e,WAAW54B,KAAK8kD,QAChD,OAAQh1B,GAAgB2K,EAAIt9B,IAAI2yB,IAKjC,MAAei1B,GAElB38C,OAAO48C,GAA0B,OAAO,IAAIC,GAAIjlD,QAASglD,GACzD58C,MAAM48C,GAAyB,OAAO,IAAIE,GAAGllD,QAASglD,GACtD58C,MAAmB,OAAO,IAAIq8C,GAAIzkD,OAI/B,MAAemlD,WAAoCJ,GACtD38C,YAA4Bq1B,EAAgCC,GACxDp0B,QADwBtJ,KAAAy9B,OAAgCz9B,KAAA09B,QAI5Dt1B,KAAKovC,GACD,OAAIx3C,KAAKy9B,gBAAgB4mB,GACjBrkD,KAAK09B,iBAAiB2mB,GACfrkD,KAAKolD,YAAY5N,EAAOx3C,KAAKy9B,KAAMz9B,KAAK09B,OAGxC19B,KAAKqlD,YAAY7N,EAAOx3C,KAAKy9B,KAAMz9B,KAAK09B,OAG/C19B,KAAK09B,iBAAiB2mB,GACfrkD,KAAKslD,YAAY9N,EAAOx3C,KAAKy9B,KAAaz9B,KAAK09B,OAE/C19B,KAAKulD,YAAY/N,EAAOx3C,KAAKy9B,KAAaz9B,KAAK09B,QAY/D,MAAe8nB,WAA6BT,GAE/C38C,eAAe8jB,GACX5iB,QACAtJ,KAAKksB,SAAWA,GAIjBs5B,GAAqBtnD,UAAWguB,SAAWlvB,OAAOmL,OAAO,IAGzD,MAAM88C,WAAYO,GACrBp9C,eAAe8jB,GAEXA,EAAWA,EAASjnB,OAAO,CAACwgD,EAAoBrnD,IACrCqnD,EAAMhnC,OAAOrgB,aAAa6mD,GAAM7mD,EAAE8tB,SAAW9tB,GACrD,IACHkL,SAAS4iB,GAEb9jB,KAAKovC,GACD,MAAM3e,EAAQ74B,KAAKksB,SAASxgB,IAAKtN,GAAMA,EAAEN,KAAK05C,IAC9C,MAAO,CAAC1nB,EAAa0nB,IAAuB3e,EAAM6sB,MAAOtnD,GAAMA,EAAE0xB,EAAK0nB,KAKvE,MAAM0N,WAAWM,GACpBp9C,eAAe8jB,GAEXA,EAAWA,EAASjnB,OAAO,CAACwgD,EAAoBrnD,IACrCqnD,EAAMhnC,OAAOrgB,aAAa8mD,GAAK9mD,EAAE8tB,SAAW9tB,GACpD,IACHkL,SAAS4iB,GAEb9jB,KAAKovC,GACD,MAAM3e,EAAQ74B,KAAKksB,SAASxgB,IAAKtN,GAAMA,EAAEN,KAAK05C,IAC9C,MAAO,CAAC1nB,EAAa0nB,IAAuB3e,EAAM8sB,KAAMvnD,GAAMA,EAAE0xB,EAAK0nB,KAKtE,MAAM8M,WAAea,GAKd/8C,YAAYw9C,EAAqBnoB,EAAeC,GACtD,MAAMmoB,EAAgBpoB,EAAK19B,GAAK29B,EAAM39B,EACtC,MAAO,IAAM8lD,EAGPz9C,YAAYovC,EAAoB/Z,EAAWC,GACjD,MAAMooB,EAAYroB,EAAK3/B,KAAK05C,GACtBuO,EAAaroB,EAAM5/B,KAAK05C,GAC9B,MAAO,CAAC1nB,EAAa0nB,IAAuBsO,EAAUh2B,EAAK0nB,IAAUuO,EAAWj2B,EAAK0nB,GAG/EpvC,YAAYovC,EAAoBwO,EAAUC,GAChD,MAAMC,EAAWF,EAAIloD,KAAK05C,GAC1B,GAAIwO,EAAIxrB,kBAAkBwE,GAAkB,CACxC,IAAInhC,EACJ,MAAM28B,EAASwrB,EAAIxrB,OASnB,OARIA,EAAO5J,aAAe5wB,KAAKmmD,gBAC3BtoD,EAAM28B,EAAO4rB,cAAcH,EAAIlmD,GAC/BC,KAAKmmD,eAAiB3rB,EAAO5J,WAC7B5wB,KAAKqmD,QAAUxoD,GAEfA,EAAMmC,KAAKqmD,SAGF,IAATxoD,EAMO,KAAM,EAELiyB,GACG0K,EAAOwO,OAAOlZ,KAASjyB,EAItC,MAAO,CAACiyB,EAAaw2B,IAAsBJ,EAASp2B,EAAKw2B,IAASL,EAAIlmD,EAIpEqI,YAAYovC,EAAoByO,EAAcD,GAEpD,OAAOhmD,KAAKslD,YAAY9N,EAAOwO,EAAKC,IAKrC,MAAM1B,WAAaY,GACZ/8C,YAAYw9C,EAAqBnoB,EAAeC,GACtD,MAAMmoB,EAAgBpoB,EAAK19B,GAAK29B,EAAM39B,EACtC,MAAO,IAAM8lD,EAGPz9C,YAAYovC,EAAoB/Z,EAAWC,GACjD,MAAMooB,EAAYroB,EAAK3/B,KAAK05C,GACtBuO,EAAaroB,EAAM5/B,KAAK05C,GAC9B,MAAO,CAAC1nB,EAAaw2B,IAAsBR,EAAUh2B,EAAKw2B,IAASP,EAAWj2B,EAAKw2B,GAG7El+C,YAAYovC,EAAoBwO,EAAUC,GAChD,MAAMC,EAAWF,EAAIloD,KAAK05C,GAC1B,MAAO,CAAC1nB,EAAaw2B,IAAsBJ,EAASp2B,EAAKw2B,IAASL,EAAIlmD,EAGhEqI,YAAYovC,EAAoByO,EAAcD,GACpD,MAAME,EAAWF,EAAIloD,KAAK05C,GAC1B,MAAO,CAAC1nB,EAAaw2B,IAAsBL,EAAIlmD,GAAKmmD,EAASp2B,EAAKw2B,IAKnE,MAAM9B,WAAaW,GACZ/8C,YAAYw9C,EAAqBnoB,EAAeC,GACtD,MAAMmoB,EAAgBpoB,EAAK19B,GAAK29B,EAAM39B,EACtC,MAAO,IAAM8lD,EAGPz9C,YAAYovC,EAAoB/Z,EAAWC,GACjD,MAAMooB,EAAYroB,EAAK3/B,KAAK05C,GACtBuO,EAAaroB,EAAM5/B,KAAK05C,GAC9B,MAAO,CAAC1nB,EAAaw2B,IAAsBR,EAAUh2B,EAAKw2B,IAASP,EAAWj2B,EAAKw2B,GAG7El+C,YAAYovC,EAAoBwO,EAAUC,GAChD,MAAMC,EAAWF,EAAIloD,KAAK05C,GAC1B,MAAO,CAAC1nB,EAAaw2B,IAAsBJ,EAASp2B,EAAKw2B,IAASL,EAAIlmD,EAGhEqI,YAAYovC,EAAoByO,EAAcD,GACpD,MAAME,EAAWF,EAAIloD,KAAK05C,GAC1B,MAAO,CAAC1nB,EAAaw2B,IAAsBL,EAAIlmD,GAAKmmD,EAASp2B,EAAKw2B,IAKnE,MAAM7B,WAAYM,GACrB38C,YAA4BinB,GACxB/lB,QADwBtJ,KAAAqvB,QAI5BjnB,KAAKovC,GACD,MAAM+O,EAAOvmD,KAAKqvB,MAAMvxB,KAAK05C,GAC7B,MAAO,CAAC1nB,EAAa0nB,KAAwB+O,EAAKz2B,EAAK0nB,IAKxD,MAAMgP,WAAwBzB,GACjC38C,YAAoB/I,EAA6BonD,GAC7Cn9C,QADgBtJ,KAAAX,OAA6BW,KAAAymD,QAIjDr+C,KAAKovC,GAED,OADAx3C,KAAKymD,MAAMjP,GACJx3C,KAAKX,MAIb,SAASqnD,GAAI3mD,GAAsB,OAAO,IAAIskD,GAAQtkD,GACtD,SAAS4mD,GAAI5oD,GAAuB,OAAO,IAAI8mD,GAAI9mD,GACnD,SAAS6oD,MAAOxoD,GAAuB,OAAO,IAAI6mD,MAAO7mD,GACzD,SAASyoD,MAAMzoD,GAAsB,OAAO,IAAI8mD,MAAM9mD,GACtD,SAAS0oD,GAAOznD,EAAqBvB,GACxC,OAAO,IAAI0oD,GAAgBnnD,EAAMvB,GCrQrCggD,GAAM5/C,UAAU6oD,QAAU,SAAsBlqD,GAAsB,OAAO,IAAImqD,GAAUhnD,KAAKsE,QAAQyiD,QAAQlqD,IAChHihD,GAAM5/C,UAAU+oD,KAAO,SAAsB5nD,EAAgBvB,GAAmB,OAAO,IAAIkpD,GAAUhnD,KAAKsE,QAAQ2iD,KAAK5nD,EAAMvB,IAC7HggD,GAAM5/C,UAAUi0B,OAAS,SAAsB+0B,GAA2C,OAAO,IAAIF,GAAUhnD,KAAKsE,QAAQ6tB,OAAO+0B,IAE5H,MAAMF,WAA+DlJ,GACjE11C,OAAO8+C,GACV,OAAO,IAAIC,GAAqBnnD,KAAKsE,OAAQ4iD,GAE1C9+C,KAAK/I,EAAgBvB,GACxB,MAAMyK,EAAUvI,KAAKsE,OAAQw2C,EAAavyC,EAAQzI,OAClD,IAAK,IAAIsnD,GAAc,IAAKA,EAAatM,GAAa,CAElD,MAAMtD,EAAQjvC,EAAQ6+C,GAClBtpD,GAAQA,EAAK05C,GAEjB,IAAK,IAAIryC,GAAS,EAAGm7C,EAAU9I,EAAM13C,SAAUqF,EAAQm7C,GACnDjhD,EAAK8F,EAAOqyC,IAIjBpvC,QAAQvL,GACX,MAAM0L,EAAUvI,KAAKsE,OAAQw2C,EAAavyC,EAAQzI,OAC5CunD,EAA2B,iBAATxqD,EAAoB,IAAIgoD,GAAIhoD,GAAQA,EAG5DwqD,EAASvpD,KAAKyK,EAAQuyC,EAAa,IACnC,MAAMtgB,EAAS6sB,EAAS7sB,OACxB,IAAK5O,EAAS8F,aAAa8I,EAAOlgB,MAC9B,MAAUhQ,MAAM,8DAGpB,MAAMg9C,EAAkBnjD,KAAKojD,KAAKpjD,KAAKqhB,IAAIgV,EAAO5J,WAAW9wB,QAAUqE,KAAKqhB,IAAI,MAI1EgiC,EAAS,IAH4B,GAAnBF,EAAuBphD,YACvBohD,GAAmB,EAAIrhD,YAAclC,YAE1By2B,EAAO5J,WAAW9wB,QACrD,IAAK,IAAIsnD,GAAc,IAAKA,EAAatM,GAAa,CAElD,MAAMtD,EAAQjvC,EAAQ6+C,GAEtBC,EAASvpD,KAAK05C,GACd,MAAM9e,EAAQ2uB,EAAS7sB,OAAyB3J,QAEhD,IAAK,IAAI1rB,GAAS,EAAGm7C,EAAU9I,EAAM13C,SAAUqF,EAAQm7C,GAAU,CAC7D,IAAIziD,EAAM66B,EAAKv7B,IAAIgI,GACP,OAARtH,GAAgB2pD,EAAO3pD,MAGnC,OAAO,IAAI4pD,GAAcjtB,EAAO5J,WAAY8O,GAAU75B,KAAK2hD,KAI5D,MAAMC,WAA0E3J,GACnF11C,YAAYotB,EAAmBgyB,GAC3B,MAAMl/C,EAAS,IAAI2hB,GAAsC,CACrD,IAAI+H,GAAM,SAAUwD,EAAOlb,MAC3B,IAAI0X,GAAM,SAAUw1B,EAAOltC,QAE/BhR,MAAM,IAAIkyC,GAAYlzC,EAAQk/C,EAAO1nD,OAAQ,CAAC01B,EAAQgyB,KAEnDp/C,SACH,MAAMotB,EAASx1B,KAAKkgD,YAAY,GAC1BsH,EAASxnD,KAAKkgD,YAAY,GAC1B1gD,EAAS,GACf,IAAK,IAAIlD,GAAK,IAAKA,EAAI0D,KAAKF,QACxBN,EAAOg2B,EAAOr4B,IAAIb,IAAMkrD,EAAOrqD,IAAIb,GAEvC,OAAOkD,GAIR,MAAM2nD,WAAwEH,GAEjF5+C,YAAaG,EAA2B2+C,GACpC59C,MAAMf,GACNvI,KAAK0nD,WAAaR,EAEf9+C,KAAK/I,EAAgBvB,GAKxB,MAAMyK,EAAUvI,KAAK85B,QACfghB,EAAavyC,EAAQzI,OAC3B,IAAK,IAAIsnD,GAAc,IAAKA,EAAatM,GAAa,CAElD,MAAMtD,EAAQjvC,EAAQ6+C,GAIlBtpD,GAAQA,EAAK05C,GACjB,MAAM0P,EAAYlnD,KAAK0nD,WAAW5pD,KAAK05C,GAEvC,IAAK,IAAIryC,GAAS,EAAGm7C,EAAU9I,EAAM13C,SAAUqF,EAAQm7C,GAC/C4G,EAAU/hD,EAAOqyC,IAAUn4C,EAAK8F,EAAOqyC,IAIhDpvC,QAOH,IAAI2tB,EAAM,EACV,MAAMxtB,EAAUvI,KAAK85B,QACfghB,EAAavyC,EAAQzI,OAC3B,IAAK,IAAIsnD,GAAc,IAAKA,EAAatM,GAAa,CAElD,MAAMtD,EAAQjvC,EAAQ6+C,GAChBF,EAAYlnD,KAAK0nD,WAAW5pD,KAAK05C,GAEvC,IAAK,IAAIryC,GAAS,EAAGm7C,EAAU9I,EAAM13C,SAAUqF,EAAQm7C,GAC/C4G,EAAU/hD,EAAOqyC,MAAYzhB,EAGzC,OAAOA,EAEJ3tB,EAAE/K,OAAOwC,YAKZ,MAAM0I,EAAUvI,KAAK85B,QACfghB,EAAavyC,EAAQzI,OAC3B,IAAK,IAAIsnD,GAAc,IAAKA,EAAatM,GAAa,CAElD,MAAMtD,EAAQjvC,EAAQ6+C,GAIhBF,EAAYlnD,KAAK0nD,WAAW5pD,KAAK05C,GAEvC,IAAK,IAAIryC,GAAS,EAAGm7C,EAAU9I,EAAM13C,SAAUqF,EAAQm7C,GAC/C4G,EAAU/hD,EAAOqyC,WAAgBA,EAAMr6C,IAAIgI,KAIpDiD,OAAO8+C,GACV,OAAO,IAAIC,GACPnnD,KAAK85B,QACL95B,KAAK0nD,WAAWd,IAAIM,IAGrB9+C,QAAQvL,GACX,MAAM0L,EAAUvI,KAAK85B,QAASghB,EAAavyC,EAAQzI,OAC7CunD,EAA2B,iBAATxqD,EAAoB,IAAIgoD,GAAIhoD,GAAQA,EAG5DwqD,EAASvpD,KAAKyK,EAAQuyC,EAAa,IACnC,MAAMtgB,EAAS6sB,EAAS7sB,OACxB,IAAK5O,EAAS8F,aAAa8I,EAAOlgB,MAC9B,MAAUhQ,MAAM,8DAGpB,MAAMg9C,EAAkBnjD,KAAKojD,KAAKpjD,KAAKqhB,IAAIgV,EAAO5J,WAAW9wB,QAAUqE,KAAKqhB,IAAI,MAI1EgiC,EAAS,IAH4B,GAAnBF,EAAuBphD,YACvBohD,GAAmB,EAAIrhD,YAAclC,YAE1By2B,EAAO5J,WAAW9wB,QAErD,IAAK,IAAIsnD,GAAc,IAAKA,EAAatM,GAAa,CAElD,MAAMtD,EAAQjvC,EAAQ6+C,GAChBF,EAAYlnD,KAAK0nD,WAAW5pD,KAAK05C,GAEvC6P,EAASvpD,KAAK05C,GACd,MAAM9e,EAAQ2uB,EAAS7sB,OAAyB3J,QAEhD,IAAK,IAAI1rB,GAAS,EAAGm7C,EAAU9I,EAAM13C,SAAUqF,EAAQm7C,GAAU,CAC7D,IAAIziD,EAAM66B,EAAKv7B,IAAIgI,GACP,OAARtH,GAAgBqpD,EAAU/hD,EAAOqyC,IAAUgQ,EAAO3pD,MAG9D,OAAO,IAAI4pD,GAAcjtB,EAAO5J,WAAY8O,GAAU75B,KAAK2hD,KCxH5D,MAAMG,GAAI3qD,OAAA8kC,OAAA,GACV8lB,EACAC,EACA90B,GACA+0B,GC1FP1rD,EAAAQ,EAAA0B,EAAA,8BAAA+sB,IAAAjvB,EAAAQ,EAAA0B,EAAA,6BAAA8nB,IAAAhqB,EAAAQ,EAAA0B,EAAA,iCAAAgoB,IAAAlqB,EAAAQ,EAAA0B,EAAA,kCAAA+rB,IAAAjuB,EAAAQ,EAAA0B,EAAA,oCAAA2nB,IAAA7pB,EAAAQ,EAAA0B,EAAA,8BAAA6nB,IAAA/pB,EAAAQ,EAAA0B,EAAA,6BAAA+nB,IAAAjqB,EAAAQ,EAAA0B,EAAA,yBAAAioB,IAAAnqB,EAAAQ,EAAA0B,EAAA,8BAAA4nB,IAAA9pB,EAAAQ,EAAA0B,EAAA,+BAAAkoB,IAAApqB,EAAAQ,EAAA0B,EAAA,yBAAAs4B,KAAAx6B,EAAAQ,EAAA0B,EAAA,6BAAAstB,IAAAxvB,EAAAQ,EAAA0B,EAAA,yBAAA+tB,IAAAjwB,EAAAQ,EAAA0B,EAAA,yBAAAovB,IAAAtxB,EAAAQ,EAAA0B,EAAA,wBAAAguB,IAAAlwB,EAAAQ,EAAA0B,EAAA,yBAAAmuB,IAAArwB,EAAAQ,EAAA0B,EAAA,0BAAAouB,IAAAtwB,EAAAQ,EAAA0B,EAAA,0BAAAquB,IAAAvwB,EAAAQ,EAAA0B,EAAA,0BAAAsuB,IAAAxwB,EAAAQ,EAAA0B,EAAA,0BAAAuuB,IAAAzwB,EAAAQ,EAAA0B,EAAA,2BAAAwuB,IAAA1wB,EAAAQ,EAAA0B,EAAA,2BAAAyuB,IAAA3wB,EAAAQ,EAAA0B,EAAA,2BAAA0uB,IAAA5wB,EAAAQ,EAAA0B,EAAA,0BAAA2uB,IAAA7wB,EAAAQ,EAAA0B,EAAA,4BAAA+uB,IAAAjxB,EAAAQ,EAAA0B,EAAA,4BAAAgvB,IAAAlxB,EAAAQ,EAAA0B,EAAA,4BAAAivB,IAAAnxB,EAAAQ,EAAA0B,EAAA,yBAAAmvB,IAAArxB,EAAAQ,EAAA0B,EAAA,2BAAAkvB,IAAApxB,EAAAQ,EAAA0B,EAAA,oCAAA6xB,KAAA/zB,EAAAQ,EAAA0B,EAAA,0BAAAuvB,IAAAzxB,EAAAQ,EAAA0B,EAAA,4BAAAyvB,IAAA3xB,EAAAQ,EAAA0B,EAAA,oCAAA2vB,IAAA7xB,EAAAQ,EAAA0B,EAAA,8BAAAmwB,KAAAryB,EAAAQ,EAAA0B,EAAA,oCAAAswB,KAAAxyB,EAAAQ,EAAA0B,EAAA,yCAAAuwB,KAAAzyB,EAAAQ,EAAA0B,EAAA,yCAAAwwB,KAAA1yB,EAAAQ,EAAA0B,EAAA,wCAAAywB,KAAA3yB,EAAAQ,EAAA0B,EAAA,yBAAA4vB,IAAA9xB,EAAAQ,EAAA0B,EAAA,+BAAA6vB,IAAA/xB,EAAAQ,EAAA0B,EAAA,oCAAA8vB,IAAAhyB,EAAAQ,EAAA0B,EAAA,oCAAA+vB,IAAAjyB,EAAAQ,EAAA0B,EAAA,mCAAAiwB,IAAAnyB,EAAAQ,EAAA0B,EAAA,4BAAAqvB,IAAAvxB,EAAAQ,EAAA0B,EAAA,yBAAA8wB,KAAAhzB,EAAAQ,EAAA0B,EAAA,2BAAAkxB,KAAApzB,EAAAQ,EAAA0B,EAAA,0BAAAmxB,KAAArzB,EAAAQ,EAAA0B,EAAA,+BAAA0xB,KAAA5zB,EAAAQ,EAAA0B,EAAA,gCAAA4xB,KAAA9zB,EAAAQ,EAAA0B,EAAA,+BAAAqyB,KAAAv0B,EAAAQ,EAAA0B,EAAA,6BAAA0wB,KAAA5yB,EAAAQ,EAAA0B,EAAA,oCAAA2wB,KAAA7yB,EAAAQ,EAAA0B,EAAA,sCAAA6wB,KAAA/yB,EAAAQ,EAAA0B,EAAA,kCAAA+xB,KAAAj0B,EAAAQ,EAAA0B,EAAA,yBAAAiyB,KAAAn0B,EAAAQ,EAAA0B,EAAA,0BAAAw/C,KAAA1hD,EAAAQ,EAAA0B,EAAA,2BAAAq9B,KAAAv/B,EAAAQ,EAAA0B,EAAA,2BAAA2rB,KAAA7tB,EAAAQ,EAAA0B,EAAA,0BAAA0zB,KAAA51B,EAAAQ,EAAA0B,EAAA,4BAAAmkC,KAAArmC,EAAAQ,EAAA0B,EAAA,2BAAAynB,IAAA3pB,EAAAQ,EAAA0B,EAAA,+BAAA09B,KAAA5/B,EAAAQ,EAAA0B,EAAA,iCAAA+9B,KAAAjgC,EAAAQ,EAAA0B,EAAA,+BAAAg+B,KAAAlgC,EAAAQ,EAAA0B,EAAA,4BAAAq7B,KAAAv9B,EAAAQ,EAAA0B,EAAA,+BAAAqgC,KAAAviC,EAAAQ,EAAA0B,EAAA,kCAAAugC,KAAAziC,EAAAQ,EAAA0B,EAAA,0CAAAwgC,KAAA1iC,EAAAQ,EAAA0B,EAAA,kCAAAygC,KAAA3iC,EAAAQ,EAAA0B,EAAA,qCAAA0gC,KAAA5iC,EAAAQ,EAAA0B,EAAA,0CAAA2gC,KAAA7iC,EAAAQ,EAAA0B,EAAA,wCAAA4gC,KAAA9iC,EAAAQ,EAAA0B,EAAA,gCAAA6gC,KAAA/iC,EAAAQ,EAAA0B,EAAA,kCAAA8gC,KAAAhjC,EAAAQ,EAAA0B,EAAA,kCAAA+gC,KAAAjjC,EAAAQ,EAAA0B,EAAA,kCAAAghC,KAAAljC,EAAAQ,EAAA0B,EAAA,mCAAAihC,KAAAnjC,EAAAQ,EAAA0B,EAAA,0CAAAkhC,KAAApjC,EAAAQ,EAAA0B,EAAA,4CAAAmhC,KAAArjC,EAAAQ,EAAA0B,EAAA,8BAAAohC,KAAAtjC,EAAAQ,EAAA0B,EAAA,+BAAAshC,KAAAxjC,EAAAQ,EAAA0B,EAAA,gCAAAuhC,KAAAzjC,EAAAQ,EAAA0B,EAAA,gCAAAwhC,KAAA1jC,EAAAQ,EAAA0B,EAAA,gCAAAyhC,KAAA3jC,EAAAQ,EAAA0B,EAAA,gCAAA0hC,KAAA5jC,EAAAQ,EAAA0B,EAAA,iCAAA2hC,KAAA7jC,EAAAQ,EAAA0B,EAAA,iCAAA4hC,KAAA9jC,EAAAQ,EAAA0B,EAAA,iCAAA6hC,KAAA/jC,EAAAQ,EAAA0B,EAAA,+BAAA8hC,KAAAhkC,EAAAQ,EAAA0B,EAAA,8BAAA+hC,KAAAjkC,EAAAQ,EAAA0B,EAAA,+BAAAkiC,KAAApkC,EAAAQ,EAAA0B,EAAA,iCAAAmiC,KAAArkC,EAAAQ,EAAA0B,EAAA,oCAAAoiC,KAAAtkC,EAAAQ,EAAA0B,EAAA,0CAAAqiC,KAAAvkC,EAAAQ,EAAA0B,EAAA,+CAAAsiC,KAAAxkC,EAAAQ,EAAA0B,EAAA,+CAAAuiC,KAAAzkC,EAAAQ,EAAA0B,EAAA,8CAAAwiC,KAAA1kC,EAAAQ,EAAA0B,EAAA,+BAAAyiC,KAAA3kC,EAAAQ,EAAA0B,EAAA,qCAAA0iC,KAAA5kC,EAAAQ,EAAA0B,EAAA,0CAAA2iC,KAAA7kC,EAAAQ,EAAA0B,EAAA,0CAAA4iC,KAAA9kC,EAAAQ,EAAA0B,EAAA,yCAAA6iC,KAAA/kC,EAAAQ,EAAA0B,EAAA,gCAAA8iC,KAAAhlC,EAAAQ,EAAA0B,EAAA,qCAAA+iC,KAAAjlC,EAAAQ,EAAA0B,EAAA,sCAAAgjC,KAAAllC,EAAAQ,EAAA0B,EAAA,+BAAAijC,KAAAnlC,EAAAQ,EAAA0B,EAAA,+BAAAq6C,KAAAv8C,EAAAQ,EAAA0B,EAAA,oCAAAy6C,KAAA38C,EAAAQ,EAAA0B,EAAA,mCAAA+5C,KAAAj8C,EAAAQ,EAAA0B,EAAA,sCAAAohD,KAAAtjD,EAAAQ,EAAA0B,EAAA,0CAAAukD,KAAAzmD,EAAAQ,EAAA0B,EAAA,4CAAA+jD,KAAAjmD,EAAAQ,EAAA0B,EAAA,+CAAAkkD,KAAApmD,EAAAQ,EAAA0B,EAAA,iDAAAokD,KAAAtmD,EAAAQ,EAAA0B,EAAA,sCAAAy+C,KAAA3gD,EAAAQ,EAAA0B,EAAA,0CAAA4gD,KAAA9iD,EAAAQ,EAAA0B,EAAA,4CAAA2gD,KAAA7iD,EAAAQ,EAAA0B,EAAA,0CAAA8gD,KAAAhjD,EAAAQ,EAAA0B,EAAA,kCAAA47C,KAAA99C,EAAAQ,EAAA0B,EAAA,uCAAAm8C,KAAAr+C,EAAAQ,EAAA0B,EAAA,sCAAAo8C,KAAAt+C,EAAAQ,EAAA0B,EAAA,4BAAAi0C,KAAAn2C,EAAAQ,EAAA0B,EAAA,gCAAAk9C,KAAAp/C,EAAAQ,EAAA0B,EAAA,8BAAA0oD,KAAA5qD,EAAAQ,EAAA0B,EAAA,sCAAA6oD,KAAA/qD,EAAAQ,EAAA0B,EAAA,kCAAAmpD,KAAArrD,EAAAQ,EAAA0B,EAAA,8BAAAypD,IAAA3rD,EAAAQ,EAAA0B,EAAA,yBAAAqpD,KAwBA9O,EAAA,EAAe1vC,YCFR,SAAwB1F,EAAwCmF,GACnE,GAAI5L,OAAAi8C,GAAA,EAAAj8C,CAAmByG,GAAW,OAqCtC,SAA6CA,EAA0BmF,GAEnE,IAAIlC,EAA8B,KAClC,MAAMshD,EAAMp/C,GAA4B,UAAjBA,EAAQ0R,OAAqB,EAC9C2tC,EAAMr/C,GAAWA,EAAQs/C,eAAiB,SAEhD,OAAO,IAAIC,eAAcnrD,OAAA8kC,OAAA,GAClBl5B,EAAc,CACXR,MAAMggD,mDAAoB/oD,EAAK+oD,EAAY1hD,IAAOA,EAAKjD,EAAOpG,OAAO4C,sBACrEmI,KAAKggD,6CAAc1hD,QAAYrH,EAAK+oD,EAAY1hD,GAAO0hD,EAAWh+C,WAClEhC,mDAAY1B,GAAOA,EAAGmD,eAAgBnD,EAAGmD,UAAuBnD,EAAK,UAAQ1J,OAAA8kC,OAAA,CAClFomB,cAAeF,EAAKC,OAAMh+C,GAAcrB,IAE7C,SAAevJ,EAAK+oD,EAAgD1hD,6CAChE,IAAI4U,EACAle,EAA8B,KAC9BmH,EAAO6jD,EAAWC,aAAe,KACrC,OAASjrD,QAAUsJ,EAAGrH,KAAK2oD,EAAKzjD,EAAO,OAAO9E,MAM1C,GALI8D,YAAYqC,OAAOxI,EAAEG,SAAW+d,EAAMte,OAAA+1B,GAAA,aAAA/1B,CAAaI,EAAEG,UAC7C,MAARgH,GAAgByjD,IAAOzjD,EAAOA,EAAO+W,EAAI1X,WAAa,GACtDxG,EAAEG,MAAc+d,GAEpB8sC,EAAWE,QAAQlrD,EAAEG,OACT,MAARgH,KAAkBA,GAAQ,EAAK,OAEvC6jD,EAAWh+C,WA9D0Bm+C,CAAiC9kD,EAAQmF,GAClF,GAAI5L,OAAAi8C,GAAA,EAAAj8C,CAAcyG,GAAW,OAMjC,SAAwCA,EAAqBmF,GAEzD,IAAIlC,EAAyB,KAC7B,MAAMshD,EAAMp/C,GAA4B,UAAjBA,EAAQ0R,OAAqB,EAC9C2tC,EAAMr/C,GAAWA,EAAQs/C,eAAiB,SAEhD,OAAO,IAAIC,eAAcnrD,OAAA8kC,OAAA,GAClBl5B,EAAc,CACjBR,MAAMggD,GAAc/oD,EAAK+oD,EAAY1hD,IAAOA,EAAKjD,EAAOpG,OAAOwC,eAC/DuI,KAAKggD,GAAc1hD,EAAMrH,EAAK+oD,EAAY1hD,GAAO0hD,EAAWh+C,SAC5DhC,SAAY1B,GAAOA,EAAGmD,QAAUnD,EAAGmD,SAAuBnD,EAAK,QAAQ1J,OAAA8kC,OAAA,CACtEomB,cAAeF,EAAKC,OAAMh+C,GAAcrB,IAE7C,SAASvJ,EAAK+oD,EAAgD1hD,GAC1D,IAAI4U,EACAle,EAA8B,KAC9BmH,EAAO6jD,EAAWC,aAAe,KACrC,OAASjrD,EAAIsJ,EAAGrH,KAAK2oD,EAAKzjD,EAAO,OAAO9E,MAMpC,GALI8D,YAAYqC,OAAOxI,EAAEG,SAAW+d,EAAMte,OAAA+1B,GAAA,aAAA/1B,CAAaI,EAAEG,UAC7C,MAARgH,GAAgByjD,IAAOzjD,EAAOA,EAAO+W,EAAI1X,WAAa,GACtDxG,EAAEG,MAAc+d,GAEpB8sC,EAAWE,QAAQlrD,EAAEG,OACT,MAARgH,KAAkBA,GAAQ,EAAK,OAEvC6jD,EAAWh+C,SA/BqBo+C,CAA4B/kD,EAAQmF,GAExE,MAAU0B,MAAM,mEDDpBo1C,GAA8B,WEFvB,SAAwFnC,EAA8CC,GAEzI,MAAMiL,EAAQ,IAAIpQ,GAClB,IAAIlsC,EAAsC,KAE1C,MAAMu8C,EAAW,IAAIP,eAA+B,CAC1C//C,yDAAiBqgD,EAAMr+C,WACvBhC,MAAMggD,mDAAoB/oD,EAAK+oD,EAAYj8C,IAAWA,QAMhE,qDACI,mBAAoBuzC,GAAkB75C,KAAK4iD,IAAQ7I,KAAKpC,KAPmBoC,QACrEx3C,KAAKggD,6CAAcj8C,QAAe9M,EAAK+oD,EAAYj8C,GAAUi8C,EAAWh+C,aAGlF,MAAO,CAAEzB,SAAU,IAAIggD,eAAeF,EAAKzrD,OAAA8kC,OAAA,CAAIomB,cAAiB/jD,OAAYo5C,IAAqBmL,YAMjG,SAAerpD,EAAK+oD,EAA6Dj8C,6CAC7E,IAAI5H,EAAO6jD,EAAWC,YAClBjrD,EAA2C,KAC/C,OAASA,QAAU+O,EAAO9M,QAAQI,MAE9B,GADA2oD,EAAWE,QAAQlrD,EAAEG,OACT,MAARgH,KAAkBA,GAAQ,EAC1B,OAGR6jD,EAAWh+C,YFvBnB2yC,GAA8B,WGHvB,SAEHQ,EACAC,GAGA,MAAME,EAAS,IAAI19C,KAAQu9C,GACrBpxC,EAAS,IAAI4sC,GAAgB2E,GAC7BgL,EAAW,IAAIP,eAAe,CAChC7tC,KAAM,QACAlS,yDAAiB+D,EAAO+sC,YACxB9wC,KAAKggD,mDAAoB/oD,EAAK+oD,MAC9BhgD,MAAMggD,mDAAoB/oD,EAAK+oD,OACxCprD,OAAA8kC,OAAA,CAAIomB,cAAiB/jD,OAAYq5C,IAElC,MAAO,CAAE70C,SAAU,IAAIggD,eAAejL,EAAQH,GAAmBmL,YAEjE,SAAerpD,EAAK+oD,6CAChB,IAAI9sC,EAAyB,KACzB/W,EAAO6jD,EAAWC,YACtB,KAAO/sC,QAAYnP,EAAOK,KAAKjI,GAAQ,OAEnC,GADA6jD,EAAWE,QAAQhtC,GACP,MAAR/W,IAAiBA,GAAQ+W,EAAI1X,aAAe,EAAK,OAEzDwkD,EAAWh+C","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { ArrayBufferViewConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue x and y don't share the same underlying ArrayBuffer\n        if (!x || !y || x.buffer !== y.buffer) {\n            y && (result[++j] = y);\n            continue;\n        }\n        // swap if y starts before x\n        if (y.byteOffset < x.byteOffset) {\n            x = chunks[i]; y = result[j];\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends ArrayBufferView>(ArrayBufferViewCtor: ArrayBufferViewConstructor<T>, input: ArrayBufferViewInput): T {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBufferViewCtor) {\n        return value.constructor === ArrayBufferViewCtor ? value :\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n    }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends ArrayBufferView>(ArrayCtor: ArrayBufferViewConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends ArrayBufferView>(ArrayCtor: ArrayBufferViewConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['tee']) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['pipeTo']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    private _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    private _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder();\n        return decoder.decode.bind(decoder);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return encoder.encode.bind(encoder);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends Vector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends Vector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface Vector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class Vector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\nexport enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n\n    // These enum values are here so that TypeScript can narrow the type signatures further\n    // beyond the base Arrow types. The base Arrow types include metadata like bitWidths that\n    // impact the type signatures of the values we return. For example, the Int8Vector reads\n    // 1-byte numbers from an Int8Array, an Int32Vector reads a 4-byte number from an Int32Array,\n    // and an Int64Vector reads a pair of 4-byte lo, hi int32s, and returns them as a zero-copy\n    // slice from an underlying Int32Array. Library consumers benefit by doing this type narrowing,\n    // since we can ensure the types across all public methods are propagated and never bail to `any`.\n    // These values are _never_ actually used at runtime, and they will _never_ be written into the\n    // flatbuffers metadata of serialized Arrow IPC payloads.\n    Dictionary            = -1, // Dictionary aka Category type\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { Vector as VType } from './interfaces';\nimport { ArrayBufferViewConstructor } from './interfaces';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType; }> =\n      { readonly length: number }\n    & ( Iterable<T[keyof T]['TValue']> )\n    & { [P in keyof T]: T[P]['TValue'] }\n    & { get<K extends keyof T>(key: K): T[K]['TValue']; }\n    ;\n\nexport interface DataType<TType extends Type = Type> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n}\n\nexport class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get children() { return this._children; }\n    public get typeId(): TType { return <any> Type.NONE; }\n\n    constructor(protected _children?: Field<TChildren[keyof TChildren]>[]) {}\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number;            };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number;            };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number;            };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: Int32Array;        };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number;            };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number;            };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number;            };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: Uint32Array;       };\n};\n\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(protected _isSigned: IType[T]['isSigned'],\n                protected _bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get isSigned() { return this._isSigned; }\n    public get bitWidth() { return this._bitWidth; }\n    public get ArrayType(): ArrayBufferViewConstructor<IType[T]['TArray']> {\n        switch (this._bitWidth) {\n            case  8: return (this._isSigned ?  Int8Array :  Uint8Array) as any;\n            case 16: return (this._isSigned ? Int16Array : Uint16Array) as any;\n            case 32: return (this._isSigned ? Int32Array : Uint32Array) as any;\n            case 64: return (this._isSigned ? Int32Array : Uint32Array) as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this._isSigned ? `I` : `Ui`}nt${this._bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(protected _precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get precision() { return this._precision; }\n    public get ArrayType(): ArrayBufferViewConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: typeof Uint8Array; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: typeof Uint8Array; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: typeof Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(protected _scale: number,\n                protected _precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public get scale() { return this._scale; }\n    public get precision() { return this._precision; }\n    public toString() { return `Decimal[${this._precision}e${this._scale > 0 ? `+` : ``}${this._scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: typeof Int32Array; }\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(protected _unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public get unit() { return this._unit; }\n    public toString() { return `Date${(this._unit + 1) * 32}<${DateUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: typeof Int32Array; }\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(protected _unit: TimesType[T]['unit'],\n                protected _bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public get unit() { return this._unit; }\n    public get bitWidth() { return this._bitWidth; }\n    public toString() { return `Time${this._bitWidth}<${TimeUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: typeof Int32Array; }\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(protected _unit: TimeUnit, protected _timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public get unit() { return this._unit; }\n    public get timezone() { return this._timezone; }\n    public toString() { return `Timestamp<${TimeUnit[this._unit]}${this._timezone ? `, ${this._timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: typeof Int32Array; }\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(protected _unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public get unit() { return this._unit; }\n    public toString() { return `Interval<${IntervalUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: VType<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super([child]);\n    }\n    public get typeId() { return Type.List as Type.List; }\n    // @ts-ignore\n    protected _children: Field<T>[];\n    public toString() { return `List<${this.valueType}>`; }\n    public get children() { return this._children; }\n    public get valueType(): T { return this._children[0].type as T; }\n    public get valueField(): Field<T> { return this._children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct<T extends { [key: string]: DataType; } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\nexport class Struct<T extends { [key: string]: DataType; } = any> extends DataType<Type.Struct, T> {\n    constructor(protected _children: Field<T[keyof T]>[]) {\n        super(_children);\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public get children() { return this._children; }\n    public toString() { return `Struct<[${this._children.map((f) => f.type).join(`, `)}]>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int32Array; TValue: any[]; }\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    protected _typeIds: Int32Array;\n    protected _children: Field<any>[];\n    protected _typeIdToChildIndex: { [key: number]: number };\n    constructor(protected _mode: UnionMode, _typeIds: number[] | Int32Array, _children: Field<any>[]) {\n        super(_children);\n        this._children = _children;\n        this._typeIds = _typeIds = Int32Array.from(_typeIds);\n        this._typeIdToChildIndex = _typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public get mode() { return this._mode; }\n    public get typeIds() { return this._typeIds; }\n    public get children() { return this._children; }\n    public get typeIdToChildIndex() { return this._typeIdToChildIndex; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this._children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: typeof Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(protected _byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public get byteWidth() { return this._byteWidth; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: VType<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    constructor(protected _listSize: number, child: Field<T>) {\n        super([child]);\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    // @ts-ignore\n    protected _children: Field<T>[];\n    public get listSize() { return this._listSize; }\n    public get children() { return this._children; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this._listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\nexport interface Map_<T extends { [key: string]: DataType; } = any> extends DataType<Type.Map> { TArray: Uint8Array; TValue: RowLike<T>; dataTypes: T; }\nexport class Map_<T extends { [key: string]: DataType; } = any> extends DataType<Type.Map, T> {\n    constructor(protected _children: Field<T[keyof T]>[],\n                protected _keysSorted: boolean = false) {\n        super(_children);\n    }\n    public get typeId() { return Type.Map as Type.Map; }\n    public get children() { return this._children; }\n    public get keysSorted() { return this._keysSorted; }\n    public toString() { return `Map<{${this._children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    protected _id: number;\n    protected _indices: TKey;\n    protected _dictionary: T;\n    protected _isOrdered: boolean;\n    protected _dictionaryVector: Vector<T>;\n    public set dictionaryVector(v) { this._dictionaryVector = v; }\n    public get dictionaryVector() { return this._dictionaryVector; }\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null, dictionaryVector?: Vector<T>) {\n        super();\n        this._indices = indices;\n        this._dictionary = dictionary;\n        this._isOrdered = isOrdered || false;\n        this._dictionaryVector = dictionaryVector!;\n        this._id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get id() { return this._id; }\n    public get indices() { return this._indices; }\n    public get dictionary() { return this._dictionary; }\n    public get isOrdered() { return this._isOrdered; }\n    public set children(_: T['children']) {}\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType, Dictionary } from './type';\nimport { Vector as VType } from './interfaces';\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(vectors: VType<T[keyof T]>[], names: (keyof T)[] = []) {\n        return new Schema<T>(vectors.map((v, i) => new Field('' + (names[i] || i), v.type)));\n    }\n\n    protected _fields: Field[];\n    protected _metadata: Map<string, string>;\n    protected _dictionaries: Map<number, DataType>;\n    protected _dictionaryFields: Map<number, Field<Dictionary>[]>;\n    public get fields(): Field[] { return this._fields; }\n    public get metadata(): Map<string, string> { return this._metadata; }\n    public get dictionaries(): Map<number, DataType> { return this._dictionaries; }\n    public get dictionaryFields(): Map<number, Field<Dictionary>[]> { return this._dictionaryFields; }\n\n    constructor(fields: Field[],\n                metadata?: Map<string, string>,\n                dictionaries?: Map<number, DataType>,\n                dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n        this._fields = fields || [];\n        this._metadata = metadata || new Map();\n        if (!dictionaries || !dictionaryFields) {\n            ({ dictionaries, dictionaryFields } = generateDictionaryMap(\n                fields, dictionaries || new Map(), dictionaryFields || new Map()\n            ));\n        }\n        this._dictionaries = dictionaries;\n        this._dictionaryFields = dictionaryFields;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this._fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n}\n\nexport class Field<T extends DataType = DataType> {\n    protected _type: T;\n    protected _name: string;\n    protected _nullable: true | false;\n    protected _metadata?: Map<string, string> | null;\n    constructor(name: string, type: T, nullable: true | false = false, metadata?: Map<string, string> | null) {\n        this._name = name;\n        this._type = type;\n        this._nullable = nullable;\n        this._metadata = metadata || new Map();\n    }\n    public get type() { return this._type; }\n    public get name() { return this._name; }\n    public get nullable() { return this._nullable; }\n    public get metadata() { return this._metadata; }\n    public get typeId() { return this._type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public get indices() {\n        return DataType.isDictionary(this._type) ? this._type.indices : this._type;\n    }\n    public toString() { return `${this.name}: ${this.type}`; }\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries: Map<number, DataType>, dictionaryFields: Map<number, Field<Dictionary>[]>) {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaryFields.get(type.id)) {\n                dictionaryFields.set(type.id, []);\n            }\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n                dictionaryFields.get(type.id)!.push(field as any);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children) {\n            generateDictionaryMap(type.children, dictionaries, dictionaryFields);\n        }\n    }\n\n    return { dictionaries, dictionaryFields };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        bytes.set((offset % 8 === 0)\n            // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n            ? bitmap.subarray(offset >> 3)\n            // Otherwise iterate each bit from the offset and return a new one\n            : packBools(iterateBits(bitmap, offset, length, null, getBool)));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let n = 0, i = 0;\n    let xs: number[] = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do { xs[i] = 0; } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { popcnt_bit_range } from './util/bit';\nimport { toArrayBufferView } from './util/buffer';\nimport { DataType, SparseUnion, DenseUnion } from './type';\nimport { VectorType as BufferType, UnionMode, Type } from './enum';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number>;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number>;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number>;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n    public readonly values: Buffers<T>[BufferType.DATA];\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[]) {\n        this.type = type;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n            const t: any = type;\n            switch (type.typeId) {\n                case Type.Decimal: this.stride = 4; break;\n                case Type.Timestamp: this.stride = 2; break;\n                case Type.Date: this.stride = 1 + (t as Date_).unit; break;\n                case Type.Interval: this.stride = 1 + (t as Interval).unit; break;\n                case Type.Int: this.stride = 1 + +((t as Int).bitWidth > 32); break;\n                case Type.Time: this.stride = 1 + +((t as Time).bitWidth > 32); break;\n                case Type.FixedSizeList: this.stride = (t as FixedSizeList).listSize; break;\n                case Type.FixedSizeBinary: this.stride = (t as FixedSizeBinary).byteWidth; break;\n                default: this.stride = 1;\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const { stride, typeId, childData } = this;\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toArrayBufferView(Int32Array, valueOffsets), toArrayBufferView(Uint8Array, data), toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toArrayBufferView(Int32Array, valueOffsets), toArrayBufferView(Uint8Array, data), toArrayBufferView(Uint8Array, nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toArrayBufferView(Int32Array, valueOffsets), undefined, toArrayBufferView(Uint8Array, nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data | Vector) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toArrayBufferView(Uint8Array, nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toArrayBufferView(Uint8Array, nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toArrayBufferView(Uint8Array, nullBitmap)], children);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toArrayBufferView(Uint8Array, nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toArrayBufferView(Int32Array, <ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n((Data.prototype as any).childData = Object.freeze([]));\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    if (typeof x === 'string') { return `\"${x}\"`; }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { MapVector } from '../vector/map';\nimport { DataType, RowLike } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { StructVector } from '../vector/struct';\n\n/** @ignore */ const columnDescriptor = { enumerable: true, configurable: false, get: () => {} };\n/** @ignore */ const lengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };\n/** @ignore */ const rowIndexDescriptor = { writable: false, enumerable: false, configurable: true, value: null as any };\n/** @ignore */ const rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null as any };\n/** @ignore */ const row = { parent: rowParentDescriptor, rowIndex: rowIndexDescriptor };\n\n/** @ignore */\nexport class Row<T extends { [key: string]: DataType }> implements Iterable<T[keyof T]['TValue']> {\n    [key: string]: T[keyof T]['TValue'];\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType }>(schemaOrFields: T | Field[], fieldsAreEnumerable = false): RowLike<T> & Row<T> {\n        let schema: T, fields: Field[];\n        if (Array.isArray(schemaOrFields)) {\n            fields = schemaOrFields;\n        } else {\n            schema = schemaOrFields;\n            fieldsAreEnumerable = true;\n            fields = Object.keys(schema).map((x) => new Field(x, schema[x]));\n        }\n        return new Row<T>(fields, fieldsAreEnumerable) as RowLike<T> & Row<T>;\n    }\n    // @ts-ignore\n    private parent: TParent;\n    // @ts-ignore\n    private rowIndex: number;\n    // @ts-ignore\n    public readonly length: number;\n    private constructor(fields: Field[], fieldsAreEnumerable: boolean) {\n        lengthDescriptor.value = fields.length;\n        Object.defineProperty(this, 'length', lengthDescriptor);\n        fields.forEach((field, columnIndex) => {\n            columnDescriptor.get = this._bindGetter(columnIndex);\n            // set configurable to true to ensure Object.defineProperty\n            // doesn't throw in the case of duplicate column names\n            columnDescriptor.configurable = true;\n            columnDescriptor.enumerable = fieldsAreEnumerable;\n            Object.defineProperty(this, field.name, columnDescriptor);\n            columnDescriptor.configurable = false;\n            columnDescriptor.enumerable = !fieldsAreEnumerable;\n            Object.defineProperty(this, columnIndex, columnDescriptor);\n            columnDescriptor.get = null as any;\n        });\n    }\n    *[Symbol.iterator](this: RowLike<T>) {\n        for (let i = -1, n = this.length; ++i < n;) {\n            yield this[i];\n        }\n    }\n    private _bindGetter(colIndex: number) {\n        return function (this: Row<T>) {\n            let child = this.parent.getChildAt(colIndex);\n            return child ? child.get(this.rowIndex) : null;\n        };\n    }\n    public get<K extends keyof T>(key: K) { return (this as any)[key] as T[K]['TValue']; }\n    public bind<TParent extends MapVector<T> | StructVector<T>>(parent: TParent, rowIndex: number) {\n        rowIndexDescriptor.value = rowIndex;\n        rowParentDescriptor.value = parent;\n        const bound = Object.create(this, row);\n        rowIndexDescriptor.value = null;\n        rowParentDescriptor.value = null;\n        return bound as RowLike<T>;\n    }\n    public toJSON(): any {\n        return DataType.isStruct(this.parent.type) ? [...this] :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = (this as any)[prop]) && props || props;\n            }, {});\n    }\n    public toString() {\n        return DataType.isStruct(this.parent.type) ?\n            [...this].map((x) => valueToString(x)).join(', ') :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = valueToString((this as any)[prop])) && props || props;\n            }, {});\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Row } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    // Compare primitives\n    if (search == null || typeof search !== 'object') {\n        return (value: any) => value === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Array-likes\n    if (Array.isArray(search)) {\n        const n = (search as any).length;\n        const fns = [] as ((x: any) => boolean)[];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator((search as any)[i]);\n        }\n        return (value: any) => {\n            if (!value || value.length !== n) { return false; }\n            // Handle the case where the search element is an Array, but the\n            // values are Rows or Vectors, e.g. list.indexOf(['foo', 'bar'])\n            if ((value instanceof Row) || (value instanceof Vector)) {\n                for (let i = -1, n = value.length; ++i < n;) {\n                    if (!(fns[i]((value as any).get(i)))) { return false; }\n                }\n                return true;\n            }\n            for (let i = -1, n = value.length; ++i < n;) {\n                if (!(fns[i](value[i]))) { return false; }\n            }\n            return true;\n        };\n    }\n    // Compare Rows and Vectors\n    if ((search instanceof Row) || (search instanceof Vector)) {\n        const n = search.length;\n        const C = search.constructor as any;\n        const fns = [] as ((x: any) => boolean)[];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator((search as any).get(i));\n        }\n        return (value: any) => {\n            if (!(value instanceof C)) { return false; }\n            if (!(value.length === n)) { return false; }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value.get(i)))) { return false; }\n            }\n            return true;\n        };\n    }\n    // Compare non-empty Objects\n    const keys = Object.keys(search);\n    if (keys.length > 0) {\n        const n = keys.length;\n        const fns = [] as ((x: any) => boolean)[];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator(search[keys[i]]);\n        }\n        return (value: any) => {\n            if (!value || typeof value !== 'object') { return false; }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value[keys[i]]))) { return false; }\n            }\n            return true;\n        };\n    }\n    // No valid comparator\n    return () => false;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { Clonable, Sliceable, Applicative } from '../vector';\nimport { DictionaryVector } from './dictionary';\n\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? T['dictionaryVector'] : null | never;\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends Vector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: Vector<T>[]) {\n        return vectors.reduce(function flatten(xs: any[], x: any): any[] {\n            return x instanceof Chunked ? x.chunks.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x: any): x is Vector<T> => x instanceof Vector);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...chunks: Vector<T>[]): Chunked<T> {\n        return new Chunked(chunks[0].type, Chunked.flatten(...chunks));\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId() { return this._type.typeId; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return (<any> this._type.dictionaryVector) as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let { ArrayType } = this._type;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new (ArrayType as any)(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = from + Math.min(chunkLength - from, end - chunkOffset);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset - 1;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[++idx] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { Vector as VType } from '../interfaces';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\nexport interface BaseVector<T extends DataType = any> extends Clonable<VType<T>>, Sliceable<VType<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): VType<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): VType<R>;\n}\n\nexport abstract class BaseVector<T extends DataType = any> extends Vector<T>\n    implements Clonable<VType<T>>, Sliceable<VType<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get VectorName() { return this.constructor.name; }\n\n    public get ArrayType(): T['ArrayType'] { return this.data.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    // @ts-ignore\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin));\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Bool } from '../type';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { packBools } from '../util/bit';\n\nexport class BoolVector extends BaseVector<Bool> {\n    /** @nocollapse */\n    public static from(data: Iterable<boolean>) {\n        let length = 0, bitmap = packBools(function*() {\n            for (let x of data) { length++; yield x; }\n        }());\n        return Vector.new(Data.Bool(new Bool(), 0, length, 0, null, bitmap));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DateUnit } from '../enum';\nimport { BaseVector } from './base';\nimport * as IntUtil from '../util/int';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    /** @nocollapse */\n    public static from<T extends Date_ = DateMillisecond>(data: Date[], unit: T['unit'] = DateUnit.MILLISECOND) {\n        switch (unit) {\n            case DateUnit.DAY: {\n                const values = Int32Array.from(data.map((d) => d.valueOf() / 86400000));\n                return Vector.new(Data.Date(new DateDay(), 0, data.length, 0, null, values));\n            }\n            case DateUnit.MILLISECOND: {\n                const values = IntUtil.Int64.convertArray(data.map((d) => d.valueOf()));\n                return Vector.new(Data.Date(new DateMillisecond(), 0, data.length, 0, null, values));\n            }\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[unit]}\"`);\n    }\n}\n\nexport class DateDayVector extends DateVector<DateDay> {}\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\nexport class DecimalVector extends BaseVector<Decimal> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { DataType, Dictionary, TKeys } from '../type';\n\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    /** @nocollapse */\n    public static from<T extends DataType<any>, TKey extends TKeys = TKeys>(\n        values: Vector<T>, indices: TKey,\n        keys: ArrayLike<number> | TKey['TArray']\n    ) {\n        const type = new Dictionary(values.type, indices, null, null, values);\n        return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys));\n    }\n    protected _indices: V<TKey>;\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this._indices = Vector.new(data.clone(this.type.indices));\n    }\n    // protected _bindDataAccessors() {}\n    public get indices() { return this._indices; }\n    public get dictionary() { return this.data.type.dictionaryVector; }\n    public isValid(index: number) { return this._indices.isValid(index); }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this._indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this._indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n    /** @nocollapse */\n    public static from<T extends Float>(data: T['TArray']) {\n        switch (data.constructor) {\n            case Uint16Array: return Vector.new(Data.Float(new Float16(), 0, data.length, 0, null, data));\n            case Float32Array: return Vector.new(Data.Float(new Float32(), 0, data.length, 0, null, data));\n            case Float64Array: return Vector.new(Data.Float(new Float64(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n}\n\nexport class Float16Vector extends FloatVector<Float16> {}\nexport class Float32Vector extends FloatVector<Float32> {}\nexport class Float64Vector extends FloatVector<Float64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\n\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n    public static from<T extends Int>(data: T['TArray']): V<T>;\n    public static from<T extends Int32 | Uint32>(data: T['TArray'], is64: true): V<T>;\n    /** @nocollapse */\n    public static from(data: any, is64?: boolean) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? Vector.new(Data.Int(new Int64(), 0, data.length, 0, null, data))\n                : Vector.new(Data.Int(new Uint64(), 0, data.length, 0, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return Vector.new(Data.Int(new Int8(), 0, data.length, 0, null, data));\n            case Int16Array: return Vector.new(Data.Int(new Int16(), 0, data.length, 0, null, data));\n            case Int32Array: return Vector.new(Data.Int(new Int32(), 0, data.length, 0, null, data));\n            case Uint8Array: return Vector.new(Data.Int(new Uint8(), 0, data.length, 0, null, data));\n            case Uint16Array: return Vector.new(Data.Int(new Uint16(), 0, data.length, 0, null, data));\n            case Uint32Array: return Vector.new(Data.Int(new Uint32(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n}\n\nexport class Int8Vector extends IntVector<Int8> {}\nexport class Int16Vector extends IntVector<Int16> {}\nexport class Int32Vector extends IntVector<Int32> {}\nexport class Int64Vector extends IntVector<Int64> {}\nexport class Uint8Vector extends IntVector<Uint8> {}\nexport class Uint16Vector extends IntVector<Uint16> {}\nexport class Uint32Vector extends IntVector<Uint32> {}\nexport class Uint64Vector extends IntVector<Uint64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class MapVector<T extends { [key: string]: DataType } = any> extends BaseVector<Map_<T>> {\n    public asStruct() {\n        return Vector.new(this.data.clone(new Struct(this.type.children)));\n    }\n    // @ts-ignore\n    private _rowProxy: Row<T>;\n    public get rowProxy(): Row<T> {\n        return this._rowProxy || (this._rowProxy = Row.new<T>(this.type.children || [], true));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    public asMap(keysSorted: boolean = false) {\n        return Vector.new(this.data.clone(new Map_(this.type.children, keysSorted)));\n    }\n    // @ts-ignore\n    private _rowProxy: Row<T>;\n    public get rowProxy(): Row<T> {\n        return this._rowProxy || (this._rowProxy = Row.new<T>(this.type.children || [], false));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n}\n\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\n\nexport class Utf8Vector extends BaseVector<Utf8> {\n    /** @nocollapse */\n    public static from(values: string[]) {\n        const length = values.length;\n        const data = encodeUtf8(values.join(''));\n        const offsets = values.reduce((offsets, str, idx) => (\n            (!(offsets[idx + 1] = offsets[idx] + str.length) || true) && offsets\n        ), new Uint32Array(values.length + 1));\n        return Vector.new(Data.Utf8(new Utf8(), 0, length, 0, null, offsets, data));\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toArrayBufferView, ArrayBufferViewInput } from './buffer';\n\ntype BigNumArray = IntArray | UintArray;\ntype IntArray = Int8Array | Int16Array | Int32Array;\ntype UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\nconst BigNumNMixin = {\n    toJSON(this: BN<BigNumArray>, ) { return `\"${bignumToString(this)}\"`; },\n    valueOf(this: BN<BigNumArray>, ) { return bignumToNumber(this); },\n    toString(this: BN<BigNumArray>, ) { return bignumToString(this); },\n    [Symbol.toPrimitive]<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default') {\n        if (hint === 'number') { return bignumToNumber(this); }\n        /** @suppress {missingRequire} */\n        return hint === 'string' || typeof BigInt !== 'function' ?\n            bignumToString(this) : BigInt(bignumToString(this));\n    }\n};\n\n/** @ignore */\nconst SignedBigNumNMixin: any = Object.assign({}, BigNumNMixin, { signed: true, constructor: undefined });\n/** @ignore */\nconst UnsignedBigNumNMixin: any = Object.assign({}, BigNumNMixin, { signed: false, constructor: undefined });\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    public static new<T extends BigNumArray>(input: ArrayBufferViewInput, signed?: boolean): T;\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(input: ArrayBufferViewInput, signed = (input instanceof Int8Array || input instanceof Int16Array || input instanceof Int32Array)): T {\n        return (signed === true) ? BN.signed(input) as T : BN.unsigned(input) as T;\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(input: ArrayBufferViewInput): T {\n        const Ctor: any = ArrayBuffer.isView(input) ? <any> input.constructor : Int32Array;\n        const { buffer, byteOffset, length } = toArrayBufferView<T>(<any> Ctor, input) as T;\n        const bn = new Ctor(buffer, byteOffset, length);\n        return Object.assign(bn, SignedBigNumNMixin);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(input: ArrayBufferViewInput): T {\n        const Ctor: any = ArrayBuffer.isView(input) ? <any> input.constructor : Uint32Array;\n        const { buffer, byteOffset, length } = toArrayBufferView<T>(<any> Ctor, input) as T;\n        const bn = new Ctor(buffer, byteOffset, length);\n        return Object.assign(bn, UnsignedBigNumNMixin);\n    }\n    constructor(input: ArrayBufferViewInput, signed = input instanceof Int32Array) {\n        return BN.new(input, signed) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmatic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint: any): number | string | bigint;\n}\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>({ buffer, byteOffset, length }: T) {\n    let int64 = 0;\n    let words = new Uint32Array(buffer, byteOffset, length);\n    for (let i = 0, n = words.length; i < n;) {\n        int64 += words[i++] + (words[i++] * (i ** 32));\n        // int64 += (words[i++] >>> 0) + (words[i++] * (i ** 32));\n    }\n    return int64;\n}\n\n/** @ignore */\nfunction bignumToString<T extends BN<BigNumArray>>({ buffer, byteOffset, length }: T) {\n\n    let string = '', i = -1;\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(buffer, byteOffset, length * 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let n = base32.length - 1;\n\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        string = `${base64[0]}${string}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n\n    return string ? string : `0`;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { decodeUtf8 } from '../util/utf8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface GetVisitor extends Visitor {\n    visit<T extends Vector>  (node: T, index: number): T['TValue'];\n    visitMany<T extends Vector>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: Vector<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: Vector<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: Vector<T>, index: number): T['TValue'];\n}\n\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: Vector<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: Vector<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number): T['TValue'] => (values[stride * index] - 32767) / 32767;\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(<any> vector, index)\n        : getBigInts(<any> vector, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as any, index)\n        : getFloat16(vector as any, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as any, index)\n        : getDateMillisecond(vector as any, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as Vector<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as Vector<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as Vector<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(2 * index, 2 * (index + 1)), true);\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(2 * index, 2 * (index + 1)), true);\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as Vector<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as Vector<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as Vector<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as Vector<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(4 * index, 4 * (index + 1)), false);\n\n/** @ignore */\nconst getList = <T extends List>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.rowProxy.bind(vector, index);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as Vector<DenseUnion>, index) :\n        getSparseUnion(vector as Vector<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: Vector<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: Vector<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as any, index)\n        : getIntervalYearMonth(vector as any, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getNested;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =               getNested;\n\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface SetVisitor extends Visitor {\n    visit<T extends Vector>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends Vector>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n}\n\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: Vector<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = (value * 32767) + 32767; };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(<any> vector, index, value as Numeric1X['TValue'])\n        : setNumericX2(<any> vector, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(<any> vector, index, value)\n        : setFloat16(<any> vector, index, value);\n};\n\n/* istanbul ignore next */\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector, index, value)\n        : setDateMillisecond(vector, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as Vector<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as Vector<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as Vector<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as Vector<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as Vector<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as Vector<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as Vector<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!;\n    const { valueOffsets, stride } = vector;\n    let idx = -1, offset = valueOffsets[index * stride];\n    let end = Math.min(value.length, valueOffsets[(index * stride) + 1] - offset);\n    while (offset < end) {\n        values.set(offset++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.children.forEach(({ name }, idx) => {\n        const kid = vector.getChildAt(idx);\n        kid && kid.set(index, value[name]);\n    });\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as Vector<DenseUnion>, index, value) :\n        setSparseUnion(vector as Vector<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector, index, value)\n        : setIntervalYearMonth(vector, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 getDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setNested;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =               setNested;\n\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends Vector>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends Vector>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: Vector<T>, value: Vector<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n}\n\nexport class IndexOfVisitor extends Visitor {\n}\n\n/** @ignore */\nfunction nullIndexOf(vector: Vector<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: Vector<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends Vector>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends Vector>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n}\n\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: Vector<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Type, Precision } from '../enum';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends Vector>(node: T): T['TArray'];\n    visitMany<T extends Vector>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>) => Vector<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: Vector<T>): Vector<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: Vector<T>): Vector<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: Vector<T>): Vector<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: Vector<T>): Vector<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: Vector<T>): Vector<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: Vector<T>): Vector<T>['TArray'];\n}\n\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: Vector<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n        case Type.Float:\n            return (type as Float).precision === Precision.HALF /* Precision.HALF */\n                ? new Float32Array(vector[Symbol.iterator]())\n                : vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (type: T) => number;\n}\n\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { Vector, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Row } from './row';\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { Vector as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n    }\n}\n\ndeclare module './base' {\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn(data.type)())(data, ...args) as V<T>;\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .filter((typeId) => typeId !== Type.NONE && typeId !== Type[Type.NONE])\n    .map((T: any) => Type[T] as any).filter((T: any): T is Type => typeof T === 'number')\n    .forEach((typeId) => {\n        let typeIds: Type[];\n        switch (typeId) {\n            case Type.Int:       typeIds = [Type.Int8, Type.Int16, Type.Int32, Type.Int64, Type.Uint8, Type.Uint16, Type.Uint32, Type.Uint64]; break;\n            case Type.Float:     typeIds = [Type.Float16, Type.Float32, Type.Float64]; break;\n            case Type.Date:      typeIds = [Type.DateDay, Type.DateMillisecond]; break;\n            case Type.Time:      typeIds = [Type.TimeSecond, Type.TimeMillisecond, Type.TimeMicrosecond, Type.TimeNanosecond]; break;\n            case Type.Timestamp: typeIds = [Type.TimestampSecond, Type.TimestampMillisecond, Type.TimestampMicrosecond, Type.TimestampNanosecond]; break;\n            case Type.Interval:  typeIds = [Type.IntervalDayTime, Type.IntervalYearMonth]; break;\n            case Type.Union:     typeIds = [Type.DenseUnion, Type.SparseUnion]; break;\n            default:                typeIds = [typeId]; break;\n        }\n        typeIds.forEach((typeId) => {\n            const VectorCtor = getVectorConstructor.visit(typeId);\n            VectorCtor.prototype['get'] = partial1(getVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['set'] = partial2(setVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['indexOf'] = partial2(indexOfVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['toArray'] = partial0(toArrayVisitor.getVisitFn(typeId));\n            VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n            VectorCtor.prototype[Symbol.iterator] = partial0(iteratorVisitor.getVisitFn(typeId));\n        });\n    });\n\n/** @ignore */\nfunction partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nfunction partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n\n/** @ignore */\nfunction wrapNullable1<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, a != null)) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullable1(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries, dictionaryFields\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries, dictionaryFields));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new DataType();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_(children || [], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/** @ignore */\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/** @ignore */\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/** @ignore */\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/** @ignore */\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/** @ignore */\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries, dictionaryFields);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries, dictionaryFields);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries, dictionaryFields);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries, dictionaryFields);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries, dictionaryFields));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new DataType();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_(children || [], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                delete this._pending;\n                this.size = (await file.stat()).size;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json, _batchIndex, _dictionaryIndex } = this;\n        const numBatches = _json.batches.length;\n        const numDictionaries = _json.dictionaries.length;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { value: message, done: _batchIndex >= numBatches && _dictionaryIndex >= numDictionaries };\n        }\n        if (_dictionaryIndex < numDictionaries) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (_batchIndex < numBatches) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { Vector as VType } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: VType<T> | Data<T> | T): (vector: VType<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: VType<T>): this;\n    visitInt                  <T extends Int>             (vector: VType<T>): this;\n    visitFloat                <T extends Float>           (vector: VType<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: VType<T>): this;\n    visitBinary               <T extends Binary>          (vector: VType<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: VType<T>): this;\n    visitDate                 <T extends Date_>           (vector: VType<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: VType<T>): this;\n    visitTime                 <T extends Time>            (vector: VType<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: VType<T>): this;\n    visitList                 <T extends List>            (vector: VType<T>): this;\n    visitStruct               <T extends Struct>          (vector: VType<T>): this;\n    visitUnion                <T extends Union>           (vector: VType<T>): this;\n    visitInterval             <T extends Interval>        (vector: VType<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: VType<T>): this;\n    visitMap                  <T extends Map_>            (vector: VType<T>): this;\n}\n\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n\n        const vectors = args.reduce(function flatten(xs: any[], x: any): any[] {\n            if (Array.isArray(x)) { return x.reduce(flatten, xs); }\n            if (!(x instanceof RecordBatch)) { return [...xs, x]; }\n            return [...xs, ...x.schema.fields.map((_, i) => x.getChildAt(i)!)];\n        }, []).filter((x: any): x is Vector => x instanceof Vector);\n\n        return new VectorAssembler().visitMany(vectors)[0];\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            addBuffer.call(this, nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : truncateBitmap(data.offset, length, data.nullBitmap)\n            ).nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: VType<T>) { return this; }\n    public visitDictionary<T extends Dictionary>(vector: VType<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: VType<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: VType<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: VType<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: VType<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends List | FixedSizeList>(this: VectorAssembler, vector: VType<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Map_ | Union>(this: VectorAssembler, vector: VType<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =   assembleNestedVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { RecordBatch } from '../recordbatch';\nimport { Vector as VType } from '../interfaces';\nimport { VectorType as BufferType } from '../enum';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: VType<T>): { };\n    visitBool                 <T extends Bool>            (vector: VType<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: VType<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: VType<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: VType<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: VType<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: VType<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: VType<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: VType<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: VType<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: VType<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: VType<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: VType<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: VType<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: VType<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: VType<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: VType<T>): { children: any[] };\n}\n\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n\n        const vectors = args.reduce(function flatten(xs: any[], x: any): any[] {\n            if (Array.isArray(x)) { return x.reduce(flatten, xs); }\n            if (!(x instanceof RecordBatch)) { return [...xs, x]; }\n            return xs.concat(x.schema.fields.map(\n                (f, i) => new Column(f, [x.getChildAt(i)!])));\n        }, []).filter((x: any): x is Column => x instanceof Column);\n\n        return new JSONVectorAssembler().visitMany(vectors);\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': nullCount <= 0\n                ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: VType<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: VType<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: VType<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: VType<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: VType<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: VType<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: VType<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: VType<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: VType<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: VType<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: VType<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: VType<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride))}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { DataType, Dictionary } from '../type';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream } from '../util/compat';\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: { autoDestroy: boolean }) {\n        super();\n        this._autoDestroy = options && (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter();\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n\n        if (!schema || (schema !== this._schema)) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(chunk?: Table<T> | RecordBatch<T> | null) {\n        let schema: Schema<T> | null;\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (!chunk || !(schema = chunk.schema)) {\n            return this.finish() && undefined;\n        } else if (schema !== this._schema) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n        (chunk instanceof Table)\n            ? this.writeAll(chunk.chunks)\n            : this._writeRecordBatch(chunk);\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const alignedSize = (flatbufferSize + 4 + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - 4;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - 4));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMessage(Message.from(schema))\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n\n    protected _writeFooter() {\n        return this._writePadding(4); // eos bytes\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(records: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(records);\n        const recordBatch = new metadata.RecordBatch(records.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(dictionaryFields: Map<number, Field<Dictionary<any, any>>[]>) {\n        for (const [id, fields] of dictionaryFields) {\n            const vector = fields[0].type.dictionaryVector;\n            if (!(vector instanceof Chunked)) {\n                this._writeDictionaryBatch(vector, id, false);\n            } else {\n                const chunks = vector.chunks;\n                for (let i = -1, n = chunks.length; ++i < n;) {\n                    this._writeDictionaryBatch(chunks[i], id, i > 0);\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>, options?: { autoDestroy: true }): RecordBatchStreamWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: { autoDestroy: true }): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any, options?: { autoDestroy: true }) {\n        return new RecordBatchStreamWriter<T>(options).writeAll(input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchFileWriter<T>().writeAll(input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMagic()._writePadding(2)\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n\n    protected _writeFooter() {\n        const buffer = Footer.encode(new Footer(\n            this._schema!, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return this\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    protected _writeMessage() { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`)._writeDictionaries(schema.dictionaryFields);\n    }\n    protected _writeDictionaries(dictionaryFields: Map<number, Field<Dictionary<any, any>>[]>) {\n        this._write(`,\\n  \"dictionaries\": [\\n`);\n        super._writeDictionaries(dictionaryFields);\n        return this._write(`\\n  ]`);\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(this._schema!, dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(records: RecordBatch<T>) {\n        this._write(this._recordBatchBlocks.length === 0\n            ? `,\\n  \"batches\": [\\n    `\n            : `,\\n    `);\n        this._write(`${recordBatchToJSON(records)}`);\n        this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    public close() {\n        if (this._recordBatchBlocks.length > 0) {\n            this._write(`\\n  ]`);\n        }\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    const chunks = (input instanceof Table) ? input.chunks : input;\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(schema: Schema, dictionary: Vector, id: number, isDelta = false) {\n    const f = schema.dictionaryFields.get(id)![0];\n    const field = new Field(f.name, f.type.dictionary, f.nullable, f.metadata);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { isPromise } from './util/compat';\nimport { RecordBatch } from './recordbatch';\nimport { Vector as VType } from './interfaces';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { Vector, Chunked } from './vector/index';\nimport { DataType, RowLike, Struct } from './type';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\n\nexport interface Table<T extends { [key: string]: DataType; } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType; } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType; } = any>() { return new Table<T>(new Schema([]), []); }\n\n    public static from<T extends { [key: string]: DataType } = any>(): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source?: any) {\n\n        if (!source) { return Table.empty<T>(); }\n\n        let reader = RecordBatchReader.from<T>(source) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty<T>() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty<T>();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType; } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromVectors<T extends { [key: string]: DataType; } = any>(vectors: VType<T[keyof T]>[], names?: (keyof T)[]) {\n        return new Table(RecordBatch.from(vectors, names));\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType; } = any>(struct: Vector<Struct<T>>) {\n        const schema = new Schema<T>(struct.type.children);\n        const chunks = (struct instanceof Chunked ? struct.chunks : [struct]) as VType<Struct<T>>[];\n        return new Table(schema, chunks.map((chunk) => new RecordBatch(schema, chunk.data)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema, batches: RecordBatch<T>[]);\n    constructor(schema: Schema, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = args.reduce(function flatten(xs: any[], x: any): any[] {\n            return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x: any): x is RecordBatch<T> => x instanceof RecordBatch);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        if (!chunks[0]) { chunks[0] = new RecordBatch(schema, 0, []); }\n\n        super(chunks[0].type, chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> | null {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]> | null;\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let schema = this._schema;\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n        let columns = this._children || (this._children = []) as Column[];\n        if (column = columns[index]) { return column as Column<R>; }\n        if (field = ((schema.fields || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return writer.writeAll(this._chunks).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select(...columnNames: string[]) {\n        return new Table(this._chunks.map((batch) => batch.select(...columnNames)));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Schema, Field } from './schema';\nimport { DataType, Struct } from './type';\nimport { StructVector } from './vector/struct';\nimport { Vector as VType } from './interfaces';\nimport { Chunked } from './vector/chunked';\nimport { Clonable, Sliceable, Applicative } from './vector';\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(vectors: VType<T[keyof T]>[], names: (keyof T)[] = []) {\n        return new RecordBatch(\n            Schema.from(vectors, names),\n            vectors.reduce((len, vec) => Math.max(len, vec.length), 0),\n            vectors\n        );\n    }\n\n    protected _schema: Schema;\n\n    constructor(schema: Schema<T>, numRows: number, childData: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let schema = args[0];\n        let data: Data<Struct<T>>;\n        let children: Vector[] | undefined;\n        if (typeof args[1] === 'number') {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, numRows, childData] = args as [Schema<T>, number, Data[]];\n            data = Data.Struct(new Struct<T>(fields), 0, numRows, 0, null, childData);\n        } else {\n            [, data, children] = (args as [Schema<T>, Data<Struct<T>>, Vector[]?]);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const fields = this._schema.fields;\n        const schema = this._schema.select(...columnNames);\n        const childNames = columnNames.reduce((xs, x) => (xs[x] = true) && xs, <any> {});\n        const childData = this.data.childData.filter((_, i) => childNames[fields[i].name]);\n        const structData = Data.Struct(new Struct(schema.fields), 0, this.length, 0, null, childData);\n        return new RecordBatch<{ [P in K]: T[P] }>(schema, structData as Data<Struct<{ [P in K]: T[P] }>>);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[]) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Null(type, 0, length, nullCount, this.readNullBitmap(type, nullCount));                                                                                }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices));                                                   }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n}\n\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[]) {\n        super(new Uint8Array(0), nodes, buffers);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { Vector } from '../vector';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        if (isDelta || !dictionaries.get(id)) {\n\n            const type = schema.dictionaries.get(id)!;\n            const vector = (isDelta ? dictionaries.get(id)!.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n\n            (schema.dictionaryFields.get(id) || []).forEach(({ type }) => type.dictionaryVector = vector);\n\n            return vector;\n        }\n        return dictionaries.get(id)!;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Vector as V } from '../interfaces';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        const schema = new Schema<{ values: T, counts: TCount }>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nexport class FilteredDataFrame<T extends { [key: string]: DataType; } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Schema, Field } from './schema';\nexport { Visitor } from './visitor';\nexport {\n    Row,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\nexport const util = {\n    ...util_int_,\n    ...util_bit_,\n    ...util_buffer_,\n    ...util_vector_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './ipc/whatwg/iterable';\nimport { recordBatchReaderThroughDOMStream } from './ipc/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './ipc/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util\n} from './Arrow';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"],"sourceRoot":""}