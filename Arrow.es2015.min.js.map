{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","type.ts","fb/Schema.ts","vector.ts","data.ts","vector/flat.ts","tslib/tslib.es6.js","ipc/metadata.ts","util/bit.ts","util/int.ts","ipc/magic.ts","visitor.ts","predicate.ts","recordbatch.ts","fb/Message.ts","ipc/reader/vector.ts","ipc/reader/json.ts","ipc/reader/binary.ts","ipc/reader/arrow.ts","ipc/writer/arrow.ts","table.ts","util/compat.ts","vector/nested.ts","flatbuffers/js/flatbuffers.mjs","vector/list.ts","vector/chunked.ts","ipc/writer/binary.ts","util/pretty.ts","util/node.ts","vector/validity.ts","vector/dictionary.ts","ipc/reader/node.ts","text-encoding-utf-8/lib/encoding.lib.mjs","fb/File.ts","Arrow.ts"],"names":["root","factory","exports","module","define","amd","Arrow","window","t","installedModules","__webpack_require__","moduleId","i","l","S","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","h","a","f","w","y","v","g","b","e","A","x","U","O","B","V","I","L","T","_","F","D","M","j","C","N","E","$","z","R","k","P","W","J","K","Y","q","H","G","Q","Type","_visitor__WEBPACK_IMPORTED_MODULE_4__","ArrowType","flatbuffers__WEBPACK_IMPORTED_MODULE_2__","Long","_fb_Schema__WEBPACK_IMPORTED_MODULE_0__","apache","arrow","flatbuf","DateUnit","TimeUnit","Precision","UnionMode","VectorType","IntervalUnit","MessageHeader","_fb_Message__WEBPACK_IMPORTED_MODULE_1__","MetadataVersion","Schema","[object Object]","fields","metadata","version","V4","dictionaries","Map","this","vectors","map","Field","type","bodyLength","_bodyLength","headerType","_headerType","fieldNames","namesToKeep","reduce","xs","newDictFields","newFields","filter","forEach","dictId","set","nullable","typeId","TType","X","indices","DataType","isDictionary","NONE","Null","Int","Float","Binary","Utf8","Bool","Decimal","Date","Time","Timestamp","Interval","List","Struct","Union","FixedSizeBinary","FixedSizeList","Dictionary","DenseUnion","SparseUnion","children","visitor","visitTypeInline","proto","ArrayType","Array","super","isSigned","bitWidth","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","precision","HALF","SINGLE","Float32Array","DOUBLE","Float64Array","Float16","Float32","Float64","scale","Date_","unit","timezone","valueType","valueField","join","typeIds","Dense","Sparse","byteWidth","listSize","Map_","keysSorted","dictionary","id","isOrdered","_ipc_metadata__WEBPACK_IMPORTED_MODULE_3__","getId","low","org","__webpack_exports__","V1","V2","V3","DAY","MILLISECOND","SECOND","MICROSECOND","NANOSECOND","YEAR_MONTH","DAY_TIME","FloatingPoint","Struct_","OFFSET","DATA","VALIDITY","TYPE","Endianness","Little","Big","bb_pos","bb","obj","__init","readInt32","position","builder","startObject","endObject","offset","__offset","addFieldInt32","readInt8","addFieldInt8","readInt16","index","__vector","__vector_len","bytes","buffer","byteOffset","addFieldInt16","typeIdsOffset","addFieldOffset","data","startVector","length","addInt32","endVector","numElems","optionalEncoding","__string","timezoneOffset","VectorLayout","KeyValue","keyOffset","valueOffset","DictionaryEncoding","readInt64","createLong","__indirect","addFieldInt64","indexTypeOffset","readUint8","__union","nameOffset","typeType","typeOffset","dictionaryOffset","childrenOffset","addOffset","layoutOffset","customMetadataOffset","Buffer","prep","writeInt64","endianness","fieldsOffset","finish","_util_bit__WEBPACK_IMPORTED_MODULE_9__","Vector","view","nulls","_data__WEBPACK_IMPORTED_MODULE_0__","_vector_chunked__WEBPACK_IMPORTED_MODULE_3__","_vector_validity__WEBPACK_IMPORTED_MODULE_4__","nullBitmap","nullCount","createVector","source","others","concat","toArray","clone","constructor","isValid","indexOf","iterator","Boolean","vecs","chunkVectors","offsets","computeOffsets","chunksLength","chunkedData","begin","end","size","total","from","to","isFinite","slicedData","slice","Math","min","_visitor__WEBPACK_IMPORTED_MODULE_1__","FlatVector","values","asInt32","stride","_type__WEBPACK_IMPORTED_MODULE_2__","int32s","IntVector","_vector_flat__WEBPACK_IMPORTED_MODULE_8__","ListVectorBase","valueOffsets","NestedVector","getChildAt","childData","_childData","chunks","cols","chunk","push","NullVector","BoolVector","defaultView","is64","u","TypeError","FloatVector","DateVector","DecimalVector","TimeVector","TimestampVector","IntervalVector","BinaryVector","_vector_list__WEBPACK_IMPORTED_MODULE_6__","Utf8Vector","FixedSizeBinaryVector","ListVector","FixedSizeListVector","MapVector","_vector_nested__WEBPACK_IMPORTED_MODULE_7__","StructVector","UnionVector","DictionaryVector","_vector_dictionary__WEBPACK_IMPORTED_MODULE_5__","idxs","dict","_type","_type__WEBPACK_IMPORTED_MODULE_1__","toTypedArray","ArrayBuffer","isView","byteLength","BYTES_PER_ELEMENT","BaseData","floor","max","_nullCount","_util_bit__WEBPACK_IMPORTED_MODULE_0__","sliceInternal","arr","sliceData","sliceOffsets","subarray","FlatData","BoolData","FlatListData","DictionaryData","_indices","_dictionary","_offset","_length","NestedData","child","SingleNestedData","valueChildData","_valuesData","ListData","UnionData","typeIdToChildIndex","idx","SparseUnionData","DenseUnionData","ChunkedData","chunkOffsets","_chunkVectors","_chunkOffsets","chunkData","_chunkData","vec","chunkSlices","childIndex","numChildren","childLength","childOffset","childVectors","childOffsets","FlatView","search","NullView","BoolView","boolBitIndex","PrimitiveView","getValue","setValue","FixedSizeView","every","Float16View","DateDayView","epochMillisecondsToDate","epochDaysToMs","valueOf","DateMillisecondView","epochMillisecondsLongToMs","epochMs","TimestampDayView","TimestampSecondView","epochSecondsToMs","TimestampMillisecondView","TimestampMicrosecondView","TimestampNanosecondView","epochNanosecondsLongToMs","IntervalYearMonthView","interval","IntervalYearView","IntervalMonthView","__awaiter","thisArg","_arguments","generator","Promise","resolve","reject","fulfilled","step","next","rejected","throw","result","done","then","apply","__await","__asyncGenerator","asyncIterator","verb","resume","fulfill","settle","shift","__asyncDelegator","__asyncValues","__values","Footer","dictionaryBatches","recordBatches","schema","FileBlock","metaDataLength","Message","RecordBatch","DictionaryBatch","RecordBatchMetadata","nodes","buffers","isDelta","atomicDictionaryId","Fe","De","BufferMetadata","FieldMetadata","align","alignment","getBool","_data","_index","byte","bit","getBit","setBool","packBools","iterateBits","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","cnt","pos","DataView","len","popcnt_uint32","getUint32","getUint16","getUint8","uint32","Int128","carryBit16","intAsHex","toString","kInt32DecimalDigits","kPowersOfTen","BaseInt64","other","product","lessThan","_times","_plus","left","right","times","plus","this_high","other_high","str","out_buffer","negate","startsWith","out","posn","group","parseInt","substr","multiple","L0","L1","L2","L3","R0","R1","R2","R3","multiply","high","sums","PADDING","MAGIC","MAGIC_STR","charCodeAt","checkForMagicArrowString","isValidArrowFile","footerLength","lengthOffset","fileLength","capacity","magicX2AndPadding","magicLength","magicAndPadding","_type__WEBPACK_IMPORTED_MODULE_0__","TypeVisitor","acceptTypeVisitor","types","visit","visitNull","visitInt","visitFloat","visitBinary","visitUtf8","visitBool","visitDecimal","visitDate","visitTime","visitTimestamp","visitInterval","visitList","visitStruct","visitUnion","visitFixedSizeBinary","visitFixedSizeList","visitMap","visitDictionary","VectorVisitor","vector","acceptVectorVisitor","_vector__WEBPACK_IMPORTED_MODULE_0__","Value","Literal","Equals","LTeq","GTeq","Not","ge","le","eq","Col","batch","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","freeze","accum","bound","some","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","getKey","func","CustomPredicate","bind_","and","or","custom","_util_pretty__WEBPACK_IMPORTED_MODULE_4__","_vector__WEBPACK_IMPORTED_MODULE_1__","args","numRows","_data__WEBPACK_IMPORTED_MODULE_2__","numCols","columnNames","select","separator","rowOffset","maxColumnWidths","_util_node__WEBPACK_IMPORTED_MODULE_3__","recordBatch","header","val","row","_Schema__WEBPACK_IMPORTED_MODULE_0__","Tensor","FieldNode","null_count","nodesOffset","buffersOffset","dataOffset","headerOffset","readRecordBatchesAsync","messages","messages_1_1","messages_1","tslib_es6","message","gi","loader","readRecordBatch","ipc_metadata","isRecordBatch","recordbatch","visitFields","isDictionaryBatch","dictionaryId","dictionaryDataType","dictionaryVector","has","vector_TypeDataLoader","field","visitNullType","visitFlatType","visitFlatList","visitBoolType","visitListType","visitNestedType","visitUnionType","visitFixedSizeListType","cls_data","getBufferMetadata","readData","getFieldMetadata","readNullBitmap","readOffsets","cls_type","readTypeIds","flatbuffers","readJSON","json","dictionaryFields","fieldsFromJSON","fs","dataType","keysMeta","dictMeta","customMetadata","typeFromJSON","indexType","intFromJSON","recordBatchFromJSON","json_JSONDataLoader","flattenDataSources","columns","arrayIterator","batches","column","utf8Encoder","encoding_lib","sources","Dr","Mi","isTimestamp","int64DataFromJSON","isInt","isTime","isDate","isDecimal","util_int","fromString","isBinary","isFixedSizeBinary","joined","isBool","isUtf8","encode","count","fieldNodesFromJSON","fieldNodes","validity","buffersFromJSON","entries","namesToTypeMap","null","int","floatingpoint","binary","bool","utf8","decimal","date","time","timestamp","list","struct","union","fixedsizebinary","fixedsizelist","ByteBuffer","readBuffers","readMessages","toByteBuffer","Ni","readSchema","binary_BinaryDataLoader","binary_arrayIterator","readBuffersAsync","sources_1_1","sources_1","messageOffset","footer","magic","setPosition","_Footer","getRootAsFooter","blocks","dictionariesLength","recordBatchesLength","fieldsFromSchema","binary_customMetadata","readMessage","binary_readMessages","isSchema","readStreamMessages","_Message","getRootAsMessage","_Schema","recordBatchFromMessage","_RecordBatch","_DictionaryBatch","binary_Type","binary_Precision","binary_MetadataVersion","File","_Null","_Int","_FloatingPoint","_Binary","_Bool","_Utf8","_Decimal","_Date","_Time","_Timestamp","_Interval","_List","_Struct","_Union","_FixedSizeBinary","_FixedSizeList","_Map","nodesLength","buffersLength","bufferFromRecordBatch","fieldsLength","binary_field","fieldsFromField","childrenLength","typeFromField","intFromField","parent","entry","customMetadataLength","typeIdsArray","read","input","JSON","parse","readAsync","_c","_b","readStream","stream","node","table","table_CountByResult","table_Table","_columns","isArray","batchesUnion","empty","chunked","getColumnAt","getColumnIndex","findIndex","predicate","table_FilteredDataFrame","numBatches","batchIndex","count_by","cls_vector","counts","keys","rowsToString","encoding","writeTableBinary","firstValues","iterators","_util_pretty__WEBPACK_IMPORTED_MODULE_1__","NestedView","_children","getNested","setNested","UnionView","self","getChildValue","setChildValue","_valueOffsets","Ae","DenseUnionView","StructView","RowProxy","RowView","MapView","MapRowView","rowIndex","_typeIds","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","us","os","int32","float32","float64","isLittleEndian","ZERO","toFloat64","equals","Builder","opt_initial_size","initial_size","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeFloat32","writeFloat64","addInt8","addInt16","addInt64","addFloat32","addFloat64","voffset","defaultValue","slot","addFieldFloat32","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","root_table","opt_file_identifier","file_identifier","requiredField","table_start","vtable_start","elem_size","num_elems","createString","codePoint","bytes_","position_","readUint16","readUint32","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","vtable_offset","opt_encoding","UTF8_BYTES","String","fromCharCode","__has_identifier","ident","text_encoding_utf_8__WEBPACK_IMPORTED_MODULE_1__","encodeUtf8","encoder","decodeUtf8","decoder","decode","ListViewBase","getList","setList","VariableListViewBase","ListView","FixedSizeListView","BinaryView","Utf8View","ChunkedView","mid","numChunks","sourcesLen","target","setValues","arraySet","typedArraySet","dstIdx","srcIdx","srcLen","_fb_Message__WEBPACK_IMPORTED_MODULE_9__","serializeStream","serializeMessage","getColumn","serializeDictionaryBatch","serializeRecordBatch","serializeFile","metadataLength","_util_bit__WEBPACK_IMPORTED_MODULE_3__","_magic__WEBPACK_IMPORTED_MODULE_2__","cu","_metadata__WEBPACK_IMPORTED_MODULE_4__","finishFooterBuffer","schemaOffset","writeSchema","recordBatchesOffset","startRecordBatchesVector","mapReverse","rb","writeBlock","dictionaryBatchesOffset","startDictionariesVector","db","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","endFooter","footerBytes","setInt32","platformIsLittleEndian","pu","gu","buffersMeta","RecordBatchSerializer","visitRecordBatch","_type__WEBPACK_IMPORTED_MODULE_5__","concatBuffersWithMetadata","_recordbatch__WEBPACK_IMPORTED_MODULE_0__","rbMeta","finishMessageBuffer","messageHeaderOffset","writeRecordBatch","startDictionaryBatch","addId","addIsDelta","addData","endDictionaryBatch","startMessage","addHeader","addHeaderType","addBodyLength","endMessage","metadataBytes","dataByteLength","messageBytes","RangeError","addBuffer","getTruncatedBitmap","_nullz","visitBoolVector","visitFlatVector","visitFlatListVector","visitListVector","visitNestedVector","sliceOffset","maxChildTypeId","childLengths","fill","shiftedOffsets","unshiftedOffsets","getZeroBasedValueOffsets","bitmap","scaledLength","firstOffset","lastOffset","alignedLength","startOffset","destOffsets","flatbuffers__WEBPACK_IMPORTED_MODULE_6__","_Block","_fb_File__WEBPACK_IMPORTED_MODULE_7__","Block","_Field","_fb_Schema__WEBPACK_IMPORTED_MODULE_8__","_Buffer","_KeyValue","_FieldNode","_DictionaryEncoding","_Endianness","TypeSerializer","_node","startNull","endNull","startInt","addBitWidth","addIsSigned","endInt","startFloatingPoint","addPrecision","endFloatingPoint","startBinary","endBinary","startBool","endBool","startUtf8","endUtf8","startDecimal","addScale","endDecimal","startDate","addUnit","endDate","startTime","endTime","startTimestamp","addTimezone","endTimestamp","startInterval","endInterval","startList","endList","startStruct_","endStruct_","startTypeIdsVector","createTypeIdsVector","startUnion","addMode","addTypeIds","endUnion","startDictionaryEncoding","addIsOrdered","addIndexType","endDictionaryEncoding","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startFixedSizeList","addListSize","endFixedSizeList","startMap","addKeysSorted","endMap","totalByteLength","realBufferLength","createBlock","fieldOffsets","writeField","createChildrenVector","createCustomMetadataVector","startKeyValue","addKey","addValue","endKeyValue","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","addCustomMetadata","endField","startFieldsVector","createFieldsVector","startSchema","addFields","addEndianness","endSchema","startNodesVector","createFieldNode","startBuffersVector","b_","createBuffer","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","callbackfn","setInt16","leftPad","valueToString","stringify","PipeIterator","error","return","res","_u","write","err","removeListener","writable","emit","wait","AsyncPipeIterator","tslib__WEBPACK_IMPORTED_MODULE_0__","toBufferOrUint8Array","BufferCtor","eval","stdout","isTTY","once","ValidityView","nullBitIndex","getNullable","DictionaryView","_magic__WEBPACK_IMPORTED_MODULE_3__","flatbuffers__WEBPACK_IMPORTED_MODULE_1__","_fb_Message__WEBPACK_IMPORTED_MODULE_2__","fromReadableStream","bytesRead","messageLength","grown","getInt32","inRange","ToDictionary","Stream","tokens","Cu","end_of_stream","Nu","token","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","TextDecoder","options","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","ignoreBOM","TextEncoder","_encoder","_options","su","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","bite","prepend","code_point","input_stream","code_points","endOfStream","cp","ji","opt_string","temp","string","dictionariesOffset","util","enum_","_ipc_writer_binary__WEBPACK_IMPORTED_MODULE_13__","_util_int__WEBPACK_IMPORTED_MODULE_3__","_util_bit__WEBPACK_IMPORTED_MODULE_4__","_util_node__WEBPACK_IMPORTED_MODULE_5__","_data__WEBPACK_IMPORTED_MODULE_1__","_vector__WEBPACK_IMPORTED_MODULE_2__","_visitor__WEBPACK_IMPORTED_MODULE_6__","_vector_view__WEBPACK_IMPORTED_MODULE_7__","_predicate__WEBPACK_IMPORTED_MODULE_8__","_ipc_reader_arrow__WEBPACK_IMPORTED_MODULE_12__","_ipc_reader_node__WEBPACK_IMPORTED_MODULE_11__","_recordbatch__WEBPACK_IMPORTED_MODULE_9__","_table__WEBPACK_IMPORTED_MODULE_10__","CountByResult","fromAsync","fromStruct","add","isNull","isFloat","isInterval","isList","isStruct","isUnion","isDenseUnion","isSparseUnion","isFixedSizeList","isMap"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,EAAAD,IACA,mBAAAG,eAAAC,EACAD,OAAA,WAAAH,GACA,iBAAAC,QACAA,QAAAI,MAAAL,IAEAD,EAAAM,MAAAL,IARA,CASCM,OAAA,WACD,gBAAAC,GCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAT,EAGA,IAAAC,EAAAM,EAAAE,IACAC,EAAAD,EACAE,KACAC,MAUA,OANAC,EAAAJ,GAAAK,KAAAb,EAAAD,EAAAC,IAAAD,EAAAQ,GAGAP,EAAAU,KAGAV,EAAAD,EA0DA,OArDAQ,EAAAO,EAAAF,EAGAL,EAAAQ,EAAAT,EAGAC,EAAAS,EAAA,SAAAjB,EAAAkB,EAAAC,GACAX,EAAAY,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GAA0CK,cAAAC,IAAAL,KAK1CX,EAAAiB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,YAQjDpB,EAAAF,EAAA,SAAAsB,EAAAC,GAEA,GADA,EAAAA,IAAAD,EAAApB,EAAAoB,IACA,EAAAC,EAAA,OAAAD,EACA,KAAAC,GAAA,iBAAAD,QAAAE,EAAA,OAAAF,EACA,IAAAG,EAAAV,OAAAW,OAAA,MAGA,GAFAxB,EAAAiB,EAAAM,GACAV,OAAAC,eAAAS,EAAA,WAAyCR,cAAAK,UACzC,EAAAC,GAAA,iBAAAD,EAAA,QAAAK,KAAAL,EAAApB,EAAAS,EAAAc,EAAAE,EAAA,SAAAA,GAAgH,OAAAL,EAAAK,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAlC,GACA,IAAAkB,EAAAlB,KAAA6B,EACA,WAA2B,OAAA7B,EAAAmC,SAC3B,WAAiC,OAAAnC,GAEjC,OADAO,EAAAS,EAAAE,EAAA,IAAAA,GACAA,GAIAX,EAAAY,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD9B,EAAAiC,EAAA,GAIAjC,IAAAkC,EAAA,IDxEA,ECwEA,SAAApC,EAAA6B,EAAAV,GAAA,aAAAA,EAAAR,EAAAkB,EAAA,sBAAAQ,IAAAlB,EAAAR,EAAAkB,EAAA,sBAAAS,IAAAnB,EAAAR,EAAAkB,EAAA,sBAAAU,IAAApB,EAAAR,EAAAkB,EAAA,sBAAAxB,IAAAc,EAAAR,EAAAkB,EAAA,sBAAAlB,IAAAQ,EAAAR,EAAAkB,EAAA,sBAAAW,IAAArB,EAAAR,EAAAkB,EAAA,sBAAAY,IAAAtB,EAAAR,EAAAkB,EAAA,sBAAAa,IAAAvB,EAAAR,EAAAkB,EAAA,sBAAAM,IAAAhB,EAAAR,EAAAkB,EAAA,sBAAAc,IAAAxB,EAAAR,EAAAkB,EAAA,sBAAAe,IAAAzB,EAAAR,EAAAkB,EAAA,sBAAAgB,IAAA1B,EAAAR,EAAAkB,EAAA,sBAAApB,IAAAU,EAAAR,EAAAkB,EAAA,sBAAAiB,IAAA3B,EAAAR,EAAAkB,EAAA,sBAAAvB,IAAAa,EAAAR,EAAAkB,EAAA,sBAAAkB,IAAA5B,EAAAR,EAAAkB,EAAA,sBAAAmB,IAAA7B,EAAAR,EAAAkB,EAAA,sBAAAoB,IAAA9B,EAAAR,EAAAkB,EAAA,sBAAAqB,IAAA/B,EAAAR,EAAAkB,EAAA,sBAAAsB,IAAAhC,EAAAR,EAAAkB,EAAA,sBAAAuB,IAAAjC,EAAAR,EAAAkB,EAAA,sBAAAwB,IAAAlC,EAAAR,EAAAkB,EAAA,sBAAAyB,IAAAnC,EAAAR,EAAAkB,EAAA,sBAAA0B,IAAApC,EAAAR,EAAAkB,EAAA,sBAAA2B,IAAArC,EAAAR,EAAAkB,EAAA,sBAAA4B,IAAAtC,EAAAR,EAAAkB,EAAA,sBAAA6B,IAAAvC,EAAAR,EAAAkB,EAAA,sBAAA8B,IAAAxC,EAAAR,EAAAkB,EAAA,sBAAA+B,IAAAzC,EAAAR,EAAAkB,EAAA,sBAAAgC,IAAA1C,EAAAR,EAAAkB,EAAA,sBAAAiC,IAAA3C,EAAAR,EAAAkB,EAAA,sBAAAkC,IAAA5C,EAAAR,EAAAkB,EAAA,sBAAAmC,IAAA7C,EAAAR,EAAAkB,EAAA,sBAAAoC,IAAA9C,EAAAR,EAAAkB,EAAA,sBAAAqC,IAAA/C,EAAAR,EAAAkB,EAAA,sBAAAsC,IAAAhD,EAAAR,EAAAkB,EAAA,sBAAAuC,IAAAjD,EAAAR,EAAAkB,EAAA,sBAAAwC,IAAAlD,EAAAR,EAAAkB,EAAA,sBAAAyC,IAAAnD,EAAAR,EAAAkB,EAAA,sBAAA0C,IAAApD,EAAAR,EAAAkB,EAAA,sBAAA2C,IAAArD,EAAAR,EAAAkB,EAAA,sBAAA4C,IAAAtD,EAAAR,EAAAkB,EAAA,sBAAA6C,IAAAvD,EAAAR,EAAAkB,EAAA,sBAAA8C,IAAA,IC8BaC,gCAhHbC,EAAA3E,EAAA,IAyBc4E,GADOC,EAAAzC,EAAY0C,KACPC,EAAA3C,EAAY4C,EAAOC,EAAMC,EAAQR,MAC7CS,EAAWJ,EAAA3C,EAAY4C,EAAOC,EAAMC,EAAQC,SAC5CC,EAAWL,EAAA3C,EAAY4C,EAAOC,EAAMC,EAAQE,SAC5CC,EAAYN,EAAA3C,EAAY4C,EAAOC,EAAMC,EAAQG,UAC7CC,EAAYP,EAAA3C,EAAY4C,EAAOC,EAAMC,EAAQI,UAC7CC,EAAaR,EAAA3C,EAAY4C,EAAOC,EAAMC,EAAQK,WAC9CC,EAAeT,EAAA3C,EAAY4C,EAAOC,EAAMC,EAAQM,aAChDC,EAAgBC,EAAAtD,EAAa4C,EAAOC,EAAMC,EAAQO,cAClDE,EAAkBZ,EAAA3C,EAAY4C,EAAOC,EAAMC,EAAQS,sBAEpDC,EAYTC,YAAYC,EACAC,EACAC,EAA2BL,EAAgBM,GAC3CC,EAA+C,IAAIC,KAC3DC,KAAKN,OAASA,EACdM,KAAKJ,EAAUA,EACfI,KAAKL,EAAWA,EAChBK,KAAKF,aAAeA,EAlBjBL,YAAYQ,GACf,OAAO,IAAIT,EAAOS,EAAQC,IAAI,CAAC9D,EAAGtC,IAAM,IAAIqG,EAAM,GAAKrG,EAAGsC,EAAEgE,QAmBhEC,iBAA0B,OAAOL,KAAKM,YACtCC,iBAA0B,OAAOP,KAAKQ,YAC/Bf,UAAUgB,GACb,MAAMC,EAAcD,EAAWE,OAAO,CAACC,EAAInE,KAAOmE,EAAGnE,QAAcmE,EAAInG,OAAOW,OAAO,OAC/EyF,EAAgB,IAAId,IAAOe,EAAYd,KAAKN,OAAOqB,OAAQ9E,GAAMyE,EAAYzE,EAAE3B,OAErF,OADA0F,KAAKF,aAAakB,QAAQ,CAAC/E,EAAGgF,IAAYP,EAAYzE,EAAE3B,OAAUuG,EAAcK,IAAID,EAAQhF,IACrF,IAAIuD,EAAOsB,EAAWd,KAAKL,EAAUK,KAAKJ,EAASiB,IAEhDrB,EAAC1E,OAAOC,aAAe,CAAEY,IACnCA,EAAU2E,YAAc,EACxB3E,EAAU6E,YAAcnB,EAAcG,OAC/B,UAH0B,CAIlCA,EAAO7D,iBAGDwE,EAKTV,YAAYnF,EAAc8F,EAASe,KAAkBxB,GACjDK,KAAK1F,KAAOA,EACZ0F,KAAKI,KAAOA,EACZJ,KAAKmB,SAAWA,EAChBnB,KAAKL,EAAWA,EAEbF,WAAa,SAAUO,KAAK1F,SAAS0F,KAAKI,OACjDgB,aAAkC,OAAOpB,KAAKI,KAAKiB,EACnDC,IAAYxG,OAAOC,eAAyB,MAAO,QACnDwG,cACI,OAAOC,EAASC,aAAazB,KAAKI,MAAQJ,KAAKI,KAAKmB,QAAUvB,KAAKI,OA0B1E,SAAY9B,GACTA,IAAAoD,KAAA,UACApD,IAAAqD,KAAA,UACArD,IAAAsD,IAAA,SACAtD,IAAAuD,MAAA,WACAvD,IAAAwD,OAAA,YACAxD,IAAAyD,KAAA,UACAzD,IAAA0D,KAAA,UACA1D,IAAA2D,QAAA,aACA3D,IAAA4D,KAAA,UACA5D,IAAA6D,KAAA,UACA7D,IAAA8D,UAAA,gBACA9D,IAAA+D,SAAA,eACA/D,IAAAgE,KAAA,WACAhE,IAAAiE,OAAA,aACAjE,IAAAkE,MAAA,YACAlE,IAAAmE,gBAAA,sBACAnE,IAAAoE,cAAA,oBACApE,IAAAyB,IAAA,UACAzB,EAAAqE,WAAA,aACArE,EAAAsE,WAAA,aACAtE,EAAAuE,YAAA,cArBH,CAAYvE,iBA+BSkD,EA0BlB/B,YAA4B4B,EACAyB,GADA9C,KAAAqB,IACArB,KAAA8C,WAtB5BrD,cAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKqD,KACvFlC,aAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKsD,IACvFnC,eAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKuD,MACvFpC,gBAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKwD,OACvFrC,cAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKyD,KACvFtC,cAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAK0D,KACvFvC,iBAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAK2D,QACvFxC,cAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAK4D,KACvFzC,cAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAK6D,KACvF1C,mBAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAK8D,UACvF3C,kBAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAK+D,SACvF5C,cAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKgE,KACvF7C,gBAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKiE,OACvF9C,eAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKkE,MACvF/C,oBAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKsE,WACvFnD,qBAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKuE,YACvFpD,yBAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKmE,gBACvFhD,uBAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKoE,cACvFjD,aAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKyB,IACvFN,oBAA0BhD,GAAgC,OAAOA,GAAKA,EAAE4E,IAAU/C,EAAKqE,WAIhFlD,kBAAkBsD,GACrB,OAAOxE,EAAAvC,EAAYgH,gBAAgBD,EAAS/C,OAE/BwB,EAAC1G,OAAOC,aAAe,CAAEkI,IAC/BA,EAAOC,UAAYC,MACnBF,EAAMnI,OAAOC,aAAe,YAFC,CAGrCyG,EAAS7F,iBAIHgG,UAAaH,EACtB/B,cACI2D,MAAM9E,EAAKqD,MAERlC,WAAa,MAAO,QACVkC,EAAC7G,OAAOC,aAEtB4G,EAAKhG,UADSb,OAAOC,aAAe,aAK9B6G,UAAsEJ,EAC/E/B,YAA4B4D,EACAC,GACxBF,MAAM9E,EAAKsD,KAFa5B,KAAAqD,WACArD,KAAAsD,WAG5BJ,gBACI,OAAQlD,KAAKsD,UACT,KAAM,EAAG,OAAQtD,KAAKqD,SAAYE,UAAaC,WAC/C,KAAK,GAAI,OAAQxD,KAAKqD,SAAWI,WAAaC,YAC9C,KAAK,GACL,KAAK,GAAI,OAAQ1D,KAAKqD,SAAWM,WAAaC,YAElD,MAAUC,sBAAsB7D,KAAKlF,OAAOC,qBAEzC0E,WAAa,SAAUO,KAAKqD,SAAW,IAAM,SAASrD,KAAKsD,YACjD1B,EAAC9G,OAAOC,aAEtB6G,EAAIjG,UADUb,OAAOC,aAAe,YAI9B+I,UAAalC,EAAyBnC,cAAgB2D,SAAY,UAClEW,UAAcnC,EAA0BnC,cAAgB2D,SAAY,WACpEY,UAAcpC,EAA0BnC,cAAgB2D,SAAY,WACpEa,UAAcrC,EAA8BnC,cAAgB2D,SAAY,WACxEc,UAActC,EAA0BnC,cAAgB2D,SAAa,UACrEe,UAAevC,EAA2BnC,cAAgB2D,SAAa,WACvEgB,UAAexC,EAA2BnC,cAAgB2D,SAAa,WACvEiB,UAAezC,EAAgCnC,cAAgB2D,SAAa,WAG5EvB,UAA0DL,EACnE/B,YAA4B6E,GACxBlB,MAAM9E,EAAKuD,OADa7B,KAAAsE,YAI5BpB,gBACI,OAAQlD,KAAKsE,WACT,KAAKrF,EAAUsF,KAAM,OAAOb,YAC5B,KAAKzE,EAAUuF,OAAQ,OAAOC,aAC9B,KAAKxF,EAAUyF,OAAQ,OAAOC,aAElC,MAAUd,sBAAsB7D,KAAKlF,OAAOC,qBAEzC0E,WAAa,cAAgBO,KAAKsE,WAAa,GAAM,MAC3CzC,EAAC/G,OAAOC,aAEtB8G,EAAMlG,UADQb,OAAOC,aAAe,cAI9B6J,UAAgB/C,EAAqBpC,cAAgB2D,MAAMnE,EAAUsF,aACrEM,UAAgBhD,EAAsBpC,cAAgB2D,MAAMnE,EAAUuF,eACtEM,UAAgBjD,EAAsBpC,cAAgB2D,MAAMnE,EAAUyF,eAGtE5C,UAAeN,EACxB/B,cACI2D,MAAM9E,EAAKwD,QAERrC,WAAa,MAAO,UACVqC,EAAChH,OAAOC,aAAe,CAAEkI,IAC/BA,EAAOC,UAAYM,WACnBP,EAAMnI,OAAOC,aAAe,UAFC,CAGrC+G,EAAOnG,iBAIDoG,UAAaP,EACtB/B,cACI2D,MAAM9E,EAAKyD,MAERtC,WAAa,MAAO,QACVsC,EAACjH,OAAOC,aAAe,CAAEkI,IAC/BA,EAAOC,UAAYM,WACnBP,EAAMnI,OAAOC,aAAe,QAFC,CAGrCgH,EAAKpG,iBAICqG,UAAaR,EACtB/B,cACI2D,MAAM9E,EAAK0D,MAERvC,WAAa,MAAO,QACVuC,EAAClH,OAAOC,aAAe,CAAEkI,IAC/BA,EAAOC,UAAYM,WACnBP,EAAMnI,OAAOC,aAAe,QAFC,CAGrCiH,EAAKrG,iBAICsG,UAAgBT,EACzB/B,YAA4BsF,EACAT,GACxBlB,MAAM9E,EAAK2D,SAFajC,KAAA+E,QACA/E,KAAAsE,YAGrB7E,WAAa,iBAAkBO,KAAKsE,aAAatE,KAAK+E,MAAQ,EAAI,IAAM,KAAK/E,KAAK+E,UACxE9C,EAACnH,OAAOC,aAAe,CAAEkI,IAC/BA,EAAOC,UAAYU,YACnBX,EAAMnI,OAAOC,aAAe,WAFC,CAGrCkH,EAAQtG,iBAKFqJ,UAAcxD,EACvB/B,YAA4BwF,GACxB7B,MAAM9E,EAAK4D,MADalC,KAAAiF,OAGrBxF,WAAa,aAAgC,IAAjBO,KAAKiF,KAAO,MAAWlG,EAASiB,KAAKiF,UACvDD,EAAClK,OAAOC,aAAe,CAAEkI,IAC/BA,EAAOC,UAAYS,WACnBV,EAAMnI,OAAOC,aAAe,QAFC,CAGrCiK,EAAMrJ,iBAIAwG,UAAaX,EACtB/B,YAA4BwF,EACA3B,GACxBF,MAAM9E,EAAK6D,MAFanC,KAAAiF,OACAjF,KAAAsD,WAGrB7D,WAAa,aAAcO,KAAKsD,YAAYtE,EAASgB,KAAKiF,UAChD9C,EAACrH,OAAOC,aAAe,CAAEkI,IAC/BA,EAAOC,UAAYU,YACnBX,EAAMnI,OAAOC,aAAe,QAFC,CAGrCoH,EAAKxG,iBAICyG,UAAkBZ,EAC3B/B,YAAmBwF,EAAuBC,GACtC9B,MAAM9E,EAAK8D,WADIpC,KAAAiF,OAAuBjF,KAAAkF,WAGnCzF,WAAa,mBAAoBT,EAASgB,KAAKiF,QAAQjF,KAAKkF,cAAgBlF,KAAKkF,WAAa,OACpF9C,EAACtH,OAAOC,aAAe,CAAEkI,IAC/BA,EAAOC,UAAYS,WACnBV,EAAMnI,OAAOC,aAAe,aAFC,CAGrCqH,EAAUzG,iBAIJ0G,UAAiBb,EAC1B/B,YAAmBwF,GACf7B,MAAM9E,EAAK+D,UADIrC,KAAAiF,OAGZxF,WAAa,kBAAmBL,EAAaY,KAAKiF,UACxC5C,EAACvH,OAAOC,aAAe,CAAEkI,IAC/BA,EAAOC,UAAYS,WACnBV,EAAMnI,OAAOC,aAAe,YAFC,CAGrCsH,EAAS1G,iBAIH2G,UAAuCd,EAChD/B,YAAmBqD,GACfM,MAAM9E,EAAKgE,KAAMQ,GADF9C,KAAA8C,WAGZrD,WAAa,cAAeO,KAAKmF,aACxCjC,gBAAyB,OAAOlD,KAAKmF,UAAUjC,UAC/CiC,gBAAyB,OAAOnF,KAAK8C,SAAS,GAAG1C,KACjDgF,iBAA0B,OAAOpF,KAAK8C,SAAS,IAC9BR,EAACxH,OAAOC,aAEtBuH,EAAK3G,UADSb,OAAOC,aAAe,aAK9BwH,UAAef,EACxB/B,YAAmBqD,GACfM,MAAM9E,EAAKiE,OAAQO,GADJ9C,KAAA8C,WAGZrD,WAAa,gBAAiBO,KAAK8C,SAAS5C,IAAKjE,GAAMA,EAAEmE,MAAMiF,KAAK,UAC1D9C,EAACzH,OAAOC,aAEtBwH,EAAO5G,UADOb,OAAOC,aAAe,eAK9ByH,UAAwChB,EACjD/B,YAA4BxE,EACAqK,EACAxC,GACxBM,MAAc9E,EAAKkE,MAAOM,GAHF9C,KAAA/E,OACA+E,KAAAsF,UACAtF,KAAA8C,WAGrBrD,WAAa,SAAUO,KAAKlF,OAAOC,gBACtCiF,KAAK8C,SAAS5C,IAAKzD,MAASA,EAAE2D,QAAQiF,KAAK,WAE9B7C,EAAC1H,OAAOC,aAAe,CAAEkI,IAC/BA,EAAOC,UAAYK,UACnBN,EAAMnI,OAAOC,aAAe,SAFC,CAGrCyH,EAAM7G,iBAGAiH,UAAmBJ,EAC5B/C,YAAY6F,EAAsBxC,GAC9BM,MAAMlE,EAAUqG,MAAOD,EAASxC,IAEnBF,EAAC9H,OAAOC,aAEtB6H,EAAWjH,UADGb,OAAOC,aAAe,mBAI9B8H,UAAoBL,EAC7B/C,YAAY6F,EAAsBxC,GAC9BM,MAAMlE,EAAUsG,OAAQF,EAASxC,IAEpBD,EAAC/H,OAAOC,aAEtB8H,EAAYlH,UADEb,OAAOC,aAAe,oBAK9B0H,UAAwBjB,EACjC/B,YAA4BgG,GACxBrC,MAAM9E,EAAKmE,iBADazC,KAAAyF,YAGrBhG,WAAa,yBAA0BO,KAAKyF,cAClChD,EAAC3H,OAAOC,aAAe,CAAEkI,IAC/BA,EAAOC,UAAYM,WACnBP,EAAMnI,OAAOC,aAAe,mBAFC,CAGrC0H,EAAgB9G,iBAIV+G,UAAgDlB,EACzD/B,YAA4BiG,EACA5C,GACxBM,MAAM9E,EAAKoE,cAAeI,GAFF9C,KAAA0F,WACA1F,KAAA8C,WAG5BI,gBAAyB,OAAOlD,KAAKmF,UAAUjC,UAC/CiC,gBAAyB,OAAOnF,KAAK8C,SAAS,GAAG1C,KACjDgF,iBAA0B,OAAOpF,KAAK8C,SAAS,GACxCrD,WAAa,uBAAwBO,KAAK0F,aAAa1F,KAAKmF,cAClDzC,EAAC5H,OAAOC,aAEtB2H,EAAc/G,UADAb,OAAOC,aAAe,sBAM9B4K,UAAanE,EACtB/B,YAA4BmG,EACA9C,GACxBM,MAAM9E,EAAKyB,IAAK+C,GAFQ9C,KAAA4F,aACA5F,KAAA8C,WAGrBrD,WAAa,aAAcO,KAAK8C,SAASuC,KAAK,UACpCM,EAAC7K,OAAOC,aAEtB4K,EAAKhK,UADSb,OAAOC,aAAe,aAK9B4H,UAAuCnB,EAKhD/B,YAAYoG,EAAetE,EAAmBuE,EAA2BC,GACrE3C,MAAM9E,EAAKqE,YACX3C,KAAKuB,QAAUA,EACfvB,KAAK6F,WAAaA,EAClB7F,KAAK+F,UAAYA,MACjB/F,KAAK8F,GAAW,MAANA,EAAaE,EAAA1J,EAAgB2J,KAAwB,iBAAPH,EAAkBA,EAAKA,EAAGI,IAEtFhD,gBAAyB,OAAOlD,KAAK6F,WAAW3C,UACzCzD,WAAa,oBAAqBO,KAAKuB,YAAYvB,KAAK6F,eAC9ClD,EAAC7H,OAAOC,aAEtB4H,EAAWhH,UADGb,OAAOC,aAAe,cADC,SAAArB,EAAA6B,EAAAV,GAAA,aCnctC,IAAWsL,EAPjBvM,EAAAS,EAAA+L,EAAA,sBAAAD,IAOA,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GAChC,IAAYS,GAAZ,SAAYA,GAIVA,IAAA8G,GAAA,QAKA9G,IAAA+G,GAAA,QAKA/G,IAAAgH,GAAA,QAKAhH,IAAAM,GAAA,QAnBF,CAAYN,EAAAT,EAAAS,kBAAAT,EAAAS,qBADoB,CAAAV,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WA2BjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GAChC,IAAYI,GAAZ,SAAYA,GACVA,IAAAsG,OAAA,YACAtG,IAAAqG,MAAA,WAFF,CAAYrG,EAAAJ,EAAAI,YAAAJ,EAAAI,eADoB,CAAAL,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAUjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GAChC,IAAYG,GAAZ,SAAYA,GACVA,IAAAsF,KAAA,UACAtF,IAAAuF,OAAA,YACAvF,IAAAyF,OAAA,YAHF,CAAYzF,EAAAH,EAAAG,YAAAH,EAAAG,eADoB,CAAAJ,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAWjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GAChC,IAAYC,GAAZ,SAAYA,GACVA,IAAAyH,IAAA,SACAzH,IAAA0H,YAAA,iBAFF,CAAY1H,EAAAD,EAAAC,WAAAD,EAAAC,cADoB,CAAAF,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAUjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GAChC,IAAYE,GAAZ,SAAYA,GACVA,IAAA0H,OAAA,YACA1H,IAAAyH,YAAA,iBACAzH,IAAA2H,YAAA,iBACA3H,IAAA4H,WAAA,gBAJF,CAAY5H,EAAAF,EAAAE,WAAAF,EAAAE,cADoB,CAAAH,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAYjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GAChC,IAAYM,GAAZ,SAAYA,GACVA,IAAAyH,WAAA,gBACAzH,IAAA0H,SAAA,cAFF,CAAY1H,EAAAN,EAAAM,eAAAN,EAAAM,kBADoB,CAAAP,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAcjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GAChC,IAAYR,GAAZ,SAAYA,GACVA,IAAAoD,KAAA,UACApD,IAAAqD,KAAA,UACArD,IAAAsD,IAAA,SACAtD,IAAAyI,cAAA,mBACAzI,IAAAwD,OAAA,YACAxD,IAAAyD,KAAA,UACAzD,IAAA0D,KAAA,UACA1D,IAAA2D,QAAA,aACA3D,IAAA4D,KAAA,UACA5D,IAAA6D,KAAA,UACA7D,IAAA8D,UAAA,gBACA9D,IAAA+D,SAAA,eACA/D,IAAAgE,KAAA,WACAhE,IAAA0I,QAAA,cACA1I,IAAAkE,MAAA,YACAlE,IAAAmE,gBAAA,sBACAnE,IAAAoE,cAAA,oBACApE,IAAAyB,IAAA,UAlBF,CAAYzB,EAAAQ,EAAAR,OAAAQ,EAAAR,UADoB,CAAAO,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WA6BjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GAChC,IAAYK,GAAZ,SAAYA,GAIVA,IAAA8H,OAAA,YAKA9H,IAAA+H,KAAA,UAKA/H,IAAAgI,SAAA,cAKAhI,IAAAiI,KAAA,UAnBF,CAAYjI,EAAAL,EAAAK,aAAAL,EAAAK,gBADoB,CAAAN,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WA8BjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GAChC,IAAYuI,GAAZ,SAAYA,GACVA,IAAAC,OAAA,YACAD,IAAAE,IAAA,SAFF,CAAYF,EAAAvI,EAAAuI,KAAAvI,EAAAuI,QADoB,CAAAxI,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAYjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnB6C,EAAblC,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAqBgI,EAA4BC,GAC/C,OAAQA,GAAO,IAAI/F,GAAMgG,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAM/EhI,UAAiBqI,GACfA,EAAQC,GAAY,GAOtBtI,UAAeqI,GAEb,OADaA,EAAQE,MA3CZlJ,EAAA6C,KAAIA,EADe,CAAA9C,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAyDjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBkI,EAAbvH,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAwBgI,EAA4BC,GAClD,OAAQA,GAAO,IAAIV,GAASW,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAMlFhI,UAAoBqI,GAClBA,EAAQC,GAAY,GAOtBtI,UAAkBqI,GAEhB,OADaA,EAAQE,MA3CZlJ,EAAAkI,QAAOA,EADY,CAAAnI,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAqDjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBwD,EAAb7C,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAqBgI,EAA4BC,GAC/C,OAAQA,GAAO,IAAIpF,GAAMqF,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAM/EhI,UAAiBqI,GACfA,EAAQC,GAAY,GAOtBtI,UAAeqI,GAEb,OADaA,EAAQE,MA3CZlJ,EAAAwD,KAAIA,EADe,CAAAzD,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAqDjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnB4D,EAAbjD,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAA8BgI,EAA4BC,GACxD,OAAQA,GAAO,IAAIhF,GAAeiF,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAQxFhI,WACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGG,GAAU5H,KAAKwH,GAASS,GAAU,EAM5DxI,UAA0BqI,GACxBA,EAAQC,GAAY,GAOtBtI,UAAmBqI,EAA8BpC,GAC/CoC,EAAQK,GAAc,EAAGzC,EAAU,GAOrCjG,UAAwBqI,GAEtB,OADaA,EAAQE,MA7DZlJ,EAAA4D,cAAaA,EADM,CAAA7D,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAgGjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBiB,EAAbN,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAoBgI,EAA4BC,GAC9C,OAAQA,GAAO,IAAI3H,GAAK4H,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAQ9EhI,aACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,QAAOS,KAAWjI,KAAKyH,GAAGW,GAASpI,KAAKwH,GAASS,GAMnDxI,UAAgBqI,GACdA,EAAQC,GAAY,GAOtBtI,UAAqBqI,EAA8BlC,GACjDkC,EAAQO,GAAa,GAAIzC,EAAY,GAOvCnG,UAAcqI,GAEZ,OADaA,EAAQE,MA7DZlJ,EAAAiB,IAAGA,EADgB,CAAAlB,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WA4EjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnB0D,EAAb/C,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAsBgI,EAA4BC,GAChD,OAAQA,GAAO,IAAIlF,GAAOmF,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAMhFhI,OACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAA4DjI,KAAKyH,GAAGa,GAAUtI,KAAKwH,GAASS,GAAW9B,EAAIvH,EAAOC,EAAMC,EAAQI,UAAUsG,OAOnJ/F,QAAQ8I,GACN,IAAIN,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGG,GAAU5H,KAAKyH,GAAGe,GAASxI,KAAKwH,GAASS,GAAkB,EAARM,GAAa,EAM1F9I,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGgB,GAAazI,KAAKwH,GAASS,GAAU,EAM/DxI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAAS,IAAItE,WAAW3D,KAAKyH,GAAGiB,KAAQC,OAAQ3I,KAAKyH,GAAGiB,KAAQE,WAAa5I,KAAKyH,GAAGe,GAASxI,KAAKwH,GAASS,GAASjI,KAAKyH,GAAGgB,GAAazI,KAAKwH,GAASS,IAAW,KAM5KxI,UAAkBqI,GAChBA,EAAQC,GAAY,GAOtBtI,UAAeqI,EAA8B7M,GAC3C6M,EAAQe,GAAc,EAAG5N,EAAMkL,EAAIvH,EAAOC,EAAMC,EAAQI,UAAUsG,QAOpE/F,UAAkBqI,EAA8BgB,GAC9ChB,EAAQiB,GAAe,EAAGD,EAAe,GAQ3CrJ,UAA2BqI,EAA8BkB,GACvDlB,EAAQmB,GAAY,EAAGD,EAAKE,OAAQ,GACpC,IAAK,IAAIpP,EAAIkP,EAAKE,OAAS,EAAGpP,GAAK,EAAGA,IACpCgO,EAAQqB,GAASH,EAAKlP,IAExB,OAAOgO,EAAQsB,KAOjB3J,UAA0BqI,EAA8BuB,GACtDvB,EAAQmB,GAAY,EAAGI,EAAU,GAOnC5J,UAAgBqI,GAEd,OADaA,EAAQE,MAjHZlJ,EAAA0D,MAAKA,EADc,CAAA3D,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WA2HjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnB8C,EAAbnC,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAoBgI,EAA4BC,GAC9C,OAAQA,GAAO,IAAI9F,GAAK+F,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAM9EhI,WACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGG,GAAU5H,KAAKwH,GAASS,GAAU,EAM5DxI,WACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,QAAOS,KAAWjI,KAAKyH,GAAGW,GAASpI,KAAKwH,GAASS,GAMnDxI,UAAgBqI,GACdA,EAAQC,GAAY,GAOtBtI,UAAmBqI,EAA8BxE,GAC/CwE,EAAQK,GAAc,EAAG7E,EAAU,GAOrC7D,UAAmBqI,EAA8BzE,GAC/CyE,EAAQO,GAAa,GAAIhF,EAAU,GAOrC5D,UAAcqI,GAEZ,OADaA,EAAQE,MA3EZlJ,EAAA8C,IAAGA,EADgB,CAAA/C,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAqFjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBiI,EAAbtH,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAA8BgI,EAA4BC,GACxD,OAAQA,GAAO,IAAIX,GAAeY,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAMxFhI,YACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAA4DjI,KAAKyH,GAAGa,GAAUtI,KAAKwH,GAASS,GAAW9B,EAAIvH,EAAOC,EAAMC,EAAQG,UAAUsF,KAMnJ9E,UAA0BqI,GACxBA,EAAQC,GAAY,GAOtBtI,UAAoBqI,EAA8BxD,GAChDwD,EAAQe,GAAc,EAAGvE,EAAW6B,EAAIvH,EAAOC,EAAMC,EAAQG,UAAUsF,MAOzE9E,UAAwBqI,GAEtB,OADaA,EAAQE,MA3DZlJ,EAAAiI,cAAaA,EADM,CAAAlI,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAuEjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBiD,EAAbtC,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAqBgI,EAA4BC,GAC/C,OAAQA,GAAO,IAAI3F,GAAM4F,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAM/EhI,UAAiBqI,GACfA,EAAQC,GAAY,GAOtBtI,UAAeqI,GAEb,OADaA,EAAQE,MA3CZlJ,EAAAiD,KAAIA,EADe,CAAAlD,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAqDjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBgD,EAAbrC,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAuBgI,EAA4BC,GACjD,OAAQA,GAAO,IAAI5F,GAAQ6F,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAMjFhI,UAAmBqI,GACjBA,EAAQC,GAAY,GAOtBtI,UAAiBqI,GAEf,OADaA,EAAQE,MA3CZlJ,EAAAgD,OAAMA,EADa,CAAAjD,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAqDjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnB2D,EAAbhD,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAgCgI,EAA4BC,GAC1D,OAAQA,GAAO,IAAIjF,GAAiBkF,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAQ1FhI,YACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGG,GAAU5H,KAAKwH,GAASS,GAAU,EAM5DxI,UAA4BqI,GAC1BA,EAAQC,GAAY,GAOtBtI,UAAoBqI,EAA8BrC,GAChDqC,EAAQK,GAAc,EAAG1C,EAAW,GAOtChG,UAA0BqI,GAExB,OADaA,EAAQE,MA7DZlJ,EAAA2D,gBAAeA,EADI,CAAA5D,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAuEjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBkD,EAAbvC,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAqBgI,EAA4BC,GAC/C,OAAQA,GAAO,IAAI1F,GAAM2F,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAM/EhI,UAAiBqI,GACfA,EAAQC,GAAY,GAOtBtI,UAAeqI,GAEb,OADaA,EAAQE,MA3CZlJ,EAAAkD,KAAIA,EADe,CAAAnD,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAqDjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBmD,EAAbxC,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAwBgI,EAA4BC,GAClD,OAAQA,GAAO,IAAIzF,GAAS0F,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAQlFhI,YACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGG,GAAU5H,KAAKwH,GAASS,GAAU,EAQ5DxI,QACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGG,GAAU5H,KAAKwH,GAASS,GAAU,EAM5DxI,UAAoBqI,GAClBA,EAAQC,GAAY,GAOtBtI,UAAoBqI,EAA8BxD,GAChDwD,EAAQK,GAAc,EAAG7D,EAAW,GAOtC7E,UAAgBqI,EAA8B/C,GAC5C+C,EAAQK,GAAc,EAAGpD,EAAO,GAOlCtF,UAAkBqI,GAEhB,OADaA,EAAQE,MA/EZlJ,EAAAmD,QAAOA,EADY,CAAApD,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAgGjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBoD,EAAbzC,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAqBgI,EAA4BC,GAC/C,OAAQA,GAAO,IAAIxF,GAAMyF,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAM/EhI,OACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAA2DjI,KAAKyH,GAAGa,GAAUtI,KAAKwH,GAASS,GAAW9B,EAAIvH,EAAOC,EAAMC,EAAQC,SAAS0H,YAMjJhH,UAAiBqI,GACfA,EAAQC,GAAY,GAOtBtI,UAAeqI,EAA8B7C,GAC3C6C,EAAQe,GAAc,EAAG5D,EAAMkB,EAAIvH,EAAOC,EAAMC,EAAQC,SAAS0H,aAOnEhH,UAAeqI,GAEb,OADaA,EAAQE,MA3DZlJ,EAAAoD,KAAIA,EADe,CAAArD,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAyEjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBqD,EAAb1C,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAqBgI,EAA4BC,GAC/C,OAAQA,GAAO,IAAIvF,GAAMwF,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAM/EhI,OACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAA2DjI,KAAKyH,GAAGa,GAAUtI,KAAKwH,GAASS,GAAW9B,EAAIvH,EAAOC,EAAMC,EAAQE,SAASyH,YAMjJhH,WACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGG,GAAU5H,KAAKwH,GAASS,GAAU,GAM5DxI,UAAiBqI,GACfA,EAAQC,GAAY,GAOtBtI,UAAeqI,EAA8B7C,GAC3C6C,EAAQe,GAAc,EAAG5D,EAAMkB,EAAIvH,EAAOC,EAAMC,EAAQE,SAASyH,aAOnEhH,UAAmBqI,EAA8BxE,GAC/CwE,EAAQK,GAAc,EAAG7E,EAAU,IAOrC7D,UAAeqI,GAEb,OADaA,EAAQE,MA3EZlJ,EAAAqD,KAAIA,EADe,CAAAtD,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WA4FjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBsD,EAAb3C,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAA0BgI,EAA4BC,GACpD,OAAQA,GAAO,IAAItF,GAAWuF,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAMpFhI,OACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAA2DjI,KAAKyH,GAAGa,GAAUtI,KAAKwH,GAASS,GAAW9B,EAAIvH,EAAOC,EAAMC,EAAQE,SAAS0H,OA8BjJjH,SAAS6J,GACP,IAAIrB,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAG8B,GAASvJ,KAAKwH,GAASS,EAAQqB,GAAoB,KAM7E7J,UAAsBqI,GACpBA,EAAQC,GAAY,GAOtBtI,UAAeqI,EAA8B7C,GAC3C6C,EAAQe,GAAc,EAAG5D,EAAMkB,EAAIvH,EAAOC,EAAMC,EAAQE,SAAS0H,QAOnEjH,UAAmBqI,EAA8B0B,GAC/C1B,EAAQiB,GAAe,EAAGS,EAAgB,GAO5C/J,UAAoBqI,GAElB,OADaA,EAAQE,MAnGZlJ,EAAAsD,UAASA,EADU,CAAAvD,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WA6GjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBuD,EAAb5C,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAyBgI,EAA4BC,GACnD,OAAQA,GAAO,IAAIrF,GAAUsF,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAMnFhI,OACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAA+DjI,KAAKyH,GAAGa,GAAUtI,KAAKwH,GAASS,GAAW9B,EAAIvH,EAAOC,EAAMC,EAAQM,aAAayH,WAMzJpH,UAAqBqI,GACnBA,EAAQC,GAAY,GAOtBtI,UAAeqI,EAA8B7C,GAC3C6C,EAAQe,GAAc,EAAG5D,EAAMkB,EAAIvH,EAAOC,EAAMC,EAAQM,aAAayH,YAOvEpH,UAAmBqI,GAEjB,OADaA,EAAQE,MA3DZlJ,EAAAuD,SAAQA,EADW,CAAAxD,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAyEjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnB2K,EAAbhK,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAA6BgI,EAA4BC,GACvD,OAAQA,GAAO,IAAI+B,GAAc9B,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAQvFhI,WACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGa,GAAUtI,KAAKwH,GAASS,GAAU,EAQ5DxI,OACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAA6DjI,KAAKyH,GAAGa,GAAUtI,KAAKwH,GAASS,GAAW9B,EAAIvH,EAAOC,EAAMC,EAAQK,WAAW8H,OAMrJxH,UAAyBqI,GACvBA,EAAQC,GAAY,GAOtBtI,UAAmBqI,EAA8BxE,GAC/CwE,EAAQe,GAAc,EAAGvF,EAAU,GAOrC7D,UAAeqI,EAA8B1H,GAC3C0H,EAAQe,GAAc,EAAGzI,EAAM+F,EAAIvH,EAAOC,EAAMC,EAAQK,WAAW8H,QAOrExH,UAAuBqI,GAErB,OADaA,EAAQE,MA/EZlJ,EAAA2K,GAAYA,EADO,CAAA5K,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WA6FjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnB4K,EAAbjK,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAyBgI,EAA4BC,GACnD,OAAQA,GAAO,IAAIgC,GAAU/B,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GASnFhI,GAAI6J,GACF,IAAIrB,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAG8B,GAASvJ,KAAKwH,GAASS,EAAQqB,GAAoB,KAS7E7J,MAAM6J,GACJ,IAAIrB,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAG8B,GAASvJ,KAAKwH,GAASS,EAAQqB,GAAoB,KAM7E7J,UAAqBqI,GACnBA,EAAQC,GAAY,GAOtBtI,UAAcqI,EAA8B6B,GAC1C7B,EAAQiB,GAAe,EAAGY,EAAW,GAOvClK,UAAgBqI,EAA8B8B,GAC5C9B,EAAQiB,GAAe,EAAGa,EAAa,GAOzCnK,UAAmBqI,GAEjB,OADaA,EAAQE,MAjFZlJ,EAAA4K,GAAQA,EADW,CAAA7K,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WA8FjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnB+K,EAAbpK,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAmCgI,EAA4BC,GAC7D,OAAQA,GAAO,IAAImC,GAAoBlC,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAU7FhI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGqC,GAAU9J,KAAKwH,GAASS,GAAUjI,KAAKyH,GAAGsC,GAAW,EAAG,GAUlFtK,UAAUiI,GACR,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,GAAUP,GAAO,IAAIvB,EAAIvH,EAAOC,EAAMC,EAAQ8C,KAAK+F,GAAO3H,KAAKyH,GAAGuC,GAAWhK,KAAKwH,GAASS,GAASjI,KAAKyH,IAAM,KAWxHhI,YACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,QAAOS,KAAWjI,KAAKyH,GAAGW,GAASpI,KAAKwH,GAASS,GAMnDxI,UAA+BqI,GAC7BA,EAAQC,GAAY,GAOtBtI,UAAaqI,EAA8BhC,GACzCgC,EAAQmC,GAAc,EAAGnE,EAAIgC,EAAQiC,GAAW,EAAG,IAOrDtK,UAAoBqI,EAA8BoC,GAChDpC,EAAQiB,GAAe,EAAGmB,EAAiB,GAO7CzK,UAAoBqI,EAA8B/B,GAChD+B,EAAQO,GAAa,GAAItC,EAAW,GAOtCtG,UAA6BqI,GAE3B,OADaA,EAAQE,MAxGZlJ,EAAA+K,GAAkBA,EADC,CAAAhL,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WA0HjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBqB,EAAbV,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAsBgI,EAA4BC,GAChD,OAAQA,GAAO,IAAIvH,GAAOwH,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAShFhI,KAAK6J,GACH,IAAIrB,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAG8B,GAASvJ,KAAKwH,GAASS,EAAQqB,GAAoB,KAM7E7J,WACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,QAAOS,KAAWjI,KAAKyH,GAAGW,GAASpI,KAAKwH,GAASS,GAMnDxI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAAuDjI,KAAKyH,GAAG0C,GAAUnK,KAAKwH,GAASS,GAAW9B,EAAIvH,EAAOC,EAAMC,EAAQR,KAAKoD,KAOzIjC,KAAkCiI,GAChC,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,IAC3C,OAAOS,EAASjI,KAAKyH,GAAG2C,GAAQ1C,EAAK1H,KAAKwH,GAASS,GAAU,KAO/DxI,WAAWiI,GACT,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,IAC3C,OAAOS,GAAUP,GAAO,IAAIvB,EAAIvH,EAAOC,EAAMC,EAAQ+K,IAAoBlC,GAAO3H,KAAKyH,GAAGuC,GAAWhK,KAAKwH,GAASS,GAASjI,KAAKyH,IAAM,KAQvIhI,SAAS8I,EAAeb,GACtB,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,IAC3C,OAAOS,GAAUP,GAAO,IAAIvB,EAAIvH,EAAOC,EAAMC,EAAQqB,OAAOwH,GAAO3H,KAAKyH,GAAGuC,GAAWhK,KAAKyH,GAAGe,GAASxI,KAAKwH,GAASS,GAAkB,EAARM,GAAYvI,KAAKyH,IAAM,KAMxJhI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,IAC3C,OAAOS,EAASjI,KAAKyH,GAAGgB,GAAazI,KAAKwH,GAASS,GAAU,EAY/DxI,GAAO8I,EAAeb,GACpB,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,IAC3C,OAAOS,GAAUP,GAAO,IAAIvB,EAAIvH,EAAOC,EAAMC,EAAQ2K,IAAc9B,GAAO3H,KAAKyH,GAAGuC,GAAWhK,KAAKyH,GAAGe,GAASxI,KAAKwH,GAASS,GAAkB,EAARM,GAAYvI,KAAKyH,IAAM,KAM/JhI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,IAC3C,OAAOS,EAASjI,KAAKyH,GAAGgB,GAAazI,KAAKwH,GAASS,GAAU,EAQ/DxI,eAAe8I,EAAeb,GAC5B,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,IAC3C,OAAOS,GAAUP,GAAO,IAAIvB,EAAIvH,EAAOC,EAAMC,EAAQ4K,IAAU/B,GAAO3H,KAAKyH,GAAGuC,GAAWhK,KAAKyH,GAAGe,GAASxI,KAAKwH,GAASS,GAAkB,EAARM,GAAYvI,KAAKyH,IAAM,KAM3JhI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,IAC3C,OAAOS,EAASjI,KAAKyH,GAAGgB,GAAazI,KAAKwH,GAASS,GAAU,EAM/DxI,UAAkBqI,GAChBA,EAAQC,GAAY,GAOtBtI,UAAeqI,EAA8BuC,GAC3CvC,EAAQiB,GAAe,EAAGsB,EAAY,GAOxC5K,UAAmBqI,EAA8B3G,GAC/C2G,EAAQO,GAAa,GAAIlH,EAAU,GAOrC1B,UAAmBqI,EAA8BwC,GAC/CxC,EAAQO,GAAa,EAAGiC,EAAUnE,EAAIvH,EAAOC,EAAMC,EAAQR,KAAKoD,MAOlEjC,UAAeqI,EAA8ByC,GAC3CzC,EAAQiB,GAAe,EAAGwB,EAAY,GAOxC9K,UAAqBqI,EAA8B0C,GACjD1C,EAAQiB,GAAe,EAAGyB,EAAkB,GAO9C/K,UAAmBqI,EAA8B2C,GAC/C3C,EAAQiB,GAAe,EAAG0B,EAAgB,GAQ5ChL,UAA4BqI,EAA8BkB,GACxDlB,EAAQmB,GAAY,EAAGD,EAAKE,OAAQ,GACpC,IAAK,IAAIpP,EAAIkP,EAAKE,OAAS,EAAGpP,GAAK,EAAGA,IACpCgO,EAAQ4C,GAAU1B,EAAKlP,IAEzB,OAAOgO,EAAQsB,KAOjB3J,UAA2BqI,EAA8BuB,GACvDvB,EAAQmB,GAAY,EAAGI,EAAU,GAOnC5J,UAAiBqI,EAA8B6C,GAC7C7C,EAAQiB,GAAe,EAAG4B,EAAc,GAQ1ClL,UAA0BqI,EAA8BkB,GACtDlB,EAAQmB,GAAY,EAAGD,EAAKE,OAAQ,GACpC,IAAK,IAAIpP,EAAIkP,EAAKE,OAAS,EAAGpP,GAAK,EAAGA,IACpCgO,EAAQ4C,GAAU1B,EAAKlP,IAEzB,OAAOgO,EAAQsB,KAOjB3J,UAAyBqI,EAA8BuB,GACrDvB,EAAQmB,GAAY,EAAGI,EAAU,GAOnC5J,UAAyBqI,EAA8B8C,GACrD9C,EAAQiB,GAAe,EAAG6B,EAAsB,GAQlDnL,UAAkCqI,EAA8BkB,GAC9DlB,EAAQmB,GAAY,EAAGD,EAAKE,OAAQ,GACpC,IAAK,IAAIpP,EAAIkP,EAAKE,OAAS,EAAGpP,GAAK,EAAGA,IACpCgO,EAAQ4C,GAAU1B,EAAKlP,IAEzB,OAAOgO,EAAQsB,KAOjB3J,UAAiCqI,EAA8BuB,GAC7DvB,EAAQmB,GAAY,EAAGI,EAAU,GAOnC5J,UAAgBqI,GAEd,OADaA,EAAQE,MAjRZlJ,EAAAqB,MAAKA,EADc,CAAAtB,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WA8RjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GACnBA,EAAA+L,SAAbpL,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KASTP,KACE,OAAOO,KAAKyH,GAAGqC,GAAU9J,KAAKwH,IAShC/H,SACE,OAAOO,KAAKyH,GAAGqC,GAAU9J,KAAKwH,GAAS,GASzC/H,UAAoBqI,EAA8BG,EAA0BiB,GAI1E,OAHApB,EAAQgD,GAAK,EAAG,IAChBhD,EAAQiD,GAAW7B,GACnBpB,EAAQiD,GAAW9C,GACZH,EAAQG,OArDa,CAAApJ,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAgEjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBU,EAAbC,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAuBgI,EAA4BC,GACjD,OAAQA,GAAO,IAAIlI,GAAQmI,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAUjFhI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAA6DjI,KAAKyH,GAAGa,GAAUtI,KAAKwH,GAASS,GAAW9B,EAAIvH,EAAOC,EAAMC,EAAQuI,GAAWC,OAQrJ7H,OAAO8I,EAAeb,GACpB,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,GAAUP,GAAO,IAAIvB,EAAIvH,EAAOC,EAAMC,EAAQqB,OAAOwH,GAAO3H,KAAKyH,GAAGuC,GAAWhK,KAAKyH,GAAGe,GAASxI,KAAKwH,GAASS,GAAkB,EAARM,GAAYvI,KAAKyH,IAAM,KAMxJhI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGgB,GAAazI,KAAKwH,GAASS,GAAU,EAQ/DxI,eAAe8I,EAAeb,GAC5B,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,GAAUP,GAAO,IAAIvB,EAAIvH,EAAOC,EAAMC,EAAQ4K,IAAU/B,GAAO3H,KAAKyH,GAAGuC,GAAWhK,KAAKyH,GAAGe,GAASxI,KAAKwH,GAASS,GAAkB,EAARM,GAAYvI,KAAKyH,IAAM,KAM3JhI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGgB,GAAazI,KAAKwH,GAASS,GAAU,EAM/DxI,UAAmBqI,GACjBA,EAAQC,GAAY,GAOtBtI,UAAqBqI,EAA8BkD,GACjDlD,EAAQe,GAAc,EAAGmC,EAAY7E,EAAIvH,EAAOC,EAAMC,EAAQuI,GAAWC,QAO3E7H,UAAiBqI,EAA8BmD,GAC7CnD,EAAQiB,GAAe,EAAGkC,EAAc,GAQ1CxL,UAA0BqI,EAA8BkB,GACtDlB,EAAQmB,GAAY,EAAGD,EAAKE,OAAQ,GACpC,IAAK,IAAIpP,EAAIkP,EAAKE,OAAS,EAAGpP,GAAK,EAAGA,IACpCgO,EAAQ4C,GAAU1B,EAAKlP,IAEzB,OAAOgO,EAAQsB,KAOjB3J,UAAyBqI,EAA8BuB,GACrDvB,EAAQmB,GAAY,EAAGI,EAAU,GAOnC5J,UAAyBqI,EAA8B8C,GACrD9C,EAAQiB,GAAe,EAAG6B,EAAsB,GAQlDnL,UAAkCqI,EAA8BkB,GAC9DlB,EAAQmB,GAAY,EAAGD,EAAKE,OAAQ,GACpC,IAAK,IAAIpP,EAAIkP,EAAKE,OAAS,EAAGpP,GAAK,EAAGA,IACpCgO,EAAQ4C,GAAU1B,EAAKlP,IAEzB,OAAOgO,EAAQsB,KAOjB3J,UAAiCqI,EAA8BuB,GAC7DvB,EAAQmB,GAAY,EAAGI,EAAU,GAOnC5J,UAAiBqI,GAEf,OADaA,EAAQE,KAQvBvI,UAA0BqI,EAA8BG,GACtDH,EAAQoD,GAAOjD,IAtKNnJ,EAAAU,OAAMA,EADa,CAAAX,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,kvBC5jEjBgF,EAAAvR,EAAA,SAkCawR,EAWT3L,YAAYuJ,EAAeqC,GAIvB,IAAIC,EAHJtL,KAAKgJ,KAAOA,EACZhJ,KAAKI,KAAO4I,EAAK5I,KACjBJ,KAAKkJ,OAASF,EAAKE,OAERF,aAAgBuC,EAAAnR,KAAkBiR,aAAgBG,EAAAxP,GACzDgE,KAAKqL,KAAO,IAAIG,EAAAxP,EAAYgN,KACnBqC,aAAgBI,EAAAzP,KAAkBsP,EAAQtC,EAAK0C,aAAgBJ,EAAMpC,OAAS,GAAKF,EAAK2C,UAAY,EAC7G3L,KAAKqL,KAAO,IAAII,EAAAzP,EAAagN,EAAMqC,GAEnCrL,KAAKqL,KAAOA,EApBb5L,cAAkCuJ,GACrC,OAAO4C,EAAa5C,GAEjBvJ,cAAkCoM,KAA8BC,GACnE,OAAOA,EAAOnL,OAAO,CAAC3E,EAAGM,IAAMN,EAAIA,EAAE+P,OAAOzP,GAAKA,EAAGuP,GAoBxDF,gBAAyB,OAAO3L,KAAKgJ,KAAK2C,UAC1CD,iBAA0B,OAAO1L,KAAKgJ,KAAK0C,WAC3CpK,IAAYxG,OAAOC,eACf,gBAAiBiF,KAAKI,KAAKtF,OAAOC,gBAE/B0E,SAAgB,OAAOO,KAAKgM,UAC5BvM,MAAmBuJ,EAAeqC,EAAgBrL,KAAKqL,KAAKY,MAAMjD,IACrE,OAAO,IAAKhJ,KAAKkM,YAAoBlD,EAAMqC,GAExC5L,QAAQ8I,GACX,OAAOvI,KAAKqL,KAAKc,QAAQ5D,GAEtB9I,IAAI8I,GACP,OAAOvI,KAAKqL,KAAKzQ,IAAI2N,GAElB9I,IAAI8I,EAAevN,GACtB,OAAOgF,KAAKqL,KAAKnK,IAAIqH,EAAOvN,GAEzByE,UACH,OAAOO,KAAKqL,KAAKW,UAEdvM,QAAQzE,GACX,OAAOgF,KAAKqL,KAAKe,QAAQpR,GAEtByE,CAAC3E,OAAOuR,YACX,OAAOrM,KAAKqL,KAAKvQ,OAAOuR,YAErB5M,UAAUqM,GACb,GAAiD,KAA5CA,EAASA,EAAO/K,OAAOuL,UAAUpD,OAClC,OAAOlJ,KAEX,MAAMqL,KAAEA,GAASrL,KACXuM,EAASlB,aAAgBG,EAAAxP,MAErBqP,EAAKmB,gBAAiBV,IADzB9L,QAAS8L,GAEVW,EAAUlB,EAAAnR,EAAYsS,eAAeH,GACrCI,EAAeF,EAAQA,EAAQvD,OAAS,GACxC0D,EAAc,IAAIrB,EAAAnR,EAAY4F,KAAKI,KAAMuM,EAAcJ,EAAM,GAAI,EAAGE,GAC1E,OAAOzM,KAAKiM,MAAMW,EAAa,IAAIpB,EAAAxP,EAAY4Q,IAE5CnN,MAAMoN,EAAgBC,GACzB,IAAI5D,OAAEA,GAAWlJ,KACb+M,EAAQ/M,KAAKqL,KAAa0B,MAAQ,EAClCC,EAAQ9D,EAAQ+D,GAAQJ,GAAS,GAAKE,EACtCG,GAAqB,iBAARJ,EAAmBA,EAAME,GAASD,EAC/CG,EAAK,IAAKA,EAAKF,IAAe,EAANE,EAAWF,GACnCC,EAAO,IAAKA,EAAOD,IAAiB,EAARC,EAAaD,GACzCE,EAAKD,KAASA,EAAMC,IAAOA,EAAID,IACnCD,GAASG,SAASH,EAASE,EAAKD,IAAUD,EAAQ,EAAI,EAAIA,EAC1D,MAAMI,EAAapN,KAAKgJ,KAAKqE,MAAMJ,EAAMK,KAAKC,IAAIP,EAAO9D,IACzD,OAAOlJ,KAAKiM,MAAMmB,EAAYpN,KAAKqL,KAAKY,MAAMmB,IAG3C3N,kBAAkBsD,GACrB,OAAOyK,EAAAxR,EAAYgH,gBAAgBD,EAAS/C,KAAKI,MAE9CX,oBAAoBsD,GACvB,OAAOyK,EAAAlR,EAAc0G,gBAAgBD,EAAS/C,KAAKI,KAAMJ,aAI3CyN,UAAuCrC,EACzDsC,aAAsB,OAAO1N,KAAKgJ,KAAK0E,OAChCjO,OAA2B,OAAOO,KAAK2N,QAAQ,EAAG,GAClDlO,QAA4B,OAAOO,KAAK2N,QAAQ,EAAG,GACnDlO,QAAQwI,EAAiB,EAAG2F,EAAiB,GAChD,IAAI5E,EAAQhJ,KAAKgJ,KAAuBiD,MAAM,IAAI4B,EAAA/R,GAC9CmM,EAAS,IACTe,EAAOA,EAAKqE,MAAMpF,EAAQjI,KAAKkJ,OAASjB,IAE5C,MAAM6F,EAAS,IAAIC,EAAU/E,EAAM,IAAIgF,EAAApQ,EAAcoL,EAAM4E,IAE3D,OADAE,EAAO5E,OAASlJ,KAAKkJ,OAAS0E,EAAS,EAChCE,SAIOG,UAA4D7C,EAC9EsC,aAAsB,OAAO1N,KAAKgJ,KAAK0E,OACvCQ,mBAA4B,OAAOlO,KAAKgJ,KAAKkF,aACtCzO,eAAe8I,GAClB,OAAOvI,KAAKkO,aAAa3F,GAEtB9I,eAAe8I,GAClB,OAAOvI,KAAKkO,aAAa3F,EAAQ,GAAKvI,KAAKkO,aAAa3F,UAI1C4F,UAA2C/C,EAKtD3L,WAA0C8I,GAC7C,OAAOvI,KAAKqL,KAAK+C,WAAc7F,GAEnC8F,gBACI,IAAIrF,EACJ,GAAKA,EAAOhJ,KAAKsO,GAEb,OAAOtF,EACJ,MAAaA,EAAOhJ,KAAKgJ,gBAAiBuC,EAAAnR,GAE7C,OAAO4F,KAAKsO,GAAatF,EAAKqF,UAKlC,MAAME,EAAWvF,EAA+BwD,aAChD,OAAOxM,KAAKsO,GAAaC,EACpB5N,OAA+B,CAAC6N,EAAMC,IAAUA,EAAMJ,UACtD1N,OAA+B,CAAC6N,EAAMvR,EAAGnD,KACrC0U,EAAK1U,KAAO0U,EAAK1U,QAAU4U,KAAKD,EAAML,WAAWtU,KACjD0U,GAAQA,EAAMA,OACtBtO,IAAKqM,GAASnB,EAAOW,UAAaQ,GAAMvD,aAmBpC2F,UAAmBvD,EAC5B3L,YAAYuJ,EAAkBqC,EAAmB,IAAI2C,EAAA3Q,EAAS2L,IAC1D5F,MAAM4F,EAAMqC,UAIPuD,UAAmBxD,EACrB3L,YAAYuJ,GACf,OAAO,IAAI4F,EAAW,IAAIrD,EAAAjP,EAAS,IAAIuR,EAAAzT,EAAQ4O,EAAKE,OAAQ,KAAMzO,OAAA0Q,EAAA9Q,EAAAI,CAAUuO,KAEhF0E,aAAsB,OAAO1N,KAAKgJ,KAAK0E,OACvCjO,YAAYuJ,EAAkBqC,EAAmB,IAAI2C,EAAAhS,EAASgN,IAC1D5F,MAAM4F,EAAMqC,UAIP0C,UAA4CN,EA4BrDhO,YAAYuJ,EAAeqC,EAAgB0C,EAAUc,GAAY7F,IAC7D5F,MAAM4F,EAAMqC,GApBT5L,YAAYuJ,EAAW8F,GAC1B,QAAIA,EACA,OAAO9F,aAAgBrF,WACjB,IAAIoK,EAAU,IAAIxC,EAAAtP,EAAS,IAAI4R,EAAAnU,EAASsP,EAAKE,OAAQ,KAAMF,IAC3D,IAAI+E,EAAU,IAAIxC,EAAAtP,EAAS,IAAI4R,EAAAzQ,EAAU4L,EAAKE,OAAQ,KAAMF,IAEtE,OAAQA,EAAKkD,aACT,KAAK3I,UAAW,OAAO,IAAIwK,EAAU,IAAIxC,EAAAtP,EAAS,IAAI4R,EAAAkB,EAAQ/F,EAAKE,OAAQ,KAAMF,IACjF,KAAKvF,WAAY,OAAO,IAAIsK,EAAU,IAAIxC,EAAAtP,EAAS,IAAI4R,EAAAhT,EAASmO,EAAKE,OAAQ,KAAMF,IACnF,KAAKrF,WAAY,OAAO,IAAIoK,EAAU,IAAIxC,EAAAtP,EAAS,IAAI4R,EAAA/R,EAASkN,EAAKE,OAAQ,KAAMF,IACnF,KAAKxF,WAAY,OAAO,IAAIuK,EAAU,IAAIxC,EAAAtP,EAAS,IAAI4R,EAAAtQ,EAASyL,EAAKE,OAAQ,KAAMF,IACnF,KAAKtF,YAAa,OAAO,IAAIqK,EAAU,IAAIxC,EAAAtP,EAAS,IAAI4R,EAAA7P,EAAUgL,EAAKE,OAAQ,KAAMF,IACrF,KAAKpF,YAAa,OAAO,IAAImK,EAAU,IAAIxC,EAAAtP,EAAS,IAAI4R,EAAA9Q,EAAUiM,EAAKE,OAAQ,KAAMF,IAEzF,MAAM,IAAIgG,UAAU,yBAExBvP,UAAkCuJ,GAC9B,OAAOA,EAAK5I,KAAKkD,UAAY,GAAK,IAAI0K,EAAAzR,EAASyM,GAAQ,IAAIgF,EAAA3T,EAAc2O,EAAOA,EAAK5I,KAAKkD,SAAW,GAAM,UAOtG2L,UAAkDxB,EAe3DhO,YAAYuJ,EAAeqC,EAAgB4D,EAAYJ,GAAY7F,IAC/D5F,MAAM4F,EAAMqC,GAZT5L,YAAYuJ,GACf,OAAQA,EAAKkD,aACT,KAAKxI,YAAa,OAAO,IAAIuL,EAAY,IAAI1D,EAAAtP,EAAS,IAAI4R,EAAAtS,EAAWyN,EAAKE,OAAQ,KAAMF,IACxF,KAAKvE,aAAc,OAAO,IAAIwK,EAAY,IAAI1D,EAAAtP,EAAS,IAAI4R,EAAArT,EAAWwO,EAAKE,OAAQ,KAAMF,IACzF,KAAKrE,aAAc,OAAO,IAAIsK,EAAY,IAAI1D,EAAAtP,EAAS,IAAI4R,EAAAhS,EAAWmN,EAAKE,OAAQ,KAAMF,IAE7F,MAAM,IAAIgG,UAAU,2BAExBvP,UAAoCuJ,GAChC,OAAOA,EAAK5I,KAAKkE,YAAcuJ,EAAAvQ,EAAUiH,KAAO,IAAIyJ,EAAAzR,EAASyM,GAAQ,IAAIgF,EAAA/R,EAAY+M,UAOhFkG,UAAmBzB,EAC5BhO,UAAoCuJ,GAChC,OAAOA,EAAK5I,KAAK6E,OAAS4I,EAAAtR,EAASiK,IAAM,IAAIwH,EAAA1R,EAAY0M,GAAQ,IAAIgF,EAAA5T,EAAoB4O,EAAM,GAEnGvJ,YAAYuJ,EAAmBqC,EAAoB6D,EAAWL,GAAY7F,IACtE5F,MAAM4F,EAAMqC,GAET5L,OACH,OAAOO,KAAKI,KAAK6E,OAAS4I,EAAAtR,EAASiK,IAAMxG,KAAK2N,QAAQ,EAAG,GAAK3N,KAAK2N,QAAQ,EAAG,GAE3ElO,QACH,OAAOO,KAAKI,KAAK6E,OAAS4I,EAAAtR,EAASiK,IAAMxG,KAAK2N,QAAQ,EAAG,GAAK3N,KAAK2N,QAAQ,EAAG,GAE3ElO,sBACH,IAAIuJ,EAAQhJ,KAAKgJ,KAAuBiD,MAAM,IAAI4B,EAAA/R,GAClD,OAAQkE,KAAKI,KAAK6E,MACd,KAAK4I,EAAAtR,EAASiK,IAAK,OAAO,IAAIuH,EAAU/E,EAAM,IAAIgF,EAAAjU,EAAiBiP,EAAa,IAChF,KAAK6E,EAAAtR,EAASkK,YAAa,OAAO,IAAIsH,EAAU/E,EAAM,IAAIgF,EAAAzS,EAAyByN,EAAa,IAEpG,MAAM,IAAIgG,qCAAqCnB,EAAAtR,EAASyD,KAAKI,KAAK6E,iBAI7DkK,UAAsB1B,EAC/BhO,YAAYuJ,EAAqBqC,EAAsB,IAAI2C,EAAA3T,EAAc2O,EAAM,IAC3E5F,MAAM4F,EAAMqC,UAIP+D,UAAmB3B,EAC5BhO,UAAmCuJ,GAC/B,OAAOA,EAAK5I,KAAKkD,UAAY,GAAK,IAAI0K,EAAAzR,EAASyM,GAAQ,IAAIgF,EAAA3T,EAAc2O,EAAOA,EAAK5I,KAAKkD,SAAW,GAAM,GAE/G7D,YAAYuJ,EAAkBqC,EAAmB+D,EAAWP,GAAY7F,IACpE5F,MAAM4F,EAAMqC,GAET5L,OACH,OAAOO,KAAKI,KAAKkD,UAAY,GAAKtD,KAAK2N,QAAQ,EAAG,GAAK3N,KAAK2N,QAAQ,EAAG,GAEpElO,QACH,OAAOO,KAAKI,KAAKkD,UAAY,GAAKtD,KAAK2N,QAAQ,EAAG,GAAK3N,KAAK2N,QAAQ,EAAG,UAIlE0B,UAAwB5B,EACjChO,YAAYuJ,EAAuBqC,EAAwB,IAAI2C,EAAA3T,EAAc2O,EAAM,IAC/E5F,MAAM4F,EAAMqC,GAET5L,sBACH,IAAIuJ,EAAQhJ,KAAKgJ,KAAuBiD,MAAM,IAAI4B,EAAA/R,GAClD,OAAQkE,KAAKI,KAAK6E,MACd,KAAK4I,EAAA1P,EAASuI,OAAQ,OAAO,IAAIqH,EAAU/E,EAAM,IAAIgF,EAAAnS,EAAoBmN,EAAa,IACtF,KAAK6E,EAAA1P,EAASsI,YAAa,OAAO,IAAIsH,EAAU/E,EAAM,IAAIgF,EAAAzS,EAAyByN,EAAa,IAChG,KAAK6E,EAAA1P,EAASwI,YAAa,OAAO,IAAIoH,EAAU/E,EAAM,IAAIgF,EAAA7T,EAAyB6O,EAAa,IAChG,KAAK6E,EAAA1P,EAASyI,WAAY,OAAO,IAAImH,EAAU/E,EAAM,IAAIgF,EAAAxT,EAAwBwO,EAAa,IAElG,MAAM,IAAIgG,qCAAqCnB,EAAA1P,EAAS6B,KAAKI,KAAK6E,iBAI7DqK,UAAuB7B,EAChChO,UAAuCuJ,GACnC,OAAOA,EAAK5I,KAAK6E,OAAS4I,EAAA3R,EAAa2K,WAAa,IAAImH,EAAAjS,EAAsBiN,GAAQ,IAAIgF,EAAA3T,EAAc2O,EAAM,GAElHvJ,YAAYuJ,EAAsBqC,EAAuBiE,EAAeT,GAAY7F,IAChF5F,MAAM4F,EAAMqC,GAET5L,OACH,OAAOO,KAAKI,KAAK6E,OAAS4I,EAAA3R,EAAa2K,WAAa7G,KAAK2N,QAAQ,EAAG,GAAK3N,KAAK2N,QAAQ,EAAG,GAEtFlO,QACH,OAAOO,KAAKI,KAAK6E,OAAS4I,EAAA3R,EAAa2K,WAAa7G,KAAK2N,QAAQ,EAAG,GAAK3N,KAAK2N,QAAQ,EAAG,UAIpF4B,UAAqBtB,EAC9BxO,YAAYuJ,EAAoBqC,EAAqB,IAAImE,EAAAxT,EAAWgN,IAChE5F,MAAM4F,EAAMqC,GAET5L,SACH,OAAO,IAAIgQ,EAAYzP,KAAKgJ,KAA2BiD,MAAM,IAAI4B,EAAAxP,WAI5DqR,UAA8BjC,EACvChO,YAAYuJ,EAA6BqC,EAA8B,IAAI2C,EAAA3T,EAAc2O,EAAMA,EAAK5I,KAAKqF,YACrGrC,MAAM4F,EAAMqC,UAIPoE,UAAmBxB,EAC5BxO,YAAYuJ,EAAkBqC,EAAmB,IAAImE,EAAAnV,EAAS2O,IAC1D5F,MAAM4F,EAAMqC,GAET5L,WACH,OAAO,IAAI8P,EAAcvP,KAAKgJ,KAA2BiD,MAAM,IAAI4B,EAAAvR,WAI9DqT,UAAkD1B,EAG3DxO,YAAYuJ,EAAqBqC,EAAoB,IAAImE,EAAApV,EAAY4O,IACjE5F,MAAM4F,EAAMqC,GAET5L,WAAW8I,GACd,OAAOvI,KAAKqL,KAAK+C,WAAc7F,UAI1BqH,UAA2DxE,EAGpE3L,YAAYuJ,EAA8BqC,EAA+B,IAAImE,EAAAlT,EAAkB0M,IAC3F5F,MAAM4F,EAAMqC,GAET5L,WAAW8I,GACd,OAAOvI,KAAKqL,KAAK+C,WAAc7F,UAI1BsH,UAAkB1B,EAC3B1O,YAAYuJ,EAAkBqC,EAAmB,IAAIyE,EAAAxT,EAAQ0M,IACzD5F,MAAM4F,EAAMqC,GAET5L,WACH,OAAO,IAAIsQ,EAAc/P,KAAKgJ,KAAyBiD,MAAM,IAAI4B,EAAA3Q,EAAO8C,KAAKI,KAAK0C,mBAI7EiN,UAAqB5B,EAC9B1O,YAAYuJ,EAAoBqC,EAAqB,IAAIyE,EAAAzV,EAAW2O,IAChE5F,MAAM4F,EAAMqC,GAET5L,MAAMmG,MACT,OAAO,IAAIiK,EAAW7P,KAAKgJ,KAAyBiD,MAAM,IAAI4B,EAAA1R,EAAKyJ,EAAY5F,KAAKI,KAAK0C,mBAIpFkN,UAAgE7B,EACzE1O,YAAYuJ,EAAeqC,GAAuBrC,EAAK5I,KAAKnF,OAAS4S,EAAAhQ,EAAU2H,OAAS,IAAIsK,EAAAvT,EAAuByM,GAA6B,IAAI8G,EAAA9T,EAAegN,KAC/J5F,MAAM4F,EAAMqC,UAIP4E,UAAwD7E,EAKjE3L,YAAYuJ,EAA2BqC,EAA4B,IAAI6E,EAAAlU,EAAkBgN,EAAKnD,WAAY,IAAIkI,EAAU/E,EAAKzH,WAKzH,GAJA6B,MAAM4F,EAAmBqC,GACrBA,aAAgBI,EAAAzP,IAChBqP,EAAQA,EAAaA,MAErBrC,aAAgBuC,EAAAhP,GAAkB8O,aAAgB6E,EAAAlU,EAClDgE,KAAKuB,QAAU8J,EAAK9J,QACpBvB,KAAK6F,WAAamD,EAAKnD,eACpB,MAAImD,aAAgBuC,EAAAnR,GAAeiR,aAAgBG,EAAAxP,GAWtD,MAAM,IAAIgT,UAAU,sCAX+C,CACnE,MAAMT,EAASlD,EAAKmB,aAGpBxM,KAAK6F,WAAa0I,EAAOA,EAAOrF,OAAS,GAAGrD,WAC5C7F,KAAKuB,QAAUgN,EAAO5N,OAClB,CAACwP,EAA0BC,IACtBD,EAAuBA,EAAKpE,OAAOqE,EAAK7O,SAAjC6O,EAAK7O,QACjB,QAML9B,OAAO8I,GAAiB,OAAOvI,KAAKuB,QAAQ3G,IAAI2N,GAChD9I,SAASpE,GAAe,OAAO2E,KAAK6F,WAAWjL,IAAIS,GACnDoE,cAAczE,GAAY,OAAOgF,KAAK6F,WAAWuG,QAAQpR,IAG7D,MAAM4Q,EACY5C,GAAkBwE,EAAAxR,EAAYgH,gBAAgB,kBACrBwK,EAAAxR,EAC9CyD,YAAoBuJ,GAAiB5F,QAAjBpD,KAAAgJ,OACpBvJ,GAAqB4Q,GAA0B,OAAO,IAAI1B,EAAiB3O,KAAKgJ,MAChFvJ,GAAqB4Q,GAA0B,OAAO,IAAItC,EAAgB/N,KAAKgJ,MAC/EvJ,GAAqB4Q,GAA0B,OAAO,IAAIpB,EAAkBjP,KAAKgJ,MACjFvJ,GAAqB4Q,GAA0B,OAAO,IAAId,EAAmBvP,KAAKgJ,MAClFvJ,GAAqB4Q,GAA0B,OAAO,IAAIZ,EAAiBzP,KAAKgJ,MAChFvJ,GAAqB4Q,GAA0B,OAAO,IAAIzB,EAAiB5O,KAAKgJ,MAChFvJ,GAAqB4Q,GAA0B,OAAO,IAAIlB,EAAoBnP,KAAKgJ,MACnFvJ,GAAqB4Q,GAA0B,OAAO,IAAInB,EAAiBlP,KAAKgJ,MAChFvJ,GAAqB4Q,GAA0B,OAAO,IAAIjB,EAAiBpP,KAAKgJ,MAChFvJ,GAAqB4Q,GAA0B,OAAO,IAAIhB,EAAsBrP,KAAKgJ,MACrFvJ,GAAqB4Q,GAA0B,OAAO,IAAIf,EAAqBtP,KAAKgJ,MACpFvJ,GAAqB4Q,GAA0B,OAAO,IAAIV,EAAiB3P,KAAKgJ,MAChFvJ,GAAqB4Q,GAA0B,OAAO,IAAIN,EAAmB/P,KAAKgJ,MAClFvJ,GAAqB4Q,GAA0B,OAAO,IAAIL,EAAkBhQ,KAAKgJ,MACjFvJ,GAAqB4Q,GAA0B,OAAO,IAAIX,EAA4B1P,KAAKgJ,MAC3FvJ,GAAqB4Q,GAA0B,OAAO,IAAIT,EAA0B5P,KAAKgJ,MACzFvJ,GAAqB4Q,GAA0B,OAAO,IAAIR,EAAgB7P,KAAKgJ,MAC/EvJ,GAAqB4Q,GAA0B,OAAO,IAAIJ,EAAuBjQ,KAAKgJ,QApBFA,GAAOA,EAAK5I,OADxE,SAAA1G,EAAA6B,EAAAV,GAAA,aAAAA,EAAAR,EAAAkB,EAAA,sBAAAO,IAAAjB,EAAAR,EAAAkB,EAAA,sBAAAwT,IAAAlU,EAAAR,EAAAkB,EAAA,sBAAAf,IAAAK,EAAAR,EAAAkB,EAAA,sBAAAnB,IAAAS,EAAAR,EAAAkB,EAAA,sBAAAQ,IAAAlB,EAAAR,EAAAkB,EAAA,sBAAAS,IAAAnB,EAAAR,EAAAkB,EAAA,sBAAAU,IAAApB,EAAAR,EAAAkB,EAAA,sBAAAxB,IAAAc,EAAAR,EAAAkB,EAAA,sBAAAlB,IAAAQ,EAAAR,EAAAkB,EAAA,sBAAAW,IAAArB,EAAAR,EAAAkB,EAAA,sBAAAY,IAAAtB,EAAAR,EAAAkB,EAAA,sBAAAa,IAAAvB,EAAAR,EAAAkB,EAAA,sBAAAM,IAAA,IAAAU,EAAA1B,EAAA,GCrb5ByV,EAAA1W,EAAA,GAuBM,SAAU2W,EAAmCrN,EAAqCwK,GACpF,OAAKxK,GAAasN,YAAYC,OAAO/C,GAAkBA,EAChDA,aAAkBxK,EAAYwK,EAC7BA,GAAW8C,YAAYC,OAAO/C,GAC/B,IAAIxK,EAAUwK,EAAO/E,OAAQ+E,EAAO9E,WAAY8E,EAAOgD,WAAaxN,EAAUyN,mBADrCzN,EAAU+J,KAAKS,aAmCtDkD,EAWTnR,YAAYW,EAAS8I,EAAgBjB,EAAiB0D,GAClD3L,KAAKI,KAAOA,EACZJ,KAAKkJ,OAASoE,KAAKuD,MAAMvD,KAAKwD,IAAI5H,GAAU,EAAG,IAC/ClJ,KAAKiI,GAASqF,KAAKuD,MAAMvD,KAAKwD,IAAI7I,GAAU,EAAG,IAC/CjI,KAAK+Q,GAAazD,KAAKuD,MAAMvD,KAAKwD,IAAInF,GAAa,GAAI,IAE3DvK,aAAsB,OAAOpB,KAAKI,KAAKiB,EACvCqK,iBAA0B,OAAO1L,KAAKsQ,EAAA3S,EAAWwJ,UACjDwE,gBACI,IACID,EADAC,EAAY3L,KAAK+Q,GAKrB,OAHmB,IAAfpF,IAAqBD,EAAa1L,KAAKsQ,EAAA3S,EAAWwJ,aAClDnH,KAAK+Q,GAAapF,EAAY3L,KAAKkJ,OAASzO,OAAAuW,EAAAzU,EAAA9B,CAAiBiR,EAAY1L,KAAKiI,GAAQjI,KAAKiI,GAASjI,KAAKkJ,SAEtGyC,EAEJlM,MAAmBW,EAAS8I,EAASlJ,KAAKkJ,OAAQjB,EAASjI,KAAKiI,GAAQ0D,EAAY3L,KAAK+Q,IAC5F,OAAO,IAAIH,EAASxQ,EAAM8I,EAAQjB,EAAQ0D,GAEvClM,MAAMwI,EAAgBiB,GACzB,OAAOA,GAAU,EAAIlJ,KAAOA,KAAKiR,cAAcjR,KAAKiM,MAChDjM,KAAKI,KAAM8I,EAAQlJ,KAAKiI,GAASA,IAA8B,IAApBjI,KAAK+Q,IAAoB,GAC9D9I,EAAQiB,GAEZzJ,cAAcwM,EAAahE,EAAgBiB,GACjD,IAAIgI,EAOJ,OALCA,EAAMlR,KAAKsQ,EAAA3S,EAAWyJ,SAAW6E,EAAMqE,EAAA3S,EAAWyJ,MAAQpH,KAAKmR,UAAUD,EAAKjJ,EAAQiB,KAEtFgI,EAAMlR,KAAKsQ,EAAA3S,EAAWsJ,WAAagF,EAAMqE,EAAA3S,EAAWsJ,QAAUjH,KAAKoR,aAAaF,EAAKjJ,EAAQiB,MAEzFgI,EAAMlR,KAAKsQ,EAAA3S,EAAWuJ,SAAW+E,EAAMqE,EAAA3S,EAAWuJ,MAAQlH,KAAKmR,UAAUD,EAAKjJ,EAAQiB,IACpF+C,EAEDxM,UAAUuJ,EAAgCf,EAAgBiB,GAChE,OAAOF,EAAKqI,SAASpJ,EAAQA,EAASiB,GAEhCzJ,aAAayO,EAA0BjG,EAAgBiB,GAC7D,OAAOgF,EAAamD,SAASpJ,EAAQA,EAASiB,EAAS,UAIlDoI,UAAqCV,EAI9CnR,YAAYW,EAAS8I,EAAgBwC,EAA2C1C,EAAwBf,EAAiB0D,GACrHvI,MAAMhD,EAAM8I,EAAQjB,EAAQ0D,GAC5B3L,KAAKsQ,EAAA3S,EAAWuJ,MAAQqJ,EAAavQ,KAAKkD,UAAW8F,GACrDhJ,KAAKsQ,EAAA3S,EAAWwJ,UAAYoJ,EAAa/M,WAAYkI,GAJzDgC,aAAsB,OAAO1N,KAAKsQ,EAAA3S,EAAWuJ,MAM7ChE,gBAAyC,OAAOlD,KAAKI,KAAK8C,UACnDzD,MAAmBW,EAAS8I,EAASlJ,KAAKkJ,OAAQjB,EAASjI,KAAKiI,GAAQ0D,EAAY3L,KAAK+Q,IAC5F,OAAO,IAAK/Q,KAAKkM,YAAoB9L,EAAM8I,EAAQlJ,KAAKsQ,EAAA3S,EAAWwJ,UAAWnH,KAAKsQ,EAAA3S,EAAWuJ,MAAOe,EAAQ0D,UAIxG4F,UAAiBD,EAChB7R,UAAUuJ,GAAoB,OAAOA,SAGtCwI,UAA6CF,EAMtD7R,YAAYW,EAAS8I,EAAgBwC,EAA2CwC,EAAgClF,EAAmBf,EAAiB0D,GAChJvI,MAAMhD,EAAM8I,EAAQwC,EAAY1C,EAAMf,EAAQ0D,GAC9C3L,KAAKsQ,EAAA3S,EAAWsJ,QAAUsJ,EAAa5M,WAAYuK,GAJvDR,aAAsB,OAAO1N,KAAKsQ,EAAA3S,EAAWuJ,MAC7CgH,mBAA4B,OAAOlO,KAAKsQ,EAAA3S,EAAWsJ,QAK5CxH,MAAmBW,EAAS8I,EAASlJ,KAAKkJ,OAAQjB,EAASjI,KAAKiI,GAAQ0D,EAAY3L,KAAK+Q,IAC5F,OAAO,IAAIS,EAAapR,EAAM8I,EAAQlJ,KAAKsQ,EAAA3S,EAAWwJ,UAAWnH,KAAKsQ,EAAA3S,EAAWsJ,QAASjH,KAAKsQ,EAAA3S,EAAWuJ,MAAOe,EAAQ0D,UAIpH8F,UAA2Cb,EAKpDnR,YAAYW,EAAqByF,EAAuBtE,GACpD6B,MAAMhD,EAAMmB,EAAQ2H,OAAQ3H,EAAQ0G,GAAS1G,EAAgBwP,IAC7D/Q,KAAK0R,GAAWnQ,EAChBvB,KAAK2R,GAAc9L,EALvBtE,cAAuB,OAAOvB,KAAK0R,GACnC7L,iBAA0B,OAAO7F,KAAK2R,GAMtChG,gBAAyB,OAAO3L,KAAK0R,GAAS/F,UAC9CD,iBAA0B,OAAO1L,KAAK0R,GAAShG,WACxCjM,MAA+BW,EAAS8I,EAASlJ,KAAKkJ,OAAQjB,EAASjI,KAAKiI,IAC/E,MAAMe,EAAOhJ,KAAK2R,GAAY3I,KAAKiD,MAAM7L,EAAKyF,YAC9C,OAAO,IAAI4L,EACPzR,KAAKI,KACLJ,KAAK2R,GAAY1F,MAAMjD,GACvBhJ,KAAK0R,GAASrE,MAAMpF,EAASjI,KAAKiI,GAAQiB,IAGxCzJ,cAAcwM,EAAa2F,EAAiBC,GAGlD,OAFA5F,EAAM/C,OAAS+C,EAAMyF,GAASxI,OAC9B+C,EAAM8E,GAAc9E,EAAMyF,GAAiBX,GACpC9E,SAIF6F,UAAsDlB,EAE/DnR,YAAYW,EAAS8I,EAAgBwC,EAA2C2C,EAAwBpG,EAAiB0D,GACrHvI,MAAMhD,EAAM8I,EAAQjB,EAAQ0D,GAC5B3L,KAAKqO,UAAYA,EACjBrO,KAAKsQ,EAAA3S,EAAWwJ,UAAYoJ,EAAa/M,WAAYkI,GAElDjM,MAAmBW,EAAS8I,EAASlJ,KAAKkJ,OAAQjB,EAASjI,KAAKiI,GAAQ0D,EAAY3L,KAAK+Q,IAC5F,OAAO,IAAIe,EAAc1R,EAAM8I,EAAQlJ,KAAKsQ,EAAA3S,EAAWwJ,UAAWnH,KAAKqO,UAAWpG,EAAQ0D,GAEpFlM,cAAcwM,EAAahE,EAAgBiB,GAIjD,OAHKlJ,KAAKsQ,EAAA3S,EAAWsJ,UACjBgF,EAAMoC,UAAYrO,KAAKqO,UAAUnO,IAAK6R,GAAUA,EAAM1E,MAAMpF,EAAQiB,KAEjE9F,MAAM6N,cAAchF,EAAOhE,EAAQiB,UAIrC8I,UAAqDF,EAG9DrS,YAAYW,EAAS8I,EAAgBwC,EAA2CuG,EAAyBhK,EAAiB0D,GACtHvI,MAAMhD,EAAM8I,EAAQwC,GAAauG,GAAiBhK,EAAQ0D,GAC1D3L,KAAKkS,GAAcD,EAHvBvE,aAAsB,OAAO1N,KAAKkS,UAOzBC,UAAqCH,EAI9CvS,YAAYW,EAAS8I,EAAgBwC,EAA2CwC,EAAgC+D,EAAyBhK,EAAiB0D,GACtJvI,MAAMhD,EAAM8I,EAAQwC,EAAYuG,EAAgBhK,EAAQ0D,GACxD3L,KAAKsQ,EAAA3S,EAAWsJ,QAAUsJ,EAAa5M,WAAYuK,GAHvDA,mBAA4B,OAAOlO,KAAKsQ,EAAA3S,EAAWsJ,QAK5CxH,MAAmBW,EAAS8I,EAASlJ,KAAKkJ,OAAQjB,EAASjI,KAAKiI,GAAQ0D,EAAY3L,KAAK+Q,IAC5F,OAAO,IAAIoB,EAAS/R,EAAM8I,EAAQlJ,KAAKsQ,EAAA3S,EAAWwJ,UAAWnH,KAAKsQ,EAAA3S,EAAWsJ,QAASjH,KAAKkS,GAAoBjK,EAAQ0D,UAIlHyG,UAA8DN,EAIvErS,YAAYW,EAAS8I,EAAgBwC,EAA2CpG,EAA2B+I,EAAwBpG,EAAiB0D,GAChJvI,MAAMhD,EAAM8I,EAAQwC,EAAY2C,EAAWpG,EAAQ0D,GACnD3L,KAAKsQ,EAAA3S,EAAWyJ,MAAQmJ,EAAahN,UAAW+B,GAChDtF,KAAKqS,GAAqBjS,EAAKkF,QAAQ3E,OAAO,CAAC0R,EAAoBjR,EAAQkR,KAC/DD,EAAmBjR,GAAUkR,IAAQD,GAAsBA,EACpE5X,OAAOW,OAAO,OAPrBkK,cAAuB,OAAOtF,KAAKsQ,EAAA3S,EAAWyJ,MASvC3H,MAAmBW,EAAS8I,EAASlJ,KAAKkJ,OAAQjB,EAASjI,KAAKiI,GAAQ0D,EAAY3L,KAAK+Q,IAC5F,OAAO,IAAIqB,EAAahS,EAAM8I,EAAQlJ,KAAKsQ,EAAA3S,EAAWwJ,UAAWnH,KAAKsQ,EAAA3S,EAAWyJ,MAAOpH,KAAKqO,UAAWpG,EAAQ0D,UAI3G4G,UAAwBH,EACjC3S,YAAYW,EAAmB8I,EAAgBwC,EAA2CpG,EAA2B+I,EAAwBpG,EAAiB0D,GAC1JvI,MAAMhD,EAAM8I,EAAQwC,EAAYpG,EAAS+I,EAAWpG,EAAQ0D,GAEzDlM,MAA6BW,EAAS8I,EAASlJ,KAAKkJ,OAAQjB,EAASjI,KAAKiI,GAAQ0D,EAAY3L,KAAK+Q,IACtG,OAAO,IAAIwB,EACPnS,EACA8I,EACAlJ,KAAKsQ,EAAA3S,EAAWwJ,UAChBnH,KAAKsQ,EAAA3S,EAAWyJ,MAChBpH,KAAKqO,UACLpG,EAAQ0D,UAKP6G,UAAuBJ,EAEhClE,mBAA4B,OAAOlO,KAAKsQ,EAAA3S,EAAWsJ,QACnDxH,YAAYW,EAAkB8I,EAAgBwC,EAA2CpG,EAA2B4I,EAAgCG,EAAwBpG,EAAiB0D,GACzLvI,MAAMhD,EAAM8I,EAAQwC,EAAYpG,EAAS+I,EAAWpG,EAAQ0D,GAC5D3L,KAAKsQ,EAAA3S,EAAWsJ,QAAUsJ,EAAa5M,WAAYuK,GAEhDzO,MAA4BW,EAAS8I,EAASlJ,KAAKkJ,OAAQjB,EAASjI,KAAKiI,GAAQ0D,EAAY3L,KAAK+Q,IACrG,OAAO,IAAIyB,EACPpS,EACA8I,EACAlJ,KAAKsQ,EAAA3S,EAAWwJ,UAChBnH,KAAKsQ,EAAA3S,EAAWyJ,MAChBpH,KAAKsQ,EAAA3S,EAAWsJ,QAChBjH,KAAKqO,UACLpG,EAAQ0D,UAKP8G,UAAwC7B,EAWjDnR,YAAYW,EAAS8I,EAAgBsD,EAA2BvE,EAAiB0D,EAAoB+G,GACjGtP,MAAMhD,EAAM8I,EAAQjB,EAAQ0D,GAC5B3L,KAAK2S,GAAgBnG,EACrBxM,KAAK4S,GAAgBF,GAAgBD,EAAY/F,eAAeF,GATpEA,mBAA4B,OAAOxM,KAAK2S,GACxCD,mBAA4B,OAAO1S,KAAK4S,GACxCC,gBACI,OAAO7S,KAAK8S,KACL9S,KAAK8S,GAAa9S,KAAK2S,GAAczS,IAAI,EAAG8I,UAAWA,IAOlE2C,gBACI,IAAIA,EAAY3L,KAAK+Q,GAIrB,OAHmB,IAAfpF,IACA3L,KAAK+Q,GAAapF,EAAY3L,KAAK2S,GAAchS,OAAO,CAAClE,EAAGrC,IAAMqC,EAAIrC,EAAEuR,UAAW,IAEhFA,EAEJlM,MAAmBW,EAAS8I,EAASlJ,KAAKkJ,OAAQjB,EAASjI,KAAKiI,GAAQ0D,EAAY3L,KAAK+Q,IAC5F,OAAO,IAAI0B,EACPrS,EAAM8I,EACNlJ,KAAK2S,GAAczS,IAAK6S,GAAQA,EAAI9G,MAAM8G,EAAI/J,KAAKiD,MAAM7L,KACzD6H,EAAQ0D,EAAW3L,KAAK4S,IAGtBnT,cAAcwM,EAAahE,EAAgBiB,GACjD,MAAMqF,EAASvO,KAAK2S,GACdlG,EAAUzM,KAAK4S,GACfI,KACN,IAAK,IAAIC,GAAc,EAAGC,EAAc3E,EAAOrF,SAAU+J,EAAaC,GAAc,CAChF,MAAMnB,EAAQxD,EAAO0E,GACfE,EAAcpB,EAAM7I,OACpBkK,EAAc3G,EAAQwG,GAE5B,GAAIG,GAAenL,EAASiB,EAAU,SAEtC,GAAIjB,GAAUmL,EAAcD,EAAe,SAE3C,GAAIC,GAAenL,GAAWmL,EAAcD,GAAgBlL,EAASiB,EAAQ,CACzE8J,EAAYtE,KAAKqD,GACjB,SAGJ,MAAMlF,EAAQS,KAAKwD,IAAI,EAAG7I,EAASmL,GAC7BtG,EAAMD,EAAQS,KAAKC,IAAI4F,EAActG,EAAQ5E,EAASiB,EAAUkK,GACtEJ,EAAYtE,KAAKqD,EAAM1E,MAAMR,EAAOC,IAIxC,OAFAb,EAAM0G,GAAgBK,EACtB/G,EAAM2G,GAAgBH,EAAY/F,eAAesG,GAC1C/G,EAEXxM,sBAA0C4T,GACtC,MAAMC,EAAe,IAAI1P,YAAYyP,EAAanK,OAAS,GAC3D,IAAK,IAAIX,EAAQ,EAAGW,EAASoK,EAAapK,OAAQkK,EAAcE,EAAa,GAAK,IAAK/K,EAAQW,GAC3FoK,EAAa/K,GAAU6K,GAAeC,EAAa9K,EAAQ,GAAGW,OAElE,OAAOoK,kiBCxUf,IAAAtC,EAAApX,EAAA,SAuBa2Z,EAGT9T,YAAYuJ,GACRhJ,KAAKkJ,OAASF,EAAKE,OACnBlJ,KAAK0N,OAAS1E,EAAK0E,OAEhBjO,MAAMuJ,GACT,OAAO,IAAWhJ,KAAKkM,YAAalD,GAEjCvJ,UACH,SAEGA,IAAI8I,GACP,OAAOvI,KAAK0N,OAAOnF,GAEhB9I,IAAI8I,EAAevN,GACtB,OAAOgF,KAAK0N,OAAOnF,GAASvN,EAEzByE,UACH,OAAOO,KAAK0N,OAAO2D,SAAS,EAAGrR,KAAKkJ,QAEjCzJ,QAAQ+T,GACX,IAAIjL,EAAQ,EACZ,IAAK,IAAIvN,KAASgF,KAAM,CACpB,GAAIhF,IAAUwY,EAAU,OAAOjL,IAC7BA,EAGN,OAAQ,EAEL9I,CAAC3E,OAAOuR,YACX,OAAOrM,KAAK0N,OAAO2D,SAAS,EAAGrR,KAAKkJ,QAAQpO,OAAOuR,mBAI9CoH,EAEThU,YAAYuJ,GACRhJ,KAAKkJ,OAASF,EAAKE,OAEhBzJ,MAAMuJ,GACT,OAAO,IAAWhJ,KAAKkM,YAAalD,GAEjCvJ,UACH,SAEGA,OACAA,MAAQ,OAAO,KACfA,UACH,UAAWO,MAERP,QAAQ+T,GAEX,OAAkB,OAAXA,GAAmBxT,KAAKkJ,OAAS,EAAI,GAAK,EAE9CzJ,EAAE3E,OAAOuR,YACZ,IAAK,IAAI9D,GAAS,EAAGW,EAASlJ,KAAKkJ,SAAUX,EAAQW,SAC3C,YAKLwK,UAAiBH,EAE1B9T,YAAYuJ,GACR5F,MAAM4F,GACNhJ,KAAKiI,GAASe,EAAKf,GAEhBxI,UAAY,UAAWO,MACvBP,IAAI8I,GACP,MAAMoL,EAAe3T,KAAKiI,GAASM,EACnC,OAAO9N,OAAAuW,EAAA1U,EAAA7B,CAAQ,KAAM8N,EAAOvI,KAAK0N,OAAOiG,GAAgB,GAAIA,EAAe,GAExElU,IAAI8I,EAAevN,GACtBP,OAAAuW,EAAA/U,EAAAxB,CAAQuF,KAAK0N,OAAQ1N,KAAKiI,GAASM,EAAOvN,GAEvCyE,CAAC3E,OAAOuR,YACX,OAAO5R,OAAAuW,EAAA5W,EAAAK,CAAqBuF,KAAK0N,OAAQ1N,KAAKiI,GAAQjI,KAAKkJ,OAAQlJ,KAAK0N,OAAQsD,EAAA1U,UAI3EsX,UAA+CL,EAGxD9T,YAAYuJ,EAAe+D,GACvB3J,MAAM4F,GACNhJ,KAAK+M,KAAOA,GAAQ,EACpB/M,KAAKkD,UAAY8F,EAAK5I,KAAK8C,UAExBzD,MAAMuJ,GACT,OAAO,IAAWhJ,KAAKkM,YAAalD,EAAMhJ,KAAK+M,MAEzCtN,SAASiO,EAAqBnF,EAAewE,GACnD,OAAOW,EAAOnF,EAAQwE,GAEhBtN,GAASiO,EAAqBnF,EAAewE,EAAc/R,GACjE0S,EAAOnF,EAAQwE,GAAQ/R,EAEpByE,IAAI8I,GACP,OAAOvI,KAAK6T,SAAS7T,KAAK0N,OAAQnF,EAAOvI,KAAK+M,MAE3CtN,IAAI8I,EAAevN,GACtB,OAAOgF,KAAK8T,GAAS9T,KAAK0N,OAAQnF,EAAOvI,KAAK+M,KAAM/R,GAEjDyE,UACH,OAAOO,KAAK+M,KAAO,EACf,IAAI/M,KAAKkD,UAAUlD,MACnBA,KAAK0N,OAAO2D,SAAS,EAAGrR,KAAKkJ,QAE9BzJ,EAAE3E,OAAOuR,YACZ,MAAMzR,EAAMoF,KAAK6T,UACX9G,KAAEA,EAAIW,OAAEA,EAAMxE,OAAEA,GAAWlJ,KACjC,IAAK,IAAIuI,GAAS,IAAKA,EAAQW,SACrBtO,EAAI8S,EAAQnF,EAAOwE,UAKxBgH,UAA+CH,EACjDnU,UACH,OAAOO,KAAK0N,OAETjO,QAAQ+T,GACX,IAAIjL,EAAQ,EACZ,IAAK,IAAIvN,KAASgF,KAAM,CACpB,GAAIhF,EAAMgZ,MAAM,CAAC3Z,EAAWP,IAAcO,IAAMmZ,EAAO1Z,IAAO,OAAOyO,IACnEA,EAGN,OAAQ,EAEF9I,SAASiO,EAAqBnF,EAAewE,GACnD,OAAOW,EAAO2D,SAAS9I,EAAQwE,EAAMxE,EAAQwE,EAAOA,GAE9CtN,GAASiO,EAAqBnF,EAAewE,EAAc/R,GACjE0S,EAAOxM,IAAKlG,EAAsBqW,SAAS,EAAGtE,GAAOxE,EAAQwE,UAIxDkH,UAAoBL,EACtBnU,UAAY,OAAO,IAAIgF,aAAazE,MACjCP,SAASiO,EAAqBnF,EAAewE,GACnD,OAAQW,EAAOnF,EAAQwE,GAAQ,OAAS,MAElCtN,GAASiO,EAAqBnF,EAAewE,EAAc/R,GACjE0S,EAAOnF,EAAQwE,GAAiB,MAAR/R,EAAiB,aAIpCkZ,UAAoBN,EACtBnU,UAAY,UAAWO,MACpBP,SAASiO,EAAoBnF,EAAewE,GAClD,OA8GF,SAA0B/D,EAAkBT,GAAiB,OAAO4L,EAAwBC,EAAcpL,EAAMT,IAAhH,CA9GyBmF,EAAQnF,EAAQwE,GAEjCtN,GAASiO,EAAoBnF,EAAewE,EAAc/R,GAChE0S,EAAOnF,EAAQwE,GAAQ/R,EAAMqZ,UAAY,aAIpCC,UAA4BP,EAC9BtU,UAAY,UAAWO,MACpBP,SAASiO,EAAoBnF,EAAewE,GAClD,OAuGF,SAAsC/D,EAAkBT,GAAiB,OAAO4L,EAAwBI,EAA0BvL,EAAMT,IAAxI,CAvGqCmF,EAAQnF,EAAQwE,GAE7CtN,GAASiO,EAAoBnF,EAAewE,EAAc/R,GAChE,MAAMwZ,EAAUxZ,EAAMqZ,UACtB3G,EAAOnF,EAAQwE,GAASyH,EAAU,WAAc,EAChD9G,EAAOnF,EAAQwE,EAAOA,GAASyH,EAAU,WAAc,SAIlDC,UAAyBb,EAC3BnU,UAAY,UAAWO,MACpBP,SAASiO,EAAoBnF,EAAewE,GAClD,OAAOqH,EAAc1G,EAAQnF,EAAQwE,GAE/BtN,GAASiO,EAAoBnF,EAAewE,EAAcyH,GAChE9G,EAAOnF,EAAQwE,GAASyH,EAAU,MAAY,SAIzCE,UAA4Bd,EAC9BnU,UAAY,UAAWO,MACpBP,SAASiO,EAAoBnF,EAAewE,GAClD,OAuEF,SAA2B/D,EAAkBT,GAAiB,OAAO,IAAOS,EAAKT,GAvExEoM,CAAiBjH,EAAQnF,EAAQwE,GAElCtN,GAASiO,EAAoBnF,EAAewE,EAAcyH,GAChE9G,EAAOnF,EAAQwE,GAASyH,EAAU,IAAQ,SAIrCI,UAAiChB,EACnCnU,UAAY,UAAWO,MACpBP,SAASiO,EAAoBnF,EAAewE,GAClD,OAAOwH,EAA0B7G,EAAQnF,EAAQwE,GAE3CtN,GAASiO,EAAoBnF,EAAewE,EAAcyH,GAChE9G,EAAOnF,EAAQwE,GAASyH,EAAU,WAAc,EAChD9G,EAAOnF,EAAQwE,EAAOA,GAASyH,EAAU,WAAc,SAIlDK,UAAiCjB,EACnCnU,UAAY,UAAWO,MACpBP,SAASiO,EAAoBnF,EAAewE,GAClD,OAqDF,SAAoC/D,EAAkBT,GAAiB,OAAqBS,EAAKT,EAAQ,GAAK,IAAhC,YAA0CS,EAAKT,KAAW,GAAK,IAA7I,CArDmCmF,EAAQnF,EAAQwE,GAE3CtN,GAASiO,EAAoBnF,EAAewE,EAAcyH,GAChE9G,EAAOnF,EAAQwE,GAAUyH,EAAU,IAAQ,WAAc,EACzD9G,EAAOnF,EAAQwE,EAAOA,GAAUyH,EAAU,IAAQ,WAAc,SAI3DM,UAAgClB,EAClCnU,UAAY,UAAWO,MACpBP,SAASiO,EAAoBnF,EAAewE,GAClD,OA2CF,SAAmC/D,EAAkBT,GAAiB,OAAqBS,EAAKT,EAAQ,GAAK,IAAhC,YAA6CS,EAAKT,KAAW,GAAK,IA3CtIwM,CAAyBrH,EAAQnF,EAAQwE,GAE1CtN,GAASiO,EAAoBnF,EAAewE,EAAcyH,GAChE9G,EAAOnF,EAAQwE,GAAUyH,EAAU,IAAW,WAAc,EAC5D9G,EAAOnF,EAAQwE,EAAOA,GAAUyH,EAAU,IAAW,WAAc,SAI9DQ,UAA8BpB,EAChCnU,UAAY,UAAWO,MACpBP,SAASiO,EAAoBnF,EAAewE,GAClD,MAAMkI,EAAWvH,EAAOnF,EAAQwE,GAChC,OAAO,IAAIpJ,YAAYsR,EAAW,GAAgBA,EAAW,KAEvDxV,GAASiO,EAAoBnF,EAAewE,EAAc/R,GAChE0S,EAAOnF,EAAQwE,GAAoB,GAAX/R,EAAM,GAAYA,EAAM,GAAK,UAIhDka,UAAyBtB,EAC3BnU,UAAY,UAAWO,MACpBP,SAASiO,EAAoBnF,EAAewE,GAClD,OAAOW,EAAOnF,EAAQwE,GAAQ,GAExBtN,GAASiO,EAAoBnF,EAAewE,EAAc/R,GAChE0S,EAAOnF,EAAQwE,GAAiB,GAAR/R,EAAe0S,EAAOnF,EAAQwE,GAAQ,UAIzDoI,UAA0BvB,EAC5BnU,UAAY,UAAWO,MACpBP,SAASiO,EAAoBnF,EAAewE,GAClD,OAAOW,EAAOnF,EAAQwE,GAAQ,GAExBtN,GAASiO,EAAoBnF,EAAewE,EAAc/R,GAChE0S,EAAOnF,EAAQwE,GAAgC,GAAvBW,EAAOnF,EAAQwE,GAAe/R,EAAQ,IAKhE,SAAUoZ,EAAcpL,EAAkBT,GAAiB,OAAO,MAAWS,EAAKT,GAClF,SAAUgM,EAA0BvL,EAAkBT,GAAiB,OAAO,WAAcS,EAAKT,EAAQ,IAAOS,EAAKT,KAAW,GAIhI,SAAU4L,EAAwBK,GAAmB,OAAO,IAAItS,KAAKsS,kCC5N3E,SAAAY,EAAAC,EAAAC,EAAAzX,EAAA0X,GACA,WAAA1X,MAAA2X,UAAA,SAAAC,EAAAC,GACA,SAAAC,EAAA3a,GAAmC,IAAM4a,EAAAL,EAAAM,KAAA7a,IAA+B,MAAAuB,GAAYmZ,EAAAnZ,IACpF,SAAAuZ,EAAA9a,GAAkC,IAAM4a,EAAAL,EAAAQ,MAAA/a,IAAmC,MAAAuB,GAAYmZ,EAAAnZ,IACvF,SAAAqZ,EAAAI,GAA+BA,EAAAC,KAAAR,EAAAO,EAAAhb,OAAA,IAAA6C,EAAA,SAAA4X,GAAiEA,EAAAO,EAAAhb,SAAyBkb,KAAAP,EAAAG,GACzHF,GAAAL,IAAAY,MAAAd,EAAAC,QAAAO,UAsEA,SAAAO,EAAAha,GACA,OAAA4D,gBAAAoW,GAAApW,KAAA5D,IAAA4D,MAAA,IAAAoW,EAAAha,GAGA,SAAAia,EAAAhB,EAAAC,EAAAC,GACA,IAAAza,OAAAwb,cAAA,UAAAtH,UAAA,wCACA,IAAAlV,EAAAuC,EAAAkZ,EAAAY,MAAAd,EAAAC,OAAApX,KACA,OAAApE,KAAiByc,EAAA,QAAAA,EAAA,SAAAA,EAAA,UAAAzc,EAAAgB,OAAAwb,eAAA,WAAsF,OAAAtW,MAAelG,EACtH,SAAAyc,EAAAhb,GAAsBc,EAAAd,KAAAzB,EAAAyB,GAAA,SAAAa,GAAgC,WAAAoZ,QAAA,SAAAxZ,EAAAM,GAAqC4B,EAAAwQ,MAAAnT,EAAAa,EAAAJ,EAAAM,IAAA,GAAAka,EAAAjb,EAAAa,OAC3F,SAAAoa,EAAAjb,EAAAa,GAA2B,KAC3BvB,EADiCwB,EAAAd,GAAAa,IACXpB,iBAAAob,EAAAZ,QAAAC,QAAA5a,EAAAG,MAAAoB,GAAA8Z,KAAAO,EAAAf,GAAAgB,EAAAxY,EAAA,MAAArD,GAD4B,MAAA0B,GAAYma,EAAAxY,EAAA,MAAA3B,GAC9D,IAAA1B,EACA,SAAA4b,EAAAzb,GAA6Bwb,EAAA,OAAAxb,GAC7B,SAAA0a,EAAA1a,GAA4Bwb,EAAA,QAAAxb,GAC5B,SAAA0b,EAAAza,EAAAG,GAA2BH,EAAAG,GAAA8B,EAAAyY,QAAAzY,EAAAgL,QAAAsN,EAAAtY,EAAA,MAAAA,EAAA,QAG3B,SAAA0Y,EAAApc,GACA,IAAAV,EAAA+B,EACA,OAAA/B,KAAiByc,EAAA,QAAAA,EAAA,iBAAAha,GAA4C,MAAAA,IAAWga,EAAA,UAAAzc,EAAAgB,OAAAuR,UAAA,WAAqD,OAAArM,MAAelG,EAC5I,SAAAyc,EAAAhb,EAAAU,GAAyBnC,EAAAyB,GAAAf,EAAAe,GAAA,SAAAa,GAA6B,OAAAP,OAAoBb,MAAAob,EAAA5b,EAAAe,GAAAa,IAAA6Z,KAAA,WAAA1a,GAAgDU,IAAAG,MAAkBH,GAG5I,SAAA4a,EAAArc,GACA,IAAAM,OAAAwb,cAAA,UAAAtH,UAAA,wCACA,IAAAlV,EAAAK,EAAAK,EAAAM,OAAAwb,eACA,OAAAnc,IAAAD,KAAAM,MA3DA,SAAAA,GACA,IAAAL,EAAA,mBAAAW,QAAAN,EAAAM,OAAAuR,UAAAvS,EAAA,EACA,OAAAK,IAAAD,KAAAM,IAEAqb,KAAA,WAEA,OADArb,GAAAV,GAAAU,EAAA0O,SAAA1O,WACoBQ,MAAAR,KAAAV,KAAAmc,MAAAzb,KAqDpBsc,CAAAtc,GAAAV,KAA2Gyc,EAAA,QAAAA,EAAA,SAAAA,EAAA,UAAAzc,EAAAgB,OAAAwb,eAAA,WAAsF,OAAAtW,MAAelG,GAChN,SAAAyc,EAAAhb,GAAsBzB,EAAAyB,GAAAf,EAAAe,IAAA,SAAAa,GAA8B,WAAAoZ,QAAA,SAAAC,EAAAC,aACpDD,EAAAC,EAAArb,EAAA+B,GAA4CoZ,QAAAC,QAAArZ,GAAA8Z,KAAA,SAAA9Z,GAAsCqZ,GAAUza,MAAAoB,EAAA6Z,KAAA5b,KAAwBqb,GADhEA,CAAgDD,EAAAC,GAAAtZ,EAAA5B,EAAAe,GAAAa,IAAA6Z,KAAA7Z,EAAApB,WDuHzBwZ,iKCvHyBxZ,wQCtKpGsV,EAAA1W,EAAA,SAsBamd,EACTtX,YAAmBuX,EAAuCC,EAAmCC,GAA1ElX,KAAAgX,KAAuChX,KAAAiX,KAAmCjX,KAAAkX,gBAGpFC,EAGT1X,YAAmB2X,EAAwB/W,EAA2B4H,GAAnDjI,KAAAoX,KACfpX,KAAKiI,GAA2B,iBAAXA,EAAsBA,EAASA,EAAO/B,IAC3DlG,KAAKK,WAAmC,iBAAfA,EAA0BA,EAAaA,EAAW6F,WAItEmR,EAIT5X,YAAYG,EAA0BS,EAA2BE,GAC7DP,KAAKJ,EAAUA,EACfI,KAAKO,WAAaA,EAClBP,KAAKK,WAAmC,iBAAfA,EAA0BA,EAAaA,EAAW6F,IAE/EzG,UAAgBtF,GAA2B,OAAOA,EAAEoG,aAAe+P,EAAA5S,EAAc8B,OACjFC,UAAqBtF,GAAwC,OAAOA,EAAEoG,aAAe+P,EAAA5S,EAAc4Z,YACnG7X,UAAyBtF,GAAoC,OAAOA,EAAEoG,aAAe+P,EAAA5S,EAAc6Z,uBAG1FC,UAA4BH,EAIrC5X,YAAYG,EAA0BsJ,EAAuBuO,EAAwBC,EAA2BrX,YACxGA,IACAA,EAAaqX,EAAQ/W,OAAO,CAAC7E,EAAGQ,IAAM7B,OAAAuW,EAAAhV,EAAAvB,CAAMqB,EAAIQ,EAAE4M,QAAU5M,EAAE2L,GAASnM,GAAI,GAAI,IAEnFsH,MAAMxD,EAASS,EAAYiQ,EAAA5S,EAAc4Z,aACzCtX,KAAKyX,GAAQA,EACbzX,KAAK0X,GAAUA,EACf1X,KAAKkJ,OAA2B,iBAAXA,EAAsBA,EAASA,EAAOhD,WAItDqR,UAAwBF,EAIjC5X,YAAYG,EAA0BoJ,EAA2BlD,EAAmB6R,MAChFvU,MAAMxD,EAASoJ,EAAK3I,WAAYiQ,EAAA5S,EAAc6Z,iBAC9CvX,KAAK2X,QAAUA,EACf3X,KAAKgJ,KAAOA,EACZhJ,KAAK8F,GAAmB,iBAAPA,EAAkBA,EAAKA,EAAGI,IAGxCzG,YAAiB,OAAO8X,EAAgBK,KAC/CC,SAAsC,OAAO7X,KAAKgJ,KAAKyO,GACvDK,SAAyC,OAAO9X,KAAKgJ,KAAK0O,IAH3CH,EAAAK,GAAqB,QAM3BG,EAGTtY,YAAYwI,EAAuBiB,GAC/BlJ,KAAKiI,GAA2B,iBAAXA,EAAsBA,EAASA,EAAO/B,IAC3DlG,KAAKkJ,OAA2B,iBAAXA,EAAsBA,EAASA,EAAOhD,WAItD8R,EAGTvY,YAAYyJ,EAAuByC,GAC/B3L,KAAKkJ,OAA2B,iBAAXA,EAAsBA,EAASA,EAAOhD,IAC3DlG,KAAK2L,UAAiC,iBAAdA,EAAyBA,EAAYA,EAAUzF,oCC3EzE,SAAU+R,EAAMjd,EAAekd,GACjC,OAAOld,EAGL,SAAkBA,EAAekd,GACnC,OAAQld,EAAQkd,GAAc,EAAI,EAAIA,EAAYld,EAAQkd,EADxD,CAHqBld,EAAOkd,GAO5B,SAAUC,EAAQC,EAAYC,EAAgBC,EAAcC,GAC9D,OAA6B,IAArBD,EAAO,GAAKC,GAGlB,SAAUC,EAAOJ,EAAYC,EAAgBC,EAAcC,GAC7D,OAAQD,EAAO,GAAKC,IAAQA,EAG1B,SAAUE,EAAQ/P,EAAmBH,EAAevN,GACtD,OAAOA,KACA0N,EAAMH,GAAS,IAAQ,GAAMA,EAAQ,SACtCG,EAAMH,GAAS,MAAQ,GAAMA,EAAQ,QAGzC,SAAUmQ,EAAUhL,GACtB,IAAInS,EAAI,EAAGzB,EAAI,EACX8G,KACA2X,EAAM,EAAGD,EAAO,EACpB,IAAK,MAAMtd,KAAS0S,EAChB1S,IAAUsd,GAAQ,GAAKC,GACT,KAARA,IACF3X,EAAG9G,KAAOwe,EACVA,EAAOC,EAAM,GAIrB,IADU,IAANze,GAAWye,EAAM,KAAK3X,EAAG9G,KAAOwe,GAChCxe,EAAI,IAAMyB,EAAIzB,EAAI,EAAIA,EAAI,GAC1B,GAAK8G,EAAG9G,GAAK,UAAcA,EAAIyB,GAEnC,OAAO,IAAIiI,WAAW5C,GAGpB,SAAW+X,EAAejQ,EAAmBmE,EAAe3D,EAAgB0P,EAClDhe,GAC5B,IAAI2d,EAAM1L,EAAQ,EACdgM,EAAYhM,GAAS,EACrBtE,EAAQ,EAAGuQ,EAAY5P,EAC3B,KAAO4P,EAAY,EAAGP,EAAM,EAAG,CAC3B,IAAID,EAAO5P,EAAMmQ,KACjB,SACUje,EAAIge,EAASrQ,IAAS+P,EAAMC,WAC3BO,EAAY,KAAOP,EAAM,IAUtC,SAAUQ,EAAiB/P,EAAkBgQ,EAAaC,GAC5D,GAAIA,EAAMD,GAAO,EAAK,OAAO,EAE7B,GAAIC,EAAMD,EAAM,EAAG,CACf,IAAIE,EAAM,EACV,IAAK,MAAMX,KAAOI,EAAY3P,EAAMgQ,EAAKC,EAAMD,EAAKhQ,EAAMwP,GACtDU,GAAOX,EAEX,OAAOW,EAGX,MAAMC,EAAYF,GAAO,GAAK,EAExBG,EAAYJ,GAAOA,EAAM,GAAM,EAAI,EAAI,EAAIA,EAAM,GACvD,OAEID,EAAiB/P,EAAMgQ,EAAKI,GAE5BL,EAAiB/P,EAAMmQ,EAAWF,GAMpC,SAAuB/H,EAAiBtI,EAAqB8H,GAC/D,IAAI2I,EAAM,EAAGC,EAAoB,EAAd1Q,EACnB,MAAMyC,EAAO,IAAIkO,SAASrI,EAAIvI,OAAQuI,EAAItI,WAAYsI,EAAIR,YACpD8I,WAAO9I,EAAwBQ,EAAIR,WAAa4I,EAAM5I,EAC5D,KAAO8I,EAAMF,GAAO,GAChBD,GAAOI,EAAcpO,EAAKqO,UAAUJ,IACpCA,GAAO,EAEX,KAAOE,EAAMF,GAAO,GAChBD,GAAOI,EAAcpO,EAAKsO,UAAUL,IACpCA,GAAO,EAEX,KAAOE,EAAMF,GAAO,GAChBD,GAAOI,EAAcpO,EAAKuO,SAASN,IACnCA,GAAO,EAEX,OAAOD,EAhBL,CAJerQ,EAAMoQ,GAAa,EAAID,EAAYC,GAAc,GAuBhE,SAAUK,EAAcI,GAC1B,IAAI/f,EAAa,EAAT+f,EAGR,OAAyC,WADzC/f,GAAS,WADTA,GAAUA,IAAM,EAAK,cACIA,IAAM,EAAK,aACrBA,IAAM,GAAM,aAA8B,GAAAe,EAAAR,EAAAkB,EAAA,sBAAAgB,IAAA1B,EAAAR,EAAAkB,EAAA,sBAAAzB,IAAAe,EAAAR,EAAAkB,EAAA,sBAAAwT,IAAAlU,EAAAR,EAAAkB,EAAA,sBAAAf,IAAAK,EAAAR,EAAAkB,EAAA,sBAAAnB,IAAAS,EAAAR,EAAAkB,EAAA,sBAAAQ,KAAA,SAAArC,EAAA6B,EAAAV,GAAA,iBAAA0B,EAAA1B,EAAA,IAAAA,EAAAR,EAAAkB,EAAA,sBAAAgB,EAAAP,IAAA,IAAAlC,EAAAe,EAAA,IAAAA,EAAAR,EAAAkB,EAAA,sBAAAzB,EAAAkC,IAAA,IAAAF,EAAAjB,EAAA,IAAAA,EAAAR,EAAAkB,EAAA,sBAAAO,EAAAE,IAAA,IAAA+S,EAAAlU,EAAA,IAAAA,EAAAR,EAAAkB,EAAA,sBAAAwT,EAAA3U,IAAAS,EAAAR,EAAAkB,EAAA,sBAAAwT,EAAAzS,IAAAzB,EAAAR,EAAAkB,EAAA,sBAAAwT,EAAA/S,IAAAnB,EAAAR,EAAAkB,EAAA,sBAAAwT,EAAA1U,IAAA,IAAAG,EAAAK,EAAA,IAAAA,EAAAR,EAAAkB,EAAA,sBAAAf,EAAA+B,IAAA1B,EAAAR,EAAAkB,EAAA,sBAAAf,EAAAwB,IAAAnB,EAAAR,EAAAkB,EAAA,sBAAAf,EAAAJ,IAAAS,EAAAR,EAAAkB,EAAA,sBAAAf,EAAAH,IAAAQ,EAAAR,EAAAkB,EAAA,sBAAAf,EAAA8B,IAAA,IAAAlC,EAAAS,EAAA,GAAAA,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAAmC,IAAA1B,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAAiD,IAAAxC,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAA4B,IAAAnB,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAAwD,IAAA/C,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAAC,IAAAQ,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAA6B,IAAApB,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAAkC,IAAAzB,EAAAR,EAAAkB,EAAA,sBAAAnB,MAAAS,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAA2B,IAAAlB,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAAN,IAAAe,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAAiC,IAAAxB,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAAL,IAAAc,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAAyB,IAAAhB,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAAmB,IAAAV,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAAD,IAAAU,EAAAR,EAAAkB,EAAA,sBAAAnB,EAAAI,KAAA,SAAAd,EAAA6B,EAAAV,GAAA,aAAAA,EAAAR,EAAAkB,EAAA,sBAAAnB,IAAAS,EAAAR,EAAAkB,EAAA,sBAAAQ,IC7H7DnC,EAAAS,EAAA+L,EAAA,sBAAA0T,IAiBA,MAAMC,EAAa,MAEnB,SAASC,EAAShf,GAId,OAHIA,EAAQ,IACRA,EAAQ,WAAaA,EAAQ,QAErBA,EAAMif,SAAS,MAG/B,MAAMC,EAAsB,EACtBC,GAAgB,EACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,WAETC,EACT3a,YAAuBkJ,GAAA3I,KAAA2I,SAEvBlJ,OAAiB,OAAOO,KAAK2I,OAAO,GACpClJ,MAAiB,OAAOO,KAAK2I,OAAO,GAE1BlJ,OAAO4a,GAGb,MAAMtd,EAAI,IAAI6G,aACV5D,KAAK2I,OAAO,KAAO,GACF,MAAjB3I,KAAK2I,OAAO,GACZ3I,KAAK2I,OAAO,KAAO,GACF,MAAjB3I,KAAK2I,OAAO,KAGVhL,EAAI,IAAIiG,aACVyW,EAAM1R,OAAO,KAAO,GACF,MAAlB0R,EAAM1R,OAAO,GACb0R,EAAM1R,OAAO,KAAO,GACF,MAAlB0R,EAAM1R,OAAO,KAGjB,IAAI2R,EAAUvd,EAAE,GAAKY,EAAE,GACvBqC,KAAK2I,OAAO,GAAe,MAAV2R,EAEjB,IAAIpB,EAAMoB,IAAY,GAgBtB,OAbApB,GADAoB,EAAUvd,EAAE,GAAKY,EAAE,GAInBub,GADAoB,EAAWvd,EAAE,GAAKY,EAAE,KAAQ,EAG5BqC,KAAK2I,OAAO,IAAMuQ,GAAO,GAEzBlZ,KAAK2I,OAAO,GAAMuQ,IAAQ,EAAIoB,EAAUP,EAAa,EAErD/Z,KAAK2I,OAAO,IAAMuQ,IAAQ,GAC1BlZ,KAAK2I,OAAO,IAAM5L,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GACvDqC,KAAK2I,OAAO,IAAO5L,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,GAAKZ,EAAE,GAAKY,EAAE,IAAO,GAEtEqC,KAGDP,MAAM4a,GACZ,MAAMnB,EAAOlZ,KAAK2I,OAAO,GAAK0R,EAAM1R,OAAO,KAAQ,EACnD3I,KAAK2I,OAAO,IAAM0R,EAAM1R,OAAO,GAC3BuQ,EAAOlZ,KAAK2I,OAAO,KAAO,KAC1B3I,KAAK2I,OAAO,GAEhB3I,KAAK2I,OAAO,GAAKuQ,EAGrBzZ,SAAS4a,GACL,OAAOra,KAAK2I,OAAO,GAAK0R,EAAM1R,OAAO,IAChC3I,KAAK2I,OAAO,KAAO0R,EAAM1R,OAAO,IAAM3I,KAAK2I,OAAO,GAAK0R,EAAM1R,OAAO,GAG7ElJ,OAAO4a,GACH,OAAOra,KAAK2I,OAAO,KAAO0R,EAAM1R,OAAO,IAAM3I,KAAK2I,OAAO,IAAM0R,EAAM1R,OAAO,GAGhFlJ,YAAY4a,GACR,OAAOA,EAAME,SAASva,MAG1BP,MACI,SAAUua,EAASha,KAAK2I,OAAO,OAAOqR,EAASha,KAAK2I,OAAO,aAItDtE,UAAe+V,EACxB3a,MAAM4a,GAEF,OADAra,KAAKwa,OAAOH,GACLra,KAGXP,KAAK4a,GAED,OADAra,KAAKya,MAAMJ,GACJra,KAGXP,gBAAgBib,EAAcC,GAE1B,OADW,IAAItW,EAAO,IAAIT,YAAY8W,EAAK/R,SAC/BiS,MAAMD,GAGtBlb,WAAWib,EAAcC,GAErB,OADW,IAAItW,EAAO,IAAIT,YAAY8W,EAAK/R,SAC/BkS,KAAKF,UAIZ1W,UAAcmW,EACvB3a,SAKI,OAJAO,KAAK2I,OAAO,GAAuB,GAAjB3I,KAAK2I,OAAO,GAC9B3I,KAAK2I,OAAO,IAAM3I,KAAK2I,OAAO,GAER,GAAlB3I,KAAK2I,OAAO,MAAa3I,KAAK2I,OAAO,GAClC3I,KAGXP,MAAM4a,GAEF,OADAra,KAAKwa,OAAOH,GACLra,KAGXP,KAAK4a,GAED,OADAra,KAAKya,MAAMJ,GACJra,KAGXP,SAAS4a,GAEL,MAAMS,EAAY9a,KAAK2I,OAAO,IAAM,EAC9BoS,EAAaV,EAAM1R,OAAO,IAAM,EACtC,OAAOmS,EAAYC,GACdD,IAAcC,GAAc/a,KAAK2I,OAAO,GAAK0R,EAAM1R,OAAO,GAGnElJ,kBAAkBub,EAAaC,EAAa,IAAIrX,YAAY,IAExD,MAAMsX,EAASF,EAAIG,WAAW,KACxBjS,EAAS8R,EAAI9R,OAEnB,IAAIkS,EAAM,IAAInX,EAAMgX,GACpB,IAAK,IAAII,EAAOH,EAAS,EAAI,EAAGG,EAAOnS,GAAS,CAC5C,MAAMoS,EAAQpB,EAAsBhR,EAASmS,EAC/BnB,EAAsBhR,EAASmS,EACvC5M,EAAQ,IAAIxK,EAAM,IAAIL,aAAa2X,SAASP,EAAIQ,OAAOH,EAAMC,GAAQ,IAAK,KAC1EG,EAAW,IAAIxX,EAAM,IAAIL,aAAauW,EAAamB,GAAQ,KAEjEF,EAAIR,MAAMa,GACVL,EAAIP,KAAKpM,GAET4M,GAAQC,EAGZ,OAAOJ,EAASE,EAAIF,SAAWE,EAGnC3b,gBAAgBib,EAAaC,GAEzB,OADW,IAAI1W,EAAM,IAAIL,YAAY8W,EAAK/R,SAC9BiS,MAAMD,GAGtBlb,WAAWib,EAAaC,GAEpB,OADW,IAAI1W,EAAM,IAAIL,YAAY8W,EAAK/R,SAC9BkS,KAAKF,UAIZb,EACTra,YAAqBkJ,GAAA3I,KAAA2I,SAOrBlJ,OACI,OAAO,IAAIwE,EAAM,IAAIL,YAAY5D,KAAK2I,OAAOA,OAAQ3I,KAAK2I,OAAOC,WAAa,EAAG,IAGrFnJ,MACI,OAAO,IAAIwE,EAAM,IAAIL,YAAY5D,KAAK2I,OAAOA,OAAQ3I,KAAK2I,OAAOC,WAAY,IAGjFnJ,SASI,OARAO,KAAK2I,OAAO,GAAuB,GAAjB3I,KAAK2I,OAAO,GAC9B3I,KAAK2I,OAAO,IAAM3I,KAAK2I,OAAO,GAC9B3I,KAAK2I,OAAO,IAAM3I,KAAK2I,OAAO,GAC9B3I,KAAK2I,OAAO,IAAM3I,KAAK2I,OAAO,GAER,GAAlB3I,KAAK2I,OAAO,MAAa3I,KAAK2I,OAAO,GACnB,GAAlB3I,KAAK2I,OAAO,MAAa3I,KAAK2I,OAAO,GACnB,GAAlB3I,KAAK2I,OAAO,MAAa3I,KAAK2I,OAAO,GAClC3I,KAGXP,MAAM4a,GAGF,MAAMqB,EAAK,IAAIrX,EAAO,IAAIT,aAAa5D,KAAK2I,OAAO,GAAK,KAClDgT,EAAK,IAAItX,EAAO,IAAIT,aAAa5D,KAAK2I,OAAO,GAAK,KAClDiT,EAAK,IAAIvX,EAAO,IAAIT,aAAa5D,KAAK2I,OAAO,GAAK,KAClDkT,EAAK,IAAIxX,EAAO,IAAIT,aAAa5D,KAAK2I,OAAO,GAAK,KAElDmT,EAAK,IAAIzX,EAAO,IAAIT,aAAayW,EAAM1R,OAAO,GAAI,KAClDoT,EAAK,IAAI1X,EAAO,IAAIT,aAAayW,EAAM1R,OAAO,GAAI,KAClDqT,EAAK,IAAI3X,EAAO,IAAIT,aAAayW,EAAM1R,OAAO,GAAI,KAClDsT,EAAK,IAAI5X,EAAO,IAAIT,aAAayW,EAAM1R,OAAO,GAAI,KAExD,IAAI2R,EAAUjW,EAAO6X,SAASL,EAAII,GAClCjc,KAAK2I,OAAO,GAAK2R,EAAQpU,MAEzB,IAAIgT,EAAM,IAAI7U,EAAO,IAAIT,aAAa0W,EAAQ6B,OAAQ,KAuBtD,OArBA7B,EAAUjW,EAAO6X,SAASN,EAAIK,GAC9B/C,EAAI2B,KAAKP,GAETA,EAAUjW,EAAO6X,SAASL,EAAIG,GAC9B9C,EAAI2B,KAAKP,GAETta,KAAK2I,OAAO,GAAKuQ,EAAIhT,MAErBlG,KAAK2I,OAAO,GAAMuQ,EAAIqB,SAASD,GAAW,EAAI,EAE9Cta,KAAK2I,OAAO,GAAKuQ,EAAIiD,OACV,IAAI9X,EAAO,IAAIT,YAAY5D,KAAK2I,OAAOA,OAAQ3I,KAAK2I,OAAOC,WAAa,EAAG,IAEjFiS,KAAKxW,EAAO6X,SAASP,EAAIM,IACzBpB,KAAKxW,EAAO6X,SAASN,EAAII,IACzBnB,KAAKxW,EAAO6X,SAASL,EAAIE,IAC9B/b,KAAK2I,OAAO,IAAMtE,EAAO6X,SAASR,EAAIO,GACrBpB,KAAKxW,EAAO6X,SAASP,EAAIK,IACzBnB,KAAKxW,EAAO6X,SAASN,EAAIG,IACzBlB,KAAKxW,EAAO6X,SAASL,EAAIC,IAAK5V,MAExClG,KAGXP,KAAK4a,GACD,IAAI+B,EAAO,IAAIxY,YAAY,GAqB3B,OApBAwY,EAAK,GAAMpc,KAAK2I,OAAO,GAAK0R,EAAM1R,OAAO,KAAQ,EACjDyT,EAAK,GAAMpc,KAAK2I,OAAO,GAAK0R,EAAM1R,OAAO,KAAQ,EACjDyT,EAAK,GAAMpc,KAAK2I,OAAO,GAAK0R,EAAM1R,OAAO,KAAQ,EACjDyT,EAAK,GAAMpc,KAAK2I,OAAO,GAAK0R,EAAM1R,OAAO,KAAQ,EAE7CyT,EAAK,GAAMpc,KAAK2I,OAAO,KAAO,KAC5ByT,EAAK,GAEPA,EAAK,GAAMpc,KAAK2I,OAAO,KAAO,KAC5ByT,EAAK,GAEPA,EAAK,GAAMpc,KAAK2I,OAAO,KAAO,KAC5ByT,EAAK,GAGXpc,KAAK2I,OAAO,GAAKyT,EAAK,GACtBpc,KAAK2I,OAAO,GAAKyT,EAAK,GACtBpc,KAAK2I,OAAO,GAAKyT,EAAK,GACtBpc,KAAK2I,OAAO,GAAKyT,EAAK,GAEfpc,KAGXP,MACI,SAAUua,EAASha,KAAK2I,OAAO,OAAOqR,EAASha,KAAK2I,OAAO,OAAOqR,EAASha,KAAK2I,OAAO,OAAOqR,EAASha,KAAK2I,OAAO,MAGvHlJ,gBAAgBib,EAAcC,GAE1B,OADW,IAAIb,EAAO,IAAIlW,YAAY8W,EAAK/R,SAC/BiS,MAAMD,GAGtBlb,WAAWib,EAAcC,GAErB,OADW,IAAIb,EAAO,IAAIlW,YAAY8W,EAAK/R,SAC/BkS,KAAKF,GAGrBlb,kBAAkBub,EAAaC,EAAa,IAAIrX,YAAY,IAExD,MAAMsX,EAASF,EAAIG,WAAW,KACxBjS,EAAS8R,EAAI9R,OAEnB,IAAIkS,EAAM,IAAItB,EAAOmB,GACrB,IAAK,IAAII,EAAOH,EAAS,EAAI,EAAGG,EAAOnS,GAAS,CAC5C,MAAMoS,EAAQpB,EAAsBhR,EAASmS,EAC/BnB,EAAsBhR,EAASmS,EACvC5M,EAAQ,IAAIqL,EAAO,IAAIlW,aAAa2X,SAASP,EAAIQ,OAAOH,EAAMC,GAAQ,IAAK,EAAG,EAAG,KACjFG,EAAW,IAAI3B,EAAO,IAAIlW,aAAauW,EAAamB,GAAQ,EAAG,EAAG,KAExEF,EAAIR,MAAMa,GACVL,EAAIP,KAAKpM,GAET4M,GAAQC,EAGZ,OAAOJ,EAASE,EAAIF,SAAWE,kOCzShC,MAAMiB,EAAU,EAEVC,EAAQ,IAAI9Y,WAAW+Y,GAEpC,IAAK,IAAIziB,EAAI,EAAGA,EAAIyiB,EAAkBziB,GAAK,EACvCwiB,EAAMxiB,GAJe,SAIA0iB,WAAW1iB,GAG9B,SAAU2iB,EAAyB9T,EAAoBJ,EAAQ,GACjE,IAAK,IAAIzO,GAAK,EAAGyB,EAAI+gB,EAAMpT,SAAUpP,EAAIyB,GACrC,GAAI+gB,EAAMxiB,KAAO6O,EAAOJ,EAAQzO,GAC5B,SAGR,SAGE,SAAU4iB,EAAiBjV,GAC7B,IAAgCkV,EAAsBC,EAAlDC,EAAapV,EAAGqV,KACpB,QAAKD,EAAaE,IACZN,EAAyBhV,EAAGiB,KAAS,KACrC+T,EAAyBhV,EAAGiB,KAASmU,EAAaG,KAEnDL,EAAelV,EAAGG,GAAUgV,EAAeC,EAAaI,IAAoB,GAC5EN,EAAeC,EAAeC,GAMhC,MAAMG,EAAcV,EAAMpT,OACpB+T,EAAkBD,EAAcX,EAChCU,EAAkC,EAAdC,EAAkBX,gGCpDnD,IAAAa,EAAAtjB,EAAA,SA4BsBujB,EAClB1d,GAAMW,GACF,OAAOA,EAAKgd,mBAAqBhd,EAAKgd,kBAAkBpd,OAAS,KAErEP,GAAU4d,GACN,OAAOA,EAAMnd,IAAKE,GAASJ,KAAKsd,GAAMld,IAqB1CX,uBAA2CsD,EAAsB3C,GAC7D,OAAQA,EAAKiB,GACT,KAAK6b,EAAAnf,EAAK4D,KAAiB,OAAOoB,EAAQwa,IAAwBxa,EAAQwa,GAAUnd,GACpF,KAAK8c,EAAAnf,EAAK6D,IAAiB,OAAOmB,EAAQya,IAAwBza,EAAQya,GAASpd,GACnF,KAAK8c,EAAAnf,EAAK8D,MAAiB,OAAOkB,EAAQ0a,IAAwB1a,EAAQ0a,GAAWrd,GACrF,KAAK8c,EAAAnf,EAAK+D,OAAiB,OAAOiB,EAAQ2a,IAAwB3a,EAAQ2a,GAAYtd,GACtF,KAAK8c,EAAAnf,EAAKgE,KAAiB,OAAOgB,EAAQ4a,IAAwB5a,EAAQ4a,GAAUvd,GACpF,KAAK8c,EAAAnf,EAAKiE,KAAiB,OAAOe,EAAQ6a,IAAwB7a,EAAQ6a,GAAUxd,GACpF,KAAK8c,EAAAnf,EAAKkE,QAAiB,OAAOc,EAAQ8a,IAAwB9a,EAAQ8a,GAAazd,GACvF,KAAK8c,EAAAnf,EAAKmE,KAAiB,OAAOa,EAAQ+a,IAAwB/a,EAAQ+a,GAAU1d,GACpF,KAAK8c,EAAAnf,EAAKoE,KAAiB,OAAOY,EAAQgb,IAAwBhb,EAAQgb,GAAU3d,GACpF,KAAK8c,EAAAnf,EAAKqE,UAAiB,OAAOW,EAAQib,IAAwBjb,EAAQib,GAAe5d,GACzF,KAAK8c,EAAAnf,EAAKsE,SAAiB,OAAOU,EAAQkb,IAAwBlb,EAAQkb,GAAc7d,GACxF,KAAK8c,EAAAnf,EAAKuE,KAAiB,OAAOS,EAAQmb,IAAwBnb,EAAQmb,GAAU9d,GACpF,KAAK8c,EAAAnf,EAAKwE,OAAiB,OAAOQ,EAAQob,IAAwBpb,EAAQob,GAAY/d,GACtF,KAAK8c,EAAAnf,EAAKyE,MAAiB,OAAOO,EAAQqb,IAAwBrb,EAAQqb,GAAWhe,GACrF,KAAK8c,EAAAnf,EAAK0E,gBAAiB,OAAOM,EAAQsb,IAAwBtb,EAAQsb,GAAqBje,GAC/F,KAAK8c,EAAAnf,EAAK2E,cAAiB,OAAOK,EAAQub,IAAwBvb,EAAQub,GAAmBle,GAC7F,KAAK8c,EAAAnf,EAAKgC,IAAiB,OAAOgD,EAAQwb,IAAwBxb,EAAQwb,GAASne,GACnF,KAAK8c,EAAAnf,EAAK4E,WAAiB,OAAOI,EAAQyb,IAAwBzb,EAAQyb,GAAgBpe,GAC1F,QAAS,OAAO,aAKNqe,EAClBhf,GAAMif,GACF,OAAOA,EAAOC,qBAAuBD,EAAOC,oBAAoB3e,OAAS,KAE7EP,GAAUQ,GACN,OAAOA,EAAQC,IAAKwe,GAAW1e,KAAKsd,GAAMoB,IAqB9Cjf,uBAA2CsD,EAAwB3C,EAASse,GACxE,OAAQte,EAAKiB,GACT,KAAK6b,EAAAnf,EAAK4D,KAAiB,OAAOoB,EAAQwa,IAAwBxa,EAAQwa,GAAUmB,GACpF,KAAKxB,EAAAnf,EAAK6D,IAAiB,OAAOmB,EAAQya,IAAwBza,EAAQya,GAASkB,GACnF,KAAKxB,EAAAnf,EAAK8D,MAAiB,OAAOkB,EAAQ0a,IAAwB1a,EAAQ0a,GAAWiB,GACrF,KAAKxB,EAAAnf,EAAK+D,OAAiB,OAAOiB,EAAQ2a,IAAwB3a,EAAQ2a,GAAYgB,GACtF,KAAKxB,EAAAnf,EAAKgE,KAAiB,OAAOgB,EAAQ4a,IAAwB5a,EAAQ4a,GAAUe,GACpF,KAAKxB,EAAAnf,EAAKiE,KAAiB,OAAOe,EAAQ6a,IAAwB7a,EAAQ6a,GAAUc,GACpF,KAAKxB,EAAAnf,EAAKkE,QAAiB,OAAOc,EAAQ8a,IAAwB9a,EAAQ8a,GAAaa,GACvF,KAAKxB,EAAAnf,EAAKmE,KAAiB,OAAOa,EAAQ+a,IAAwB/a,EAAQ+a,GAAUY,GACpF,KAAKxB,EAAAnf,EAAKoE,KAAiB,OAAOY,EAAQgb,IAAwBhb,EAAQgb,GAAUW,GACpF,KAAKxB,EAAAnf,EAAKqE,UAAiB,OAAOW,EAAQib,IAAwBjb,EAAQib,GAAeU,GACzF,KAAKxB,EAAAnf,EAAKsE,SAAiB,OAAOU,EAAQkb,IAAwBlb,EAAQkb,GAAcS,GACxF,KAAKxB,EAAAnf,EAAKuE,KAAiB,OAAOS,EAAQmb,IAAwBnb,EAAQmb,GAAUQ,GACpF,KAAKxB,EAAAnf,EAAKwE,OAAiB,OAAOQ,EAAQob,IAAwBpb,EAAQob,GAAYO,GACtF,KAAKxB,EAAAnf,EAAKyE,MAAiB,OAAOO,EAAQqb,IAAwBrb,EAAQqb,GAAWM,GACrF,KAAKxB,EAAAnf,EAAK0E,gBAAiB,OAAOM,EAAQsb,IAAwBtb,EAAQsb,GAAqBK,GAC/F,KAAKxB,EAAAnf,EAAK2E,cAAiB,OAAOK,EAAQub,IAAwBvb,EAAQub,GAAmBI,GAC7F,KAAKxB,EAAAnf,EAAKgC,IAAiB,OAAOgD,EAAQwb,IAAwBxb,EAAQwb,GAASG,GACnF,KAAKxB,EAAAnf,EAAK4E,WAAiB,OAAOI,EAAQyb,IAAwBzb,EAAQyb,GAAgBE,GAC1F,QAAS,OAAO,kBAAAhlB,EAAA6B,EAAAV,GAAA,aAAAA,EAAAR,EAAAkB,EAAA,sBAAAzB,IAAAe,EAAAR,EAAAkB,EAAA,sBAAAO,IAAAjB,EAAAR,EAAAkB,EAAA,sBAAAwT,IAAAlU,EAAAR,EAAAkB,EAAA,sBAAAf,IAAAK,EAAAR,EAAAkB,EAAA,sBAAAS,IAAAnB,EAAAR,EAAAkB,EAAA,sBAAAU,IAAApB,EAAAR,EAAAkB,EAAA,sBAAAxB,IAAAc,EAAAR,EAAAkB,EAAA,sBAAAlB,IAAAQ,EAAAR,EAAAkB,EAAA,sBAAAW,IAAArB,EAAAR,EAAAkB,EAAA,sBAAAY,IAAAtB,EAAAR,EAAAkB,EAAA,sBAAAM,IAAAhB,EAAAR,EAAAkB,EAAA,sBAAAc,IAAAxB,EAAAR,EAAAkB,EAAA,sBAAAe,IAAAzB,EAAAR,EAAAkB,EAAA,sBAAApB,IAAAU,EAAAR,EAAAkB,EAAA,sBAAAiB,IC7H5B,IAAAoiB,EAAAhlB,EAAA,SAuBsBilB,EAClBpf,GAAG4a,GAEC,OADMA,aAAiBwE,IAAUxE,EAAQ,IAAIyE,EAAQzE,IAC9C,IAAI0E,EAAO/e,KAAMqa,GAE5B5a,GAAG4a,GAEC,OADMA,aAAiBwE,IAAUxE,EAAQ,IAAIyE,EAAQzE,IAC9C,IAAI2E,EAAKhf,KAAMqa,GAE1B5a,GAAG4a,GAEC,OADMA,aAAiBwE,IAAUxE,EAAQ,IAAIyE,EAAQzE,IAC9C,IAAI4E,EAAKjf,KAAMqa,GAE1B5a,GAAG4a,GACC,OAAO,IAAI6E,EAAIlf,KAAKmf,GAAG9E,IAE3B5a,GAAG4a,GACC,OAAO,IAAI6E,EAAIlf,KAAKof,GAAG/E,IAE3B5a,GAAG4a,GACC,OAAO,IAAI6E,EAAIlf,KAAKqf,GAAGhF,WAIlByE,UAAwBD,EACjCpf,YAAmBrD,GAAQgH,QAARpD,KAAA5D,WAGVkjB,UAAoBT,EAM7Bpf,YAAmBnF,GAAgB8I,QAAhBpD,KAAA1F,OACnBmF,KAAK8f,GACD,IAAKvf,KAAKwf,GAAQ,CAGdxf,KAAKwf,IAAU,EACf,MAAM9f,EAAS6f,EAAMrI,OAAOxX,OAC5B,IAAK,IAAI4S,GAAO,IAAKA,EAAM5S,EAAOwJ,QAC9B,GAAIxJ,EAAO4S,GAAKhY,OAAS0F,KAAK1F,KAAM,CAChC0F,KAAKwf,GAASlN,EACd,MAGR,GAAItS,KAAKwf,GAAS,EAAK,MAAU3b,6BAA6B7D,KAAK1F,SAGvE,OADA0F,KAAK0e,OAASa,EAAMnR,WAAWpO,KAAKwf,IAC7Bxf,KAAK0e,OAAO9jB,IAAIU,KAAK0E,KAAK0e,eAInBe,EAElBhgB,OAAOigB,GAA0B,OAAO,IAAIC,EAAI3f,QAAS0f,GACzDjgB,MAAMigB,GAAyB,OAAO,IAAIE,EAAG5f,QAAS0f,GACtDjgB,MAAmB,OAAO,IAAIyf,EAAIlf,aAGhB6f,UAAoCJ,EACtDhgB,YAA4Bib,EAAgCC,GACxDvX,QADwBpD,KAAA0a,KAAgC1a,KAAA2a,KAI5Dlb,KAAK8f,GACD,OAAIvf,KAAK0a,cAAgBoE,EACjB9e,KAAK2a,cAAiBmE,EACf9e,KAAK8f,YAAYP,EAAOvf,KAAK0a,GAAM1a,KAAK2a,IAGxC3a,KAAK+f,YAAYR,EAAOvf,KAAK0a,GAAM1a,KAAK2a,IAG/C3a,KAAK2a,cAAiBmE,EACf9e,KAAKggB,YAAYT,EAAOvf,KAAK0a,GAAa1a,KAAK2a,IAE/C3a,KAAKigB,YAAYV,EAAOvf,KAAK0a,GAAa1a,KAAK2a,WAWhDuF,UAA6BT,EAE/ChgB,eAAeqD,GACXM,QACApD,KAAK8C,SAAWA,GAIjBod,EAAqBvkB,UAAWmH,SAAWrI,OAAO0lB,iBAE5CR,UAAYO,EACrBzgB,eAAeqD,GAKXM,SAHAN,EAAWA,EAASnC,OAAO,CAACyf,EAAoBvkB,IACrCukB,EAAMrU,OAAOlQ,aAAa8jB,EAAM9jB,EAAEiH,SAAWjH,QAI5D4D,KAAK8f,GACD,MAAMc,EAAQrgB,KAAK8C,SAAS5C,IAAKrE,GAAMA,EAAEP,KAAKikB,IAC9C,MAAO,CAACjN,EAAaiN,IAAuBc,EAAMrM,MAAOnY,GAAMA,EAAEyW,EAAKiN,WAIjEK,UAAWM,EACpBzgB,eAAeqD,GAKXM,SAHAN,EAAWA,EAASnC,OAAO,CAACyf,EAAoBvkB,IACrCukB,EAAMrU,OAAOlQ,aAAa+jB,EAAK/jB,EAAEiH,SAAWjH,QAI3D4D,KAAK8f,GACD,MAAMc,EAAQrgB,KAAK8C,SAAS5C,IAAKrE,GAAMA,EAAEP,KAAKikB,IAC9C,MAAO,CAACjN,EAAaiN,IAAuBc,EAAMC,KAAMzkB,GAAMA,EAAEyW,EAAKiN,WAIhER,UAAec,EAKdpgB,YAAY8gB,EAAqB7F,EAAeC,GACtD,MAAM6F,EAAgB9F,EAAKte,GAAKue,EAAMve,EACtC,MAAO,IAAMokB,EAGP/gB,YAAY8f,EAAoB7E,EAAWC,GACjD,MAAM8F,EAAY/F,EAAKpf,KAAKikB,GACtBmB,EAAa/F,EAAMrf,KAAKikB,GAC9B,MAAO,CAACjN,EAAaiN,IAAuBkB,EAAUnO,EAAKiN,IAAUmB,EAAWpO,EAAKiN,GAG/E9f,YAAY8f,EAAoBoB,EAAUC,GAChD,MAAMC,EAAWF,EAAIrlB,KAAKikB,GAC1B,GAAIoB,EAAIjC,kBAAkBE,EAAAriB,EAAkB,CACxC,IAAIlB,EACJ,MAAMqjB,EAASiC,EAAIjC,OASnB,OARIA,EAAO7Y,aAAe7F,KAAK8gB,IAC3BzlB,EAAMqjB,EAAOqC,cAAcH,EAAIxkB,GAC/B4D,KAAK8gB,GAAiBpC,EAAO7Y,WAC7B7F,KAAKghB,GAAU3lB,GAEfA,EAAM2E,KAAKghB,IAGF,IAAT3lB,EAMO,OAECiX,GACGoM,EAAOuC,OAAO3O,KAASjX,EAItC,MAAO,CAACiX,EAAa9D,IAAsBqS,EAASvO,EAAK9D,IAASoS,EAAIxkB,EAIpEqD,YAAY8f,EAAoBqB,EAAcD,GAEpD,OAAO3gB,KAAKggB,YAAYT,EAAOoB,EAAKC,UAI/B5B,UAAaa,EACZpgB,YAAY8gB,EAAqB7F,EAAeC,GACtD,MAAM6F,EAAgB9F,EAAKte,GAAKue,EAAMve,EACtC,MAAO,IAAMokB,EAGP/gB,YAAY8f,EAAoB7E,EAAWC,GACjD,MAAM8F,EAAY/F,EAAKpf,KAAKikB,GACtBmB,EAAa/F,EAAMrf,KAAKikB,GAC9B,MAAO,CAACjN,EAAa9D,IAAsBiS,EAAUnO,EAAK9D,IAASkS,EAAWpO,EAAK9D,GAG7E/O,YAAY8f,EAAoBoB,EAAUC,GAChD,MAAMC,EAAWF,EAAIrlB,KAAKikB,GAC1B,MAAO,CAACjN,EAAa9D,IAAsBqS,EAASvO,EAAK9D,IAASoS,EAAIxkB,EAGhEqD,YAAY8f,EAAoBqB,EAAcD,GACpD,MAAME,EAAWF,EAAIrlB,KAAKikB,GAC1B,MAAO,CAACjN,EAAa9D,IAAsBoS,EAAIxkB,GAAKykB,EAASvO,EAAK9D,UAI7DyQ,UAAaY,EACZpgB,YAAY8gB,EAAqB7F,EAAeC,GACtD,MAAM6F,EAAgB9F,EAAKte,GAAKue,EAAMve,EACtC,MAAO,IAAMokB,EAGP/gB,YAAY8f,EAAoB7E,EAAWC,GACjD,MAAM8F,EAAY/F,EAAKpf,KAAKikB,GACtBmB,EAAa/F,EAAMrf,KAAKikB,GAC9B,MAAO,CAACjN,EAAa9D,IAAsBiS,EAAUnO,EAAK9D,IAASkS,EAAWpO,EAAK9D,GAG7E/O,YAAY8f,EAAoBoB,EAAUC,GAChD,MAAMC,EAAWF,EAAIrlB,KAAKikB,GAC1B,MAAO,CAACjN,EAAa9D,IAAsBqS,EAASvO,EAAK9D,IAASoS,EAAIxkB,EAGhEqD,YAAY8f,EAAoBqB,EAAcD,GACpD,MAAME,EAAWF,EAAIrlB,KAAKikB,GAC1B,MAAO,CAACjN,EAAa9D,IAAsBoS,EAAIxkB,GAAKykB,EAASvO,EAAK9D,UAI7D0Q,UAAYO,EACrBhgB,YAA4BsS,GACxB3O,QADwBpD,KAAA+R,KAI5BtS,KAAK8f,GACD,MAAM2B,EAAOlhB,KAAK+R,GAAMzW,KAAKikB,GAC7B,MAAO,CAACjN,EAAaiN,KAAwB2B,EAAK5O,EAAKiN,UAIlD4B,UAAwB1B,EACjChgB,YAAoBoW,EAA6BuL,GAC7Che,QADgBpD,KAAA6V,OAA6B7V,KAAAohB,KAIjD3hB,KAAK8f,GAED,OADAvf,KAAKohB,GAAM7B,GACJvf,KAAK6V,MAId,SAAU+K,EAAIxkB,GAAsB,OAAO,IAAI0iB,EAAQ1iB,GACvD,SAAUukB,EAAIplB,GAAuB,OAAO,IAAI+jB,EAAI/jB,GACpD,SAAU8lB,KAAOxlB,GAAuB,OAAO,IAAI8jB,KAAO9jB,GAC1D,SAAUylB,KAAMzlB,GAAsB,OAAO,IAAI+jB,KAAM/jB,GACvD,SAAU0lB,EAAO1L,EAAqBva,GACxC,OAAO,IAAI6lB,EAAgBtL,EAAMva,mGCnRrCkmB,EAAA5nB,EAAA,UA0Ba0d,UAAoBmK,EAAAlmB,EACtBkE,YAAYQ,GACf,OAAO,IAAIqX,EAAY4F,EAAA/f,EAAO8P,KAAKhN,GAC/BqN,KAAKwD,OAAO7Q,EAAQC,IAAK9D,GAAMA,EAAE8M,SACjCjJ,GAQRR,eAAeiiB,GACX,GAAuB,iBAAZA,EAAK,GAAiB,CAC7B,MAAM1Y,EAAO0Y,EAAK,GAClBte,MAAM4F,EAAM0Y,EAAK,IACjB1hB,KAAKkX,OAASwK,EAAK,GACnB1hB,KAAKkJ,OAASF,EAAKE,WAChB,CACH,MAAOgO,EAAQyK,EAASnT,GAAQkT,EAC1BrT,EAA6BlL,MAAMqL,EAAKtF,QAC9C,IAAK,IAAIX,GAAS,EAAGW,EAASsF,EAAKtF,SAAUX,EAAQW,GAAS,CAC1D,MAAMyX,EAA0BnS,EAAKjG,GACrC8F,EAAU9F,GAASoY,aAAec,EAAA3lB,EAAS6kB,EAAI3X,KAAO2X,EAE1Dvd,MAAM,IAAIwe,EAAA9nB,EAAW,IAAIojB,EAAAhgB,EAAOga,EAAOxX,QAASiiB,EAAS,KAAMtT,IAC/DrO,KAAKkX,OAASA,EACdlX,KAAKkJ,OAASyY,EAElB3hB,KAAK6hB,QAAU7hB,KAAKkX,OAAOxX,OAAOwJ,OAE/BzJ,MAAwBuJ,EAAeqC,EAAgBrL,KAAKqL,KAAKY,MAAMjD,IAC1E,OAAO,IAAIsO,EAAYtX,KAAKkX,OAAQlO,EAAaqC,GAE9C5L,WAA0C8I,GAC7C,OAAOA,EAAQ,GAAKA,GAASvI,KAAK6hB,QAAU,KAAOze,MAAMgL,WAAc7F,GAEpE9I,UAAUqiB,GACb,MAAMpiB,EAASM,KAAKkX,OAAOxX,OACrBgB,EAAcohB,EAAYnhB,OAAO,CAACC,EAAInE,KAAOmE,EAAGnE,QAAcmE,EAAInG,OAAOW,OAAO,OACtF,OAAO,IAAIkc,EACPtX,KAAKkX,OAAO6K,UAAUD,GAAc9hB,KAAKkJ,OACzClJ,KAAKqO,UAAUtN,OAAO,CAAC9D,EAAGnD,IAAM4G,EAAYhB,EAAO5F,GAAGQ,QAGvDmF,aAAauiB,EAAY,MAAOC,EAAY,EAAGC,MAClD,OAAO,IAAIC,EAAA7lB,EAInB,UAAkC8lB,EAA0BJ,EAAY,MAAOC,EAAY,EAAGC,MAC1F,MACMG,GAAU,YADDD,EAAYlL,OAAOxX,OACEQ,IAAKjE,MAASA,MAAMiE,IAAIshB,EAAAllB,GAC5D+lB,EAAOrhB,QAAQ,CAACvE,EAAG3C,KACfooB,EAAgBpoB,GAAKwT,KAAKwD,IAAIoR,EAAgBpoB,IAAM,EAAG2C,EAAEyM,UAG7D,IAAK,IAAIpP,GAAK,EAAGyB,EAAI6mB,EAAYlZ,OAAS,IAAKpP,EAAIyB,GAAI,CACnD,IAAI+mB,EAAKC,GAAON,EAAYnoB,KAAMsoB,EAAYxnB,IAAId,IAClD,IAAK,IAAIuD,GAAK,EAAGO,EAAI2kB,EAAIrZ,SAAU7L,EAAIO,GACnC0kB,EAAM7nB,OAAA+mB,EAAAllB,EAAA7B,CAAc8nB,EAAIllB,IACxB6kB,EAAgB7kB,GAAKiQ,KAAKwD,IAAIoR,EAAgB7kB,IAAM,EAAGilB,EAAIpZ,QAGnE,IAAK,IAAIpP,GAAK,IAAKA,EAAIsoB,EAAYlZ,SAC1B+Y,EAAYnoB,GAAK,KAAS,UACrBuoB,EAAOniB,IAAI,CAACzD,EAAGY,IAAM5C,OAAA+mB,EAAAxlB,EAAAvB,CAAQgC,EAAG,IAAKylB,EAAgB7kB,KAAKgI,KAAK2c,UAElEC,EAAYnoB,KAAMsoB,EAAYxnB,IAAId,IACpCoG,IAAKzD,GAAMhC,OAAA+mB,EAAAllB,EAAA7B,CAAcgC,IACzByD,IAAI,CAACzD,EAAGY,IAAM5C,OAAA+mB,EAAAxlB,EAAAvB,CAAQgC,EAAG,IAAKylB,EAAgB7kB,KAC9CgI,KAAK2c,GArBlB,CAJwDhiB,KAAMgiB,EAAWC,EAAWC,GAAkB,oBAAAxoB,EAAA6B,EAAAV,GAAA,aAAAA,EAAAR,EAAAkB,EAAA,sBAAAgB,ICxEtG,IAIiB4J,EAJjBqc,EAAA5oB,EAAA,IAIA,SAAiBuM,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GAClBA,EAAAU,OAASgjB,EAAAxmB,EAA2B4C,EAAOC,EAAMC,EAAQU,OADvC,CAAAX,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAejB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GAChC,IAAYO,GAAZ,SAAYA,GACVA,IAAAqC,KAAA,UACArC,IAAAG,OAAA,YACAH,IAAAkY,gBAAA,qBACAlY,IAAAiY,YAAA,iBACAjY,IAAAojB,OAAA,YALF,CAAYpjB,EAAAP,EAAAO,gBAAAP,EAAAO,mBADoB,CAAAR,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAuBjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GACnBA,EAAA4jB,SAAbjjB,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KASTP,SACE,OAAOO,KAAKyH,GAAGqC,GAAU9J,KAAKwH,IAUhC/H,YACE,OAAOO,KAAKyH,GAAGqC,GAAU9J,KAAKwH,GAAS,GASzC/H,UAAuBqI,EAA8BoB,EAA0ByZ,GAI7E,OAHA7a,EAAQgD,GAAK,EAAG,IAChBhD,EAAQiD,GAAW4X,GACnB7a,EAAQiD,GAAW7B,GACZpB,EAAQG,OAtDa,CAAApJ,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAkEjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBwY,EAAb7X,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAA4BgI,EAA4BC,GACtD,OAAQA,GAAO,IAAI4P,GAAa3P,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAStFhI,SACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGqC,GAAU9J,KAAKwH,GAASS,GAAUjI,KAAKyH,GAAGsC,GAAW,EAAG,GAUlFtK,GAAM8I,EAAeb,GACnB,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,GAAUP,GAAO,IAAIvB,EAAIvH,EAAOC,EAAMC,EAAQ4jB,IAAW/a,GAAO3H,KAAKyH,GAAGe,GAASxI,KAAKwH,GAASS,GAAkB,GAARM,EAAYvI,KAAKyH,IAAM,KAMzIhI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGgB,GAAazI,KAAKwH,GAASS,GAAU,EAe/DxI,GAAQ8I,EAAeb,GACrB,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,GAAUP,GAAO,IAAI8a,EAAAxmB,EAA2B4C,EAAOC,EAAMC,EAAQ+L,IAAQlD,GAAO3H,KAAKyH,GAAGe,GAASxI,KAAKwH,GAASS,GAAkB,GAARM,EAAYvI,KAAKyH,IAAM,KAM7JhI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGgB,GAAazI,KAAKwH,GAASS,GAAU,EAM/DxI,UAAwBqI,GACtBA,EAAQC,GAAY,GAOtBtI,UAAiBqI,EAA8BoB,GAC7CpB,EAAQmC,GAAc,EAAGf,EAAQpB,EAAQiC,GAAW,EAAG,IAOzDtK,UAAgBqI,EAA8B8a,GAC5C9a,EAAQiB,GAAe,EAAG6Z,EAAa,GAOzCnjB,UAAwBqI,EAA8BuB,GACpDvB,EAAQmB,GAAY,GAAII,EAAU,GAOpC5J,UAAkBqI,EAA8B+a,GAC9C/a,EAAQiB,GAAe,EAAG8Z,EAAe,GAO3CpjB,UAA0BqI,EAA8BuB,GACtDvB,EAAQmB,GAAY,GAAII,EAAU,GAOpC5J,UAAsBqI,GAEpB,OADaA,EAAQE,MA3IZlJ,EAAAwY,YAAWA,EADQ,CAAAzY,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WA4JjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnByY,EAAb9X,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAgCgI,EAA4BC,GAC1D,OAAQA,GAAO,IAAI6P,GAAiB5P,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAM1FhI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGqC,GAAU9J,KAAKwH,GAASS,GAAUjI,KAAKyH,GAAGsC,GAAW,EAAG,GAOlFtK,KAAKiI,GACH,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,GAAUP,GAAO,IAAIvB,EAAIvH,EAAOC,EAAMC,EAAQwY,aAAa3P,GAAO3H,KAAKyH,GAAGuC,GAAWhK,KAAKwH,GAASS,GAASjI,KAAKyH,IAAM,KAShIhI,UACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,QAAOS,KAAWjI,KAAKyH,GAAGW,GAASpI,KAAKwH,GAASS,GAMnDxI,UAA4BqI,GAC1BA,EAAQC,GAAY,GAOtBtI,UAAaqI,EAA8BhC,GACzCgC,EAAQmC,GAAc,EAAGnE,EAAIgC,EAAQiC,GAAW,EAAG,IAOrDtK,UAAeqI,EAA8Bgb,GAC3Chb,EAAQiB,GAAe,EAAG+Z,EAAY,GAOxCrjB,UAAkBqI,EAA8B6P,GAC9C7P,EAAQO,GAAa,GAAIsP,EAAS,GAOpClY,UAA0BqI,GAExB,OADaA,EAAQE,MA/FZlJ,EAAAyY,gBAAeA,EADI,CAAA1Y,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAyGjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBuY,EAAb5X,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAwBgI,EAA4BC,GAClD,OAAQA,GAAO,IAAI2P,GAAS1P,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAMlFhI,IACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAAkEjI,KAAKyH,GAAGa,GAAUtI,KAAKwH,GAASS,GAAWua,EAAAxmB,EAA2B4C,EAAOC,EAAMC,EAAQS,gBAAgB8G,GAMtL5G,aACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAAgEjI,KAAKyH,GAAG0C,GAAUnK,KAAKwH,GAASS,GAAW9B,EAAIvH,EAAOC,EAAMC,EAAQO,cAAcqC,KAO3JjC,GAAoCiI,GAClC,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAG2C,GAAQ1C,EAAK1H,KAAKwH,GAASS,GAAU,KAM/DxI,aACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,IAC3C,OAAOS,EAASjI,KAAKyH,GAAGqC,GAAU9J,KAAKwH,GAASS,GAAUjI,KAAKyH,GAAGsC,GAAW,EAAG,GAMlFtK,UAAoBqI,GAClBA,EAAQC,GAAY,GAOtBtI,UAAkBqI,EAA8BlI,GAC9CkI,EAAQe,GAAc,EAAGjJ,EAAS4iB,EAAAxmB,EAA2B4C,EAAOC,EAAMC,EAAQS,gBAAgB8G,IAOpG5G,UAAqBqI,EAA8BvH,GACjDuH,EAAQO,GAAa,EAAG9H,EAAY4F,EAAIvH,EAAOC,EAAMC,EAAQO,cAAcqC,MAO7EjC,UAAiBqI,EAA8Bib,GAC7Cjb,EAAQiB,GAAe,EAAGga,EAAc,GAO1CtjB,UAAqBqI,EAA8BzH,GACjDyH,EAAQmC,GAAc,EAAG5J,EAAYyH,EAAQiC,GAAW,EAAG,IAO7DtK,UAAkBqI,GAEhB,OADaA,EAAQE,KAQvBvI,UAA2BqI,EAA8BG,GACvDH,EAAQoD,GAAOjD,IArHNnJ,EAAAuY,GAAOA,EADY,CAAAxY,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,wGC1UX,SAAiB6c,EAAuBC,qDAC1C,IAAgD,IAAQC,EAARC,EAAAC,EAAAhpB,EAAA6oB,KAAQC,QAAAE,EAAA/oB,EAAA8oB,EAAAtN,SAAAI,MAAA,CAA7C,MAAMiB,OAAEA,EAAMmM,QAAEA,EAAOC,GAAEC,GAAQL,EAAAloB,YACxCooB,EAAA/oB,QAAO+oB,EAAApnB,EAAAonB,EAAAhpB,EAAAopB,EAAgBtM,EAAQmM,EAASE,wHAI1C,SAAWC,EAAgBtM,EAAgBmM,EAAkBE,GAC/D,GAAIE,EAAAxnB,EAAQynB,GAAcL,SAChB,IAAIM,EAAA3nB,EAAYkb,EAAQmM,EAAQna,OAAQqa,EAAOK,GAAY1M,EAAOxX,cACrE,GAAI+jB,EAAAxnB,EAAQ4nB,GAAkBR,GAAU,CAC3C,MAAMS,EAAeT,EAAQvd,GACvBhG,EAAeyjB,EAAOzjB,aAEtBikB,EADkB7M,EAAOpX,aAAalF,IAAIkpB,GACJ1jB,KAAoByF,WAChE,IAAIme,EAAmBtF,EAAA5iB,EAAOV,OAAOmoB,EAAOjG,GAAMyG,IAC9CV,EAAQ1L,SAAW7X,EAAamkB,IAAIH,KACpCE,EAAmBlkB,EAAalF,IAAIkpB,GAAe/X,OAAOiY,IAE9DlkB,EAAaoB,IAAI4iB,EAAcE,UAIjBE,UAAuBnhB,EAAA/G,EAMzCyD,YAAYgY,EAAgCC,EAAmC5X,GAC3EsD,QACApD,KAAKyX,GAAQA,EACbzX,KAAK0X,GAAUA,EACf1X,KAAKF,aAAeA,EAGjBL,GAAYC,GAAmB,OAAOA,EAAOQ,IAAKikB,GAAUnkB,KAAKsd,GAAM6G,EAAM/jB,OAE7EX,GAAqBW,GAAyB,OAAOJ,KAAKokB,GAAchkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAKqkB,GAAcjkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAKqkB,GAAcjkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAKskB,GAAclkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAKskB,GAAclkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAKukB,GAAcnkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAKqkB,GAAcjkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAKqkB,GAAcjkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAKqkB,GAAcjkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAKqkB,GAAcjkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAKqkB,GAAcjkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAKwkB,GAAcpkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAKykB,GAAgBrkB,GAC1EX,GAAqBW,GAAyB,OAAOJ,KAAK0kB,GAAetkB,GACzEX,GAAqBW,GAAyB,OAAOJ,KAAKqkB,GAAcjkB,GACxEX,GAAqBW,GAAyB,OAAOJ,KAAK2kB,GAAuBvkB,GACjFX,GAAqBW,GAAyB,OAAOJ,KAAKykB,GAAgBrkB,GAC1EX,GAAqBW,GACxB,OAAO,IAAIwkB,EAAAroB,EAAe6D,EAAMJ,KAAKF,aAAalF,IAAIwF,EAAK0F,IAAM9F,KAAKsd,GAAMld,EAAKmB,UAE3E9B,KAAqB,OAAOO,KAAKyX,GAAM5B,OAAO7a,MAC9CyE,KAAsB,OAAOO,KAAK0X,GAAQ7B,OAAO7a,MACjDyE,GAAmCW,EAASuL,EAAmBhD,EAAS3I,KAAK6kB,MACnF,OAAOlZ,EAAY,GAAK3L,KAAK8kB,GAAS1kB,EAAMuI,IAAW,IAAInF,WAAW,GAKhE/D,GAAcW,GAAY8I,OAAEA,EAAMyC,UAAEA,GAA6B3L,KAAK+kB,MAC5E,OAAO,IAAIH,EAAA3oB,EAAcmE,EAAM8I,EAAQlJ,KAAKglB,GAAe5kB,EAAMuL,GAAY,IAAInI,WAAW,GAAI,EAAGmI,GAE7FlM,GAAkCW,GAAS8I,OAAEA,EAAMyC,UAAEA,GAA6B3L,KAAK+kB,MAC7F,OAAO,IAAIH,EAAA3oB,EAAYmE,EAAM8I,EAAQlJ,KAAKglB,GAAe5kB,EAAMuL,GAAY3L,KAAK8kB,GAAS1kB,GAAO,EAAGuL,GAE7FlM,GAAcW,GAAY8I,OAAEA,EAAMyC,UAAEA,GAA6B3L,KAAK+kB,KAAoB/b,GAChG,OAAO,IAAI4b,EAAAtoB,EAAS8D,EAAM8I,EAAQlJ,KAAKglB,GAAe5kB,EAAMuL,GAAY3C,GAAQhJ,KAAK8kB,GAAS1kB,GAAO,EAAGuL,GAElGlM,GAAsCW,GAAS8I,OAAEA,EAAMyC,UAAEA,GAA6B3L,KAAK+kB,MACjG,OAAO,IAAIH,EAAAvoB,EAAgB+D,EAAM8I,EAAQlJ,KAAKglB,GAAe5kB,EAAMuL,GAAY3L,KAAKilB,GAAY7kB,GAAOJ,KAAK8kB,GAAS1kB,GAAO,EAAGuL,GAEzHlM,GAAkCW,GAAS8I,OAAEA,EAAMyC,UAAEA,GAA6B3L,KAAK+kB,MAC7F,OAAO,IAAIH,EAAA7oB,EAAYqE,EAAM8I,EAAQlJ,KAAKglB,GAAe5kB,EAAMuL,GAAY3L,KAAKilB,GAAY7kB,GAAOJ,KAAKsd,GAAMld,EAAK0C,SAAU,GAAG1C,MAAO,EAAGuL,GAEpIlM,GAAgDW,GAAS8I,OAAEA,EAAMyC,UAAEA,GAA6B3L,KAAK+kB,MAC3G,OAAO,IAAIH,EAAAvnB,EAAoB+C,EAAM8I,EAAQlJ,KAAKglB,GAAe5kB,EAAMuL,GAAY3L,KAAKsd,GAAMld,EAAK0C,SAAU,GAAG1C,MAAO,EAAGuL,GAEpHlM,GAAsCW,GAAS8I,OAAEA,EAAMyC,UAAEA,GAA6B3L,KAAK+kB,MACjG,OAAO,IAAIH,EAAA9qB,EAAcsG,EAAM8I,EAAQlJ,KAAKglB,GAAe5kB,EAAMuL,GAAY3L,KAAK4jB,GAAYxjB,EAAK0C,UAAW,EAAG6I,GAE3GlM,GAAeW,GAAgC8I,OAAEA,EAAMyC,UAAEA,GAA6B3L,KAAK+kB,MACjG,OAAO3kB,EAAKnF,OAASiqB,EAAArnB,EAAU2H,OAC3B,IAAIof,EAAAhnB,EAAgBwC,EAAqB8I,EAAQlJ,KAAKglB,GAAe5kB,EAAMuL,GAAY3L,KAAKmlB,GAAY/kB,GAAOJ,KAAK4jB,GAAYxjB,EAAK0C,UAAW,EAAG6I,GACnJ,IAAIiZ,EAAAvqB,EAAe+F,EAAoB8I,EAAQlJ,KAAKglB,GAAe5kB,EAAMuL,GAAY3L,KAAKmlB,GAAY/kB,GAAOJ,KAAKilB,GAAY7kB,GAAOJ,KAAK4jB,GAAYxjB,EAAK0C,UAAW,EAAG6I,qCCvF9KjN,EAAO0mB,EAAAppB,EAAY0C,KAEpB,SAAW2mB,EAASC,GACtB,MAAMpO,EAyHV,SAAwBpb,GACpB,MAAMypB,EAAmB,IAAIxlB,IAC7B,OAAO,IAAImlB,EAAA/nB,EAwBf,SAASqoB,EAAeC,EAAWF,GAC/B,OAAQE,OACHvlB,IAAKjE,aA+BSA,EAAQspB,GAC3B,IACIpB,EAEAuB,EACA5f,EAAY6f,EAAeC,EAJ3BtrB,EAAO2B,EAAQ3B,KAEf6G,EAAWlF,EAAYkF,SAGvBxB,EAAWkmB,EAAe5pB,EAAkB4pB,gBAgBhD,OAfKN,IAAsBK,EAAW3pB,EAAc4J,aAIzC6f,EAAWH,EAAiBtB,IAAIne,EAAK8f,EAAa9f,IACvCyf,EAAiB3qB,IAAIkL,GAAK1F,KAAKyF,WAC/BigB,EAAa7pB,EAAQmE,KAAGolB,EAAevpB,EAAY6G,SAAG,UACxE4iB,EAAW,IAAIR,EAAAprB,EAAW4rB,GAErBC,EAAWC,EAAoBG,WAAKC,EAAYL,GAAa,IAAIT,EAAAppB,EAClEgK,EAAI8f,EAAoB7f,WAE5Boe,EAAQ,IAAIe,EAAA7nB,EAAM/C,EAAMorB,EAAUvkB,EAAUxB,GAC5C4lB,EAAiBtB,IAAIne,IAAOyf,EAAiBrkB,IAAI4E,EAAIqe,KAZjDuB,EAAWI,EAAa7pB,EAAQmE,KAAGolB,EAAevpB,EAAY6G,SAAGyiB,OACjEpB,EAAQ,IAAIe,EAAA7nB,EAAM/C,EAAMorB,EAAUvkB,EAAUxB,IAa7CwkB,GAAS,MArDNloB,CAAoBA,EAAGspB,IAC5BxkB,OAAQ9E,GAAW,MAALA,GA1BfupB,CAAe1pB,EAAU4D,OAAG6lB,GAC5BM,EAAe/pB,EAAkB+pB,gBACjCtmB,EAAgBM,GAAI0lB,GAL5B,CAzHkCD,EAAapO,QACrCpX,EAAe,IAAIC,IACzB,IAAK,MAAMwf,KAAU+F,EAAmBxlB,iBAAU,CAC9C,MAAMujB,GAwImB/mB,EAxIeijB,EAyIrC,IAAIkE,EAAAnnB,EACPiD,EAAgBM,GAChBomB,EAAoB3pB,EAAQ0M,MAC5B1M,EAAMwJ,GAAGxJ,EAAWqb,gBA1IhBT,SAAQmM,UACRC,GAAQ,IAAI4C,EACRC,EAAmB5G,EAAYvW,KAAWod,SAC1CC,EAAchD,EAAQ5L,IACtB4O,EAAchD,EAAQ3L,IACtB5X,IAiIhB,IAAiCxD,EA7H7B,IAAK,MAAMijB,KAAU+F,EAAcgB,YAAU,CACzC,MAAMjD,EAAU4C,EAAoB1G,SAEhCrI,SAAQmM,UACRC,GAAQ,IAAI4C,EACRC,EAAmB5G,EAAe6G,SAClCC,EAAchD,EAAQ5L,IACtB4O,EAAchD,EAAQ3L,IACtB5X,KAMhB,SAAUumB,EAAcnV,SAA0BA,EAClD,SAASiV,EAAmBvlB,GACxB,OAAQA,OAAUD,OAAgB,CAAC+W,EAAS6O,QACrC7O,KACC6O,EAAiBpf,WAAMof,EAAiBpf,iBACxCof,EAAetf,SAAMsf,EAAetf,eACpCsf,EAAanf,OAAMmf,EAAanf,aAChCmf,EAAarf,OAAMqf,EAAarf,aACjCif,EAAmBI,EAAiBzjB,eAI/C,MAAM0jB,EAAc,IAAIC,EAAAnqB,EAAY,eAEvB4pB,UAAuBhC,EAChCzkB,YAAoBinB,EAAkBjP,EAAgCC,EAAmC5X,GACrGsD,MAAMqU,EAAOC,EAAS5X,GADNE,KAAA0mB,KAGVjnB,GAAmC4Q,EAAU1E,GAAmBgb,GAAE1e,GAAWjI,KAAK6kB,MACxF,OAAOlZ,GAAa,EAAI,IAAInI,WAAW,GAAK/I,OAAA8d,EAAAle,EAAAI,CAAUuF,KAAK0mB,GAAQze,IAE7DxI,GAAgC4Q,GAAUsW,GAAE1e,GAA2BjI,KAAK6kB,MAClF,OAAO,IAAIlhB,WAAW3D,KAAK0mB,GAAQze,IAE7BxI,GAAgC4Q,GAAUsW,GAAE1e,GAA2BjI,KAAK6kB,MAClF,OAAO,IAAIthB,UAAUvD,KAAK0mB,GAAQze,IAE5BxI,GAA6BW,GAASumB,GAAE1e,GAA2BjI,KAAK6kB,MAC9E,MAAM+B,GAAEF,GAAY1mB,KACpB,WAAIklB,EAAA7qB,EAASwsB,YAAYzmB,GACd,IAAIoD,WAAWsjB,EAAkBJ,EAAQze,MACxCid,EAAA7qB,EAAS0sB,MAAM3mB,IAAS8kB,EAAA7qB,EAAS2sB,OAAO5mB,KAA4B,KAAlBA,EAAKkD,SACxD,IAAIE,WAAWsjB,EAAkBJ,EAAQze,KACzCid,EAAA7qB,EAAS4sB,OAAO7mB,IAASA,EAAK6E,OAASlG,EAAS0H,YAChD,IAAIjD,WAAWsjB,EAAkBJ,EAAQze,UACzCid,EAAA7qB,EAAS6sB,UAAU9mB,GACnB,IAAIoD,WA2BvB,SAA6BkK,GACzB,MAAM1E,EAAO,IAAIpF,YAA4B,EAAhB8J,EAAOxE,QACpC,IAAK,IAAIpP,GAAK,EAAGyB,EAAImS,EAAOxE,SAAUpP,EAAIyB,GACtC4rB,EAAAnrB,EAAeorB,WAAW1Z,EAAO5T,GAAI,IAAI8J,YAAYoF,EAAKL,OAAQK,EAAKJ,WAAa,GAAQ9O,EAAG,IAEnG,OAAOkP,EAAKL,OALhB,CA3BsD+d,EAAQze,UAC3Cid,EAAA7qB,EAASgtB,SAASjnB,SAAkB8kB,EAAA7qB,EAASitB,kBAAkBlnB,GAC/D,IAAIoD,WAiCvB,SAA4BkK,GAIxB,MAAM6Z,EAAS7Z,EAAOrI,KAAK,IACrB2D,EAAO,IAAIxF,WAAW+jB,EAAOre,OAAS,GAC5C,IAAK,IAAIpP,EAAI,EAAGA,EAAIytB,EAAOre,OAAQpP,GAAK,EACpCkP,EAAKlP,GAAK,GAAKyhB,SAASgM,EAAO/L,OAAO1hB,EAAG,GAAI,IAEjD,OAAOkP,EAAKL,OAThB,CAjCqD+d,EAAQze,UAC1Cid,EAAA7qB,EAASmtB,OAAOpnB,GAChB,IAAIoD,WAAW/I,OAAA8d,EAAAle,EAAAI,CAAUisB,EAAQze,IAAqBU,aACtDuc,EAAA7qB,EAASotB,OAAOrnB,GAChBomB,EAAYkB,GAAQhB,EAAQze,GAAqB5C,KAAK,KAEtD5K,OAAAmqB,EAAAzqB,EAAAM,CAAa2F,EAAK8C,UAAWwjB,EAAQze,GAAQ/H,IAAKzD,IAAOA,KAK5E,SAASqqB,EAAkBpZ,GACvB,MAAM1E,EAAO,IAAIpF,YAA4B,EAAhB8J,EAAOxE,QACpC,IAAK,IAAIpP,GAAK,EAAGyB,EAAImS,EAAOxE,SAAUpP,EAAIyB,GAOtC4rB,EAAA7qB,EAAc8qB,WAAW1Z,EAAO5T,GAAGmgB,WAAY,IAAIrW,YAAYoF,EAAKL,OAAQK,EAAKJ,WAAa,EAAI9O,EAAI,EAAG,IAE7G,OAAOkP,EAAKL,OAwBhB,IAAOrK,EAAOkB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQR,KACxCS,EAAWS,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQC,SAC5CC,EAAWQ,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQE,SAC5CE,EAAYM,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQI,UAC7CD,EAAYO,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQG,UAC7CG,EAAeI,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQM,aAChDG,EAAkBC,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQS,gBAY1D,SAAS0mB,EAAoB3pB,GACzB,OAAO,IAAImnB,EAAApnB,EACPkD,EAAgBM,GAChBvD,EAASqrB,MAoBjB,SAASC,EAAmBhnB,GACxB,OAAQA,OAAUD,OAAwB,CAACknB,EAAYtB,QAChDsB,EACH,IAAIpE,EAAArpB,EACA,IAAIsE,EAAK6nB,EAAcoB,MAAG,GAC1B,IAAIjpB,GAkBWopB,EAlBYvB,EAAiBpf,UAmB5C2gB,OAAgBnnB,OAAO,CAACuY,EAAKoJ,IAAQpJ,KAAgB,IAARoJ,GAAY,IAnBT,OAEjDsF,EAAmBrB,EAAiBzjB,eAgB/C,IAA2BglB,EAvB3B,CAnB2BxrB,EAAW8pB,SA8BtC,SAAS2B,EAAgBnnB,EAAW8W,MAChC,IAAK,IAAI5d,GAAK,EAAGyB,GAAKqF,OAAUsI,SAAUpP,EAAIyB,GAAI,CAC9C,MAAMgrB,EAAS3lB,EAAG9G,GAClBysB,EAAiBpf,UAAKuQ,EAAQhJ,KAAK,IAAI+U,EAAAznB,EAAe,IAAI0C,EAAKgZ,EAAQxO,OAAQ,GAAI,IAAIxK,EAAK6nB,EAAiBpf,SAAE+B,OAAQ,KACvHqd,EAAetf,QAAKyQ,EAAQhJ,KAAK,IAAI+U,EAAAznB,EAAe,IAAI0C,EAAKgZ,EAAQxO,OAAQ,GAAI,IAAIxK,EAAK6nB,EAAetf,OAAEiC,OAAQ,KACnHqd,EAAanf,MAAKsQ,EAAQhJ,KAAK,IAAI+U,EAAAznB,EAAe,IAAI0C,EAAKgZ,EAAQxO,OAAQ,GAAI,IAAIxK,EAAK6nB,EAAanf,KAAE8B,OAAQ,KAC/Gqd,EAAarf,MAAKwQ,EAAQhJ,KAAK,IAAI+U,EAAAznB,EAAe,IAAI0C,EAAKgZ,EAAQxO,OAAQ,GAAI,IAAIxK,EAAK6nB,EAAarf,KAAEgC,OAAQ,KAC/GwO,EAAUqQ,EAAgBxB,EAAiBzjB,SAAG4U,GAElD,OAAOA,EATX,CA7BwBpb,EAAW8pB,UAsEnC,SAASP,EAAelmB,GACpB,OAAO,IAAII,IAAoBtF,OAAOutB,QAAQroB,QAGlD,MAAMsoB,GACFvmB,KAAQpD,EAAKoD,KACbwmB,KAAQ5pB,EAAKqD,KACbwmB,IAAO7pB,EAAKsD,IACZwmB,cAAiB9pB,EAAKyI,cACtBshB,OAAU/pB,EAAKwD,OACfwmB,KAAQhqB,EAAK0D,KACbumB,KAAQjqB,EAAKyD,KACbymB,QAAWlqB,EAAK2D,QAChBwmB,KAAQnqB,EAAK4D,KACbwmB,KAAQpqB,EAAK6D,KACbwmB,UAAarqB,EAAK8D,UAClB6S,SAAY3W,EAAK+D,SACjBumB,KAAQtqB,EAAKgE,KACbumB,OAAUvqB,EAAK0I,QACf8hB,MAASxqB,EAAKkE,MACdumB,gBAAmBzqB,EAAKmE,gBACxBumB,cAAiB1qB,EAAKoE,cACtBxC,IAAO5B,EAAKyB,KAGhB,SAAS+lB,EAAapsB,EAAQoJ,GAC1B,OAAQmlB,EAAevuB,EAAQY,OAC3B,KAAKgE,EAAKoD,KAAM,OAAO,KACvB,KAAKpD,EAAKqD,KAAM,OAqBiD,IAAIujB,EAAAtoB,EApBrE,KAAK0B,EAAKsD,IAAK,OAAOokB,EAAYtsB,GAClC,KAAK4E,EAAKyI,cAAe,OA2BjC,SAAiCsJ,GAAiC,OAAQpR,EAAUoR,EAAiB/L,YAC/B,KAAKrF,EAAUsF,KAAM,OAAO,IAAI2gB,EAAA3pB,EAChC,KAAK0D,EAAUuF,OAAQ,OAAO,IAAI0gB,EAAA1qB,EAClC,KAAKyE,EAAUyF,OAAQ,OAAO,IAAIwgB,EAAArpB,EAEtC,OAAO,KALzE,CA3B8DnC,GACtD,KAAK4E,EAAKwD,OAAQ,OAgC+C,IAAIojB,EAAA5oB,EA/BrE,KAAKgC,EAAKyD,KAAM,OAgCiD,IAAImjB,EAAA7mB,EA/BrE,KAAKC,EAAK0D,KAAM,OAgCiD,IAAIkjB,EAAA9qB,EA/BrE,KAAKkE,EAAK2D,QAAS,OAgCMoO,EAhCiB3W,EAgCuB,IAAIwrB,EAAA7oB,EAAQgU,EAAatL,MAAGsL,EAAiB/L,WA/B9G,KAAKhG,EAAK4D,KAAM,OAgCxB,SAAiCmO,GAAiC,OAAO,IAAI6U,EAAAjpB,EAAM8C,EAASsR,EAAYpL,OAAxG,CAhC4CvL,GACpC,KAAK4E,EAAK6D,KAAM,OAgCxB,SAAiCkO,GAAiC,OAAO,IAAI6U,EAAA9mB,EAAKY,EAASqR,EAAYpL,MAAWoL,EAAgB/M,UAAlI,CAhC4C5J,GACpC,KAAK4E,EAAK8D,UAAW,OAgC7B,SAAiCiO,GAAiC,OAAO,IAAI6U,EAAApoB,EAAUkC,EAASqR,EAAYpL,MAAWoL,EAAgBnL,UAAvI,CAhCsDxL,GAC9C,KAAK4E,EAAK+D,SAAU,OAgC5B,SAAiCgO,GAAiC,OAAO,IAAI6U,EAAA9oB,EAASgD,EAAaiR,EAAYpL,OAA/G,CAhCoDvL,GAC5C,KAAK4E,EAAKgE,KAAM,OAgCxB,SAAiC+N,EAAYvN,GAAqB,OAAO,IAAIoiB,EAAAzoB,EAAKqG,GAAlF,CAhC4CpJ,EAAGoJ,OACvC,KAAKxE,EAAK0I,QAAS,OAgC3B,SAAiCqJ,EAAYvN,GAAqB,OAAO,IAAIoiB,EAAAhoB,EAAO4F,GAApF,CAhCiDpJ,EAAGoJ,OAC5C,KAAKxE,EAAKkE,MAAO,OAgCzB,SAAiC6N,EAAYvN,GAAqB,OAAO,IAAIoiB,EAAAvoB,EAAMuC,EAAUmR,EAAYpV,MAAYoV,EAAe/K,YAAoBxC,GAAxJ,CAhC8CpJ,EAAGoJ,OACzC,KAAKxE,EAAKmE,gBAAiB,OAgCnC,SAAiC4N,GAAiC,OAAO,IAAI6U,EAAAtnB,EAAgByS,EAAiB5K,WAA9G,CAhCkE/L,GAC1D,KAAK4E,EAAKoE,cAAe,OAgCjC,SAAiC2N,EAAYvN,GAAqB,OAAO,IAAIoiB,EAAAnrB,EAAcsW,EAAgB3K,SAAG5C,GAA9G,CAhC8DpJ,EAAGoJ,OACzD,KAAKxE,EAAKyB,IAAK,OAgCvB,SAAiCsQ,EAAYvN,GAAqB,OAAO,IAAIoiB,EAAA/oB,EAAKkU,EAAkBzK,WAAG9C,GAAvG,CAhC0CpJ,EAAGoJ,OAsB7C,IAAiCuN,EApB7B,MAAUxM,2BAA2BnK,EAAQY,QAIjD,SAAS0rB,EAAwB3V,GAAiC,OAAQA,EAAgB/M,UACpB,KAAM,EAAG,OAAO+M,EAAgBhN,SAAI,IAAK6hB,EAAAnW,EAAS,IAAKmW,EAAA3nB,EACvD,KAAK,GAAI,OAAO8S,EAAgBhN,SAAI,IAAI6hB,EAAArqB,EAAU,IAAIqqB,EAAAlnB,EACtD,KAAK,GAAI,OAAOqS,EAAgBhN,SAAI,IAAI6hB,EAAAppB,EAAU,IAAIopB,EAAAnoB,EACtD,KAAK,GAAI,OAAOsT,EAAgBhN,SAAI,IAAI6hB,EAAAxrB,EAAU,IAAIwrB,EAAA9nB,EAE1D,OAAO,SAAAI,EAAA3C,EAAA,IAAA4C,EAAA5C,EAAA,IAAA6C,EAAA7C,EAAA,IAAA8C,EAAA9C,EAAA,IC1QlEouB,EAAa7D,EAAAppB,EAAYitB,GAI1B,SAAWC,EAAoDxC,GACjE,IAAIxP,EAAwB,KACxBpX,EAAe,IAAIC,IACnBopB,EAAqC,MACrC3Y,YAAYC,OAAOiW,IAA+B,iBAAZA,KACtCA,GAAWA,IAEf,IAAK,MAAM7a,KAAU6a,EAAS,CAC1B,MAAMjf,EAAK2hB,EAAavd,GACxB,IAAMqL,KAAaA,SAAQmS,GAAAF,GAAiBG,EAAW7hB,IAAiByP,GAAUiS,EAC9E,IAAK,MAAM9F,KAAW8F,EAAa1hB,SAE3ByP,SAAQmM,UACRC,GAAQ,IAAIiG,EACR9hB,EACA+hB,EAAenG,EAAgB5L,QAC/B+R,EAAenG,EAAgB3L,QAC/B5X,KAQlB,SAAiB2pB,EAAyD/C,iDAC5E,IAAIxP,EAAwB,KACxBpX,EAAe,IAAIC,IACnBopB,EAAqC,SACzC,IAA2B,IAAOO,EAAPC,EAAAvG,EAAAhpB,EAAAssB,KAAOgD,QAAAtG,EAAA/oB,EAAAsvB,EAAA9T,SAAAI,MAAA,CAAvB,MACDxO,EAAK2hB,EADQM,EAAA1uB,OAEnB,IAAMkc,KAAaA,SAAQmS,GAAAF,GAAiBG,EAAW7hB,IAAiByP,GAAUiS,EAC9E,IAAK,MAAM9F,KAAW8F,EAAa1hB,eAC/B2b,EAAA/oB,GACI6c,SAAQmM,UACRC,GAAQ,IAAIiG,EACR9hB,EACA+hB,EAAenG,EAAgB5L,QAC/B+R,EAAenG,EAAgB3L,QAC/B5X,6HAQXypB,UAAyBrF,EAGlCzkB,YAAYgI,EAAgBgQ,EAAgCC,EAAmC5X,GAC3FsD,MAAMqU,EAAOC,EAAS5X,GACtBE,KAAK0I,GAAQjB,EAAGiB,KAChB1I,KAAK4pB,GAAgBniB,EAAGI,KAElBpI,GAAgCW,EAASuI,GAA2B,OAAO3I,KAAK8kB,GAAS1kB,EAAMuI,GAC/FlJ,GAAgCW,EAASuI,GAA2B,OAAO3I,KAAK8kB,GAAS1kB,EAAMuI,GAC/FlJ,GAA6B4Q,GAAUnH,OAAEA,EAAMyd,GAAE1e,GAA2BjI,KAAK6kB,MACvF,OAAO,IAAIrhB,WAAWxD,KAAK0I,GAAMC,OAAQ3I,KAAK0I,GAAME,WAAa5I,KAAK4pB,GAAgB3hB,EAAQiB,IAItG,SAAUsgB,EAActY,SAA0BA,EAElD,SAASkY,EAAa1gB,GAClB,IAAIwI,EAAkBxI,GAAgB,IAAIlF,WAAW,GACrD,GAAqB,iBAAVkF,EAAoB,CAC3BwI,EAAM,IAAI1N,WAAWkF,EAAMQ,QAC3B,IAAK,IAAIpP,GAAK,EAAGyB,EAAImN,EAAMQ,SAAUpP,EAAIyB,GACrC2V,EAAIpX,GAAK4O,EAAM8T,WAAW1iB,GAE9B,OAAO,IAAImvB,EAAW/X,GAE1B,OAAO,IAAI+X,EAAW/X,GAG1B,SAASoY,EAAW7hB,GAChB,IAAIyP,EAAgBiS,EAAcU,EAClC,GAAIA,EAoCR,SAAwBpiB,GACpB,IAAKhN,OAAAqvB,EAAAzvB,EAAAI,CAAiBgN,GAClB,OAAO,KAEX,IACImV,EADanV,EAAGqV,KACYgN,EAAAvtB,EAC5BogB,EAAelV,EAAGG,GAAUgV,GAEhC,OADAnV,EAAGsiB,GAAYnN,EAAeD,GA2ElC,SAA8BlV,GAC1B,MAAM8d,EAAmB,IAAIxlB,IACvB9D,EAAI+tB,GAAQC,GAAgBxiB,GAAK3L,EAAIG,EAAEib,SAC7C,OAAO,IAAIuM,EAAAlnB,EA6Bf,SAAqCN,GACjC,MAAMiuB,KACN,IAAK,IAAI5tB,EAAWxC,GAAK,EAAGyB,EAAIU,GAAKA,EAAEkuB,OAAwBrwB,EAAIyB,IAC3De,EAAIL,EAAE6D,aAAahG,KACnBowB,EAAOxb,KAAK,IAAI+U,EAAAppB,EAAUiC,EAAE8a,KAAkB9a,EAAE+D,aAAc/D,EAAE2L,OAGxE,OAAOiiB,EAPX,CA5BoCjuB,GAsCpC,SAAiCA,GAC7B,MAAMiuB,KACN,IAAK,IAAI5tB,EAAWxC,GAAK,EAAGyB,EAAIU,GAAKA,EAAEmuB,OAAyBtwB,EAAIyB,IAC5De,EAAIL,EAAEgb,GAAcnd,KACpBowB,EAAOxb,KAAK,IAAI+U,EAAAppB,EAAUiC,EAAE8a,KAAkB9a,EAAE+D,aAAc/D,EAAE2L,OAGxE,OAAOiiB,EAPX,CAtCgEjuB,GACxD,IAAIipB,EAAA/nB,EAAOktB,GAAiBvuB,EAAGypB,GAAmB+E,GAAexuB,GAAIG,EAAE2D,IAAW2lB,IAL1F,CA1EgC9d,GARhC,CApCgCA,GACxByP,EAAS2S,EAAO3S,OAChBiS,EA6CR,SAA0BU,GACtB,OAAO,UAAWpiB,GACd,IAAI4b,EACJ,IAAK,IAAIvpB,GAAK,EAAGwsB,EAAUuD,EAAO7S,GAAmBzb,EAAI+qB,EAAQpd,SAAUpP,EAAIyB,GAC3EkM,EAAGsiB,GAAYzD,EAAQxsB,GAAGmO,KACtBob,EAAUkH,EAAY9iB,EAAIA,EAAGG,GAAUH,EAAGI,gBACpCwb,GAGd,IAAK,IAAIvpB,GAAK,EAAGwsB,EAAUuD,EAAO5S,GAAe1b,EAAI+qB,EAAQpd,SAAUpP,EAAIyB,GACvEkM,EAAGsiB,GAAYzD,EAAQxsB,GAAGmO,KACtBob,EAAUkH,EAAY9iB,EAAIA,EAAGG,GAAUH,EAAGI,gBACpCwb,IAZtB,CA7CwCwG,OAC7B,MAAI3S,EAQf,SAA0BzP,GACtB,IAAKhN,OAAAqvB,EAAA1vB,EAAAK,CAAyBgN,EAAGiB,KAAS,GACtC,IAAK,MAAM2a,KAAWmH,EAAa/iB,GAC/B,GAAIgc,EAAAxnB,EAAQwuB,GAASpH,GACjB,OAAOA,EAInB,OAAO,KARX,CARyC5b,IAGjC,MAAU5D,MAAM,wBAFhBslB,EAAeuB,EAInB,OAASxT,SAAQmS,GAAAF,GAcrB,SAAUuB,EAAmBjjB,GACzB,IAAK,MAAM4b,KAAWmH,EAAa/iB,GAC3Bgc,EAAAxnB,EAAQynB,GAAcL,SAChBA,GACCI,EAAAxnB,EAAQ4nB,GAAkBR,SAC3BA,GAKV5b,EAAGsiB,GAAYtiB,EAAGI,KAAawb,EAAQhjB,YAiC/C,SAAUmqB,EAAa/iB,GACnB,IAAIyB,EAAgBma,EACpB,KAAO5b,EAAGI,KAAaJ,EAAGqV,OACnB5T,EAASzB,EAAGG,GAAUH,EAAGI,OAAe,IACvCwb,EAAUkH,EAAY9iB,EAAIyB,YACpBma,GAKlB,SAASkH,EAAY9iB,EAAgByB,GACjCzB,EAAGsiB,GAAYtiB,EAAGI,KAAaiiB,EAAAxtB,GAC/B,MAAM+mB,EAkDV,SAA+B5b,GAC3B,MAAMtN,EAAIwwB,GAASC,GAAiBnjB,GAAMrH,EAAOjG,EAAEoG,aAAcX,EAAUzF,EAAEyF,IAC7E,OAAQQ,GACJ,KAAKf,EAAcG,OAAQ,OAQnC,SAA2BI,EAA0B9D,EAAYypB,GAC7D,OAAO,IAAIL,EAAA/nB,EAAOktB,GAAiBvuB,EAAGypB,GAAmB+E,GAAexuB,GAAI8D,EAAS2lB,GADzF,CAR4D3lB,EAASzF,EAAEkoB,GAAO,IAAIwI,IAAa,IAAI9qB,KAC3F,KAAKV,EAAciY,YAAa,OAAOwT,GAAuBlrB,EAASzF,EAAGA,EAAEkoB,GAAO,IAAI0I,KACvF,KAAK1rB,EAAckY,gBAAiB,OAc5C,SAAoC3X,EAA0BzF,EAAaE,GACvE,OAAO,IAAIopB,EAAAnnB,EAAgBsD,EAASkrB,GAAuBlrB,EAASzF,EAAGE,EAAE2O,QAAU3O,EAAEyL,KAAMzL,EAAEsd,WADjG,CAd8E/X,EAASzF,EAAGA,EAAEkoB,GAAO,IAAI2I,KAEnG,OAAO,KAPX,CAlD0CvjB,GAEtC,OADAA,EAAGsiB,GAAYtiB,EAAGI,KAAaqB,GACxBma,EAOX,IAAO4H,EAAOzrB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQR,KACxC4sB,EAAY1rB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQG,UAC7CI,EAAgBgY,EAAArb,EAAa4C,EAAOC,EAAMC,EAAQO,cAClD8rB,GAAkB3rB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQS,gBACnDyqB,GAAUoB,EAAApvB,EAAU4C,EAAOC,EAAMC,EAAQiY,GAEzC4T,GAAWtT,EAAArb,EAAa4C,EAAOC,EAAMC,EAAQuY,GAC7CwT,GAAUrrB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQU,OAE3CurB,GAAe1T,EAAArb,EAAa4C,EAAOC,EAAMC,EAAQwY,YACjD0T,GAAmB3T,EAAArb,EAAa4C,EAAOC,EAAMC,EAAQyY,gBAIrD8T,GAAQ7rB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQ6C,KACzC2pB,GAAO9rB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQ8C,IACxC2pB,GAAiB/rB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQiI,cAClDykB,GAAUhsB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQgD,OAC3C2pB,GAAQjsB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQkD,KACzC0pB,GAAQlsB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQiD,KACzC4pB,GAAWnsB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQmD,QAC5C2pB,GAAQpsB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQoD,KACzC2pB,GAAQrsB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQqD,KACzC2pB,GAAatsB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQsD,UAC9C2pB,GAAYvsB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQuD,SAC7C2pB,GAAQxsB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQwD,KACzC2pB,GAAUzsB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQkI,QAC3CklB,GAAS1sB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQ0D,MAC1C2pB,GAAmB3sB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQ2D,gBACpD2pB,GAAiB5sB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQ4D,cAClD2pB,GAAO7sB,EAAAxD,EAAY4C,EAAOC,EAAMC,EAAQiB,IA0B/C,SAAS+qB,GAAuBlrB,EAA0BzF,EAAamC,GACnE,OAAO,IAAImnB,EAAApnB,EAAoBuD,EAAStD,EAAE4M,SA+C9C,SAAmC5M,GAC/B,MAAMurB,KACN,IAAK,IAAI/tB,GAAK,EAAGyB,EAAIe,EAAEgwB,OAAiBxyB,EAAIyB,GACxCssB,EAAWnZ,MA0DezS,EA1DeK,EAAEmb,GAAM3d,GA2D9C,IAAI2pB,EAAArpB,EAAc6B,EAAEiN,SAAUjN,EAAE0P,eAD3C,IAAkC1P,EAxD9B,OAAO4rB,EALX,CA/CkFvrB,GAuDlF,SAAgCA,EAAiBsD,GAC7C,MAAM8X,KACN,IAAK,IAAI5d,GAAK,EAAGyB,EAAIe,EAAEiwB,OAAmBzyB,EAAIyB,GAAI,CAC9C,IAAIoN,EAASrM,EAAEob,GAAQ5d,GAInB8F,EAAUurB,GAAgBtrB,KAC1B8I,EAAOnB,IAAW,GAAK1N,EAAI,IAE/B4d,EAAQhJ,KAAK8d,GAAsB7jB,IAEvC,OAAO+O,EAZX,CAvD6Gpb,EAAGsD,GAAUzF,EAAEkG,cA2B5H,SAASgqB,GAAiBvuB,EAAYypB,GAClC,MAAM7lB,KACN,IAAK,IAAYtF,EAARN,GAAK,EAAoByB,EAAIO,GAAKA,EAAE2wB,OAAkB3yB,EAAIyB,IAC3DnB,EAAIsyB,GAAM5wB,EAAE4D,OAAO5F,GAAKyrB,KACxB7lB,EAAOgP,KAAKtU,GAGpB,OAAOsF,EAGX,SAASitB,GAAgB1wB,EAAWspB,GAChC,MAAM7lB,KACN,IAAK,IAAYtF,EAARN,GAAK,EAAoByB,EAAIU,GAAKA,EAAE2wB,OAAoB9yB,EAAIyB,IAC7DnB,EAAIsyB,GAAMzwB,EAAE6G,SAAShJ,GAAKyrB,KAC1B7lB,EAAOgP,KAAKtU,GAGpB,OAAOsF,EA0BX,SAASgtB,GAAMzwB,EAAWspB,GACtB,IACIpB,EAGAuB,EACAC,EAAuB7f,EACvB8f,EANAtrB,EAAO2B,EAAE3B,OAET6G,EAAWlF,EAAEkF,WACbxB,EAAW2qB,GAAeruB,GAmB9B,OAfKspB,IAAsBK,EAAW3pB,EAAE4J,eAI7B6f,EAAWH,EAAiBtB,IAAIne,EAAK8f,EAAS9f,KAAKI,KACxCqf,EAAiB3qB,IAAIkL,GAAK1F,KAAKyF,WAC/BgnB,GAAc5wB,EAAG0wB,GAAgB1wB,EAAG,UACtDypB,EAAW,IAAIR,EAAAprB,EAAW4rB,GAErBC,EAAWC,EAASG,aAAe+G,GAAanH,GAAa,IAAIT,EAAAppB,EAClEgK,EAAI8f,EAAS7f,aAEjBoe,EAAQ,IAAIe,EAAA7nB,EAAM/C,EAAMorB,EAAUvkB,EAAUxB,GAC5C4lB,EAAiBtB,IAAIne,IAAOyf,EAAiBrkB,IAAI4E,EAAIqe,KAZjDuB,EAAWmH,GAAc5wB,EAAG0wB,GAAgB1wB,EAAGspB,OAC/CpB,EAAQ,IAAIe,EAAA7nB,EAAM/C,EAAMorB,EAAUvkB,EAAUxB,IAa7CwkB,GAAS,KAGpB,SAASmG,GAAeyC,GACpB,MAAM/jB,EAAO,IAAIjJ,IACjB,GAAIgtB,EACA,IAAK,IAAIC,EAAO3xB,EAAKvB,GAAK,EAAGyB,EAAoC,EAAhCwxB,EAAOE,OAA8BnzB,EAAIyB,IACjEyxB,EAAQD,EAAOlH,eAAe/rB,KAA8B,OAAtBuB,EAAM2xB,EAAM3xB,OACnD2N,EAAK9H,IAAI7F,EAAK2xB,EAAMhyB,SAIhC,OAAOgO,EAOX,SAASwjB,GAAsBlwB,GAC3B,OAAO,IAAImnB,EAAAznB,EAAeM,EAAE2L,KAAU3L,EAAE4M,UAG5C,SAAS2jB,GAAc5wB,EAAW6G,GAC9B,OAAQ7G,EAAEqO,MACN,KAAK2gB,EAAKvpB,KAAM,OAAO,KACvB,KAAKupB,EAAKtpB,KAAM,OAAqB1F,EAAEmE,KAAK,IAAIirB,IAqB6B,IAAInG,EAAAtoB,EApBjF,KAAKquB,EAAKrpB,IAAK,OAAOkrB,GAAa7wB,EAAEmE,KAAK,IAAIkrB,KAC9C,KAAKL,EAAKlkB,cAAe,OA2BjC,SAAkCsJ,GAA4C,OAAQA,EAAM/L,aACV,KAAK4mB,EAAU3mB,KAAM,OAAO,IAAI2gB,EAAA3pB,EAChC,KAAK2vB,EAAU1mB,OAAQ,OAAO,IAAI0gB,EAAA1qB,EAClC,KAAK0wB,EAAUxmB,OAAQ,OAAO,IAAIwgB,EAAArpB,EAEtC,OAAO,KALrF,CA3BuDI,EAAEmE,KAAK,IAAImrB,KAC1D,KAAKN,EAAKnpB,OAAQ,OAAuB7F,EAAEmE,KAAK,IAAIorB,IAgCyB,IAAItG,EAAA5oB,EA/BjF,KAAK2uB,EAAKlpB,KAAM,OAAqB9F,EAAEmE,KAAK,IAAIsrB,IAgC6B,IAAIxG,EAAA7mB,EA/BjF,KAAK4sB,EAAKjpB,KAAM,OAAqB/F,EAAEmE,KAAK,IAAIqrB,IAgC6B,IAAIvG,EAAA9qB,EA/BjF,KAAK6wB,EAAKhpB,QAAS,OAgCOoO,EAhCiBpU,EAAEmE,KAAK,IAAIurB,IAgCuB,IAAIzG,EAAA7oB,EAAQgU,EAAMtL,QAASsL,EAAM/L,aA/B9G,KAAK2mB,EAAK/oB,KAAM,OAgCxB,SAAkCmO,GAA4C,OAAO,IAAI6U,EAAAjpB,EAAMoU,EAAMpL,QAArG,CAhC6ChJ,EAAEmE,KAAK,IAAIwrB,KAChD,KAAKX,EAAK9oB,KAAM,OAgCxB,SAAkCkO,GAA4C,OAAO,IAAI6U,EAAA9mB,EAAKiS,EAAMpL,OAAQoL,EAAM/M,YAAlH,CAhC6CrH,EAAEmE,KAAK,IAAIyrB,KAChD,KAAKZ,EAAK7oB,UAAW,OAgC7B,SAAkCiO,GAA4C,OAAO,IAAI6U,EAAApoB,EAAUuT,EAAMpL,OAAQoL,EAAMnL,YAAvH,CAhCuDjJ,EAAEmE,KAAK,IAAI0rB,KAC1D,KAAKb,EAAK5oB,SAAU,OAgC5B,SAAkCgO,GAA4C,OAAO,IAAI6U,EAAA9oB,EAASiU,EAAMpL,QAAxG,CAhCqDhJ,EAAEmE,KAAK,IAAI2rB,KACxD,KAAKd,EAAK3oB,KAAM,OAgCxB,SAAkC+N,EAAcvN,GAA8B,OAAO,IAAIoiB,EAAAzoB,EAAKqG,GAA9F,CAhC6C7G,EAAEmE,KAAK,IAAI4rB,IAAWlpB,OAC3D,KAAKmoB,EAAKjkB,QAAS,OAgC3B,SAAkCqJ,EAAgBvN,GAA4B,OAAO,IAAIoiB,EAAAhoB,EAAO4F,GAAhG,CAhCkD7G,EAAEmE,KAAK,IAAI6rB,IAAanpB,OAClE,KAAKmoB,EAAKzoB,MAAO,OAgCzB,SAAkC6N,EAAevN,GAA6B,OAAO,IAAIoiB,EAAAvoB,EAAM0T,EAAMpV,OAASoV,EAAM6c,SAAiCpqB,GAArJ,CAhC+C7G,EAAEmE,KAAK,IAAI8rB,IAAYppB,OAC9D,KAAKmoB,EAAKxoB,gBAAiB,OAgCnC,SAAkC4N,GAA4C,OAAO,IAAI6U,EAAAtnB,EAAgByS,EAAM5K,aAA/G,CAhCmExJ,EAAEmE,KAAK,IAAI+rB,KACtE,KAAKlB,EAAKvoB,cAAe,OAgCjC,SAAkC2N,EAAuBvN,GAAqB,OAAO,IAAIoiB,EAAAnrB,EAAcsW,EAAM3K,WAAY5C,GAAzH,CAhC+D7G,EAAEmE,KAAK,IAAIgsB,IAAoBtpB,OACtF,KAAKmoB,EAAKlrB,IAAK,OAgCvB,SAAkCsQ,EAAavN,GAA+B,OAAO,IAAIoiB,EAAA/oB,EAAKkU,EAAMzK,aAAc9C,GAAlH,CAhC2C7G,EAAEmE,KAAK,IAAIisB,IAAUvpB,OAsBhE,IAAkCuN,EApB9B,MAAUxM,2BAA2B5H,EAAEqO,QAI3C,SAASwiB,GAAyBzc,GAA4C,OAAQA,EAAM/M,YACV,KAAM,EAAG,OAAO+M,EAAMhN,WAAa,IAAK6hB,EAAAnW,EAAS,IAAKmW,EAAA3nB,EACtD,KAAK,GAAI,OAAO8S,EAAMhN,WAAa,IAAI6hB,EAAArqB,EAAU,IAAIqqB,EAAAlnB,EACrD,KAAK,GAAI,OAAOqS,EAAMhN,WAAa,IAAI6hB,EAAAppB,EAAU,IAAIopB,EAAAnoB,EACrD,KAAK,GAAI,OAAOsT,EAAMhN,WAAa,IAAI6hB,EAAAxrB,EAAU,IAAIwrB,EAAA9nB,EAEzD,OAAO,KC9X/E,SAAW+vB,GAAKzG,GAClB,IACIzD,EADAmK,EAAa1G,EAEjB,GAAqB,iBAAV0G,EACP,IAAMA,EAAQC,KAAKC,MAAMF,GACzB,MAAO7wB,GAAK6wB,EAAQ1G,QHDtB,UAA6BzD,GAC/B,IAAK,MAAM/L,OAAEA,EAAMmM,QAAEA,EAAOC,GAAEC,KAAYN,QAC/BO,EAAgBtM,EAAQmM,EAASE,GAF1C,CGMEN,EAHCmK,GAA0B,iBAAVA,EAG6B,mBAA3BA,EAAMtyB,OAAOuR,UAA4B6c,EAAYkE,GAAS/H,EAAS+H,GAF7D,iBAAVA,EAAsBlE,GAAakE,QAOxD,SAAiBG,GAAU7G,qDAC7B,IAA8B,IAAiD8G,EAAjDC,EAAArK,EAAAhpB,EAAA4oB,EAAuByG,EAAiB/C,OAAS8G,QAAApK,EAAA/oB,EAAAozB,EAAA5X,SAAAI,MAAA,CAApE,IAAImM,EAAWoL,EAAAxyB,kBACtBooB,EAAA/oB,EAAM+nB,qHAIR,SAAiBsL,GAAWC,qDAC9B,IAAgC,IAAqCH,EAArCC,EAAArK,EAAAhpB,EAAAmzB,GAAU9yB,OAAAmzB,EAAA5xB,EAAAvB,CAAmBkzB,OAAQH,QAAApK,EAAA/oB,EAAAozB,EAAA5X,SAAAI,MAAA,CAA1D,MAAMmM,EAAWoL,EAAAxyB,kBACxBooB,EAAA/oB,EAAM+nB,wPApDdxoB,EAAAS,EAAA+L,EAAA,sBAAA4c,oFCqByE6K,2DCrBzEj0B,EAAAS,EAAA+L,EAAA,sBAAA0nB,UAsCaC,EAwDTtuB,eAAeiiB,GACX,IAAIxK,EACAoP,EAdWtmB,KAAAguB,MAeXtM,EAAK,aAActhB,EAAAjD,GACnB+Z,EAASwK,EAAK,GACd4E,EAAUnjB,MAAM8qB,QAAQvM,EAAK,GAAG,IAAMA,EAAK,GAAG,GAAKA,EAAK,IAExDxK,EADOwK,EAAK,aAAciC,EAAA3nB,GAChBsqB,EAAU5E,GAAM,GAAGxK,QAEnBoP,EAAU5E,EAAK,IAAI,GAAGxK,OAEpClX,KAAKkX,OAASA,EACdlX,KAAKsmB,QAAUA,EACftmB,KAAKkuB,GAAiC,GAAlB5H,EAAQpd,OACxB,IAAIya,EAAA3nB,EAAYkb,EAAQ,MACxBoP,EAAQ3lB,OAAO,CAACmoB,EAAOvJ,IAAUuJ,EAAM/c,OAAOwT,IAClDvf,KAAKkJ,OAASlJ,KAAKkuB,GAAahlB,OAChClJ,KAAK6hB,QAAU7hB,KAAKkuB,GAAarM,QAxErCpiB,eAAiB,OAAO,IAAIsuB,EAAM,IAAI3tB,EAAAjD,UACtCsC,YAAYinB,GACR,GAAIA,EAAS,CACT,IAAIxP,EACAD,KACJ,IAAK,IAAImL,KAAe3nB,OAAAoE,EAAA7C,EAAAvB,CAAKisB,GACzBxP,EAASA,GAAUkL,EAAYlL,OAC/BD,EAAcvI,KAAK0T,GAEvB,OAAO,IAAI2L,EAAM7W,GAAU,IAAI9W,EAAAjD,MAAY8Z,GAE/C,OAAO8W,EAAMI,QAEjB1uB,iBAAuBinB,qDCNKjqB,EDOxB,GCNQ,OADgBA,EDOJiqB,ICNJjsB,OAAOgC,KAAOA,YAAYA,EAAE3B,OAAOwb,eDMrB,CAC1B,IAAIY,EACAD,SACJ,IAA8B,IAAkBuW,EAAlBC,EAAArK,EAAAhpB,EAAAK,OAAAoE,EAAAvC,EAAA7B,CAAUisB,MAAQ8G,QAAAC,EAAA5X,QAAAI,MAAA,CAArC,IAAImM,EAAWoL,EAAAxyB,MACtBkc,EAASA,GAAUkL,EAAYlL,OAC/BD,EAAcvI,KAAK0T,6GAEvB,OAAO,IAAI2L,EAAM7W,GAAU,IAAI9W,EAAAjD,MAAY8Z,GACxC,OC3CT,SAAoBxa,GACtB,OAAY,MAALA,GAAahC,OAAOgC,KAAOA,GAA0B,mBAAdA,EAAQyZ,KADpD,CD2CuBwQ,GACVqH,EAAM9gB,WAAWyZ,GACjBA,EACAqH,EAAM9gB,KAAKyZ,GAEfqH,EAAMI,UAEjB1uB,kBAAkBopB,GACd,MAAM3R,EAAS,IAAI9W,EAAAjD,EAAO0rB,EAAOzoB,KAAK0C,UAChCyL,EAASsa,EAAOxd,gBAAgB+iB,EAAApyB,EACjB6sB,EAAOxd,KAAKmB,cACZqc,GACrB,OAAO,IAAIkF,EAAMxf,EAAOrO,IAAKuO,GAAU,IAAIkV,EAAA3nB,EAAYkb,EAAQzI,EAAMvF,OAAQuF,EAAMpD,KAAKgD,aAyCrF5O,IAAI8I,GACP,OAAOvI,KAAKkuB,GAAatzB,IAAI2N,GAE1B9I,UAAUnF,GACb,OAAO0F,KAAKquB,YAAYruB,KAAKsuB,eAAeh0B,IAEzCmF,YAAY8I,GACf,OAAOA,EAAQ,GAAKA,GAASvI,KAAK6hB,QAC5B,KACA7hB,KAAKguB,GAASzlB,KACdvI,KAAKguB,GAASzlB,GAASvI,KAAKkuB,GAAa9f,WAAW7F,IAEvD9I,eAAenF,GAClB,OAAO0F,KAAKkX,OAAOxX,OAAO6uB,UAAWtyB,GAAMA,EAAE3B,OAASA,GAEnDmF,CAAC3E,OAAOuR,YACX,OAAOrM,KAAKkuB,GAAapzB,OAAOuR,YAE7B5M,OAAO+uB,GACV,OAAO,IAAIC,EAAkBzuB,KAAKsmB,QAASkI,GAExC/uB,KAAKoW,EAAgBva,GACxB,MAAMgrB,EAAUtmB,KAAKsmB,QAASoI,EAAapI,EAAQpd,OACnD,IAAK,IAAIylB,GAAc,IAAKA,EAAaD,GAAa,CAElD,MAAMnP,EAAQ+G,EAAQqI,GAClBrzB,GAAQA,EAAKikB,GAEjB,IAAK,IAAIhX,GAAS,EAAGoZ,EAAUpC,EAAMrW,SAAUX,EAAQoZ,GACnD9L,EAAKtN,EAAOgX,IAIjB9f,QAAQnF,GACX,MAAMgsB,EAAUtmB,KAAKsmB,QAASoI,EAAapI,EAAQpd,OAC7C0lB,EAA2B,iBAATt0B,EAAoB,IAAIk0B,EAAAlyB,EAAIhC,GAAQA,EAG5Ds0B,EAAStzB,KAAKgrB,EAAQoI,EAAa,IACnC,MAAMhQ,EAASkQ,EAASlQ,OACxB,KAAMA,aAAkBmQ,EAAAtyB,GACpB,MAAUsH,MAAM,8DAIpB,MAAMirB,EAAsB,IAAIlrB,YAAY8a,EAAO7Y,WAAWqD,QAC9D,IAAK,IAAIylB,GAAc,IAAKA,EAAaD,GAAa,CAElD,MAAMnP,EAAQ+G,EAAQqI,GAEtBC,EAAStzB,KAAKikB,GACd,MAAMwP,EAAQH,EAASlQ,OAA4Bnd,QAEnD,IAAK,IAAIgH,GAAS,EAAGoZ,EAAUpC,EAAMrW,SAAUX,EAAQoZ,GAAU,CAC7D,IAAItmB,EAAM0zB,EAAKn0B,IAAI2N,GACP,OAARlN,GAAgByzB,EAAOzzB,MAGnC,OAAO,IAAIyyB,EAAcpP,EAAO7Y,WAAYgpB,EAAA/0B,EAAUmT,KAAK6hB,IAExDrvB,QACH,OAAOO,KAAKkJ,OAETzJ,UAAUqiB,GACb,OAAO,IAAIiM,EAAM/tB,KAAKsmB,QAAQpmB,IAAKqf,GAAUA,EAAMwC,UAAUD,KAE1DriB,SAASuiB,GACZ,IAAIhH,EAAM,GACV,IAAK,MAAMuH,KAAOviB,KAAKgvB,aAAahN,GAChChH,GAAOuH,EAAM,KAEjB,OAAOvH,EAGJvb,UAAUwvB,EAAW,SAAUtB,MAClC,ODzKF,SAA2BE,EAAcF,MAC3C,OAGJ,SAAuB1K,GAEnB,IAAIvL,KAAchH,EAAa,EAE/B,IAAK,MAAM2S,KAAWJ,EAClBvL,EAAQhJ,KAAK2U,GACb3S,GAAc2S,EAAQ3S,WAG1B,MAAM/H,OAAEA,GAAW+O,EAAQ/W,OAAO,EAAGgI,SAAQC,cAAcF,KACvDC,EAAOzH,IAAIwH,EAAOE,IACTD,SAAQC,WAAYA,EAAaF,EAAMgI,cAC/C/H,OAAQ,IAAInF,WAAWkN,GAAa9H,WAAY,IAErD,OAAOD,EAdX,CAHyBglB,EAASlzB,OAAA4tB,EAAA/rB,EAAA7B,CAAgBozB,GAASpzB,OAAA4tB,EAAArsB,EAAAvB,CAAcozB,ICwK1DqB,CAAiBlvB,KAAM2tB,GAE3BluB,aAAauiB,EAAY,OAC5B,OAAO,IAAI4L,EAAAtxB,EAkInB,UAA4BuxB,EAAc7L,EAAY,OAClD,IAAIC,EAAY,EACZkN,KACAjN,KACAkN,KAIJ,IAAK,MAAM7P,KAASsO,EAAMvH,QAAS,CAC/B,MAAMja,EAAWkT,EAAMyP,aAAahN,EAAWC,EAAWC,IACpDjM,KAAEA,EAAIjb,MAAEA,GAAUqR,EAASwJ,OAC5BI,IACDkZ,EAAYzgB,KAAK1T,GACjBo0B,EAAU1gB,KAAKrC,GACf4V,GAAa1C,EAAMrW,QAG3B,IAAK,MAAMmD,KAAY+iB,QACbD,EAAYxY,cACXtK,EAnBf,CAlIkDrM,KAAMgiB,GAAY,eAI9DyM,EAGFhvB,YAAa6mB,EAAwBkI,GACjCxuB,KAAKsmB,QAAUA,EACftmB,KAAKwuB,UAAYA,EAEd/uB,KAAKoW,EAAgBva,GAKxB,MAAMgrB,EAAUtmB,KAAKsmB,QACfoI,EAAapI,EAAQpd,OAC3B,IAAK,IAAIylB,GAAc,IAAKA,EAAaD,GAAa,CAElD,MAAMnP,EAAQ+G,EAAQqI,GAIlBrzB,GAAQA,EAAKikB,GACjB,MAAMiP,EAAYxuB,KAAKwuB,UAAUlzB,KAAKikB,GAEtC,IAAK,IAAIhX,GAAS,EAAGoZ,EAAUpC,EAAMrW,SAAUX,EAAQoZ,GAC/C6M,EAAUjmB,EAAOgX,IAAU1J,EAAKtN,EAAOgX,IAIhD9f,QAOH,IAAIyZ,EAAM,EACV,MAAMoN,EAAUtmB,KAAKsmB,QACfoI,EAAapI,EAAQpd,OAC3B,IAAK,IAAIylB,GAAc,IAAKA,EAAaD,GAAa,CAElD,MAAMnP,EAAQ+G,EAAQqI,GAChBH,EAAYxuB,KAAKwuB,UAAUlzB,KAAKikB,GAEtC,IAAK,IAAIhX,GAAS,EAAGoZ,EAAUpC,EAAMrW,SAAUX,EAAQoZ,GAC/C6M,EAAUjmB,EAAOgX,MAAYrG,EAGzC,OAAOA,EAEJzZ,EAAE3E,OAAOuR,YAKZ,MAAMia,EAAUtmB,KAAKsmB,QACfoI,EAAapI,EAAQpd,OAC3B,IAAK,IAAIylB,GAAc,IAAKA,EAAaD,GAAa,CAElD,MAAMnP,EAAQ+G,EAAQqI,GAIhBH,EAAYxuB,KAAKwuB,UAAUlzB,KAAKikB,GAEtC,IAAK,IAAIhX,GAAS,EAAGoZ,EAAUpC,EAAMrW,SAAUX,EAAQoZ,GAC/C6M,EAAUjmB,EAAOgX,WAAgBA,EAAM3kB,IAAI2N,KAIpD9I,OAAO+uB,GACV,OAAO,IAAIC,EACPzuB,KAAKsmB,QACLtmB,KAAKwuB,UAAUnN,IAAImN,IAGpB/uB,QAAQnF,GACX,MAAMgsB,EAAUtmB,KAAKsmB,QAASoI,EAAapI,EAAQpd,OAC7C0lB,EAA2B,iBAATt0B,EAAoB,IAAIk0B,EAAAlyB,EAAIhC,GAAQA,EAG5Ds0B,EAAStzB,KAAKgrB,EAAQoI,EAAa,IACnC,MAAMhQ,EAASkQ,EAASlQ,OACxB,KAAMA,aAAkBmQ,EAAAtyB,GACpB,MAAUsH,MAAM,8DAIpB,MAAMirB,EAAsB,IAAIlrB,YAAY8a,EAAO7Y,WAAWqD,QAC9D,IAAK,IAAIylB,GAAc,IAAKA,EAAaD,GAAa,CAElD,MAAMnP,EAAQ+G,EAAQqI,GAChBH,EAAYxuB,KAAKwuB,UAAUlzB,KAAKikB,GAEtCqP,EAAStzB,KAAKikB,GACd,MAAMwP,EAAQH,EAASlQ,OAA4Bnd,QAEnD,IAAK,IAAIgH,GAAS,EAAGoZ,EAAUpC,EAAMrW,SAAUX,EAAQoZ,GAAU,CAC7D,IAAItmB,EAAM0zB,EAAKn0B,IAAI2N,GACP,OAARlN,GAAgBmzB,EAAUjmB,EAAOgX,IAAUuP,EAAOzzB,MAG9D,OAAO,IAAIyyB,EAAcpP,EAAO7Y,WAAYgpB,EAAA/0B,EAAUmT,KAAK6hB,WAItDhB,UAAsBC,EAC/BtuB,YAAYiO,EAAgBohB,GACxB1rB,MACI,IAAIugB,EAAA3nB,EAAY,IAAIoE,EAAAjD,GAChB,IAAIiD,EAAA/C,EAAM,SAAUqQ,EAAOtN,MAC3B,IAAIA,EAAA/C,EAAM,SAAUyxB,EAAO1uB,QAE/B0uB,EAAO5lB,QAASwE,EAAQohB,KAGzBrvB,SACH,MAAMiO,EAAS1N,KAAKquB,YAAY,GAC1BS,EAAS9uB,KAAKquB,YAAY,GAC1BrY,KACN,IAAK,IAAIlc,GAAK,IAAKA,EAAIkG,KAAKkJ,QACxB8M,EAAOtI,EAAO9S,IAAId,IAAMg1B,EAAOl0B,IAAId,GAEvC,OAAOkc,6ME9TfqZ,EAAAz1B,EAAA,UAuBsB01B,EAKlB7vB,YAAYuJ,EAAelG,GACvB9C,KAAKkJ,OAASF,EAAKE,OACnBlJ,KAAKqO,UAAYrF,EAAKqF,UACtBrO,KAAKkT,GAAclK,EAAKqF,UAAUnF,OAClClJ,KAAKuvB,GAAYzsB,GAAgBK,MAAMnD,KAAKkT,IAEzCzT,MAAMuJ,GACT,OAAO,IAAWhJ,KAAKkM,YAAalD,EAAMhJ,KAAKuvB,IAE5C9vB,UACH,SAEGA,UACH,UAAWO,MAERP,QAAQxC,GACX,MAAU4G,MAAM,uBAEbpE,SAAgB,OAAOO,KAAKgM,UAC5BvM,WACH,UAAWO,MAAME,IAAKzD,GAAMhC,OAAA40B,EAAA/yB,EAAA7B,CAAcgC,IAAI4I,KAAK,MAEhD5F,IAAI8I,GACP,OAAOvI,KAAKwvB,GAAUxvB,KAAMuI,GAEzB9I,IAAI8I,EAAevN,GACtB,OAAOgF,KAAKyvB,GAAUzvB,KAAMuI,EAAOvN,GAIhCyE,WAA0C8I,GAC7C,OAAOA,EAAQ,GAAKA,GAASvI,KAAKkT,GAC5B,KACClT,KAAKuvB,GAAUhnB,KACfvI,KAAKuvB,GAAUhnB,GAASqW,EAAA9iB,EAAOV,OAAU4E,KAAKqO,UAAU9F,KAE5D9I,EAAE3E,OAAOuR,YACZ,MAAMzR,EAAMoF,KAAKwvB,GACXtmB,EAASlJ,KAAKkJ,OACpB,IAAK,IAAIX,GAAS,IAAKA,EAAQW,SACrBtO,EAAIoF,KAAMuI,UAKfmnB,UAAsEJ,EAO/E7vB,YAAYuJ,EAAelG,GACvBM,MAAM4F,EAAMlG,GACZ9C,KAAKkJ,OAASF,EAAKE,OACnBlJ,KAAKsF,QAAU0D,EAAK1D,QACpBtF,KAAKqS,GAAqBrJ,EAAKqJ,GAEzB5S,GAAUkwB,EAAoBpnB,GACpC,OAAOonB,EAAKC,GAAcD,EAAMpnB,EAAOonB,EAAKrqB,QAASqqB,EAAKzhB,aAAcyhB,EAAKtd,IAEvE5S,GAAUkwB,EAAoBpnB,EAAevN,GACnD,OAAO20B,EAAKE,GAAcF,EAAMpnB,EAAOvN,EAAO20B,EAAKrqB,QAASqqB,EAAKzhB,aAAcyhB,EAAKtd,IAE9E5S,GAAckwB,EAAqBpnB,EAAejD,EAAoBwqB,EAAoBzd,GAChG,MAAMN,EAAQ4d,EAAKvhB,WAAWiE,EAAmB/M,EAAQiD,KACzD,OAAOwJ,EAAQA,EAAMnX,IAAI2N,GAAS,KAE5B9I,GAAckwB,EAAqBpnB,EAAevN,EAAoBsK,EAAoBwqB,EAAoBzd,GACpH,MAAMN,EAAQ4d,EAAKvhB,WAAWiE,EAAmB/M,EAAQiD,KACzD,OAAOwJ,EAAQA,EAAM7Q,IAAIqH,EAAOvN,GAAS,KAEtCyE,EAAE3E,OAAOuR,YACZ,MAAMnD,EAASlJ,KAAKkJ,OACdtO,EAAMoF,KAAK4vB,IACXG,GAAE1d,GAAuBrS,MACzBsF,QAAEA,EAAO4I,aAAEA,GAAiBlO,KAClC,IAAK,IAAIuI,GAAS,IAAKA,EAAQW,SACrBtO,EAAIoF,KAAMuI,EAAOjD,EAAS4I,EAAcmE,UAK7C2d,UAAuBN,EAEhCjwB,YAAYuJ,EAAwBlG,GAChCM,MAAM4F,EAAMlG,GACZ9C,KAAKkO,aAAelF,EAAKkF,aAEnBzO,GAAUkwB,EAAsBpnB,GACtC,OAAOonB,EAAKC,GAAcD,EAAMpnB,EAAOonB,EAAKrqB,QAASqqB,EAAKzhB,aAAcyhB,EAAKtd,IAEvE5S,GAAckwB,EAA8BpnB,EAAejD,EAAoB4I,EAAmBmE,GACxG,MAAMN,EAAQ4d,EAAKvhB,WAAWiE,EAAmB/M,EAAQiD,KACzD,OAAOwJ,EAAQA,EAAMnX,IAAIsT,EAAa3F,IAAU,KAE1C9I,GAAckwB,EAA8BpnB,EAAevN,EAAYsK,EAAoB4I,EAAmBmE,GACpH,MAAMN,EAAQ4d,EAAKvhB,WAAWiE,EAAmB/M,EAAQiD,KACzD,OAAOwJ,EAAQA,EAAM7Q,IAAIgN,EAAa3F,GAAQvN,GAAS,YAUlDi1B,UAAmBX,EAG5B7vB,YAAYuJ,EAAoBlG,GAC5BM,MAAM4F,EAAMlG,SAGNotB,UAAiBC,GAEvB,MAAMltB,EAAQitB,EAASv0B,UAEvBqN,EAAK5I,KAAK0C,SAAS9B,QAAQ,SAAU/E,EAAGnC,GACpCW,OAAOC,eAAeuI,EAAOhH,EAAE3B,MAC3BM,IAAK,WACD,OAAQoF,KAAwBpF,IAAId,IAExCa,kBAIRqF,KAAKmwB,GAAWD,EAEVzwB,GAAUkwB,EAAkBpnB,GAClC,OAAO,IAAIonB,EAAKQ,GAAQR,EAAaA,EAAKJ,GAAWhnB,GAE/C9I,GAAUkwB,EAAkBpnB,EAAevN,GACjD,IAAsC+W,EAAlCO,GAAO,EAAGkH,EAAMmW,EAAKzc,GACzB,GAAMlY,aAAiBs0B,GAAct0B,aAAiB4jB,EAAA9iB,EAOlD,OAASwW,EAAMkH,IACPzH,EAAQ4d,EAAKvhB,WAAWkE,KACxBP,EAAM7Q,IAAIqH,EAAOvN,EAAMJ,IAAI0X,SARnC,OAASA,EAAMkH,IACPzH,EAAQ4d,EAAKvhB,WAAWkE,KACxBP,EAAM7Q,IAAIqH,EAAOvN,EAAMsX,WAa9B8d,UAAgBd,EAEzB7vB,YAAYuJ,EAAkBlG,GAC1BM,MAAM4F,EAAMlG,GACZ9C,KAAKsF,QAAU0D,EAAK5I,KAAK0C,SAASnC,OAAO,CAACC,EAAInE,EAAG3C,KAC5C8G,EAAGnE,EAAEnC,MAAQR,IAAM8G,GAAMA,EAAInG,OAAOW,OAAO,OAE1CqE,GAAUkwB,EAAepnB,GAC/B,OAAO,IAAI8nB,EAAWV,EAAaA,EAAKJ,GAAWhnB,GAE7C9I,GAAUkwB,EAAepnB,EAAevN,GAC9C,IAAmC+W,EAA/BzM,EAAUqqB,EAAKrqB,QACnB,GAAMtK,aAAiBs0B,GAAct0B,aAAiB4jB,EAAA9iB,EAOlD,IAAK,MAAMT,KAAOiK,GACVyM,EAAQ4d,EAAKvhB,WAAW9I,EAAQjK,MAChC0W,EAAM7Q,IAAIqH,EAAOvN,EAAMJ,IAAIS,SARnC,IAAK,MAAMA,KAAOiK,GACVyM,EAAQ4d,EAAKvhB,WAAW9I,EAAQjK,MAChC0W,EAAM7Q,IAAIqH,EAAOvN,EAAMK,WAa9B80B,UAAgBT,EAEzBjwB,YAAYuJ,EAA2ClG,EAA0BwtB,GAC7EltB,MAAM4F,EAAMlG,GACZ9C,KAAKswB,GAAWA,GAAY,EAC5BtwB,KAAKkJ,OAASF,EAAKkK,GAEhBzT,MAAMuJ,GACT,OAAO,IAAWhJ,KAAKkM,YAAalD,EAAMhJ,KAAKuvB,GAAWvvB,KAAKswB,IAEzD7wB,GAAckwB,EAAepnB,EAAegoB,EAAeT,GACjE,MAAM/d,EAAQ4d,EAAKvhB,WAAW7F,GAC9B,OAAOwJ,EAAQA,EAAMnX,IAAI+0B,EAAKW,IAAY,KAEpC7wB,GAAckwB,EAAepnB,EAAevN,EAAYu1B,EAAeT,GAC7E,MAAM/d,EAAQ4d,EAAKvhB,WAAW7F,GAC9B,OAAOwJ,EAAQA,EAAM7Q,IAAIyuB,EAAKW,GAAUt1B,GAAS,YAI5Cq1B,UAAmBF,EAGrB1wB,SACH,MAAM7E,EAAMoF,KAAK4vB,GACX5Z,KACA1Q,EAAUtF,KAAKsF,QACrB,IAAK,MAAMhL,KAAQgL,EACf0Q,EAAO1b,GAAQM,EAAIoF,KAAM1F,EAAMgL,EAAS,MAE5C,OAAO0Q,EAEDvW,GAAckwB,EAAkBt0B,EAAUiK,EAAcwqB,GAC9D,MAAM/d,EAAQ4d,EAAKvhB,WAAW9I,EAAQjK,IACtC,OAAO0W,EAAQA,EAAMnX,IAAI+0B,EAAKW,IAAY,KAEpC7wB,GAAckwB,EAAkBt0B,EAAUL,EAAYsK,EAAcwqB,GAC1E,MAAM/d,EAAQ4d,EAAKvhB,WAAW9I,EAAQjK,IACtC,OAAO0W,EAAQA,EAAM7Q,IAAIyuB,EAAKW,GAAUt1B,GAAS,iBAAAtB,EAAA6B,EAAAV,GAAA,aCrPzDjB,EAAAS,EAAA+L,EAAA,sBAAAgf,IAiBA,IAAAA,KAKAA,EAAAoL,GAQApL,EAAAqL,MAMArL,EAAAsL,GAAA,EAMAtL,EAAAuL,GAAA,EAMAvL,EAAAwL,GAAA,EAKAxL,EAAAyL,IACAC,GAAA,EACAC,GAAA,GAOA3L,EAAA4L,GAAA,IAAArtB,WAAA,GAMAyhB,EAAA6L,GAAA,IAAAxsB,aAAA2gB,EAAA4L,GAAAroB,QAMAyc,EAAA8L,GAAA,IAAAvsB,aAAAygB,EAAA4L,GAAAroB,QAMAyc,EAAA+L,GAAA,QAAAztB,YAAA,IAAAF,YAAA,MAAAmF,QAAA,GASAyc,EAAA1mB,KAAA,SAAAwH,EAAAiW,GAKAnc,KAAAkG,IAAA,EAAAA,EAMAlG,KAAAmc,KAAA,EAAAA,GAQAiJ,EAAA1mB,KAAAtD,OAAA,SAAA8K,EAAAiW,GAEA,UAAAjW,GAAA,GAAAiW,EAAAiJ,EAAA1mB,KAAA0yB,GAAA,IAAAhM,EAAA1mB,KAAAwH,EAAAiW,IAMAiJ,EAAA1mB,KAAA/C,UAAA01B,UAAA,WACA,OAAArxB,KAAAkG,MAAA,cAAAlG,KAAAmc,MAOAiJ,EAAA1mB,KAAA/C,UAAA21B,OAAA,SAAAjX,GACA,OAAAra,KAAAkG,KAAAmU,EAAAnU,KAAAlG,KAAAmc,MAAA9B,EAAA8B,MAOAiJ,EAAA1mB,KAAA0yB,GAAA,IAAAhM,EAAA1mB,KAAA,KAUA0mB,EAAAmM,GAAA,SAAAC,GACA,GAAAA,EAGAC,EAAAD,OAFA,IAAAC,EAAA,KASAzxB,KAAAyH,GAAA2d,EAAA6D,GAAAyI,GAAAD,GAQAzxB,KAAA2xB,GAAAF,EAQAzxB,KAAA4xB,GAAA,EAQA5xB,KAAA6xB,GAAA,KAQA7xB,KAAA8xB,GAAA,EAQA9xB,KAAA+xB,MAQA/xB,KAAAgyB,GAAA,EAQAhyB,KAAAiyB,MAQAjyB,KAAAkyB,GAAA,EAQAlyB,KAAAmyB,OAUA/M,EAAAmM,GAAA51B,UAAAy2B,GAAA,SAAAA,GACApyB,KAAAmyB,GAAAC,GAUAhN,EAAAmM,GAAA51B,UAAA02B,GAAA,WACA,OAAAryB,KAAAyH,IASA2d,EAAAmM,GAAA51B,UAAA22B,GAAA,WACA,OAAAtyB,KAAAyH,GAAAiB,KAAA2I,SAAArR,KAAAyH,GAAAI,KAAA7H,KAAAyH,GAAAI,KAAA7H,KAAAiI,OAaAmd,EAAAmM,GAAA51B,UAAAmP,GAAA,SAAAiC,EAAAwlB,GAEAxlB,EAAA/M,KAAA4xB,KACA5xB,KAAA4xB,GAAA7kB,GAQA,IAHA,IAAAylB,EAAA,IAAAxyB,KAAAyH,GAAAqV,KAAA9c,KAAA2xB,GAAAY,GAAAxlB,EAAA,EAGA/M,KAAA2xB,GAAAa,EAAAzlB,EAAAwlB,GAAA,CACA,IAAAE,EAAAzyB,KAAAyH,GAAAqV,KACA9c,KAAAyH,GAAA2d,EAAAmM,GAAAmB,GAAA1yB,KAAAyH,IACAzH,KAAA2xB,IAAA3xB,KAAAyH,GAAAqV,KAAA2V,EAGAzyB,KAAA2yB,GAAAH,IAMApN,EAAAmM,GAAA51B,UAAAg3B,GAAA,SAAAC,GACA,QAAA94B,EAAA,EAAiBA,EAAA84B,EAAe94B,IAChCkG,KAAAyH,GAAAorB,KAAA7yB,KAAA2xB,GAAA,IAOAvM,EAAAmM,GAAA51B,UAAAk3B,GAAA,SAAA73B,GACAgF,KAAAyH,GAAAorB,GAAA7yB,KAAA2xB,IAAA,EAAA32B,IAMAoqB,EAAAmM,GAAA51B,UAAAm3B,GAAA,SAAA93B,GACAgF,KAAAyH,GAAAqrB,GAAA9yB,KAAA2xB,IAAA,EAAA32B,IAMAoqB,EAAAmM,GAAA51B,UAAAo3B,GAAA,SAAA/3B,GACAgF,KAAAyH,GAAAsrB,GAAA/yB,KAAA2xB,IAAA,EAAA32B,IAMAoqB,EAAAmM,GAAA51B,UAAAoP,GAAA,SAAA/P,GACAgF,KAAAyH,GAAAsD,GAAA/K,KAAA2xB,IAAA,EAAA32B,IAMAoqB,EAAAmM,GAAA51B,UAAAq3B,GAAA,SAAAh4B,GACAgF,KAAAyH,GAAAurB,GAAAhzB,KAAA2xB,IAAA,EAAA32B,IAMAoqB,EAAAmM,GAAA51B,UAAAs3B,GAAA,SAAAj4B,GACAgF,KAAAyH,GAAAwrB,GAAAjzB,KAAA2xB,IAAA,EAAA32B,IAQAoqB,EAAAmM,GAAA51B,UAAAu3B,GAAA,SAAAl4B,GACAgF,KAAA8K,GAAA,KACA9K,KAAA6yB,GAAA73B,IAOAoqB,EAAAmM,GAAA51B,UAAAw3B,GAAA,SAAAn4B,GACAgF,KAAA8K,GAAA,KACA9K,KAAA8yB,GAAA93B,IAOAoqB,EAAAmM,GAAA51B,UAAAwN,GAAA,SAAAnO,GACAgF,KAAA8K,GAAA,KACA9K,KAAA+yB,GAAA/3B,IAOAoqB,EAAAmM,GAAA51B,UAAAy3B,GAAA,SAAAp4B,GACAgF,KAAA8K,GAAA,KACA9K,KAAA+K,GAAA/P,IAOAoqB,EAAAmM,GAAA51B,UAAA03B,GAAA,SAAAr4B,GACAgF,KAAA8K,GAAA,KACA9K,KAAAgzB,GAAAh4B,IAOAoqB,EAAAmM,GAAA51B,UAAA23B,GAAA,SAAAt4B,GACAgF,KAAA8K,GAAA,KACA9K,KAAAizB,GAAAj4B,IASAoqB,EAAAmM,GAAA51B,UAAA0M,GAAA,SAAAkrB,EAAAv4B,EAAAw4B,IACAxzB,KAAAmyB,IAAAn3B,GAAAw4B,KACAxzB,KAAAkzB,GAAAl4B,GACAgF,KAAAyzB,GAAAF,KASAnO,EAAAmM,GAAA51B,UAAAkN,GAAA,SAAA0qB,EAAAv4B,EAAAw4B,IACAxzB,KAAAmyB,IAAAn3B,GAAAw4B,KACAxzB,KAAAmzB,GAAAn4B,GACAgF,KAAAyzB,GAAAF,KASAnO,EAAAmM,GAAA51B,UAAAwM,GAAA,SAAAorB,EAAAv4B,EAAAw4B,IACAxzB,KAAAmyB,IAAAn3B,GAAAw4B,KACAxzB,KAAAmJ,GAAAnO,GACAgF,KAAAyzB,GAAAF,KASAnO,EAAAmM,GAAA51B,UAAAsO,GAAA,SAAAspB,EAAAv4B,EAAAw4B,IACAxzB,KAAAmyB,IAAAn3B,EAAAs2B,OAAAkC,KACAxzB,KAAAozB,GAAAp4B,GACAgF,KAAAyzB,GAAAF,KASAnO,EAAAmM,GAAA51B,UAAA+3B,GAAA,SAAAH,EAAAv4B,EAAAw4B,IACAxzB,KAAAmyB,IAAAn3B,GAAAw4B,KACAxzB,KAAAqzB,GAAAr4B,GACAgF,KAAAyzB,GAAAF,KASAnO,EAAAmM,GAAA51B,UAAAg4B,GAAA,SAAAJ,EAAAv4B,EAAAw4B,IACAxzB,KAAAmyB,IAAAn3B,GAAAw4B,KACAxzB,KAAAszB,GAAAt4B,GACAgF,KAAAyzB,GAAAF,KASAnO,EAAAmM,GAAA51B,UAAAoN,GAAA,SAAAwqB,EAAAv4B,EAAAw4B,IACAxzB,KAAAmyB,IAAAn3B,GAAAw4B,KACAxzB,KAAA0K,GAAA1P,GACAgF,KAAAyzB,GAAAF,KAWAnO,EAAAmM,GAAA51B,UAAAi4B,GAAA,SAAAL,EAAAv4B,EAAAw4B,GACAx4B,GAAAw4B,IACAxzB,KAAA6zB,GAAA74B,GACAgF,KAAAyzB,GAAAF,KAWAnO,EAAAmM,GAAA51B,UAAAk4B,GAAA,SAAAnsB,GACA,GAAAA,GAAA1H,KAAAiI,KACA,MAAApE,MAAA,mDAQAuhB,EAAAmM,GAAA51B,UAAAm4B,GAAA,WACA,GAAA9zB,KAAA+xB,GACA,MAAAluB,MAAA,0DASAuhB,EAAAmM,GAAA51B,UAAA83B,GAAA,SAAAF,GACAvzB,KAAA6xB,GAAA0B,GAAAvzB,KAAAiI,MAMAmd,EAAAmM,GAAA51B,UAAAsM,GAAA,WACA,OAAAjI,KAAAyH,GAAAqV,KAAA9c,KAAA2xB,IAeAvM,EAAAmM,GAAAmB,GAAA,SAAAjrB,GACA,IAAAgrB,EAAAhrB,EAAAqV,KAGA,cAAA2V,EACA,MAAA5uB,MAAA,uDAGA,IAAAkwB,EAAAtB,GAAA,EACAuB,EAAA5O,EAAA6D,GAAAyI,GAAAqC,GAGA,OAFAC,EAAAjK,GAAAgK,EAAAtB,GACAuB,EAAAtrB,KAAAxH,IAAAuG,EAAAiB,KAAAqrB,EAAAtB,GACAuB,GASA5O,EAAAmM,GAAA51B,UAAA+O,GAAA,SAAAzC,GACAjI,KAAA8K,GAAAsa,EAAAuL,GAAA,GACA3wB,KAAA+yB,GAAA/yB,KAAAiI,OAAAmd,EAAAuL,KAWAvL,EAAAmM,GAAA51B,UAAAoM,GAAA,SAAAksB,GACAj0B,KAAA8zB,KACA,MAAA9zB,KAAA6xB,KACA7xB,KAAA6xB,OAEA7xB,KAAA8xB,GAAAmC,EACA,QAAAn6B,EAAA,EAAiBA,EAAAm6B,EAAen6B,IAChCkG,KAAA6xB,GAAA/3B,GAAA,EAEAkG,KAAA+xB,MACA/xB,KAAAgyB,GAAAhyB,KAAAiI,MAQAmd,EAAAmM,GAAA51B,UAAAqM,GAAA,WACA,SAAAhI,KAAA6xB,KAAA7xB,KAAA+xB,GACA,MAAAluB,MAAA,qDAGA7D,KAAAmJ,GAAA,GAKA,IAJA,IAAA+qB,EAAAl0B,KAAAiI,KAGAnO,EAAAkG,KAAA8xB,GAAA,EACQh4B,GAAA,MAAAkG,KAAA6xB,GAAA/3B,GAA+BA,KAIvC,IAHA,IAAAq6B,EAAAr6B,EAAA,EAGQA,GAAA,EAAQA,IAEhBkG,KAAAmzB,GAAA,GAAAnzB,KAAA6xB,GAAA/3B,GAAAo6B,EAAAl0B,KAAA6xB,GAAA/3B,GAAA,GAIAkG,KAAAmzB,GAAAe,EAAAl0B,KAAAgyB,IACA,IAAAxY,GAAA2a,EAFA,GAEA/O,EAAAsL,GACA1wB,KAAAmzB,GAAA3Z,GAGA,IAAA4a,EAAA,EACAC,EAAAr0B,KAAA2xB,GACA2C,EACA,IAAAx6B,EAAA,EAAaA,EAAAkG,KAAAiyB,GAAA/oB,OAAyBpP,IAAA,CACtC,IAAAy6B,EAAAv0B,KAAAyH,GAAAqV,KAAA9c,KAAAiyB,GAAAn4B,GACA,GAAA0f,GAAAxZ,KAAAyH,GAAAa,GAAAisB,GAAA,CACA,QAAAl3B,EAAA+nB,EAAAsL,GAA4CrzB,EAAAmc,EAASnc,GAAA+nB,EAAAsL,GACrD,GAAA1wB,KAAAyH,GAAAa,GAAA+rB,EAAAh3B,IAAA2C,KAAAyH,GAAAa,GAAAisB,EAAAl3B,GACA,SAAAi3B,EAGAF,EAAAp0B,KAAAiyB,GAAAn4B,GACA,OAqBA,OAjBAs6B,GAGAp0B,KAAA2xB,GAAA3xB,KAAAyH,GAAAqV,KAAAoX,EAGAl0B,KAAAyH,GAAAsrB,GAAA/yB,KAAA2xB,GAAAyC,EAAAF,KAIAl0B,KAAAiyB,GAAAvjB,KAAA1O,KAAAiI,MAGAjI,KAAAyH,GAAAsrB,GAAA/yB,KAAAyH,GAAAqV,KAAAoX,EAAAl0B,KAAAiI,KAAAisB,IAGAl0B,KAAA+xB,MACAmC,GAUA9O,EAAAmM,GAAA51B,UAAAuP,GAAA,SAAAspB,EAAAC,GACA,GAAAA,EAAA,CACA,IAAAC,EAAAD,EAGA,GAFAz0B,KAAA8K,GAAA9K,KAAA4xB,GAAAxM,EAAAuL,GACAvL,EAAAwL,IACA8D,EAAAxrB,QAAAkc,EAAAwL,GACA,MAAA/sB,MAAA,+CACAuhB,EAAAwL,IAEA,QAAA92B,EAAAsrB,EAAAwL,GAAA,EAAwD92B,GAAA,EAAQA,IAChEkG,KAAA6yB,GAAA6B,EAAAlY,WAAA1iB,IAGAkG,KAAA8K,GAAA9K,KAAA4xB,GAAAxM,EAAAuL,IACA3wB,KAAA0K,GAAA8pB,GACAx0B,KAAAyH,GAAAsiB,GAAA/pB,KAAA2xB,KAWAvM,EAAAmM,GAAA51B,UAAAg5B,GAAA,SAAA9G,EAAA1J,GACA,IAAAyQ,EAAA50B,KAAAyH,GAAAqV,KAAA+Q,EACAgH,EAAAD,EAAA50B,KAAAyH,GAAAG,GAAAgtB,GAIA,GAHA,GAAA50B,KAAAyH,GAAAa,GAAAusB,EAAA1Q,GAIA,MAAAtgB,MAAA,sBAAAsgB,EAAA,iBAaAiB,EAAAmM,GAAA51B,UAAAsN,GAAA,SAAA6rB,EAAAC,EAAA7c,GACAlY,KAAA8zB,KACA9zB,KAAAkyB,GAAA6C,EACA/0B,KAAA8K,GAAAsa,EAAAuL,GAAAmE,EAAAC,GACA/0B,KAAA8K,GAAAoN,EAAA4c,EAAAC,IAUA3P,EAAAmM,GAAA51B,UAAAyN,GAAA,WAEA,OADApJ,KAAA+yB,GAAA/yB,KAAAkyB,IACAlyB,KAAAiI,MAWAmd,EAAAmM,GAAA51B,UAAAq5B,GAAA,SAAAl5B,GACA,GAAAA,aAAA0H,WACA,IAAA+kB,EAAAzsB,MAEA,CAAAysB,KAGA,IAHA,IACAzuB,EAAA,EAEAA,EAAAgC,EAAAoN,QAAA,CACA,IAAA+rB,EAGAj5B,EAAAF,EAAA0gB,WAAA1iB,MAEAm7B,EADAj5B,EAAA,OAAAA,GAAA,MACAA,GAGAA,GAAA,IADAF,EAAA0gB,WAAA1iB,MACA,UAIA,IACAyuB,EAAA7Z,KAAAumB,IAEAA,EAAA,KACA1M,EAAA7Z,KAAAumB,GAAA,WAEAA,EAAA,MACA1M,EAAA7Z,KAAAumB,GAAA,WAEA1M,EAAA7Z,KACAumB,GAAA,SACAA,GAAA,WAEA1M,EAAA7Z,KAAAumB,GAAA,WAEA1M,EAAA7Z,KAAA,GAAAumB,EAAA,OAKAj1B,KAAAkzB,GAAA,GACAlzB,KAAAiJ,GAAA,EAAAsf,EAAArf,OAAA,GACAlJ,KAAAyH,GAAAsiB,GAAA/pB,KAAA2xB,IAAApJ,EAAArf,QACApP,EAAA,UAAAmO,EAAAjI,KAAA2xB,GAAAjpB,EAAA1I,KAAAyH,GAAAiB,KAA+D5O,EAAAyuB,EAAArf,OAAiBpP,IAChF4O,EAAAT,KAAAsgB,EAAAzuB,GAEA,OAAAkG,KAAAoJ,MAUAgc,EAAAmM,GAAA51B,UAAAoO,GAAA,SAAA7D,EAAAiW,GACA,OAAAiJ,EAAA1mB,KAAAtD,OAAA8K,EAAAiW,IAUAiJ,EAAA6D,GAAA,SAAAvgB,GAKA1I,KAAAk1B,GAAAxsB,EAMA1I,KAAAm1B,GAAA,GASA/P,EAAA6D,GAAAyI,GAAA,SAAAkB,GACA,WAAAxN,EAAA6D,GAAA,IAAAzlB,WAAAovB,KAQAxN,EAAA6D,GAAAttB,UAAA+M,GAAA,WACA,OAAA1I,KAAAk1B,IAQA9P,EAAA6D,GAAAttB,UAAAkM,GAAA,WACA,OAAA7H,KAAAm1B,IAQA/P,EAAA6D,GAAAttB,UAAAouB,GAAA,SAAAliB,GACA7H,KAAAm1B,GAAAttB,GAQAud,EAAA6D,GAAAttB,UAAAmhB,GAAA,WACA,OAAA9c,KAAAk1B,GAAAhsB,QAOAkc,EAAA6D,GAAAttB,UAAAyM,GAAA,SAAAH,GACA,OAAAjI,KAAAmK,GAAAlC,IAAA,QAOAmd,EAAA6D,GAAAttB,UAAAwO,GAAA,SAAAlC,GACA,OAAAjI,KAAAk1B,GAAAjtB,IAOAmd,EAAA6D,GAAAttB,UAAA2M,GAAA,SAAAL,GACA,OAAAjI,KAAAo1B,GAAAntB,IAAA,QAOAmd,EAAA6D,GAAAttB,UAAAy5B,GAAA,SAAAntB,GACA,OAAAjI,KAAAk1B,GAAAjtB,GAAAjI,KAAAk1B,GAAAjtB,EAAA,OAOAmd,EAAA6D,GAAAttB,UAAAiM,GAAA,SAAAK,GACA,OAAAjI,KAAAk1B,GAAAjtB,GAAAjI,KAAAk1B,GAAAjtB,EAAA,MAAAjI,KAAAk1B,GAAAjtB,EAAA,OAAAjI,KAAAk1B,GAAAjtB,EAAA,QAOAmd,EAAA6D,GAAAttB,UAAA05B,GAAA,SAAAptB,GACA,OAAAjI,KAAA4H,GAAAK,KAAA,GAOAmd,EAAA6D,GAAAttB,UAAAmO,GAAA,SAAA7B,GACA,WAAAmd,EAAA1mB,KAAAsB,KAAA4H,GAAAK,GAAAjI,KAAA4H,GAAAK,EAAA,KAOAmd,EAAA6D,GAAAttB,UAAA25B,GAAA,SAAArtB,GACA,WAAAmd,EAAA1mB,KAAAsB,KAAAq1B,GAAAptB,GAAAjI,KAAAq1B,GAAAptB,EAAA,KAOAmd,EAAA6D,GAAAttB,UAAA45B,GAAA,SAAAttB,GAEA,OADAmd,EAAA4L,GAAA,GAAAhxB,KAAA4H,GAAAK,GACAmd,EAAA6L,GAAA,IAOA7L,EAAA6D,GAAAttB,UAAA65B,GAAA,SAAAvtB,GAGA,OAFAmd,EAAA4L,GAAA5L,EAAA+L,GAAA,KAAAnxB,KAAA4H,GAAAK,GACAmd,EAAA4L,GAAA5L,EAAA+L,GAAA,KAAAnxB,KAAA4H,GAAAK,EAAA,GACAmd,EAAA8L,GAAA,IAOA9L,EAAA6D,GAAAttB,UAAAk3B,GAAA,SAAA5qB,EAAAjN,GACAgF,KAAAk1B,GAAAjtB,GAA0C1M,GAO1C6pB,EAAA6D,GAAAttB,UAAA85B,GAAA,SAAAxtB,EAAAjN,GACAgF,KAAAk1B,GAAAjtB,GAAAjN,GAOAoqB,EAAA6D,GAAAttB,UAAAm3B,GAAA,SAAA7qB,EAAAjN,GACAgF,KAAAk1B,GAAAjtB,GAAAjN,EACAgF,KAAAk1B,GAAAjtB,EAAA,GAAAjN,GAAA,GAOAoqB,EAAA6D,GAAAttB,UAAA+5B,GAAA,SAAAztB,EAAAjN,GACAgF,KAAAk1B,GAAAjtB,GAAAjN,EACAgF,KAAAk1B,GAAAjtB,EAAA,GAAAjN,GAAA,GAOAoqB,EAAA6D,GAAAttB,UAAAo3B,GAAA,SAAA9qB,EAAAjN,GACAgF,KAAAk1B,GAAAjtB,GAAAjN,EACAgF,KAAAk1B,GAAAjtB,EAAA,GAAAjN,GAAA,EACAgF,KAAAk1B,GAAAjtB,EAAA,GAAAjN,GAAA,GACAgF,KAAAk1B,GAAAjtB,EAAA,GAAAjN,GAAA,IAOAoqB,EAAA6D,GAAAttB,UAAAg6B,GAAA,SAAA1tB,EAAAjN,GACAgF,KAAAk1B,GAAAjtB,GAAAjN,EACAgF,KAAAk1B,GAAAjtB,EAAA,GAAAjN,GAAA,EACAgF,KAAAk1B,GAAAjtB,EAAA,GAAAjN,GAAA,GACAgF,KAAAk1B,GAAAjtB,EAAA,GAAAjN,GAAA,IAOAoqB,EAAA6D,GAAAttB,UAAAoP,GAAA,SAAA9C,EAAAjN,GACAgF,KAAA+yB,GAAA9qB,EAAAjN,EAAAkL,KACAlG,KAAA+yB,GAAA9qB,EAAA,EAAAjN,EAAAmhB,OAOAiJ,EAAA6D,GAAAttB,UAAAi6B,GAAA,SAAA3tB,EAAAjN,GACAgF,KAAA21B,GAAA1tB,EAAAjN,EAAAkL,KACAlG,KAAA21B,GAAA1tB,EAAA,EAAAjN,EAAAmhB,OAOAiJ,EAAA6D,GAAAttB,UAAAq3B,GAAA,SAAA/qB,EAAAjN,GACAoqB,EAAA6L,GAAA,GAAAj2B,EACAgF,KAAA+yB,GAAA9qB,EAAAmd,EAAA4L,GAAA,KAOA5L,EAAA6D,GAAAttB,UAAAs3B,GAAA,SAAAhrB,EAAAjN,GACAoqB,EAAA8L,GAAA,GAAAl2B,EACAgF,KAAA+yB,GAAA9qB,EAAAmd,EAAA4L,GAAA5L,EAAA+L,GAAA,MACAnxB,KAAA+yB,GAAA9qB,EAAA,EAAAmd,EAAA4L,GAAA5L,EAAA+L,GAAA,OAWA/L,EAAA6D,GAAAttB,UAAAuM,GAAA,SAAAV,EAAAquB,GACA,IAAAhE,EAAArqB,EAAAxH,KAAA4H,GAAAJ,GACA,OAAAquB,EAAA71B,KAAAsI,GAAAupB,GAAA7xB,KAAAsI,GAAAupB,EAAAgE,GAAA,GAUAzQ,EAAA6D,GAAAttB,UAAAyO,GAAA,SAAA1Q,EAAAuO,GAGA,OAFAvO,EAAA8N,GAAAS,EAAAjI,KAAA4H,GAAAK,GACAvO,EAAA+N,GAAAzH,KACAtG,GAgBA0rB,EAAA6D,GAAAttB,UAAA4N,GAAA,SAAAtB,EAAA6tB,GACA7tB,GAAAjI,KAAA4H,GAAAK,GAEA,IAAAiB,EAAAlJ,KAAA4H,GAAAK,GACA+N,EAAA,GACAlc,EAAA,EAIA,GAFAmO,GAAAmd,EAAAuL,GAEAmF,IAAA1Q,EAAAyL,GAAAkF,GACA,OAAA/1B,KAAAk1B,GAAA7jB,SAAApJ,IAAAiB,GAGA,KAAApP,EAAAoP,GAAA,CACA,IAAA+rB,EAGAj5B,EAAAgE,KAAAmK,GAAAlC,EAAAnO,KACA,GAAAkC,EAAA,IACAi5B,EAAAj5B,MACK,CACL,IAAAM,EAAA0D,KAAAmK,GAAAlC,EAAAnO,KACA,GAAAkC,EAAA,IACAi5B,GACA,GAAAj5B,IAAA,EACA,GAAAM,MACO,CACP,IAAAlC,EAAA4F,KAAAmK,GAAAlC,EAAAnO,KAEAm7B,EADAj5B,EAAA,KAEA,GAAAA,IAAA,IACA,GAAAM,IAAA,EACA,GAAAlC,GAIA,EAAA4B,IAAA,IACA,GAAAM,IAAA,IACA,GAAAlC,IAAA,EACA,GALA4F,KAAAmK,GAAAlC,EAAAnO,MAYAkc,GADAif,EAAA,MACAe,OAAAC,aAAAhB,GAGAe,OAAAC,aACA,QAFAhB,GAAA,QAEA,IACA,YAAAA,IAIA,OAAAjf,GAQAoP,EAAA6D,GAAAttB,UAAAqO,GAAA,SAAA/B,GACA,OAAAA,EAAAjI,KAAA4H,GAAAK,IASAmd,EAAA6D,GAAAttB,UAAA6M,GAAA,SAAAP,GACA,OAAAA,EAAAjI,KAAA4H,GAAAK,GAAAmd,EAAAuL,IASAvL,EAAA6D,GAAAttB,UAAA8M,GAAA,SAAAR,GACA,OAAAjI,KAAA4H,GAAAK,EAAAjI,KAAA4H,GAAAK,KAOAmd,EAAA6D,GAAAttB,UAAAu6B,GAAA,SAAAC,GACA,GAAAA,EAAAjtB,QAAAkc,EAAAwL,GACA,MAAA/sB,MAAA,+CACAuhB,EAAAwL,IAEA,QAAA92B,EAAA,EAAiBA,EAAAsrB,EAAAwL,GAAwC92B,IACzD,GAAAq8B,EAAA3Z,WAAA1iB,IAAAkG,KAAAoI,GAAApI,KAAAm1B,GAAA/P,EAAAuL,GAAA72B,GACA,SAGA,UAUAsrB,EAAA6D,GAAAttB,UAAAoO,GAAA,SAAA7D,EAAAiW,GACA,OAAAiJ,EAAA1mB,KAAAtD,OAAA8K,EAAAiW,6KCzqCAia,EAAAx8B,EAAA,IAuBO,MAAMy8B,EAAa,CAAEC,GACxBA,EAAQ5O,GAAOpsB,KAAKg7B,GADE,CAExB,IAAIF,EAAA95B,EAAY,UAELi6B,EAAa,CAAEC,GACxBA,EAAQC,GAAOn7B,KAAKk7B,GADE,CAExB,IAAIJ,EAAAp6B,EAAY,gBAEI06B,EAIlBj3B,YAAYuJ,GACRhJ,KAAKkJ,OAASF,EAAKE,OACnBlJ,KAAK0N,OAAS1E,EAAK0E,OAEhBjO,MAAMuJ,GACT,OAAO,IAAWhJ,KAAKkM,YAAalD,GAEjCvJ,UACH,SAEGA,UACH,UAAWO,MAERP,IAAI8I,GACP,OAAOvI,KAAK22B,GAAQ32B,KAAK0N,OAAQnF,EAAOvI,KAAKkO,cAE1CzO,IAAI8I,EAAevN,GACtB,OAAOgF,KAAK42B,GAAQ52B,KAAK0N,OAAQnF,EAAOvN,EAAOgF,KAAKkO,cAEjDzO,EAAE3E,OAAOuR,YACZ,MAAMzR,EAAMoF,KAAK22B,GAASztB,EAASlJ,KAAKkJ,OAClCwE,EAAS1N,KAAK0N,OAAQQ,EAAelO,KAAKkO,aAChD,IAAK,IAAI3F,GAAS,IAAKA,EAAQW,SACrBtO,EAAI8S,EAAQnF,EAAO2F,GAG1BzO,QAAQ+T,GACX,IAAIjL,EAAQ,EACZ,IAAK,IAAIvN,KAASgF,KAAM,CACpB,GAAIhF,IAAUwY,EAAU,OAAOjL,IAC7BA,EAGN,OAAQ,SAMMsuB,UAAkEH,EACpFj3B,YAAYuJ,GACR5F,MAAM4F,GACNhJ,KAAKkJ,OAASF,EAAKE,OACnBlJ,KAAKkO,aAAelF,EAAKkF,oBAIpB4oB,UAAqCD,EAE9Cp3B,YAAYuJ,GACR5F,MAAM4F,GACNhJ,KAAK0N,OAASjT,OAAAmkB,EAAAllB,EAAAe,CAAcuO,EAAa0E,QAEtCjO,WAA4B8I,GAC/B,OAAiB,IAAVA,EAAevI,KAAK0N,OAAuB,KAE5CjO,GAAQiO,EAAmBnF,EAAe2F,GAChD,OAAOR,EAAOL,MAAMa,EAAa3F,GAAQ2F,EAAa3F,EAAQ,IAExD9I,GAAQiO,EAAmBnF,EAAevN,EAAkBkT,GAClE,IAAIoE,GAAO,EACPrK,EAASiG,EAAa3F,GACtBuE,EAAMQ,KAAKC,IAAIvS,EAAMkO,OAAQgF,EAAa3F,EAAQ,GAAKN,GAC3D,KAAOA,EAAS6E,GACZY,EAAOxM,IAAI+G,IAAUjN,EAAMJ,MAAM0X,WAKhCykB,UAA8CL,EAGvDj3B,YAAYuJ,GACR5F,MAAM4F,GACNhJ,KAAK+M,KAAO/D,EAAK5I,KAAKsF,SACtB1F,KAAK0N,OAASjT,OAAAmkB,EAAAllB,EAAAe,CAAauO,EAAK0E,QAE7BjO,WAA4B8I,GAC/B,OAAiB,IAAVA,EAAevI,KAAK0N,OAAuB,KAE5CjO,GAAQiO,EAAmBnF,GACjC,MAAMwE,EAAO/M,KAAK+M,KAClB,OAAOW,EAAOL,MAAM9E,GAASwE,EAAMxE,EAAQwE,GAErCtN,GAAQiO,EAAmBnF,EAAevN,GAChD,IAAI+R,EAAO/M,KAAK+M,KAChB,IAAK,IAAIuF,GAAO,EAAGrK,EAASM,EAAQwE,IAAQuF,EAAMvF,GAC9CW,EAAOxM,IAAI+G,EAASqK,EAAKtX,EAAMJ,MAAM0X,WAKpC0kB,UAAmBH,EAClBp3B,GAAQiO,EAAoBnF,EAAe2F,GACjD,OAAOR,EAAO2D,SAASnD,EAAa3F,GAAQ2F,EAAa3F,EAAQ,IAE3D9I,GAAQiO,EAAoBnF,EAAevN,EAAmBkT,GACpE,MAAMjG,EAASiG,EAAa3F,GAC5BmF,EAAOxM,IAAIlG,EAAMqW,SAAS,EAAGnD,EAAa3F,EAAQ,GAAKN,GAASA,UAI3DgvB,UAAiBJ,EAChBp3B,GAAQiO,EAAoBnF,EAAe2F,GACjD,OAAOqoB,EAAW7oB,EAAO2D,SAASnD,EAAa3F,GAAQ2F,EAAa3F,EAAQ,KAEtE9I,GAAQiO,EAAoBnF,EAAevN,EAAekT,GAChE,MAAMjG,EAASiG,EAAa3F,GAC5BmF,EAAOxM,IAAIm1B,EAAWr7B,GAAOqW,SAAS,EAAGnD,EAAa3F,EAAQ,GAAKN,GAASA,mEC/IpF,IAAA2W,EAAAhlB,EAAA,SAqBas9B,EAKTz3B,YAAYuJ,GACRhJ,KAAKwM,aAAexD,EAAKwD,aACzBxM,KAAK0S,aAAe1J,EAAK0J,aAEtBjT,MAAMuJ,GACT,OAAO,IAAIkuB,EAAYluB,GAEpBvJ,EAAE3E,OAAOuR,YACZ,IAAK,MAAMqS,KAAU1e,KAAKwM,mBACfkS,EAGRjf,WAA0C8I,GAC7C,OAAOA,EAAQ,EAAI,MACZvI,KAAKuvB,KAAcvvB,KAAKuvB,QAAiBhnB,KACzCvI,KAAKuvB,GAAUhnB,GAASqW,EAAA9iB,EAAOiQ,UAClB/L,KAAKwM,aACPtM,IAAKuO,GAAUA,EAAML,WAAc7F,MAElD9I,QAAQ8I,GAEX,IAAIkE,EAAUzM,KAAK0S,aAAc4G,EAAM,EACnCN,EAAM,EAAGme,EAAM,EAAGle,EAAMxM,EAAQvD,OAAS,EAC7C,KAAOX,EAAQkE,EAAQwM,IAAQ1Q,IAAU+Q,EAAM7M,EAAQuM,KAAO,CAC1D,GAAIA,EAAM,IAAMC,EACZ,OAAOjZ,KAAKwM,aAAawM,GAAK7M,QAAQ5D,EAAQ+Q,GAGlD/Q,GAASkE,EADT0qB,EAAMne,GAAQC,EAAMD,GAAO,EAAK,GACPA,EAAMme,EAAQle,EAAMke,EAEjD,SAEG13B,IAAI8I,GAEP,IAAIkE,EAAUzM,KAAK0S,aAAc4G,EAAM,EACnCN,EAAM,EAAGme,EAAM,EAAGle,EAAMxM,EAAQvD,OAAS,EAC7C,KAAOX,EAAQkE,EAAQwM,IAAQ1Q,IAAU+Q,EAAM7M,EAAQuM,KAAO,CAC1D,GAAIA,EAAM,IAAMC,EACZ,OAAOjZ,KAAKwM,aAAawM,GAAKpe,IAAI2N,EAAQ+Q,GAG9C/Q,GAASkE,EADT0qB,EAAMne,GAAQC,EAAMD,GAAO,EAAK,GACPA,EAAMme,EAAQle,EAAMke,EAEjD,OAAO,KAEJ13B,IAAI8I,EAAevN,GAEtB,IAAIyR,EAAUzM,KAAK0S,aAAc4G,EAAM,EACnCN,EAAM,EAAGme,EAAM,EAAGle,EAAMxM,EAAQvD,OAAS,EAC7C,KAAOX,EAAQkE,EAAQwM,IAAQ1Q,IAAU+Q,EAAM7M,EAAQuM,KAAO,CAC1D,GAAIA,EAAM,IAAMC,EACZ,OAAOjZ,KAAKwM,aAAawM,GAAK9X,IAAIqH,EAAQ+Q,EAAKte,GAGnDuN,GAASkE,EADT0qB,EAAMne,GAAQC,EAAMD,GAAO,EAAK,GACPA,EAAMme,EAAQle,EAAMke,GAG9C13B,UACH,MAAM8O,EAASvO,KAAKwM,aACd4qB,EAAY7oB,EAAOrF,OACzB,GAAkB,IAAdkuB,EACA,OAAO7oB,EAAO,GAAGvC,UAErB,IAAI0a,EAAcvjB,MAAWi0B,GACzBC,EAAa,EAAGn0B,EAAiBC,MACrC,IAAK,IAAIoF,GAAS,IAAKA,EAAQ6uB,GAAY,CACvC,IAAIvrB,EAAS0C,EAAOhG,GAAOyD,UAC3BqrB,IAAe3Q,EAAQne,GAASsD,GAAQ3C,OACpChG,IAAc2I,EAAOK,cACrBhJ,EAAY2I,EAAOK,aAG3B,IAAIorB,EAAS,IAAIp0B,EAAUm0B,GACvBE,EAAYr0B,IAAcC,MAAQq0B,EAAWC,EACjD,IAAK,IAAIlvB,GAAS,EAAGN,EAAS,IAAKM,EAAQ6uB,GACvCnvB,EAASsvB,EAAU7Q,EAAQne,GAAQ+uB,EAAQrvB,GAE/C,OAAOqvB,EAEJ73B,QAAQ+T,GACX,IAAgBwC,EAAZ/N,EAAS,EACb,IAAK,MAAMyW,KAAU1e,KAAKwM,aAAc,CAEpC,IAAgB,KADhBwJ,EAAS0I,EAAOtS,QAAQoH,IACH,OAAOwC,EAAS/N,EACrCA,GAAUyW,EAAOxV,OAGrB,OAAQ,GAIhB,SAASuuB,EAAc5rB,EAAoByrB,EAAoB/uB,GAC3D,OAAO+uB,EAAOp2B,IAAI2K,EAAQtD,IAAUA,EAAQsD,EAAO3C,OAGvD,SAASsuB,EAAS3rB,EAAeyrB,EAAe/uB,GAC5C,IAAImvB,EAASnvB,EAAQ,EAAGovB,GAAU,EAAGC,EAAS/rB,EAAO3C,OACrD,OAASyuB,EAASC,GACdN,IAASI,GAAU7rB,EAAO8rB,GAE9B,OAAOD,yKC9HXG,EAAAj+B,EAAA,IAoCM,SAAWk+B,EAAgBjK,SACvBkK,EAAiBlK,EAAM3W,QAAQvO,OACrC,IAAK,MAAO7C,EAAIqe,KAAU0J,EAAM3W,OAAOpX,aAAc,CACjD,MAAMiT,EAAM8a,EAAMmK,UAAU7T,EAAM7pB,MAC9ByY,GAAOA,EAAIlN,mBACLoyB,EAAyBllB,EAAIlN,WAAYC,GAAI6C,QAG3D,IAAK,MAAMyZ,KAAeyL,EAAMvH,cACtB4R,EAAqB9V,GAAazZ,OAI1C,SAAWwvB,EAActK,GAE3B,MAAM5W,KACAD,KAGN,IACIohB,EADAzvB,EAAS,IAAInF,WAAW/I,OAAA49B,EAAAr8B,EAAAvB,CAAM69B,EAAAr8B,EAAa,IAC3ByU,EAAa/H,EAAO+H,WACxC/H,EAAOzH,IAAIo3B,EAAAt8B,EAAO,SACZ2M,IAGH4vB,GAAAH,EAAgBzvB,UAAWovB,EAAiBlK,EAAM3W,SACrDxG,GAAc/H,EAAO+H,iBACf/H,EAEN,IAAK,MAAO7C,EAAIqe,KAAU0J,EAAM3W,OAAOpX,aAAc,CACjD,MAAMiT,EAAM8a,EAAMmK,UAAU7T,EAAM7pB,MAC9ByY,GAAOA,EAAIlN,eACR0yB,GAAAH,EAAgBzvB,UAAWsvB,EAAyBllB,EAAIlN,WAAYC,IACvEkR,EAAkBtI,KAAK,IAAI8pB,EAAAn+B,EAAU+9B,EAAgBzvB,EAAO+H,WAAYA,IACxEA,GAAc/H,EAAO+H,iBACf/H,GAGd,IAAK,MAAMyZ,KAAeyL,EAAMvH,UACzBiS,GAAAH,EAAgBzvB,UAAWuvB,EAAqB9V,IACnDnL,EAAcvI,KAAK,IAAI8pB,EAAAn+B,EAAU+9B,EAAgBzvB,EAAO+H,WAAYA,IACpEA,GAAc/H,EAAO+H,iBACf/H,IAIP4vB,GAAAH,EAAgBzvB,UAkDjB,SAA0BkhB,GAC5B,MAAMvtB,EAAI,IAAIi1B,EACdvH,EAAQyO,GAAmBn8B,EAoZ/B,SAAqBA,EAAYsxB,GAC7B,IAAI8K,EAAeC,EAAYr8B,EAAGsxB,EAAK1W,QACnCD,EAAiB2W,EAAK3W,OACtBD,EAAqB4W,EAAK5W,OAC1B4hB,EACA5O,EAAQ6O,GAAyBv8B,EAAG2a,EAAc/N,SAC9C4vB,GAAW7hB,EAAgB8hB,GAAOC,EAAW18B,EAAGy8B,KACpDz8B,EAAE8M,KAEF6vB,EACAjP,EAAQkP,GAAwB58B,EAAG0a,EAAkB9N,SACjD4vB,GAAW9hB,EAAoBmiB,GAAOH,EAAW18B,EAAG68B,KACxD78B,EAAE8M,KAEN,OACI4gB,EAAQoP,GAAY98B,IACpB0tB,EAAQqP,GAAU/8B,EAAGo8B,IACrB1O,EAAQsP,GAAWh9B,EAAGsxB,EAAK1W,OAAOtX,IAClCoqB,EAAQuP,GAAiBj9B,EAAGs8B,IAC5B5O,EAAQwP,GAAgBl9B,EAAG28B,IAC3BjP,EAAQyP,GAAUn9B,GApB1B,CApZ8CA,EAAGutB,IAE7C,MAAM6P,EAAcp9B,EAAEg2B,KAEtB,OAASiG,GADcmB,EAAYhpB,WACV/H,OAAQ+wB,GAN/B,CAlD4C,IAAIlB,EAAAj8B,EAAOya,EAAmBC,EAAe4W,EAAM3W,gBAC3FvO,EAGNA,EAAS,IAAInF,WAAW80B,EAAA/7B,GACxB,IAAIgd,SAAS5Q,EAAOA,QAAQgxB,SAAS,EAAGvB,EAAgBwB,IACxDjxB,EAAOzH,IAAIo3B,EAAAt8B,EAAO2M,EAAO+H,WAAa4nB,EAAAr8B,SAChC0M,EAGJ,SAAUuvB,EAAqB9V,GACjC,MAAM1R,WAAEA,EAAUmpB,GAAEhS,EAAU/P,GAAEJ,EAAOoiB,GAAEC,QAAoBC,GAAwBC,GAAiB7X,GAGtG,OAAO2V,EAFQ,IAAIS,EAAAn8B,EAAoB69B,EAAA19B,EAAgBqD,GAAIuiB,EAAYlZ,OAAQ2e,EAAYkS,GAC5EI,EAA0BzpB,EAAYgH,EAASqiB,IAI5D,SAAU9B,EAAyBpyB,EAAoBC,EAAmB6R,MAC5E,MAAMjH,WAAEA,EAAUmpB,GAAEhS,EAAU/P,GAAEJ,EAAOoiB,GAAEC,QAAoBC,GAAwBC,GAAiBG,EAAAp+B,EAAYiR,MAAMpH,KAClHw0B,EAAS,IAAI7B,EAAAn8B,EAAoB69B,EAAA19B,EAAgBqD,GAAIgG,EAAWqD,OAAQ2e,EAAYkS,GAG1F,OAAOhC,EAFQ,IAAIS,EAAAl8B,EAAgB49B,EAAA19B,EAAgBqD,GAAIw6B,EAAQv0B,EAAI6R,GACpDwiB,EAA0BzpB,EAAYgH,EAASqiB,IAI5D,SAAUhC,EAAiB1U,EAAkBra,GAC/C,MAAM1M,EAAI,IAAIi1B,EACd5G,EAAS2P,GAAoBh+B,EA6cjC,SAAsBA,EAAYsxB,GAC9B,IAAI2M,EAAsB,EAQ1B,OAPI/B,EAAAv8B,EAAQwuB,GAASmD,GACjB2M,EAAsB5B,EAAYr8B,EAAGsxB,GAC9B4K,EAAAv8B,EAAQynB,GAAckK,GAC7B2M,EAAsBC,GAAiBl+B,EAAGsxB,GACnC4K,EAAAv8B,EAAQ4nB,GAAkB+J,KACjC2M,EAmER,SAA8Bj+B,EAAYsxB,GACtC,MAAM9K,EAAa0X,GAAiBl+B,EAAGsxB,EAAK5kB,MAC5C,OACIgiB,EAAiByP,GAAqBn+B,IACtC0uB,EAAiB0P,GAAMp+B,EAAG,IAAIoC,EAAKkvB,EAAK9nB,GAAI,KAC5CklB,EAAiB2P,GAAWr+B,EAAGsxB,EAAKjW,UACpCqT,EAAiB4P,GAAQt+B,EAAGwmB,IAC5BkI,EAAiB6P,GAAmBv+B,GAP5C,CAnEmDA,EAAGsxB,IAG9CjD,EAASmQ,GAAax+B,IACtBquB,EAAS2O,GAAWh9B,EAAGsxB,EAAKhuB,IAC5B+qB,EAASoQ,GAAUz+B,EAAGi+B,IACtB5P,EAASqQ,GAAc1+B,EAAGsxB,EAAKrtB,aAC/BoqB,EAASsQ,GAAc3+B,EAAG,IAAIoC,EAAKkvB,EAAKvtB,WAAY,KACpDsqB,EAASuQ,GAAW5+B,GAf5B,CA7ciDA,EAAG+mB,IAEhD,MAAM8X,EAAgB7+B,EAAEg2B,KAIlB8F,EAAiB39B,OAAA49B,EAAAr8B,EAAAvB,CAAM69B,EAAAh8B,EAAU6+B,EAAczqB,WAAY,GAE3D0qB,EAAiBpyB,EAAOA,EAAK0H,WAAa,EAE1C2qB,EAAe,IAAI73B,WAAW/I,OAAA49B,EAAAr8B,EAAAvB,CAAM29B,EAAiBgD,EAAgB,IAU3E,OAPA,IAAI7hB,SAAS8hB,EAAa1yB,QAAQgxB,SAAS,EAAGvB,EAAiBE,EAAAh8B,EAASs9B,IAExEyB,EAAan6B,IAAIi6B,EAAe7C,EAAAh8B,GAE/B0M,GAAQoyB,EAAiB,GAAMC,EAAan6B,IAAI8H,EAAMovB,IAG9CG,GAAAH,EAAgBzvB,OAAQ0yB,SAYxBrB,UAA8BxsB,EAAAlR,EAA3CmD,kCACWO,KAAA0Q,WAAa,EACb1Q,KAAA0X,MACA1X,KAAA6nB,MACA7nB,KAAA+5B,MACAt6B,GAAiB2iB,GACpBpiB,KAAK0X,MACL1X,KAAK0Q,WAAa,EAClB1Q,KAAK6nB,MACL7nB,KAAK+5B,MACL,IAAK,IAAIrb,EAAgBnW,GAAS,EAAGsZ,EAAUO,EAAYP,UAAWtZ,EAAQsZ,IACtEnD,EAAS0D,EAAYhU,WAAW7F,KAChCvI,KAAKsd,GAAMoB,GAGnB,OAAO1e,KAEJP,GAA0Bif,GAC7B,IAAKwb,EAAA7/B,EAASoH,aAAaid,EAAOte,MAAO,CACrC,MAAM4I,KAAEA,EAAIE,OAAEA,EAAMyC,UAAEA,GAAc+S,EACpC,GAAIxV,EAAS,WACT,MAAM,IAAIoyB,WAAW,sDAEzBt7B,KAAK6nB,GAAWnZ,KAAK,IAAI8pB,EAAAp+B,EAAc8O,EAAQyC,IAC/C3L,KAAKu7B,GAAU5vB,GAAa,EACtB,IAAInI,WAAW,GACfxD,KAAKw7B,GAAmBxyB,EAAKf,GAAQiB,EAAQF,EAAK0C,aAG5D,OAAOtI,MAAMka,GAAMoB,GAEhBjf,GAAqBg8B,GAAmC,OAAOz7B,KAC/DP,GAAqBif,GAAmC,OAAO1e,KAAK07B,GAAgBhd,GACpFjf,GAAqBif,GAAmC,OAAO1e,KAAK27B,GAAgBjd,GACpFjf,GAAqBif,GAAmC,OAAO1e,KAAK27B,GAAgBjd,GACpFjf,GAAqBif,GAAmC,OAAO1e,KAAK47B,GAAoBld,GACxFjf,GAAqBif,GAAmC,OAAO1e,KAAK47B,GAAoBld,GACxFjf,GAAqBif,GAAmC,OAAO1e,KAAK27B,GAAgBjd,GACpFjf,GAAqBif,GAAmC,OAAO1e,KAAK27B,GAAgBjd,GACpFjf,GAAqBif,GAAmC,OAAO1e,KAAK27B,GAAgBjd,GACpFjf,GAAqBif,GAAmC,OAAO1e,KAAK27B,GAAgBjd,GACpFjf,GAAqBif,GAAmC,OAAO1e,KAAK27B,GAAgBjd,GACpFjf,GAAqBif,GAAmC,OAAO1e,KAAK67B,GAAgBnd,GACpFjf,GAAqBif,GAAmC,OAAO1e,KAAK87B,GAAkBpd,GACtFjf,GAAqBif,GAAmC,OAAO1e,KAAK27B,GAAgBjd,GACpFjf,GAAqBif,GAAmC,OAAO1e,KAAK67B,GAAgBnd,GACpFjf,GAAqBif,GAAmC,OAAO1e,KAAK87B,GAAkBpd,GACtFjf,GAAqBif,GAExB,OAAO1e,KAAKsd,GAAMoB,EAAOnd,SAEtB9B,GAAWif,GACd,MAAM1V,KAAEA,EAAI5I,KAAEA,EAAI8I,OAAEA,GAAWwV,GACvBiI,GAAQoV,EAAWz2B,QAAEA,GAAY0D,EAIzC,GAFAhJ,KAAKu7B,GAAUj2B,GAEXlF,EAAKnF,OAASi/B,EAAAr8B,EAAU2H,OACxB,OAAOxF,KAAK87B,GAAkBpd,GAC3B,GAAIte,EAAKnF,OAASi/B,EAAAr8B,EAAU0H,MAAO,CAEtC,MAAM2I,EAAgBlF,EAAwBkF,aAC9C,GAAI6tB,GAAe,EAIf,OAFA/7B,KAAKu7B,GAAUrtB,GAERlO,KAAK87B,GAAkBpd,GAC3B,CAIH,MAAMsd,EAAiB1uB,KAAKwD,OAAO1Q,EAAKkF,SAClC22B,EAAe,IAAIt4B,WAAWq4B,EAAiB,GAE/C1oB,EAAe,IAAI3P,WAAWq4B,EAAiB,GAAGE,MAAM,GACxDC,EAAiB,IAAIx4B,WAAWuF,GAChCkzB,EAAmBp8B,KAAKq8B,GAAyBN,EAAa7yB,EAAQgF,GAC5E,IAAK,IAAI9M,EAAQuV,EAAOpO,GAAS,IAAKA,EAAQW,IAKF,KAAnCyN,EAAQrD,EAJblS,EAASkE,EAAQiD,OAKboO,EAAQrD,EAAalS,GAAUg7B,EAAiBh7B,IAEpD+6B,EAAe5zB,GAAS6zB,EAAiB7zB,GAASoO,IAChDslB,EAAa76B,GAEnBpB,KAAKu7B,GAAUY,GAEf,IAAK,IAAIlpB,GAAc,EAAGC,EAAc9S,EAAK0C,SAASoG,SAAU+J,EAAaC,GAAc,CACvF,MAAM9R,EAAShB,EAAKkF,QAAQ2N,GACtBlB,EAAS2M,EAAuBtQ,WAAW6E,GACjDjT,KAAKsd,GAAMvL,EAAM1E,MAAMiG,EAAalS,GAASkM,KAAKC,IAAIrE,EAAQ+yB,EAAa76B,QAIvF,OAAOpB,KAEDP,GAAgBif,GAEtB,IAAI4d,EACA5uB,GAAQ1E,KAAEA,EAAIE,OAAEA,GAAWwV,EAY/B,OATI4d,EAFA5d,EAAO/S,WAAazC,EAEX,IAAI1F,WAAW,IACdkK,EAAS1E,EAAK0E,kBAAmBlK,WAMlCxD,KAAKw7B,GAAmBxyB,EAAKf,GAAQiB,EAAQwE,GAH7CjT,OAAA49B,EAAAh+B,EAAAI,CAAUikB,GAKhB1e,KAAKu7B,GAAUe,GAEhB78B,GAAoCif,GAC1C,MAAMrT,KAAEA,EAAIrC,KAAEA,GAAS0V,GACjBiI,GAAE1e,EAAMiB,OAAEA,EAAMwE,OAAEA,GAAW1E,EAC7BuzB,EAAerzB,GAAWmC,EAAa0B,MAAQ,GACrD,OAAO/M,KAAKu7B,GAAU7tB,EAAO2D,SAASpJ,EAAQs0B,IAExC98B,GAA4Cif,GAClD,MAAM1V,KAAEA,EAAIE,OAAEA,GAAWwV,GACnBiI,GAAE1e,EAAMyF,OAAEA,EAAMQ,aAAEA,GAAiBlF,EACnCwzB,EAActuB,EAAa,GAC3BuuB,EAAavuB,EAAahF,GAC1BwH,EAAapD,KAAKC,IAAIkvB,EAAaD,EAAa9uB,EAAOgD,WAAa8rB,GAM1E,OAHAx8B,KAAKu7B,GAAUv7B,KAAKq8B,GAAyBp0B,EAAQiB,EAAQgF,IAE7DlO,KAAKu7B,GAAU7tB,EAAO2D,SAASmrB,EAAcv0B,EAAQu0B,EAAcv0B,EAASyI,IACrE1Q,KAEDP,GAA4Cif,GAClD,MAAM1V,KAAEA,EAAIE,OAAEA,GAAWwV,GACnBiI,GAAE1e,EAAMiG,aAAEA,GAAuBlF,EAMvC,OAJIkF,GACAlO,KAAKu7B,GAAUv7B,KAAKq8B,GAAyBp0B,EAAQiB,EAAQgF,IAG1DlO,KAAKsd,GAAOoB,EAAgCtQ,WAAW,IAExD3O,GAAwCif,GAE9C,MAAMxL,GAAewL,EAAOte,KAAK0C,cAAgBoG,OACjD,IAAK,IAAI6I,EAAsBkB,GAAc,IAAKA,EAAaC,IACvDnB,EAAS2M,EAA2BtQ,WAAW6E,KAC/CjT,KAAKsd,GAAMvL,GAGnB,OAAO/R,KAEDP,GAAUiO,GAChB,MAAMgD,EAAajW,OAAA49B,EAAAr8B,EAAAvB,CAAMiT,EAAOgD,WAAY,GAI5C,OAHA1Q,KAAK0X,GAAQhJ,KAAKhB,GAClB1N,KAAK+5B,GAAYrrB,KAAK,IAAI8pB,EAAAx8B,EAAegE,KAAK0Q,WAAYA,IAC1D1Q,KAAK0Q,YAAcA,EACZ1Q,KAEDP,GAAmBwI,EAAgBiB,EAAgBozB,GACzD,MAAMI,EAAgBjiC,OAAA49B,EAAAr8B,EAAAvB,CAAM6hC,EAAO5rB,WAAY,GAC/C,GAAIzI,EAAS,GAAKq0B,EAAO5rB,WAAagsB,EAAe,CAEjD,MAAMh0B,EAAQ,IAAIlF,WAAWk5B,GAQ7B,OAPAh0B,EAAMxH,IACD+G,EAAS,GAAM,EAEdq0B,EAAOjrB,SAASpJ,GAAU,GAE1BxN,OAAA49B,EAAAh+B,EAAAI,CAAUA,OAAA49B,EAAAj+B,EAAAK,CAAY6hC,EAAQr0B,EAAQiB,EAAQ,KAAMmvB,EAAA/7B,KAEnDoM,EAEX,OAAO4zB,EAED78B,GAAyBwI,EAAgBiB,EAAgBgF,GAI/D,GAAIjG,EAAS,GAAyB,IAApBiG,EAAa,GAAU,CACrC,MAAMyuB,EAAczuB,EAAa,GAC3B0uB,EAAc,IAAIj5B,WAAWuF,EAAS,GAC5C,IAAK,IAAIX,GAAS,IAAKA,EAAQW,GAC3B0zB,EAAYr0B,GAAS2F,EAAa3F,GAASo0B,EAI/C,OADAC,EAAY1zB,GAAUgF,EAAahF,GAAUyzB,EACtCC,EAEX,OAAO1uB,GAKf,IAAOxP,EAAOm+B,EAAA7gC,EAAY0C,KACnB6yB,EAAUsL,EAAA7gC,EAAYu1B,GAKtBuL,EAASC,EAAA/gC,EAAU4C,EAAOC,EAAMC,EAAQk+B,GACxChT,EAAU+S,EAAA/gC,EAAU4C,EAAOC,EAAMC,EAAQiY,GACzCkmB,EAASC,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQqB,MAC1C0qB,EAAUqS,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQU,OAC3C29B,EAAUD,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQ+L,GAC3C8f,EAAWkN,EAAA77B,EAAa4C,EAAOC,EAAMC,EAAQuY,GAC7C+lB,EAAYF,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQ4K,GAC7C2zB,EAAaxF,EAAA77B,EAAa4C,EAAOC,EAAMC,EAAQ4jB,GAC/CqI,EAAe8M,EAAA77B,EAAa4C,EAAOC,EAAMC,EAAQwY,YACjD0T,EAAmB6M,EAAA77B,EAAa4C,EAAOC,EAAMC,EAAQyY,gBACrD+lB,EAAsBJ,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQ+K,GACvD0zB,EAAcL,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQuI,GAE/CgkB,EAAQ6R,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQ6C,KACzC2pB,EAAO4R,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQ8C,IACxC2pB,EAAiB2R,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQiI,cAClDykB,EAAU0R,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQgD,OAC3C2pB,EAAQyR,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQkD,KACzC0pB,EAAQwR,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQiD,KACzC4pB,EAAWuR,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQmD,QAC5C2pB,EAAQsR,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQoD,KACzC2pB,EAAQqR,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQqD,KACzC2pB,EAAaoR,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQsD,UAC9C2pB,EAAYmR,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQuD,SAC7C2pB,EAAQkR,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQwD,KACzC2pB,EAAUiR,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQkI,QAC3CklB,EAASgR,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQ0D,MAC1C2pB,EAAmB+Q,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQ2D,gBACpD2pB,EAAiB8Q,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQ4D,cAClD2pB,EAAO6Q,EAAAlhC,EAAY4C,EAAOC,EAAMC,EAAQiB,UAElCy9B,UAAuBhwB,EAAAxR,EAChCyD,YAAsBqI,GAClB1E,QADkBpD,KAAA8H,KAGfrI,GAAUg+B,GACb,MAAMnhC,EAAI0D,KAAK8H,GACf,OACIujB,EAAMqS,GAAUphC,IAChB+uB,EAAMsS,GAAQrhC,GAGfmD,GAASmuB,GACZ,MAAMtxB,EAAI0D,KAAK8H,GACf,OACIwjB,EAAKsS,GAASthC,IACdgvB,EAAKuS,GAAYvhC,EAAGsxB,EAAKtqB,WACzBgoB,EAAKwS,GAAYxhC,EAAGsxB,EAAKvqB,WACzBioB,EAAKyS,GAAOzhC,GAGbmD,GAAWmuB,GACd,MAAMtxB,EAAI0D,KAAK8H,GACf,OACIyjB,EAAeyS,GAAmB1hC,IAClCivB,EAAe0S,GAAa3hC,EAAGsxB,EAAKtpB,YACpCinB,EAAe2S,GAAiB5hC,GAGjCmD,GAAYg+B,GACf,MAAMnhC,EAAI0D,KAAK8H,GACf,OACI0jB,EAAQ2S,GAAY7hC,IACpBkvB,EAAQ4S,GAAU9hC,GAGnBmD,GAAUg+B,GACb,MAAMnhC,EAAI0D,KAAK8H,GACf,OACI2jB,EAAM4S,GAAU/hC,IAChBmvB,EAAM6S,GAAQhiC,GAGfmD,GAAUg+B,GACb,MAAMnhC,EAAI0D,KAAK8H,GACf,OACI4jB,EAAM6S,GAAUjiC,IAChBovB,EAAM8S,GAAQliC,GAGfmD,GAAamuB,GAChB,MAAMtxB,EAAI0D,KAAK8H,GACf,OACI6jB,EAAS8S,GAAaniC,IACtBqvB,EAAS+S,GAASpiC,EAAGsxB,EAAK7oB,QAC1B4mB,EAASsS,GAAa3hC,EAAGsxB,EAAKtpB,YAC9BqnB,EAASgT,GAAWriC,GAGrBmD,GAAUmuB,GACb,MAAMtxB,EAAI0D,KAAK8H,GACf,OAAO8jB,EAAMgT,GAAUtiC,IAAMsvB,EAAMiT,GAAQviC,EAAGsxB,EAAK3oB,OAAS2mB,EAAMkT,GAAQxiC,GAEvEmD,GAAUmuB,GACb,MAAMtxB,EAAI0D,KAAK8H,GACf,OACI+jB,EAAMkT,GAAUziC,IAChBuvB,EAAMgT,GAAQviC,EAAGsxB,EAAK3oB,OACtB4mB,EAAMgS,GAAYvhC,EAAGsxB,EAAKtqB,WAC1BuoB,EAAMmT,GAAQ1iC,GAGfmD,GAAemuB,GAClB,MAAMtxB,EAAI0D,KAAK8H,GACT5C,EAAY0oB,EAAK1oB,UAAY5I,EAAE04B,GAAapH,EAAK1oB,kBACvD,OACI4mB,EAAWmT,GAAe3iC,IAC1BwvB,EAAW+S,GAAQviC,EAAGsxB,EAAK3oB,gBAC1BC,GAA0B4mB,EAAWoT,GAAY5iC,EAAG4I,IACrD4mB,EAAWqT,GAAa7iC,GAGzBmD,GAAcmuB,GACjB,MAAMtxB,EAAI0D,KAAK8H,GACf,OACIikB,EAAUqT,GAAc9iC,IAAMyvB,EAAU8S,GAAQviC,EAAGsxB,EAAK3oB,OAAS8mB,EAAUsT,GAAY/iC,GAGxFmD,GAAUg+B,GACb,MAAMnhC,EAAI0D,KAAK8H,GACf,OACIkkB,EAAMsT,GAAUhjC,IAChB0vB,EAAMuT,GAAQjjC,GAGfmD,GAAYg+B,GACf,MAAMnhC,EAAI0D,KAAK8H,GACf,OACImkB,EAAQuT,GAAaljC,IACrB2vB,EAAQwT,GAAWnjC,GAGpBmD,GAAWmuB,GACd,MAAMtxB,EAAI0D,KAAK8H,GACTxC,EACF4mB,EAAOwT,GAAmBpjC,EAAGsxB,EAAKtoB,QAAQ4D,SAC1CgjB,EAAOyT,GAAoBrjC,EAAGsxB,EAAKtoB,SACvC,OACI4mB,EAAO0T,GAAWtjC,IAClB4vB,EAAO2T,GAAQvjC,EAAGsxB,EAAK3yB,OACvBixB,EAAO4T,GAAWxjC,EAAGgJ,IACrB4mB,EAAO6T,GAASzjC,GAGjBmD,GAAgBmuB,GACnB,MAAMtxB,EAAI0D,KAAK8H,GACTie,EAAY/lB,KAAKsd,GAAMsQ,EAAKrsB,SAClC,OACI+7B,EAAoB0C,GAAwB1jC,IAC5CghC,EAAoB5C,GAAMp+B,EAAG,IAAIoC,EAAKkvB,EAAK9nB,GAAI,KAC/Cw3B,EAAoB2C,GAAa3jC,EAAGsxB,EAAK7nB,qBACxCggB,GAA2BuX,EAAoB4C,GAAa5jC,EAAGypB,IAChEuX,EAAoB6C,GAAsB7jC,GAG3CmD,GAAqBmuB,GACxB,MAAMtxB,EAAI0D,KAAK8H,GACf,OACIqkB,EAAiBiU,GAAqB9jC,IACtC6vB,EAAiBkU,GAAa/jC,EAAGsxB,EAAKnoB,YACtC0mB,EAAiBmU,GAAmBhkC,GAGrCmD,GAAmBmuB,GACtB,MAAMtxB,EAAI0D,KAAK8H,GACf,OACIskB,EAAemU,GAAmBjkC,IAClC8vB,EAAeoU,GAAYlkC,EAAGsxB,EAAKloB,WACnC0mB,EAAeqU,GAAiBnkC,GAGjCmD,GAASmuB,GACZ,MAAMtxB,EAAI0D,KAAK8H,GACf,OACIukB,EAAKqU,GAASpkC,IACd+vB,EAAKsU,GAAcrkC,EAAGsxB,EAAKhoB,aAC3BymB,EAAKuU,GAAOtkC,IAKxB,SAAS69B,EAA0B0G,EAAyBnpB,EAAuBqiB,GAC/E,MAAM/wB,EAAO,IAAIxF,WAAWq9B,GAC5B,IAAK,IAAI/mC,GAAK,EAAGyB,EAAImc,EAAQxO,SAAUpP,EAAIyB,GAAI,CAC3C,MAAMorB,GAAE1e,EAAMiB,OAAEA,GAAW6wB,EAAYjgC,IACjC6O,OAAEA,EAAMC,WAAEA,EAAU8H,WAAEA,GAAegH,EAAQ5d,GAC7CgnC,EAAmBxzB,KAAKC,IAAIrE,EAAQwH,GACtCowB,EAAmB,GACnB93B,EAAK9H,IAAI,IAAIsC,WAAWmF,EAAQC,EAAYk4B,GAAmB74B,GAGvE,OAAOe,EA2BX,SAASgwB,EAAW18B,EAAYsxB,GAC5B,OAAOkP,EAAOiE,GAAYzkC,EACtB,IAAIoC,EAAKkvB,EAAK3lB,GAAQ,GACtB2lB,EAAKxW,GACL,IAAI1Y,EAAKkvB,EAAKvtB,WAAY,IAuBlC,SAASs4B,EAAYr8B,EAAYsxB,GAE7B,MAAMoT,EAAepT,EAAKluB,OAAOQ,IAAKjE,aAwEjCglC,EAAW3kC,EAAYsxB,GAC5B,IAAIrjB,GAAc,EACdnK,EAAOwtB,EAAKxtB,KACZgB,EAASwsB,EAAKxsB,OACd9G,SACAqF,SACAkG,SAECq0B,EAAA7/B,EAASoH,aAAarB,IAGvBgB,EAAShB,EAAKyF,WAAWxE,EACzBwE,EAAa,IAAI23B,EAAelhC,GAAGghB,GAAMld,GACzCmK,EAAa,IAAIizB,EAAelhC,GAAGghB,GAAMld,EAAKyF,aAJ9C0E,EAAa,IAAIizB,EAAelhC,GAAGghB,GAAMld,GAO7C,IAAI0C,EAAWm6B,EAAOiE,GAAqB5kC,GAAI8D,EAAK0C,cAAgB5C,IAAKjE,GAAMglC,EAAW3kC,EAAGL,KAmB7F,OAlBI2xB,EAAKjuB,GAAYiuB,EAAKjuB,EAASoN,KAAO,IACtCpN,EAAWs9B,EAAOkE,GACd7kC,MACIsxB,EAAKjuB,GAAUO,IAAI,EAAEtC,EAAGxB,MACxB,MAAMf,EAAMiB,EAAE04B,MAAgBp3B,KACxB0kB,EAAMhmB,EAAE04B,MAAgB54B,KAC9B,OACIghC,EAAUgE,GAAc9kC,IACxB8gC,EAAUiE,GAAO/kC,EAAGjB,IACpB+hC,EAAUkE,GAAShlC,EAAGgmB,IACtB8a,EAAUmE,GAAYjlC,OAKlCsxB,EAAKtzB,OACLA,EAAOgC,EAAE04B,GAAapH,EAAKtzB,OAG3B2iC,EAAOuE,GAAWllC,IAClB2gC,EAAOwE,GAAQnlC,EAAGiO,IAClB0yB,EAAOyE,GAAYplC,EAAG8E,IACtB67B,EAAO0E,GAAYrlC,EAAGwG,IACtBm6B,EAAO2E,GAAYtlC,IAAKsxB,EAAKzsB,oBAC5B7G,GAAsB2iC,EAAO4E,GAAQvlC,EAAGhC,aACxCuL,GAA4Bo3B,EAAO6E,GAAcxlC,EAAGuJ,aACpDlG,GAA0Bs9B,EAAO8E,GAAkBzlC,EAAGqD,IACvDs9B,EAAO+E,GAAS1lC,IApHkBL,CAAiBK,EAAGL,IACpDgP,EACF4f,EAAQoX,GAAkB3lC,EAAG0kC,EAAa93B,SAC1C2hB,EAAQqX,GAAmB5lC,EAAG0kC,GAElC,IAAIrhC,SAiBJ,OAhBIiuB,EAAKjuB,GAAYiuB,EAAKjuB,EAASoN,KAAO,IACtCpN,EAAWkrB,EAAQsW,GACf7kC,MACIsxB,EAAKjuB,GAAUO,IAAI,EAAEtC,EAAGxB,MACxB,MAAMf,EAAMiB,EAAE04B,MAAgBp3B,KACxB0kB,EAAMhmB,EAAE04B,MAAgB54B,KAC9B,OACIghC,EAAUgE,GAAc9kC,IACxB8gC,EAAUiE,GAAO/kC,EAAGjB,IACpB+hC,EAAUkE,GAAShlC,EAAGgmB,IACtB8a,EAAUmE,GAAYjlC,OAOlCuuB,EAAQsX,GAAY7lC,IACpBuuB,EAAQuX,GAAU9lC,EAAG2O,IACrB4f,EAAQwX,GAAc/lC,EAAGs9B,GAAyB2D,EAAYj2B,OAASi2B,EAAYh2B,eAClF5H,GAA0BkrB,EAAQkX,GAAkBzlC,EAAGqD,IACxDkrB,EAAQyX,GAAUhmC,GAI1B,SAASk+B,GAAiBl+B,EAAYsxB,GAClC,IAAInW,EAASmW,EAAKnW,OACdC,EAAWkW,EAAKlW,OAChBkL,EACAmI,EAAawX,GAAiBjmC,EAAGmb,EAAMvO,SACvC4vB,GAAWrhB,EAAQlc,aAgCHe,EAAYsxB,GAChC,OAAOyP,EAAWmF,GAAgBlmC,EAAG,IAAIoC,EAAKkvB,EAAK1kB,OAAQ,GAAI,IAAIxK,EAAKkvB,EAAKjiB,UAAW,KAjCjEpQ,CAAqBe,EAAGf,KAC3Ce,EAAE8M,KAEFyZ,EACAkI,EAAa0X,GAAmBnmC,EAAGob,EAAQxO,SAC3C4vB,GAAWphB,EAAUgrB,aAuBRpmC,EAAYsxB,GAC7B,OAAOuP,EAAQwF,GAAarmC,EAAG,IAAIoC,EAAKkvB,EAAK3lB,GAAQ,GAAI,IAAIvJ,EAAKkvB,EAAK1kB,OAAQ,KAxBtDw5B,CAAmBpmC,EAAGomC,KAC3CpmC,EAAE8M,KAEN,OACI2hB,EAAa6X,GAAiBtmC,IAC9ByuB,EAAa8X,GAAUvmC,EAAG,IAAIoC,EAAKkvB,EAAK1kB,OAAQ,KAChD6hB,EAAa+X,GAASxmC,EAAGsmB,IACzBmI,EAAagY,GAAWzmC,EAAGumB,IAC3BkI,EAAaiY,GAAe1mC,GAuEpC,SAASw8B,GAAiBjtB,EAAao3B,GACnC,MAAMjtB,EAAa7S,MAAM0I,EAAO3C,QAChC,IAAK,IAAIpP,GAAK,EAAGuD,EAAIwO,EAAO3C,SAAU7L,GAAK,GACvC2Y,EAAOlc,GAAKmpC,EAAWp3B,EAAOxO,GAAIvD,EAAG+R,GAEzC,OAAOmK,EAGX,MAAM4jB,GAAyB,WAC3B,MAAMjxB,EAAS,IAAI6H,YAAY,GAG/B,OAFA,IAAI+I,SAAS5Q,GAAQu6B,SAAS,EAAG,QAEI,MAA9B,IAAIz/B,WAAWkF,GAAQ,GAJH,aAAAjP,EAAA6B,EAAAV,GAAA,aC9sBzB,SAAUsoC,EAAQnoB,EAAakhB,EAAc3gC,GAC/C,OAAY4H,MAAM5H,EAAI,GAAG8J,KAAK62B,GAAQlhB,GAAK3N,OAAO,EAAI9R,GAGpD,SAAU6nC,EAAc3mC,GAC1B,MAAoB,iBAANA,MAAqBA,KAAO+T,YAAYC,OAAOhU,OAASA,KAAO4wB,KAAKgW,UAAU5mC,kLCLnF6mC,EACT7jC,YAAsB4M,EAAyC4iB,GAAzCjvB,KAAAqM,WAAyCrM,KAAAivB,KAC/DxvB,CAAC3E,OAAOuR,YAAc,OAAOrM,KAAKqM,SAClC5M,KAAKzE,GAAe,OAAOgF,KAAKqM,SAASwJ,KAAK7a,GAC9CyE,MAAM8jC,GACF,MAAmC,mBAAxBvjC,KAAKqM,SAAS0J,MACd/V,KAAKqM,SAAS0J,MAAMwtB,IAEtBttB,QAAYjb,MAAO,MAEhCyE,OAAOzE,GACH,MAAoC,mBAAzBgF,KAAKqM,SAASm3B,OACdxjC,KAAKqM,SAASm3B,OAAOxoC,IAEvBib,QAAYjb,MAAO,MAEhCyE,GAAKkuB,GACD,IACI8V,GADAC,GAAEzU,GAAajvB,KAEf2jC,EAASC,IAGT,GAFAjW,EAAuBkW,eAAE,QAASF,GAClChW,EAAuBkW,eAAE,QAASF,GAC9BC,EAAO,OAAO5jC,KAAK+V,MAAM6tB,GAC7B,GAAIjW,EAAiBmW,SACjB,GACI,IAAKL,EAAMzjC,KAAK6V,QAAQI,KAAQ,YAC3B8tB,EAAKpW,EAAQsB,EAAUwU,EAAIzoC,QAExC,OAAOgpC,EAAKrW,EAAQ8V,GAAOA,EAAIxtB,KAAM0tB,IAGzC,OADAA,IACOhW,SAIFsW,EACTxkC,YAAsB4M,EAA8C4iB,GAA9CjvB,KAAAqM,WAA8CrM,KAAAivB,KACpExvB,CAAC3E,OAAOwb,iBAAmB,OAAOtW,KAAKqM,SACvC5M,KAAKzE,GAAe,OAAOgF,KAAKqM,SAASwJ,KAAK7a,GACxCyE,MAAM8jC,6CACR,MAAmC,mBAAxBvjC,KAAKqM,SAAS0J,MACd/V,KAAKqM,SAAS0J,MAAMwtB,IAEtBttB,QAAYjb,MAAO,QAE1ByE,OAAOzE,6CACT,MAAoC,mBAAzBgF,KAAKqM,SAASm3B,OACdxjC,KAAKqM,SAASm3B,OAAOxoC,IAEvBib,QAAYjb,MAAO,QAEhCyE,GAAKkuB,GACD,IACI8V,GADAC,GAAEzU,GAAajvB,KAEf2jC,EAAeC,GAAaM,EAAA3nC,EAAAyD,iBAAA,cAG5B,GAFA2tB,EAAuBkW,eAAE,QAASF,GAClChW,EAAuBkW,eAAE,QAASF,GAC9BC,EAAO,OAAO5jC,KAAK+V,MAAM6tB,GAC7B,GAAIjW,EAAiBmW,SACjB,GACI,IAAKL,QAAYzjC,KAAK6V,QAAQI,KAAQ,YACjC8tB,EAAKpW,EAAQsB,EAAUwU,EAAIzoC,QAExC,OAAOgpC,EAAKrW,EAAQ8V,GAAOA,EAAIxtB,KAAM0tB,KAGzC,OADAA,IACOhW,GAIf,MAAMwW,EAAuB,MAIzB,MAAMC,EAAaC,KAAK,iDACxB,OAAQD,EACHlzB,GAAoBkzB,EAAWn3B,KAAKiE,EAAIvI,OAAQuI,EAAItI,WAAYsI,EAAIR,YADnDQ,GAAoBA,GALjB,GAS7B,SAAS6yB,EAAKpW,EAA+BsB,EAAkBj0B,GAC3D,OAAO2yB,EAAcgW,MAAgB,SAAb1U,EAAsBj0B,EAAQ,KAAOmpC,EAAqBnpC,GAAgBi0B,GAGtG,SAAS+U,EAAKrW,EAA+B1X,EAAe0tB,GACxD,MAAM9nC,EAAIwoC,KAAK,WACVpuB,EAGSpa,GAAK8xB,IAAW9xB,EAAEyoC,KAAa3W,EAAsB4W,OAC/D5W,EAAY7gB,OAHZ6gB,EAAa6W,KAAE,QAASb,GACxBhW,EAAa6W,KAAE,QAASb,mECxFhC,IAAA3yB,EAAApX,EAAA,SAuBa6qC,EAKThlC,YAAYuJ,EAAeqC,GACvBrL,KAAKqL,KAAOA,EACZrL,KAAKkJ,OAASF,EAAKE,OACnBlJ,KAAKiI,GAASe,EAAKf,GACnBjI,KAAK0L,WAAa1C,EAAK0C,WAE3BqB,WACI,OAAQ/M,KAAKqL,KAAa0B,MAAQ,EAE/BtN,MAAMuJ,GACT,OAAO,IAAIy7B,EAAaz7B,EAAMhJ,KAAKqL,KAAKY,MAAMjD,IAE3CvJ,UACH,UAAWO,MAERP,QAAQ+T,GACX,IAAIjL,EAAQ,EACZ,IAAK,IAAIvN,KAASgF,KAAM,CACpB,GAAIhF,IAAUwY,EAAU,OAAOjL,IAC7BA,EAGN,OAAQ,EAEL9I,QAAQ8I,GACX,MAAMm8B,EAAe1kC,KAAKiI,GAASM,EACnC,OAAO9N,OAAAuW,EAAA1U,EAAA7B,CAAQ,KAAM8N,EAAOvI,KAAK0L,WAAWg5B,GAAgB,GAAIA,EAAe,GAE5EjlC,IAAI8I,GACP,MAAMm8B,EAAe1kC,KAAKiI,GAASM,EACnC,OAAOvI,KAAK2kC,GAAY3kC,KAAKqL,KAAM9C,EAAOvI,KAAK0L,WAAWg5B,GAAgB,GAAIA,EAAe,GAE1FjlC,IAAI8I,EAAevN,GAClBP,OAAAuW,EAAA/U,EAAAxB,CAAQuF,KAAK0L,WAAY1L,KAAKiI,GAASM,EAAgB,MAATvN,IAC9CgF,KAAKqL,KAAKnK,IAAIqH,EAAOvN,GAGtByE,WAA0C8I,GAC7C,OAAQvI,KAAKqL,KAAyB+C,WAAc7F,GAEjD9I,CAAC3E,OAAOuR,YACX,OAAO5R,OAAAuW,EAAA5W,EAAAK,CAAgCuF,KAAK0L,WAAY1L,KAAKiI,GAAQjI,KAAKkJ,OAAQlJ,KAAKqL,KAAMrL,KAAK2kC,IAE5FllC,GAAY4L,EAAe9C,EAAe+P,EAAcC,GAC9D,OAAO9d,OAAAuW,EAAA1U,EAAA7B,CAAQ4Q,EAAM9C,EAAO+P,EAAMC,GAAOlN,EAAKzQ,IAAI2N,GAAS,iBAAA7O,EAAA6B,EAAAV,GAAA,aCxEnEjB,EAAAS,EAAA+L,EAAA,sBAAAw+B,UAqBaA,EAGTnlC,YAAYoG,EAAuBtE,GAC/BvB,KAAKuB,QAAUA,EACfvB,KAAK6F,WAAaA,EAEfpG,MAAMuJ,GACT,OAAO,IAAI47B,EAAe57B,EAAKnD,WAAY7F,KAAKuB,QAAQ0K,MAAMjD,EAAKzH,UAEhE9B,QAAQ8I,GACX,OAAOvI,KAAKuB,QAAQ4K,QAAQ5D,GAEzB9I,IAAI8I,GACP,OAAOvI,KAAK6F,WAAWjL,IAAIoF,KAAKuB,QAAQ3G,IAAI2N,IAEzC9I,IAAI8I,EAAevN,GACtBgF,KAAK6F,WAAW3E,IAAIlB,KAAKuB,QAAQ3G,IAAI2N,GAAQvN,GAE1CyE,UACH,UAAWO,MAERP,EAAE3E,OAAOuR,YACZ,MAAMqB,EAAS1N,KAAK6F,WAAYtE,EAAUvB,KAAKuB,QAC/C,IAAK,IAAIgH,GAAS,EAAGhN,EAAIgG,EAAQ2H,SAAUX,EAAQhN,SACzCmS,EAAO9S,IAAI2G,EAAQ3G,IAAI2N,IAG9B9I,QAAQ+T,GAEX,MAAMnY,EAAM2E,KAAK6F,WAAWuG,QAAQoH,GACpC,OAAa,IAATnY,EAAqBA,EAGlB2E,KAAKuB,QAAQ6K,QAAQ/Q,8FCvDpCwpC,EAAAjrC,EAAA,IAmBOqvB,EAAa6b,EAAA9oC,EAAYitB,GACzB0B,EAAWoa,EAAA/oC,EAAa4C,EAAOC,EAAMC,EAAQuY,GAG9C,SAAiB2tB,EAAmBrX,iDAEtC,IAAIlmB,EACAw9B,EAAY,EAAGv8B,EAAQ,IAAIlF,WAAW,GACtC0hC,EAAgB,EAAG7hB,EAA2B,SAElD,IAAwB,IAA8DmK,EAA9DC,EAAAyW,EAAA9pC,EAACuzB,KAA6DH,QAAA0W,EAAA7pC,EAAAozB,EAAA5X,SAAAI,MAAA,CAA3E,IAAIxH,EAAK+e,EAAAxyB,MAEhB,GAAa,MAATyT,EACA,SAGJ,MAAM02B,EAAQ,IAAI3hC,WAAWkF,EAAMgI,WAAajC,EAAMvF,QAEtD,GAAqB,iBAAVuF,EACP02B,EAAMjkC,IAAIwH,EAAO,IAAMy8B,EAAMjkC,IAAIuN,EAAO/F,EAAMgI,iBAE9C,IAAK,IAAI5W,GAAK,EAAGuD,EAAIqL,EAAMgI,WAAYnV,EAAIkT,EAAMvF,SAAUpP,EAAIyB,GAC3D4pC,EAAMrrC,EAAIuD,GAAKoR,EAAM+N,WAAW1iB,GAQxC,GAJA4O,EAAQy8B,EAIJ1qC,OAAAoqC,EAAAzqC,EAAAK,CAAyBiO,GAAQ,CACjC,IAAKjO,OAAAoqC,EAAAxqC,EAAAI,CAAiB,IAAIwuB,EAAWvgB,IACjC,SAEJ,aAAAw7B,EAAA7pC,cAAO6pC,EAAA7pC,EAAMqO,IAOjB,IAJIA,EAAMgI,WAAa,GAAKw0B,GAAiB,IACzCA,EAAgB,IAAI3rB,SAAS7Q,EAAMC,QAAQy8B,SAAS,OAGjDF,EAAgB,GAAKA,GAAiBx8B,EAAMgI,YAAY,CAC3D,IAAK2S,EAAS,CAEV,IADC5b,EAAK,IAAIwhB,EAAWvgB,IAAQqhB,GAAY,GACrC1G,EAAUsH,EAASC,GAAiBnjB,GAAK,CACzCy9B,GAAiB7hB,EAAQhjB,aAAa6F,IACtC,SAEJ,MAAUrC,qCAAqCohC,KAEnDA,GAAaC,EAAgBL,EAAAvoC,cAC7B4nC,EAAA7pC,EAAMqO,EAAM2I,SAAS,EAAG6zB,EAAgBL,EAAAvoC,IAExC4oC,GADAx8B,EAAQA,EAAM2I,SAAS6zB,EAAgBL,EAAAvoC,IACjBoU,WAAa,EAAI,EACnC,IAAI6I,SAAS7Q,EAAMC,QAAQy8B,SAAS18B,EAAME,eAC9Cya,EAAU,aAAA3pB,GAAA6B,GAAAgoC,MAAA7pC,GAAA,YAAAK,MAAAkc,OAAApb,EAAAR,EAAAmpC,gBAAAjnC,EAAAlC,EAAAQ,EAAAX,KAAAG,KAAA,WAAAkB,EAAA,MAAAA,EAAAgoC,YAAA,SAAA7pC,EAAA6B,EAAAV,GAAA,aC3DtB,SAAAwqC,EAAArpC,EAAAuR,EAAAuD,GACA,OAAAvD,GAAAvR,MAAA8U,EAOA,SAAAw0B,EAAA9qC,GACA,YAAAA,EAAA,SACA,GAAAA,IAAAC,OAAAD,GAAA,OAAAA,EACA,MAAAwU,UAAA,4CAAAnU,EAAAR,EAAAkB,EAAA,sBAAAU,IAAApB,EAAAR,EAAAkB,EAAA,sBAAAS,IAgIA,SAAAupC,EAAAC,GAEAxlC,KAAAwlC,MAAAn4B,MAAAnT,KAAAsrC,GAGAD,EAAA5pC,WAIA8pC,GAAA,WACA,OAAAzlC,KAAAwlC,GAAAt8B,QAWAikB,KAAA,WACA,OAAAntB,KAAAwlC,GAAAt8B,OAEAlJ,KAAAwlC,GAAA7uB,SAjCA+uB,GA2CAC,GAAA,SAAAC,GACA,GAAAziC,MAAA8qB,QAAA2X,GAEA,IADA,IAAAJ,EAA6C9rC,EAC7C8rC,EAAAt8B,QACAlJ,KAAAwlC,GAAAK,QAAAL,EAAAM,YAEA9lC,KAAAwlC,GAAAK,QAAAD,IAWAl3B,KAAA,SAAAk3B,GACA,GAAAziC,MAAA8qB,QAAA2X,GAEA,IADA,IAAAJ,EAA6C9rC,EAC7C8rC,EAAAt8B,QACAlJ,KAAAwlC,GAAA92B,KAAA82B,EAAA7uB,cAEA3W,KAAAwlC,GAAA92B,KAAAk3B,KAYA,IAAAG,GAAA,EAOA,SAAAC,EAAAC,EAAAC,GACA,GAAAD,EACA,MAAAj3B,UAAA,iBACA,OAAAk3B,GAAA,MA+BA,IAAAC,EAAA,QAUA,SAAAC,EAAAnX,EAAAoX,GACA,KAAArmC,gBAAAomC,GACA,WAAAA,EAAAnX,EAAAoX,GAGA,IADApX,gBAAA+G,IAAAsQ,cAAAH,KACAA,EACA,MAAAtiC,MAAA,mDAEAwiC,EAAAf,EAAAe,GAGArmC,KAAAumC,MAEAvmC,KAAAwmC,MAEAxmC,KAAAymC,GAAA,KAEAzmC,KAAA0mC,KAAAL,EAAAJ,MAEAjmC,KAAA2mC,KAAAN,EAAAO,UAEAnsC,OAAAC,eAAAsF,KAAA,YAA2ChF,MAAA,UAC3CP,OAAAC,eAAAsF,KAAA,SAAwChF,MAAAgF,KAAA0mC,KACxCjsC,OAAAC,eAAAsF,KAAA,aAA4ChF,MAAAgF,KAAA2mC,KA6F5C,SAAAE,EAAA5X,EAAAoX,GACA,KAAArmC,gBAAA6mC,GACA,WAAAA,EAAA5X,EAAAoX,GAEA,IADApX,gBAAA+G,IAAAsQ,cAAAH,KACAA,EACA,MAAAtiC,MAAA,mDAEAwiC,EAAAf,EAAAe,GAGArmC,KAAAumC,MAEAvmC,KAAA8mC,GAAA,KAEA9mC,KAAA+mC,IAAmBd,QAAAI,EAAAJ,OAEnBxrC,OAAAC,eAAAsF,KAAA,YAA2ChF,MAAA,UA1G3CorC,EAAAzqC,WAMAqrC,GAAA,SAAA5Z,EAAAiZ,GACA,IAAA39B,EAEAA,EADA,iBAAA0kB,gBAAA5c,YACA,IAAAhN,WAAA4pB,GACK,iBAAAA,GAAA,WAAAA,GACLA,EAAAzkB,kBAAA6H,YACA,IAAAhN,WAAA4pB,EAAAzkB,OACAykB,EAAAxkB,WACAwkB,EAAA1c,YAEA,IAAAlN,WAAA,GAGA6iC,EAAAf,EAAAe,GAEArmC,KAAAumC,KACAvmC,KAAAymC,GAAA,IAgJA,SAAAJ,GACA,IAAAJ,EAAAI,EAAAJ,MAMwBgB,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,IACAC,EAAA,IASxBrnC,KAAAsnC,GAAA,SAAA3Z,EAAA4Z,GAGA,IAxVA7B,IAwVA6B,GAAA,IAAAJ,EAEA,OADAA,EAAA,EACAnB,EAAAC,GAIA,IA9VAP,IA8VA6B,EACA,OAAAxB,EAGA,OAAAoB,EAAA,CAGA,GAAA9B,EAAAkC,EAAA,OAEA,OAAAA,EAIA,GAAAlC,EAAAkC,EAAA,SAGAJ,EAAA,EACAF,EAAAM,EAAA,SAIA,GAAAlC,EAAAkC,EAAA,SAEA,MAAAA,IACAH,EAAA,KAEA,MAAAG,IACAF,EAAA,KAGAF,EAAA,EACAF,EAAAM,EAAA,QAIA,KAAAlC,EAAAkC,EAAA,SAgBA,OAAAvB,EAAAC,GAdA,MAAAsB,IACAH,EAAA,KAEA,MAAAG,IACAF,EAAA,KAGAF,EAAA,EACAF,EAAAM,EAAA,IAaA,OADAN,IAAA,EAAAE,EACA,KAKA,IAAA9B,EAAAkC,EAAAH,EAAAC,GAaA,OARAJ,EAAAE,EAAAD,EAAA,EACAE,EAAA,IACAC,EAAA,IAGA1Z,EAAA6Z,GAAAD,GAGAvB,EAAAC,GAgBA,GAXAmB,EAAA,IACAC,EAAA,IAMAJ,GAAAM,EAAA,QAAAJ,GADAD,GAAA,IAKAA,IAAAC,EACA,YAGA,IAAAM,EAAAR,EAOA,OAHAA,EAAAE,EAAAD,EAAA,EAGAO,GApRA,EAAuCxB,MAAAjmC,KAAA0mC,KACvC1mC,KAAAwmC,OAEAxmC,KAAAumC,KAAAF,EAAA1Y,OASA,IAPA,IAKA3X,EALA0xB,EAAA,IAAAnC,EAAA78B,GAEAi/B,MAKAD,EAAAE,OACA5xB,EAAAhW,KAAAymC,GAAAa,GAAAI,IAAAva,WACA4Y,GAEA,OAAA/vB,IAEA7S,MAAA8qB,QAAAjY,GACA2xB,EAAAj5B,KAAAyH,MAAAwxB,EAAsE5rC,GAEtE4rC,EAAAj5B,KAAAsH,IAEA,IAAAhW,KAAAumC,GAAA,CACA,GAEA,IADAvwB,EAAAhW,KAAAymC,GAAAa,GAAAI,IAAAva,WACA4Y,EACA,MACA,OAAA/vB,IAEA7S,MAAA8qB,QAAAjY,GACA2xB,EAAAj5B,KAAAyH,MAAAwxB,EAAwE5rC,GAExE4rC,EAAAj5B,KAAAsH,WACO0xB,EAAAE,MACP5nC,KAAAymC,GAAA,KAqBA,OAlBAkB,EAAAz+B,UAIA,cAAAkD,QAAApM,KAAAivB,KACAjvB,KAAA2mC,IAAA3mC,KAAAwmC,KAEA,QAAAmB,EAAA,IACA3nC,KAAAwmC,MACAmB,EAAAhxB,SAIA3W,KAAAwmC,QAjQA,SAAAmB,GAEA,IADA,IAAA7rC,EAAA,GACAhC,EAAA,EAAiBA,EAAA6tC,EAAAz+B,SAAwBpP,EAAA,CACzC,IAAA+tC,EAAAF,EAAA7tC,GAEAgC,GADA+rC,GAAA,MACA7R,OAAAC,aAAA4R,GAGA7R,OAAAC,aAAA,QADA4R,GAAA,QACA,IACA,YAAAA,IAGA,OAAA/rC,EAZA,CAsQA6rC,KA+BAd,EAAAlrC,WAMAmsC,GAAA,SAAAC,EAAA1B,GACA0B,MAAA/R,GAAA,GACAqQ,EAAAf,EAAAe,GAKArmC,KAAAumC,KACAvmC,KAAA8mC,GAAA,IAwLA,SAAAT,GACAA,EAAAJ,MAMAjmC,KAAAsnC,GAAA,SAAA3Z,EAAA8Z,GAEA,IAvdA/B,IAudA+B,EACA,OAAA1B,EAIA,GAAAV,EAAAoC,EAAA,OACA,OAAAA,EAGA,IAAA9f,EAAA1f,EAEAo9B,EAAAoC,EAAA,WACA9f,EAAA,EACA1f,EAAA,KAGAo9B,EAAAoC,EAAA,aACA9f,EAAA,EACA1f,EAAA,KAGAo9B,EAAAoC,EAAA,iBACA9f,EAAA,EACA1f,EAAA,KAQA,IAHA,IAAAS,IAAA++B,GAAA,EAAA9f,GAAA1f,GAGA0f,EAAA,IAGA,IAAAqgB,EAAAP,GAAA,GAAA9f,EAAA,GAGAjf,EAAAgG,KAAA,OAAAs5B,GAGArgB,GAAA,EAIA,OAAAjf,GA7OA,CAAA1I,KAAA+mC,KACA/mC,KAAAumC,KAAAF,EAAA1Y,OAMA,IAJA,IAGA3X,EAHAtN,KACAg/B,EAAA,IAAAnC,EA1YA,SAAA0C,GAgBA,IAZA,IAAAnsC,EAAAmsC,EAAAjS,GAGAz6B,EAAAO,EAAAoN,OAGApP,EAAA,EAGAiV,KAGAjV,EAAAyB,GAAA,CAGA,IAAAnB,EAAA0B,EAAA0gB,WAAA1iB,GAKA,GAAAM,EAAA,OAAAA,EAAA,MAEA2U,EAAAL,KAAAtU,QAIA,UAAAA,MAAA,MAEA2U,EAAAL,KAAA,YAIA,UAAAtU,MAAA,MAGA,GAAAN,IAAAyB,EAAA,EACAwT,EAAAL,KAAA,WAGA,CAEA,IAAArU,EAAA4tC,EAAAzrB,WAAA1iB,EAAA,GAGA,UAAAO,MAAA,OAEA,IAAA2B,EAAA,KAAA5B,EAGAkC,EAAA,KAAAjC,EAIA0U,EAAAL,KAAA,OAAA1S,GAAA,IAAAM,GAGAxC,GAAA,OAMAiV,EAAAL,KAAA,OAMA5U,GAAA,EAIA,OAAAiV,EA5EA,CA0YAg5B,KAGAL,EAAAE,OACA5xB,EAAAhW,KAAA8mC,GAAAQ,GAAAI,IAAAva,WACA4Y,GAEA5iC,MAAA8qB,QAAAjY,GACAtN,EAAAgG,KAAAyH,MAAAzN,EAA0D7N,GAE1D6N,EAAAgG,KAAAsH,GAEA,IAAAhW,KAAAumC,GAAA,CACA,MACAvwB,EAAAhW,KAAA8mC,GAAAQ,GAAAI,IAAAva,WACA4Y,GAEA5iC,MAAA8qB,QAAAjY,GACAtN,EAAAgG,KAAAyH,MAAAzN,EAA4D7N,GAE5D6N,EAAAgG,KAAAsH,GAEAhW,KAAA8mC,GAAA,KAEA,WAAAtjC,WAAAkF,mECncA,IAWiBvC,EAXjBqc,EAAA5oB,EAAA,IAWA,SAAiBuM,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,SACnBiY,EAAbtX,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,UAAuBgI,EAA4BC,GACjD,OAAQA,GAAO,IAAIqP,GAAQpP,GAAOF,EAAGG,GAAUH,EAAGI,MAAcJ,EAAGI,KAAYJ,GAMjFhI,IACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAAkEjI,KAAKyH,GAAGa,GAAUtI,KAAKwH,GAASS,GAAWua,EAAAxmB,EAA2B4C,EAAOC,EAAMC,EAAQS,gBAAgB8G,GAOtL5G,OAAOiI,GACL,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,GAAUP,GAAO,IAAI8a,EAAAxmB,EAA2B4C,EAAOC,EAAMC,EAAQU,QAAQmI,GAAO3H,KAAKyH,GAAGuC,GAAWhK,KAAKwH,GAASS,GAASjI,KAAKyH,IAAM,KAQlJhI,aAAa8I,EAAeb,GAC1B,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,GAAUP,GAAO,IAAIvB,EAAIvH,EAAOC,EAAMC,EAAQk+B,IAAOr1B,GAAO3H,KAAKyH,GAAGe,GAASxI,KAAKwH,GAASS,GAAkB,GAARM,EAAYvI,KAAKyH,IAAM,KAMrIhI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,GAC3C,OAAOS,EAASjI,KAAKyH,GAAGgB,GAAazI,KAAKwH,GAASS,GAAU,EAQ/DxI,GAAc8I,EAAeb,GAC3B,IAAIO,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,IAC3C,OAAOS,GAAUP,GAAO,IAAIvB,EAAIvH,EAAOC,EAAMC,EAAQk+B,IAAOr1B,GAAO3H,KAAKyH,GAAGe,GAASxI,KAAKwH,GAASS,GAAkB,GAARM,EAAYvI,KAAKyH,IAAM,KAMrIhI,KACE,IAAIwI,EAASjI,KAAKyH,GAAGS,GAASlI,KAAKwH,GAAQ,IAC3C,OAAOS,EAASjI,KAAKyH,GAAGgB,GAAazI,KAAKwH,GAASS,GAAU,EAM/DxI,UAAmBqI,GACjBA,EAAQC,GAAY,GAOtBtI,UAAkBqI,EAA8BlI,GAC9CkI,EAAQe,GAAc,EAAGjJ,EAAS4iB,EAAAxmB,EAA2B4C,EAAOC,EAAMC,EAAQS,gBAAgB8G,IAOpG5G,UAAiBqI,EAA8B4wB,GAC7C5wB,EAAQiB,GAAe,EAAG2vB,EAAc,GAO1Cj5B,UAAuBqI,EAA8BogC,GACnDpgC,EAAQiB,GAAe,EAAGm/B,EAAoB,GAOhDzoC,UAA+BqI,EAA8BuB,GAC3DvB,EAAQmB,GAAY,GAAII,EAAU,GAOpC5J,UAAwBqI,EAA8B8wB,GACpD9wB,EAAQiB,GAAe,EAAG6vB,EAAqB,GAOjDn5B,UAAgCqI,EAA8BuB,GAC5DvB,EAAQmB,GAAY,GAAII,EAAU,GAOpC5J,UAAiBqI,GAEf,OADaA,EAAQE,KAQvBvI,UAA0BqI,EAA8BG,GACtDH,EAAQoD,GAAOjD,IAzJNnJ,EAAAiY,GAAMA,EADa,CAAAlY,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,WAkKjB,SAAiBA,IAAI,SAAAvH,IAAO,SAAAC,IAAM,SAAAC,GACnBA,EAAAk+B,SAAbv9B,cAUEO,KAAAwH,GAAiB,EAMjB/H,GAAO3F,EAAW2N,GAGhB,OAFAzH,KAAKwH,GAAS1N,EACdkG,KAAKyH,GAAKA,EACHzH,KAQTP,KACE,OAAOO,KAAKyH,GAAGqC,GAAU9J,KAAKwH,IAQhC/H,KACE,OAAOO,KAAKyH,GAAGG,GAAU5H,KAAKwH,GAAS,GASzC/H,aACE,OAAOO,KAAKyH,GAAGqC,GAAU9J,KAAKwH,GAAS,IAUzC/H,UAAmBqI,EAA8BG,EAA0BmP,EAAwB/W,GAMjG,OALAyH,EAAQgD,GAAK,EAAG,IAChBhD,EAAQiD,GAAW1K,GACnByH,EAAQ6qB,GAAI,GACZ7qB,EAAQirB,GAAW3b,GACnBtP,EAAQiD,GAAW9C,GACZH,EAAQG,OAhEa,CAAApJ,EAAAC,IAAAD,EAAAC,OAAN,CAAAF,EAAAC,IAAAD,EAAAC,OAAP,CAAAsH,EAAAvH,IAAAuH,EAAAvH,OAArB,CAAiBuH,mgCC5HAgiC,EASAn/B,EAcAo/B,EAYAhoC,EAoCAse,EAsBA3b,EAKAsI,EA+BAmjB,gDAlLjB50B,EAAAS,EAAA+L,EAAA,oCAAAiiC,EAAA/rC,IAiDA,SAAiB6rC,GACCA,EAAA9jC,OAASikC,EAAAluC,EACT+tC,EAAAlkC,MAAQqkC,EAAAhsC,EACR6rC,EAAAruB,OAASwuB,EAAAtsC,EACTmsC,EAAAzvB,UAAY6vB,EAAAluC,EACZ8tC,EAAA7E,aAAekF,EAAAlsC,EACf6rC,EAAAlE,kBAAoBuE,EAAAxsC,EANtC,CAAiBmsC,WASjB,SAAiBn/B,GACCA,EAAA4H,SAAW63B,EAAAzsC,EACXgN,EAAAsI,SAAWm3B,EAAAxsC,EACX+M,EAAAuI,SAAWk3B,EAAAnsC,EACX0M,EAAAwI,aAAei3B,EAAApsC,EACf2M,EAAAyI,eAAiBg3B,EAAAlsC,EACjByM,EAAA8I,WAAa22B,EAAA3uC,EACbkP,EAAAmJ,SAAWs2B,EAAA1sC,EACXiN,EAAAoJ,UAAYq2B,EAAA1uC,EACZiP,EAAAuJ,gBAAkBk2B,EAAA7qC,EAClBoL,EAAAwJ,eAAiBi2B,EAAApuC,EACjB2O,EAAAyJ,YAAcg2B,EAAAruC,EAXhC,CAAiB4O,WAcjB,SAAiBo/B,GACCA,EAAA9pC,KAAO4e,EAAAlhB,EACPosC,EAAArpC,SAAWme,EAAA3gB,EACX6rC,EAAAppC,SAAWke,EAAA/e,EACXiqC,EAAAnpC,UAAYie,EAAA5f,EACZ8qC,EAAAlpC,UAAYge,EAAArf,EACZuqC,EAAAjpC,WAAa+d,EAAAvf,EACbyqC,EAAAhpC,aAAe8d,EAAAhhB,EACfksC,EAAA/oC,cAAgB6d,EAAAxf,EAChB0qC,EAAA7oC,gBAAkB2d,EAAA1gB,EATpC,CAAiB4rC,WAYjB,SAAiBhoC,GACCA,EAAAZ,OAAS0d,EAAA/f,EACTiD,EAAAD,MAAQ+c,EAAA7f,EACR+C,EAAAuB,KAAOub,EAAAtgB,EACPwD,EAAAwB,IAAMsb,EAAAhf,EACNkC,EAAA0D,KAAOoZ,EAAAnO,EACP3O,EAAA2D,MAAQmZ,EAAAriB,EACRuF,EAAA4D,MAAQkZ,EAAAphB,EACRsE,EAAA6D,MAAQiZ,EAAAxjB,EACR0G,EAAA8D,MAAQgZ,EAAA3f,EACR6C,EAAA+D,OAAS+Y,EAAAlf,EACToC,EAAAgE,OAAS8Y,EAAAngB,EACTqD,EAAAiE,OAAS6Y,EAAA9f,EACTgD,EAAAyB,MAAQqb,EAAA/iB,EACRiG,EAAAwE,QAAUsY,EAAA3hB,EACV6E,EAAAyE,QAAUqY,EAAA1iB,EACV4F,EAAA0E,QAAUoY,EAAArhB,EACVuE,EAAA0B,OAASob,EAAA5gB,EACT8D,EAAA2B,KAAOmb,EAAA7e,EACP+B,EAAA4B,KAAOkb,EAAA9iB,EACPgG,EAAA6B,QAAUib,EAAA7gB,EACV+D,EAAA4E,MAAQkY,EAAAjhB,EACRmE,EAAA+B,KAAO+a,EAAA9e,EACPgC,EAAAgC,UAAY8a,EAAApgB,EACZsD,EAAAiC,SAAW6a,EAAA9gB,EACXgE,EAAAkC,KAAO4a,EAAAzgB,EACP2D,EAAAmC,OAAS2a,EAAAhgB,EACTkD,EAAAoC,MAAQ0a,EAAAvgB,EACRyD,EAAAwC,WAAasa,EAAAnhB,EACbqE,EAAAyC,YAAcqa,EAAA1f,EACd4C,EAAAqC,gBAAkBya,EAAAtf,EAClBwC,EAAAsC,cAAgBwa,EAAAnjB,EAChBqG,EAAAuF,KAAOuX,EAAA/gB,EACPiE,EAAAuC,WAAaua,EAAApjB,EAjC/B,CAAiBsG,WAoCjB,SAAiBse,GACCA,EAAAtT,OAASs9B,EAAA5sC,EACT4iB,EAAA/P,WAAa+5B,EAAAvuC,EACbukB,EAAA9P,WAAa85B,EAAApsC,EACboiB,EAAA3Q,UAAY26B,EAAA5uC,EACZ4kB,EAAAzP,YAAcy5B,EAAA3sC,EACd2iB,EAAAxP,WAAaw5B,EAAAtuC,EACbskB,EAAAvP,cAAgBu5B,EAAAruC,EAChBqkB,EAAAtP,WAAas5B,EAAAluC,EACbkkB,EAAArP,gBAAkBq5B,EAAA7sC,EAClB6iB,EAAApP,eAAiBo5B,EAAArrC,EACjBqhB,EAAAnP,aAAem5B,EAAA1sC,EACf0iB,EAAAhP,sBAAwBg5B,EAAAzsC,EACxByiB,EAAAjP,WAAai5B,EAAA7tC,EACb6jB,EAAA/O,WAAa+4B,EAAA9qC,EACb8gB,EAAA9O,oBAAsB84B,EAAArsC,EACtBqiB,EAAA7O,UAAY64B,EAAA3uC,EACZ2kB,EAAA3O,aAAe24B,EAAAntC,EACfmjB,EAAA1O,YAAc04B,EAAAxqC,EACdwgB,EAAAzO,iBAAmBy4B,EAAAnsC,EAnBrC,CAAiBmiB,WAsBjB,SAAiB3b,GACCA,EAAAoa,YAAcwrB,EAAA3sC,EACd+G,EAAA0b,cAAgBkqB,EAAArsC,EAFlC,CAAiByG,WAKjB,SAAiBsI,GACCA,EAAA6rB,YAAc0R,EAAAxuC,EACdiR,EAAAu5B,eAAiBgE,EAAAvsC,EACjBgP,EAAAyrB,SAAW8R,EAAApuC,EACX6Q,EAAA0rB,kBAAoB6R,EAAA7sC,EACpBsP,EAAA2rB,WAAa4R,EAAA5sC,EACbqP,EAAA4rB,SAAW2R,EAAApsC,EACX6O,EAAAqkB,UAAYkZ,EAAAlrC,EACZ2N,EAAA2kB,eAAiB4Y,EAAA3sC,EACjBoP,EAAAikB,WAAasZ,EAAA1qC,EACbmN,EAAA4kB,WAAa2Y,EAAAlvC,EACb2R,EAAA+kB,QAAUwY,EAAA/sC,EACVwP,EAAAkI,SAAWq1B,EAAAvrC,EACXgO,EAAAoI,SAAWm1B,EAAA/tC,EACXwQ,EAAAqI,SAAWk1B,EAAAtsC,EACX+O,EAAAo5B,aAAemE,EAAAhsC,EACfyO,EAAAuI,cAAgBg1B,EAAA9sC,EAChBuP,EAAA0I,cAAgB60B,EAAA9uC,EAChBuR,EAAA4I,YAAc20B,EAAAhrC,EACdyN,EAAA6I,YAAc00B,EAAAvuC,EACdgR,EAAAiJ,oBAAsBs0B,EAAArsC,EACtB8O,EAAAoJ,iBAAmBm0B,EAAA75B,EACnB1D,EAAAqJ,oBAAsBk0B,EAAAzsC,EACtBkP,EAAAuJ,yBAA2Bg0B,EAAA1sC,EAC3BmP,EAAAwJ,yBAA2B+zB,EAAAxsC,EAC3BiP,EAAAyJ,wBAA0B8zB,EAAAnsC,EAC1B4O,EAAA2J,sBAAwB4zB,EAAAzuC,EACxBkR,EAAA6J,iBAAmB0zB,EAAArtC,EACnB8P,EAAA8J,kBAAoByzB,EAAA7uC,EA5BtC,CAAiBsR,WA+BjB,SAAiBmjB,GACCA,EAAA7N,IAAMkoB,EAAA9uC,EACNy0B,EAAA5N,IAAMioB,EAAAttC,EACNizB,EAAAnN,IAAMwnB,EAAAjrC,EACN4wB,EAAAlN,GAAKunB,EAAAruC,EACLg0B,EAAAjN,OAASsnB,EAAA1uC,EAETq0B,EAAA5O,GAAKipB,EAAA9sC,EACLyyB,EAAAlP,IAAMupB,EAAAvsC,EACNkyB,EAAA7O,IAAMkpB,EAAA7sC,EACNwyB,EAAAtP,IAAM2pB,EAAAxsC,EACNmyB,EAAAvP,KAAO4pB,EAAAxuC,EACPm0B,EAAAxP,KAAO6pB,EAAAtsC,EACPiyB,EAAA3P,MAAQgqB,EAAAxrC,EACRmxB,EAAAzP,OAAS8pB,EAAAzuC,EACTo0B,EAAA1P,QAAU+pB,EAAA5sC,EACVuyB,EAAA/O,UAAYopB,EAAA/uC,EAhB9B,CAAiB00B,WAsBjB,IACI,IAAIh1B,EAAa6qC,KAAK,WAClB7qC,GAA0B,iBAAVA,IAEhBA,EAAYwP,KAAIA,EAChBxP,EAAY4G,KAAIA,EAChB5G,EAAY2uC,KAAIA,EAChB3uC,EAAY6R,KAAIA,EAChB7R,EAAa4uC,MAAIA,EACjB5uC,EAAcklB,OAAIA,EAClBllB,EAAeuJ,QAAIA,EACnBvJ,EAAiBg1B,UAAIA,EAErBh1B,EAAY2zB,KAAI2b,EAAA9sC,EAChBxC,EAAiB+zB,UAAIub,EAAAxsC,EACrB9C,EAAkBk0B,WAAIob,EAAAvsC,EACtB/C,EAA0BwrC,mBAAI+D,EAAA/sC,EAE9BxC,EAAqB2+B,cAAIkQ,EAAArsC,EACzBxC,EAAuBs+B,gBAAIuQ,EAAA/rC,EAE3B9C,EAAY8E,KAAI4e,EAAAnf,EAChBvE,EAAa2G,MAAI+c,EAAA7f,EACjB7D,EAAcgG,OAAI0d,EAAA/f,EAClB3D,EAAc4R,OAAIs9B,EAAA5sC,EAClBtC,EAAmB8d,YAAI0xB,EAAAhtC,EAEvBxC,EAAai3B,MAAIwY,EAAA3sC,EACjB9C,EAAqB0vC,cAAID,EAAAjtC,GAE/B,MAAOO,IAMT2gB,EAAA/f,EAAa8P,KAAIiQ,EAAA/f,EAAO8P,KACxBg8B,EAAA3sC,EAAY2Q,KAAIg8B,EAAA3sC,EAAM2Q,KACtBg8B,EAAA3sC,EAAiB6sC,UAAIF,EAAA3sC,EAAM6sC,UAC3BF,EAAA3sC,EAAkB8sC,WAAIH,EAAA3sC,EAAM8sC,WAC5BH,EAAA3sC,EAAa6xB,MAAI8a,EAAA3sC,EAAM6xB,MACvBua,EAAA5sC,EAAeV,OAAIstC,EAAA5sC,EAAOV,OAC1B4tC,EAAAhtC,EAAkBiR,KAAI+7B,EAAAhtC,EAAYiR,KAElCq7B,EAAAluC,EAAsBivC,IAAIf,EAAAluC,EAAiBivC,IAC3Cf,EAAAluC,EAA2B8hB,SAAIosB,EAAAluC,EAAiB8hB,SAEhDosB,EAAAhsC,EAAqB+sC,IAAIf,EAAAhsC,EAAgB+sC,IACzCf,EAAAhsC,EAA0B4f,SAAIosB,EAAAhsC,EAAgB4f,SAC9CosB,EAAAhsC,EAA4B8qB,WAAIkhB,EAAAhsC,EAAgB8qB,WAEhDkhB,EAAAtsC,EAAsBqtC,IAAIf,EAAAtsC,EAAiBqtC,IAC3Cf,EAAAtsC,EAA2BkgB,SAAIosB,EAAAtsC,EAAiBkgB,SAChDosB,EAAAtsC,EAA6BorB,WAAIkhB,EAAAtsC,EAAiBorB,WAElDqhB,EAAAruC,EAAkCsS,eAAI+7B,EAAAruC,EAAkBsS,eAEvDwQ,EAAAnf,EAAyB2D,KAAIwb,EAAAnf,EAAW2D,KACxCwb,EAAAnf,EAAyB4D,KAAIub,EAAAnf,EAAW4D,KACxCub,EAAAnf,EAAwB6D,IAAIsb,EAAAnf,EAAW6D,IACvCsb,EAAAnf,EAA0B8D,MAAIqb,EAAAnf,EAAW8D,MACzCqb,EAAAnf,EAA2B+D,OAAIob,EAAAnf,EAAW+D,OAC1Cob,EAAAnf,EAAyBgE,KAAImb,EAAAnf,EAAWgE,KACxCmb,EAAAnf,EAAyBiE,KAAIkb,EAAAnf,EAAWiE,KACxCkb,EAAAnf,EAA4BkE,QAAIib,EAAAnf,EAAWkE,QAC3Cib,EAAAnf,EAAyBmE,KAAIgb,EAAAnf,EAAWmE,KACxCgb,EAAAnf,EAAyBoE,KAAI+a,EAAAnf,EAAWoE,KACxC+a,EAAAnf,EAA8BqE,UAAI8a,EAAAnf,EAAWqE,UAC7C8a,EAAAnf,EAA6BsE,SAAI6a,EAAAnf,EAAWsE,SAC5C6a,EAAAnf,EAAyBuE,KAAI4a,EAAAnf,EAAWuE,KACxC4a,EAAAnf,EAA2BwE,OAAI2a,EAAAnf,EAAWwE,OAC1C2a,EAAAnf,EAA0ByE,MAAI0a,EAAAnf,EAAWyE,MACzC0a,EAAAnf,EAAoC0E,gBAAIya,EAAAnf,EAAW0E,gBACnDya,EAAAnf,EAAkC2E,cAAIwa,EAAAnf,EAAW2E,cACjDwa,EAAAnf,EAAwBgC,IAAImd,EAAAnf,EAAWgC,IACvCmd,EAAAnf,EAA+B4E,WAAIua,EAAAnf,EAAW4E,WAC9Cua,EAAAnf,EAA+B6E,WAAIsa,EAAAnf,EAAW6E,WAC9Csa,EAAAnf,EAAgC8E,YAAIqa,EAAAnf,EAAW8E,YAEhDqa,EAAA7iB,EAAuBivC,OAAIpsB,EAAA7iB,EAAeivC,OAC1CpsB,EAAA7iB,EAAsB0sB,MAAI7J,EAAA7iB,EAAe0sB,MACzC7J,EAAA7iB,EAAwBkvC,QAAIrsB,EAAA7iB,EAAekvC,QAC3CrsB,EAAA7iB,EAAyBgtB,SAAInK,EAAA7iB,EAAegtB,SAC5CnK,EAAA7iB,EAAuBotB,OAAIvK,EAAA7iB,EAAeotB,OAC1CvK,EAAA7iB,EAAuBmtB,OAAItK,EAAA7iB,EAAemtB,OAC1CtK,EAAA7iB,EAA0B6sB,UAAIhK,EAAA7iB,EAAe6sB,UAC7ChK,EAAA7iB,EAAuB4sB,OAAI/J,EAAA7iB,EAAe4sB,OAC1C/J,EAAA7iB,EAAuB2sB,OAAI9J,EAAA7iB,EAAe2sB,OAC1C9J,EAAA7iB,EAA4BwsB,YAAI3J,EAAA7iB,EAAewsB,YAC/C3J,EAAA7iB,EAA2BmvC,WAAItsB,EAAA7iB,EAAemvC,WAC9CtsB,EAAA7iB,EAAuBovC,OAAIvsB,EAAA7iB,EAAeovC,OAC1CvsB,EAAA7iB,EAAyBqvC,SAAIxsB,EAAA7iB,EAAeqvC,SAC5CxsB,EAAA7iB,EAAwBsvC,QAAIzsB,EAAA7iB,EAAesvC,QAC3CzsB,EAAA7iB,EAA6BuvC,aAAI1sB,EAAA7iB,EAAeuvC,aAChD1sB,EAAA7iB,EAA8BwvC,cAAI3sB,EAAA7iB,EAAewvC,cACjD3sB,EAAA7iB,EAAkCitB,kBAAIpK,EAAA7iB,EAAeitB,kBACrDpK,EAAA7iB,EAAgCyvC,gBAAI5sB,EAAA7iB,EAAeyvC,gBACnD5sB,EAAA7iB,EAAsB0vC,MAAI7sB,EAAA7iB,EAAe0vC,MACzC7sB,EAAA7iB,EAA6BoH,aAAIyb,EAAA7iB,EAAeoH,aAEhDinC,EAAApsC,EAAyB2Q,KAAIy7B,EAAApsC,EAAmB2Q,KAChDy7B,EAAA5uC,EAAwBmT,KAAIy7B,EAAA5uC,EAAkBmT,KAC9Cy7B,EAAA3sC,EAA0BkR,KAAIy7B,EAAA3sC,EAAoBkR,KAElD07B,EAAA3sC,EAAsCgH,gBAAI2lC,EAAA3sC,EAAqBgH,gBAC/D2lC,EAAArsC,EAAwC0G,gBAAI2lC,EAAArsC,EAAuB0G","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\nimport { Vector, View } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { DictionaryBatch } from './ipc/metadata';\nimport { TypeVisitor, VisitorNode } from './visitor';\n\nexport import Long = flatbuffers.Long;\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\nexport class Schema {\n    public static from(vectors: Vector[]) {\n        return new Schema(vectors.map((v, i) => new Field('' + i, v.type)));\n    }\n    // @ts-ignore\n    protected _bodyLength: number;\n    // @ts-ignore\n    protected _headerType: MessageHeader;\n    public readonly fields: Field[];\n    public readonly version: MetadataVersion;\n    public readonly metadata?: Map<string, string>;\n    public readonly dictionaries: Map<number, Field<Dictionary>>;\n    constructor(fields: Field[],\n                metadata?: Map<string, string>,\n                version: MetadataVersion = MetadataVersion.V4,\n                dictionaries: Map<number, Field<Dictionary>> = new Map()) {\n        this.fields = fields;\n        this.version = version;\n        this.metadata = metadata;\n        this.dictionaries = dictionaries;\n    }\n    public get bodyLength() { return this._bodyLength; }\n    public get headerType() { return this._headerType; }\n    public select(...fieldNames: string[]): Schema {\n        const namesToKeep = fieldNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        const newDictFields = new Map(), newFields = this.fields.filter((f) => namesToKeep[f.name]);\n        this.dictionaries.forEach((f, dictId) => (namesToKeep[f.name]) && newDictFields.set(dictId, f));\n        return new Schema(newFields, this.metadata, this.version, newDictFields);\n    }\n    public static [Symbol.toStringTag] = ((prototype: Schema) => {\n        prototype._bodyLength = 0;\n        prototype._headerType = MessageHeader.Schema;\n        return 'Schema';\n    })(Schema.prototype);\n}\n\nexport class Field<T extends DataType = DataType> {\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata?: Map<string, string> | null;\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata;\n    }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public get typeId(): T['TType'] { return this.type.TType; }\n    public get [Symbol.toStringTag](): string { return 'Field'; }\n    public get indices(): T | Int<any> {\n        return DataType.isDictionary(this.type) ? this.type.indices : this.type;\n    }\n}\n\nexport type TimeBitWidth = 32 | 64;\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n\nexport type NumericType = Int | Float | Date_ | Time | Interval | Timestamp;\nexport type FixedSizeType = Int64 |  Uint64 | Decimal | FixedSizeBinary;\nexport type PrimitiveType = NumericType | FixedSizeType;\n\nexport type FlatListType = Utf8 | Binary; // <-- these types have `offset`, `data`, and `validity` buffers\nexport type FlatType = Bool | PrimitiveType | FlatListType; // <-- these types have `data` and `validity` buffers\nexport type ListType = List<any>; // <-- these types have `offset` and `validity` buffers\nexport type NestedType = Map_ | Struct | List<any> | FixedSizeList<any> | Union<any>; // <-- these types have `validity` buffer and nested childData\nexport type SingleNestedType = List<any> | FixedSizeList<any>; // <-- these are nested types that can only have a single child\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\n export enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n    Dictionary      = 'Dictionary',  // Dictionary aka Category type\n    DenseUnion      = 'DenseUnion',  // Dense Union of logical types\n    SparseUnion     = 'SparseUnion',  // Sparse Union of logical types\n}\n\nexport interface DataType<TType extends Type = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n}\n\nexport abstract class DataType<TType extends Type = any> implements Partial<VisitorNode> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    static            isNull (x: any): x is Null            { return x && x.TType === Type.Null;            }\n    static             isInt (x: any): x is Int             { return x && x.TType === Type.Int;             }\n    static           isFloat (x: any): x is Float           { return x && x.TType === Type.Float;           }\n    static          isBinary (x: any): x is Binary          { return x && x.TType === Type.Binary;          }\n    static            isUtf8 (x: any): x is Utf8            { return x && x.TType === Type.Utf8;            }\n    static            isBool (x: any): x is Bool            { return x && x.TType === Type.Bool;            }\n    static         isDecimal (x: any): x is Decimal         { return x && x.TType === Type.Decimal;         }\n    static            isDate (x: any): x is Date_           { return x && x.TType === Type.Date;            }\n    static            isTime (x: any): x is Time            { return x && x.TType === Type.Time;            }\n    static       isTimestamp (x: any): x is Timestamp       { return x && x.TType === Type.Timestamp;       }\n    static        isInterval (x: any): x is Interval        { return x && x.TType === Type.Interval;        }\n    static            isList (x: any): x is List            { return x && x.TType === Type.List;            }\n    static          isStruct (x: any): x is Struct          { return x && x.TType === Type.Struct;          }\n    static           isUnion (x: any): x is Union           { return x && x.TType === Type.Union;           }\n    static      isDenseUnion (x: any): x is DenseUnion      { return x && x.TType === Type.DenseUnion;      }\n    static     isSparseUnion (x: any): x is SparseUnion     { return x && x.TType === Type.SparseUnion;     }\n    static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.TType === Type.FixedSizeBinary; }\n    static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.TType === Type.FixedSizeList;   }\n    static             isMap (x: any): x is Map_            { return x && x.TType === Type.Map;             }\n    static      isDictionary (x: any): x is Dictionary      { return x && x.TType === Type.Dictionary;      }\n\n    constructor(public readonly TType: TType,\n                public readonly children?: Field[]) {}\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    constructor() {\n        super(Type.Null);\n    }\n    public toString() { return `Null`; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\nexport interface Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> { TArray: TArrayType; TValue: TValueType; }\nexport class Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> {\n    constructor(public readonly isSigned: boolean,\n                public readonly bitWidth: IntBitWidth) {\n        super(Type.Int);\n    }\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.bitWidth) {\n            case  8: return (this.isSigned ?  Int8Array :  Uint8Array) as any;\n            case 16: return (this.isSigned ? Int16Array : Uint16Array) as any;\n            case 32: return (this.isSigned ? Int32Array : Uint32Array) as any;\n            case 64: return (this.isSigned ? Int32Array : Uint32Array) as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int) => {\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int.prototype);\n}\n\nexport class Int8 extends Int<number, Int8Array> { constructor() { super(true, 8); } }\nexport class Int16 extends Int<number, Int16Array> { constructor() { super(true, 16); } }\nexport class Int32 extends Int<number, Int32Array> { constructor() { super(true, 32); } }\nexport class Int64 extends Int<Int32Array, Int32Array> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int<number, Uint8Array> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int<number, Uint16Array> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int<number, Uint32Array> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int<Uint32Array, Uint32Array> { constructor() { super(false, 64); } }\n\nexport interface Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> { TArray: TArrayType; TValue: number; }\nexport class Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> {\n    constructor(public readonly precision: Precision) {\n        super(Type.Float);\n    }\n    // @ts-ignore\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array as any;\n            case Precision.SINGLE: return Float32Array as any;\n            case Precision.DOUBLE: return Float64Array as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Uint16Array> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Float32Array> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Float64Array> { constructor() { super(Precision.DOUBLE); } }\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super(Type.Binary);\n    }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super(Type.Utf8);\n    }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super(Type.Bool);\n    }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super(Type.Decimal);\n    }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Date_ extends DataType<Type.Date> { TArray: Int32Array; TValue: Date; }\nexport class Date_ extends DataType<Type.Date> {\n    constructor(public readonly unit: DateUnit) {\n        super(Type.Date);\n    }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport interface Time extends DataType<Type.Time> { TArray: Uint32Array; TValue: number; }\nexport class Time extends DataType<Type.Time> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly bitWidth: TimeBitWidth) {\n        super(Type.Time);\n    }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time.prototype);\n}\n\nexport interface Timestamp extends DataType<Type.Timestamp> { TArray: Int32Array; TValue: number; }\nexport class Timestamp extends DataType<Type.Timestamp> {\n    constructor(public unit: TimeUnit, public timezone?: string | null) {\n        super(Type.Timestamp);\n    }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp.prototype);\n}\n\nexport interface Interval extends DataType<Type.Interval> { TArray: Int32Array; TValue: Int32Array; }\nexport class Interval extends DataType<Type.Interval> {\n    constructor(public unit: IntervalUnit) {\n        super(Type.Interval);\n    }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval.prototype);\n}\n\nexport interface List<T extends DataType = any> extends DataType<Type.List>  { TArray: any; TValue: Vector<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List> {\n    constructor(public children: Field[]) {\n        super(Type.List, children);\n    }\n    public toString() { return `List<${this.valueType}>`; }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct extends DataType<Type.Struct> { TArray: any; TValue: View<any>; }\nexport class Struct extends DataType<Type.Struct> {\n    constructor(public children: Field[]) {\n        super(Type.Struct, children);\n    }\n    public toString() { return `Struct<${this.children.map((f) => f.type).join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\nexport interface Union<TType extends Type = any> extends DataType<TType> { TArray: Int8Array; TValue: any; }\nexport class Union<TType extends Type = any> extends DataType<TType> {\n    constructor(public readonly mode: UnionMode,\n                public readonly typeIds: ArrowType[],\n                public readonly children: Field[]) {\n        super(<TType> Type.Union, children);\n    }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union) => {\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union.prototype);\n}\n\nexport class DenseUnion extends Union<Type.DenseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DenseUnion) => {\n        return proto[Symbol.toStringTag] = 'DenseUnion';\n    })(DenseUnion.prototype);\n}\n\nexport class SparseUnion extends Union<Type.SparseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: SparseUnion) => {\n        return proto[Symbol.toStringTag] = 'SparseUnion';\n    })(SparseUnion.prototype);\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super(Type.FixedSizeBinary);\n    }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: any; TValue: Vector<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> {\n    constructor(public readonly listSize: number,\n                public readonly children: Field[]) {\n        super(Type.FixedSizeList, children);\n    }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Map_ extends DataType<Type.Map> { TArray: Uint8Array; TValue: View<any>; }\nexport class Map_ extends DataType<Type.Map> {\n    constructor(public readonly keysSorted: boolean,\n                public readonly children: Field[]) {\n        super(Type.Map, children);\n    }\n    public toString() { return `Map<${this.children.join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\nexport interface Dictionary<T extends DataType = any> extends DataType<Type.Dictionary> { TArray: T['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly dictionary: T;\n    public readonly indices: Int<any>;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: Int<any>, id?: Long | number | null, isOrdered?: boolean | null) {\n        super(Type.Dictionary);\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? DictionaryBatch.getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get ArrayType() { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n\nexport interface TypedArrayConstructor<T extends TypedArray = TypedArray> {\n    readonly prototype: T;\n    readonly BYTES_PER_ELEMENT: number;\n    new (length: number): T;\n    new (elements: Iterable<number>): T;\n    new (arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): T;\n    new (buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n    of(...items: number[]): T;\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): T;\n}\n\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\nexport interface TypedArray extends Iterable<number> {\n    [index: number]: number;\n    readonly length: number;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly buffer: ArrayBufferLike;\n    readonly BYTES_PER_ELEMENT: number;\n    [Symbol.toStringTag]: any;\n    [Symbol.iterator](): IterableIterator<number>;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n    copyWithin(target: number, start: number, end?: number): this;\n    every(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): this;\n    filter(callbackfn: (value: number, index: number, array: TypedArray) => any, thisArg?: any): TypedArray;\n    find(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: TypedArray) => void, thisArg?: any): void;\n    includes(searchElement: number, fromIndex?: number): boolean;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    map(callbackfn: (value: number, index: number, array: TypedArray) => number, thisArg?: any): TypedArray;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reverse(): TypedArray;\n    set(array: ArrayLike<number>, offset?: number): void;\n    slice(start?: number, end?: number): TypedArray;\n    some(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: (a: number, b: number) => number): this;\n    subarray(begin: number, end?: number): TypedArray;\n    toLocaleString(): string;\n    toString(): string;\n}\n","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data, ChunkedData, FlatData, BoolData, FlatListData, NestedData, DictionaryData } from './data';\nimport { VisitorNode, TypeVisitor, VectorVisitor } from './visitor';\nimport { DataType, ListType, FlatType, NestedType, FlatListType, TimeUnit } from './type';\nimport { IterableArrayLike, Precision, DateUnit, IntervalUnit, UnionMode } from './type';\n\nexport interface VectorLike { length: number; nullCount: number; }\n\nexport interface View<T extends DataType> {\n    clone(data: Data<T>): this;\n    isValid(index: number): boolean;\n    get(index: number): T['TValue'] | null;\n    set(index: number, value: T['TValue']): void;\n    toArray(): IterableArrayLike<T['TValue'] | null>;\n    indexOf(search: T['TValue']): number;\n    [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n}\n\nexport class Vector<T extends DataType = any> implements VectorLike, View<T>, VisitorNode {\n    public static create<T extends DataType>(data: Data<T>): Vector<T> {\n        return createVector(data);\n    }\n    public static concat<T extends DataType>(source?: Vector<T> | null, ...others: Vector<T>[]): Vector<T> {\n        return others.reduce((a, b) => a ? a.concat(b) : b, source!);\n    }\n    public type: T;\n    public length: number;\n    public readonly data: Data<T>;\n    public readonly view: View<T>;\n    constructor(data: Data<T>, view: View<T>) {\n        this.data = data;\n        this.type = data.type;\n        this.length = data.length;\n        let nulls: Uint8Array;\n        if ((<any> data instanceof ChunkedData) && !(view instanceof ChunkedView)) {\n            this.view = new ChunkedView(data as any) as any;\n        } else if (!(view instanceof ValidityView) && (nulls = data.nullBitmap!) && nulls.length > 0 && data.nullCount > 0) {\n            this.view = new ValidityView(data, view);\n        } else {\n            this.view = view;\n        }\n    }\n\n    public get nullCount() { return this.data.nullCount; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get [Symbol.toStringTag]() {\n        return `Vector<${this.type[Symbol.toStringTag]}>`;\n    }\n    public toJSON(): any { return this.toArray(); }\n    public clone<R extends T>(data: Data<R>, view: View<R> = this.view.clone(data) as any): this {\n        return new (this.constructor as any)(data, view);\n    }\n    public isValid(index: number): boolean {\n        return this.view.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this.view.get(index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.view.set(index, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return this.view.toArray();\n    }\n    public indexOf(value: T['TValue']) {\n        return this.view.indexOf(value);\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return this.view[Symbol.iterator]();\n    }\n    public concat(...others: Vector<T>[]): this {\n        if ((others = others.filter(Boolean)).length === 0) {\n            return this;\n        }\n        const { view } = this;\n        const vecs = !(view instanceof ChunkedView)\n            ? [this, ...others]\n            : [...view.chunkVectors, ...others];\n        const offsets = ChunkedData.computeOffsets(vecs);\n        const chunksLength = offsets[offsets.length - 1];\n        const chunkedData = new ChunkedData(this.type, chunksLength, vecs, 0, -1, offsets);\n        return this.clone(chunkedData, new ChunkedView(chunkedData)) as this;\n    }\n    public slice(begin?: number, end?: number): this {\n        let { length } = this;\n        let size = (this.view as any).size || 1;\n        let total = length, from = (begin || 0) * size;\n        let to = (typeof end === 'number' ? end : total) * size;\n        if (to < 0) { to = total - (to * -1) % total; }\n        if (from < 0) { from = total - (from * -1) % total; }\n        if (to < from) { [from, to] = [to, from]; }\n        total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;\n        const slicedData = this.data.slice(from, Math.min(total, length));\n        return this.clone(slicedData, this.view.clone(slicedData)) as this;\n    }\n\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this.type);\n    }\n    public acceptVectorVisitor(visitor: VectorVisitor): any {\n        return VectorVisitor.visitTypeInline(visitor, this.type, this);\n    }\n}\n\nexport abstract class FlatVector<T extends FlatType> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public lows(): IntVector<Int32> { return this.asInt32(0, 2); }\n    public highs(): IntVector<Int32> { return this.asInt32(1, 2); }\n    public asInt32(offset: number = 0, stride: number = 2): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        if (offset > 0) {\n            data = data.slice(offset, this.length - offset);\n        }\n        const int32s = new IntVector(data, new PrimitiveView(data, stride));\n        int32s.length = this.length / stride | 0;\n        return int32s;\n    }\n}\n\nexport abstract class ListVectorBase<T extends (ListType | FlatListType)> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n    public getValueOffset(index: number) {\n        return this.valueOffsets[index];\n    }\n    public getValueLength(index: number) {\n        return this.valueOffsets[index + 1] - this.valueOffsets[index];\n    }\n}\n\nexport abstract class NestedVector<T extends NestedType> extends Vector<T>  {\n    // @ts-ignore\n    public readonly view: NestedView<T>;\n    // @ts-ignore\n    protected _childData: Data<any>[];\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return this.view.getChildAt<R>(index);\n    }\n    public get childData(): Data<any>[] {\n        let data: Data<T> | Data<any>[];\n        if ((data = this._childData)) {\n            // Return the cached childData reference first\n            return data as Data<any>[];\n        } else if (!(<any> (data = this.data) instanceof ChunkedData)) {\n            // If data isn't chunked, cache and return NestedData's childData\n            return this._childData = data.childData;\n        }\n        // Otherwise if the data is chunked, concatenate the childVectors from each chunk\n        // to construct a single chunked Vector for each column. Then return the ChunkedData\n        // instance from each unified chunked column as the childData of a chunked NestedVector\n        const chunks = ((data as any as ChunkedData<T>).chunkVectors as NestedVector<T>[]);\n        return this._childData = chunks\n            .reduce<(Vector<T> | null)[][]>((cols, chunk) => chunk.childData\n            .reduce<(Vector<T> | null)[][]>((cols, _, i) => (\n                (cols[i] || (cols[i] = [])).push(chunk.getChildAt(i))\n            ) && cols || cols, cols), [] as Vector<T>[][])\n        .map((vecs) => Vector.concat<T>(...vecs).data);\n    }\n}\n\nimport { List, Binary, Utf8, Bool, } from './type';\nimport { Null, Int, Float, Decimal, Date_, Time, Timestamp, Interval } from './type';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, Float16, Float32, Float64 } from './type';\nimport { Struct, Union, SparseUnion, DenseUnion, FixedSizeBinary, FixedSizeList, Map_, Dictionary } from './type';\n\nimport { ChunkedView } from './vector/chunked';\nimport { ValidityView } from './vector/validity';\nimport { DictionaryView } from './vector/dictionary';\nimport { ListView, FixedSizeListView, BinaryView, Utf8View } from './vector/list';\nimport { UnionView, DenseUnionView, NestedView, StructView, MapView } from './vector/nested';\nimport { FlatView, NullView, BoolView, PrimitiveView, FixedSizeView, Float16View } from './vector/flat';\nimport { DateDayView, DateMillisecondView, IntervalYearMonthView } from './vector/flat';\nimport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './vector/flat';\nimport { packBools } from './util/bit';\n\nexport class NullVector extends Vector<Null> {\n    constructor(data: Data<Null>, view: View<Null> = new NullView(data)) {\n        super(data, view);\n    }\n}\n\nexport class BoolVector extends Vector<Bool> {\n    public static from(data: IterableArrayLike<boolean>) {\n        return new BoolVector(new BoolData(new Bool(), data.length, null, packBools(data)) as Data<Bool>);\n    }\n    public get values() { return this.data.values; }\n    constructor(data: Data<Bool>, view: View<Bool> = new BoolView(data)) {\n        super(data, view);\n    }\n}\n\nexport class IntVector<T extends Int = Int<any>> extends FlatVector<T> {\n    public static from(data: Int8Array): IntVector<Int8>;\n    public static from(data: Int16Array): IntVector<Int16>;\n    public static from(data: Int32Array): IntVector<Int32>;\n    public static from(data: Uint8Array): IntVector<Uint8>;\n    public static from(data: Uint16Array): IntVector<Uint16>;\n    public static from(data: Uint32Array): IntVector<Uint32>;\n    public static from(data: Int32Array, is64: true): IntVector<Int64>;\n    public static from(data: Uint32Array, is64: true): IntVector<Uint64>;\n    public static from(data: any, is64?: boolean) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? new IntVector(new FlatData(new Int64(), data.length, null, data))\n                : new IntVector(new FlatData(new Uint64(), data.length, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return new IntVector(new FlatData(new Int8(), data.length, null, data));\n            case Int16Array: return new IntVector(new FlatData(new Int16(), data.length, null, data));\n            case Int32Array: return new IntVector(new FlatData(new Int32(), data.length, null, data));\n            case Uint8Array: return new IntVector(new FlatData(new Uint8(), data.length, null, data));\n            case Uint16Array: return new IntVector(new FlatData(new Uint16(), data.length, null, data));\n            case Uint32Array: return new IntVector(new FlatData(new Uint32(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    static defaultView<T extends Int>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<T>, view: View<T> = IntVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class FloatVector<T extends Float = Float<any>> extends FlatVector<T> {\n    public static from(data: Uint16Array): FloatVector<Float16>;\n    public static from(data: Float32Array): FloatVector<Float32>;\n    public static from(data: Float64Array): FloatVector<Float64>;\n    public static from(data: any) {\n        switch (data.constructor) {\n            case Uint16Array: return new FloatVector(new FlatData(new Float16(), data.length, null, data));\n            case Float32Array: return new FloatVector(new FlatData(new Float32(), data.length, null, data));\n            case Float64Array: return new FloatVector(new FlatData(new Float64(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n    static defaultView<T extends Float>(data: Data<T>): FlatView<any> {\n        return data.type.precision !== Precision.HALF ? new FlatView(data) : new Float16View(data as Data<Float16>);\n    }\n    constructor(data: Data<T>, view: View<T> = FloatVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class DateVector extends FlatVector<Date_> {\n    static defaultView<T extends Date_>(data: Data<T>) {\n        return data.type.unit === DateUnit.DAY ? new DateDayView(data) : new DateMillisecondView(data, 2);\n    }\n    constructor(data: Data<Date_>, view: View<Date_> = DateVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case DateUnit.DAY: return new IntVector(data, new TimestampDayView(data as any, 1) as any);\n            case DateUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class DecimalVector extends FlatVector<Decimal> {\n    constructor(data: Data<Decimal>, view: View<Decimal> = new FixedSizeView(data, 4)) {\n        super(data, view);\n    }\n}\n\nexport class TimeVector extends FlatVector<Time> {\n    static defaultView<T extends Time>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<Time>, view: View<Time> = TimeVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class TimestampVector extends FlatVector<Timestamp> {\n    constructor(data: Data<Timestamp>, view: View<Timestamp> = new FixedSizeView(data, 2)) {\n        super(data, view);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case TimeUnit.SECOND: return new IntVector(data, new TimestampSecondView(data as any, 1) as any);\n            case TimeUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n            case TimeUnit.MICROSECOND: return new IntVector(data, new TimestampMicrosecondView(data as any, 2) as any);\n            case TimeUnit.NANOSECOND: return new IntVector(data, new TimestampNanosecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized time unit \"${TimeUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class IntervalVector extends FlatVector<Interval> {\n    static defaultView<T extends Interval>(data: Data<T>) {\n        return data.type.unit === IntervalUnit.YEAR_MONTH ? new IntervalYearMonthView(data) : new FixedSizeView(data, 2);\n    }\n    constructor(data: Data<Interval>, view: View<Interval> = IntervalVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class BinaryVector extends ListVectorBase<Binary> {\n    constructor(data: Data<Binary>, view: View<Binary> = new BinaryView(data)) {\n        super(data, view);\n    }\n    public asUtf8() {\n        return new Utf8Vector((this.data as FlatListData<any>).clone(new Utf8()));\n    }\n}\n\nexport class FixedSizeBinaryVector extends FlatVector<FixedSizeBinary> {\n    constructor(data: Data<FixedSizeBinary>, view: View<FixedSizeBinary> = new FixedSizeView(data, data.type.byteWidth)) {\n        super(data, view);\n    }\n}\n\nexport class Utf8Vector extends ListVectorBase<Utf8> {\n    constructor(data: Data<Utf8>, view: View<Utf8> = new Utf8View(data)) {\n        super(data, view);\n    }\n    public asBinary() {\n        return new BinaryVector((this.data as FlatListData<any>).clone(new Binary()));\n    }\n}\n\nexport class ListVector<T extends DataType = DataType> extends ListVectorBase<List<T>> {\n    // @ts-ignore\n    public readonly view: ListView<T>;\n    constructor(data: Data<List<T>>, view: ListView<T> = new ListView<T>(data as any)) {\n        super(data, view);\n    }\n    public getChildAt(index: number): Vector<T> | null {\n        return this.view.getChildAt<T>(index);\n    }\n}\n\nexport class FixedSizeListVector<T extends DataType = DataType> extends Vector<FixedSizeList<T>> {\n    // @ts-ignore\n    public readonly view: FixedSizeListView<T>;\n    constructor(data: Data<FixedSizeList<T>>, view: View<FixedSizeList<T>> = new FixedSizeListView(data)) {\n        super(data, view);\n    }\n    public getChildAt(index: number): Vector<T> | null {\n        return this.view.getChildAt<T>(index);\n    }\n}\n\nexport class MapVector extends NestedVector<Map_> {\n    constructor(data: Data<Map_>, view: View<Map_> = new MapView(data)) {\n        super(data, view);\n    }\n    public asStruct() {\n        return new StructVector((this.data as NestedData<any>).clone(new Struct(this.type.children)));\n    }\n}\n\nexport class StructVector extends NestedVector<Struct> {\n    constructor(data: Data<Struct>, view: View<Struct> = new StructView(data)) {\n        super(data, view);\n    }\n    public asMap(keysSorted: boolean = false) {\n        return new MapVector((this.data as NestedData<any>).clone(new Map_(keysSorted, this.type.children)));\n    }\n}\n\nexport class UnionVector<T extends (SparseUnion | DenseUnion) = any> extends NestedVector<T> {\n    constructor(data: Data<T>, view: View<T> = <any> (data.type.mode === UnionMode.Sparse ? new UnionView<SparseUnion>(data as Data<SparseUnion>) : new DenseUnionView(data as Data<DenseUnion>))) {\n        super(data, view);\n    }\n}\n\nexport class DictionaryVector<T extends DataType = DataType> extends Vector<Dictionary<T>> {\n    // @ts-ignore\n    public readonly indices: Vector<Int>;\n    // @ts-ignore\n    public readonly dictionary: Vector<T>;\n    constructor(data: Data<Dictionary<T>>, view: View<Dictionary<T>> = new DictionaryView<T>(data.dictionary, new IntVector(data.indices))) {\n        super(data as Data<any>, view);\n        if (view instanceof ValidityView) {\n            view = (view as any).view;\n        }\n        if (data instanceof DictionaryData && view instanceof DictionaryView) {\n            this.indices = view.indices;\n            this.dictionary = data.dictionary;\n        } else if (data instanceof ChunkedData && view instanceof ChunkedView) {\n            const chunks = view.chunkVectors as DictionaryVector<T>[];\n            // Assume the last chunk's dictionary data is the most up-to-date,\n            // including data from DictionaryBatches that were marked as deltas\n            this.dictionary = chunks[chunks.length - 1].dictionary;\n            this.indices = chunks.reduce<Vector<Int> | null>(\n                (idxs: Vector<Int> | null, dict: DictionaryVector<T>) =>\n                    !idxs ? dict.indices! : idxs.concat(dict.indices!),\n                null\n            )!;\n        } else {\n            throw new TypeError(`Unrecognized DictionaryVector view`);\n        }\n    }\n    public getKey(index: number) { return this.indices.get(index); }\n    public getValue(key: number) { return this.dictionary.get(key); }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n}\n\nexport const createVector = ((VectorLoader: new <T extends DataType>(data: Data<T>) => TypeVisitor) => (\n    <T extends DataType>(data: Data<T>) => TypeVisitor.visitTypeInline(new VectorLoader(data), data.type) as Vector<T>\n))(class VectorLoader<T extends DataType> extends TypeVisitor {\n    constructor(private data: Data<T>) { super(); }\n    visitNull           (_type: Null)            { return new NullVector(<any> this.data);            }\n    visitInt            (_type: Int)             { return new IntVector(<any> this.data);             }\n    visitFloat          (_type: Float)           { return new FloatVector(<any> this.data);           }\n    visitBinary         (_type: Binary)          { return new BinaryVector(<any> this.data);          }\n    visitUtf8           (_type: Utf8)            { return new Utf8Vector(<any> this.data);            }\n    visitBool           (_type: Bool)            { return new BoolVector(<any> this.data);            }\n    visitDecimal        (_type: Decimal)         { return new DecimalVector(<any> this.data);         }\n    visitDate           (_type: Date_)           { return new DateVector(<any> this.data);            }\n    visitTime           (_type: Time)            { return new TimeVector(<any> this.data);            }\n    visitTimestamp      (_type: Timestamp)       { return new TimestampVector(<any> this.data);       }\n    visitInterval       (_type: Interval)        { return new IntervalVector(<any> this.data);        }\n    visitList           (_type: List)            { return new ListVector(<any> this.data);            }\n    visitStruct         (_type: Struct)          { return new StructVector(<any> this.data);          }\n    visitUnion          (_type: Union)           { return new UnionVector(<any> this.data);           }\n    visitFixedSizeBinary(_type: FixedSizeBinary) { return new FixedSizeBinaryVector(<any> this.data); }\n    visitFixedSizeList  (_type: FixedSizeList)   { return new FixedSizeListVector(<any> this.data);   }\n    visitMap            (_type: Map_)            { return new MapVector(<any> this.data);             }\n    visitDictionary     (_type: Dictionary)      { return new DictionaryVector(<any> this.data);      }\n});\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { popcnt_bit_range } from './util/bit';\nimport { VectorLike, Vector } from './vector';\nimport { Int, Bool, FlatListType, List, Struct, Map_ } from './type';\nimport { VectorType, TypedArray, TypedArrayConstructor, Dictionary } from './type';\nimport { DataType, FlatType, ListType, NestedType, SingleNestedType, DenseUnion, SparseUnion } from './type';\n\nexport function toTypedArray<T extends TypedArray>(ArrayType: TypedArrayConstructor<T>, values?: T | ArrayLike<number> | Iterable<number> | null): T {\n    if (!ArrayType && ArrayBuffer.isView(values)) { return values; }\n    return values instanceof ArrayType ? values\n         : !values || !ArrayBuffer.isView(values) ? ArrayType.from(values || [])\n         : new ArrayType(values.buffer, values.byteOffset, values.byteLength / ArrayType.BYTES_PER_ELEMENT);\n}\n\nexport type Data<T extends DataType> = DataTypes<T>[T['TType']] & BaseData<T>;\nexport interface DataTypes<T extends DataType> {\n/*                [Type.NONE]*/  0: BaseData<T>;\n/*                [Type.Null]*/  1: FlatData<T>;\n/*                 [Type.Int]*/  2: FlatData<T>;\n/*               [Type.Float]*/  3: FlatData<T>;\n/*              [Type.Binary]*/  4: FlatListData<T>;\n/*                [Type.Utf8]*/  5: FlatListData<T>;\n/*                [Type.Bool]*/  6: BoolData;\n/*             [Type.Decimal]*/  7: FlatData<T>;\n/*                [Type.Date]*/  8: FlatData<T>;\n/*                [Type.Time]*/  9: FlatData<T>;\n/*           [Type.Timestamp]*/ 10: FlatData<T>;\n/*            [Type.Interval]*/ 11: FlatData<T>;\n/*                [Type.List]*/ 12: ListData<List<T>>;\n/*              [Type.Struct]*/ 13: NestedData<Struct>;\n/*               [Type.Union]*/ 14: UnionData;\n/*     [Type.FixedSizeBinary]*/ 15: FlatData<T>;\n/*       [Type.FixedSizeList]*/ 16: SingleNestedData<any>;\n/*                 [Type.Map]*/ 17: NestedData<Map_>;\n/*  [Type.DenseUnion]*/ DenseUnion: DenseUnionData;\n/*[Type.SparseUnion]*/ SparseUnion: SparseUnionData;\n/*[  Type.Dictionary]*/ Dictionary: DictionaryData<any>;\n}\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Array::null_count is called the\n// first time, the null count will be computed. See ARROW-33\nexport type kUnknownNullCount = -1;\nexport const kUnknownNullCount = -1;\n\nexport class BaseData<T extends DataType = DataType> implements VectorLike {\n    public type: T;\n    public length: number;\n    public offset: number;\n    // @ts-ignore\n    public childData: Data<any>[];\n    protected _nullCount: number | kUnknownNullCount;\n    protected /*  [VectorType.OFFSET]:*/ 0?: Int32Array;\n    protected /*    [VectorType.DATA]:*/ 1?: T['TArray'];\n    protected /*[VectorType.VALIDITY]:*/ 2?: Uint8Array;\n    protected /*    [VectorType.TYPE]:*/ 3?: Int8Array;\n    constructor(type: T, length: number, offset?: number, nullCount?: number) {\n        this.type = type;\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    }\n    public get typeId() { return this.type.TType; }\n    public get nullBitmap() { return this[VectorType.VALIDITY]; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount === -1 && (nullBitmap = this[VectorType.VALIDITY])) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new BaseData(type, length, offset, nullCount) as any;\n    }\n    public slice(offset: number, length: number) {\n        return length <= 0 ? this : this.sliceInternal(this.clone(\n            this.type, length, this.offset + offset, +(this._nullCount === 0) - 1\n        ) as any, offset, length);\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        let arr: any;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = this[VectorType.TYPE]) && (clone[VectorType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = this[VectorType.OFFSET]) && (clone[VectorType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = this[VectorType.DATA]) && (clone[VectorType.DATA] = this.sliceData(arr, offset, length));\n        return clone;\n    }\n    protected sliceData(data: T['TArray'] & TypedArray, offset: number, length: number) {\n        return data.subarray(offset, offset + length);\n    }\n    protected sliceOffsets(valueOffsets: Int32Array, offset: number, length: number) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n}\n\nexport class FlatData<T extends FlatType> extends BaseData<T> {\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, data: Iterable<number>, offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this[VectorType.DATA] = toTypedArray(this.ArrayType, data);\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new (this.constructor as any)(type, length, this[VectorType.VALIDITY], this[VectorType.DATA], offset, nullCount) as FlatData<R>;\n    }\n}\n\nexport class BoolData extends FlatData<Bool> {\n    protected sliceData(data: Uint8Array) { return data; }\n}\n\nexport class FlatListData<T extends FlatListType> extends FlatData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, data: T['TArray'], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, data, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new FlatListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this[VectorType.DATA], offset, nullCount) as FlatListData<R>;\n    }\n}\n\nexport class DictionaryData<T extends DataType> extends BaseData<Dictionary<T>> {\n    protected _dictionary: Vector<T>;\n    protected _indices: Data<Int<any>>;\n    public get indices() { return this._indices; }\n    public get dictionary() { return this._dictionary; }\n    constructor(type: Dictionary<T>, dictionary: Vector<T>, indices: Data<Int<any>>) {\n        super(type, indices.length, indices.offset, (indices as any)._nullCount);\n        this._indices = indices;\n        this._dictionary = dictionary;\n    }\n    public get nullCount() { return this._indices.nullCount; }\n    public get nullBitmap() { return this._indices.nullBitmap; }\n    public clone<R extends Dictionary<T>>(type: R, length = this.length, offset = this.offset) {\n        const data = this._dictionary.data.clone(type.dictionary as any);\n        return new DictionaryData<R>(\n            this.type as any,\n            this._dictionary.clone(data) as any,\n            this._indices.slice(offset - this.offset, length)\n        ) as any;\n    }\n    protected sliceInternal(clone: this, _offset: number, _length: number) {\n        clone.length = clone._indices.length;\n        clone._nullCount = (clone._indices as any)._nullCount;\n        return clone;\n    }\n}\n\nexport class NestedData<T extends NestedType = NestedType> extends BaseData<T> {\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this.childData = childData;\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount) as any;\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        if (!this[VectorType.OFFSET]) {\n            clone.childData = this.childData.map((child) => child.slice(offset, length));\n        }\n        return super.sliceInternal(clone, offset, length);\n    }\n}\n\nexport class SingleNestedData<T extends SingleNestedType> extends NestedData<T> {\n    protected _valuesData: Data<T>;\n    public get values() { return this._valuesData; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, [valueChildData], offset, nullCount);\n        this._valuesData = valueChildData;\n    }\n}\n\nexport class ListData<T extends ListType> extends SingleNestedData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, valueChildData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new ListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this._valuesData as any, offset, nullCount) as any;\n    }\n}\n\nexport class UnionData<T extends (DenseUnion | SparseUnion) = any> extends NestedData<T> {\n    public /*    [VectorType.TYPE]:*/ 3: T['TArray'];\n    public get typeIds() { return this[VectorType.TYPE]; }\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, childData, offset, nullCount);\n        this[VectorType.TYPE] = toTypedArray(Int8Array, typeIds);\n        this.typeIdToChildIndex = type.typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new UnionData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount) as any;\n    }\n}\n\nexport class SparseUnionData extends UnionData<SparseUnion> {\n    constructor(type: SparseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n    }\n    public clone<R extends SparseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new SparseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this.childData,\n            offset, nullCount\n        ) as any;\n    }\n}\n\nexport class DenseUnionData extends UnionData<DenseUnion> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: DenseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, valueOffsets: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends DenseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new DenseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this[VectorType.OFFSET],\n            this.childData,\n            offset, nullCount\n        ) as any;\n    }\n}\n\nexport class ChunkedData<T extends DataType> extends BaseData<T> {\n    // @ts-ignore\n    protected _chunkData: Data<T>[];\n    protected _chunkVectors: Vector<T>[];\n    protected _chunkOffsets: Uint32Array;\n    public get chunkVectors() { return this._chunkVectors; }\n    public get chunkOffsets() { return this._chunkOffsets; }\n    public get chunkData() {\n        return this._chunkData || (\n               this._chunkData = this._chunkVectors.map(({ data }) => data));\n    }\n    constructor(type: T, length: number, chunkVectors: Vector<T>[], offset?: number, nullCount?: number, chunkOffsets?: Uint32Array) {\n        super(type, length, offset, nullCount);\n        this._chunkVectors = chunkVectors;\n        this._chunkOffsets = chunkOffsets || ChunkedData.computeOffsets(chunkVectors);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount === -1) {\n            this._nullCount = nullCount = this._chunkVectors.reduce((x, c) => x + c.nullCount, 0);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new ChunkedData(\n            type, length,\n            this._chunkVectors.map((vec) => vec.clone(vec.data.clone(type))) as any,\n            offset, nullCount, this._chunkOffsets\n        ) as any;\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        const chunks = this._chunkVectors;\n        const offsets = this._chunkOffsets;\n        const chunkSlices: Vector<T>[] = [];\n        for (let childIndex = -1, numChildren = chunks.length; ++childIndex < numChildren;) {\n            const child = chunks[childIndex];\n            const childLength = child.length;\n            const childOffset = offsets[childIndex];\n            // If the child is to the right of the slice boundary, exclude\n            if (childOffset >= offset + length) { continue; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= childOffset + childLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (childOffset >= offset && (childOffset + childLength) <= offset + length) {\n                chunkSlices.push(child);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - childOffset);\n            const end = begin + Math.min(childLength - begin, (offset + length) - childOffset);\n            chunkSlices.push(child.slice(begin, end));\n        }\n        clone._chunkVectors = chunkSlices;\n        clone._chunkOffsets = ChunkedData.computeOffsets(chunkSlices);\n        return clone;\n    }\n    static computeOffsets<T extends DataType>(childVectors: Vector<T>[]) {\n        const childOffsets = new Uint32Array(childVectors.length + 1);\n        for (let index = 0, length = childOffsets.length, childOffset = childOffsets[0] = 0; ++index < length;) {\n            childOffsets[index] = (childOffset += childVectors[index - 1].length);\n        }\n        return childOffsets;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View } from '../vector';\nimport { getBool, setBool, iterateBits } from '../util/bit';\nimport { FlatType, PrimitiveType, IterableArrayLike } from '../type';\nimport { Bool, Float16, Date_, Interval, Null, Int32, Timestamp } from '../type';\n\nexport class FlatView<T extends FlatType> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public get(index: number): T['TValue'] {\n        return this.values[index];\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.values[index] = value;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values.subarray(0, this.length);\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue']> {\n        return this.values.subarray(0, this.length)[Symbol.iterator]() as IterableIterator<T['TValue']>;\n    }\n}\n\nexport class NullView implements View<Null> {\n    public length: number;\n    constructor(data: Data<Null>) {\n        this.length = data.length;\n    }\n    public clone(data: Data<Null>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public set(): void {}\n    public get() { return null; }\n    public toArray(): IterableArrayLike<null> {\n        return [...this];\n    }\n    public indexOf(search: any) {\n        // if you're looking for nulls and the view isn't empty, we've got 'em!\n        return search === null && this.length > 0 ? 0 : -1;\n    }\n    public *[Symbol.iterator](): IterableIterator<null> {\n        for (let index = -1, length = this.length; ++index < length;) {\n            yield null;\n        }\n    }\n}\n\nexport class BoolView extends FlatView<Bool> {\n    protected offset: number;\n    constructor(data: Data<Bool>) {\n        super(data);\n        this.offset = data.offset;\n    }\n    public toArray() { return [...this]; }\n    public get(index: number): boolean {\n        const boolBitIndex = this.offset + index;\n        return getBool(null, index, this.values[boolBitIndex >> 3], boolBitIndex % 8);\n    }\n    public set(index: number, value: boolean): void {\n        setBool(this.values, this.offset + index, value);\n    }\n    public [Symbol.iterator](): IterableIterator<boolean> {\n        return iterateBits<boolean>(this.values, this.offset, this.length, this.values, getBool);\n    }\n}\n\nexport class PrimitiveView<T extends PrimitiveType> extends FlatView<T> {\n    public size: number;\n    public ArrayType: T['ArrayType'];\n    constructor(data: Data<T>, size?: number) {\n        super(data);\n        this.size = size || 1;\n        this.ArrayType = data.type.ArrayType;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, this.size) as this;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values[index * size];\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values[index * size] = value;\n    }\n    public get(index: number): T['TValue'] {\n        return this.getValue(this.values, index, this.size);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setValue(this.values, index, this.size, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.size > 1 ?\n            new this.ArrayType(this) :\n            this.values.subarray(0, this.length);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getValue;\n        const { size, values, length } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, size);\n        }\n    }\n}\n\nexport class FixedSizeView<T extends PrimitiveType> extends PrimitiveView<T> {\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values;\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value.every((d: number, i: number) => d === search[i])) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values.subarray(index * size, index * size + size);\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values.set((value as T['TArray']).subarray(0, size), index * size);\n    }\n}\n\nexport class Float16View extends PrimitiveView<Float16> {\n    public toArray() { return new Float32Array(this); }\n    protected getValue(values: Uint16Array, index: number, size: number): number {\n        return (values[index * size] - 32767) / 32767;\n    }\n    protected setValue(values: Uint16Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 32767) + 32767;\n    }\n}\n\nexport class DateDayView extends PrimitiveView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochDaysToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        values[index * size] = value.valueOf() / 86400000;\n    }\n}\n\nexport class DateMillisecondView extends FixedSizeView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochMillisecondsLongToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        const epochMs = value.valueOf();\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampDayView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochDaysToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 86400000) | 0;\n    }\n}\n\nexport class TimestampSecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochSecondsToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 1000) | 0;\n    }\n}\n\nexport class TimestampMillisecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMillisecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampMicrosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMicrosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000) / 4294967296) | 0;\n    }\n}\n\nexport class TimestampNanosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochNanosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000000) / 4294967296) | 0;\n    }\n}\n\nexport class IntervalYearMonthView extends PrimitiveView<Interval> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Int32Array {\n        const interval = values[index * size];\n        return new Int32Array([interval / 12, /* years */ interval % 12  /* months */]);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Int32Array): void {\n        values[index * size] = (value[0] * 12) + (value[1] % 12);\n    }\n}\n\nexport class IntervalYearView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] / 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 12) + (values[index * size] % 12);\n    }\n}\n\nexport class IntervalMonthView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] % 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (values[index * size] * 12) + (value % 12);\n    }\n}\n\nexport function epochSecondsToMs(data: Int32Array, index: number) { return 1000 * data[index]; }\nexport function epochDaysToMs(data: Int32Array, index: number) { return 86400000 * data[index]; }\nexport function epochMillisecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1]) + (data[index] >>> 0); }\nexport function epochMicrosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000); }\nexport function epochNanosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000); }\n\nexport function epochMillisecondsToDate(epochMs: number) { return new Date(epochMs); }\nexport function epochDaysToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochDaysToMs(data, index)); }\nexport function epochSecondsToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochSecondsToMs(data, index)); }\nexport function epochNanosecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochNanosecondsLongToMs(data, index)); }\nexport function epochMillisecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index)); }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { align } from '../util/bit';\nimport { Schema, Long, MessageHeader, MetadataVersion } from '../type';\n\nexport class Footer {\n    constructor(public dictionaryBatches: FileBlock[], public recordBatches: FileBlock[], public schema: Schema) {}\n}\n\nexport class FileBlock {\n    public offset: number;\n    public bodyLength: number;\n    constructor(public metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\nexport class Message {\n    public bodyLength: number;\n    public version: MetadataVersion;\n    public headerType: MessageHeader;\n    constructor(version: MetadataVersion, bodyLength: Long | number, headerType: MessageHeader) {\n        this.version = version;\n        this.headerType = headerType;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    static isSchema(m: Message): m is Schema { return m.headerType === MessageHeader.Schema; }\n    static isRecordBatch(m: Message): m is RecordBatchMetadata { return m.headerType === MessageHeader.RecordBatch; }\n    static isDictionaryBatch(m: Message): m is DictionaryBatch { return m.headerType === MessageHeader.DictionaryBatch; }\n}\n\nexport class RecordBatchMetadata extends Message {\n    public length: number;\n    public nodes: FieldMetadata[];\n    public buffers: BufferMetadata[];\n    constructor(version: MetadataVersion, length: Long | number, nodes: FieldMetadata[], buffers: BufferMetadata[], bodyLength?: Long | number) {\n        if (bodyLength === void(0)) {\n            bodyLength = buffers.reduce((s, b) => align(s + b.length + (b.offset - s), 8), 0);\n        }\n        super(version, bodyLength, MessageHeader.RecordBatch);\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class DictionaryBatch extends Message {\n    public id: number;\n    public isDelta: boolean;\n    public data: RecordBatchMetadata;\n    constructor(version: MetadataVersion, data: RecordBatchMetadata, id: Long | number, isDelta: boolean = false) {\n        super(version, data.bodyLength, MessageHeader.DictionaryBatch);\n        this.isDelta = isDelta;\n        this.data = data;\n        this.id = typeof id === 'number' ? id : id.low;\n    }\n    private static atomicDictionaryId = 0;\n    public static getId() { return DictionaryBatch.atomicDictionaryId++; }\n    public get nodes(): FieldMetadata[] { return this.data.nodes; }\n    public get buffers(): BufferMetadata[] { return this.data.buffers; }\n}\n\nexport class BufferMetadata {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class FieldMetadata {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { TypedArray } from '../type';\n\nexport function align(value: number, alignment: number) {\n    return value + padding(value, alignment);\n}\n\nexport function padding(value: number, alignment: number) {\n    return (value % alignment === 0 ? 0 : alignment - value % alignment);\n}\n\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\nexport function packBools(values: Iterable<any>) {\n    let n = 0, i = 0;\n    let xs: number[] = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do { xs[i] = 0; } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\nexport function popcnt_array(arr: TypedArray, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst carryBit16 = 1 << 16;\n\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    high(): number { return this.buffer[1]; }\n    low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\nexport const PADDING = 4;\nexport const MAGIC_STR = 'ARROW1';\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function isValidArrowFile(bb: ByteBuffer) {\n    let fileLength = bb.capacity(), footerLength: number, lengthOffset: number;\n    if ((fileLength < magicX2AndPadding /*                     Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        (/*                                                    Invalid footer length  */\n        (footerLength = bb.readInt32(lengthOffset = fileLength - magicAndPadding)) < 1 &&\n        (footerLength + lengthOffset > fileLength))) {\n        return false;\n    }\n    return true;\n}\n\nexport const magicLength = MAGIC.length;\nexport const magicAndPadding = magicLength + PADDING;\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { Type, DataType, Dictionary } from './type';\nimport { Utf8, Binary, Decimal, FixedSizeBinary } from './type';\nimport { List, FixedSizeList, Union, Map_, Struct } from './type';\nimport { Bool, Null, Int, Float, Date_, Time, Interval, Timestamp } from './type';\n\nexport interface VisitorNode {\n    acceptTypeVisitor(visitor: TypeVisitor): any;\n    acceptVectorVisitor(visitor: VectorVisitor): any;\n}\n\nexport abstract class TypeVisitor {\n    visit(type: Partial<VisitorNode>): any {\n        return type.acceptTypeVisitor && type.acceptTypeVisitor(this) || null;\n    }\n    visitMany(types: Partial<VisitorNode>[]): any[] {\n        return types.map((type) => this.visit(type));\n    }\n    abstract visitNull?(type: Null): any;\n    abstract visitBool?(type: Bool): any;\n    abstract visitInt?(type: Int): any;\n    abstract visitFloat?(type: Float): any;\n    abstract visitUtf8?(type: Utf8): any;\n    abstract visitBinary?(type: Binary): any;\n    abstract visitFixedSizeBinary?(type: FixedSizeBinary): any;\n    abstract visitDate?(type: Date_): any;\n    abstract visitTimestamp?(type: Timestamp): any;\n    abstract visitTime?(type: Time): any;\n    abstract visitDecimal?(type: Decimal): any;\n    abstract visitList?(type: List): any;\n    abstract visitStruct?(type: Struct): any;\n    abstract visitUnion?(type: Union<any>): any;\n    abstract visitDictionary?(type: Dictionary): any;\n    abstract visitInterval?(type: Interval): any;\n    abstract visitFixedSizeList?(type: FixedSizeList): any;\n    abstract visitMap?(type: Map_): any;\n\n    static visitTypeInline<T extends DataType>(visitor: TypeVisitor, type: T): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull            && visitor.visitNull(type            as any as Null);\n            case Type.Int:             return visitor.visitInt             && visitor.visitInt(type             as any as Int);\n            case Type.Float:           return visitor.visitFloat           && visitor.visitFloat(type           as any as Float);\n            case Type.Binary:          return visitor.visitBinary          && visitor.visitBinary(type          as any as Binary);\n            case Type.Utf8:            return visitor.visitUtf8            && visitor.visitUtf8(type            as any as Utf8);\n            case Type.Bool:            return visitor.visitBool            && visitor.visitBool(type            as any as Bool);\n            case Type.Decimal:         return visitor.visitDecimal         && visitor.visitDecimal(type         as any as Decimal);\n            case Type.Date:            return visitor.visitDate            && visitor.visitDate(type            as any as Date_);\n            case Type.Time:            return visitor.visitTime            && visitor.visitTime(type            as any as Time);\n            case Type.Timestamp:       return visitor.visitTimestamp       && visitor.visitTimestamp(type       as any as Timestamp);\n            case Type.Interval:        return visitor.visitInterval        && visitor.visitInterval(type        as any as Interval);\n            case Type.List:            return visitor.visitList            && visitor.visitList(type            as any as List<T>);\n            case Type.Struct:          return visitor.visitStruct          && visitor.visitStruct(type          as any as Struct);\n            case Type.Union:           return visitor.visitUnion           && visitor.visitUnion(type           as any as Union);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(type as any as FixedSizeBinary);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList   && visitor.visitFixedSizeList(type   as any as FixedSizeList);\n            case Type.Map:             return visitor.visitMap             && visitor.visitMap(type             as any as Map_);\n            case Type.Dictionary:      return visitor.visitDictionary      && visitor.visitDictionary(type      as any as Dictionary);\n            default: return null;\n        }\n    }\n}\n\nexport abstract class VectorVisitor {\n    visit(vector: Partial<VisitorNode>): any {\n        return vector.acceptVectorVisitor && vector.acceptVectorVisitor(this) || null;\n    }\n    visitMany(vectors: Partial<VisitorNode>[]): any[] {\n        return vectors.map((vector) => this.visit(vector));\n    }\n    abstract visitNull?(vector: Vector<Null>): any;\n    abstract visitBool?(vector: Vector<Bool>): any;\n    abstract visitInt?(vector: Vector<Int>): any;\n    abstract visitFloat?(vector: Vector<Float>): any;\n    abstract visitUtf8?(vector: Vector<Utf8>): any;\n    abstract visitBinary?(vector: Vector<Binary>): any;\n    abstract visitFixedSizeBinary?(vector: Vector<FixedSizeBinary>): any;\n    abstract visitDate?(vector: Vector<Date_>): any;\n    abstract visitTimestamp?(vector: Vector<Timestamp>): any;\n    abstract visitTime?(vector: Vector<Time>): any;\n    abstract visitDecimal?(vector: Vector<Decimal>): any;\n    abstract visitList?(vector: Vector<List>): any;\n    abstract visitStruct?(vector: Vector<Struct>): any;\n    abstract visitUnion?(vector: Vector<Union<any>>): any;\n    abstract visitDictionary?(vector: Vector<Dictionary>): any;\n    abstract visitInterval?(vector: Vector<Interval>): any;\n    abstract visitFixedSizeList?(vector: Vector<FixedSizeList>): any;\n    abstract visitMap?(vector: Vector<Map_>): any;\n\n    static visitTypeInline<T extends DataType>(visitor: VectorVisitor, type: T, vector: Vector<T>): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull            && visitor.visitNull(vector            as any as Vector<Null>);\n            case Type.Int:             return visitor.visitInt             && visitor.visitInt(vector             as any as Vector<Int>);\n            case Type.Float:           return visitor.visitFloat           && visitor.visitFloat(vector           as any as Vector<Float>);\n            case Type.Binary:          return visitor.visitBinary          && visitor.visitBinary(vector          as any as Vector<Binary>);\n            case Type.Utf8:            return visitor.visitUtf8            && visitor.visitUtf8(vector            as any as Vector<Utf8>);\n            case Type.Bool:            return visitor.visitBool            && visitor.visitBool(vector            as any as Vector<Bool>);\n            case Type.Decimal:         return visitor.visitDecimal         && visitor.visitDecimal(vector         as any as Vector<Decimal>);\n            case Type.Date:            return visitor.visitDate            && visitor.visitDate(vector            as any as Vector<Date_>);\n            case Type.Time:            return visitor.visitTime            && visitor.visitTime(vector            as any as Vector<Time>);\n            case Type.Timestamp:       return visitor.visitTimestamp       && visitor.visitTimestamp(vector       as any as Vector<Timestamp>);\n            case Type.Interval:        return visitor.visitInterval        && visitor.visitInterval(vector        as any as Vector<Interval>);\n            case Type.List:            return visitor.visitList            && visitor.visitList(vector            as any as Vector<List<T>>);\n            case Type.Struct:          return visitor.visitStruct          && visitor.visitStruct(vector          as any as Vector<Struct>);\n            case Type.Union:           return visitor.visitUnion           && visitor.visitUnion(vector           as any as Vector<Union>);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(vector as any as Vector<FixedSizeBinary>);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList   && visitor.visitFixedSizeList(vector   as any as Vector<FixedSizeList>);\n            case Type.Map:             return visitor.visitMap             && visitor.visitMap(vector             as any as Vector<Map_>);\n            case Type.Dictionary:      return visitor.visitDictionary      && visitor.visitDictionary(vector      as any as Vector<Dictionary>);\n            default: return null;\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Vector, DictionaryVector } from './vector';\n\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n        this.vector = batch.getChildAt(this.colidx)!;\n        return this.vector.get.bind(this.vector);\n    }\n}\n\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[]\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p)\n        }, [])\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p)\n        }, [])\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Struct, DataType } from './type';\nimport { flatbuffers } from 'flatbuffers';\nimport { View, Vector, StructVector } from './vector';\nimport { Data, NestedData } from './data';\nimport { PipeIterator } from './util/node';\nimport { valueToString, leftPad } from './util/pretty';\n\nimport Long = flatbuffers.Long;\n\nexport class RecordBatch extends StructVector {\n    public static from(vectors: Vector[]) {\n        return new RecordBatch(Schema.from(vectors),\n            Math.max(...vectors.map((v) => v.length)),\n            vectors\n        );\n    }\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    constructor(schema: Schema, data: Data<Struct>, view: View<Struct>);\n    constructor(schema: Schema, numRows: Long | number, cols: Data<any> | Vector[]);\n    constructor(...args: any[]) {\n        if (typeof args[1] !== 'number') {\n            const data = args[1] as Data<Struct>;\n            super(data, args[2]);\n            this.schema = args[0];\n            this.length = data.length;\n        } else {\n            const [schema, numRows, cols] = args;\n            const childData: Data<any>[] = new Array(cols.length);\n            for (let index = -1, length = cols.length; ++index < length;) {\n                const col: Data<any> | Vector = cols[index];\n                childData[index] = col instanceof Vector ? col.data : col;\n            }\n            super(new NestedData(new Struct(schema.fields), numRows, null, childData));\n            this.schema = schema;\n            this.length = numRows;\n        }\n        this.numCols = this.schema.fields.length;\n    }\n    public clone<R extends Struct>(data: Data<R>, view: View<R> = this.view.clone(data)): this {\n        return new RecordBatch(this.schema, data as any, view) as any;\n    }\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numCols ? null : super.getChildAt<R>(index);\n    }\n    public select(...columnNames: string[]) {\n        const fields = this.schema.fields;\n        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new RecordBatch(\n            this.schema.select(...columnNames), this.length,\n            this.childData.filter((_, i) => namesToKeep[fields[i].name])\n        );\n    }\n    public rowsToString(separator = ' | ', rowOffset = 0, maxColumnWidths: number[] = []) {\n        return new PipeIterator(recordBatchRowsToString(this, separator, rowOffset, maxColumnWidths), 'utf8');\n    }\n}\n\nfunction* recordBatchRowsToString(recordBatch: RecordBatch, separator = ' | ', rowOffset = 0, maxColumnWidths: number[] = []) {\n    const fields = recordBatch.schema.fields;\n    const header = ['row_id', ...fields.map((f) => `${f}`)].map(valueToString);\n    header.forEach((x, i) => {\n        maxColumnWidths[i] = Math.max(maxColumnWidths[i] || 0, x.length);\n    });\n    // Pass one to convert to strings and count max column widths\n    for (let i = -1, n = recordBatch.length - 1; ++i < n;) {\n        let val, row = [rowOffset + i, ...recordBatch.get(i) as Struct['TValue']];\n        for (let j = -1, k = row.length; ++j < k; ) {\n            val = valueToString(row[j]);\n            maxColumnWidths[j] = Math.max(maxColumnWidths[j] || 0, val.length);\n        }\n    }\n    for (let i = -1; ++i < recordBatch.length;) {\n        if ((rowOffset + i) % 1000 === 0) {\n            yield header.map((x, j) => leftPad(x, ' ', maxColumnWidths[j])).join(separator);\n        }\n        yield [rowOffset + i, ...recordBatch.get(i) as Struct['TValue']]\n            .map((x) => valueToString(x))\n            .map((x, j) => leftPad(x, ' ', maxColumnWidths[j]))\n            .join(separator);\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { RecordBatch } from '../../recordbatch';\nimport { TypeVisitor } from '../../visitor';\nimport { FlatType, NestedType, ListType } from '../../type';\nimport { Message, FieldMetadata, BufferMetadata } from '../metadata';\nimport { FlatData, ListData, NestedData, SingleNestedData, DenseUnionData, SparseUnionData, BoolData, FlatListData, DictionaryData } from '../../data';\nimport {\n    Schema, Field,\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n    UnionMode, SparseUnion, DenseUnion, FlatListType, DataType,\n} from '../../type';\n\nexport function* readRecordBatches(messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport async function* readRecordBatchesAsync(messages: AsyncIterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for await (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport function* readRecordBatch(schema: Schema, message: Message, loader: TypeDataLoader) {\n    if (Message.isRecordBatch(message)) {\n        yield new RecordBatch(schema, message.length, loader.visitFields(schema.fields));\n    } else if (Message.isDictionaryBatch(message)) {\n        const dictionaryId = message.id;\n        const dictionaries = loader.dictionaries;\n        const dictionaryField = schema.dictionaries.get(dictionaryId)!;\n        const dictionaryDataType = (dictionaryField.type as Dictionary).dictionary;\n        let dictionaryVector = Vector.create(loader.visit(dictionaryDataType));\n        if (message.isDelta && dictionaries.has(dictionaryId)) {\n            dictionaryVector = dictionaries.get(dictionaryId)!.concat(dictionaryVector);\n        }\n        dictionaries.set(dictionaryId, dictionaryVector);\n    }\n}\n\nexport abstract class TypeDataLoader extends TypeVisitor {\n\n    public dictionaries: Map<number, Vector>;\n    protected nodes: Iterator<FieldMetadata>;\n    protected buffers: Iterator<BufferMetadata>;\n\n    constructor(nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super();\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visitFields(fields: Field[]) { return fields.map((field) => this.visit(field.type)); }\n\n    public visitNull           (type: Null)            { return this.visitNullType(type);   }\n    public visitInt            (type: Int)             { return this.visitFlatType(type);   }\n    public visitFloat          (type: Float)           { return this.visitFlatType(type);   }\n    public visitBinary         (type: Binary)          { return this.visitFlatList(type);   }\n    public visitUtf8           (type: Utf8)            { return this.visitFlatList(type);   }\n    public visitBool           (type: Bool)            { return this.visitBoolType(type);   }\n    public visitDecimal        (type: Decimal)         { return this.visitFlatType(type);   }\n    public visitDate           (type: Date_)           { return this.visitFlatType(type);   }\n    public visitTime           (type: Time)            { return this.visitFlatType(type);   }\n    public visitTimestamp      (type: Timestamp)       { return this.visitFlatType(type);   }\n    public visitInterval       (type: Interval)        { return this.visitFlatType(type);   }\n    public visitList           (type: List)            { return this.visitListType(type);   }\n    public visitStruct         (type: Struct)          { return this.visitNestedType(type); }\n    public visitUnion          (type: Union)           { return this.visitUnionType(type);  }\n    public visitFixedSizeBinary(type: FixedSizeBinary) { return this.visitFlatType(type);   }\n    public visitFixedSizeList  (type: FixedSizeList)   { return this.visitFixedSizeListType(type); }\n    public visitMap            (type: Map_)            { return this.visitNestedType(type); }\n    public visitDictionary     (type: Dictionary)      {\n        return new DictionaryData(type, this.dictionaries.get(type.id)!, this.visit(type.indices));\n    }\n    protected getFieldMetadata() { return this.nodes.next().value; }\n    protected getBufferMetadata() { return this.buffers.next().value; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.getBufferMetadata()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected abstract readData<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected visitNullType(type: Null, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<any>(type, length, this.readNullBitmap(type, nullCount), new Uint8Array(0), 0, nullCount);\n    }\n    protected visitFlatType<T extends FlatType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<T>(type, length, this.readNullBitmap(type, nullCount), this.readData(type), 0, nullCount);\n    }\n    protected visitBoolType(type: Bool, { length, nullCount }: FieldMetadata = this.getFieldMetadata(), data?: Uint8Array) {\n        return new BoolData(type, length, this.readNullBitmap(type, nullCount), data || this.readData(type), 0, nullCount);\n    }\n    protected visitFlatList<T extends FlatListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type), 0, nullCount);\n    }\n    protected visitListType<T extends ListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new ListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitFixedSizeListType<T extends FixedSizeList>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new SingleNestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitNestedType<T extends NestedType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new NestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visitFields(type.children), 0, nullCount);\n    }\n    protected visitUnionType(type: DenseUnion | SparseUnion, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return type.mode === UnionMode.Sparse ?\n            new SparseUnionData(type as SparseUnion, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount) :\n            new DenseUnionData(type as DenseUnion, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitFields(type.children), 0, nullCount);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { packBools } from '../../util/bit';\nimport * as IntUtil from '../../util/int';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport Long = flatbuffers.Long;\n\nexport function* readJSON(json: any) {\n    const schema = schemaFromJSON(json['schema']);\n    const dictionaries = new Map<number, Vector>();\n    for (const batch of (json['dictionaries'] || [])) {\n        const message = dictionaryBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['data']['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n    for (const batch of (json['batches'] || [])) {\n        const message = recordBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\nfunction flattenDataSources(xs: any[]): any[][] {\n    return (xs || []).reduce<any[][]>((buffers, column: any) => [\n        ...buffers,\n        ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n        ...(column['OFFSET'] && [column['OFFSET']] || []),\n        ...(column['TYPE'] && [column['TYPE']] || []),\n        ...(column['DATA'] && [column['DATA']] || []),\n        ...flattenDataSources(column['children'])\n    ], [] as any[][]);\n}\n\nconst utf8Encoder = new TextEncoder('utf-8');\n\nexport class JSONDataLoader extends TypeDataLoader {\n    constructor(private sources: any[][], nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.getBufferMetadata()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int32Array(this.sources[offset]);\n    }\n    protected readTypeIds<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int8Array(this.sources[offset]);\n    }\n    protected readData<T extends DataType>(type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type) === true) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type) === true) {\n            return new Uint8Array(decimalDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) === true || DataType.isFixedSizeBinary(type) === true) {\n            return new Uint8Array(binaryDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBool(type) === true) {\n            return new Uint8Array(packBools(sources[offset] as number[]).buffer);\n        } else if (DataType.isUtf8(type) === true) {\n            return utf8Encoder.encode((sources[offset] as string[]).join(''));\n        } else {\n            return toTypedArray(type.ArrayType, sources[offset].map((x) => +x)) as any;\n        }\n    }\n}\n\nfunction int64DataFromJSON(values: string[]) {\n    const data = new Uint32Array(values.length * 2);\n    for (let i = -1, n = values.length; ++i < n;) {\n        // Force all values (even numbers) to be parsed as strings since\n        // pulling out high and low bits seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        IntUtil.Int64.fromString(values[i].toString(), new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n    return data.buffer;\n}\n\nfunction decimalDataFromJSON(values: string[]) {\n    const data = new Uint32Array(values.length * 4);\n    for (let i = -1, n = values.length; ++i < n;) {\n        IntUtil.Int128.fromString(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n    }\n    return data.buffer;\n}\n\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data.buffer;\n}\n\nimport * as Schema_ from '../../fb/Schema';\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nimport TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nimport UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport { toTypedArray } from '../../data';\n\nfunction schemaFromJSON(s: any): Schema {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    return new Schema(\n        fieldsFromJSON(s['fields'], dictionaryFields),\n        customMetadata(s['customMetadata']),\n        MetadataVersion.V4, dictionaryFields\n    );\n}\n\nfunction recordBatchFromJSON(b: any): RecordBatchMetadata {\n    return new RecordBatchMetadata(\n        MetadataVersion.V4,\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\nfunction dictionaryBatchFromJSON(b: any): DictionaryBatch {\n    return new DictionaryBatch(\n        MetadataVersion.V4,\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\nfunction fieldsFromJSON(fs: any[], dictionaryFields: Map<number, Field<Dictionary>> | null): Field[] {\n    return (fs || [])\n        .map((f) => fieldFromJSON(f, dictionaryFields))\n        .filter((f) => f != null) as Field[];\n}\n\nfunction fieldNodesFromJSON(xs: any[]): FieldMetadata[] {\n    return (xs || []).reduce<FieldMetadata[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldMetadata(\n            new Long(column['count'], 0),\n            new Long(nullCountFromJSON(column['VALIDITY']), 0)\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldMetadata[]);\n}\n\nfunction buffersFromJSON(xs: any[], buffers: BufferMetadata[] = []): BufferMetadata[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));\n        column['OFFSET'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));\n        column['TYPE'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['TYPE'].length, 0)));\n        column['DATA'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\nfunction fieldFromJSON(f: any, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f['name'];\n    let field: Field | void;\n    let nullable = f['nullable'];\n    let dataType: DataType<any> | null;\n    let id: number, keysMeta: any, dictMeta: any;\n    let metadata = customMetadata(f['customMetadata']);\n    if (!dictionaryFields || !(dictMeta = f['dictionary'])) {\n        if (dataType = typeFromJSON(f['type'], fieldsFromJSON(f['children'], dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta['id'])\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromJSON(f['type'], fieldsFromJSON(f['children'], null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta['indexType']) ? intFromJSON(keysMeta)! : new Int32(),\n            id, dictMeta['isOrdered']\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(metadata?: any) {\n    return new Map<string, string>(Object.entries(metadata || {}));\n}\n\nconst namesToTypeMap: { [n: string]: Type }  = {\n    'NONE': Type.NONE,\n    'null': Type.Null,\n    'int': Type.Int,\n    'floatingpoint': Type.FloatingPoint,\n    'binary': Type.Binary,\n    'bool': Type.Bool,\n    'utf8': Type.Utf8,\n    'decimal': Type.Decimal,\n    'date': Type.Date,\n    'time': Type.Time,\n    'timestamp': Type.Timestamp,\n    'interval': Type.Interval,\n    'list': Type.List,\n    'struct': Type.Struct_,\n    'union': Type.Union,\n    'fixedsizebinary': Type.FixedSizeBinary,\n    'fixedsizelist': Type.FixedSizeList,\n    'map': Type.Map,\n};\n\nfunction typeFromJSON(t: any, children?: Field[]) {\n    switch (namesToTypeMap[t['name']]) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromJSON(t);\n        case Type.Int: return intFromJSON(t);\n        case Type.FloatingPoint: return floatingPointFromJSON(t);\n        case Type.Binary: return binaryFromJSON(t);\n        case Type.Utf8: return utf8FromJSON(t);\n        case Type.Bool: return boolFromJSON(t);\n        case Type.Decimal: return decimalFromJSON(t);\n        case Type.Date: return dateFromJSON(t);\n        case Type.Time: return timeFromJSON(t);\n        case Type.Timestamp: return timestampFromJSON(t);\n        case Type.Interval: return intervalFromJSON(t);\n        case Type.List: return listFromJSON(t, children || []);\n        case Type.Struct_: return structFromJSON(t, children || []);\n        case Type.Union: return unionFromJSON(t, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromJSON(t);\n        case Type.FixedSizeList: return fixedSizeListFromJSON(t, children || []);\n        case Type.Map: return mapFromJSON(t, children || []);\n    }\n    throw new Error(`Unrecognized type ${t['name']}`);\n}\n\nfunction nullFromJSON           (_type: any)                    { return new Null();                                                                               }\nfunction intFromJSON            (_type: any)                    { switch (_type['bitWidth']) {\n                                                                      case  8: return _type['isSigned'] ? new  Int8() : new  Uint8();\n                                                                      case 16: return _type['isSigned'] ? new Int16() : new Uint16();\n                                                                      case 32: return _type['isSigned'] ? new Int32() : new Uint32();\n                                                                      case 64: return _type['isSigned'] ? new Int64() : new Uint64();\n                                                                  }\n                                                                  return null;                                                                                     }\nfunction floatingPointFromJSON  (_type: any)                    { switch (Precision[_type['precision']] as any) {\n                                                                      case Precision.HALF: return new Float16();\n                                                                      case Precision.SINGLE: return new Float32();\n                                                                      case Precision.DOUBLE: return new Float64();\n                                                                  }\n                                                                  return null;                                                                                     }\nfunction binaryFromJSON         (_type: any)                    { return new Binary();                                                                             }\nfunction utf8FromJSON           (_type: any)                    { return new Utf8();                                                                               }\nfunction boolFromJSON           (_type: any)                    { return new Bool();                                                                               }\nfunction decimalFromJSON        (_type: any)                    { return new Decimal(_type['scale'], _type['precision']);                                          }\nfunction dateFromJSON           (_type: any)                    { return new Date_(DateUnit[_type['unit']] as any);                                                }\nfunction timeFromJSON           (_type: any)                    { return new Time(TimeUnit[_type['unit']] as any, _type['bitWidth'] as TimeBitWidth);              }\nfunction timestampFromJSON      (_type: any)                    { return new Timestamp(TimeUnit[_type['unit']] as any, _type['timezone']);                         }\nfunction intervalFromJSON       (_type: any)                    { return new Interval(IntervalUnit[_type['unit']] as any);                                         }\nfunction listFromJSON           (_type: any, children: Field[]) { return new List(children);                                                                       }\nfunction structFromJSON         (_type: any, children: Field[]) { return new Struct(children);                                                                     }\nfunction unionFromJSON          (_type: any, children: Field[]) { return new Union(UnionMode[_type['mode']] as any, (_type['typeIds'] || []) as Type[], children); }\nfunction fixedSizeBinaryFromJSON(_type: any)                    { return new FixedSizeBinary(_type['byteWidth']);                                                  }\nfunction fixedSizeListFromJSON  (_type: any, children: Field[]) { return new FixedSizeList(_type['listSize'], children);                                           }\nfunction mapFromJSON            (_type: any, children: Field[]) { return new Map_(_type['keysSorted'], children);                                                  }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { checkForMagicArrowString, PADDING, magicAndPadding, isValidArrowFile } from '../magic';\nimport { Message, Footer, FileBlock, RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata, } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\ntype MessageReader = (bb: ByteBuffer) => IterableIterator<Message>;\n\nexport function* readBuffers<T extends Uint8Array | Buffer | string>(sources: Iterable<T> | Uint8Array | Buffer | string) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    if (ArrayBuffer.isView(sources) || typeof sources === 'string') {\n        sources = [sources as T];\n    }\n    for (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator((message as any).nodes || []),\n                        arrayIterator((message as any).buffers || []),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport async function* readBuffersAsync<T extends Uint8Array | Buffer | string>(sources: AsyncIterable<T>) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    for await (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator((message as any).nodes || []),\n                        arrayIterator((message as any).buffers || []),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport class BinaryDataLoader extends TypeDataLoader {\n    private bytes: Uint8Array;\n    private messageOffset: number;\n    constructor(bb: ByteBuffer, nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n        this.bytes = bb.bytes();\n        this.messageOffset = bb.position();\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Uint8Array(this.bytes.buffer, this.bytes.byteOffset + this.messageOffset + offset, length);\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\n\nfunction toByteBuffer(bytes?: Uint8Array | Buffer | string) {\n    let arr: Uint8Array = bytes as any || new Uint8Array(0);\n    if (typeof bytes === 'string') {\n        arr = new Uint8Array(bytes.length);\n        for (let i = -1, n = bytes.length; ++i < n;) {\n            arr[i] = bytes.charCodeAt(i);\n        }\n        return new ByteBuffer(arr);\n    }\n    return new ByteBuffer(arr);\n}\n\nfunction readSchema(bb: ByteBuffer) {\n    let schema: Schema, readMessages, footer: Footer | null;\n    if (footer = readFileSchema(bb)) {\n        schema = footer.schema;\n        readMessages = readFileMessages(footer);\n    } else if (schema = readStreamSchema(bb)!) {\n        readMessages = readStreamMessages;\n    } else {\n        throw new Error('Invalid Arrow buffer');\n    }\n    return { schema, readMessages };\n}\n\nfunction readStreamSchema(bb: ByteBuffer) {\n    if (!checkForMagicArrowString(bb.bytes(), 0)) {\n        for (const message of readMessages(bb)) {\n            if (Message.isSchema(message)) {\n                return message as Schema;\n            }\n        }\n    }\n    return null;\n}\n\nfunction* readStreamMessages(bb: ByteBuffer) {\n    for (const message of readMessages(bb)) {\n        if (Message.isRecordBatch(message)) {\n            yield message;\n        } else if (Message.isDictionaryBatch(message)) {\n            yield message;\n        } else {\n            yield message;\n        }\n        // position the buffer after the body to read the next message\n        bb.setPosition(bb.position() + message.bodyLength);\n    }\n}\n\nfunction readFileSchema(bb: ByteBuffer) {\n    if (!isValidArrowFile(bb)) {\n        return null;\n    }\n    let fileLength = bb.capacity();\n    let lengthOffset = fileLength - magicAndPadding;\n    let footerLength = bb.readInt32(lengthOffset);\n    bb.setPosition(lengthOffset - footerLength);\n    return footerFromByteBuffer(bb);\n}\n\nfunction readFileMessages(footer: Footer) {\n    return function* (bb: ByteBuffer) {\n        let message: RecordBatchMetadata | DictionaryBatch;\n        for (let i = -1, batches = footer.dictionaryBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset);\n            if (message = readMessage(bb, bb.readInt32(bb.position())) as DictionaryBatch) {\n                yield message;\n            }\n        }\n        for (let i = -1, batches = footer.recordBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset);\n            if (message = readMessage(bb, bb.readInt32(bb.position())) as RecordBatchMetadata) {\n                yield message;\n            }\n        }\n    };\n}\n\nfunction* readMessages(bb: ByteBuffer) {\n    let length: number, message: Schema | RecordBatchMetadata | DictionaryBatch;\n    while (bb.position() < bb.capacity() &&\n          (length = bb.readInt32(bb.position())) > 0) {\n        if (message = readMessage(bb, length)!) {\n            yield message;\n        }\n    }\n}\n\nfunction readMessage(bb: ByteBuffer, length: number) {\n    bb.setPosition(bb.position() + PADDING);\n    const message = messageFromByteBuffer(bb);\n    bb.setPosition(bb.position() + length);\n    return message;\n}\n\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport _Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport _Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport _Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport _List = Schema_.org.apache.arrow.flatbuf.List;\nimport _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport _Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport _Map = Schema_.org.apache.arrow.flatbuf.Map;\n\nfunction footerFromByteBuffer(bb: ByteBuffer) {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    const f = _Footer.getRootAsFooter(bb), s = f.schema()!;\n    return new Footer(\n        dictionaryBatchesFromFooter(f), recordBatchesFromFooter(f),\n        new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), f.version(), dictionaryFields)\n    );\n}\n\nfunction messageFromByteBuffer(bb: ByteBuffer) {\n    const m = _Message.getRootAsMessage(bb)!, type = m.headerType(), version = m.version();\n    switch (type) {\n        case MessageHeader.Schema: return schemaFromMessage(version, m.header(new _Schema())!, new Map());\n        case MessageHeader.RecordBatch: return recordBatchFromMessage(version, m, m.header(new _RecordBatch())!);\n        case MessageHeader.DictionaryBatch: return dictionaryBatchFromMessage(version, m, m.header(new _DictionaryBatch())!);\n    }\n    return null;\n    // throw new Error(`Unrecognized Message type '${type}'`);\n}\n\nfunction schemaFromMessage(version: MetadataVersion, s: _Schema, dictionaryFields: Map<number, Field<Dictionary>>) {\n    return new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), version, dictionaryFields);\n}\n\nfunction recordBatchFromMessage(version: MetadataVersion, m: _Message, b: _RecordBatch) {\n    return new RecordBatchMetadata(version, b.length(), fieldNodesFromRecordBatch(b), buffersFromRecordBatch(b, version), m.bodyLength());\n}\n\nfunction dictionaryBatchFromMessage(version: MetadataVersion, m: _Message, d: _DictionaryBatch) {\n    return new DictionaryBatch(version, recordBatchFromMessage(version, m, d.data()!), d.id(), d.isDelta());\n}\n\nfunction dictionaryBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.dictionariesLength(); ++i < n;) {\n        if (b = f.dictionaries(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction recordBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.recordBatchesLength(); ++i < n;) {\n        if (b = f.recordBatches(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction fieldsFromSchema(s: _Schema, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = s && s.fieldsLength(); ++i < n;) {\n        if (c = field(s.fields(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldsFromField(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = f && f.childrenLength(); ++i < n;) {\n        if (c = field(f.children(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldNodesFromRecordBatch(b: _RecordBatch) {\n    const fieldNodes = [] as FieldMetadata[];\n    for (let i = -1, n = b.nodesLength(); ++i < n;) {\n        fieldNodes.push(fieldNodeFromRecordBatch(b.nodes(i)!));\n    }\n    return fieldNodes;\n}\n\nfunction buffersFromRecordBatch(b: _RecordBatch, version: MetadataVersion) {\n    const buffers = [] as BufferMetadata[];\n    for (let i = -1, n = b.buffersLength(); ++i < n;) {\n        let buffer = b.buffers(i)!;\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page id field.\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        buffers.push(bufferFromRecordBatch(buffer));\n    }\n    return buffers;\n}\n\nfunction field(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f.name()!;\n    let field: Field | void;\n    let nullable = f.nullable();\n    let metadata = customMetadata(f);\n    let dataType: DataType<any> | null;\n    let keysMeta: _Int | null, id: number;\n    let dictMeta: _DictionaryEncoding | null;\n    if (!dictionaryFields || !(dictMeta = f.dictionary())) {\n        if (dataType = typeFromField(f, fieldsFromField(f, dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta.id().low)\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromField(f, fieldsFromField(f, null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta.indexType()) ? intFromField(keysMeta)! : new Int32(),\n            id, dictMeta.isOrdered()\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\nfunction fieldNodeFromRecordBatch(f: _FieldNode) {\n    return new FieldMetadata(f.length(), f.nullCount());\n}\n\nfunction bufferFromRecordBatch(b: _Buffer) {\n    return new BufferMetadata(b.offset(), b.length());\n}\n\nfunction typeFromField(f: _Field, children?: Field[]): DataType<any> | null {\n    switch (f.typeType()) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromField(f.type(new _Null())!);\n        case Type.Int: return intFromField(f.type(new _Int())!);\n        case Type.FloatingPoint: return floatFromField(f.type(new _FloatingPoint())!);\n        case Type.Binary: return binaryFromField(f.type(new _Binary())!);\n        case Type.Utf8: return utf8FromField(f.type(new _Utf8())!);\n        case Type.Bool: return boolFromField(f.type(new _Bool())!);\n        case Type.Decimal: return decimalFromField(f.type(new _Decimal())!);\n        case Type.Date: return dateFromField(f.type(new _Date())!);\n        case Type.Time: return timeFromField(f.type(new _Time())!);\n        case Type.Timestamp: return timestampFromField(f.type(new _Timestamp())!);\n        case Type.Interval: return intervalFromField(f.type(new _Interval())!);\n        case Type.List: return listFromField(f.type(new _List())!, children || []);\n        case Type.Struct_: return structFromField(f.type(new _Struct())!, children || []);\n        case Type.Union: return unionFromField(f.type(new _Union())!, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromField(f.type(new _FixedSizeBinary())!);\n        case Type.FixedSizeList: return fixedSizeListFromField(f.type(new _FixedSizeList())!, children || []);\n        case Type.Map: return mapFromField(f.type(new _Map())!, children || []);\n    }\n    throw new Error(`Unrecognized type ${f.typeType()}`);\n}\n\nfunction nullFromField           (_type: _Null)                             { return new Null();                                                                }\nfunction intFromField            (_type: _Int)                              { switch (_type.bitWidth()) {\n                                                                                  case  8: return _type.isSigned() ? new  Int8() : new  Uint8();\n                                                                                  case 16: return _type.isSigned() ? new Int16() : new Uint16();\n                                                                                  case 32: return _type.isSigned() ? new Int32() : new Uint32();\n                                                                                  case 64: return _type.isSigned() ? new Int64() : new Uint64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction floatFromField          (_type: _FloatingPoint)                    { switch (_type.precision()) {\n                                                                                  case Precision.HALF: return new Float16();\n                                                                                  case Precision.SINGLE: return new Float32();\n                                                                                  case Precision.DOUBLE: return new Float64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction binaryFromField         (_type: _Binary)                           { return new Binary();                                                              }\nfunction utf8FromField           (_type: _Utf8)                             { return new Utf8();                                                                }\nfunction boolFromField           (_type: _Bool)                             { return new Bool();                                                                }\nfunction decimalFromField        (_type: _Decimal)                          { return new Decimal(_type.scale(), _type.precision());                             }\nfunction dateFromField           (_type: _Date)                             { return new Date_(_type.unit());                                                   }\nfunction timeFromField           (_type: _Time)                             { return new Time(_type.unit(), _type.bitWidth() as TimeBitWidth);                  }\nfunction timestampFromField      (_type: _Timestamp)                        { return new Timestamp(_type.unit(), _type.timezone());                             }\nfunction intervalFromField       (_type: _Interval)                         { return new Interval(_type.unit());                                                }\nfunction listFromField           (_type: _List, children: Field[])          { return new List(children);                                                        }\nfunction structFromField         (_type: _Struct, children: Field[])        { return new Struct(children);                                                      }\nfunction unionFromField          (_type: _Union, children: Field[])         { return new Union(_type.mode(), (_type.typeIdsArray() || []) as Type[], children); }\nfunction fixedSizeBinaryFromField(_type: _FixedSizeBinary)                  { return new FixedSizeBinary(_type.byteWidth());                                    }\nfunction fixedSizeListFromField  (_type: _FixedSizeList, children: Field[]) { return new FixedSizeList(_type.listSize(), children);                             }\nfunction mapFromField            (_type: _Map, children: Field[])           { return new Map_(_type.keysSorted(), children);                                    }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { readJSON } from './json';\nimport { fromReadableStream } from './node';\nimport { RecordBatch } from '../../recordbatch';\nimport { readBuffers, readBuffersAsync } from './binary';\nimport { readRecordBatches, readRecordBatchesAsync, TypeDataLoader } from './vector';\nimport { Schema } from '../../type';\nimport { Message } from '../metadata';\n\nexport { readJSON, RecordBatch };\nexport { readBuffers, readBuffersAsync };\nexport { readRecordBatches, readRecordBatchesAsync };\n\nexport function* read(sources: Iterable<Uint8Array | Buffer | string> | object | string) {\n    let input: any = sources;\n    let messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>;\n    if (typeof input === 'string') {\n        try { input = JSON.parse(input); }\n        catch (e) { input = sources; }\n    }\n    if (!input || typeof input !== 'object') {\n        messages = (typeof input === 'string') ? readBuffers([input]) : [];\n    } else {\n        messages = (typeof input[Symbol.iterator] === 'function') ? readBuffers(input) : readJSON(input);\n    }\n    yield* readRecordBatches(messages);\n}\n\nexport async function* readAsync(sources: AsyncIterable<Uint8Array | Buffer | string>) {\n    for await (let recordBatch of readRecordBatchesAsync(readBuffersAsync(sources))) {\n        yield recordBatch;\n    }\n}\n\nexport async function* readStream(stream: NodeJS.ReadableStream) {\n    for await (const recordBatch of readAsync(fromReadableStream(stream))) {\n        yield recordBatch as RecordBatch;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../../table';\nimport { serializeStream, serializeFile } from './binary';\n\nexport function writeTableBinary(table: Table, stream = true) {\n    return concatBuffers(stream ? serializeStream(table) : serializeFile(table));\n}\n\nfunction concatBuffers(messages: Iterable<Uint8Array | Buffer>) {\n\n    let buffers = [], byteLength = 0;\n\n    for (const message of messages) {\n        buffers.push(message);\n        byteLength += message.byteLength;\n    }\n\n    const { buffer } = buffers.reduce(({ buffer, byteOffset }, bytes) => {\n        buffer.set(bytes, byteOffset);\n        return { buffer, byteOffset: byteOffset + bytes.byteLength };\n    }, { buffer: new Uint8Array(byteLength), byteOffset: 0 });\n\n    return buffer;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Col, Predicate } from './predicate';\nimport { Schema, Field, Struct } from './type';\nimport { read, readAsync } from './ipc/reader/arrow';\nimport { writeTableBinary } from './ipc/writer/arrow';\nimport { PipeIterator } from './util/node';\nimport { isPromise, isAsyncIterable } from './util/compat';\nimport { Vector, DictionaryVector, IntVector, StructVector } from './vector';\nimport { ChunkedView } from './vector/chunked';\n\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\nexport type BindFunc = (batch: RecordBatch) => void;\n\nexport interface DataFrame {\n    count(): number;\n    filter(predicate: Predicate): DataFrame;\n    scan(next: NextFunc, bind?: BindFunc): void;\n    countBy(col: (Col|string)): CountByResult;\n    [Symbol.iterator](): IterableIterator<Struct['TValue']>;\n}\n\nexport class Table implements DataFrame {\n    static empty() { return new Table(new Schema([]), []); }\n    static from(sources?: Iterable<Uint8Array | Buffer | string> | object | string) {\n        if (sources) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for (let recordBatch of read(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        }\n        return Table.empty();\n    }\n    static async fromAsync(sources?: AsyncIterable<Uint8Array | Buffer | string>) {\n        if (isAsyncIterable(sources)) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for await (let recordBatch of readAsync(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        } else if (isPromise(sources)) {\n            return Table.from(await sources);\n        } else if (sources) {\n            return Table.from(sources);\n        }\n        return Table.empty();\n    }\n    static fromStruct(struct: StructVector) {\n        const schema = new Schema(struct.type.children);\n        const chunks = struct.view instanceof ChunkedView ?\n                            (struct.view.chunkVectors as StructVector[]) :\n                            [struct];\n        return new Table(chunks.map((chunk) => new RecordBatch(schema, chunk.length, chunk.view.childData)));\n    }\n\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    // List of inner RecordBatches\n    public readonly batches: RecordBatch[];\n    // List of inner Vectors, possibly spanning batches\n    protected readonly _columns: Vector<any>[] = [];\n    // Union of all inner RecordBatches into one RecordBatch, possibly chunked.\n    // If the Table has just one inner RecordBatch, this points to that.\n    // If the Table has multiple inner RecordBatches, then this is a Chunked view\n    // over the list of RecordBatches. This allows us to delegate the responsibility\n    // of indexing, iterating, slicing, and visiting to the Nested/Chunked Data/Views.\n    public readonly batchesUnion: RecordBatch;\n\n    constructor(batches: RecordBatch[]);\n    constructor(...batches: RecordBatch[]);\n    constructor(schema: Schema, batches: RecordBatch[]);\n    constructor(schema: Schema, ...batches: RecordBatch[]);\n    constructor(...args: any[]) {\n        let schema: Schema;\n        let batches: RecordBatch[];\n        if (args[0] instanceof Schema) {\n            schema = args[0];\n            batches = Array.isArray(args[1][0]) ? args[1][0] : args[1];\n        } else if (args[0] instanceof RecordBatch) {\n            schema = (batches = args)[0].schema;\n        } else {\n            schema = (batches = args[0])[0].schema;\n        }\n        this.schema = schema;\n        this.batches = batches;\n        this.batchesUnion = batches.length == 0 ?\n            new RecordBatch(schema, 0, []) :\n            batches.reduce((union, batch) => union.concat(batch));\n        this.length = this.batchesUnion.length;\n        this.numCols = this.batchesUnion.numCols;\n    }\n\n    public get(index: number): Struct['TValue'] {\n        return this.batchesUnion.get(index)!;\n    }\n    public getColumn(name: string) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    public getColumnAt(index: number) {\n        return index < 0 || index >= this.numCols\n            ? null\n            : this._columns[index] || (\n              this._columns[index] = this.batchesUnion.getChildAt(index)!);\n    }\n    public getColumnIndex(name: string) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    public [Symbol.iterator](): IterableIterator<Struct['TValue']> {\n        return this.batchesUnion[Symbol.iterator]() as any;\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(this.batches, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n    public count(): number {\n        return this.length;\n    }\n    public select(...columnNames: string[]) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n    public toString(separator?: string) {\n        let str = '';\n        for (const row of this.rowsToString(separator)) {\n            str += row + '\\n';\n        }\n        return str;\n    }\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        return writeTableBinary(this, stream);\n    }\n    public rowsToString(separator = ' | ') {\n        return new PipeIterator(tableRowsToString(this, separator), 'utf8');\n    }\n}\n\nclass FilteredDataFrame implements DataFrame {\n    private predicate: Predicate;\n    private batches: RecordBatch[];\n    constructor (batches: RecordBatch[], predicate: Predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(\n            this.batches,\n            this.predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult extends Table implements DataFrame {\n    constructor(values: Vector, counts: IntVector<any>) {\n        super(\n            new RecordBatch(new Schema([\n                new Field('values', values.type),\n                new Field('counts', counts.type)\n            ]),\n            counts.length, [values, counts]\n        ));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nfunction* tableRowsToString(table: Table, separator = ' | ') {\n    let rowOffset = 0;\n    let firstValues = [];\n    let maxColumnWidths: number[] = [];\n    let iterators: IterableIterator<string>[] = [];\n    // Gather all the `rowsToString` iterators into a list before iterating,\n    // so that `maxColumnWidths` is filled with the maxWidth for each column\n    // across all RecordBatches.\n    for (const batch of table.batches) {\n        const iterator = batch.rowsToString(separator, rowOffset, maxColumnWidths);\n        const { done, value } = iterator.next();\n        if (!done) {\n            firstValues.push(value);\n            iterators.push(iterator);\n            rowOffset += batch.length;\n        }\n    }\n    for (const iterator of iterators) {\n        yield firstValues.shift();\n        yield* iterator;\n    }\n}\n","export interface Subscription {\n    unsubscribe: () => void;\n}\n\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/**\n * @ignore\n */\nexport function isPromise(x: any): x is PromiseLike<any> {\n    return x != null && Object(x) === x && typeof x['then'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isObservable(x: any): x is Observable<any> {\n    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isArrayLike(x: any): x is ArrayLike<any> {\n    return x != null && Object(x) === x && typeof x['length'] === 'number';\n}\n\n/**\n * @ignore\n */\nexport function isIterable(x: any): x is Iterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.iterator] !== 'undefined';\n}\n\n/**\n * @ignore\n */\nexport function isAsyncIterable(x: any): x is AsyncIterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.asyncIterator] !== 'undefined';\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { DataType, NestedType, DenseUnion, SparseUnion, Struct, Map_ } from '../type';\n\nexport abstract class NestedView<T extends NestedType> implements View<T> {\n    public length: number;\n    public numChildren: number;\n    public childData: Data<any>[];\n    protected _children: Vector<any>[];\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        this.length = data.length;\n        this.childData = data.childData;\n        this.numChildren = data.childData.length;\n        this._children = children || new Array(this.numChildren);\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, this._children) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public indexOf(_: T['TValue']): number {\n        throw new Error(`Not implemented yet`);\n    }\n    public toJSON(): any { return this.toArray(); }\n    public toString() {\n        return [...this].map((x) => valueToString(x)).join(', ');\n    }\n    public get(index: number): T['TValue'] {\n        return this.getNested(this, index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setNested(this, index, value);\n    }\n    protected abstract getNested(self: NestedView<T>, index: number): T['TValue'];\n    protected abstract setNested(self: NestedView<T>, index: number, value: T['TValue']): void;\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren\n            ? null\n            : (this._children[index] as Vector<R>) ||\n              (this._children[index] = Vector.create<R>(this.childData[index]));\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getNested;\n        const length = this.length;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index);\n        }\n    }\n}\n\nexport class UnionView<T extends (DenseUnion | SparseUnion) = SparseUnion> extends NestedView<T> {\n    // @ts-ignore\n    public typeIds: Int8Array;\n    // @ts-ignore\n    public valueOffsets?: Int32Array;\n    // @ts-ignore\n    protected typeIdToChildIndex: { [key: number]: number };\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        super(data, children);\n        this.length = data.length;\n        this.typeIds = data.typeIds;\n        this.typeIdToChildIndex = data.typeIdToChildIndex;\n    }\n    protected getNested(self: UnionView<T>, index: number): T['TValue'] {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n    }\n    protected setNested(self: UnionView<T>, index: number, value: T['TValue']): void {\n        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n    }\n    protected getChildValue(self: NestedView<T>, index: number, typeIds: Int8Array, _valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.get(index) : null;\n    }\n    protected setChildValue(self: NestedView<T>, index: number, value: T['TValue'], typeIds: Int8Array, _valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.set(index, value) : null;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const length = this.length;\n        const get = this.getChildValue;\n        const { typeIdToChildIndex } = this;\n        const { typeIds, valueOffsets } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index, typeIds, valueOffsets, typeIdToChildIndex);\n        }\n    }\n}\n\nexport class DenseUnionView extends UnionView<DenseUnion> {\n    public valueOffsets: Int32Array;\n    constructor(data: Data<DenseUnion>, children?: Vector<any>[]) {\n        super(data, children);\n        this.valueOffsets = data.valueOffsets;\n    }\n    protected getNested(self: DenseUnionView, index: number): any | null {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n    }\n    protected getChildValue(self: NestedView<DenseUnion>, index: number, typeIds: Int8Array, valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.get(valueOffsets[index]) : null;\n    }\n    protected setChildValue(self: NestedView<DenseUnion>, index: number, value: any, typeIds: Int8Array, valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.set(valueOffsets[index], value) : null;\n    }\n}\n\ntype RowProxy = {[name: string]: any};\ninterface RowViewConstructor<T extends RowProxy = RowProxy> {\n    readonly prototype: T & RowView;\n    new (data: Data<SparseUnion> & NestedView<any>, children?: Vector<any>[], rowIndex?: number): T & RowView;\n}\n\nexport class StructView extends NestedView<Struct> {\n    private RowView: RowViewConstructor;\n\n    constructor(data: Data<Struct>, children?: Vector<any>[]) {\n        super(data, children);\n\n        // Make a customized RowView that includes proxies for\n        class RowProxy extends RowView {}\n\n        const proto = RowProxy.prototype;\n\n        data.type.children.forEach(function (f, i) {\n            Object.defineProperty(proto, f.name, {\n                get: function () {\n                    return (this as any as RowView).get(i);\n                },\n                enumerable: true\n            });\n        });\n\n        this.RowView = (RowProxy as any);\n    }\n    protected getNested(self: StructView, index: number) {\n        return new self.RowView(self as any, self._children, index);\n    }\n    protected setNested(self: StructView, index: number, value: any): void {\n        let idx = -1, len = self.numChildren, child: Vector | null;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value[idx]);\n                }\n            }\n        } else {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value.get(idx));\n                }\n            }\n        }\n    }\n}\n\nexport class MapView extends NestedView<Map_> {\n    public typeIds: { [k: string]: number };\n    constructor(data: Data<Map_>, children?: Vector<any>[]) {\n        super(data, children);\n        this.typeIds = data.type.children.reduce((xs, x, i) =>\n            (xs[x.name] = i) && xs || xs, Object.create(null));\n    }\n    protected getNested(self: MapView, index: number) {\n        return new MapRowView(self as any, self._children, index);\n    }\n    protected setNested(self: MapView, index: number, value: { [k: string]: any }): void {\n        let typeIds = self.typeIds as any, child: Vector | null;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value[key]);\n                }\n            }\n        } else {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value.get(key as any));\n                }\n            }\n        }\n    }\n}\n\nexport class RowView extends UnionView<SparseUnion> {\n    protected rowIndex: number;\n    constructor(data: Data<SparseUnion> & NestedView<any>, children?: Vector<any>[], rowIndex?: number) {\n        super(data, children);\n        this.rowIndex = rowIndex || 0;\n        this.length = data.numChildren;\n    }\n    public clone(data: Data<SparseUnion> & NestedView<any>): this {\n        return new (<any> this.constructor)(data, this._children, this.rowIndex) as this;\n    }\n    protected getChildValue(self: RowView, index: number, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: RowView, index: number, value: any, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\nexport class MapRowView extends RowView {\n    // @ts-ignore\n    public typeIds: any;\n    public toJSON() {\n        const get = this.getChildValue;\n        const result = {} as { [k: string]: any };\n        const typeIds = this.typeIds as { [k: string]: number };\n        for (const name in typeIds) {\n            result[name] = get(this, name, typeIds, null);\n        }\n        return result;\n    }\n    protected getChildValue(self: MapRowView, key: any, typeIds: any, _valueOffsets: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: MapRowView, key: any, value: any, typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector, createVector } from '../vector';\nimport { TextEncoder, TextDecoder } from 'text-encoding-utf-8';\nimport { List, Binary, Utf8, FixedSizeList, FlatListType } from '../type';\nimport { ListType, SingleNestedType, DataType, IterableArrayLike } from '../type';\n\nexport const encodeUtf8 = ((encoder) =>\n    encoder.encode.bind(encoder) as (input?: string) => Uint8Array\n)(new TextEncoder('utf-8'));\n\nexport const decodeUtf8 = ((decoder) =>\n    decoder.decode.bind(decoder) as (input?: ArrayBufferLike | ArrayBufferView) => string\n)(new TextDecoder('utf-8'));\n\nexport abstract class ListViewBase<T extends (FlatListType | SingleNestedType)> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    public valueOffsets?: Int32Array;\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public get(index: number): T['TValue'] {\n        return this.getList(this.values, index, this.valueOffsets);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setList(this.values, index, value, this.valueOffsets);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getList, length = this.length;\n        const values = this.values, valueOffsets = this.valueOffsets;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, valueOffsets);\n        }\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    protected abstract getList(values: T['TArray'], index: number, valueOffsets?: Int32Array): T['TValue'];\n    protected abstract setList(values: T['TArray'], index: number, value: T['TValue'], valueOffsets?: Int32Array): void;\n}\n\nexport abstract class VariableListViewBase<T extends (ListType | FlatListType)> extends ListViewBase<T> {\n    constructor(data: Data<T>) {\n        super(data);\n        this.length = data.length;\n        this.valueOffsets = data.valueOffsets;\n    }\n}\n\nexport class ListView<T extends DataType> extends VariableListViewBase<List<T>> {\n    public values: Vector<T>;\n    constructor(data: Data<T>) {\n        super(data as any);\n        this.values = createVector((data as any).values);\n    }\n    public getChildAt<R extends T = T>(index: number): Vector<R> | null {\n        return index === 0 ? (this.values as Vector<R>) : null;\n    }\n    protected getList(values: Vector<T>, index: number, valueOffsets: Int32Array) {\n        return values.slice(valueOffsets[index], valueOffsets[index + 1]) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>, valueOffsets: Int32Array): void {\n        let idx = -1;\n        let offset = valueOffsets[index];\n        let end = Math.min(value.length, valueOffsets[index + 1] - offset);\n        while (offset < end) {\n            values.set(offset++, value.get(++idx));\n        }\n    }\n}\n\nexport class FixedSizeListView<T extends DataType> extends ListViewBase<FixedSizeList<T>> {\n    public size: number;\n    public values: Vector<T>;\n    constructor(data: Data<FixedSizeList<T>>) {\n        super(data);\n        this.size = data.type.listSize;\n        this.values = createVector(data.values);\n    }\n    public getChildAt<R extends T = T>(index: number): Vector<R> | null {\n        return index === 0 ? (this.values as Vector<R>) : null;\n    }\n    protected getList(values: Vector<T>, index: number) {\n        const size = this.size;\n        return values.slice(index *= size, index + size) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>): void {\n        let size = this.size;\n        for (let idx = -1, offset = index * size; ++idx < size;) {\n            values.set(offset + idx, value.get(++idx));\n        }\n    }\n}\n\nexport class BinaryView extends VariableListViewBase<Binary> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return values.subarray(valueOffsets[index], valueOffsets[index + 1]);\n    }\n    protected setList(values: Uint8Array, index: number, value: Uint8Array, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(value.subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\nexport class Utf8View extends VariableListViewBase<Utf8> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return decodeUtf8(values.subarray(valueOffsets[index], valueOffsets[index + 1]));\n    }\n    protected setList(values: Uint8Array, index: number, value: string, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(encodeUtf8(value).subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ChunkedData, Data } from '../data';\nimport { View, Vector, NestedVector } from '../vector';\nimport { DataType, TypedArray, IterableArrayLike } from '../type';\n\nexport class ChunkedView<T extends DataType> implements View<T> {\n    public chunkVectors: Vector<T>[];\n    public chunkOffsets: Uint32Array;\n    // @ts-ignore\n    protected _children: Vector<any>[];\n    constructor(data: ChunkedData<T>) {\n        this.chunkVectors = data.chunkVectors;\n        this.chunkOffsets = data.chunkOffsets;\n    }\n    public clone(data: ChunkedData<T> & Data<T>): this {\n        return new ChunkedView(data) as this;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const vector of this.chunkVectors) {\n            yield* vector;\n        }\n    }\n    public getChildAt<R extends DataType = DataType>(index: number) {\n        return index < 0 ? null\n            : (this._children || (this._children = []))[index] ||\n              (this._children[index] = Vector.concat<R>(\n                  ...(<any> this.chunkVectors as NestedVector<any>[])\n                         .map((chunk) => chunk.getChildAt<R>(index))));\n    }\n    public isValid(index: number): boolean {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].isValid(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return false;\n    }\n    public get(index: number): T['TValue'] | null {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].get(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return null;\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].set(index - pos, value);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        const chunks = this.chunkVectors;\n        const numChunks = chunks.length;\n        if (numChunks === 1) {\n            return chunks[0].toArray();\n        }\n        let sources = new Array<any>(numChunks);\n        let sourcesLen = 0, ArrayType: any = Array;\n        for (let index = -1; ++index < numChunks;) {\n            let source = chunks[index].toArray();\n            sourcesLen += (sources[index] = source).length;\n            if (ArrayType !== source.constructor) {\n                ArrayType = source.constructor;\n            }\n        }\n        let target = new ArrayType(sourcesLen);\n        let setValues = ArrayType === Array ? arraySet : typedArraySet as any;\n        for (let index = -1, offset = 0; ++index < numChunks;) {\n            offset = setValues(sources[index], target, offset);\n        }\n        return target;\n    }\n    public indexOf(search: T['TValue']) {\n        let offset = 0, result;\n        for (const vector of this.chunkVectors) {\n            result = vector.indexOf(search);\n            if (result !== -1) { return result + offset; }\n            offset += vector.length;\n        }\n\n        return -1;\n    }\n}\n\nfunction typedArraySet(source: TypedArray, target: TypedArray, index: number) {\n    return target.set(source, index) || index + source.length;\n}\n\nfunction arraySet(source: any[], target: any[], index: number) {\n    let dstIdx = index - 1, srcIdx = -1, srcLen = source.length;\n    while (++srcIdx < srcLen) {\n        target[++dstIdx] = source[srcIdx];\n    }\n    return dstIdx;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../../table';\nimport { DenseUnionData } from '../../data';\nimport { RecordBatch } from '../../recordbatch';\nimport { VectorVisitor, TypeVisitor } from '../../visitor';\nimport { MAGIC, magicLength, magicAndPadding, PADDING } from '../magic';\nimport { align, getBool, packBools, iterateBits } from '../../util/bit';\nimport { Vector, UnionVector, DictionaryVector, NestedVector, ListVector } from '../../vector';\nimport { BufferMetadata, FieldMetadata, Footer, FileBlock, Message, RecordBatchMetadata, DictionaryBatch } from '../metadata';\nimport {\n    Schema, Field, TypedArray, MetadataVersion,\n    DataType,\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n    FlatType, FlatListType, NestedType, UnionMode, SparseUnion, DenseUnion, SingleNestedType,\n} from '../../type';\n\nexport function* serializeStream(table: Table) {\n    yield serializeMessage(table.schema).buffer;\n    for (const [id, field] of table.schema.dictionaries) {\n        const vec = table.getColumn(field.name) as DictionaryVector;\n        if (vec && vec.dictionary) {\n            yield serializeDictionaryBatch(vec.dictionary, id).buffer;\n        }\n    }\n    for (const recordBatch of table.batches) {\n        yield serializeRecordBatch(recordBatch).buffer;\n    }\n}\n\nexport function* serializeFile(table: Table) {\n\n    const recordBatches = [];\n    const dictionaryBatches = [];\n\n    // First yield the magic string (aligned)\n    let buffer = new Uint8Array(align(magicLength, 8));\n    let metadataLength, byteLength = buffer.byteLength;\n    buffer.set(MAGIC, 0);\n    yield buffer;\n\n    // Then yield the schema\n    ({ metadataLength, buffer } = serializeMessage(table.schema));\n    byteLength += buffer.byteLength;\n    yield buffer;\n\n    for (const [id, field] of table.schema.dictionaries) {\n        const vec = table.getColumn(field.name) as DictionaryVector;\n        if (vec && vec.dictionary) {\n            ({ metadataLength, buffer } = serializeDictionaryBatch(vec.dictionary, id));\n            dictionaryBatches.push(new FileBlock(metadataLength, buffer.byteLength, byteLength));\n            byteLength += buffer.byteLength;\n            yield buffer;\n        }\n    }\n    for (const recordBatch of table.batches) {\n        ({ metadataLength, buffer } = serializeRecordBatch(recordBatch));\n        recordBatches.push(new FileBlock(metadataLength, buffer.byteLength, byteLength));\n        byteLength += buffer.byteLength;\n        yield buffer;\n    }\n\n    // Then yield the footer metadata (not aligned)\n    ({ metadataLength, buffer } = serializeFooter(new Footer(dictionaryBatches, recordBatches, table.schema)));\n    yield buffer;\n\n    // Last, yield the footer length + terminating magic arrow string (aligned)\n    buffer = new Uint8Array(magicAndPadding);\n    new DataView(buffer.buffer).setInt32(0, metadataLength, platformIsLittleEndian);\n    buffer.set(MAGIC, buffer.byteLength - magicLength);\n    yield buffer;\n}\n\nexport function serializeRecordBatch(recordBatch: RecordBatch) {\n    const { byteLength, fieldNodes, buffers, buffersMeta } = new RecordBatchSerializer().visitRecordBatch(recordBatch);\n    const rbMeta = new RecordBatchMetadata(MetadataVersion.V4, recordBatch.length, fieldNodes, buffersMeta);\n    const rbData = concatBuffersWithMetadata(byteLength, buffers, buffersMeta);\n    return serializeMessage(rbMeta, rbData);\n}\n\nexport function serializeDictionaryBatch(dictionary: Vector, id: Long | number, isDelta: boolean = false) {\n    const { byteLength, fieldNodes, buffers, buffersMeta } = new RecordBatchSerializer().visitRecordBatch(RecordBatch.from([dictionary]));\n    const rbMeta = new RecordBatchMetadata(MetadataVersion.V4, dictionary.length, fieldNodes, buffersMeta);\n    const dbMeta = new DictionaryBatch(MetadataVersion.V4, rbMeta, id, isDelta);\n    const rbData = concatBuffersWithMetadata(byteLength, buffers, buffersMeta);\n    return serializeMessage(dbMeta, rbData);\n}\n\nexport function serializeMessage(message: Message, data?: Uint8Array) {\n    const b = new Builder();\n    _Message.finishMessageBuffer(b, writeMessage(b, message));\n    // Slice out the buffer that contains the message metadata\n    const metadataBytes = b.asUint8Array();\n    // Reserve 4 bytes for writing the message size at the front.\n    // Metadata length includes the metadata byteLength + the 4\n    // bytes for the length, and rounded up to the nearest 8 bytes.\n    const metadataLength = align(PADDING + metadataBytes.byteLength, 8);\n    // + the length of the optional data buffer at the end, padded\n    const dataByteLength = data ? data.byteLength : 0;\n    // ensure the entire message is aligned to an 8-byte boundary\n    const messageBytes = new Uint8Array(align(metadataLength + dataByteLength, 8));\n    // Write the metadata length into the first 4 bytes, but subtract the\n    // bytes we use to hold the length itself.\n    new DataView(messageBytes.buffer).setInt32(0, metadataLength - PADDING, platformIsLittleEndian);\n    // Copy the metadata bytes into the message buffer\n    messageBytes.set(metadataBytes, PADDING);\n    // Copy the optional data buffer after the metadata bytes\n    (data && dataByteLength > 0) && messageBytes.set(data, metadataLength);\n    // if (messageBytes.byteLength % 8 !== 0) { debugger; }\n    // Return the metadata length because we need to write it into each FileBlock also\n    return { metadataLength, buffer: messageBytes };\n}\n\nexport function serializeFooter(footer: Footer) {\n    const b = new Builder();\n    _Footer.finishFooterBuffer(b, writeFooter(b, footer));\n    // Slice out the buffer that contains the footer metadata\n    const footerBytes = b.asUint8Array();\n    const metadataLength = footerBytes.byteLength;\n    return { metadataLength, buffer: footerBytes };\n}\n\nexport class RecordBatchSerializer extends VectorVisitor {\n    public byteLength = 0;\n    public buffers: TypedArray[] = [];\n    public fieldNodes: FieldMetadata[] = [];\n    public buffersMeta: BufferMetadata[] = [];\n    public visitRecordBatch(recordBatch: RecordBatch) {\n        this.buffers = [];\n        this.byteLength = 0;\n        this.fieldNodes = [];\n        this.buffersMeta = [];\n        for (let vector: Vector, index = -1, numCols = recordBatch.numCols; ++index < numCols;) {\n            if (vector = recordBatch.getChildAt(index)!) {\n                this.visit(vector);\n            }\n        }\n        return this;\n    }\n    public visit<T extends DataType>(vector: Vector<T>) {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            this.fieldNodes.push(new FieldMetadata(length, nullCount));\n            this.addBuffer(nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : this.getTruncatedBitmap(data.offset, length, data.nullBitmap!)\n            );\n        }\n        return super.visit(vector);\n    }\n    public visitNull           (_nullz: Vector<Null>)            { return this;                              }\n    public visitBool           (vector: Vector<Bool>)            { return this.visitBoolVector(vector);      }\n    public visitInt            (vector: Vector<Int>)             { return this.visitFlatVector(vector);      }\n    public visitFloat          (vector: Vector<Float>)           { return this.visitFlatVector(vector);      }\n    public visitUtf8           (vector: Vector<Utf8>)            { return this.visitFlatListVector(vector);  }\n    public visitBinary         (vector: Vector<Binary>)          { return this.visitFlatListVector(vector);  }\n    public visitDate           (vector: Vector<Date_>)           { return this.visitFlatVector(vector);      }\n    public visitTimestamp      (vector: Vector<Timestamp>)       { return this.visitFlatVector(vector);      }\n    public visitTime           (vector: Vector<Time>)            { return this.visitFlatVector(vector);      }\n    public visitDecimal        (vector: Vector<Decimal>)         { return this.visitFlatVector(vector);      }\n    public visitInterval       (vector: Vector<Interval>)        { return this.visitFlatVector(vector);      }\n    public visitList           (vector: Vector<List>)            { return this.visitListVector(vector);      }\n    public visitStruct         (vector: Vector<Struct>)          { return this.visitNestedVector(vector);    }\n    public visitFixedSizeBinary(vector: Vector<FixedSizeBinary>) { return this.visitFlatVector(vector);      }\n    public visitFixedSizeList  (vector: Vector<FixedSizeList>)   { return this.visitListVector(vector);      }\n    public visitMap            (vector: Vector<Map_>)            { return this.visitNestedVector(vector);    }\n    public visitDictionary     (vector: DictionaryVector)        {\n        // Dictionary written out separately. Slice offset contained in the indices\n        return this.visit(vector.indices);\n    }\n    public visitUnion(vector: Vector<DenseUnion | SparseUnion>) {\n        const { data, type, length } = vector;\n        const { offset: sliceOffset, typeIds } = data;\n        // All Union Vectors have a typeIds buffer\n        this.addBuffer(typeIds);\n        // If this is a Sparse Union, treat it like all other Nested types\n        if (type.mode === UnionMode.Sparse) {\n            return this.visitNestedVector(vector);\n        } else if (type.mode === UnionMode.Dense) {\n            // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n            const valueOffsets = (data as DenseUnionData).valueOffsets;\n            if (sliceOffset <= 0) {\n                // If the Vector hasn't been sliced, write the existing valueOffsets\n                this.addBuffer(valueOffsets);\n                // We can treat this like all other Nested types\n                return this.visitNestedVector(vector);\n            } else {\n                // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n                // each child vector, we need to \"rebase\" the valueOffsets for each child\n                // Union typeIds are not necessary 0-indexed\n                const maxChildTypeId = Math.max(...type.typeIds);\n                const childLengths = new Int32Array(maxChildTypeId + 1);\n                // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n                const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n                const shiftedOffsets = new Int32Array(length);\n                const unshiftedOffsets = this.getZeroBasedValueOffsets(sliceOffset, length, valueOffsets);\n                for (let typeId, shift, index = -1; ++index < length;) {\n                    typeId = typeIds[index];\n                    // ~(-1) used to be faster than x === -1, so maybe worth benchmarking the difference of these two impls for large dense unions:\n                    // ~(shift = childOffsets[typeId]) || (shift = childOffsets[typeId] = unshiftedOffsets[index]);\n                    // Going with this form for now, as it's more readable\n                    if ((shift = childOffsets[typeId]) === -1) {\n                        shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                    }\n                    shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                    ++childLengths[typeId];\n                }\n                this.addBuffer(shiftedOffsets);\n                // Slice and visit children accordingly\n                for (let childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                    const typeId = type.typeIds[childIndex];\n                    const child = (vector as UnionVector).getChildAt(childIndex)!;\n                    this.visit(child.slice(childOffsets[typeId], Math.min(length, childLengths[typeId])));\n                }\n            }\n        }\n        return this;\n    }\n    protected visitBoolVector(vector: Vector<Bool>) {\n        // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n        let bitmap: Uint8Array;\n        let values, { data, length } = vector;\n        if (vector.nullCount >= length) {\n            // If all values are null, just insert a placeholder empty data buffer (fastest path)\n            bitmap = new Uint8Array(0);\n        } else if (!((values = data.values) instanceof Uint8Array)) {\n            // Otherwise if the underlying data *isn't* a Uint8Array, enumerate\n            // the values as bools and re-pack them into a Uint8Array (slow path)\n            bitmap = packBools(vector);\n        } else {\n            // otherwise just slice the bitmap (fast path)\n            bitmap = this.getTruncatedBitmap(data.offset, length, values);\n        }\n        return this.addBuffer(bitmap);\n    }\n    protected visitFlatVector<T extends FlatType>(vector: Vector<T>) {\n        const { view, data } = vector;\n        const { offset, length, values } = data;\n        const scaledLength = length * ((view as any).size || 1);\n        return this.addBuffer(values.subarray(offset, scaledLength));\n    }\n    protected visitFlatListVector<T extends FlatListType>(vector: Vector<T>) {\n        const { data, length } = vector;\n        const { offset, values, valueOffsets } = data;\n        const firstOffset = valueOffsets[0];\n        const lastOffset = valueOffsets[length];\n        const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n        // Push in the order FlatList types read their buffers\n        // valueOffsets buffer first\n        this.addBuffer(this.getZeroBasedValueOffsets(offset, length, valueOffsets));\n        // sliced values buffer second\n        this.addBuffer(values.subarray(firstOffset + offset, firstOffset + offset + byteLength));\n        return this;\n    }\n    protected visitListVector<T extends SingleNestedType>(vector: Vector<T>) {\n        const { data, length } = vector;\n        const { offset, valueOffsets } = <any> data;\n        // If we have valueOffsets (ListVector), push that buffer first\n        if (valueOffsets) {\n            this.addBuffer(this.getZeroBasedValueOffsets(offset, length, valueOffsets));\n        }\n        // Then insert the List's values child\n        return this.visit((vector as any as ListVector<T>).getChildAt(0)!);\n    }\n    protected visitNestedVector<T extends NestedType>(vector: Vector<T>) {\n        // Visit the children accordingly\n        const numChildren = (vector.type.children || []).length;\n        for (let child: Vector | null, childIndex = -1; ++childIndex < numChildren;) {\n            if (child = (vector as NestedVector<T>).getChildAt(childIndex)) {\n                this.visit(child);\n            }\n        }\n        return this;\n    }\n    protected addBuffer(values: TypedArray) {\n        const byteLength = align(values.byteLength, 8);\n        this.buffers.push(values);\n        this.buffersMeta.push(new BufferMetadata(this.byteLength, byteLength));\n        this.byteLength += byteLength;\n        return this;\n    }\n    protected getTruncatedBitmap(offset: number, length: number, bitmap: Uint8Array) {\n        const alignedLength = align(bitmap.byteLength, 8);\n        if (offset > 0 || bitmap.byteLength < alignedLength) {\n            // With a sliced array / non-zero offset, we have to copy the bitmap\n            const bytes = new Uint8Array(alignedLength);\n            bytes.set(\n                (offset % 8 === 0)\n                // If the slice offset is aligned to 1 byte, it's safe to slice the nullBitmap directly\n                ? bitmap.subarray(offset >> 3)\n                // iterate each bit starting from the slice offset, and repack into an aligned nullBitmap\n                : packBools(iterateBits(bitmap, offset, length, null, getBool))\n            );\n            return bytes;\n        }\n        return bitmap;\n    }\n    protected getZeroBasedValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n        // If we have a non-zero offset, then the value offsets do not start at\n        // zero. We must a) create a new offsets array with shifted offsets and\n        // b) slice the values array accordingly\n        if (offset > 0 || valueOffsets[0] !== 0) {\n            const startOffset = valueOffsets[0];\n            const destOffsets = new Int32Array(length + 1);\n            for (let index = -1; ++index < length;) {\n                destOffsets[index] = valueOffsets[index] - startOffset;\n            }\n            // Final offset\n            destOffsets[length] = valueOffsets[length] - startOffset;\n            return destOffsets;\n        }\n        return valueOffsets;\n    }\n}\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\n\nimport _Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport _Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport _Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport _List = Schema_.org.apache.arrow.flatbuf.List;\nimport _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport _Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport _Map = Schema_.org.apache.arrow.flatbuf.Map;\n\nexport class TypeSerializer extends TypeVisitor {\n    constructor(protected builder: Builder) {\n        super();\n    }\n    public visitNull(_node: Null) {\n        const b = this.builder;\n        return (\n            _Null.startNull(b) ||\n            _Null.endNull(b)\n        );\n    }\n    public visitInt(node: Int) {\n        const b = this.builder;\n        return (\n            _Int.startInt(b) ||\n            _Int.addBitWidth(b, node.bitWidth) ||\n            _Int.addIsSigned(b, node.isSigned) ||\n            _Int.endInt(b)\n        );\n    }\n    public visitFloat(node: Float) {\n        const b = this.builder;\n        return (\n            _FloatingPoint.startFloatingPoint(b) ||\n            _FloatingPoint.addPrecision(b, node.precision) ||\n            _FloatingPoint.endFloatingPoint(b)\n        );\n    }\n    public visitBinary(_node: Binary) {\n        const b = this.builder;\n        return (\n            _Binary.startBinary(b) ||\n            _Binary.endBinary(b)\n        );\n    }\n    public visitBool(_node: Bool) {\n        const b = this.builder;\n        return (\n            _Bool.startBool(b) ||\n            _Bool.endBool(b)\n        );\n    }\n    public visitUtf8(_node: Utf8) {\n        const b = this.builder;\n        return (\n            _Utf8.startUtf8(b) ||\n            _Utf8.endUtf8(b)\n        );\n    }\n    public visitDecimal(node: Decimal) {\n        const b = this.builder;\n        return (\n            _Decimal.startDecimal(b) ||\n            _Decimal.addScale(b, node.scale) ||\n            _Decimal.addPrecision(b, node.precision) ||\n            _Decimal.endDecimal(b)\n        );\n    }\n    public visitDate(node: Date_) {\n        const b = this.builder;\n        return _Date.startDate(b) || _Date.addUnit(b, node.unit) || _Date.endDate(b);\n    }\n    public visitTime(node: Time) {\n        const b = this.builder;\n        return (\n            _Time.startTime(b) ||\n            _Time.addUnit(b, node.unit) ||\n            _Time.addBitWidth(b, node.bitWidth) ||\n            _Time.endTime(b)\n        );\n    }\n    public visitTimestamp(node: Timestamp) {\n        const b = this.builder;\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        return (\n            _Timestamp.startTimestamp(b) ||\n            _Timestamp.addUnit(b, node.unit) ||\n            (timezone !== undefined && _Timestamp.addTimezone(b, timezone)) ||\n            _Timestamp.endTimestamp(b)\n        );\n    }\n    public visitInterval(node: Interval) {\n        const b = this.builder;\n        return (\n            _Interval.startInterval(b) || _Interval.addUnit(b, node.unit) || _Interval.endInterval(b)\n        );\n    }\n    public visitList(_node: List) {\n        const b = this.builder;\n        return (\n            _List.startList(b) ||\n            _List.endList(b)\n        );\n    }\n    public visitStruct(_node: Struct) {\n        const b = this.builder;\n        return (\n            _Struct.startStruct_(b) ||\n            _Struct.endStruct_(b)\n        );\n    }\n    public visitUnion(node: Union) {\n        const b = this.builder;\n        const typeIds =\n            _Union.startTypeIdsVector(b, node.typeIds.length) ||\n            _Union.createTypeIdsVector(b, node.typeIds);\n        return (\n            _Union.startUnion(b) ||\n            _Union.addMode(b, node.mode) ||\n            _Union.addTypeIds(b, typeIds) ||\n            _Union.endUnion(b)\n        );\n    }\n    public visitDictionary(node: Dictionary) {\n        const b = this.builder;\n        const indexType = this.visit(node.indices);\n        return (\n            _DictionaryEncoding.startDictionaryEncoding(b) ||\n            _DictionaryEncoding.addId(b, new Long(node.id, 0)) ||\n            _DictionaryEncoding.addIsOrdered(b, node.isOrdered) ||\n            (indexType !== undefined && _DictionaryEncoding.addIndexType(b, indexType)) ||\n            _DictionaryEncoding.endDictionaryEncoding(b)\n        );\n    }\n    public visitFixedSizeBinary(node: FixedSizeBinary) {\n        const b = this.builder;\n        return (\n            _FixedSizeBinary.startFixedSizeBinary(b) ||\n            _FixedSizeBinary.addByteWidth(b, node.byteWidth) ||\n            _FixedSizeBinary.endFixedSizeBinary(b)\n        );\n    }\n    public visitFixedSizeList(node: FixedSizeList) {\n        const b = this.builder;\n        return (\n            _FixedSizeList.startFixedSizeList(b) ||\n            _FixedSizeList.addListSize(b, node.listSize) ||\n            _FixedSizeList.endFixedSizeList(b)\n        );\n    }\n    public visitMap(node: Map_) {\n        const b = this.builder;\n        return (\n            _Map.startMap(b) ||\n            _Map.addKeysSorted(b, node.keysSorted) ||\n            _Map.endMap(b)\n        );\n    }\n}\n\nfunction concatBuffersWithMetadata(totalByteLength: number, buffers: Uint8Array[], buffersMeta: BufferMetadata[]) {\n    const data = new Uint8Array(totalByteLength);\n    for (let i = -1, n = buffers.length; ++i < n;) {\n        const { offset, length } = buffersMeta[i];\n        const { buffer, byteOffset, byteLength } = buffers[i];\n        const realBufferLength = Math.min(length, byteLength);\n        if (realBufferLength > 0) {\n            data.set(new Uint8Array(buffer, byteOffset, realBufferLength), offset);\n        }\n    }\n    return data;\n}\n\nfunction writeFooter(b: Builder, node: Footer) {\n    let schemaOffset = writeSchema(b, node.schema);\n    let recordBatches = (node.recordBatches || []);\n    let dictionaryBatches = (node.dictionaryBatches || []);\n    let recordBatchesOffset =\n        _Footer.startRecordBatchesVector(b, recordBatches.length) ||\n            mapReverse(recordBatches, (rb) => writeBlock(b, rb)) &&\n        b.endVector();\n\n    let dictionaryBatchesOffset =\n        _Footer.startDictionariesVector(b, dictionaryBatches.length) ||\n            mapReverse(dictionaryBatches, (db) => writeBlock(b, db)) &&\n        b.endVector();\n\n    return (\n        _Footer.startFooter(b) ||\n        _Footer.addSchema(b, schemaOffset) ||\n        _Footer.addVersion(b, node.schema.version) ||\n        _Footer.addRecordBatches(b, recordBatchesOffset) ||\n        _Footer.addDictionaries(b, dictionaryBatchesOffset) ||\n        _Footer.endFooter(b)\n    );\n}\n\nfunction writeBlock(b: Builder, node: FileBlock) {\n    return _Block.createBlock(b,\n        new Long(node.offset, 0),\n        node.metaDataLength,\n        new Long(node.bodyLength, 0)\n    );\n}\n\nfunction writeMessage(b: Builder, node: Message) {\n    let messageHeaderOffset = 0;\n    if (Message.isSchema(node)) {\n        messageHeaderOffset = writeSchema(b, node as Schema);\n    } else if (Message.isRecordBatch(node)) {\n        messageHeaderOffset = writeRecordBatch(b, node as RecordBatchMetadata);\n    } else if (Message.isDictionaryBatch(node)) {\n        messageHeaderOffset = writeDictionaryBatch(b, node as DictionaryBatch);\n    }\n    return (\n        _Message.startMessage(b) ||\n        _Message.addVersion(b, node.version) ||\n        _Message.addHeader(b, messageHeaderOffset) ||\n        _Message.addHeaderType(b, node.headerType) ||\n        _Message.addBodyLength(b, new Long(node.bodyLength, 0)) ||\n        _Message.endMessage(b)\n    );\n}\n\nfunction writeSchema(b: Builder, node: Schema) {\n\n    const fieldOffsets = node.fields.map((f) => writeField(b, f));\n    const fieldsOffset =\n        _Schema.startFieldsVector(b, fieldOffsets.length) ||\n        _Schema.createFieldsVector(b, fieldOffsets);\n\n    let metadata: number | undefined = undefined;\n    if (node.metadata && node.metadata.size > 0) {\n        metadata = _Schema.createCustomMetadataVector(\n            b,\n            [...node.metadata].map(([k, v]) => {\n                const key = b.createString(`${k}`);\n                const val = b.createString(`${v}`);\n                return (\n                    _KeyValue.startKeyValue(b) ||\n                    _KeyValue.addKey(b, key) ||\n                    _KeyValue.addValue(b, val) ||\n                    _KeyValue.endKeyValue(b)\n                );\n            })\n        );\n    }\n\n    return (\n        _Schema.startSchema(b) ||\n        _Schema.addFields(b, fieldsOffset) ||\n        _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big) ||\n        (metadata !== undefined && _Schema.addCustomMetadata(b, metadata)) ||\n        _Schema.endSchema(b)\n    );\n}\n\nfunction writeRecordBatch(b: Builder, node: RecordBatchMetadata) {\n    let nodes = (node.nodes || []);\n    let buffers = (node.buffers || []);\n    let nodesOffset =\n        _RecordBatch.startNodesVector(b, nodes.length) ||\n        mapReverse(nodes, (n) => writeFieldNode(b, n)) &&\n        b.endVector();\n\n    let buffersOffset =\n        _RecordBatch.startBuffersVector(b, buffers.length) ||\n        mapReverse(buffers, (b_) => writeBuffer(b, b_)) &&\n        b.endVector();\n\n    return (\n        _RecordBatch.startRecordBatch(b) ||\n        _RecordBatch.addLength(b, new Long(node.length, 0)) ||\n        _RecordBatch.addNodes(b, nodesOffset) ||\n        _RecordBatch.addBuffers(b, buffersOffset) ||\n        _RecordBatch.endRecordBatch(b)\n    );\n}\n\nfunction writeDictionaryBatch(b: Builder, node: DictionaryBatch) {\n    const dataOffset = writeRecordBatch(b, node.data);\n    return (\n        _DictionaryBatch.startDictionaryBatch(b) ||\n        _DictionaryBatch.addId(b, new Long(node.id, 0)) ||\n        _DictionaryBatch.addIsDelta(b, node.isDelta) ||\n        _DictionaryBatch.addData(b, dataOffset) ||\n        _DictionaryBatch.endDictionaryBatch(b)\n    );\n}\n\nfunction writeBuffer(b: Builder, node: BufferMetadata) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\nfunction writeFieldNode(b: Builder, node: FieldMetadata) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\nfunction writeField(b: Builder, node: Field) {\n    let typeOffset = -1;\n    let type = node.type;\n    let typeId = node.typeId;\n    let name: number | undefined = undefined;\n    let metadata: number | undefined = undefined;\n    let dictionary: number | undefined = undefined;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = new TypeSerializer(b).visit(type);\n    } else {\n        typeId = type.dictionary.TType;\n        dictionary = new TypeSerializer(b).visit(type);\n        typeOffset = new TypeSerializer(b).visit(type.dictionary);\n    }\n\n    let children = _Field.createChildrenVector(b, (type.children || []).map((f) => writeField(b, f)));\n    if (node.metadata && node.metadata.size > 0) {\n        metadata = _Field.createCustomMetadataVector(\n            b,\n            [...node.metadata].map(([k, v]) => {\n                const key = b.createString(`${k}`);\n                const val = b.createString(`${v}`);\n                return (\n                    _KeyValue.startKeyValue(b) ||\n                    _KeyValue.addKey(b, key) ||\n                    _KeyValue.addValue(b, val) ||\n                    _KeyValue.endKeyValue(b)\n                );\n            })\n        );\n    }\n    if (node.name) {\n        name = b.createString(node.name);\n    }\n    return (\n        _Field.startField(b) ||\n        _Field.addType(b, typeOffset) ||\n        _Field.addTypeType(b, typeId) ||\n        _Field.addChildren(b, children) ||\n        _Field.addNullable(b, !!node.nullable) ||\n        (name !== undefined && _Field.addName(b, name)) ||\n        (dictionary !== undefined && _Field.addDictionary(b, dictionary)) ||\n        (metadata !== undefined && _Field.addCustomMetadata(b, metadata)) ||\n        _Field.endField(b)\n    );\n}\n\nfunction mapReverse<T, U>(source: T[], callbackfn: (value: T, index: number, array: T[]) => U): U[] {\n    const result = new Array(source.length);\n    for (let i = -1, j = source.length; --j > -1;) {\n        result[i] = callbackfn(source[j], i, source);\n    }\n    return result;\n}\n\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n","\nexport function leftPad(str: string, fill: string, n: number) {\n    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n}\n\nexport function valueToString(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","\nexport class PipeIterator<T> implements IterableIterator<T> {\n    constructor(protected iterator: IterableIterator<T>, protected encoding?: any) {}\n    [Symbol.iterator]() { return this.iterator; }\n    next(value?: any) { return this.iterator.next(value); }\n    throw(error?: any) {\n        if (typeof this.iterator.throw === 'function') {\n            return this.iterator.throw(error);\n        }\n        return { done: true, value: null as any };\n    }\n    return(value?: any) {\n        if (typeof this.iterator.return === 'function') {\n            return this.iterator.return(value);\n        }\n        return { done: true, value: null as any };\n    }\n    pipe(stream: NodeJS.WritableStream) {\n        let { encoding } = this;\n        let res: IteratorResult<T>;\n        let write = (err?: any) => {\n            stream['removeListener']('error', write);\n            stream['removeListener']('drain', write);\n            if (err) { return this.throw(err); }\n            if (stream['writable']) {\n                do {\n                    if ((res = this.next()).done) { break; }\n                } while (emit(stream, encoding, res.value));\n            }\n            return wait(stream, res && res.done, write);\n        };\n        write();\n        return stream;\n    }\n}\n\nexport class AsyncPipeIterator<T> implements AsyncIterableIterator<T> {\n    constructor(protected iterator: AsyncIterableIterator<T>, protected encoding?: any) {}\n    [Symbol.asyncIterator]() { return this.iterator; }\n    next(value?: any) { return this.iterator.next(value); }\n    async throw(error?: any) {\n        if (typeof this.iterator.throw === 'function') {\n            return this.iterator.throw(error);\n        }\n        return { done: true, value: null as any };\n    }\n    async return(value?: any) {\n        if (typeof this.iterator.return === 'function') {\n            return this.iterator.return(value);\n        }\n        return { done: true, value: null as any };\n    }\n    pipe(stream: NodeJS.WritableStream) {\n        let { encoding } = this;\n        let res: IteratorResult<T>;\n        let write = async (err?: any) => {\n            stream['removeListener']('error', write);\n            stream['removeListener']('drain', write);\n            if (err) { return this.throw(err); }\n            if (stream['writable']) {\n                do {\n                    if ((res = await this.next()).done) { break; }\n                } while (emit(stream, encoding, res.value));\n            }\n            return wait(stream, res && res.done, write);\n        };\n        write();\n        return stream;\n    }\n}\n\nconst toBufferOrUint8Array = (() => {\n    // If in node, convert Uint8Arrays to Buffer instances. This is necessary\n    // because some node APIs ('http' etc.) don't work unless you give them Buffers.\n    // This eval also defeats closure-compiler, which doesn't recognize the Buffer constructor.\n    const BufferCtor = eval('typeof Buffer !== \"undefined\" ? Buffer : null');\n    return !BufferCtor ? (arr: Uint8Array) => arr :\n        (arr: Uint8Array) => BufferCtor.from(arr.buffer, arr.byteOffset, arr.byteLength);\n})();\n\nfunction emit(stream: NodeJS.WritableStream, encoding: string, value: any) {\n    return stream['write']((encoding === 'utf8' ? value + '\\n' : toBufferOrUint8Array(value)) as any, encoding);\n}\n\nfunction wait(stream: NodeJS.WritableStream, done: boolean, write: (x?: any) => void) {\n    const p = eval('process'); // defeat closure compiler\n    if (!done) {\n        stream['once']('error', write);\n        stream['once']('drain', write);\n    } else if (!(!p || stream === p.stdout) && !(stream as any)['isTTY']) {\n        stream['end']();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { NestedView } from './nested';\nimport { DataType, IterableArrayLike } from '../type';\nimport { getBool, setBool, iterateBits } from '../util/bit';\n\nexport class ValidityView<T extends DataType> implements View<T> {\n    protected view: View<T>;\n    protected length: number;\n    protected offset: number;\n    protected nullBitmap: Uint8Array;\n    constructor(data: Data<T>, view: View<T>) {\n        this.view = view;\n        this.length = data.length;\n        this.offset = data.offset;\n        this.nullBitmap = data.nullBitmap!;\n    }\n    public get size(): number {\n        return (this.view as any).size || 1;\n    }\n    public clone(data: Data<T>): this {\n        return new ValidityView(data, this.view.clone(data)) as this;\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return [...this];\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    public isValid(index: number): boolean {\n        const nullBitIndex = this.offset + index;\n        return getBool(null, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public get(index: number): T['TValue'] | null {\n        const nullBitIndex = this.offset + index;\n        return this.getNullable(this.view, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        if (setBool(this.nullBitmap, this.offset + index, value != null)) {\n            this.view.set(index, value);\n        }\n    }\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return (this.view as NestedView<any>).getChildAt<R>(index);\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return iterateBits<T['TValue'] | null>(this.nullBitmap, this.offset, this.length, this.view, this.getNullable);\n    }\n    protected getNullable(view: View<T>, index: number, byte: number, bit: number) {\n        return getBool(view, index, byte, bit) ? view.get(index) : null;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike, DataType, Dictionary, Int } from '../type';\n\nexport class DictionaryView<T extends DataType> implements View<T> {\n    public indices: Vector<Int>;\n    public dictionary: Vector<T>;\n    constructor(dictionary: Vector<T>, indices: Vector<Int>) {\n        this.indices = indices;\n        this.dictionary = dictionary;\n    }\n    public clone(data: Data<Dictionary<T>> & Data<T>): this {\n        return new DictionaryView(data.dictionary, this.indices.clone(data.indices)) as this;\n    }\n    public isValid(index: number): boolean {\n        return this.indices.isValid(index);\n    }\n    public get(index: number): T['TValue'] {\n        return this.dictionary.get(this.indices.get(index));\n    }\n    public set(index: number, value: T['TValue']): void {\n        this.dictionary.set(this.indices.get(index), value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const values = this.dictionary, indices = this.indices;\n        for (let index = -1, n = indices.length; ++index < n;) {\n            yield values.get(indices.get(index));\n        }\n    }\n    public indexOf(search: T['TValue']) {\n        // First find the dictionary key for the desired value...\n        const key = this.dictionary.indexOf(search);\n        if (key === -1) { return key; }\n\n        // ... then find the first occurence of that key in indices\n        return this.indices.indexOf(key!);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Message_ from '../../fb/Message';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport { PADDING, isValidArrowFile, checkForMagicArrowString } from '../magic';\n\nexport async function* fromReadableStream(stream: NodeJS.ReadableStream) {\n\n    let bb: ByteBuffer;\n    let bytesRead = 0, bytes = new Uint8Array(0);\n    let messageLength = 0, message: _Message | null = null;\n\n    for await (let chunk of (stream as any as AsyncIterable<Uint8Array | Buffer | string>)) {\n\n        if (chunk == null) {\n            continue;\n        }\n\n        const grown = new Uint8Array(bytes.byteLength + chunk.length);\n\n        if (typeof chunk !== 'string') {\n            grown.set(bytes, 0) || grown.set(chunk, bytes.byteLength);\n        } else {\n            for (let i = -1, j = bytes.byteLength, n = chunk.length; ++i < n;) {\n                grown[i + j] = chunk.charCodeAt(i);\n            }\n        }\n\n        bytes = grown;\n\n        // If we're reading in an Arrow File, just concatenate the bytes until\n        // the file is fully read in\n        if (checkForMagicArrowString(bytes)) {\n            if (!isValidArrowFile(new ByteBuffer(bytes))) {\n                continue;\n            }\n            return yield bytes;\n        }\n\n        if (bytes.byteLength > 0 && messageLength <= 0) {\n            messageLength = new DataView(bytes.buffer).getInt32(0, true);\n        }\n\n        while (messageLength > 0 && messageLength <= bytes.byteLength) {\n            if (!message) {\n                (bb = new ByteBuffer(bytes)).setPosition(4);\n                if (message = _Message.getRootAsMessage(bb)) {\n                    messageLength += message.bodyLength().low;\n                    continue;\n                }\n                throw new Error(`Invalid message at position ${bytesRead}`);\n            }\n            bytesRead += messageLength + PADDING;\n            yield bytes.subarray(0, messageLength + PADDING);\n            bytes = bytes.subarray(messageLength + PADDING);\n            messageLength = bytes.byteLength < 4 ? 0 :\n                new DataView(bytes.buffer).getInt32(bytes.byteOffset, true);\n            message = null;\n        }\n    }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type_ from './type';\nimport * as data_ from './data';\nimport * as vector_ from './vector';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_node from './util/node';\nimport * as visitor_ from './visitor';\nimport * as view_ from './vector/view';\nimport * as predicate_ from './predicate';\nimport { Vector } from './vector';\nimport { RecordBatch } from './recordbatch';\nimport { Schema, Field, Type } from './type';\nimport { Table, DataFrame, NextFunc, BindFunc, CountByResult } from './table';\nimport { fromReadableStream } from './ipc/reader/node';\nimport { read, readAsync, readStream } from './ipc/reader/arrow';\nimport { readBuffersAsync, readRecordBatchesAsync } from './ipc/reader/arrow';\nimport { serializeFile, serializeStream } from './ipc/writer/binary';\n\nexport import View = vector_.View;\nexport import VectorLike = vector_.VectorLike;\nexport import TypedArray = type_.TypedArray;\nexport import IntBitWidth = type_.IntBitWidth;\nexport import TimeBitWidth = type_.TimeBitWidth;\nexport import TypedArrayConstructor = type_.TypedArrayConstructor;\n\nexport { fromReadableStream };\nexport { read, readAsync, readStream };\nexport { readBuffersAsync, readRecordBatchesAsync };\nexport { serializeFile, serializeStream };\nexport { Table, DataFrame, NextFunc, BindFunc, CountByResult };\nexport { Field, Schema, RecordBatch, Vector, Type };\n\nexport namespace util {\n    export import Uint64 = util_int_.Uint64;\n    export import Int64 = util_int_.Int64;\n    export import Int128 = util_int_.Int128;\n    export import packBools = util_bit_.packBools;\n    export import PipeIterator = util_node.PipeIterator;\n    export import AsyncPipeIterator = util_node.AsyncPipeIterator;\n}\n\nexport namespace data {\n    export import BaseData = data_.BaseData;\n    export import FlatData = data_.FlatData;\n    export import BoolData = data_.BoolData;\n    export import FlatListData = data_.FlatListData;\n    export import DictionaryData = data_.DictionaryData;\n    export import NestedData = data_.NestedData;\n    export import ListData = data_.ListData;\n    export import UnionData = data_.UnionData;\n    export import SparseUnionData = data_.SparseUnionData;\n    export import DenseUnionData = data_.DenseUnionData;\n    export import ChunkedData = data_.ChunkedData;\n}\n\nexport namespace enum_ {\n    export import Type = type_.ArrowType;\n    export import DateUnit = type_.DateUnit;\n    export import TimeUnit = type_.TimeUnit;\n    export import Precision = type_.Precision;\n    export import UnionMode = type_.UnionMode;\n    export import VectorType = type_.VectorType;\n    export import IntervalUnit = type_.IntervalUnit;\n    export import MessageHeader = type_.MessageHeader;\n    export import MetadataVersion = type_.MetadataVersion;\n}\n\nexport namespace type {\n    export import Schema = type_.Schema;\n    export import Field = type_.Field;\n    export import Null = type_.Null;\n    export import Int = type_.Int;\n    export import Int8 = type_.Int8;\n    export import Int16 = type_.Int16;\n    export import Int32 = type_.Int32;\n    export import Int64 = type_.Int64;\n    export import Uint8 = type_.Uint8;\n    export import Uint16 = type_.Uint16;\n    export import Uint32 = type_.Uint32;\n    export import Uint64 = type_.Uint64;\n    export import Float = type_.Float;\n    export import Float16 = type_.Float16;\n    export import Float32 = type_.Float32;\n    export import Float64 = type_.Float64;\n    export import Binary = type_.Binary;\n    export import Utf8 = type_.Utf8;\n    export import Bool = type_.Bool;\n    export import Decimal = type_.Decimal;\n    export import Date_ = type_.Date_;\n    export import Time = type_.Time;\n    export import Timestamp = type_.Timestamp;\n    export import Interval = type_.Interval;\n    export import List = type_.List;\n    export import Struct = type_.Struct;\n    export import Union = type_.Union;\n    export import DenseUnion = type_.DenseUnion;\n    export import SparseUnion = type_.SparseUnion;\n    export import FixedSizeBinary = type_.FixedSizeBinary;\n    export import FixedSizeList = type_.FixedSizeList;\n    export import Map_ = type_.Map_;\n    export import Dictionary = type_.Dictionary;\n}\n\nexport namespace vector {\n    export import Vector = vector_.Vector;\n    export import NullVector = vector_.NullVector;\n    export import BoolVector = vector_.BoolVector;\n    export import IntVector = vector_.IntVector;\n    export import FloatVector = vector_.FloatVector;\n    export import DateVector = vector_.DateVector;\n    export import DecimalVector = vector_.DecimalVector;\n    export import TimeVector = vector_.TimeVector;\n    export import TimestampVector = vector_.TimestampVector;\n    export import IntervalVector = vector_.IntervalVector;\n    export import BinaryVector = vector_.BinaryVector;\n    export import FixedSizeBinaryVector = vector_.FixedSizeBinaryVector;\n    export import Utf8Vector = vector_.Utf8Vector;\n    export import ListVector = vector_.ListVector;\n    export import FixedSizeListVector = vector_.FixedSizeListVector;\n    export import MapVector = vector_.MapVector;\n    export import StructVector = vector_.StructVector;\n    export import UnionVector = vector_.UnionVector;\n    export import DictionaryVector = vector_.DictionaryVector;\n}\n\nexport namespace visitor {\n    export import TypeVisitor = visitor_.TypeVisitor;\n    export import VectorVisitor = visitor_.VectorVisitor;\n}\n\nexport namespace view {\n    export import ChunkedView = view_.ChunkedView;\n    export import DictionaryView = view_.DictionaryView;\n    export import ListView = view_.ListView;\n    export import FixedSizeListView = view_.FixedSizeListView;\n    export import BinaryView = view_.BinaryView;\n    export import Utf8View = view_.Utf8View;\n    export import UnionView = view_.UnionView;\n    export import DenseUnionView = view_.DenseUnionView;\n    export import NestedView = view_.NestedView;\n    export import StructView = view_.StructView;\n    export import MapView = view_.MapView;\n    export import FlatView = view_.FlatView;\n    export import NullView = view_.NullView;\n    export import BoolView = view_.BoolView;\n    export import ValidityView = view_.ValidityView;\n    export import PrimitiveView = view_.PrimitiveView;\n    export import FixedSizeView = view_.FixedSizeView;\n    export import Float16View = view_.Float16View;\n    export import DateDayView = view_.DateDayView;\n    export import DateMillisecondView = view_.DateMillisecondView;\n    export import TimestampDayView = view_.TimestampDayView;\n    export import TimestampSecondView = view_.TimestampSecondView;\n    export import TimestampMillisecondView = view_.TimestampMillisecondView;\n    export import TimestampMicrosecondView = view_.TimestampMicrosecondView;\n    export import TimestampNanosecondView = view_.TimestampNanosecondView;\n    export import IntervalYearMonthView = view_.IntervalYearMonthView;\n    export import IntervalYearView = view_.IntervalYearView;\n    export import IntervalMonthView = view_.IntervalMonthView;\n}\n\nexport namespace predicate {\n    export import col = predicate_.col;\n    export import lit = predicate_.lit;\n    export import and = predicate_.and;\n    export import or = predicate_.or;\n    export import custom = predicate_.custom;\n\n    export import Or = predicate_.Or;\n    export import Col = predicate_.Col;\n    export import And = predicate_.And;\n    export import Not = predicate_.Not;\n    export import GTeq = predicate_.GTeq;\n    export import LTeq = predicate_.LTeq;\n    export import Value = predicate_.Value;\n    export import Equals = predicate_.Equals;\n    export import Literal = predicate_.Literal;\n    export import Predicate = predicate_.Predicate;\n\n    export import PredicateFunc = predicate_.PredicateFunc;\n}\n\n/* These exports are needed for the closure and uglify umd targets */\ntry {\n    let Arrow: any = eval('exports');\n    if (Arrow && typeof Arrow === 'object') {\n        // string indexers tell closure and uglify not to rename these properties\n        Arrow['data'] = data;\n        Arrow['type'] = type;\n        Arrow['util'] = util;\n        Arrow['view'] = view;\n        Arrow['enum_'] = enum_;\n        Arrow['vector'] = vector;\n        Arrow['visitor'] = visitor;\n        Arrow['predicate'] = predicate;\n\n        Arrow['read'] = read;\n        Arrow['readAsync'] = readAsync;\n        Arrow['readStream'] = readStream;\n        Arrow['fromReadableStream'] = fromReadableStream;\n\n        Arrow['serializeFile'] = serializeFile;\n        Arrow['serializeStream'] = serializeStream;\n\n        Arrow['Type'] = Type;\n        Arrow['Field'] = Field;\n        Arrow['Schema'] = Schema;\n        Arrow['Vector'] = Vector;\n        Arrow['RecordBatch'] = RecordBatch;\n\n        Arrow['Table'] = Table;\n        Arrow['CountByResult'] = CountByResult;\n    }\n} catch (e) { /* not the UMD bundle */ }\n/* end umd exports */\n\n// closure compiler erases static properties/methods:\n// https://github.com/google/closure-compiler/issues/1776\n// set them via string indexers to save them from the mangler\nSchema['from'] = Schema.from;\nTable['from'] = Table.from;\nTable['fromAsync'] = Table.fromAsync;\nTable['fromStruct'] = Table.fromStruct;\nTable['empty'] = Table.empty;\nVector['create'] = Vector.create;\nRecordBatch['from'] = RecordBatch.from;\n\nutil_int_.Uint64['add'] = util_int_.Uint64.add;\nutil_int_.Uint64['multiply'] = util_int_.Uint64.multiply;\n\nutil_int_.Int64['add'] = util_int_.Int64.add;\nutil_int_.Int64['multiply'] = util_int_.Int64.multiply;\nutil_int_.Int64['fromString'] = util_int_.Int64.fromString;\n\nutil_int_.Int128['add'] = util_int_.Int128.add;\nutil_int_.Int128['multiply'] = util_int_.Int128.multiply;\nutil_int_.Int128['fromString'] = util_int_.Int128.fromString;\n\ndata_.ChunkedData['computeOffsets'] = data_.ChunkedData.computeOffsets;\n\n(type_.Type as any)['NONE'] = type_.Type.NONE;\n(type_.Type as any)['Null'] = type_.Type.Null;\n(type_.Type as any)['Int'] = type_.Type.Int;\n(type_.Type as any)['Float'] = type_.Type.Float;\n(type_.Type as any)['Binary'] = type_.Type.Binary;\n(type_.Type as any)['Utf8'] = type_.Type.Utf8;\n(type_.Type as any)['Bool'] = type_.Type.Bool;\n(type_.Type as any)['Decimal'] = type_.Type.Decimal;\n(type_.Type as any)['Date'] = type_.Type.Date;\n(type_.Type as any)['Time'] = type_.Type.Time;\n(type_.Type as any)['Timestamp'] = type_.Type.Timestamp;\n(type_.Type as any)['Interval'] = type_.Type.Interval;\n(type_.Type as any)['List'] = type_.Type.List;\n(type_.Type as any)['Struct'] = type_.Type.Struct;\n(type_.Type as any)['Union'] = type_.Type.Union;\n(type_.Type as any)['FixedSizeBinary'] = type_.Type.FixedSizeBinary;\n(type_.Type as any)['FixedSizeList'] = type_.Type.FixedSizeList;\n(type_.Type as any)['Map'] = type_.Type.Map;\n(type_.Type as any)['Dictionary'] = type_.Type.Dictionary;\n(type_.Type as any)['DenseUnion'] = type_.Type.DenseUnion;\n(type_.Type as any)['SparseUnion'] = type_.Type.SparseUnion;\n\ntype_.DataType['isNull'] = type_.DataType.isNull;\ntype_.DataType['isInt'] = type_.DataType.isInt;\ntype_.DataType['isFloat'] = type_.DataType.isFloat;\ntype_.DataType['isBinary'] = type_.DataType.isBinary;\ntype_.DataType['isUtf8'] = type_.DataType.isUtf8;\ntype_.DataType['isBool'] = type_.DataType.isBool;\ntype_.DataType['isDecimal'] = type_.DataType.isDecimal;\ntype_.DataType['isDate'] = type_.DataType.isDate;\ntype_.DataType['isTime'] = type_.DataType.isTime;\ntype_.DataType['isTimestamp'] = type_.DataType.isTimestamp;\ntype_.DataType['isInterval'] = type_.DataType.isInterval;\ntype_.DataType['isList'] = type_.DataType.isList;\ntype_.DataType['isStruct'] = type_.DataType.isStruct;\ntype_.DataType['isUnion'] = type_.DataType.isUnion;\ntype_.DataType['isDenseUnion'] = type_.DataType.isDenseUnion;\ntype_.DataType['isSparseUnion'] = type_.DataType.isSparseUnion;\ntype_.DataType['isFixedSizeBinary'] = type_.DataType.isFixedSizeBinary;\ntype_.DataType['isFixedSizeList'] = type_.DataType.isFixedSizeList;\ntype_.DataType['isMap'] = type_.DataType.isMap;\ntype_.DataType['isDictionary'] = type_.DataType.isDictionary;\n\nvector_.BoolVector['from'] = vector_.BoolVector.from;\nvector_.IntVector['from'] = vector_.IntVector.from;\nvector_.FloatVector['from'] = vector_.FloatVector.from;\n\nvisitor_.TypeVisitor['visitTypeInline'] = visitor_.TypeVisitor.visitTypeInline;\nvisitor_.VectorVisitor['visitTypeInline'] = visitor_.VectorVisitor.visitTypeInline;"],"sourceRoot":""}