{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","tslib/tslib.es6.js","flatbuffers/js/flatbuffers.mjs","io/interfaces.ts","util/compat.ts","util/buffer.ts","io/adapters.ts","vector.ts","fb/Schema.ts","fb/Message.ts","enum.ts","fb/File.ts","type.ts","schema.ts","ipc/metadata/file.ts","util/bit.ts","data.ts","util/pretty.ts","vector/row.ts","util/vector.ts","vector/chunked.ts","vector/base.ts","vector/struct.ts","recordbatch.ts","io/stream.ts","io/file.ts","text-encoding-utf-8/lib/encoding.lib.mjs","visitor.ts","util/int.ts","visitor/vectorloader.ts","visitor/typeassembler.ts","ipc/metadata/json.ts","ipc/metadata/message.ts","ipc/message.ts","ipc/reader.ts","visitor/vectorassembler.ts","ipc/writer.ts","column.ts","vector/binary.ts","vector/bool.ts","vector/date.ts","vector/decimal.ts","vector/dictionary.ts","vector/fixedsizebinary.ts","vector/fixedsizelist.ts","vector/float.ts","vector/interval.ts","vector/int.ts","vector/list.ts","vector/map.ts","vector/null.ts","vector/timestamp.ts","vector/time.ts","vector/union.ts","visitor/set.ts","vector/utf8.ts","visitor/get.ts","visitor/indexof.ts","visitor/iterator.ts","visitor/toarray.ts","visitor/bytewidth.ts","visitor/vectorctor.ts","vector/index.ts","table.ts","compute/predicate.ts","compute/dataframe.ts","Arrow.ts","Arrow.dom.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__values","iterator","length","__await","v","this","__asyncGenerator","asyncIterator","TypeError","g","q","verb","a","b","push","resume","fulfill","settle","f","shift","__asyncDelegator","__asyncValues","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","Int32Array","float32","Float32Array","buffer","float64","Float64Array","isLittleEndian","Uint16Array","Uint8Array","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","size","additional_bytes","align_size","capacity","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","Error","notNested","new_buf_size","nbb","setPosition","set","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","vt2","readInt16","j","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","ITERATOR_DONE","freeze","ArrowJSON","[object Object]","_json","schema","batches","dictionaries","ReadableInterop","_getReadableDOMStream","tee","writable","options","_getReadableNodeStream","pipe","pipeTo","duplex","pipeThrough","_readableDOMStream","toReadableDOMStream","_readableNodeStream","toReadableNodeStream","interfaces_AsyncQueue","super","values","resolvers","_closedPromise","_closedPromiseResolve","closed","reason","return","_ensureOpen","_error","error","undefined","adapters","_","abort","close","_args","constructor","hasFuncs","x","fn","hasProps","map","ks","isObject","every","k","isPromise","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isWritableDOMStream","isWritableNodeStream","isReadableDOMStream","isReadableNodeStream","memcpy","target","source","targetByteOffset","sourceByteLength","byteLength","targetByteLength","dst","byteOffset","src","Math","min","joinUint8Arrays","chunks","sliced","index","chunksLen","y","xOffset","xLen","yOffset","yLen","splice","collapseContiguousByteRanges","reduce","slice","toArrayBufferView","ArrayBufferViewCtor","input","chunk","decodeUtf8","ArrayBuffer","SharedArrayBuffer","isView","BYTES_PER_ELEMENT","from","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","toUint8Array","toUint16Array","toUint32Array","Uint32Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","pump","toArrayBufferViewIterator","ArrayCtor","wrap","buffers","it","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","arguments","emit","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","fromIterable","adapters_pump","cmd","threw","bufferLength","byteRange","isNaN","throw","fromAsyncIterable","fromReadableDOMStream","adapters_AdaptiveByteReader","releaseLock","fromReadableNodeStream","stream","events","event","err","onEvent","race","isFinite","evt","destroyed","cb","cleanup","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","read","readInto","handler","Vector","data","nullCount","isValid","Schema_org","arrow","apache","org","Message_org","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","VectorType","Endianness","Null","__init","builder","Struct_","List","FixedSizeList","listSize","Map","keysSorted","Union","Sparse","typeIdsOffset","numElems","Int","bitWidth","isSigned","FloatingPoint","HALF","precision","Utf8","Binary","FixedSizeBinary","byteWidth","Bool","Decimal","scale","Date","MILLISECOND","unit","Time","Timestamp","SECOND","optionalEncoding","timezoneOffset","Interval","YEAR_MONTH","VectorLayout","OFFSET","type","KeyValue","keyOffset","valueOffset","DictionaryEncoding","id","indexTypeOffset","isOrdered","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","layoutOffset","customMetadataOffset","Buffer","Schema","Little","endianness","fieldsOffset","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","DictionaryBatch","dataOffset","isDelta","Message","V1","version","headerType","headerOffset","bodyLength","File_org","ArrowType","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","metaDataLength","type_DataType","_TType","_children","TType","Float","Struct","Dictionary","children","proto","ArrayType","Array","type_Null","type_Int","_isSigned","_bitWidth","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","type_Float","_precision","SINGLE","DOUBLE","type_Float16","type_Float32","type_Float64","type_Binary","type_Utf8","type_Bool","type_Decimal","_scale","type_Date_","_unit","type_DateDay","DAY","type_DateMillisecond","type_Time","type_TimeSecond","type_TimeMillisecond","type_TimeMicrosecond","MICROSECOND","type_TimeNanosecond","NANOSECOND","type_Timestamp","_timezone","timezone","type_TimestampSecond","type_TimestampMillisecond","type_TimestampMicrosecond","type_TimestampNanosecond","type_Interval","type_IntervalDayTime","DAY_TIME","type_IntervalYearMonth","type_List","valueType","valueField","type_Struct","join","type_Union","_mode","_typeIds","_typeIdToChildIndex","typeIdToChildIndex","typeId","idx","typeIds","type_DenseUnion","Dense","type_SparseUnion","type_FixedSizeBinary","_byteWidth","type_FixedSizeList","_listSize","type_Map_","_keysSorted","getId","atomicDictionaryId","type_Dictionary","dictionary","indices","dictionaryVector","_indices","_dictionary","_isOrdered","_id","fields","metadata","dictionaryFields","_fields","_metadata","generateDictionaryMap","isDictionary","has","_dictionaries","_dictionaryFields","vectors","names","schema_Field","columnNames","xs","filter","_name","_type","_nullable","file_ByteBuffer","_Block","_Footer","file_Footer","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","buf","footer","getRootAsFooter","decode","OffHeapFooter","encode","startRecordBatchesVector","numRecordBatches","reverse","forEach","rb","FileBlock","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","finishFooterBuffer","endFooter","block","getRecordBatch","getDictionaryBatch","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","align","padding","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","iterateBits","begin","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","arr","cnt","pos","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","kUnknownNullCount","data_Data","childData","_buffers","_offset","floor","max","_length","assign","_nullCount","_childData","TArray","TValue","DATA","TYPE","nullBitmap","VALIDITY","sliceBuffers","sliceChildren","clone","sliceData","sliceOffsets","child","valueOffsetsOrChildData","valueToString","JSON","stringify","columnDescriptor","configurable","lengthDescriptor","rowIndexDescriptor","rowParentDescriptor","row","parent","rowIndex","row_Row","fieldsAreEnumerable","columnIndex","_bindGetter","schemaOrFields","isArray","keys","colIndex","getChildAt","bound","isStruct","getOwnPropertyNames","props","prop","tmp","clampRange","end","chunked_ChunkedVector","offsets","calculateOffsets","_chunks","_chunkOffsets","_numChildren","flatten","numChildren","stride","others","concat","columns","vector","vec","mid","search","isValidInternal","getInternal","element","self","indexOfInternal","toArray","arraySet","typedSet","sliceInternal","chunkIndex","fromIndex","start","found","indexOf","column","slices","chunkOffsets","chunkLength","chunkOffset","base_BaseVector","_stride","bindDataAccessors","VectorName","new","struct_StructVector","rowProxy","recordbatch_RecordBatch","args","_schema","numRows","impl","numCols","select","childNames","structData","stream_AsyncByteQueue","write","sync","_c","_b","stream_ByteStream","stream_ByteStreamSource","peek","stream_AsyncByteStream","stream_AsyncByteStreamSource","body","cancel","file_RandomAccessFile","readAt","getInt32","nBytes","Infinity","file_AsyncRandomAccessFile","file","stat","bytesRead","inRange","ToDictionary","end_of_stream","Stream","tokens","endOfStream","prepend","token","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","TextDecoder","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","bite","code_point","UTF8Encoder","count","temp","input_stream","code_points","cp","codePointsToString","opt_string","string","u","stringToCodePoints","Visitor","nodes","node","visit","getVisitFn","throwIfNotFound","visitor","dtype","inferDType","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","_node","carryBit16","intAsHex","toString","kInt32DecimalDigits","kPowersOfTen","BaseInt64","L","R","product","lessThan","int_Uint64","_times","_plus","val","out_buffer","fromString","num","str","out","posn","group","parseInt","substr","multiple","times","plus","left","right","int_Int64","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","utf8Encoder","vectorloader_VectorLoader","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","visitMany","readTypeIds","nextBufferRange","vectorloader_JSONVectorLoader","sources","isTimestamp","convertArray","isInt","isTime","isDate","isDecimal","isBinary","isFixedSizeBinary","joined","binaryDataFromJSON","isBool","isUtf8","typeassembler_Long","typeassembler_Null","typeassembler_Int","typeassembler_Binary","typeassembler_Bool","typeassembler_Utf8","typeassembler_Decimal","typeassembler_Date","typeassembler_Time","typeassembler_Timestamp","typeassembler_Interval","typeassembler_List","typeassembler_Struct","typeassembler_Union","typeassembler_FixedSizeBinary","typeassembler_FixedSizeList","typeassembler_Map_","instance","startNull","endNull","startInt","addBitWidth","addIsSigned","endInt","startFloatingPoint","addPrecision","endFloatingPoint","startBinary","endBinary","startBool","endBool","startUtf8","endUtf8","startDecimal","addScale","endDecimal","startDate","addUnit","endDate","startTime","endTime","startTimestamp","addTimezone","endTimestamp","startInterval","endInterval","startList","endList","startStruct_","endStruct_","startTypeIdsVector","createTypeIdsVector","startUnion","addMode","addTypeIds","endUnion","indexType","startDictionaryEncoding","addId","addIsOrdered","addIndexType","endDictionaryEncoding","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startFixedSizeList","addListSize","endFixedSizeList","startMap","addKeysSorted","endMap","recordBatchFromJSON","message_RecordBatch","fieldNodesFromJSON","fieldNodes","nullCountFromJSON","buffersFromJSON","BufferRegion","fieldChildrenFromJSON","_field","Boolean","fromJSON","validity","customMetadataFromJSON","entries","indexTypeFromJSON","typeFromJSON","message_Long","message_Builder","message_ByteBuffer","message_Type","_Field","_Schema","_Buffer","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","message_Message","header","_version","_headerType","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","startMessage","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","_nodes","_isDelta","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","startKeyValue","addKey","addValue","endKeyValue","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","addCustomMetadata","endField","dictType","dictMeta","dictField","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","startSchema","addFields","addEndianness","platformIsLittleEndian","Big","endSchema","fieldsLength","decodeSchemaFields","schemaFieldsFromJSON","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","batch","nodesLength","decodeFieldNodes","buffersLength","v3Compat","decodeBuffers","dictionaryBatch","startDictionaryBatch","addIsDelta","addData","endDictionaryBatch","createFieldNode","createBuffer","setInt16","ipc_message_ByteBuffer","invalidMessageType","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","message_MessageReader","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","message_AsyncMessageReader","message_JSONMessageReader","_body","_batchIndex","_dictionaryIndex","numBatches","flattenDataSources","MAGIC","MAGIC_STR","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","reader_RecordBatchReader","autoClose","reset","objectMode","reader_RecordBatchFileReader","reader_RecordBatchStreamReader","reader_AsyncRecordBatchFileReader","reader_AsyncRecordBatchStreamReader","fromFileHandle","fromAsyncByteStream","fromByteStream","reader_AsyncRecordBatchFileReaderImpl","reader_RecordBatchFileReaderImpl","open","readRecordBatch","reader_RecordBatchJSONReaderImpl","reader_RecordBatchStreamReaderImpl","reader_AsyncRecordBatchStreamReaderImpl","rest","reader_RecordBatchReaderImplBase","dictionaryIndex","recordBatchIndex","_loadVectors","types","readSchema","readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","readFooter","readDictionaryBatch","seek","_super","vectorassembler_VectorAssembler","_byteLength","_bufferRegions","RangeError","addBuffer","_nullV","bufferRegions","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","fill","shiftedOffsets","unshiftedOffsets","childIndex","childLength","kAlignmentBytes","writer_RecordBatchWriter","started","sink","dictionaryBlocks","recordBatchBlocks","_writeSchema","_writeRecordBatch","flatbufferSize","nPaddingBytes","_write","of","_writePadding","_writeMessage","_writeDictionaries","_writeMagic","records","assemble","_writeBodyBuffers","_writeDictionaryBatch","writer_RecordBatchFileWriter","writer","batches_1_1","batches_1","_writeFooter","writer_RecordBatchStreamWriter","batches_2_1","batches_2","column_Column","binary_BinaryVector","bool_BoolVector","date_DateVector","valueOf","DateDayVector","DateMillisecondVector","decimal_DecimalVector","dictionary_DictionaryVector","fixedsizebinary_FixedSizeBinaryVector","fixedsizelist_FixedSizeListVector","float_FloatVector","Float16Vector","Float32Vector","Float64Vector","interval_IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","int_IntVector","is64","Int8Vector","Int16Vector","Int32Vector","Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","list_ListVector","map_MapVector","null_NullVector","timestamp_TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","time_TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","union_UnionVector","DenseUnionVector","SparseUnionVector","encodeUtf8","encoder","set_SetVisitor","setEpochMsToMillisecondsLong","epochMs","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","setTimestampSecond","setEpochMsToSeconds","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setNested","kid","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","set_instance","utf8_Utf8Vector","get_decodeUtf8","decoder","get_GetVisitor","epochMillisecondsLongToMs","epochMillisecondsToDate","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getNumericX2","getTimestampSecond","epochSecondsToMs","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getNested","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","get_instance","indexof_IndexOfVisitor","indexOfNull","valueIndexOf","searchElement","dateIndexOf","valueOfDate","arrayIndexOf","searching","listIndexOf","getSearchElement","indexOfNested","indexof_instance","iterator_IteratorVisitor","vectorIterator","getFn","nullByte","nullBit","nullableIterator","iterator_instance","toarray_ToArrayVisitor","arrayOfVector","toarray_instance","variableWidthColumnErrorMessage","bytewidth_instance","____","visitFields","vectorctor_instance","partial0","partial2","getByteWidth","T","VectorCtor","partial1","table_Table","_columns","_batches","_batchesUnion","batchesUnion","_numCols","empty","isSync","opening","reader_1_1","reader_1","struct","getColumnAt","getColumnIndex","findIndex","writeAll","Value","Literal","predicate_Equals","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","some","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","getKey","cols","func","CustomPredicate","bind_","predicate_lit","predicate_col","and","or","custom","scan","dataframe_Dataframe","predicate","countBy","dataframe_FilteredDataFrame","batchIndex","count_by","countByteLength","ceil","log","counts","dataframe_CountByResult","util","int_namespaceObject","bit_namespaceObject","buffer_namespaceObject","__webpack_exports__","predicate_namespaceObject","ReadableStream","controller","desiredSize","enqueue","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","through","readable","WritableStream","writableStrategy","readableStrategy"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\nexport type FileHandle = import('fs').promises.FileHandle;\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number };\n\n/**\n * @ignore\n */\nexport class ArrowJSON {\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\nObject.defineProperty(ArrowJSON.prototype, 'schema', { get() { return this._json['schema']; }});\nObject.defineProperty(ArrowJSON.prototype, 'batches', { get() { return (this._json['batches'] || []) as any[]; }});\nObject.defineProperty(ArrowJSON.prototype, 'dictionaries', { get() { return (this._json['dictionaries'] || []) as any[]; }});\n\n/**\n * @ignore\n */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/**\n * @ignore\n */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/**\n * @ignore\n */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toReadableDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toReadableNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\nexport abstract class ReadableInterop<T> {\n\n    public abstract toReadableDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toReadableNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getReadableDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getReadableNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getReadableDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getReadableDOMStream().pipeThrough(duplex, options);\n    }\n\n    private _readableDOMStream?: ReadableStream<T>;\n    private _getReadableDOMStream() {\n        return this._readableDOMStream || (this._readableDOMStream = this.toReadableDOMStream());\n    }\n\n    private _readableNodeStream?: import('stream').Readable;\n    private _getReadableNodeStream() {\n        return this._readableNodeStream || (this._readableNodeStream = this.toReadableNodeStream());\n    }\n}\n\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/**\n * @ignore\n */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this.values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toReadableDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toReadableDOMStream(this, options);\n    }\n    public toReadableNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toReadableNodeStream(this, options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; };\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; };\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this.values.length > 0) {\n            return Promise.resolve({ done: false, value: this.values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this.constructor.name} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\ntype FSReadStream = import('fs').ReadStream;\ntype FileHandle = import('fs').promises.FileHandle;\n\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\nconst isObject = (x: any) => x != null && Object(x) === x;\nconst hasFuncs = (x: any, ...fn: PropertyKey[]) => hasProps(x, ...fn.map((f) => [f, 'function'] as [PropertyKey, string]));\nconst hasProps = (x: any, ...ks: [PropertyKey, string?][]) => isObject(x) && ks.every(([k, t]) => t ? (x[k] != null && typeof x[k] === t) : (k in x));\n\n/** @ignore */ export const isPromise            = <T = any>(x: any): x is PromiseLike<T>        => hasFuncs(x, 'then');\n/** @ignore */ export const isObservable         = <T = any>(x: any): x is Observable<T>         => hasFuncs(x, 'subscribe');\n/** @ignore */ export const isIterable           = <T = any>(x: any): x is Iterable<T>           => hasFuncs(x, Symbol.iterator);\n/** @ignore */ export const isAsyncIterable      = <T = any>(x: any): x is AsyncIterable<T>      => hasFuncs(x, Symbol.asyncIterator);\n/** @ignore */ export const isArrowJSON          =          (x: any): x is ArrowJSONLike         => hasProps(x, ['schema', 'object']);\n/** @ignore */ export const isArrayLike          = <T = any>(x: any): x is ArrayLike<T>          => hasProps(x, ['length', 'number']);\n/** @ignore */ export const isIteratorResult     = <T = any>(x: any): x is IteratorResult<T>     => hasProps(x, ['done'], ['value']);\n/** @ignore */ export const isUnderlyingSink     = <T = any>(x: any): x is UnderlyingSink<T>     => hasFuncs(x, 'abort', 'close', 'start', 'write');\n/** @ignore */ export const isFileHandle         =          (x: any): x is FileHandle            => hasFuncs(x, 'stat') && hasProps(x, ['fd', 'number']);\n/** @ignore */ export const isFSReadStream       =          (x: any): x is FSReadStream          => isReadableNodeStream(x) && hasProps(x, ['bytesRead', 'number']);\n/** @ignore */ export const isFetchResponse      =          (x: any): x is Response              => hasProps(x, ['body'], ['bodyUsed', 'boolean'], ['ok', 'boolean']);\n/** @ignore */ export const isWritableDOMStream  = <T = any>(x: any): x is WritableStream<T>     => !(x instanceof ReadableInterop) && hasFuncs(x, 'abort', 'getWriter');\n/** @ignore */ export const isWritableNodeStream =          (x: any): x is NodeJS.WritableStream => !(x instanceof ReadableInterop) && hasFuncs(x, 'write', 'cork', 'uncork', 'end');\n/** @ignore */ export const isReadableDOMStream  = <T = any>(x: any): x is ReadableStream<T>     => !(x instanceof ReadableInterop) && hasFuncs(x, 'tee', 'cancel', 'pipeTo', 'getReader');\n/** @ignore */ export const isReadableNodeStream =          (x: any): x is NodeJS.ReadableStream => !(x instanceof ReadableInterop) && hasFuncs(x, 'read', 'pipe', 'unpipe', 'pause', 'resume', 'wrap');\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { ArrayBufferViewConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult } from './compat';\n\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    for (let x, y, i = 0; ++i < chunks.length;) {\n        x = chunks[i - 1];\n        y = chunks[i - 0];\n        // continue x and y don't share the same underlying ArrayBuffer\n        if (!x || !y || x.buffer !== y.buffer) { continue; }\n        const { byteOffset: xOffset, byteLength: xLen } = x;\n        const { byteOffset: yOffset, byteLength: yLen } = y;\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) { continue; }\n        chunks.splice(--i, 2, new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen));\n    }\n    return chunks;\n}\n\n/**\n * @ignore\n */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/**\n * @ignore\n */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[]] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    chunks = collapseContiguousByteRanges(chunks);\n    let offset = 0, index = -1, chunksLen = chunks.length;\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let length = typeof size === 'number' ? size : chunks.reduce((x, y) => x + y.length, 0);\n    while (++index < chunksLen) {\n        source = chunks[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                chunks[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        (buffer || (buffer = new Uint8Array(length))).set(sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), chunks.slice(index)];\n}\n\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/**\n * @ignore\n */\nexport function toArrayBufferView<T extends ArrayBufferView>(ArrayBufferViewCtor: ArrayBufferViewConstructor<T>, input: ArrayBufferViewInput): T {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = decodeUtf8(value); }\n    if (value instanceof ArrayBufferViewCtor) { return value; }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends ArrayBufferView>(ArrayCtor: ArrayBufferViewConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n        : (source instanceof SharedArrayBuffer) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends ArrayBufferView>(ArrayCtor: ArrayBufferViewConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n             : (source instanceof SharedArrayBuffer) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/**\n * @ignore\n */\nfunction decodeUtf8(chunk: string) {\n    const bytes = new Uint8Array(chunk.length);\n    for (let i = -1, n = chunk.length; ++i < n;) {\n        bytes[i] = chunk.charCodeAt(i);\n    }\n    return bytes;\n}\n\n/**\n * @ignore\n */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/**\n * @ignore\n */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromReadableDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromReadableDOMStream<T>(source));\n    },\n    fromReadableNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromReadableNodeStream(stream));\n    },\n    // @ts-ignore\n    toReadableDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toReadableDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toReadableNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toReadableNodeStream\" not available in this environment`);\n    },\n};\n\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\nasync function* fromReadableDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        source['locked'] && it.releaseLock();\n        (threw === false) && (await it['cancel']());\n    }\n}\n\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader } = this;\n        this.reader = null;\n        this.releaseLock();\n        if (reader) {\n            await reader['cancel'](reason);\n        }\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\ntype EventName = 'end' | 'error' | 'readable';\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\nasync function* fromReadableNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            const [evt, fn, closed] = onEvent(stream, 'close');\n            const destroyed = new Promise((resolve, reject) => {\n                const destroy = (stream as any)['destroy'] || ((e: T, cb: any) => cb(e));\n                destroy.call(stream, err, (e: T) => e != null ? reject(e) : resolve());\n            });\n            try {\n                await Promise.race([closed, destroyed]);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                stream['off'](evt, fn);\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\n\nexport abstract class Vector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    // @ts-ignore\n    protected bindDataAccessors(data: Data<T>) {\n        if (this.nullCount > 0) {\n            this['get'] && (this['get'] = wrapNullable1(this['get']));\n        }\n    }\n\n    public abstract readonly type: T;\n    public abstract readonly data: Data<T>;\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly TType: T['TType'];\n    public abstract readonly TArray: T['TArray'];\n    public abstract readonly TValue: T['TValue'];\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n\n    public abstract toArray(): T['TArray'];\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    public abstract slice(begin?: number, end?: number): Vector<T>;\n    public abstract concat(this: Vector<T>, ...others: Vector<T>[]): Vector<T>;\n\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nfunction wrapNullable1<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\nexport enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n\n    // These enum values are here so that TypeScript can narrow the type signatures further\n    // beyond the base Arrow types. The base Arrow types include metadata like bitWidths that\n    // impact the type signatures of the values we return. For example, the Int8Vector reads\n    // 1-byte numbers from an Int8Array, an Int32Vector reads a 4-byte number from an Int32Array,\n    // and an Int64Vector reads a pair of 4-byte lo, hi int32s, and returns them as a zero-copy\n    // slice from an underlying Int32Array. Library consumers benefit by doing this type narrowing,\n    // since we can ensure the types across all public methods are propagated and never bail to `any`.\n    // These values are _never_ actually used at runtime, and they will _never_ be written into the\n    // flatbuffers metadata of serialized Arrow IPC payloads.\n    Dictionary            = -1, // Dictionary aka Category type\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n\n// (Type as any).NONE = Type['NONE'];\n// (Type as any).Null = Type['Null'];\n// (Type as any).Int = Type['Int'];\n// (Type as any).Float = Type['Float'];\n// (Type as any).Binary = Type['Binary'];\n// (Type as any).Utf8 = Type['Utf8'];\n// (Type as any).Bool = Type['Bool'];\n// (Type as any).Decimal = Type['Decimal'];\n// (Type as any).Date = Type['Date'];\n// (Type as any).Time = Type['Time'];\n// (Type as any).Timestamp = Type['Timestamp'];\n// (Type as any).Interval = Type['Interval'];\n// (Type as any).List = Type['List'];\n// (Type as any).Struct = Type['Struct'];\n// (Type as any).Union = Type['Union'];\n// (Type as any).FixedSizeBinary = Type['FixedSizeBinary'];\n// (Type as any).FixedSizeList = Type['FixedSizeList'];\n// (Type as any).Map = Type['Map'];\n// (Type as any).Dictionary = Type['Dictionary'];\n// (Type as any).Int8 = Type['Int8'];\n// (Type as any).Int16 = Type['Int16'];\n// (Type as any).Int32 = Type['Int32'];\n// (Type as any).Int64 = Type['Int64'];\n// (Type as any).Uint8 = Type['Uint8'];\n// (Type as any).Uint16 = Type['Uint16'];\n// (Type as any).Uint32 = Type['Uint32'];\n// (Type as any).Uint64 = Type['Uint64'];\n// (Type as any).Float16 = Type['Float16'];\n// (Type as any).Float32 = Type['Float32'];\n// (Type as any).Float64 = Type['Float64'];\n// (Type as any).DateDay = Type['DateDay'];\n// (Type as any).DateMillisecond = Type['DateMillisecond'];\n// (Type as any).TimestampSecond = Type['TimestampSecond'];\n// (Type as any).TimestampMillisecond = Type['TimestampMillisecond'];\n// (Type as any).TimestampMicrosecond = Type['TimestampMicrosecond'];\n// (Type as any).TimestampNanosecond = Type['TimestampNanosecond'];\n// (Type as any).TimeSecond = Type['TimeSecond'];\n// (Type as any).TimeMillisecond = Type['TimeMillisecond'];\n// (Type as any).TimeMicrosecond = Type['TimeMicrosecond'];\n// (Type as any).TimeNanosecond = Type['TimeNanosecond'];\n// (Type as any).DenseUnion = Type['DenseUnion'];\n// (Type as any).SparseUnion = Type['SparseUnion'];\n// (Type as any).IntervalDayTime = Type['IntervalDayTime'];\n// (Type as any).IntervalYearMonth = Type['IntervalYearMonth'];\n\n// (ArrowType as any).NONE = ArrowType['NONE'];\n// (ArrowType as any).Null = ArrowType['Null'];\n// (ArrowType as any).Int = ArrowType['Int'];\n// (ArrowType as any).FloatingPoint = ArrowType['FloatingPoint'];\n// (ArrowType as any).Binary = ArrowType['Binary'];\n// (ArrowType as any).Utf8 = ArrowType['Utf8'];\n// (ArrowType as any).Bool = ArrowType['Bool'];\n// (ArrowType as any).Decimal = ArrowType['Decimal'];\n// (ArrowType as any).Date = ArrowType['Date'];\n// (ArrowType as any).Time = ArrowType['Time'];\n// (ArrowType as any).Timestamp = ArrowType['Timestamp'];\n// (ArrowType as any).Interval = ArrowType['Interval'];\n// (ArrowType as any).List = ArrowType['List'];\n// (ArrowType as any).Struct_ = ArrowType['Struct_'];\n// (ArrowType as any).Union = ArrowType['Union'];\n// (ArrowType as any).FixedSizeBinary = ArrowType['FixedSizeBinary'];\n// (ArrowType as any).FixedSizeList = ArrowType['FixedSizeList'];\n// (ArrowType as any).Map = ArrowType['Map'];\n\n// (DateUnit as any).DAY = DateUnit['DAY'];\n// (DateUnit as any).MILLISECOND = DateUnit['MILLISECOND'];\n\n// (TimeUnit as any).SECOND = TimeUnit['SECOND'];\n// (TimeUnit as any).MILLISECOND = TimeUnit['MILLISECOND'];\n// (TimeUnit as any).MICROSECOND = TimeUnit['MICROSECOND'];\n// (TimeUnit as any).NANOSECOND = TimeUnit['NANOSECOND'];\n\n// (Precision as any).HALF = Precision['HALF'];\n// (Precision as any).SINGLE = Precision['SINGLE'];\n// (Precision as any).DOUBLE = Precision['DOUBLE'];\n\n// (UnionMode as any).Sparse = UnionMode['Sparse'];\n// (UnionMode as any).Dense = UnionMode['Dense'];\n\n// (VectorType as any).OFFSET = VectorType['OFFSET'];\n// (VectorType as any).DATA = VectorType['DATA'];\n// (VectorType as any).VALIDITY = VectorType['VALIDITY'];\n// (VectorType as any).TYPE = VectorType['TYPE'];\n\n// (IntervalUnit as any).YEAR_MONTH = IntervalUnit['YEAR_MONTH'];\n// (IntervalUnit as any).DAY_TIME = IntervalUnit['DAY_TIME'];\n\n// (MessageHeader as any).NONE = MessageHeader['NONE'];\n// (MessageHeader as any).Schema = MessageHeader['Schema'];\n// (MessageHeader as any).DictionaryBatch = MessageHeader['DictionaryBatch'];\n// (MessageHeader as any).RecordBatch = MessageHeader['RecordBatch'];\n// (MessageHeader as any).Tensor = MessageHeader['Tensor'];\n\n// (MetadataVersion as any).V1 = MetadataVersion['V1'];\n// (MetadataVersion as any).V2 = MetadataVersion['V2'];\n// (MetadataVersion as any).V3 = MetadataVersion['V3'];\n// (MetadataVersion as any).V4 = MetadataVersion['V4'];\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { Vector as VType } from './interfaces';\nimport { ArrayBufferViewConstructor } from './interfaces';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type, ArrowType,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\nexport type TimeBitWidth = 32 | 64;\nexport type IntBitWidth = 8 | 16 | 32 | 64;\nexport type IsSigned = { 'true': true; 'false': false };\n\nexport type RowLike<T extends { [key: string]: DataType; }> =\n      { readonly length: number }\n    & ( Iterable<T[keyof T]['TValue']> )\n    & { [P in keyof T]: T[P]['TValue'] }\n    & { get<K extends keyof T>(key: K): T[K]['TValue']; }\n    ;\n\nexport interface DataType<TType extends Type = Type> {\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n}\n\nexport class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.TType === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int             { return x && x.TType === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.TType === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.TType === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.TType === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.TType === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.TType === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.TType === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time            { return x && x.TType === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp       { return x && x.TType === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval        { return x && x.TType === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.TType === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.TType === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union           { return x && x.TType === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.TType === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.TType === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.TType === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.TType === Type.Dictionary;      }\n\n    public get TType() { return this._TType; }\n    public get children() { return this._children; }\n\n    constructor(protected _TType: TType = <any> Type.NONE,\n                protected _children?: Field<TChildren[keyof TChildren]>[]\n                ) {}\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    constructor() {\n        super(Type.Null);\n    }\n    public toString() { return `Null`; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number;            };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number;            };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number;            };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: Int32Array;        };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number;            };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number;            };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number;            };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: Uint32Array;       };\n};\n\nexport interface Int<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\nexport class Int<T extends Ints = Ints> extends DataType<T> {\n    constructor(protected _isSigned: IType[T]['isSigned'],\n                protected _bitWidth: IType[T]['bitWidth']) {\n        super(Type.Int as T);\n    }\n    public get isSigned() { return this._isSigned; }\n    public get bitWidth() { return this._bitWidth; }\n    public get ArrayType(): ArrayBufferViewConstructor<IType[T]['TArray']> {\n        switch (this._bitWidth) {\n            case  8: return (this._isSigned ?  Int8Array :  Uint8Array) as any;\n            case 16: return (this._isSigned ? Int16Array : Uint16Array) as any;\n            case 32: return (this._isSigned ? Int32Array : Uint32Array) as any;\n            case 64: return (this._isSigned ? Int32Array : Uint32Array) as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this._isSigned ? `I` : `Ui`}nt${this._bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int) => {\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int.prototype);\n}\n\nexport class Int8 extends Int<Type.Int8> { constructor() { super(true, 8); } }\nexport class Int16 extends Int<Type.Int16> { constructor() { super(true, 16); } }\nexport class Int32 extends Int<Type.Int32> { constructor() { super(true, 32); } }\nexport class Int64 extends Int<Type.Int64> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int<Type.Uint8> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int<Type.Uint16> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int<Type.Uint32> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int<Type.Uint64> { constructor() { super(false, 64); } }\n\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float32Array;  TValue: number; };\n};\n\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(protected _precision: Precision) {\n        super(Type.Float as T);\n    }\n    public get precision() { return this._precision; }\n    // @ts-ignore\n    public get ArrayType(): ArrayBufferViewConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array as any;\n            case Precision.SINGLE: return Float32Array as any;\n            case Precision.DOUBLE: return Float64Array as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super(Type.Binary);\n    }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: typeof Uint8Array; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super(Type.Utf8);\n    }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: typeof Uint8Array; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super(Type.Bool);\n    }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: typeof Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(protected _scale: number,\n                protected _precision: number) {\n        super(Type.Decimal);\n    }\n    public get scale() { return this._scale; }\n    public get precision() { return this._precision; }\n    public toString() { return `Decimal[${this._precision}e${this._scale > 0 ? `+` : ``}${this._scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/* tslint:disable:class-name */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: typeof Int32Array; }\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(protected _unit: DateUnit) {\n        super(Type.Date as T);\n    }\n    public get unit() { return this._unit; }\n    public toString() { return `Date${(this._unit + 1) * 32}<${DateUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Uint32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;              };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;              };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Uint32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Uint32Array;         };\n};\n\nexport interface Time<T extends Times = Times> extends DataType<T> { TArray: Uint32Array; TValue: TimesType[T]['TValue']; ArrayType: typeof Uint32Array; }\nexport class Time<T extends Times = Times> extends DataType<T> {\n    constructor(protected _unit: TimesType[T]['unit'],\n                protected _bitWidth: TimeBitWidth) {\n        super(Type.Time as T);\n    }\n    public get unit() { return this._unit; }\n    public get bitWidth() { return this._bitWidth; }\n    public toString() { return `Time${this._bitWidth}<${TimeUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time.prototype);\n}\n\nexport class TimeSecond extends Time<Type.TimeSecond> { constructor(bitWidth: TimeBitWidth) { super(TimeUnit.SECOND, bitWidth); } }\nexport class TimeMillisecond extends Time<Type.TimeMillisecond> { constructor(bitWidth: TimeBitWidth) { super(TimeUnit.MILLISECOND, bitWidth); } }\nexport class TimeMicrosecond extends Time<Type.TimeMicrosecond> { constructor(bitWidth: TimeBitWidth) { super(TimeUnit.MICROSECOND, bitWidth); } }\nexport class TimeNanosecond extends Time<Type.TimeNanosecond> { constructor(bitWidth: TimeBitWidth) { super(TimeUnit.NANOSECOND, bitWidth); } }\n\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\nexport interface Timestamp<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: typeof Int32Array; }\nexport class Timestamp<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(protected _unit: TimeUnit, protected _timezone?: string | null) {\n        super(Type.Timestamp as T);\n    }\n    public get unit() { return this._unit; }\n    public get timezone() { return this._timezone; }\n    public toString() { return `Timestamp<${TimeUnit[this._unit]}${this._timezone ? `, ${this._timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp.prototype);\n}\n\nexport class TimestampSecond extends Timestamp<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\nexport class TimestampMillisecond extends Timestamp<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\nexport class TimestampMicrosecond extends Timestamp<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\nexport class TimestampNanosecond extends Timestamp<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\nexport interface Interval<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: typeof Int32Array; }\nexport class Interval<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(protected _unit: IntervalUnit) {\n        super(Type.Interval as T);\n    }\n    public get unit() { return this._unit; }\n    public toString() { return `Interval<${IntervalUnit[this._unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval.prototype);\n}\n\nexport class IntervalDayTime extends Interval<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\nexport class IntervalYearMonth extends Interval<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\nexport interface List<T extends DataType = any> extends DataType<Type.List>  { TArray: IterableArrayLike<T>; TValue: VType<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(protected _children: Field<T>[]) {\n        super(Type.List, _children);\n    }\n    public toString() { return `List<${this.valueType}>`; }\n    public get children() { return this._children; }\n    public get valueType(): T { return this._children[0].type as T; }\n    public get valueField(): Field<T> { return this._children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct<T extends { [key: string]: DataType; } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\nexport class Struct<T extends { [key: string]: DataType; } = any> extends DataType<Type.Struct, T> {\n    constructor(protected _children: Field<T[keyof T]>[]) {\n        super(Type.Struct, _children);\n    }\n    public get children() { return this._children; }\n    public toString() { return `Struct<${this._children.map((f) => f.type).join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\nexport interface Union<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any[]; }\nexport class Union<T extends Unions = Unions> extends DataType<T> {\n    protected _typeIdToChildIndex: Record<Type, number>;\n    constructor(protected _mode: UnionMode,\n                protected _typeIds: ArrowType[],\n                protected _children: Field<any>[]) {\n        super(Type.Union as T, _children);\n        this._typeIdToChildIndex = (_typeIds || []).reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as Record<Type, number>);\n    }\n    public get mode() { return this._mode; }\n    public get typeIds() { return this._typeIds; }\n    public get children() { return this._children; }\n    public get typeIdToChildIndex() { return this._typeIdToChildIndex; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this._children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union) => {\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union.prototype);\n}\n\nexport class DenseUnion extends Union<Type.DenseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\nexport class SparseUnion extends Union<Type.SparseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: typeof Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(protected _byteWidth: number) {\n        super(Type.FixedSizeBinary);\n    }\n    public get byteWidth() { return this._byteWidth; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: VType<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    constructor(protected _listSize: number,\n                protected _children: Field<T>[]) {\n        super(Type.FixedSizeList, _children);\n    }\n    public get listSize() { return this._listSize; }\n    public get children() { return this._children; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this._listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Map_<T extends { [key: string]: DataType; } = any> extends DataType<Type.Map> { TArray: Uint8Array; TValue: RowLike<T>; dataTypes: T; }\nexport class Map_<T extends { [key: string]: DataType; } = any> extends DataType<Type.Map, T> {\n    constructor(protected _children: Field<T[keyof T]>[],\n                protected _keysSorted: boolean = false) {\n        super(Type.Map, _children);\n    }\n    public get children() { return this._children; }\n    public get keysSorted() { return this._keysSorted; }\n    public toString() { return `Map<${this.children.join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    protected _id: number;\n    protected _indices: TKey;\n    protected _dictionary: T;\n    protected _isOrdered: boolean;\n    // @ts-ignore;\n    public dictionaryVector: Vector<T>;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null, dictionaryVector?: Vector<T>) {\n        super(Type.Dictionary);\n        this._indices = indices;\n        this._dictionary = dictionary;\n        this._isOrdered = isOrdered || false;\n        this.dictionaryVector = dictionaryVector!;\n        this._id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get id() { return this._id; }\n    public get indices() { return this._indices; }\n    public get dictionary() { return this._dictionary; }\n    public get isOrdered() { return this._isOrdered; }\n    public set children(_: T['children']) {}\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType, Dictionary } from './type';\nimport { Vector as VType } from './interfaces';\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(vectors: VType<T[keyof T]>[], names: (keyof T)[] = []) {\n        return new Schema<T>(vectors.map((v, i) => new Field('' + (names[i] || i), v.type)));\n    }\n\n    protected _fields: Field[];\n    protected _metadata: Map<string, string>;\n    protected _dictionaries: Map<number, DataType>;\n    protected _dictionaryFields: Map<number, Field<Dictionary>[]>;\n    public get fields(): Field[] { return this._fields; }\n    public get metadata(): Map<string, string> { return this._metadata; }\n    public get dictionaries(): Map<number, DataType> { return this._dictionaries; }\n    public get dictionaryFields(): Map<number, Field<Dictionary>[]> { return this._dictionaryFields; }\n\n    constructor(fields: Field[],\n                metadata?: Map<string, string>,\n                dictionaries?: Map<number, DataType>,\n                dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n        this._fields = fields;\n        this._metadata = metadata || Schema.prototype._metadata;\n        if (!dictionaries || !dictionaryFields) {\n            ({ dictionaries, dictionaryFields } = generateDictionaryMap(\n                fields, dictionaries || new Map(), dictionaryFields || new Map()\n            ));\n        }\n        this._dictionaries = dictionaries;\n        this._dictionaryFields = dictionaryFields;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public static [Symbol.toStringTag] = ((prototype: Schema) => {\n        (prototype as any)._metadata = Object.freeze(new Map());\n        return 'Schema';\n    })(Schema.prototype);\n}\n\nexport class Field<T extends DataType = DataType> {\n    protected _type: T;\n    protected _name: string;\n    protected _nullable: true | false;\n    protected _metadata?: Map<string, string> | null;\n    constructor(name: string, type: T, nullable: true | false = false, metadata?: Map<string, string> | null) {\n        this._name = name;\n        this._type = type;\n        this._nullable = nullable;\n        this._metadata = metadata;\n    }\n    public get type() { return this._type; }\n    public get name() { return this._name; }\n    public get typeId() { return this.type.TType; }\n    public get nullable() { return this._nullable; }\n    public get metadata() { return this._metadata; }\n    public get [Symbol.toStringTag](): string { return 'Field'; }\n    public get indices() {\n        return DataType.isDictionary(this.type) ? this.type.indices : this.type;\n    }\n    public toString() { return `${this.name}: ${this.type}`; }\n}\n\nfunction generateDictionaryMap(fields: Field[], dictionaries: Map<number, DataType>, dictionaryFields: Map<number, Field<Dictionary>[]>) {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaryFields.get(type.id)) {\n                dictionaryFields.set(type.id, []);\n            }\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n                dictionaryFields.get(type.id)!.push(field as any);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children) {\n            generateDictionaryMap(type.children, dictionaries, dictionaryFields);\n        }\n    }\n\n    return { dictionaries, dictionaryFields };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\nexport class Footer {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n    \n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n    \n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n    \n        const dictionaryBatchesOffset = b.endVector();\n    \n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n    \n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nclass OffHeapFooter extends Footer {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @ignore\n */\nexport function align(value: number, alignment: number) {\n    return value + padding(value, alignment);\n}\n\n/**\n * @ignore\n */\nexport function padding(value: number, alignment: number) {\n    return (value % alignment === 0 ? 0 : alignment - value % alignment);\n}\n\n/**\n * @ignore\n */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/**\n * @ignore\n */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/**\n * @ignore\n */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/**\n * @ignore\n */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        bytes.set((offset % 8 === 0)\n            // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n            ? bitmap.subarray(offset >> 3)\n            // Otherwise iterate each bit from the offset and return a new one\n            : packBools(iterateBits(bitmap, offset, length, null, getBool)));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/**\n * @ignore\n */\nexport function packBools(values: Iterable<any>) {\n    let n = 0, i = 0;\n    let xs: number[] = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do { xs[i] = 0; } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n\n/**\n * @ignore\n */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/**\n * @ignore\n */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/**\n * @ignore\n */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/**\n * @ignore\n */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { popcnt_bit_range } from './util/bit';\nimport { toArrayBufferView } from './util/buffer';\nimport { Type, VectorType as BufferType, UnionMode } from './enum';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Array::null_count is called the\n// first time, the null count will be computed. See ARROW-33\nexport type kUnknownNullCount = -1;\nexport const kUnknownNullCount = -1;\n\nexport type NullBuffer = Uint8Array | null | undefined;\nexport type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number>;\nexport type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number>;\n\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]?: Int32Array;\n        [BufferType.DATA]?: T['TArray'];\n    [BufferType.VALIDITY]?: Uint8Array;\n        [BufferType.TYPE]?: T['TArray'];\n}\n\nexport class Data<T extends DataType = DataType> {\n\n    protected _type: T;\n    protected _length: number;\n    protected _offset: number;\n\n    // @ts-ignore\n    protected _childData: Data[];\n    protected _buffers = [] as Buffers<T>;\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get offset() { return this._offset; }\n    public get childData() { return this._childData; }\n\n    public get TType() { return this.type.TType; }\n    public get TArray() { return this.type.TArray; }\n    public get TValue() { return this.type.TValue; }\n    public get ArrayType() { return this.type.ArrayType; }\n\n    public get values() { return this._buffers[BufferType.DATA]!; }\n    public get typeIds() { return this._buffers[BufferType.TYPE]!; }\n    public get nullBitmap() { return this._buffers[BufferType.VALIDITY]!; }\n    public get valueOffsets() { return this._buffers[BufferType.OFFSET]!; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount === kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Buffers<T>, childData?: (Data | Vector)[]) {\n        this._type = type;\n        this._offset = Math.floor(Math.max(offset || 0, 0));\n        this._length = Math.floor(Math.max(length || 0, 0));\n        this._buffers = Object.assign([], buffers) as Buffers<T>;\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this._childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this._buffers, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const buffers = this.sliceBuffers(offset, length);\n        const childData = this.sliceChildren(offset, length);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers, childData);\n    }\n\n    protected sliceBuffers(offset: number, length: number): Buffers<T> {\n        let arr: any, buffers = Object.assign([], this._buffers) as Buffers<T>;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = this.sliceData(arr, offset, length));\n        return buffers;\n    }\n\n    protected sliceChildren(offset: number, length: number): Data[] {\n        // Only slice children if this isn't variable width data\n        if (!this.valueOffsets) {\n            return this.childData.map((child) => child.slice(offset, length));\n        }\n        return this.childData;\n    }\n\n    protected sliceData(data: T['TArray'] & ArrayBufferView, offset: number, length: number) {\n        // Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        return this.type.TType === Type.Bool ? data : data.subarray(offset, offset + length);\n    }\n\n    protected sliceOffsets(valueOffsets: Int32Array, offset: number, length: number) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        });\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView<T['TArray']>(type.indices.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, childData: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets)\n        }, childData);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, childData: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, childData: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, childData: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: Uint8Array, valueOffsetsOrChildData: ValueOffsetsBuffer | (Data | Vector)[], childData?: (Data | Vector)[]) {\n        const buffers = {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.TYPE]: toArrayBufferView(type.ArrayType, typeIds)\n        } as any;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildData as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toArrayBufferView(Int32Array, <ValueOffsetsBuffer> valueOffsetsOrChildData);\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n}\n\n// (Data as any).prototype._type = Object.freeze({});\n// (Data as any).prototype._buffers = Object.freeze([]);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport function leftPad(str: string, fill: string, n: number) {\n    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n}\n\nexport function valueToString(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { MapVector } from '../vector/map';\nimport { DataType, RowLike } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { StructVector } from '../vector/struct';\n\nconst columnDescriptor = { enumerable: true, configurable: false, get: () => {} };\nconst lengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };\nconst rowIndexDescriptor = { writable: false, enumerable: false, configurable: true, value: null as any };\nconst rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null as any };\nconst row = { parent: rowParentDescriptor, rowIndex: rowIndexDescriptor };\n\nexport class Row<T extends { [key: string]: DataType }> implements Iterable<T[keyof T]['TValue']> {\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType }>(schemaOrFields: T | Field[], fieldsAreEnumerable = false): RowLike<T> & Row<T> {\n        let schema: T, fields: Field[];\n        if (Array.isArray(schemaOrFields)) {\n            fields = schemaOrFields;\n        } else {\n            schema = schemaOrFields;\n            fieldsAreEnumerable = true;\n            fields = Object.keys(schema).map((x) => new Field(x, schema[x]));\n        }\n        return new Row<T>(fields, fieldsAreEnumerable) as RowLike<T> & Row<T>;\n    }\n    // @ts-ignore\n    private parent: TParent;\n    // @ts-ignore\n    private rowIndex: number;\n    // @ts-ignore\n    public readonly length: number;\n    private constructor(fields: Field[], fieldsAreEnumerable: boolean) {\n        lengthDescriptor.value = fields.length;\n        Object.defineProperty(this, 'length', lengthDescriptor);\n        fields.forEach((field, columnIndex) => {\n            columnDescriptor.get = this._bindGetter(columnIndex);\n            // set configurable to true to ensure Object.defineProperty\n            // doesn't throw in the case of duplicate column names\n            columnDescriptor.configurable = true;\n            columnDescriptor.enumerable = fieldsAreEnumerable;\n            Object.defineProperty(this, field.name, columnDescriptor);\n            columnDescriptor.configurable = false;\n            columnDescriptor.enumerable = !fieldsAreEnumerable;\n            Object.defineProperty(this, columnIndex, columnDescriptor);\n            columnDescriptor.get = null as any;\n        });\n    }\n    *[Symbol.iterator](this: RowLike<T>) {\n        for (let i = -1, n = this.length; ++i < n;) {\n            yield this[i];\n        }\n    }\n    private _bindGetter(colIndex: number) {\n        return function (this: Row<T>) {\n            let child = this.parent.getChildAt(colIndex);\n            return child ? child.get(this.rowIndex) : null;\n        };\n    }\n    public get<K extends keyof T>(key: K) { return (this as any)[key] as T[K]['TValue']; }\n    public bind<TParent extends MapVector<T> | StructVector<T>>(parent: TParent, rowIndex: number) {\n        rowIndexDescriptor.value = rowIndex;\n        rowParentDescriptor.value = parent;\n        const bound = Object.create(this, row);\n        rowIndexDescriptor.value = null;\n        rowParentDescriptor.value = null;\n        return bound as RowLike<T>;\n    }\n    public toJSON(): any {\n        return DataType.isStruct(this.parent.type) ? [...this] :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = (this as any)[prop]) && props || props\n            }, {});\n    }\n    public toString() {\n        return DataType.isStruct(this.parent.type) ?\n            [...this].map((x) => valueToString(x)).join(', ') :\n            Object.getOwnPropertyNames(this).reduce((props: any, prop: string) => {\n                return (props[prop] = valueToString((this as any)[prop])) && props || props\n            }, {});\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\ntype RangeLike = { length: number; stride?: number };\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { clampRange } from '../util/vector';\n\ntype SearchContinuation<T extends ChunkedVector> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\nexport class ChunkedVector<T extends DataType = any> extends Vector<T> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: Vector<T>[]) {\n        return vectors.reduce(function flatten(xs: any[], x: any): any[] {\n            return x instanceof ChunkedVector ? x.chunks.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x: any): x is Vector<T> => x instanceof Vector);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: Vector<T>[]): Vector<T> {\n        return new ChunkedVector(vectors[0].type, ChunkedVector.flatten(...vectors));\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _numChildren: number;\n    protected _chunks: Vector<T>[];\n\n    protected _nullCount: number = -1;\n    protected _children?: ChunkedVector[];\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type:T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    protected bindDataAccessors() { /* do nothing */ }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get TType() { return this._type.TType; }\n    public get TArray() { return this._type.TArray; }\n    public get TValue() { return this._type.TValue; }\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n\n    public get data() { return this._chunks[0] ? this._chunks[0].data : <any> null; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public concat(...others: Vector<T>[]): Vector<T> {\n        return ChunkedVector.concat<T>(this, ...others);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): ChunkedVector<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: ChunkedVector<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new ChunkedVector<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<ChunkedVector<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<ChunkedVector<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let { ArrayType } = this._type;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new (ArrayType as any)(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    public slice(begin?: number, end?: number): ChunkedVector<T> {\n        return clampRange(this, begin, end, this.sliceInternal);\n    }\n\n    protected getInternal({ chunks }: ChunkedVector<T>, i: number, j: number) { return chunks[i].get(j); }\n    protected isValidInternal({ chunks }: ChunkedVector<T>, i: number, j: number) { return chunks[i].isValid(j); }\n    protected indexOfInternal({ chunks }: ChunkedVector<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected sliceInternal(column: ChunkedVector<T>, offset: number, length: number) {\n        const slices: Vector<T>[] = [];\n        const { type, chunks, _chunkOffsets: chunkOffsets } = column;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= offset + length) { continue; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= offset && (chunkOffset + chunkLength) <= offset + length) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - chunkOffset);\n            const end = begin + Math.min(chunkLength - begin, (offset + length) - chunkOffset);\n            slices.push(chunk.slice(begin, end) as Vector<T>);\n        }\n        return new ChunkedVector(type, slices);\n    }\n}\n\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset - 1;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[++idx] = src[i];\n    }\n    return idx;\n};\n\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { ChunkedVector } from './chunked';\nimport { clampRange } from '../util/vector';\n\nexport abstract class BaseVector<T extends DataType = any> extends Vector<T> {\n\n    // @ts-ignore\n    protected _data: Data<T>;\n    protected _stride: number = 1;\n    protected _numChildren: number = 0;\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[], stride?: number) {\n        super();\n        // const VectorCtor = getVectorConstructor.getVisitFn(data.type)();\n        // // Return the correct Vector subclass based on the Arrow Type\n        // if (VectorCtor && !(this instanceof VectorCtor)) {\n        //     return Reflect.construct(BaseVector, arguments, VectorCtor);\n        // }\n        this._children = children;\n        this.bindDataAccessors(this._data = data);\n        this._numChildren = data.childData.length;\n        this._stride = Math.floor(Math.max(stride || 1, 1));\n    }\n\n    public get data() { return this._data; }\n    public get stride() { return this._stride; }\n    public get numChildren() { return this._numChildren; }\n\n    public get type() { return this.data.type; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get nullCount() { return this.data.nullCount; }\n    public get VectorName() { return this.constructor.name; }\n    public get TType(): T['TType'] { return this.data.TType; }\n    public get TArray(): T['TArray'] { return this.data.TArray; }\n    public get TValue(): T['TValue'] { return this.data.TValue; }\n    public get ArrayType(): T['ArrayType'] { return this.data.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children, stride = this.stride) {\n        return Vector.new<R>(data, children, stride);\n    }\n\n    public concat(...others: Vector<T>[]): Vector<T> {\n        return ChunkedVector.concat<T>(this, ...others) as Vector<T>;\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    // @ts-ignore\n    public toJSON(): any {}\n\n    public slice(begin?: number, end?: number): this {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this.sliceInternal) as any;\n    }\n\n    protected sliceInternal(vector: BaseVector<T>, offset: number, length: number) {\n        const stride = vector.stride;\n        return vector.clone(vector.data.slice(offset * stride, (length - offset) * stride));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    public rowProxy: Row<T> = Row.new<T>(this.type.children || [], false);\n    public asMap(keysSorted: boolean = false) {\n        return Vector.new(this.data.clone(new Map_(this.type.children, keysSorted)));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Schema, Field } from './schema';\nimport { DataType, Struct } from './type';\nimport { StructVector } from './vector/struct';\nimport { Vector as VType } from './interfaces';\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any> extends Vector<Struct<T>> {\n\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(vectors: VType<T[keyof T]>[], names: (keyof T)[] = []) {\n        return new RecordBatch(\n            Schema.from(vectors, names),\n            vectors.reduce((len, vec) => Math.max(len, vec.length), 0),\n            vectors\n        );\n    }\n  \n    protected _schema: Schema;\n    private impl: StructVector<T>;\n\n    constructor(schema: Schema<T>, numRows: number, childData: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        super();\n        this._schema = args[0];\n        let data: Data<Struct<T>>;\n        let children: Vector[] | undefined;\n        if (typeof args[1] === 'number') {\n            const fields = this.schema.fields as Field<T[keyof T]>[];\n            const [, numRows, childData] = args as [Schema<T>, number, Data[]];\n            data = Data.Struct(new Struct<T>(fields), 0, numRows, 0, null, childData);\n        } else {\n            [, data, children] = (args as [Schema<T>, Data<Struct<T>>, Vector[]?]);\n        }\n        this.impl = new StructVector(data, children);\n    }\n\n    public clone<R extends { [key: string]: DataType } = any>(data: Data<Struct<R>>, children = (this.impl as any).children) {\n        return new RecordBatch<R>(this.schema, data, children);\n    }\n\n    public get schema() { return this._schema; }\n    public get type() { return this.impl.type; }\n    public get data() { return this.impl.data; }\n    public get length() { return this.impl.length; }\n    public get stride() { return this.impl.stride; }\n    public get numCols() { return this.schema.fields.length; }\n    public get rowProxy() { return this.impl.rowProxy; }\n    public get nullCount() { return this.impl.nullCount; }\n    public get numChildren() { return this.impl.numChildren; }\n\n    public get TType() { return this.impl.TType; }\n    public get TArray() { return this.impl.TArray; }\n    public get TValue() { return this.impl.TValue; }\n    public get ArrayType() { return this.impl.ArrayType; }\n\n    public get(index: number): Struct<T>['TValue'] | null {\n        return this.impl.get(index);\n    }\n    public set(index: number, value: Struct<T>['TValue'] | null) {\n        this.impl.set(index, value);\n    }\n    public isValid(index: number) { return this.impl.isValid(index); }\n    public indexOf(value: Struct<T>['TValue'] | null, fromIndex?: number) { return this.impl.indexOf(value, fromIndex); }\n\n    public toArray() { return this.impl.toArray(); }\n    public [Symbol.iterator]() { return this.impl[Symbol.iterator](); }\n\n    public slice(begin?: number, end?: number): RecordBatch<T> {\n        const { length, childData } = this.impl.slice(begin, end).data;\n        return new RecordBatch<T>(this.schema, length, childData);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Vector<Struct<T>> {\n        return this.impl.concat(...others.map((x) => x instanceof RecordBatch ? x.impl : x) as Vector<Struct<T>>[]);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number) { return this.impl.getChildAt<R>(index); }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const fields = this.schema.fields;\n        const schema = this.schema.select(...columnNames);\n        const childNames = columnNames.reduce((xs, x) => (xs[x] = true) && xs, <any> {});\n        const childData = this.data.childData.filter((_, i) => childNames[fields[i].name]);\n        const structData = Data.Struct(new Struct(schema.fields), 0, this.length, 0, null, childData);\n        return new RecordBatch<{ [P in K]: T[P] }>(schema, structData);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/**\n * @ignore\n */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays((this.values as any[]).slice())[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/**\n * @ignore\n */\nexport class ByteStream {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array | null>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/**\n * @ignore\n */\nexport class AsyncByteStream implements Readable<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (!source) {}\n        else if (source instanceof AsyncByteStream) { this.source = (source as AsyncByteStream).source; }\n        else if (source instanceof AsyncByteQueue) { this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source)); }\n        else if (isReadableNodeStream(source)) { this.source = new AsyncByteStreamSource(streamAdapters.fromReadableNodeStream(source)); }\n        else if (isFetchResponse(source)) { this.source = new AsyncByteStreamSource(streamAdapters.fromReadableDOMStream(source.body!)); }\n        else if (isIterable<ArrayBufferViewInput>(source)) { this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source)); }\n        else if (isPromise<ArrayBufferViewInput>(source)) { this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source)); }\n        else if (isAsyncIterable<ArrayBufferViewInput>(source)) { this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source)); }\n        else if (isReadableDOMStream<ArrayBufferViewInput>(source)) { this.source = new AsyncByteStreamSource(streamAdapters.fromReadableDOMStream(source)); }\n    }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\n\n/**\n * @ignore\n */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: Uint8Array, byteLength = buffer.byteLength) {\n        super();\n        this.buffer = buffer;\n        this.size = byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/**\n * @ignore\n */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    public size: number;\n    public position: number = 0;\n    protected file: FileHandle | null;\n    constructor(file: FileHandle, byteLength: number) {\n        super();\n        this.file = file;\n        this.size = byteLength;\n        if ((typeof byteLength) !== 'number') {\n            (async () => this.size = (await file.stat()).size)();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        const { file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        const { file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this.file; this.file = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(node: any, ...args: any[]) {\n        return this.getVisitFn(node, false).call(this, node, ...args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.TType) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.TType]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst carryBit16 = 1 << 16;\n\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { TextEncoder } from 'text-encoding-utf-8';\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\nconst utf8Encoder = new TextEncoder('utf-8');\n\nexport interface VectorLoader extends Visitor {\n    visitMany <T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n    visit     <T extends DataType>(node: T                ): Data<T>;\n}\n\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[]) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n    }\n\n    public visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[] {\n        return nodes.map((node) => this.visit(node instanceof Field ? node.type : node));\n    }\n\n    public visitNull                 <T extends type.Null>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Null(type, 0, length, nullCount, this.readNullBitmap(type, nullCount));                                                                                }\n    public visitBool                 <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt                  <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat                <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8                 <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary               <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary      <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate                 <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp            <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime                 <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal              <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList                 <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visitMany(type.children));                         }\n    public visitStruct               <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion                <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion           <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion          <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary           <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices));                                                   }\n    public visitInterval             <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList        <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitMap                  <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n}\n\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[]) {\n        super(new Uint8Array(0), nodes, buffers);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int8Array, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return utf8Encoder.encode((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from '../../fb/Schema';\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries, dictionaryFields\n    );\n}\n\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries, dictionaryFields));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':    return new DataType();\n        case 'null':    return new Null();\n        case 'binary':  return new Binary();\n        case 'utf8':    return new Utf8();\n        case 'bool':    return new Bool();\n        case 'list':    return new List(children || []);\n        case 'struct': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []) as Type[], children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], children || []);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_(children || [], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n */\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n */\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n */\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n */\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n */\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        // return null;\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        // return null;\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map(), dictionaryFields: Map<number, Field<Dictionary>[]> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries, dictionaryFields);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries, dictionaryFields);\n}\n\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    return Array.from(\n        { length: batch.nodesLength() },\n        (_, i) => batch.nodes(i)!\n    ).filter(Boolean).map(FieldNode.decode);\n}\n\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    return Array.from(\n        { length: batch.buffersLength() },\n        (_, i) => batch.buffers(i)!\n    ).filter(Boolean).map(v3Compat(version, BufferRegion.decode));\n}\n\nfunction v3Compat(version: MetadataVersion, decode: (buffer: _Buffer) => BufferRegion) {\n    return (buffer: _Buffer, i: number) => {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        return decode(buffer);\n    };\n}\n\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n    return Array.from(\n        { length: schema.fieldsLength() },\n        (_, i) => schema.fields(i)!\n    ).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\n\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>): Field[] {\n    return Array.from(\n        { length: field.childrenLength() },\n        (_, i) => field.children(i)!\n    ).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\n\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>, dictionaryFields?: Map<number, Field<Dictionary>[]>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n    let dictField: Field<Dictionary>;\n\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries, dictionaryFields));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.get(id)!.push(field = dictField);\n    }\n    return field || null;\n}\n\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new DataType();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List(children || []);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), (t.typeIdsArray() || []) as Type[], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), children || []);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_(children || [], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.TType;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\nconst invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\nconst nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\nconst invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\nconst invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        return buf.byteOffset % 8 === 0 ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : (isFileHandle(source) && typeof byteLength === 'number')\n            ? new AsyncRandomAccessFile(source, byteLength)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        return buf.byteOffset % 8 === 0 ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0))!;\n        return { done: len <= 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json, _batchIndex, _dictionaryIndex } = this;\n        const numBatches = _json.batches.length;\n        const numDictionaries = _json.dictionaries.length;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { value: message, done: _batchIndex >= numBatches && _dictionaryIndex >= numDictionaries };\n        }\n        if (_dictionaryIndex < numDictionaries) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (_batchIndex < numBatches) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\nexport const PADDING = 4;\nexport const MAGIC_STR = 'ARROW1';\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function isValidArrowFile(bb: ByteBuffer) {\n    let fileLength = bb.capacity(), footerLength: number, lengthOffset: number;\n    if ((fileLength < magicX2AndPadding /*                                  Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        (/*                                                                 Invalid footer length  */\n        (footerLength = bb.readInt32(lengthOffset = fileLength - magicAndPadding)) < 1 &&\n        (footerLength + lengthOffset > fileLength))) {\n        return false;\n    }\n    return true;\n}\n\nexport const magicLength = MAGIC.length;\nexport const magicAndPadding = magicLength + PADDING;\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { Vector } from '../vector';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { ArrowJSON, ArrowJSONLike, FileHandle, ReadableInterop, ITERATOR_DONE } from '../io/interfaces';\nimport { isPromise, isArrowJSON, isFileHandle, isFetchResponse, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\nimport { MessageReader, AsyncMessageReader, checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding, JSONMessageReader } from './message';\n\nexport type FromArg0 = ArrowJSONLike;\nexport type FromArg1 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\nexport type FromArg2 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\nexport type FromArg3 = NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\nexport type FromArg4 = Response | FileHandle | PromiseLike<FileHandle> | PromiseLike<Response>;\nexport type FromArgs = FromArg0 | FromArg3 | FromArg1 | FromArg2 | FromArg4;\n\nexport abstract class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected constructor(protected impl: IRecordBatchReaderImpl<T>) { super(); }\n\n    public get closed() { return this.impl.closed; }\n    public get schema() { return this.impl.schema; }\n    public get autoClose() { return this.impl.autoClose; }\n    public get dictionaries() { return this.impl.dictionaries; }\n    public get numDictionaries() { return this.impl.numDictionaries; }\n    public get numRecordBatches() { return this.impl.numRecordBatches; }\n\n    public next(value?: any) { return this.impl.next(value); }\n    public throw(value?: any) { return this.impl.throw(value); }\n    public return(value?: any) { return this.impl.return(value); }\n    public reset(schema?: Schema<T> | null) { this.impl.reset(schema); return this; }\n\n    public abstract cancel(): void | Promise<void>;\n    public abstract open(autoClose?: boolean): this | Promise<this>;\n    public abstract [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n    public abstract [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n\n    public toReadableDOMStream() { return streamAdapters.toReadableDOMStream(this); }\n    public toReadableNodeStream() { return streamAdapters.toReadableNodeStream(this, { objectMode: true }); }\n\n    public isSync(): this is RecordBatchFileReader<T> | RecordBatchStreamReader<T> {\n        return (this instanceof RecordBatchFileReader) || (this instanceof RecordBatchStreamReader);\n    }\n    public isAsync(): this is AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T> {\n        return (this instanceof AsyncRecordBatchFileReader) || (this instanceof AsyncRecordBatchStreamReader);\n    }\n    public isFile(): this is RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T> {\n        return (this instanceof RecordBatchFileReader) || (this instanceof AsyncRecordBatchFileReader);\n    }\n    public isStream(): this is RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T> {\n        return (this instanceof RecordBatchStreamReader) || (this instanceof AsyncRecordBatchStreamReader);\n    }\n\n    /** @nocollapse */\n    public static throughNode(): import('stream').Duplex { throw new Error(`\"asNodeStream\" not available in this environment`); }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"asDOMStream\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return RecordBatchReader.fromJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return RecordBatchReader.fromFileHandle<T>(source);\n        } else if (isPromise<FromArg1>(source)) {\n            return (async () => await RecordBatchReader.from<T>(await source))();\n        } else if (isPromise<FileHandle | Response>(source)) {\n            return (async () => await RecordBatchReader.from<T>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return RecordBatchReader.fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return RecordBatchReader.fromByteStream<T>(new ByteStream(source));\n    }\n    private static fromJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n        return new RecordBatchStreamReader<T>(new ArrowJSON(source));\n    }\n    private static fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n        const bytes = source.peek((magicLength + 7) & ~7);\n        return bytes && bytes.byteLength >= 4\n            ? checkForMagicArrowString(bytes)\n            ? new RecordBatchFileReader<T>(source.read())\n            : new RecordBatchStreamReader<T>(source)\n            : new RecordBatchStreamReader<T>(function*(): any {}());\n    }\n    private static async fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n        const bytes = await source.peek((magicLength + 7) & ~7);\n        return bytes && bytes.byteLength >= 4\n            ? checkForMagicArrowString(bytes)\n            ? new RecordBatchFileReader<T>(await source.read())\n            : new AsyncRecordBatchStreamReader<T>(source)\n            : new AsyncRecordBatchStreamReader<T>(async function*(): any {}());\n    }\n    private static async fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n        const { size } = await source.stat();\n        const file = new AsyncRandomAccessFile(source, size);\n        if (size >= magicX2AndPadding) {\n            if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n                return new AsyncRecordBatchFileReader<T>(file);\n            }\n        }\n        return new AsyncRecordBatchStreamReader<T>(file);\n    }\n}\n\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    // @ts-ignore\n    protected impl: RecordBatchFileReaderImpl<T>;\n    constructor(source: AsyncRecordBatchFileReaderImpl<T>);\n    constructor(source: RandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: ArrayBufferViewInput, dictionaries?: Map<number, Vector>);\n    constructor(source: AsyncRecordBatchFileReaderImpl<T> | RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        if (source instanceof AsyncRecordBatchFileReaderImpl) {\n            super(source);\n        } else if (source instanceof RandomAccessFile) {\n            super(new RecordBatchFileReaderImpl(source, dictionaries));\n        } else {\n            super(new RecordBatchFileReaderImpl(new RandomAccessFile(toUint8Array(source)), dictionaries));\n        }\n    }\n    public get footer() { return this.impl.footer; }\n    public cancel() { this.impl.close(); }\n    public open(autoClose?: boolean) { this.impl.open(autoClose); return this; }\n    public readRecordBatch(index: number) { return this.impl.readRecordBatch(index); }\n    public [Symbol.iterator]() { return (this.impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    // @ts-ignore\n    protected impl: RecordBatchStreamReaderImpl<T>;\n    constructor(source: ByteStream | ArrowJSON | ArrayBufferView | Iterable<ArrayBufferView>, dictionaries?: Map<number, Vector>) {\n        super(isArrowJSON(source)\n            ? new RecordBatchJSONReaderImpl(new JSONMessageReader(source), dictionaries)\n            : new RecordBatchStreamReaderImpl(new MessageReader(source), dictionaries));\n    }\n    public cancel() { this.impl.close(); }\n    public open(autoClose?: boolean) { this.impl.open(autoClose); return this; }\n    public [Symbol.iterator]() { return (this.impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    // @ts-ignore\n    protected impl: AsyncRecordBatchStreamReaderImpl<T>;\n    constructor(source: AsyncByteStream | FileHandle | NodeJS.ReadableStream | ReadableStream<ArrayBufferView> | AsyncIterable<ArrayBufferView>, byteLength?: number) {\n        super(new AsyncRecordBatchStreamReaderImpl(new AsyncMessageReader(source as FileHandle, byteLength)));\n    }\n    public async cancel() { await this.impl.close(); }\n    public async open(autoClose?: boolean) { await this.impl.open(autoClose); return this; }\n    public [Symbol.asyncIterator]() { return (this.impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n}\n\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    // @ts-ignore\n    protected impl: AsyncRecordBatchFileReaderImpl<T>;\n    constructor(source: AsyncRandomAccessFile);\n    constructor(source: AsyncRandomAccessFile, dictionaries: Map<number, Vector>);\n    constructor(source: FileHandle, byteLength: number, dictionaries: Map<number, Vector>);\n    constructor(source: AsyncRandomAccessFile | FileHandle, ...rest: (number | Map<number, Vector>)[]) {\n        let [byteLength, dictionaries] = rest as [number, Map<number, Vector>];\n        if (byteLength && typeof byteLength !== 'number') { dictionaries = byteLength; }\n        let file = source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength);\n        super(new AsyncRecordBatchFileReaderImpl(file, dictionaries));\n    }\n    public get footer() { return this.impl.footer; }\n    public async cancel() { await this.impl.close(); }\n    public async open(autoClose?: boolean) { await this.impl.open(autoClose); return this; }\n    public readRecordBatch(index: number) { return this.impl.readRecordBatch(index); }\n    public [Symbol.asyncIterator]() { return (this.impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchFileReader is not Iterable`); }\n}\n\nabstract class RecordBatchReaderImplBase<T extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoClose = true;\n    public dictionaryIndex = 0;\n    public recordBatchIndex = 0;\n    public dictionaries: Map<number, Vector>;\n    public get numDictionaries() { return this.dictionaryIndex; }\n    public get numRecordBatches() { return this.recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n    public reset(schema?: Schema<T> | null) {\n        this.dictionaryIndex = 0;\n        this.recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        if (isDelta || !dictionaries.get(id)) {\n\n            const type = schema.dictionaries.get(id)!;\n            const vector = (isDelta ? dictionaries.get(id)!.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n\n            (schema.dictionaryFields.get(id) || []).forEach(({ type }) => type.dictionaryVector = vector);\n\n            return vector;\n        }\n        return dictionaries.get(id)!;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any>\n    extends RecordBatchReaderImplBase<T>\n        implements IRecordBatchReaderImpl<T>, IterableIterator<RecordBatch<T>> {\n\n    constructor(protected reader: MessageReader, dictionaries = new Map<number, Vector>()) {\n        super(dictionaries);\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public close() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset().reader.return();\n            this.reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n        return this;\n    }\n    public open(autoClose = this.autoClose) {\n        if (!this.closed) {\n            this.autoClose = autoClose;\n            try {\n                if (!(this.schema || (this.schema = this.reader.readSchema(!autoClose)!))) {\n                    return this.close();\n                }\n            } catch (e) { this.close(); throw e; }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return this.reset().reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return this.reset().reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { reader } = this;\n        while (message = this.readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this.recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this.dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return this.return();\n    }\n    protected readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this.reader.readMessage<T>(type);\n    }\n}\n\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any>\n    extends RecordBatchReaderImplBase<T>\n        implements IRecordBatchReaderImpl<T>, AsyncIterableIterator<RecordBatch<T>> {\n\n    constructor(protected reader: AsyncMessageReader, dictionaries = new Map<number, Vector>()) {\n        super(dictionaries);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async close() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset().reader.return();\n            this.reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n        return this;\n    }\n    public async open(autoClose = this.autoClose) {\n        if (!this.closed) {\n            this.autoClose = autoClose;\n            try {\n                if (!(this.schema || (this.schema = (await this.reader.readSchema(!autoClose))!))) {\n                    return this.close();\n                }\n            } catch (e) { this.close(); throw e; }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return await this.reset().reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return await this.reset().reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { reader } = this;\n        while (message = await this.readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this.recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this.dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return await this.return();\n    }\n    protected async readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this.reader.readMessage<T>(type);\n    }\n}\n\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any>\n    extends RecordBatchStreamReaderImpl<T>\n        implements IRecordBatchFileReaderImpl<T>, IterableIterator<RecordBatch<T>> {\n\n    // @ts-ignore\n    public footer: Footer;\n    public get numDictionaries() { return this.footer.numDictionaries; }\n    public get numRecordBatches() { return this.footer.numRecordBatches; }\n\n    constructor(protected file: RandomAccessFile, dictionaries = new Map<number, Vector>()) {\n        super(new MessageReader(file), dictionaries);\n    }\n    public open(autoClose = this.autoClose) {\n        if (!this.closed && !this.footer) {\n            this.schema = (this.footer = this.readFooter()).schema;\n            for (const block of this.footer.dictionaryBatches()) {\n                block && this.readDictionaryBatch(this.dictionaryIndex++);\n            }\n        }\n        return super.open(autoClose);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this.footer) { this.open(); }\n        const block = this.footer.getRecordBatch(index);\n        if (block && this.file.seek(block.offset)) {\n            const message = this.reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this.reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected readDictionaryBatch(index: number) {\n        const block = this.footer.getDictionaryBatch(index);\n        if (block && this.file.seek(block.offset)) {\n            const message = this.reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this.reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected readFooter() {\n        const { file } = this;\n        const size = file.size;\n        const offset = size - magicAndPadding;\n        const length = file.readInt32(offset);\n        const buffer = file.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this.footer) { this.open(); }\n        if (this.recordBatchIndex < this.numRecordBatches) {\n            const block = this.footer.getRecordBatch(this.recordBatchIndex);\n            if (block && this.file.seek(block.offset)) {\n                return this.reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any>\n    extends AsyncRecordBatchStreamReaderImpl<T>\n        implements IRecordBatchFileReaderImpl<T>, AsyncIterableIterator<RecordBatch<T>> {\n\n    // @ts-ignore\n    public footer: Footer;\n    public get numDictionaries() { return this.footer.numDictionaries; }\n    public get numRecordBatches() { return this.footer.numRecordBatches; }\n\n    constructor(protected file: AsyncRandomAccessFile, dictionaries = new Map<number, Vector>()) {\n        super(new AsyncMessageReader(file), dictionaries);\n    }\n    public async open(autoClose = this.autoClose) {\n        if (!this.closed && !this.footer) {\n            this.schema = (this.footer = await this.readFooter()).schema;\n            for (const block of this.footer.dictionaryBatches()) {\n                block && this.readDictionaryBatch(this.dictionaryIndex++);\n            }\n        }\n        return await super.open(autoClose);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this.footer) { await this.open(); }\n        const block = this.footer.getRecordBatch(index);\n        if (block && (await this.file.seek(block.offset))) {\n            const message = await this.reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this.reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async readDictionaryBatch(index: number) {\n        const block = this.footer.getDictionaryBatch(index);\n        if (block && (await this.file.seek(block.offset))) {\n            const message = await this.reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this.reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async readFooter() {\n        const { file } = this;\n        const offset = file.size - magicAndPadding;\n        const length = await file.readInt32(offset);\n        const buffer = await file.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this.footer) { await this.open(); }\n        if (this.recordBatchIndex < this.numRecordBatches) {\n            const block = this.footer.getRecordBatch(this.recordBatchIndex);\n            if (block && await this.file.seek(block.offset)) {\n                return await this.reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(protected reader: JSONMessageReader, dictionaries = new Map<number, Vector>()) {\n        super(reader, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\ninterface IRecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoClose: boolean;\n    numDictionaries: number;\n    numRecordBatches: number;\n    dictionaries: Map<number, Vector>;\n\n    open(autoClose?: boolean): this | Promise<this>;\n    reset(schema?: Schema<T> | null): this;\n    close(): this | Promise<this>;\n\n    [Symbol.iterator]?(): IterableIterator<RecordBatch<T>>;\n    [Symbol.asyncIterator]?(): AsyncIterableIterator<RecordBatch<T>>;\n\n    throw(value?: any): IteratorResult<any> | Promise<IteratorResult<any>>;\n    return(value?: any): IteratorResult<any> | Promise<IteratorResult<any>>;\n    next(value?: any): IteratorResult<RecordBatch<T>> | Promise<IteratorResult<RecordBatch<T>>>;\n}\n\ninterface IRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends IRecordBatchReaderImpl<T> {\n\n    footer: Footer;\n\n    readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null>;\n}\n\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> {\n    cancel(): void;\n    open(autoClose?: boolean): this;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> {\n    cancel(): void;\n    open(autoClose?: boolean): this;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> {\n    cancel(): Promise<void>;\n    open(autoClose?: boolean): Promise<this>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> {\n    cancel(): Promise<void>;\n    open(autoClose?: boolean): Promise<this>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { Vector as VType } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\nexport interface VectorAssembler extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[]): this[];\n    visit     <T extends Vector>  (node: T   ): this;\n    getVisitFn<T extends Type>    (node: T       ): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: VType<T>): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: Data<T> ): (vector: VType<T>) => this;\n    getVisitFn<T extends DataType>(node: T       ): (vector: VType<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: VType<T>): this;\n    visitInt                  <T extends Int>             (vector: VType<T>): this;\n    visitFloat                <T extends Float>           (vector: VType<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: VType<T>): this;\n    visitBinary               <T extends Binary>          (vector: VType<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: VType<T>): this;\n    visitDate                 <T extends Date_>           (vector: VType<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: VType<T>): this;\n    visitTime                 <T extends Time>            (vector: VType<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: VType<T>): this;\n    visitList                 <T extends List>            (vector: VType<T>): this;\n    visitStruct               <T extends Struct>          (vector: VType<T>): this;\n    visitUnion                <T extends Union>           (vector: VType<T>): this;\n    visitInterval             <T extends Interval>        (vector: VType<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: VType<T>): this;\n    visitMap                  <T extends Map_>            (vector: VType<T>): this;\n}\n\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n\n        const vectors = args.reduce(function flatten(xs: any[], x: any): any[] {\n            if (Array.isArray(x)) { return x.reduce(flatten, xs); }\n            if (!(x instanceof RecordBatch)) { return [...xs, x]; }\n            return [...xs, ...x.schema.fields.map((_, i) => x.getChildAt(i)!)];\n        }, []).filter((x: any): x is Vector => x instanceof Vector);\n\n        return new VectorAssembler().visitMany(vectors)[0];\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            addBuffer.call(this, nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : truncateBitmap(data.offset, length, data.nullBitmap)\n            ).nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: VType<T>) { return this; }\n    public visitDictionary<T extends Dictionary>(vector: VType<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: VType<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: VType<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate\n    // the values as bools and re-pack them into a Uint8Array (slow path)\n    return addBuffer.call(this, packBools(vector));\n}\n\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: VType<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: VType<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\nfunction assembleListVector<T extends List | FixedSizeList>(this: VectorAssembler, vector: VType<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\nfunction assembleNestedVector<T extends Struct | Map_ | Union>(this: VectorAssembler, vector: VType<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =   assembleNestedVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport { RecordBatch } from '../recordbatch';\nimport * as metadata from './metadata/message';\nimport { DataType, Dictionary } from '../type';\nimport { ChunkedVector } from '../vector/chunked';\nimport { FileBlock, Footer } from './metadata/file';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { isWritableDOMStream, isWritableNodeStream, isAsyncIterable } from '../util/compat';\nimport { Writable, FileHandle, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\n\nconst kAlignmentBytes = new Uint8Array(64).fill(0);\n\nexport type OpenArgs = FileHandle | NodeJS.WritableStream | WritableStream<Uint8Array> | UnderlyingSink<Uint8Array>;\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    public static throughNode(): import('stream').Duplex { throw new Error(`\"throughNode\" not available in this environment`); }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(): { writable: WritableStream<RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    protected position = 0;\n    protected started = false;\n    // @ts-ignore\n    protected sink = new AsyncByteQueue();\n    protected schema: Schema | null = null;\n    protected dictionaryBlocks: FileBlock[] = [];\n    protected recordBatchBlocks: FileBlock[] = [];\n\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this.sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public get closed() { return this.sink.closed; }\n    public [Symbol.asyncIterator]() { return this.sink[Symbol.asyncIterator](); }\n    public toReadableDOMStream(options?: ReadableDOMStreamOptions) { return this.sink.toReadableDOMStream(options); }\n    public toReadableNodeStream(options?: import('stream').ReadableOptions) { return this.sink.toReadableNodeStream(options); }\n\n    public close() { return this.reset().sink.close(); }\n    public abort(reason?: any) { return this.reset().sink.abort(reason); }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this.sink, schema?: Schema<T>) {\n\n        if ((sink === this.sink) || (sink instanceof AsyncByteQueue)) {\n            this.sink = sink as AsyncByteQueue;\n        } else {\n            this.sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toReadableDOMStream().pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toReadableNodeStream().pipe(sink);\n            }\n        }\n\n        this.position = 0;\n        this.schema = null;\n        this.started = false;\n        this.dictionaryBlocks = [];\n        this.recordBatchBlocks = [];\n\n        if (schema instanceof Schema) {\n            this.started = true;\n            this.schema = schema;\n            this._writeSchema(schema);\n        }\n\n        return this;\n    }\n\n    public write(chunk: RecordBatch<T>) {\n        if (!this.sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        }\n        if (!this.started && (this.started = true)) {\n            this._writeSchema(this.schema = chunk.schema);\n        }\n        if (chunk.schema !== this.schema) {\n            throw new Error('Schemas unequal');\n        }\n        this._writeRecordBatch(chunk);\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const alignedSize = (flatbufferSize + 4 + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - 4;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this.recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this.position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this.dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this.position));\n        }\n\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - 4));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(buffer: ArrayBufferView) {\n        if (buffer && buffer.byteLength > 0) {\n            this.sink.write(buffer);\n            this.position += buffer.byteLength;\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMessage(Message.from(schema))\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n\n    protected _writeFooter() {\n\n        const { schema, recordBatchBlocks, dictionaryBlocks } = this;\n        const buffer = Footer.encode(new Footer(\n            schema!, MetadataVersion.V4,\n            recordBatchBlocks, dictionaryBlocks\n        ));\n\n        return this\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(kAlignmentBytes.subarray(0, nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(records: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(records);\n        const recordBatch = new metadata.RecordBatch(records.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(dictionaryFields: Map<number, Field<Dictionary<any, any>>[]>) {\n        for (const [id, fields] of dictionaryFields) {\n            const vector = fields[0].type.dictionaryVector;\n            if (!(vector instanceof ChunkedVector)) {\n                this._writeDictionaryBatch(vector, id, false);\n            } else {\n                const chunks = vector.chunks;\n                for (let i = -1, n = chunks.length; ++i < n;) {\n                    this._writeDictionaryBatch(chunks[i], id, i > 0);\n                }\n            }\n        }\n        return this;\n    }\n}\n\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(batches: Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(batches: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(batches: Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (!isAsyncIterable(batches)) {\n            for (const batch of batches) writer.write(batch); writer.close(); return writer;\n        }\n        return (async () => {\n            for await (const batch of batches) writer.write(batch); writer.close(); return writer;\n        })();\n    }\n\n    public close() {\n        this._writeFooter();\n        return super.close();\n    }\n    protected _writeSchema(schema: Schema<T>) {\n        return this\n            ._writeMagic()._writePadding(2)\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n}\n\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(batches: Iterable<RecordBatch<T>>): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(batches: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(batches: Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        const writer = new RecordBatchStreamWriter<T>();\n        if (!isAsyncIterable(batches)) {\n            for (const batch of batches) writer.write(batch); writer.close(); return writer;\n        }\n        return (async () => {\n            for await (const batch of batches) writer.write(batch); writer.close(); return writer;\n        })();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { ChunkedVector } from './vector/chunked';\n\nexport class Column<T extends DataType = any> extends ChunkedVector<T> {\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        super(field.type, ChunkedVector.flatten(...vectors), offsets);\n        this._field = field;\n    }\n\n    protected _children?: Column[];\n    protected _field: Field<T>;\n\n    public get field() { return this._field; }\n    public get name() { return this.field.name; }\n\n    public slice(begin?: number, end?: number): Column<T> {\n        return new Column(this.field, super.slice(begin, end).chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this.chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Bool } from '../type';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { packBools } from '../util/bit';\n\nexport class BoolVector extends BaseVector<Bool> {\n    /** @nocollapse */\n    public static from(data: Iterable<boolean>) {\n        let length = 0, bitmap = packBools(function*() {\n            for (let x of data) { length++; yield x; }\n        }());\n        return Vector.new(Data.Bool(new Bool(), 0, length, 0, null, bitmap));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DateUnit } from '../enum';\nimport { BaseVector } from './base';\nimport * as IntUtil from '../util/int';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    /** @nocollapse */\n    public static from<T extends Date_ = DateMillisecond>(data: Date[], unit: T['unit'] = DateUnit.MILLISECOND) {\n        switch (unit) {\n            case DateUnit.DAY: {\n                const values = Int32Array.from(data.map((d) => d.valueOf() / 86400000));\n                return Vector.new(Data.Date(new DateDay(), 0, data.length, 0, null, values));\n            }\n            case DateUnit.MILLISECOND: {\n                const values = IntUtil.Int64.convertArray(data.map((d) => d.valueOf()));\n                return Vector.new(Data.Date(new DateMillisecond(), 0, data.length, 0, null, values));\n            }\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[unit]}\"`);\n    }\n    constructor(data: Data<T>) {\n        super(data, undefined, data.type.unit + 1);\n    }\n}\nexport class DateDayVector extends DateVector<DateDay> {}\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\nexport class DecimalVector extends BaseVector<Decimal> {\n    constructor(data: Data<Decimal>) {\n        super(data, undefined, 4);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { DataType, Dictionary, TKeys } from '../type';\n\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    /** @nocollapse */\n    public static from<T extends DataType<any>, TKey extends TKeys = TKeys>(\n        values: Vector<T>, indices: TKey,\n        keys: ArrayLike<number> | TKey['TArray']\n    ) {\n        const type = new Dictionary(values.type, indices, null, null, values);\n        return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys));\n    }\n    protected _indices: V<TKey>;\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data, void 0, 1);\n        this._indices = Vector.new(data.clone(this.type.indices));\n    }\n    public get indices() { return this._indices; }\n    public get dictionary() { return this.type.dictionaryVector; }\n    public getKey(index: number): TKey['TValue'] | null { return this.indices.get(index); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public isValid(index: number) { return this.indices.isValid(index); }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {\n    constructor(data: Data<FixedSizeBinary>) {\n        super(data, void 0, data.type.byteWidth);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {\n    constructor(data: Data<FixedSizeList<T>>) {\n        super(data, void 0, data.type.listSize);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n    /** @nocollapse */\n    public static from<T extends Float>(data: T['TArray']) {\n        switch (data.constructor) {\n            case Uint16Array: return Vector.new(Data.Float(new Float16(), 0, data.length, 0, null, data));\n            case Float32Array: return Vector.new(Data.Float(new Float32(), 0, data.length, 0, null, data));\n            case Float64Array: return Vector.new(Data.Float(new Float64(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n}\n\nexport class Float16Vector extends FloatVector<Float16> {}\nexport class Float32Vector extends FloatVector<Float32> {}\nexport class Float64Vector extends FloatVector<Float64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {\n    constructor(data: Data<T>) {\n        super(data, undefined, data.type.unit + 1);\n    }\n}\n\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Vector as V } from '../interfaces';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\n\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n    public static from<T extends Int>(data: T['TArray']): V<T>;\n    public static from<T extends Int32 | Uint32>(data: T['TArray'], is64: true): V<T>;\n    /** @nocollapse */\n    public static from(data: any, is64?: boolean) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? Vector.new(Data.Int(new Int64(), 0, data.length, 0, null, data))\n                : Vector.new(Data.Int(new Uint64(), 0, data.length, 0, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return Vector.new(Data.Int(new Int8(), 0, data.length, 0, null, data));\n            case Int16Array: return Vector.new(Data.Int(new Int16(), 0, data.length, 0, null, data));\n            case Int32Array: return Vector.new(Data.Int(new Int32(), 0, data.length, 0, null, data));\n            case Uint8Array: return Vector.new(Data.Int(new Uint8(), 0, data.length, 0, null, data));\n            case Uint16Array: return Vector.new(Data.Int(new Uint16(), 0, data.length, 0, null, data));\n            case Uint32Array: return Vector.new(Data.Int(new Uint32(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    constructor(data: Data<T>) {\n        super(data, undefined, data.type.bitWidth <= 32 ? 1 : 2);\n    }\n}\n\nexport class Int8Vector extends IntVector<Int8> {}\nexport class Int16Vector extends IntVector<Int16> {}\nexport class Int32Vector extends IntVector<Int32> {}\nexport class Int64Vector extends IntVector<Int64> {}\nexport class Uint8Vector extends IntVector<Uint8> {}\nexport class Uint16Vector extends IntVector<Uint16> {}\nexport class Uint32Vector extends IntVector<Uint32> {}\nexport class Uint64Vector extends IntVector<Uint64> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct } from '../type';\n\nexport class MapVector<T extends { [key: string]: DataType } = any> extends BaseVector<Map_<T>> {\n    public rowProxy: Row<T> = Row.new<T>(this.type.children || [], true);\n    public asStruct() {\n        return Vector.new(this.data.clone(new Struct(this.type.children)));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {\n    constructor(data: Data<T>) {\n        super(data, undefined, 2);\n    }\n}\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {\n    constructor(data: Data<T>) {\n        super(data, undefined, data.type.bitWidth <= 32 ? 1 : 2);\n    }\n}\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n}\n\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport const encodeUtf8 = ((encoder) =>\n    encoder.encode.bind(encoder) as (input?: string, options?: { stream?: boolean }) => Uint8Array\n)(new TextEncoder('utf-8'));\n\nexport interface SetVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    visit     <T extends Vector>  (node: T, index: number, value: T['TValue']          ): void;\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>, index: number, value: Vector<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, index: number, value: T['TValue']): void;\n}\n\nexport class SetVisitor extends Visitor {\n}\n\nconst setEpochMsToSeconds = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 1000) | 0; }\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs / 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs / 1000) / 4294967296) | 0;\n};\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs / 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs / 1000000) / 4294967296) | 0;\n};\n\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\nconst setBool = <T extends Bool>({ offset, values }: Vector<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\ntype Numeric2X = Int64 | Uint64;\n\nconst setDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\nconst setFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = (value * 32767) + 32767; };\nconst setNumericX2       = <T extends Numeric2X>      ({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\nconst setBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\nconst setInt = <T extends Int>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(<any> vector, index, value as Numeric1X['TValue'])\n        : setNumericX2(<any> vector, index, value as Numeric2X['TValue'])\n};\n\nconst setFloat = <T extends Float>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(<any> vector, index, value)\n        : setFloat16(<any> vector, index, value)\n};\n\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector, index, value)\n        : setDateMillisecond(vector, index, value)\n};\n\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToSeconds(values, index * 2, value);\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\nconst setTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as Vector<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as Vector<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as Vector<TimestampNanosecond>, index, value);\n    }\n};\n\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\nconst setTime            = <T extends Time>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as Vector<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as Vector<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as Vector<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as Vector<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\nconst setDecimal = <T extends Decimal>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\nconst setList = <T extends List>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!;\n    const { valueOffsets, stride } = vector;\n    let idx = -1, offset = valueOffsets[index * stride];\n    let end = Math.min(value.length, valueOffsets[(index * stride) + 1] - offset);\n    while (offset < end) {\n        values.set(offset++, value.get(++idx));\n    }\n};\n\nconst setNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.children.forEach(({ name }, idx) => {\n        const kid = vector.getChildAt(idx);\n        kid && kid.set(index, value[name]);\n    });\n};\n\nconst setUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as Vector<DenseUnion>, index, value) :\n        setSparseUnion(vector as Vector<SparseUnion>, index, value);\n};\n\nconst setDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index] as Type]);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\nconst setSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index] as Type]);\n    child && child.set(index, value);\n};\n\nconst setDictionary = <T extends Dictionary>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    return vector.dictionary.set(vector.indices.get(index) as number, value);\n};\n\nconst setIntervalValue = <T extends Interval>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector, index, value)\n        : setIntervalYearMonth(vector, index, value);\n};\n\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); }\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\nconst setFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(++idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 getDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setNested;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =               setNested;\n\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { encodeUtf8 } from '../visitor/set';\n\nexport class Utf8Vector extends BaseVector<Utf8> {\n    /** @nocollapse */\n    public static from(values: string[]) {\n        const length = values.length;\n        const data = encodeUtf8(values.join(''));\n        const offsets = values.reduce((offsets, str, idx) => (\n            (!(offsets[idx + 1] = offsets[idx] + str.length) || true) && offsets\n        ), new Uint32Array(values.length + 1));\n        return Vector.new(Data.Utf8(new Utf8(), 0, length, 0, null, offsets, data));\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { TextDecoder } from 'text-encoding-utf-8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport const decodeUtf8 = ((decoder) =>\n    decoder.decode.bind(decoder) as (input?: ArrayBufferLike | ArrayBufferView) => string\n)(new TextDecoder('utf-8'));\n\nexport interface GetVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[], indices: number[]): T['TValue'][];\n    visit     <T extends Vector>  (node: T, index: number       ): T['TValue'];\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: Vector<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: Vector<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: Vector<T>, index: number): T['TValue'];\n}\n\nexport class GetVisitor extends Visitor {}\n\nconst epochSecondsToMs = (data: Int32Array, index: number) => 1000 * data[index];\nconst epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\nconst epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\nconst epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\nconst epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\nconst epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\nconst epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n// const epochSecondsToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochSecondsToMs(data, index));\n// const epochNanosecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochNanosecondsLongToMs(data, index));\nconst epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\nconst getNull = <T extends Null>(_vector: Vector<T>, _index: number): T['TValue'] => null;\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\nconst getBool = <T extends Bool>({ offset, values }: Vector<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\ntype Numeric2X = Int64 | Uint64;\n\nconst getDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number): T['TValue'] => values[stride * index];\nconst getFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number): T['TValue'] => (values[stride * index] - 32767) / 32767;\nconst getNumericX2       = <T extends Numeric2X>      ({ stride, values }: Vector<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\nconst getBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\nconst getInt = <T extends Int>(vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(<any> vector, index)\n        : getNumericX2(<any> vector, index)\n);\n\nconst getFloat = <T extends Float> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as any, index)\n        : getFloat16(vector as any, index)\n);\n\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as any, index)\n        : getDateMillisecond(vector as any, index)\n);\n\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number): T['TValue'] => epochSecondsToMs(values, index * 2);\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\nconst getTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as Vector<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as Vector<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as Vector<TimestampNanosecond>, index);\n    }\n};\n\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * index + 1);\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * index + 1);\nconst getTime            = <T extends Time>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as Vector<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as Vector<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as Vector<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as Vector<TimeNanosecond>, index);\n    }\n};\n\nconst getDecimal = <T extends Decimal>({ values }: Vector<T>, index: number): T['TValue'] => values.subarray(4 * index, 4 * (index + 1));\n\nconst getList = <T extends List>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\nconst getNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.rowProxy.bind(vector, index);\n};\n\nconst getUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as Vector<DenseUnion>, index) :\n        getSparseUnion(vector as Vector<SparseUnion>, index);\n};\n\nconst getDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index] as Type]);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\nconst getSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index] as Type]);\n    return child ? child.get(index) : null;\n};\n\nconst getDictionary = <T extends Dictionary>(vector: Vector<T>, index: number): T['TValue'] => {\n    return vector.dictionary.get(vector.indices.get(index) as number);\n};\n\nconst getInterval = <T extends Interval>(vector: Vector<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as any, index)\n        : getIntervalYearMonth(vector as any, index);\n\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * index + 1);\n\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\nconst getFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =            getNumericX2;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =            getNumericX2;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getNested;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =               getNested;\n\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RowLike } from '../type';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IndexOfVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    visit     <T extends Vector>  (node: T, value: T['TValue'] | null, index?: number            ): number;\n    getVisitFn<T extends Type>    (node: T         ): (vector: Vector<T>, value: Vector<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: Vector<T> ): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: Data<T>   ): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: T         ): (vector: Vector<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: Vector<T>, value: T['TValue'] | null, index?: number): number;\n}\n\nexport class IndexOfVisitor extends Visitor {\n}\n\nfunction nullIndexOf(vector: Vector<Null>, searchElement?: null, fromIndex: number = -1) {\n     // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? fromIndex : -1;\n}\n\nfunction indexOfNull<T extends DataType>(vector: Vector<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\nfunction valueIndexOf<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (vector.get(i) === searchElement) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction dateIndexOf<T extends Date_>(vector: Vector<T>, searchElement?: Date | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const valueOfDate = searchElement.valueOf();\n    for (let d: Date | null, i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if ((d = vector.get(i)) && d.valueOf() === valueOfDate) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction dictionaryIndexOf<T extends DataType>(vector: Vector<Dictionary<T>>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const { dictionary, indices } = vector;\n    // First find the dictionary key for the desired value...\n    const key = dictionary.indexOf(searchElement);\n    // ... then find the first occurence of that key in indices\n    return key === -1 ? -1 : indices.indexOf(key, fromIndex);\n}\n\nfunction arrayIndexOf<T extends DataType>(vector: Vector<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    searching:\n    for (let x = null, j = 0, i = (fromIndex || 0) - 1, n = vector.length, k = searchElement.length; ++i < n;) {\n        if ((x = vector.get(i)) && (j = x.length) === k) {\n            while (--j > -1) {\n                if (x[j] !== searchElement[j]) {\n                    continue searching;\n                }\n            }\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction listIndexOf<\n    T extends DataType,\n    R extends List<T> | FixedSizeList<T>\n>(vector: Vector<R>, searchElement?: R['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const getSearchElement = (Array.isArray(searchElement) || ArrayBuffer.isView(searchElement))\n        ? (i: number) => (searchElement as ArrayLike<T>)[i]\n        : (i: number) => (searchElement as Vector<T>).get(i);\n    searching:\n    for (let x = null, j = 0, i = (fromIndex || 0) - 1, n = vector.length, k = searchElement.length; ++i < n;) {\n        if ((x = vector.get(i)) && (j = x.length) === k) {\n            while (--j > -1) {\n                if (x.get(j) !== getSearchElement(j)) {\n                    continue searching;\n                }\n            }\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction indexOfNested<\n    T extends { [key: string]: DataType },\n    R extends Map_<T> | Struct<T>\n>(vector: Vector<R>, searchElement?: RowLike<T> | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    searching:\n    for (let x = null, j = 0, i = (fromIndex || 0) - 1, n = vector.length, k = searchElement.length; ++i < n;) {\n        if ((x = vector.get(i)) && (j = x.length) === k) {\n            while (--j > -1) {\n                if (x[j] !== searchElement[j]) {\n                    continue searching;\n                }\n            }\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =       nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 =      valueIndexOf;\nIndexOfVisitor.prototype.visitInt                  =      valueIndexOf;\nIndexOfVisitor.prototype.visitInt8                 =      valueIndexOf;\nIndexOfVisitor.prototype.visitInt16                =      valueIndexOf;\nIndexOfVisitor.prototype.visitInt32                =      valueIndexOf;\nIndexOfVisitor.prototype.visitInt64                =      arrayIndexOf;\nIndexOfVisitor.prototype.visitUint8                =      valueIndexOf;\nIndexOfVisitor.prototype.visitUint16               =      valueIndexOf;\nIndexOfVisitor.prototype.visitUint32               =      valueIndexOf;\nIndexOfVisitor.prototype.visitUint64               =      arrayIndexOf;\nIndexOfVisitor.prototype.visitFloat                =      valueIndexOf;\nIndexOfVisitor.prototype.visitFloat16              =      valueIndexOf;\nIndexOfVisitor.prototype.visitFloat32              =      valueIndexOf;\nIndexOfVisitor.prototype.visitFloat64              =      valueIndexOf;\nIndexOfVisitor.prototype.visitUtf8                 =      valueIndexOf;\nIndexOfVisitor.prototype.visitBinary               =      arrayIndexOf;\nIndexOfVisitor.prototype.visitFixedSizeBinary      =      arrayIndexOf;\nIndexOfVisitor.prototype.visitDate                 =       dateIndexOf;\nIndexOfVisitor.prototype.visitDateDay              =       dateIndexOf;\nIndexOfVisitor.prototype.visitDateMillisecond      =       dateIndexOf;\nIndexOfVisitor.prototype.visitTimestamp            =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimestampSecond      =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimestampMillisecond =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimestampMicrosecond =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimestampNanosecond  =      valueIndexOf;\nIndexOfVisitor.prototype.visitTime                 =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimeSecond           =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimeMillisecond      =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimeMicrosecond      =      valueIndexOf;\nIndexOfVisitor.prototype.visitTimeNanosecond       =      valueIndexOf;\nIndexOfVisitor.prototype.visitDecimal              =      arrayIndexOf;\nIndexOfVisitor.prototype.visitList                 =       listIndexOf;\nIndexOfVisitor.prototype.visitStruct               =     indexOfNested;\nIndexOfVisitor.prototype.visitUnion                =      valueIndexOf;\nIndexOfVisitor.prototype.visitDenseUnion           =      valueIndexOf;\nIndexOfVisitor.prototype.visitSparseUnion          =      valueIndexOf;\nIndexOfVisitor.prototype.visitDictionary           = dictionaryIndexOf;\nIndexOfVisitor.prototype.visitInterval             =      valueIndexOf;\nIndexOfVisitor.prototype.visitIntervalDayTime      =      valueIndexOf;\nIndexOfVisitor.prototype.visitIntervalYearMonth    =      valueIndexOf;\nIndexOfVisitor.prototype.visitFixedSizeList        =       listIndexOf;\nIndexOfVisitor.prototype.visitMap                  =     indexOfNested;\n\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface IteratorVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[]     ): IterableIterator<T['TValue'] | null>[];\n    visit     <T extends Vector>  (node: T        ): IterableIterator<T['TValue'] | null>;\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>) => IterableIterator<Vector<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: Vector<T>): IterableIterator<T['TValue'] | null>;\n}\n\nexport class IteratorVisitor extends Visitor {}\n\nfunction nullableIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: Vector<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\nfunction vectorIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (type.TType === Type.Timestamp) ||\n        (type.TType === Type.Int && (type as Int).bitWidth !== 64) ||\n        (type.TType === Type.Time && (type as Time).bitWidth !== 64) ||\n        (type.TType === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Type, Precision } from '../enum';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface ToArrayVisitor extends Visitor {\n    visitMany <T extends Vector>  (nodes: T[]     ): T['TArray'][];\n    visit     <T extends Vector>  (node: T        ): T['TArray'];\n    getVisitFn<T extends Type>    (node: T        ): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: Vector<T>): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: Data<T>  ): (vector: Vector<T>) => Vector<T>['TArray'];\n    getVisitFn<T extends DataType>(node: T        ): (vector: Vector<T>) => Vector<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: Vector<T>): Vector<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: Vector<T>): Vector<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: Vector<T>): Vector<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: Vector<T>): Vector<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: Vector<T>): Vector<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: Vector<T>): Vector<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: Vector<T>): Vector<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: Vector<T>): Vector<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: Vector<T>): Vector<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: Vector<T>): Vector<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: Vector<T>): Vector<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: Vector<T>): Vector<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: Vector<T>): Vector<T>['TArray'];\n}\n\nexport class ToArrayVisitor extends Visitor {}\n\nfunction arrayOfVector<T extends DataType>(vector: Vector<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.TType) {\n        case Type.Int: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n        case Type.Float:\n            return (type as Float).precision === Precision.HALF /* Precision.HALF */\n                ? new Float32Array(vector[Symbol.iterator]())\n                : vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\nexport const instance = new ToArrayVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\nconst sum = (x: number, y: number) => x + y;\nconst variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\nexport interface ByteWidthVisitor extends Visitor {\n    visitMany <T extends DataType>(nodes: T[]     ): number[];\n    visit     <T extends DataType>(node: T        ): number;\n    getVisitFn<T extends Type>    (node: T        ): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: Vector<T>): (type: T          ) => number;\n    getVisitFn<T extends DataType>(node: Data<T>  ): (type: T          ) => number;\n    getVisitFn<T extends DataType>(node: T        ): (type: T          ) => number;\n}\n\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport * as vecs from '../vector/all';\nimport { Vector, VectorCtor } from '../interfaces';\n\nexport interface GetVectorConstructor extends Visitor {\n    visitMany <T extends Type>    (nodes: T[]     ): VectorCtor<T>[];\n    visit     <T extends Type>    (node: T,       ): VectorCtor<T>;\n    getVisitFn<T extends Type>    (node: T        ): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: Vector<T>): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: Data<T>  ): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: T        ): () => VectorCtor<T>;\n}\n\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return vecs.NullVector; }\n    public visitBool                 () { return vecs.BoolVector; }\n    public visitInt                  () { return vecs.IntVector; }\n    public visitInt8                 () { return vecs.Int8Vector; }\n    public visitInt16                () { return vecs.Int16Vector; }\n    public visitInt32                () { return vecs.Int32Vector; }\n    public visitInt64                () { return vecs.Int64Vector; }\n    public visitUint8                () { return vecs.Uint8Vector; }\n    public visitUint16               () { return vecs.Uint16Vector; }\n    public visitUint32               () { return vecs.Uint32Vector; }\n    public visitUint64               () { return vecs.Uint64Vector; }\n    public visitFloat                () { return vecs.FloatVector; }\n    public visitFloat16              () { return vecs.Float16Vector; }\n    public visitFloat32              () { return vecs.Float32Vector; }\n    public visitFloat64              () { return vecs.Float64Vector; }\n    public visitUtf8                 () { return vecs.Utf8Vector; }\n    public visitBinary               () { return vecs.BinaryVector; }\n    public visitFixedSizeBinary      () { return vecs.FixedSizeBinaryVector; }\n    public visitDate                 () { return vecs.DateVector; }\n    public visitDateDay              () { return vecs.DateDayVector; }\n    public visitDateMillisecond      () { return vecs.DateMillisecondVector; }\n    public visitTimestamp            () { return vecs.TimestampVector; }\n    public visitTimestampSecond      () { return vecs.TimestampSecondVector; }\n    public visitTimestampMillisecond () { return vecs.TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return vecs.TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return vecs.TimestampNanosecondVector; }\n    public visitTime                 () { return vecs.TimeVector; }\n    public visitTimeSecond           () { return vecs.TimeSecondVector; }\n    public visitTimeMillisecond      () { return vecs.TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return vecs.TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return vecs.TimeNanosecondVector; }\n    public visitDecimal              () { return vecs.DecimalVector; }\n    public visitList                 () { return vecs.ListVector; }\n    public visitStruct               () { return vecs.StructVector; }\n    public visitUnion                () { return vecs.UnionVector; }\n    public visitDenseUnion           () { return vecs.DenseUnionVector; }\n    public visitSparseUnion          () { return vecs.SparseUnionVector; }\n    public visitDictionary           () { return vecs.DictionaryVector; }\n    public visitInterval             () { return vecs.IntervalVector; }\n    public visitIntervalDayTime      () { return vecs.IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return vecs.IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return vecs.FixedSizeListVector; }\n    public visitMap                  () { return vecs.MapVector; }\n}\n\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Row } from './all';\nexport { Vector } from './all';\nexport { BaseVector } from './all';\nexport { BinaryVector } from './all';\nexport { BoolVector } from './all';\nexport { ChunkedVector } from './all';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './all';\nexport { DecimalVector } from './all';\nexport { DictionaryVector } from './all';\nexport { FixedSizeBinaryVector } from './all';\nexport { FixedSizeListVector } from './all';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './all';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './all';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './all';\nexport { ListVector } from './all';\nexport { MapVector } from './all';\nexport { NullVector } from './all';\nexport { StructVector } from './all';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './all';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './all';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './all';\nexport { Utf8Vector } from './all';\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { Vector as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n    }\n}\n\ndeclare module './base' {\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn(data.type)())(data, ...args) as V<T>;\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .filter((TType) => TType !== Type.NONE && TType !== Type[Type.NONE])\n    .map((T: any) => Type[T] as any).filter((T: any): T is Type => typeof T === 'number')\n    .forEach((TType) => {\n        let typeIds: Type[];\n        switch (TType) {\n            case Type['Int']:       typeIds = [Type['Int8'], Type['Int16'], Type['Int32'], Type['Int64'], Type['Uint8'], Type['Uint16'], Type['Uint32'], Type['Uint64']]; break;\n            case Type['Float']:     typeIds = [Type['Float16'], Type['Float32'], Type['Float64']]; break;\n            case Type['Date']:      typeIds = [Type['DateDay'], Type['DateMillisecond']]; break;\n            case Type['Time']:      typeIds = [Type['TimeSecond'], Type['TimeMillisecond'], Type['TimeMicrosecond'], Type['TimeNanosecond']]; break;\n            case Type['Timestamp']: typeIds = [Type['TimestampSecond'], Type['TimestampMillisecond'], Type['TimestampMicrosecond'], Type['TimestampNanosecond']]; break;\n            case Type['Interval']:  typeIds = [Type['IntervalDayTime'], Type['IntervalYearMonth']]; break;\n            case Type['Union']:     typeIds = [Type['DenseUnion'], Type['SparseUnion']]; break;\n            default:                typeIds = [TType]; break;\n        }\n        typeIds.forEach((TType) => {\n            const VectorCtor = getVectorConstructor.visit(TType);\n            VectorCtor.prototype['get'] = partial1(getVisitor.getVisitFn(TType));\n            VectorCtor.prototype['set'] = partial2(setVisitor.getVisitFn(TType));\n            VectorCtor.prototype['indexOf'] = partial2(indexOfVisitor.getVisitFn(TType));\n            VectorCtor.prototype['toArray'] = partial0(toArrayVisitor.getVisitFn(TType));\n            VectorCtor.prototype['getByteWidth'] = partial0(byteWidthVisitor.getVisitFn(TType));\n            VectorCtor.prototype[Symbol.iterator] = partial0(iteratorVisitor.getVisitFn(TType));\n        });\n    });\n\nfunction partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\nfunction partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\nfunction partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, a != null)) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n// @ts-ignore\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>, data: Data<T>) {\n    const type = this.type;\n    this['get'] = getVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this['set'] = setVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this['indexOf'] = indexOfVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this['toArray'] = toArrayVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    this[Symbol.iterator] = iteratorVisitor.getVisitFn(type).bind(this, <any> this as V<T>);\n    if (this.nullCount > 0) {\n        this['set'] = wrapNullableSet(this['set']);\n    }\n    (Vector.prototype as any).bindDataAccessors.call(this, data);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { isPromise } from './util/compat';\nimport { RecordBatch } from './recordbatch';\nimport { Vector as VType } from './interfaces';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { Vector, ChunkedVector } from './vector/index';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\n\nexport interface DataFrame<T extends { [key: string]: DataType; } = any> {\n    count(): number;\n    filter(predicate: import('./compute/predicate').Predicate): DataFrame<T>;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n}\n\nexport class Table<T extends { [key: string]: DataType; } = any> implements DataFrame<T> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType; } = any>() { return new Table<T>(new Schema([]), []); }\n\n    public static from<T extends { [key: string]: DataType } = any>(): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source?: any) {\n\n        if (!source) { return Table.empty<T>(); }\n\n        let reader = RecordBatchReader.from<T>(source) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty<T>() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty<T>();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType; } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromVectors<T extends { [key: string]: DataType; } = any>(vectors: VType<T[keyof T]>[], names?: (keyof T)[]) {\n        return new Table(RecordBatch.from(vectors, names));\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType; } = any>(struct: Vector<Struct<T>>) {\n        const schema = new Schema<T>(struct.type.children);\n        const chunks = (struct instanceof ChunkedVector ? struct.chunks : [struct]) as VType<Struct<T>>[];\n        return new Table(schema, chunks.map((chunk) => new RecordBatch(schema, chunk.data)));\n    }\n\n    protected _schema: Schema;\n    protected _length: number;\n    protected _numCols: number;\n    // List of inner RecordBatches\n    protected _batches: RecordBatch<T>[];\n    // List of inner Vectors, possibly spanning batches\n    protected readonly _columns: Vector<any>[] = [];\n    // Union of all inner RecordBatches into one RecordBatch, possibly chunked.\n    // If the Table has just one inner RecordBatch, this points to that.\n    // If the Table has multiple inner RecordBatches, then this is a Chunked view\n    // over the list of RecordBatches. This allows us to delegate the responsibility\n    // of indexing, iterating, slicing, and visiting to the Nested/Chunked Data/Views.\n    protected _batchesUnion: Vector<Struct<T>>;\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema, batches: RecordBatch<T>[]);\n    constructor(schema: Schema, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema = null!;\n\n        if (args[0] instanceof Schema) {\n            schema = args.shift();\n        }\n\n        let batches = args.reduce(function flatten(xs: any[], x: any): any[] {\n            return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x: any): x is RecordBatch<T> => x instanceof RecordBatch);\n\n        if (!schema && !(schema = batches[0] && batches[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch with a Schema');\n        }\n\n        this._schema = schema;\n        this._batches = batches;\n        this._batchesUnion = batches.length == 0\n            ? new RecordBatch<T>(schema, 0, [])\n            : batches.length === 1 ? batches[0]\n            : ChunkedVector.concat<Struct<T>>(...batches) as Vector<Struct<T>>;\n\n        this._length = this.batchesUnion.length;\n        this._numCols = this.schema.fields.length;\n    }\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get numCols() { return this._numCols; }\n    public get batches() { return this._batches; }\n    public get batchesUnion() { return this._batchesUnion; }\n\n    public get(index: number): Struct<T>['TValue'] {\n        return this.batchesUnion.get(index)!;\n    }\n    public getColumn<R extends keyof T>(name: R): Vector<T[R]> | null {\n        return this.getColumnAt(this.getColumnIndex(name)) as Vector<T[R]> | null;\n    }\n    public getColumnAt<T extends DataType = any>(index: number): Vector<T> | null {\n        if (index < 0 || index >= this.numCols) {\n            return null;\n        }\n        if (this.batches.length === 1) {\n            return this.batches[0].getChildAt<T>(index) as Vector<T> | null;\n        }\n        return new Column<T>(\n            this.schema.fields[index] as Field<T>,\n            this.batches.map((b) => b.getChildAt<T>(index)! as Vector<T>));\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    public [Symbol.iterator]() {\n        return this.batchesUnion[Symbol.iterator]() as IterableIterator<RowLike<T>>;\n    }\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return writer.writeAll(this.batches).toUint8Array(true);\n    }\n    public count(): number {\n        return this.length;\n    }\n    public select(...columnNames: string[]) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n}\n\n// protect batches, batchesUnion from es2015/umd mangler\n// (<any> Table.prototype)._batches = Object.freeze([]);\n// (<any> Table.prototype)._batchesUnion = Object.freeze([]);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n        this.vector = batch.getChildAt(this.colidx)!;\n        return this.vector.get.bind(this.vector);\n    }\n}\n\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[]\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p)\n        }, [])\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p)\n        }, [])\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Vector as V } from '../interfaces';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { Table, DataFrame as DF } from '../table';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\nexport type BindFunc = (batch: RecordBatch) => void;\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.scan = tableScan;\nTable.prototype.filter = tableFilter;\nTable.prototype.countBy = tableCountBy;\n\ndeclare module '../table' {\n    interface Table<T extends { [key: string]: DataType } = any> {\n        filter(predicate: Predicate): DF;\n        countBy(name: Col | string): CountByResult;\n        scan(next: NextFunc, bind?: BindFunc): void;\n    }\n}\n  \nexport class Dataframe<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): DF<T> {\n        return new FilteredDataFrame<T>(this.batches, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        const schema = new Schema<{ values: T, counts: TCount }>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nexport class FilteredDataFrame<T extends { [key: string]: DataType; } = any> implements DF<T> {\n    private predicate: Predicate;\n    private batches: RecordBatch<T>[];\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): DF<T> {\n        return new FilteredDataFrame<T>(\n            this.batches,\n            this.predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n    \n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n\nfunction tableScan(this: Table, next: NextFunc, bind?: BindFunc) {\n    return new Dataframe(this.batches).scan(next, bind);\n}\n\nfunction tableFilter(this: Table, predicate: Predicate): DF {\n    return new Dataframe(this.batches).filter(predicate);\n}\n\nfunction tableCountBy(this: Table, name: Col | string) {\n    return new Dataframe(this.batches).countBy(name);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table, DataFrame } from './table';\nexport { Column } from './column';\nexport { Schema, Field } from './schema';\nexport { Visitor } from './visitor';\nexport {\n    Row,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    ChunkedVector,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { Dataframe, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_buffer_ from './util/buffer';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\nexport const util = {\n    ...util_int_,\n    ...util_bit_,\n    ...util_buffer_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from './type';\nimport streamAdapters from './io/adapters';\nimport { RecordBatch } from './recordbatch';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { ReadableDOMStreamOptions } from './io/interfaces';\nimport { isIterable, isAsyncIterable } from './util/compat';\nimport { AsyncByteStream, AsyncByteQueue } from './io/stream';\n\nstreamAdapters.toReadableDOMStream = toReadableDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table, DataFrame,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    ChunkedVector,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    Dataframe, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util\n} from './Arrow';\n\nfunction recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>() {\n\n    const through = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await through.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(through), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from(through)).open();\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n\nfunction recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>>,\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const through = new AsyncByteQueue();\n    const writer = new this<T>().reset(through);\n    const reader = new AsyncByteStream(through);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await through.close(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, readableStrategy);\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            // Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n            controller.enqueue((buf.buffer.byteLength !== 0) ? buf : buf.slice());\n            if (size != null && (size -= buf.byteLength) <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n\nfunction toReadableDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    throw new Error(`toReadableDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<T> | null = null;\n        while ((size == null || size-- > 0) && !(r = it.next()).done) {\n            controller.enqueue(r.value);\n        }\n        r && r.done && controller.close();\n    }\n}\n\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<T> | null = null;\n        while ((size == null || size-- > 0) && !(r = await it.next()).done) {\n            controller.enqueue(r.value);\n        }\n        r && r.done && controller.close();\n    }\n}\n"],"sourceRoot":""}