{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","type.ts","fb/Schema.ts","vector.ts","data.ts","util/int.ts","vector/flat.ts","tslib/tslib.es6.js","ipc/metadata.ts","util/bit.ts","vector/view.ts","ipc/magic.ts","visitor.ts","predicate.ts","recordbatch.ts","ipc/reader/vector.ts","ipc/reader/json.ts","ipc/reader/binary.ts","ipc/reader/arrow.ts","fb/Message.ts","ipc/writer/arrow.ts","table.ts","util/compat.ts","vector/nested.ts","flatbuffers/js/flatbuffers.mjs","vector/list.ts","vector/chunked.ts","ipc/writer/binary.ts","util/pretty.ts","util/node.ts","vector/validity.ts","ipc/reader/node.ts","vector/dictionary.ts","fb/File.ts","text-encoding-utf-8/lib/encoding.lib.mjs","Arrow.ts"],"names":["root","factory","exports","module","define","amd","Arrow","window","t","installedModules","__webpack_require__","moduleId","i","l","S","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","ArrowType","DateUnit","TimeUnit","Precision","UnionMode","VectorType","IntervalUnit","MessageHeader","MetadataVersion","Schema","Field","Type","DataType","Null","Int","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Float","Float16","Float32","Float64","Binary","Utf8","Bool","Decimal","Date_","Time","Timestamp","Interval","List","Struct","Union","DenseUnion","SparseUnion","FixedSizeBinary","FixedSizeList","Map_","Dictionary","_fb_Schema__WEBPACK_IMPORTED_MODULE_0__","_fb_Message__WEBPACK_IMPORTED_MODULE_1__","flatbuffers__WEBPACK_IMPORTED_MODULE_2__","_ipc_metadata__WEBPACK_IMPORTED_MODULE_3__","_visitor__WEBPACK_IMPORTED_MODULE_4__","a","Long","apache","arrow","flatbuf","[object Object]","fields","metadata","version","V4","dictionaries","Map","this","vectors","map","v","type","bodyLength","_bodyLength","headerType","_headerType","fieldNames","namesToKeep","reduce","xs","x","newDictFields","newFields","filter","f","forEach","dictId","set","nullable","typeId","TType","X","indices","isDictionary","NONE","Date","children","visitor","visitTypeInline","proto","ArrayType","Array","super","isSigned","bitWidth","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","precision","HALF","SINGLE","Float32Array","DOUBLE","Float64Array","scale","unit","timezone","valueType","valueField","join","typeIds","Dense","Sparse","byteWidth","listSize","keysSorted","dictionary","id","isOrdered","b","getId","low","org","V1","V2","V3","DAY","MILLISECOND","SECOND","MICROSECOND","NANOSECOND","YEAR_MONTH","DAY_TIME","FloatingPoint","Struct_","OFFSET","DATA","VALIDITY","TYPE","Endianness","Little","Big","bb_pos","bb","obj","__init","readInt32","position","builder","startObject","endObject","offset","__offset","addFieldInt32","readInt8","addFieldInt8","readInt16","index","__vector","__vector_len","bytes","buffer","byteOffset","addFieldInt16","typeIdsOffset","addFieldOffset","data","startVector","length","addInt32","endVector","numElems","optionalEncoding","__string","timezoneOffset","VectorLayout","KeyValue","keyOffset","valueOffset","DictionaryEncoding","readInt64","createLong","__indirect","addFieldInt64","indexTypeOffset","readUint8","__union","nameOffset","typeType","typeOffset","dictionaryOffset","childrenOffset","addOffset","layoutOffset","customMetadataOffset","Buffer","prep","writeInt64","endianness","fieldsOffset","finish","Vector","NullVector","BoolVector","IntVector","FloatVector","DateVector","DecimalVector","TimeVector","TimestampVector","IntervalVector","BinaryVector","FixedSizeBinaryVector","Utf8Vector","ListVector","FixedSizeListVector","MapVector","StructVector","UnionVector","DictionaryVector","createVector","_data__WEBPACK_IMPORTED_MODULE_0__","_visitor__WEBPACK_IMPORTED_MODULE_1__","_type__WEBPACK_IMPORTED_MODULE_2__","_util_int__WEBPACK_IMPORTED_MODULE_3__","_vector_chunked__WEBPACK_IMPORTED_MODULE_4__","_vector_validity__WEBPACK_IMPORTED_MODULE_5__","_vector_dictionary__WEBPACK_IMPORTED_MODULE_6__","_vector_list__WEBPACK_IMPORTED_MODULE_7__","_vector_nested__WEBPACK_IMPORTED_MODULE_8__","_vector_flat__WEBPACK_IMPORTED_MODULE_9__","_util_bit__WEBPACK_IMPORTED_MODULE_10__","view","nulls","nullBitmap","nullCount","source","others","concat","toArray","clone","constructor","isValid","indexOf","iterator","Boolean","vecs","chunkVectors","offsets","computeOffsets","chunksLength","chunkedData","begin","end","size","total","from","to","isFinite","slicedData","slice","Math","min","FlatVector","values","asInt32","stride","int32s","k","ListVectorBase","valueOffsets","NestedVector","getChildAt","childData","_childData","chunks","cols","chunk","_","push","j","defaultView","is64","M","u","N","K","L","TypeError","e","C","type_","converted","convertArray","valueOf","search","asEpochMilliseconds","H","w","h","Q","F","y","P","idxs","dict","_type","toTypedArray","BaseData","FlatData","BoolData","FlatListData","DictionaryData","NestedData","SingleNestedData","ListData","UnionData","SparseUnionData","DenseUnionData","ChunkedData","_util_bit__WEBPACK_IMPORTED_MODULE_0__","_type__WEBPACK_IMPORTED_MODULE_1__","ArrayBuffer","isView","byteLength","BYTES_PER_ELEMENT","floor","max","_nullCount","R","sliceInternal","arr","sliceData","sliceOffsets","subarray","_indices","_dictionary","_offset","_length","child","valueChildData","_valuesData","typeIdToChildIndex","idx","chunkOffsets","_chunkVectors","_chunkOffsets","chunkData","_chunkData","vec","chunkSlices","childIndex","numChildren","childLength","childOffset","childVectors","childOffsets","Int128","carryBit16","intAsHex","toString","kInt32DecimalDigits","kPowersOfTen","BaseInt64","other","product","sum","lessThan","_times","_plus","val","out_buffer","fromString","num","str","out","posn","group","parseInt","substr","multiple","times","plus","left","right","this_high","other_high","negate","startsWith","L0","L1","L2","L3","R0","R1","R2","R3","multiply","high","sums","FlatView","NullView","BoolView","PrimitiveView","FixedSizeView","Float16View","DateDayView","DateMillisecondView","TimestampDayView","TimestampSecondView","TimestampMillisecondView","TimestampMicrosecondView","TimestampNanosecondView","IntervalYearMonthView","IntervalYearView","IntervalMonthView","boolBitIndex","getValue","setValue","every","epochMillisecondsToDate","epochDaysToMs","epochMillisecondsLongToMs","epochMs","epochSecondsToMs","epochNanosecondsLongToMs","interval","__awaiter","thisArg","_arguments","generator","Promise","resolve","reject","fulfilled","step","next","rejected","throw","result","done","then","apply","__await","__asyncGenerator","asyncIterator","g","q","verb","resume","fulfill","settle","shift","__asyncDelegator","__asyncValues","__values","Footer","FileBlock","Message","RecordBatchMetadata","DictionaryBatch","BufferMetadata","FieldMetadata","_type__WEBPACK_IMPORTED_MODULE_0__","dictionaryBatches","recordBatches","schema","metaDataLength","z","RecordBatch","nodes","buffers","isDelta","atomicDictionaryId","Fe","De","align","alignment","getBool","_data","_index","byte","bit","getBit","setBool","packBools","iterateBits","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","rhsInside","lhsInside","cnt","pos","DataView","len","popcnt_uint32","getUint32","getUint16","getUint8","uint32","_chunked__WEBPACK_IMPORTED_MODULE_0__","_validity__WEBPACK_IMPORTED_MODULE_1__","_dictionary__WEBPACK_IMPORTED_MODULE_2__","_list__WEBPACK_IMPORTED_MODULE_3__","_nested__WEBPACK_IMPORTED_MODULE_4__","_flat__WEBPACK_IMPORTED_MODULE_5__","PADDING","MAGIC","checkForMagicArrowString","isValidArrowFile","magicLength","magicAndPadding","MAGIC_STR","charCodeAt","footerLength","lengthOffset","fileLength","capacity","magicX2AndPadding","TypeVisitor","VectorVisitor","acceptTypeVisitor","types","visit","J","visitNull","visitInt","visitFloat","visitBinary","visitUtf8","visitBool","visitDecimal","visitDate","visitTime","visitTimestamp","visitInterval","visitList","visitStruct","visitUnion","visitFixedSizeBinary","visitFixedSizeList","visitMap","visitDictionary","vector","acceptVectorVisitor","Value","Literal","Col","Predicate","And","Or","Equals","LTeq","GTeq","Not","lit","col","and","or","custom","_vector__WEBPACK_IMPORTED_MODULE_0__","ge","le","eq","batch","colidx","expr","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","freeze","accum","bound","some","_batch","rtrn","left_func","right_func","col_func","lastDictionary","reverseLookup","lastKey","getKey","func","CustomPredicate","bind_","_vector__WEBPACK_IMPORTED_MODULE_1__","_data__WEBPACK_IMPORTED_MODULE_2__","_util_node__WEBPACK_IMPORTED_MODULE_3__","_util_pretty__WEBPACK_IMPORTED_MODULE_4__","D","args","numRows","numCols","columnNames","select","separator","rowOffset","maxColumnWidths","recordBatch","header","row","readRecordBatches","messages","message","Je","loader","readRecordBatch","readRecordBatchesAsync","messages_1_1","messages_1","tslib_es6","ipc_metadata","isRecordBatch","recordbatch","visitFields","isDictionaryBatch","dictionaryId","dictionaryDataType","dictionaryVector","has","vector_TypeDataLoader","field","visitNullType","visitFlatType","visitFlatList","visitBoolType","visitListType","visitNestedType","visitUnionType","visitFixedSizeListType","cls_data","getBufferMetadata","readData","getFieldMetadata","readNullBitmap","readOffsets","cls_type","readTypeIds","flatbuffers","readJSON","json","dictionaryFields","fieldsFromJSON","fs","dataType","keysMeta","dictMeta","customMetadata","typeFromJSON","indexType","intFromJSON","recordBatchFromJSON","json_JSONDataLoader","flattenDataSources","columns","arrayIterator","batches","column","utf8Encoder","encoding_lib","sources","Dr","oi","isTimestamp","util_int","isInt","isTime","isDate","isDecimal","isBinary","isFixedSizeBinary","joined","isBool","isUtf8","encode","count","fieldNodesFromJSON","fieldNodes","validity","buffersFromJSON","entries","namesToTypeMap","null","int","floatingpoint","binary","bool","utf8","decimal","date","time","timestamp","list","struct","union","fixedsizebinary","fixedsizelist","B","G","I","O","E","$","ByteBuffer","readBuffers","readMessages","toByteBuffer","ai","readSchema","binary_BinaryDataLoader","binary_arrayIterator","readBuffersAsync","sources_1_1","sources_1","messageOffset","footer","magic","setPosition","_Footer","getRootAsFooter","blocks","dictionariesLength","recordBatchesLength","fieldsFromSchema","binary_customMetadata","readMessage","binary_readMessages","isSchema","readStreamMessages","_Message","getRootAsMessage","_Schema","recordBatchFromMessage","_RecordBatch","_DictionaryBatch","binary_Type","binary_Precision","binary_MetadataVersion","File","_Null","_Int","_FloatingPoint","_Binary","_Bool","_Utf8","_Decimal","_Date","_Time","_Timestamp","_Interval","_List","_Struct","_Union","_FixedSizeBinary","_FixedSizeList","_Map","nodesLength","buffersLength","bufferFromRecordBatch","fieldsLength","binary_field","fieldsFromField","childrenLength","typeFromField","intFromField","parent","entry","customMetadataLength","typeIdsArray","read","input","JSON","parse","readAsync","_c","_b","readStream","stream","node","_Schema__WEBPACK_IMPORTED_MODULE_0__","Tensor","FieldNode","null_count","nodesOffset","buffersOffset","dataOffset","headerOffset","table","table_Table","table_CountByResult","_columns","flatten","isArray","batchesUnion","empty","chunked","getColumnAt","getColumnIndex","findIndex","predicate","table_FilteredDataFrame","numBatches","batchIndex","count_by","cls_vector","counts","keys","rowsToString","encoding","writeTableBinary","firstValues","iterators","NestedView","UnionView","DenseUnionView","StructView","MapView","_util_pretty__WEBPACK_IMPORTED_MODULE_1__","_children","getNested","setNested","self","getChildValue","setChildValue","_valueOffsets","Ae","RowProxy","RowView","MapRowView","rowIndex","_typeIds","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","us","os","int32","float32","float64","isLittleEndian","ZERO","toFloat64","equals","Builder","opt_initial_size","initial_size","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeFloat32","writeFloat64","addInt8","addInt16","addInt64","addFloat32","addFloat64","voffset","defaultValue","slot","addFieldFloat32","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","root_table","opt_file_identifier","file_identifier","requiredField","table_start","vtable_start","elem_size","num_elems","createString","codePoint","bytes_","position_","readUint16","readUint32","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","vtable_offset","opt_encoding","UTF8_BYTES","String","fromCharCode","__has_identifier","ident","ListView","FixedSizeListView","BinaryView","Utf8View","text_encoding_utf_8__WEBPACK_IMPORTED_MODULE_1__","encodeUtf8","encoder","decodeUtf8","decoder","decode","ListViewBase","getList","setList","VariableListViewBase","ChunkedView","mid","numChunks","sourcesLen","target","setValues","arraySet","typedArraySet","dstIdx","srcIdx","srcLen","serializeStream","serializeFile","_recordbatch__WEBPACK_IMPORTED_MODULE_0__","_magic__WEBPACK_IMPORTED_MODULE_2__","_util_bit__WEBPACK_IMPORTED_MODULE_3__","_metadata__WEBPACK_IMPORTED_MODULE_4__","_type__WEBPACK_IMPORTED_MODULE_5__","flatbuffers__WEBPACK_IMPORTED_MODULE_6__","_fb_File__WEBPACK_IMPORTED_MODULE_7__","_fb_Schema__WEBPACK_IMPORTED_MODULE_8__","_fb_Message__WEBPACK_IMPORTED_MODULE_9__","serializeMessage","getColumn","serializeDictionaryBatch","serializeRecordBatch","metadataLength","cu","finishFooterBuffer","schemaOffset","writeSchema","recordBatchesOffset","startRecordBatchesVector","mapReverse","rb","writeBlock","dictionaryBatchesOffset","startDictionariesVector","db","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","endFooter","footerBytes","setInt32","platformIsLittleEndian","pu","gu","buffersMeta","RecordBatchSerializer","visitRecordBatch","A","concatBuffersWithMetadata","rbMeta","finishMessageBuffer","messageHeaderOffset","writeRecordBatch","startDictionaryBatch","addId","addIsDelta","addData","endDictionaryBatch","startMessage","addHeader","addHeaderType","addBodyLength","endMessage","metadataBytes","dataByteLength","messageBytes","RangeError","addBuffer","getTruncatedBitmap","_nullz","visitBoolVector","visitFlatVector","visitFlatListVector","visitListVector","visitNestedVector","sliceOffset","maxChildTypeId","childLengths","fill","shiftedOffsets","unshiftedOffsets","getZeroBasedValueOffsets","bitmap","scaledLength","firstOffset","lastOffset","alignedLength","startOffset","destOffsets","_Block","Block","_Field","_Buffer","_KeyValue","_FieldNode","_DictionaryEncoding","_Endianness","TypeSerializer","_node","startNull","endNull","startInt","addBitWidth","addIsSigned","endInt","startFloatingPoint","addPrecision","endFloatingPoint","startBinary","endBinary","startBool","endBool","startUtf8","endUtf8","startDecimal","addScale","endDecimal","startDate","addUnit","endDate","startTime","endTime","startTimestamp","addTimezone","endTimestamp","startInterval","endInterval","startList","endList","startStruct_","endStruct_","startTypeIdsVector","createTypeIdsVector","startUnion","addMode","addTypeIds","endUnion","startDictionaryEncoding","addIsOrdered","addIndexType","endDictionaryEncoding","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startFixedSizeList","addListSize","endFixedSizeList","startMap","addKeysSorted","endMap","totalByteLength","realBufferLength","createBlock","fieldOffsets","writeField","createChildrenVector","createCustomMetadataVector","startKeyValue","addKey","addValue","endKeyValue","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","addCustomMetadata","endField","startFieldsVector","createFieldsVector","startSchema","addFields","addEndianness","endSchema","startNodesVector","createFieldNode","startBuffersVector","b_","createBuffer","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","callbackfn","setInt16","leftPad","valueToString","stringify","PipeIterator","error","return","res","_u","write","err","removeListener","writable","emit","wait","AsyncPipeIterator","tslib__WEBPACK_IMPORTED_MODULE_0__","toBufferOrUint8Array","BufferCtor","eval","stdout","isTTY","once","ValidityView","nullBitIndex","getNullable","fromReadableStream","flatbuffers__WEBPACK_IMPORTED_MODULE_1__","_fb_Message__WEBPACK_IMPORTED_MODULE_2__","_magic__WEBPACK_IMPORTED_MODULE_3__","bytesRead","messageLength","grown","getInt32","DictionaryView","dictionariesOffset","inRange","ToDictionary","TextEncoder","TextDecoder","Stream","tokens","Cu","end_of_stream","Nu","token","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","options","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","ignoreBOM","_encoder","_options","su","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","bite","prepend","code_point","input_stream","code_points","endOfStream","cp","ci","opt_string","temp","string","util","enum_","_data__WEBPACK_IMPORTED_MODULE_1__","_vector__WEBPACK_IMPORTED_MODULE_2__","_util_bit__WEBPACK_IMPORTED_MODULE_4__","_util_node__WEBPACK_IMPORTED_MODULE_5__","_visitor__WEBPACK_IMPORTED_MODULE_6__","_vector_view__WEBPACK_IMPORTED_MODULE_7__","_predicate__WEBPACK_IMPORTED_MODULE_8__","_recordbatch__WEBPACK_IMPORTED_MODULE_9__","_table__WEBPACK_IMPORTED_MODULE_10__","_ipc_reader_node__WEBPACK_IMPORTED_MODULE_11__","_ipc_reader_arrow__WEBPACK_IMPORTED_MODULE_12__","_ipc_writer_binary__WEBPACK_IMPORTED_MODULE_13__","CountByResult","fromAsync","fromStruct","add","fromNumber","isNull","isFloat","isInterval","isList","isStruct","isUnion","isDenseUnion","isSparseUnion","isFixedSizeList","isMap"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\nimport { Vector, View } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { DictionaryBatch } from './ipc/metadata';\nimport { TypeVisitor, VisitorNode } from './visitor';\n\nexport import Long = flatbuffers.Long;\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\nexport class Schema {\n    public static from(vectors: Vector[]) {\n        return new Schema(vectors.map((v, i) => new Field('' + i, v.type)));\n    }\n    // @ts-ignore\n    protected _bodyLength: number;\n    // @ts-ignore\n    protected _headerType: MessageHeader;\n    public readonly fields: Field[];\n    public readonly version: MetadataVersion;\n    public readonly metadata?: Map<string, string>;\n    public readonly dictionaries: Map<number, Field<Dictionary>>;\n    constructor(fields: Field[],\n                metadata?: Map<string, string>,\n                version: MetadataVersion = MetadataVersion.V4,\n                dictionaries: Map<number, Field<Dictionary>> = new Map()) {\n        this.fields = fields;\n        this.version = version;\n        this.metadata = metadata;\n        this.dictionaries = dictionaries;\n    }\n    public get bodyLength() { return this._bodyLength; }\n    public get headerType() { return this._headerType; }\n    public select(...fieldNames: string[]): Schema {\n        const namesToKeep = fieldNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        const newDictFields = new Map(), newFields = this.fields.filter((f) => namesToKeep[f.name]);\n        this.dictionaries.forEach((f, dictId) => (namesToKeep[f.name]) && newDictFields.set(dictId, f));\n        return new Schema(newFields, this.metadata, this.version, newDictFields);\n    }\n    public static [Symbol.toStringTag] = ((prototype: Schema) => {\n        prototype._bodyLength = 0;\n        prototype._headerType = MessageHeader.Schema;\n        return 'Schema';\n    })(Schema.prototype);\n}\n\nexport class Field<T extends DataType = DataType> {\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata?: Map<string, string> | null;\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata;\n    }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public get typeId(): T['TType'] { return this.type.TType; }\n    public get [Symbol.toStringTag](): string { return 'Field'; }\n    public get indices(): T | Int<any> {\n        return DataType.isDictionary(this.type) ? this.type.indices : this.type;\n    }\n}\n\nexport type TimeBitWidth = 32 | 64;\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n\nexport type NumericType = Int | Float | Date_ | Time | Interval | Timestamp;\nexport type FixedSizeType = Int64 |  Uint64 | Decimal | FixedSizeBinary;\nexport type PrimitiveType = NumericType | FixedSizeType;\n\nexport type FlatListType = Utf8 | Binary; // <-- these types have `offset`, `data`, and `validity` buffers\nexport type FlatType = Bool | PrimitiveType | FlatListType; // <-- these types have `data` and `validity` buffers\nexport type ListType = List<any>; // <-- these types have `offset` and `validity` buffers\nexport type NestedType = Map_ | Struct | List<any> | FixedSizeList<any> | Union<any>; // <-- these types have `validity` buffer and nested childData\nexport type SingleNestedType = List<any> | FixedSizeList<any>; // <-- these are nested types that can only have a single child\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\n export enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n    Dictionary      = 'Dictionary',  // Dictionary aka Category type\n    DenseUnion      = 'DenseUnion',  // Dense Union of logical types\n    SparseUnion     = 'SparseUnion',  // Sparse Union of logical types\n}\n\nexport interface DataType<TType extends Type = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n}\n\nexport abstract class DataType<TType extends Type = any> implements Partial<VisitorNode> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    static            isNull (x: any): x is Null            { return x && x.TType === Type.Null;            }\n    static             isInt (x: any): x is Int             { return x && x.TType === Type.Int;             }\n    static           isFloat (x: any): x is Float           { return x && x.TType === Type.Float;           }\n    static          isBinary (x: any): x is Binary          { return x && x.TType === Type.Binary;          }\n    static            isUtf8 (x: any): x is Utf8            { return x && x.TType === Type.Utf8;            }\n    static            isBool (x: any): x is Bool            { return x && x.TType === Type.Bool;            }\n    static         isDecimal (x: any): x is Decimal         { return x && x.TType === Type.Decimal;         }\n    static            isDate (x: any): x is Date_           { return x && x.TType === Type.Date;            }\n    static            isTime (x: any): x is Time            { return x && x.TType === Type.Time;            }\n    static       isTimestamp (x: any): x is Timestamp       { return x && x.TType === Type.Timestamp;       }\n    static        isInterval (x: any): x is Interval        { return x && x.TType === Type.Interval;        }\n    static            isList (x: any): x is List            { return x && x.TType === Type.List;            }\n    static          isStruct (x: any): x is Struct          { return x && x.TType === Type.Struct;          }\n    static           isUnion (x: any): x is Union           { return x && x.TType === Type.Union;           }\n    static      isDenseUnion (x: any): x is DenseUnion      { return x && x.TType === Type.DenseUnion;      }\n    static     isSparseUnion (x: any): x is SparseUnion     { return x && x.TType === Type.SparseUnion;     }\n    static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.TType === Type.FixedSizeBinary; }\n    static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.TType === Type.FixedSizeList;   }\n    static             isMap (x: any): x is Map_            { return x && x.TType === Type.Map;             }\n    static      isDictionary (x: any): x is Dictionary      { return x && x.TType === Type.Dictionary;      }\n\n    constructor(public readonly TType: TType,\n                public readonly children?: Field[]) {}\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    constructor() {\n        super(Type.Null);\n    }\n    public toString() { return `Null`; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\nexport interface Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> { TArray: TArrayType; TValue: TValueType; }\nexport class Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> {\n    constructor(public readonly isSigned: boolean,\n                public readonly bitWidth: IntBitWidth) {\n        super(Type.Int);\n    }\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.bitWidth) {\n            case  8: return (this.isSigned ?  Int8Array :  Uint8Array) as any;\n            case 16: return (this.isSigned ? Int16Array : Uint16Array) as any;\n            case 32: return (this.isSigned ? Int32Array : Uint32Array) as any;\n            case 64: return (this.isSigned ? Int32Array : Uint32Array) as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int) => {\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int.prototype);\n}\n\nexport class Int8 extends Int<number, Int8Array> { constructor() { super(true, 8); } }\nexport class Int16 extends Int<number, Int16Array> { constructor() { super(true, 16); } }\nexport class Int32 extends Int<number, Int32Array> { constructor() { super(true, 32); } }\nexport class Int64 extends Int<Int32Array, Int32Array> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int<number, Uint8Array> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int<number, Uint16Array> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int<number, Uint32Array> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int<Uint32Array, Uint32Array> { constructor() { super(false, 64); } }\n\nexport interface Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> { TArray: TArrayType; TValue: number; }\nexport class Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> {\n    constructor(public readonly precision: Precision) {\n        super(Type.Float);\n    }\n    // @ts-ignore\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array as any;\n            case Precision.SINGLE: return Float32Array as any;\n            case Precision.DOUBLE: return Float64Array as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Uint16Array> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Float32Array> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Float64Array> { constructor() { super(Precision.DOUBLE); } }\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super(Type.Binary);\n    }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super(Type.Utf8);\n    }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super(Type.Bool);\n    }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super(Type.Decimal);\n    }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Date_ extends DataType<Type.Date> { TArray: Int32Array; TValue: Date; }\nexport class Date_ extends DataType<Type.Date> {\n    constructor(public readonly unit: DateUnit) {\n        super(Type.Date);\n    }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport interface Time extends DataType<Type.Time> { TArray: Uint32Array; TValue: number; }\nexport class Time extends DataType<Type.Time> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly bitWidth: TimeBitWidth) {\n        super(Type.Time);\n    }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time.prototype);\n}\n\nexport interface Timestamp extends DataType<Type.Timestamp> { TArray: Int32Array; TValue: number; }\nexport class Timestamp extends DataType<Type.Timestamp> {\n    constructor(public unit: TimeUnit, public timezone?: string | null) {\n        super(Type.Timestamp);\n    }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp.prototype);\n}\n\nexport interface Interval extends DataType<Type.Interval> { TArray: Int32Array; TValue: Int32Array; }\nexport class Interval extends DataType<Type.Interval> {\n    constructor(public unit: IntervalUnit) {\n        super(Type.Interval);\n    }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval.prototype);\n}\n\nexport interface List<T extends DataType = any> extends DataType<Type.List>  { TArray: any; TValue: Vector<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List> {\n    constructor(public children: Field[]) {\n        super(Type.List, children);\n    }\n    public toString() { return `List<${this.valueType}>`; }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct extends DataType<Type.Struct> { TArray: any; TValue: View<any>; }\nexport class Struct extends DataType<Type.Struct> {\n    constructor(public children: Field[]) {\n        super(Type.Struct, children);\n    }\n    public toString() { return `Struct<${this.children.map((f) => f.type).join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\nexport interface Union<TType extends Type = any> extends DataType<TType> { TArray: Int8Array; TValue: any; }\nexport class Union<TType extends Type = any> extends DataType<TType> {\n    constructor(public readonly mode: UnionMode,\n                public readonly typeIds: ArrowType[],\n                public readonly children: Field[]) {\n        super(<TType> Type.Union, children);\n    }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union) => {\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union.prototype);\n}\n\nexport class DenseUnion extends Union<Type.DenseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DenseUnion) => {\n        return proto[Symbol.toStringTag] = 'DenseUnion';\n    })(DenseUnion.prototype);\n}\n\nexport class SparseUnion extends Union<Type.SparseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: SparseUnion) => {\n        return proto[Symbol.toStringTag] = 'SparseUnion';\n    })(SparseUnion.prototype);\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super(Type.FixedSizeBinary);\n    }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: any; TValue: Vector<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> {\n    constructor(public readonly listSize: number,\n                public readonly children: Field[]) {\n        super(Type.FixedSizeList, children);\n    }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Map_ extends DataType<Type.Map> { TArray: Uint8Array; TValue: View<any>; }\nexport class Map_ extends DataType<Type.Map> {\n    constructor(public readonly keysSorted: boolean,\n                public readonly children: Field[]) {\n        super(Type.Map, children);\n    }\n    public toString() { return `Map<${this.children.join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\nexport interface Dictionary<T extends DataType = any> extends DataType<Type.Dictionary> { TArray: T['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly dictionary: T;\n    public readonly indices: Int<any>;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: Int<any>, id?: Long | number | null, isOrdered?: boolean | null) {\n        super(Type.Dictionary);\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? DictionaryBatch.getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get ArrayType() { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n\nexport interface TypedArrayConstructor<T extends TypedArray = TypedArray> {\n    readonly prototype: T;\n    readonly BYTES_PER_ELEMENT: number;\n    new (length: number): T;\n    new (elements: Iterable<number>): T;\n    new (arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): T;\n    new (buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n    of(...items: number[]): T;\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): T;\n}\n\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\nexport interface TypedArray extends Iterable<number> {\n    [index: number]: number;\n    readonly length: number;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly buffer: ArrayBufferLike;\n    readonly BYTES_PER_ELEMENT: number;\n    [Symbol.toStringTag]: any;\n    [Symbol.iterator](): IterableIterator<number>;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n    copyWithin(target: number, start: number, end?: number): this;\n    every(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): this;\n    filter(callbackfn: (value: number, index: number, array: TypedArray) => any, thisArg?: any): TypedArray;\n    find(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: TypedArray) => void, thisArg?: any): void;\n    includes(searchElement: number, fromIndex?: number): boolean;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    map(callbackfn: (value: number, index: number, array: TypedArray) => number, thisArg?: any): TypedArray;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reverse(): TypedArray;\n    set(array: ArrayLike<number>, offset?: number): void;\n    slice(start?: number, end?: number): TypedArray;\n    some(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: (a: number, b: number) => number): this;\n    subarray(begin: number, end?: number): TypedArray;\n    toLocaleString(): string;\n    toString(): string;\n}\n","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data, ChunkedData, FlatData, BoolData, FlatListData, NestedData, DictionaryData } from './data';\nimport { VisitorNode, TypeVisitor, VectorVisitor } from './visitor';\nimport { DataType, ListType, FlatType, NestedType, FlatListType, TimeUnit } from './type';\nimport { IterableArrayLike, Precision, DateUnit, IntervalUnit, UnionMode } from './type';\nimport * as IntUtil from './util/int';\n\nexport interface VectorLike { length: number; nullCount: number; }\n\nexport interface View<T extends DataType> {\n    clone(data: Data<T>): this;\n    isValid(index: number): boolean;\n    get(index: number): T['TValue'] | null;\n    set(index: number, value: T['TValue']): void;\n    toArray(): IterableArrayLike<T['TValue'] | null>;\n    indexOf(search: T['TValue']): number;\n    [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n}\n\nexport class Vector<T extends DataType = any> implements VectorLike, View<T>, VisitorNode {\n    public static create<T extends DataType>(data: Data<T>): Vector<T> {\n        return createVector(data);\n    }\n    public static concat<T extends DataType>(source?: Vector<T> | null, ...others: Vector<T>[]): Vector<T> {\n        return others.reduce((a, b) => a ? a.concat(b) : b, source!);\n    }\n    public type: T;\n    public length: number;\n    public readonly data: Data<T>;\n    public readonly view: View<T>;\n    constructor(data: Data<T>, view: View<T>) {\n        this.data = data;\n        this.type = data.type;\n        this.length = data.length;\n        let nulls: Uint8Array;\n        if ((<any> data instanceof ChunkedData) && !(view instanceof ChunkedView)) {\n            this.view = new ChunkedView(data as any) as any;\n        } else if (!(view instanceof ValidityView) && (nulls = data.nullBitmap!) && nulls.length > 0 && data.nullCount > 0) {\n            this.view = new ValidityView(data, view);\n        } else {\n            this.view = view;\n        }\n    }\n\n    public get nullCount() { return this.data.nullCount; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get [Symbol.toStringTag]() {\n        return `Vector<${this.type[Symbol.toStringTag]}>`;\n    }\n    public toJSON(): any { return this.toArray(); }\n    public clone<R extends T>(data: Data<R>, view: View<R> = this.view.clone(data) as any): this {\n        return new (this.constructor as any)(data, view);\n    }\n    public isValid(index: number): boolean {\n        return this.view.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this.view.get(index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.view.set(index, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return this.view.toArray();\n    }\n    public indexOf(value: T['TValue']) {\n        return this.view.indexOf(value);\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return this.view[Symbol.iterator]();\n    }\n    public concat(...others: Vector<T>[]): this {\n        if ((others = others.filter(Boolean)).length === 0) {\n            return this;\n        }\n        const { view } = this;\n        const vecs = !(view instanceof ChunkedView)\n            ? [this, ...others]\n            : [...view.chunkVectors, ...others];\n        const offsets = ChunkedData.computeOffsets(vecs);\n        const chunksLength = offsets[offsets.length - 1];\n        const chunkedData = new ChunkedData(this.type, chunksLength, vecs, 0, -1, offsets);\n        return this.clone(chunkedData, new ChunkedView(chunkedData)) as this;\n    }\n    public slice(begin?: number, end?: number): this {\n        let { length } = this;\n        let size = (this.view as any).size || 1;\n        let total = length, from = (begin || 0) * size;\n        let to = (typeof end === 'number' ? end : total) * size;\n        if (to < 0) { to = total - (to * -1) % total; }\n        if (from < 0) { from = total - (from * -1) % total; }\n        if (to < from) { [from, to] = [to, from]; }\n        total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;\n        const slicedData = this.data.slice(from, Math.min(total, length));\n        return this.clone(slicedData, this.view.clone(slicedData)) as this;\n    }\n\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this.type);\n    }\n    public acceptVectorVisitor(visitor: VectorVisitor): any {\n        return VectorVisitor.visitTypeInline(visitor, this.type, this);\n    }\n}\n\nexport abstract class FlatVector<T extends FlatType> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public lows(): IntVector<Int32> { return this.asInt32(0, 2); }\n    public highs(): IntVector<Int32> { return this.asInt32(1, 2); }\n    public asInt32(offset: number = 0, stride: number = 2): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        if (offset > 0) {\n            data = data.slice(offset, this.length - offset);\n        }\n        const int32s = new IntVector(data, new PrimitiveView(data, stride));\n        int32s.length = this.length / stride | 0;\n        return int32s;\n    }\n}\n\nexport abstract class ListVectorBase<T extends (ListType | FlatListType)> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n    public getValueOffset(index: number) {\n        return this.valueOffsets[index];\n    }\n    public getValueLength(index: number) {\n        return this.valueOffsets[index + 1] - this.valueOffsets[index];\n    }\n}\n\nexport abstract class NestedVector<T extends NestedType> extends Vector<T>  {\n    // @ts-ignore\n    public readonly view: NestedView<T>;\n    // @ts-ignore\n    protected _childData: Data<any>[];\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return this.view.getChildAt<R>(index);\n    }\n    public get childData(): Data<any>[] {\n        let data: Data<T> | Data<any>[];\n        if ((data = this._childData)) {\n            // Return the cached childData reference first\n            return data as Data<any>[];\n        } else if (!(<any> (data = this.data) instanceof ChunkedData)) {\n            // If data isn't chunked, cache and return NestedData's childData\n            return this._childData = data.childData;\n        }\n        // Otherwise if the data is chunked, concatenate the childVectors from each chunk\n        // to construct a single chunked Vector for each column. Then return the ChunkedData\n        // instance from each unified chunked column as the childData of a chunked NestedVector\n        const chunks = ((data as any as ChunkedData<T>).chunkVectors as NestedVector<T>[]);\n        return this._childData = chunks\n            .reduce<(Vector<T> | null)[][]>((cols, chunk) => chunk.childData\n            .reduce<(Vector<T> | null)[][]>((cols, _, i) => (\n                (cols[i] || (cols[i] = [])).push(chunk.getChildAt(i))\n            ) && cols || cols, cols), [] as Vector<T>[][])\n        .map((vecs) => Vector.concat<T>(...vecs).data);\n    }\n}\n\nimport { List, Binary, Utf8, Bool, } from './type';\nimport { Null, Int, Float, Decimal, Date_, Time, Timestamp, Interval } from './type';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, Float16, Float32, Float64 } from './type';\nimport { Struct, Union, SparseUnion, DenseUnion, FixedSizeBinary, FixedSizeList, Map_, Dictionary } from './type';\n\nimport { ChunkedView } from './vector/chunked';\nimport { ValidityView } from './vector/validity';\nimport { DictionaryView } from './vector/dictionary';\nimport { ListView, FixedSizeListView, BinaryView, Utf8View } from './vector/list';\nimport { UnionView, DenseUnionView, NestedView, StructView, MapView } from './vector/nested';\nimport { FlatView, NullView, BoolView, PrimitiveView, FixedSizeView, Float16View } from './vector/flat';\nimport { DateDayView, DateMillisecondView, IntervalYearMonthView } from './vector/flat';\nimport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './vector/flat';\nimport { packBools } from './util/bit';\n\nexport class NullVector extends Vector<Null> {\n    constructor(data: Data<Null>, view: View<Null> = new NullView(data)) {\n        super(data, view);\n    }\n}\n\nexport class BoolVector extends Vector<Bool> {\n    public static from(data: IterableArrayLike<boolean>) {\n        return new BoolVector(new BoolData(new Bool(), data.length, null, packBools(data)) as Data<Bool>);\n    }\n    public get values() { return this.data.values; }\n    constructor(data: Data<Bool>, view: View<Bool> = new BoolView(data)) {\n        super(data, view);\n    }\n}\n\nexport class IntVector<T extends Int = Int<any>> extends FlatVector<T> {\n    public static from(data: Int8Array): IntVector<Int8>;\n    public static from(data: Int16Array): IntVector<Int16>;\n    public static from(data: Int32Array): IntVector<Int32>;\n    public static from(data: Uint8Array): IntVector<Uint8>;\n    public static from(data: Uint16Array): IntVector<Uint16>;\n    public static from(data: Uint32Array): IntVector<Uint32>;\n    public static from(data: Int32Array, is64: true): IntVector<Int64>;\n    public static from(data: Uint32Array, is64: true): IntVector<Uint64>;\n    public static from(data: any, is64?: boolean) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? new IntVector(new FlatData(new Int64(), data.length, null, data))\n                : new IntVector(new FlatData(new Uint64(), data.length, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return new IntVector(new FlatData(new Int8(), data.length, null, data));\n            case Int16Array: return new IntVector(new FlatData(new Int16(), data.length, null, data));\n            case Int32Array: return new IntVector(new FlatData(new Int32(), data.length, null, data));\n            case Uint8Array: return new IntVector(new FlatData(new Uint8(), data.length, null, data));\n            case Uint16Array: return new IntVector(new FlatData(new Uint16(), data.length, null, data));\n            case Uint32Array: return new IntVector(new FlatData(new Uint32(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    static defaultView<T extends Int>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<T>, view: View<T> = IntVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class FloatVector<T extends Float = Float<any>> extends FlatVector<T> {\n    public static from(data: Uint16Array): FloatVector<Float16>;\n    public static from(data: Float32Array): FloatVector<Float32>;\n    public static from(data: Float64Array): FloatVector<Float64>;\n    public static from(data: any) {\n        switch (data.constructor) {\n            case Uint16Array: return new FloatVector(new FlatData(new Float16(), data.length, null, data));\n            case Float32Array: return new FloatVector(new FlatData(new Float32(), data.length, null, data));\n            case Float64Array: return new FloatVector(new FlatData(new Float64(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n    static defaultView<T extends Float>(data: Data<T>): FlatView<any> {\n        return data.type.precision !== Precision.HALF ? new FlatView(data) : new Float16View(data as Data<Float16>);\n    }\n    constructor(data: Data<T>, view: View<T> = FloatVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class DateVector extends FlatVector<Date_> {\n    static from(data: Date[], unit: DateUnit = DateUnit.MILLISECOND): DateVector {\n        const type_ = new Date_(unit);\n        const converted =\n            unit === DateUnit.MILLISECOND ?\n            IntUtil.Int64.convertArray(data.map((d) => d.valueOf())) :\n            unit === DateUnit.DAY ?\n            Int32Array.from(data.map((d) => d.valueOf() / 86400000)) :\n            undefined;\n        if (converted === undefined) {\n            throw new TypeError(`Unrecognized date unit \"${DateUnit[unit]}\"`);\n        }\n        return new DateVector(new FlatData(type_, data.length, null, converted));\n    }\n    static defaultView<T extends Date_>(data: Data<T>) {\n        return data.type.unit === DateUnit.DAY ? new DateDayView(data) : new DateMillisecondView(data, 2);\n    }\n    constructor(data: Data<Date_>, view: View<Date_> = DateVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case DateUnit.DAY: return new IntVector(data, new TimestampDayView(data as any, 1) as any);\n            case DateUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[this.type.unit]}\"`);\n    }\n    public indexOf(search: Date) {\n        return this.asEpochMilliseconds().indexOf(search.valueOf());\n    }\n}\n\nexport class DecimalVector extends FlatVector<Decimal> {\n    constructor(data: Data<Decimal>, view: View<Decimal> = new FixedSizeView(data, 4)) {\n        super(data, view);\n    }\n}\n\nexport class TimeVector extends FlatVector<Time> {\n    static defaultView<T extends Time>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<Time>, view: View<Time> = TimeVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class TimestampVector extends FlatVector<Timestamp> {\n    constructor(data: Data<Timestamp>, view: View<Timestamp> = new FixedSizeView(data, 2)) {\n        super(data, view);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case TimeUnit.SECOND: return new IntVector(data, new TimestampSecondView(data as any, 1) as any);\n            case TimeUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n            case TimeUnit.MICROSECOND: return new IntVector(data, new TimestampMicrosecondView(data as any, 2) as any);\n            case TimeUnit.NANOSECOND: return new IntVector(data, new TimestampNanosecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized time unit \"${TimeUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class IntervalVector extends FlatVector<Interval> {\n    static defaultView<T extends Interval>(data: Data<T>) {\n        return data.type.unit === IntervalUnit.YEAR_MONTH ? new IntervalYearMonthView(data) : new FixedSizeView(data, 2);\n    }\n    constructor(data: Data<Interval>, view: View<Interval> = IntervalVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class BinaryVector extends ListVectorBase<Binary> {\n    constructor(data: Data<Binary>, view: View<Binary> = new BinaryView(data)) {\n        super(data, view);\n    }\n    public asUtf8() {\n        return new Utf8Vector((this.data as FlatListData<any>).clone(new Utf8()));\n    }\n}\n\nexport class FixedSizeBinaryVector extends FlatVector<FixedSizeBinary> {\n    constructor(data: Data<FixedSizeBinary>, view: View<FixedSizeBinary> = new FixedSizeView(data, data.type.byteWidth)) {\n        super(data, view);\n    }\n}\n\nexport class Utf8Vector extends ListVectorBase<Utf8> {\n    constructor(data: Data<Utf8>, view: View<Utf8> = new Utf8View(data)) {\n        super(data, view);\n    }\n    public asBinary() {\n        return new BinaryVector((this.data as FlatListData<any>).clone(new Binary()));\n    }\n}\n\nexport class ListVector<T extends DataType = DataType> extends ListVectorBase<List<T>> {\n    // @ts-ignore\n    public readonly view: ListView<T>;\n    constructor(data: Data<List<T>>, view: ListView<T> = new ListView<T>(data as any)) {\n        super(data, view);\n    }\n    public getChildAt(index: number): Vector<T> | null {\n        return this.view.getChildAt<T>(index);\n    }\n}\n\nexport class FixedSizeListVector<T extends DataType = DataType> extends Vector<FixedSizeList<T>> {\n    // @ts-ignore\n    public readonly view: FixedSizeListView<T>;\n    constructor(data: Data<FixedSizeList<T>>, view: View<FixedSizeList<T>> = new FixedSizeListView(data)) {\n        super(data, view);\n    }\n    public getChildAt(index: number): Vector<T> | null {\n        return this.view.getChildAt<T>(index);\n    }\n}\n\nexport class MapVector extends NestedVector<Map_> {\n    constructor(data: Data<Map_>, view: View<Map_> = new MapView(data)) {\n        super(data, view);\n    }\n    public asStruct() {\n        return new StructVector((this.data as NestedData<any>).clone(new Struct(this.type.children)));\n    }\n}\n\nexport class StructVector extends NestedVector<Struct> {\n    constructor(data: Data<Struct>, view: View<Struct> = new StructView(data)) {\n        super(data, view);\n    }\n    public asMap(keysSorted: boolean = false) {\n        return new MapVector((this.data as NestedData<any>).clone(new Map_(keysSorted, this.type.children)));\n    }\n}\n\nexport class UnionVector<T extends (SparseUnion | DenseUnion) = any> extends NestedVector<T> {\n    constructor(data: Data<T>, view: View<T> = <any> (data.type.mode === UnionMode.Sparse ? new UnionView<SparseUnion>(data as Data<SparseUnion>) : new DenseUnionView(data as Data<DenseUnion>))) {\n        super(data, view);\n    }\n}\n\nexport class DictionaryVector<T extends DataType = DataType> extends Vector<Dictionary<T>> {\n    // @ts-ignore\n    public readonly indices: Vector<Int>;\n    // @ts-ignore\n    public readonly dictionary: Vector<T>;\n    constructor(data: Data<Dictionary<T>>, view: View<Dictionary<T>> = new DictionaryView<T>(data.dictionary, new IntVector(data.indices))) {\n        super(data as Data<any>, view);\n        if (view instanceof ValidityView) {\n            view = (view as any).view;\n        }\n        if (data instanceof DictionaryData && view instanceof DictionaryView) {\n            this.indices = view.indices;\n            this.dictionary = data.dictionary;\n        } else if (data instanceof ChunkedData && view instanceof ChunkedView) {\n            const chunks = view.chunkVectors as DictionaryVector<T>[];\n            // Assume the last chunk's dictionary data is the most up-to-date,\n            // including data from DictionaryBatches that were marked as deltas\n            this.dictionary = chunks[chunks.length - 1].dictionary;\n            this.indices = chunks.reduce<Vector<Int> | null>(\n                (idxs: Vector<Int> | null, dict: DictionaryVector<T>) =>\n                    !idxs ? dict.indices! : idxs.concat(dict.indices!),\n                null\n            )!;\n        } else {\n            throw new TypeError(`Unrecognized DictionaryVector view`);\n        }\n    }\n    public getKey(index: number) { return this.indices.get(index); }\n    public getValue(key: number) { return this.dictionary.get(key); }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n}\n\nexport const createVector = ((VectorLoader: new <T extends DataType>(data: Data<T>) => TypeVisitor) => (\n    <T extends DataType>(data: Data<T>) => TypeVisitor.visitTypeInline(new VectorLoader(data), data.type) as Vector<T>\n))(class VectorLoader<T extends DataType> extends TypeVisitor {\n    constructor(private data: Data<T>) { super(); }\n    visitNull           (_type: Null)            { return new NullVector(<any> this.data);            }\n    visitInt            (_type: Int)             { return new IntVector(<any> this.data);             }\n    visitFloat          (_type: Float)           { return new FloatVector(<any> this.data);           }\n    visitBinary         (_type: Binary)          { return new BinaryVector(<any> this.data);          }\n    visitUtf8           (_type: Utf8)            { return new Utf8Vector(<any> this.data);            }\n    visitBool           (_type: Bool)            { return new BoolVector(<any> this.data);            }\n    visitDecimal        (_type: Decimal)         { return new DecimalVector(<any> this.data);         }\n    visitDate           (_type: Date_)           { return new DateVector(<any> this.data);            }\n    visitTime           (_type: Time)            { return new TimeVector(<any> this.data);            }\n    visitTimestamp      (_type: Timestamp)       { return new TimestampVector(<any> this.data);       }\n    visitInterval       (_type: Interval)        { return new IntervalVector(<any> this.data);        }\n    visitList           (_type: List)            { return new ListVector(<any> this.data);            }\n    visitStruct         (_type: Struct)          { return new StructVector(<any> this.data);          }\n    visitUnion          (_type: Union)           { return new UnionVector(<any> this.data);           }\n    visitFixedSizeBinary(_type: FixedSizeBinary) { return new FixedSizeBinaryVector(<any> this.data); }\n    visitFixedSizeList  (_type: FixedSizeList)   { return new FixedSizeListVector(<any> this.data);   }\n    visitMap            (_type: Map_)            { return new MapVector(<any> this.data);             }\n    visitDictionary     (_type: Dictionary)      { return new DictionaryVector(<any> this.data);      }\n});\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { popcnt_bit_range } from './util/bit';\nimport { VectorLike, Vector } from './vector';\nimport { Int, Bool, FlatListType, List, Struct, Map_ } from './type';\nimport { VectorType, TypedArray, TypedArrayConstructor, Dictionary } from './type';\nimport { DataType, FlatType, ListType, NestedType, SingleNestedType, DenseUnion, SparseUnion } from './type';\n\nexport function toTypedArray<T extends TypedArray>(ArrayType: TypedArrayConstructor<T>, values?: T | ArrayLike<number> | Iterable<number> | null): T {\n    if (!ArrayType && ArrayBuffer.isView(values)) { return values; }\n    return values instanceof ArrayType ? values\n         : !values || !ArrayBuffer.isView(values) ? ArrayType.from(values || [])\n         : new ArrayType(values.buffer, values.byteOffset, values.byteLength / ArrayType.BYTES_PER_ELEMENT);\n}\n\nexport type Data<T extends DataType> = DataTypes<T>[T['TType']] & BaseData<T>;\nexport interface DataTypes<T extends DataType> {\n/*                [Type.NONE]*/  0: BaseData<T>;\n/*                [Type.Null]*/  1: FlatData<T>;\n/*                 [Type.Int]*/  2: FlatData<T>;\n/*               [Type.Float]*/  3: FlatData<T>;\n/*              [Type.Binary]*/  4: FlatListData<T>;\n/*                [Type.Utf8]*/  5: FlatListData<T>;\n/*                [Type.Bool]*/  6: BoolData;\n/*             [Type.Decimal]*/  7: FlatData<T>;\n/*                [Type.Date]*/  8: FlatData<T>;\n/*                [Type.Time]*/  9: FlatData<T>;\n/*           [Type.Timestamp]*/ 10: FlatData<T>;\n/*            [Type.Interval]*/ 11: FlatData<T>;\n/*                [Type.List]*/ 12: ListData<List<T>>;\n/*              [Type.Struct]*/ 13: NestedData<Struct>;\n/*               [Type.Union]*/ 14: UnionData;\n/*     [Type.FixedSizeBinary]*/ 15: FlatData<T>;\n/*       [Type.FixedSizeList]*/ 16: SingleNestedData<any>;\n/*                 [Type.Map]*/ 17: NestedData<Map_>;\n/*  [Type.DenseUnion]*/ DenseUnion: DenseUnionData;\n/*[Type.SparseUnion]*/ SparseUnion: SparseUnionData;\n/*[  Type.Dictionary]*/ Dictionary: DictionaryData<any>;\n}\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Array::null_count is called the\n// first time, the null count will be computed. See ARROW-33\nexport type kUnknownNullCount = -1;\nexport const kUnknownNullCount = -1;\n\nexport class BaseData<T extends DataType = DataType> implements VectorLike {\n    public type: T;\n    public length: number;\n    public offset: number;\n    // @ts-ignore\n    public childData: Data<any>[];\n    protected _nullCount: number | kUnknownNullCount;\n    protected /*  [VectorType.OFFSET]:*/ 0?: Int32Array;\n    protected /*    [VectorType.DATA]:*/ 1?: T['TArray'];\n    protected /*[VectorType.VALIDITY]:*/ 2?: Uint8Array;\n    protected /*    [VectorType.TYPE]:*/ 3?: Int8Array;\n    constructor(type: T, length: number, offset?: number, nullCount?: number) {\n        this.type = type;\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    }\n    public get typeId() { return this.type.TType; }\n    public get nullBitmap() { return this[VectorType.VALIDITY]; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount === -1 && (nullBitmap = this[VectorType.VALIDITY])) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new BaseData(type, length, offset, nullCount) as any;\n    }\n    public slice(offset: number, length: number) {\n        return length <= 0 ? this : this.sliceInternal(this.clone(\n            this.type, length, this.offset + offset, +(this._nullCount === 0) - 1\n        ) as any, offset, length);\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        let arr: any;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = this[VectorType.TYPE]) && (clone[VectorType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = this[VectorType.OFFSET]) && (clone[VectorType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = this[VectorType.DATA]) && (clone[VectorType.DATA] = this.sliceData(arr, offset, length));\n        return clone;\n    }\n    protected sliceData(data: T['TArray'] & TypedArray, offset: number, length: number) {\n        return data.subarray(offset, offset + length);\n    }\n    protected sliceOffsets(valueOffsets: Int32Array, offset: number, length: number) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n}\n\nexport class FlatData<T extends FlatType> extends BaseData<T> {\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, data: Iterable<number>, offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this[VectorType.DATA] = toTypedArray(this.ArrayType, data);\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new (this.constructor as any)(type, length, this[VectorType.VALIDITY], this[VectorType.DATA], offset, nullCount) as FlatData<R>;\n    }\n}\n\nexport class BoolData extends FlatData<Bool> {\n    protected sliceData(data: Uint8Array) { return data; }\n}\n\nexport class FlatListData<T extends FlatListType> extends FlatData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, data: T['TArray'], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, data, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new FlatListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this[VectorType.DATA], offset, nullCount) as FlatListData<R>;\n    }\n}\n\nexport class DictionaryData<T extends DataType> extends BaseData<Dictionary<T>> {\n    protected _dictionary: Vector<T>;\n    protected _indices: Data<Int<any>>;\n    public get indices() { return this._indices; }\n    public get dictionary() { return this._dictionary; }\n    constructor(type: Dictionary<T>, dictionary: Vector<T>, indices: Data<Int<any>>) {\n        super(type, indices.length, indices.offset, (indices as any)._nullCount);\n        this._indices = indices;\n        this._dictionary = dictionary;\n    }\n    public get nullCount() { return this._indices.nullCount; }\n    public get nullBitmap() { return this._indices.nullBitmap; }\n    public clone<R extends Dictionary<T>>(type: R, length = this.length, offset = this.offset) {\n        const data = this._dictionary.data.clone(type.dictionary as any);\n        return new DictionaryData<R>(\n            this.type as any,\n            this._dictionary.clone(data) as any,\n            this._indices.slice(offset - this.offset, length)\n        ) as any;\n    }\n    protected sliceInternal(clone: this, _offset: number, _length: number) {\n        clone.length = clone._indices.length;\n        clone._nullCount = (clone._indices as any)._nullCount;\n        return clone;\n    }\n}\n\nexport class NestedData<T extends NestedType = NestedType> extends BaseData<T> {\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this.childData = childData;\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount) as any;\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        if (!this[VectorType.OFFSET]) {\n            clone.childData = this.childData.map((child) => child.slice(offset, length));\n        }\n        return super.sliceInternal(clone, offset, length);\n    }\n}\n\nexport class SingleNestedData<T extends SingleNestedType> extends NestedData<T> {\n    protected _valuesData: Data<T>;\n    public get values() { return this._valuesData; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, [valueChildData], offset, nullCount);\n        this._valuesData = valueChildData;\n    }\n}\n\nexport class ListData<T extends ListType> extends SingleNestedData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, valueChildData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new ListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this._valuesData as any, offset, nullCount) as any;\n    }\n}\n\nexport class UnionData<T extends (DenseUnion | SparseUnion) = any> extends NestedData<T> {\n    public /*    [VectorType.TYPE]:*/ 3: T['TArray'];\n    public get typeIds() { return this[VectorType.TYPE]; }\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, childData, offset, nullCount);\n        this[VectorType.TYPE] = toTypedArray(Int8Array, typeIds);\n        this.typeIdToChildIndex = type.typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new UnionData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount) as any;\n    }\n}\n\nexport class SparseUnionData extends UnionData<SparseUnion> {\n    constructor(type: SparseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n    }\n    public clone<R extends SparseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new SparseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this.childData,\n            offset, nullCount\n        ) as any;\n    }\n}\n\nexport class DenseUnionData extends UnionData<DenseUnion> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: DenseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, valueOffsets: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends DenseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new DenseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this[VectorType.OFFSET],\n            this.childData,\n            offset, nullCount\n        ) as any;\n    }\n}\n\nexport class ChunkedData<T extends DataType> extends BaseData<T> {\n    // @ts-ignore\n    protected _chunkData: Data<T>[];\n    protected _chunkVectors: Vector<T>[];\n    protected _chunkOffsets: Uint32Array;\n    public get chunkVectors() { return this._chunkVectors; }\n    public get chunkOffsets() { return this._chunkOffsets; }\n    public get chunkData() {\n        return this._chunkData || (\n               this._chunkData = this._chunkVectors.map(({ data }) => data));\n    }\n    constructor(type: T, length: number, chunkVectors: Vector<T>[], offset?: number, nullCount?: number, chunkOffsets?: Uint32Array) {\n        super(type, length, offset, nullCount);\n        this._chunkVectors = chunkVectors;\n        this._chunkOffsets = chunkOffsets || ChunkedData.computeOffsets(chunkVectors);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount === -1) {\n            this._nullCount = nullCount = this._chunkVectors.reduce((x, c) => x + c.nullCount, 0);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new ChunkedData(\n            type, length,\n            this._chunkVectors.map((vec) => vec.clone(vec.data.clone(type))) as any,\n            offset, nullCount, this._chunkOffsets\n        ) as any;\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        const chunks = this._chunkVectors;\n        const offsets = this._chunkOffsets;\n        const chunkSlices: Vector<T>[] = [];\n        for (let childIndex = -1, numChildren = chunks.length; ++childIndex < numChildren;) {\n            const child = chunks[childIndex];\n            const childLength = child.length;\n            const childOffset = offsets[childIndex];\n            // If the child is to the right of the slice boundary, exclude\n            if (childOffset >= offset + length) { continue; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= childOffset + childLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (childOffset >= offset && (childOffset + childLength) <= offset + length) {\n                chunkSlices.push(child);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - childOffset);\n            const end = begin + Math.min(childLength - begin, (offset + length) - childOffset);\n            chunkSlices.push(child.slice(begin, end));\n        }\n        clone._chunkVectors = chunkSlices;\n        clone._chunkOffsets = ChunkedData.computeOffsets(chunkSlices);\n        return clone;\n    }\n    static computeOffsets<T extends DataType>(childVectors: Vector<T>[]) {\n        const childOffsets = new Uint32Array(childVectors.length + 1);\n        for (let index = 0, length = childOffsets.length, childOffset = childOffsets[0] = 0; ++index < length;) {\n            childOffsets[index] = (childOffset += childVectors[index - 1].length);\n        }\n        return childOffsets;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst carryBit16 = 1 << 16;\n\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    high(): number { return this.buffer[1]; }\n    low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View } from '../vector';\nimport { getBool, setBool, iterateBits } from '../util/bit';\nimport { FlatType, PrimitiveType, IterableArrayLike } from '../type';\nimport { Bool, Float16, Date_, Interval, Null, Int32, Timestamp } from '../type';\n\nexport class FlatView<T extends FlatType> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public get(index: number): T['TValue'] {\n        return this.values[index];\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.values[index] = value;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values.subarray(0, this.length);\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue']> {\n        return this.values.subarray(0, this.length)[Symbol.iterator]() as IterableIterator<T['TValue']>;\n    }\n}\n\nexport class NullView implements View<Null> {\n    public length: number;\n    constructor(data: Data<Null>) {\n        this.length = data.length;\n    }\n    public clone(data: Data<Null>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public set(): void {}\n    public get() { return null; }\n    public toArray(): IterableArrayLike<null> {\n        return [...this];\n    }\n    public indexOf(search: any) {\n        // if you're looking for nulls and the view isn't empty, we've got 'em!\n        return search === null && this.length > 0 ? 0 : -1;\n    }\n    public *[Symbol.iterator](): IterableIterator<null> {\n        for (let index = -1, length = this.length; ++index < length;) {\n            yield null;\n        }\n    }\n}\n\nexport class BoolView extends FlatView<Bool> {\n    protected offset: number;\n    constructor(data: Data<Bool>) {\n        super(data);\n        this.offset = data.offset;\n    }\n    public toArray() { return [...this]; }\n    public get(index: number): boolean {\n        const boolBitIndex = this.offset + index;\n        return getBool(null, index, this.values[boolBitIndex >> 3], boolBitIndex % 8);\n    }\n    public set(index: number, value: boolean): void {\n        setBool(this.values, this.offset + index, value);\n    }\n    public [Symbol.iterator](): IterableIterator<boolean> {\n        return iterateBits<boolean>(this.values, this.offset, this.length, this.values, getBool);\n    }\n}\n\nexport class PrimitiveView<T extends PrimitiveType> extends FlatView<T> {\n    public size: number;\n    public ArrayType: T['ArrayType'];\n    constructor(data: Data<T>, size?: number) {\n        super(data);\n        this.size = size || 1;\n        this.ArrayType = data.type.ArrayType;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, this.size) as this;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values[index * size];\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values[index * size] = value;\n    }\n    public get(index: number): T['TValue'] {\n        return this.getValue(this.values, index, this.size);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setValue(this.values, index, this.size, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.size > 1 ?\n            new this.ArrayType(this) :\n            this.values.subarray(0, this.length);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getValue;\n        const { size, values, length } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, size);\n        }\n    }\n}\n\nexport class FixedSizeView<T extends PrimitiveType> extends PrimitiveView<T> {\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values;\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value.every((d: number, i: number) => d === search[i])) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values.subarray(index * size, index * size + size);\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values.set((value as T['TArray']).subarray(0, size), index * size);\n    }\n}\n\nexport class Float16View extends PrimitiveView<Float16> {\n    public toArray() { return new Float32Array(this); }\n    protected getValue(values: Uint16Array, index: number, size: number): number {\n        return (values[index * size] - 32767) / 32767;\n    }\n    protected setValue(values: Uint16Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 32767) + 32767;\n    }\n}\n\nexport class DateDayView extends PrimitiveView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochDaysToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        values[index * size] = value.valueOf() / 86400000;\n    }\n}\n\nexport class DateMillisecondView extends FixedSizeView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochMillisecondsLongToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        const epochMs = value.valueOf();\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampDayView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochDaysToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 86400000) | 0;\n    }\n}\n\nexport class TimestampSecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochSecondsToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 1000) | 0;\n    }\n}\n\nexport class TimestampMillisecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMillisecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampMicrosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMicrosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000) / 4294967296) | 0;\n    }\n}\n\nexport class TimestampNanosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochNanosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000000) / 4294967296) | 0;\n    }\n}\n\nexport class IntervalYearMonthView extends PrimitiveView<Interval> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Int32Array {\n        const interval = values[index * size];\n        return new Int32Array([interval / 12, /* years */ interval % 12  /* months */]);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Int32Array): void {\n        values[index * size] = (value[0] * 12) + (value[1] % 12);\n    }\n}\n\nexport class IntervalYearView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] / 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 12) + (values[index * size] % 12);\n    }\n}\n\nexport class IntervalMonthView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] % 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (values[index * size] * 12) + (value % 12);\n    }\n}\n\nexport function epochSecondsToMs(data: Int32Array, index: number) { return 1000 * data[index]; }\nexport function epochDaysToMs(data: Int32Array, index: number) { return 86400000 * data[index]; }\nexport function epochMillisecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1]) + (data[index] >>> 0); }\nexport function epochMicrosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000); }\nexport function epochNanosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000); }\n\nexport function epochMillisecondsToDate(epochMs: number) { return new Date(epochMs); }\nexport function epochDaysToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochDaysToMs(data, index)); }\nexport function epochSecondsToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochSecondsToMs(data, index)); }\nexport function epochNanosecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochNanosecondsLongToMs(data, index)); }\nexport function epochMillisecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index)); }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Schema, Long, MessageHeader, MetadataVersion } from '../type';\n\nexport class Footer {\n    constructor(public dictionaryBatches: FileBlock[], public recordBatches: FileBlock[], public schema: Schema) {}\n}\n\nexport class FileBlock {\n    public offset: number;\n    public bodyLength: number;\n    constructor(public metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\nexport class Message {\n    public bodyLength: number;\n    public version: MetadataVersion;\n    public headerType: MessageHeader;\n    constructor(version: MetadataVersion, bodyLength: Long | number, headerType: MessageHeader) {\n        this.version = version;\n        this.headerType = headerType;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    static isSchema(m: Message): m is Schema { return m.headerType === MessageHeader.Schema; }\n    static isRecordBatch(m: Message): m is RecordBatchMetadata { return m.headerType === MessageHeader.RecordBatch; }\n    static isDictionaryBatch(m: Message): m is DictionaryBatch { return m.headerType === MessageHeader.DictionaryBatch; }\n}\n\nexport class RecordBatchMetadata extends Message {\n    public length: number;\n    public nodes: FieldMetadata[];\n    public buffers: BufferMetadata[];\n    constructor(version: MetadataVersion, length: Long | number, nodes: FieldMetadata[], buffers: BufferMetadata[], bodyLength?: Long | number) {\n        if (bodyLength === void(0)) {\n            bodyLength = buffers.reduce((bodyLength, buffer) => bodyLength + buffer.length, 0);\n        }\n        super(version, bodyLength, MessageHeader.RecordBatch);\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class DictionaryBatch extends Message {\n    public id: number;\n    public isDelta: boolean;\n    public data: RecordBatchMetadata;\n    constructor(version: MetadataVersion, data: RecordBatchMetadata, id: Long | number, isDelta: boolean = false) {\n        super(version, data.bodyLength, MessageHeader.DictionaryBatch);\n        this.isDelta = isDelta;\n        this.data = data;\n        this.id = typeof id === 'number' ? id : id.low;\n    }\n    private static atomicDictionaryId = 0;\n    public static getId() { return DictionaryBatch.atomicDictionaryId++; }\n    public get nodes(): FieldMetadata[] { return this.data.nodes; }\n    public get buffers(): BufferMetadata[] { return this.data.buffers; }\n}\n\nexport class BufferMetadata {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class FieldMetadata {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { TypedArray } from '../type';\n\nexport function align(value: number, alignment: number) {\n    return value + padding(value, alignment);\n}\n\nexport function padding(value: number, alignment: number) {\n    return (value % alignment === 0 ? 0 : alignment - value % alignment);\n}\n\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\nexport function packBools(values: Iterable<any>) {\n    let n = 0, i = 0;\n    let xs: number[] = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do { xs[i] = 0; } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\nexport function popcnt_array(arr: TypedArray, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","export { ChunkedView } from './chunked';\nexport { ValidityView } from './validity';\nexport { DictionaryView } from './dictionary';\nexport { ListView, FixedSizeListView, BinaryView, Utf8View } from './list';\nexport { UnionView, DenseUnionView, NestedView, StructView, MapView } from './nested';\nexport { FlatView, NullView, BoolView, PrimitiveView, FixedSizeView, Float16View } from './flat';\nexport { DateDayView, DateMillisecondView } from './flat';\nexport { IntervalYearMonthView, IntervalYearView, IntervalMonthView } from './flat';\nexport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './flat';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\nexport const PADDING = 4;\nexport const MAGIC_STR = 'ARROW1';\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function isValidArrowFile(bb: ByteBuffer) {\n    let fileLength = bb.capacity(), footerLength: number, lengthOffset: number;\n    if ((fileLength < magicX2AndPadding /*                     Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        (/*                                                    Invalid footer length  */\n        (footerLength = bb.readInt32(lengthOffset = fileLength - magicAndPadding)) < 1 &&\n        (footerLength + lengthOffset > fileLength))) {\n        return false;\n    }\n    return true;\n}\n\nexport const magicLength = MAGIC.length;\nexport const magicAndPadding = magicLength + PADDING;\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { Type, DataType, Dictionary } from './type';\nimport { Utf8, Binary, Decimal, FixedSizeBinary } from './type';\nimport { List, FixedSizeList, Union, Map_, Struct } from './type';\nimport { Bool, Null, Int, Float, Date_, Time, Interval, Timestamp } from './type';\n\nexport interface VisitorNode {\n    acceptTypeVisitor(visitor: TypeVisitor): any;\n    acceptVectorVisitor(visitor: VectorVisitor): any;\n}\n\nexport abstract class TypeVisitor {\n    visit(type: Partial<VisitorNode>): any {\n        return type.acceptTypeVisitor && type.acceptTypeVisitor(this) || null;\n    }\n    visitMany(types: Partial<VisitorNode>[]): any[] {\n        return types.map((type) => this.visit(type));\n    }\n    abstract visitNull?(type: Null): any;\n    abstract visitBool?(type: Bool): any;\n    abstract visitInt?(type: Int): any;\n    abstract visitFloat?(type: Float): any;\n    abstract visitUtf8?(type: Utf8): any;\n    abstract visitBinary?(type: Binary): any;\n    abstract visitFixedSizeBinary?(type: FixedSizeBinary): any;\n    abstract visitDate?(type: Date_): any;\n    abstract visitTimestamp?(type: Timestamp): any;\n    abstract visitTime?(type: Time): any;\n    abstract visitDecimal?(type: Decimal): any;\n    abstract visitList?(type: List): any;\n    abstract visitStruct?(type: Struct): any;\n    abstract visitUnion?(type: Union<any>): any;\n    abstract visitDictionary?(type: Dictionary): any;\n    abstract visitInterval?(type: Interval): any;\n    abstract visitFixedSizeList?(type: FixedSizeList): any;\n    abstract visitMap?(type: Map_): any;\n\n    static visitTypeInline<T extends DataType>(visitor: TypeVisitor, type: T): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull            && visitor.visitNull(type            as any as Null);\n            case Type.Int:             return visitor.visitInt             && visitor.visitInt(type             as any as Int);\n            case Type.Float:           return visitor.visitFloat           && visitor.visitFloat(type           as any as Float);\n            case Type.Binary:          return visitor.visitBinary          && visitor.visitBinary(type          as any as Binary);\n            case Type.Utf8:            return visitor.visitUtf8            && visitor.visitUtf8(type            as any as Utf8);\n            case Type.Bool:            return visitor.visitBool            && visitor.visitBool(type            as any as Bool);\n            case Type.Decimal:         return visitor.visitDecimal         && visitor.visitDecimal(type         as any as Decimal);\n            case Type.Date:            return visitor.visitDate            && visitor.visitDate(type            as any as Date_);\n            case Type.Time:            return visitor.visitTime            && visitor.visitTime(type            as any as Time);\n            case Type.Timestamp:       return visitor.visitTimestamp       && visitor.visitTimestamp(type       as any as Timestamp);\n            case Type.Interval:        return visitor.visitInterval        && visitor.visitInterval(type        as any as Interval);\n            case Type.List:            return visitor.visitList            && visitor.visitList(type            as any as List<T>);\n            case Type.Struct:          return visitor.visitStruct          && visitor.visitStruct(type          as any as Struct);\n            case Type.Union:           return visitor.visitUnion           && visitor.visitUnion(type           as any as Union);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(type as any as FixedSizeBinary);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList   && visitor.visitFixedSizeList(type   as any as FixedSizeList);\n            case Type.Map:             return visitor.visitMap             && visitor.visitMap(type             as any as Map_);\n            case Type.Dictionary:      return visitor.visitDictionary      && visitor.visitDictionary(type      as any as Dictionary);\n            default: return null;\n        }\n    }\n}\n\nexport abstract class VectorVisitor {\n    visit(vector: Partial<VisitorNode>): any {\n        return vector.acceptVectorVisitor && vector.acceptVectorVisitor(this) || null;\n    }\n    visitMany(vectors: Partial<VisitorNode>[]): any[] {\n        return vectors.map((vector) => this.visit(vector));\n    }\n    abstract visitNull?(vector: Vector<Null>): any;\n    abstract visitBool?(vector: Vector<Bool>): any;\n    abstract visitInt?(vector: Vector<Int>): any;\n    abstract visitFloat?(vector: Vector<Float>): any;\n    abstract visitUtf8?(vector: Vector<Utf8>): any;\n    abstract visitBinary?(vector: Vector<Binary>): any;\n    abstract visitFixedSizeBinary?(vector: Vector<FixedSizeBinary>): any;\n    abstract visitDate?(vector: Vector<Date_>): any;\n    abstract visitTimestamp?(vector: Vector<Timestamp>): any;\n    abstract visitTime?(vector: Vector<Time>): any;\n    abstract visitDecimal?(vector: Vector<Decimal>): any;\n    abstract visitList?(vector: Vector<List>): any;\n    abstract visitStruct?(vector: Vector<Struct>): any;\n    abstract visitUnion?(vector: Vector<Union<any>>): any;\n    abstract visitDictionary?(vector: Vector<Dictionary>): any;\n    abstract visitInterval?(vector: Vector<Interval>): any;\n    abstract visitFixedSizeList?(vector: Vector<FixedSizeList>): any;\n    abstract visitMap?(vector: Vector<Map_>): any;\n\n    static visitTypeInline<T extends DataType>(visitor: VectorVisitor, type: T, vector: Vector<T>): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull            && visitor.visitNull(vector            as any as Vector<Null>);\n            case Type.Int:             return visitor.visitInt             && visitor.visitInt(vector             as any as Vector<Int>);\n            case Type.Float:           return visitor.visitFloat           && visitor.visitFloat(vector           as any as Vector<Float>);\n            case Type.Binary:          return visitor.visitBinary          && visitor.visitBinary(vector          as any as Vector<Binary>);\n            case Type.Utf8:            return visitor.visitUtf8            && visitor.visitUtf8(vector            as any as Vector<Utf8>);\n            case Type.Bool:            return visitor.visitBool            && visitor.visitBool(vector            as any as Vector<Bool>);\n            case Type.Decimal:         return visitor.visitDecimal         && visitor.visitDecimal(vector         as any as Vector<Decimal>);\n            case Type.Date:            return visitor.visitDate            && visitor.visitDate(vector            as any as Vector<Date_>);\n            case Type.Time:            return visitor.visitTime            && visitor.visitTime(vector            as any as Vector<Time>);\n            case Type.Timestamp:       return visitor.visitTimestamp       && visitor.visitTimestamp(vector       as any as Vector<Timestamp>);\n            case Type.Interval:        return visitor.visitInterval        && visitor.visitInterval(vector        as any as Vector<Interval>);\n            case Type.List:            return visitor.visitList            && visitor.visitList(vector            as any as Vector<List<T>>);\n            case Type.Struct:          return visitor.visitStruct          && visitor.visitStruct(vector          as any as Vector<Struct>);\n            case Type.Union:           return visitor.visitUnion           && visitor.visitUnion(vector           as any as Vector<Union>);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(vector as any as Vector<FixedSizeBinary>);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList   && visitor.visitFixedSizeList(vector   as any as Vector<FixedSizeList>);\n            case Type.Map:             return visitor.visitMap             && visitor.visitMap(vector             as any as Vector<Map_>);\n            case Type.Dictionary:      return visitor.visitDictionary      && visitor.visitDictionary(vector      as any as Vector<Dictionary>);\n            default: return null;\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Vector, DictionaryVector } from './vector';\n\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n        this.vector = batch.getChildAt(this.colidx)!;\n        return this.vector.get.bind(this.vector);\n    }\n}\n\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[]\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p)\n        }, [])\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p)\n        }, [])\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Struct, DataType } from './type';\nimport { flatbuffers } from 'flatbuffers';\nimport { View, Vector, StructVector } from './vector';\nimport { Data, NestedData } from './data';\nimport { PipeIterator } from './util/node';\nimport { valueToString, leftPad } from './util/pretty';\n\nimport Long = flatbuffers.Long;\n\nexport class RecordBatch extends StructVector {\n    public static from(vectors: Vector[]) {\n        return new RecordBatch(Schema.from(vectors),\n            Math.max(...vectors.map((v) => v.length)),\n            vectors\n        );\n    }\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    constructor(schema: Schema, data: Data<Struct>, view: View<Struct>);\n    constructor(schema: Schema, numRows: Long | number, cols: Data<any> | Vector[]);\n    constructor(...args: any[]) {\n        if (typeof args[1] !== 'number') {\n            const data = args[1] as Data<Struct>;\n            super(data, args[2]);\n            this.schema = args[0];\n            this.length = data.length;\n        } else {\n            const [schema, numRows, cols] = args;\n            const childData: Data<any>[] = new Array(cols.length);\n            for (let index = -1, length = cols.length; ++index < length;) {\n                const col: Data<any> | Vector = cols[index];\n                childData[index] = col instanceof Vector ? col.data : col;\n            }\n            super(new NestedData(new Struct(schema.fields), numRows, null, childData));\n            this.schema = schema;\n            this.length = numRows;\n        }\n        this.numCols = this.schema.fields.length;\n    }\n    public clone<R extends Struct>(data: Data<R>, view: View<R> = this.view.clone(data)): this {\n        return new RecordBatch(this.schema, data as any, view) as any;\n    }\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numCols ? null : super.getChildAt<R>(index);\n    }\n    public select(...columnNames: string[]) {\n        const fields = this.schema.fields;\n        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new RecordBatch(\n            this.schema.select(...columnNames), this.length,\n            this.childData.filter((_, i) => namesToKeep[fields[i].name])\n        );\n    }\n    public rowsToString(separator = ' | ', rowOffset = 0, maxColumnWidths: number[] = []) {\n        return new PipeIterator(recordBatchRowsToString(this, separator, rowOffset, maxColumnWidths), 'utf8');\n    }\n}\n\nfunction* recordBatchRowsToString(recordBatch: RecordBatch, separator = ' | ', rowOffset = 0, maxColumnWidths: number[] = []) {\n    const fields = recordBatch.schema.fields;\n    const header = ['row_id', ...fields.map((f) => `${f}`)].map(valueToString);\n    header.forEach((x, i) => {\n        maxColumnWidths[i] = Math.max(maxColumnWidths[i] || 0, x.length);\n    });\n    // Pass one to convert to strings and count max column widths\n    for (let i = -1, n = recordBatch.length - 1; ++i < n;) {\n        let val, row = [rowOffset + i, ...recordBatch.get(i) as Struct['TValue']];\n        for (let j = -1, k = row.length; ++j < k; ) {\n            val = valueToString(row[j]);\n            maxColumnWidths[j] = Math.max(maxColumnWidths[j] || 0, val.length);\n        }\n    }\n    for (let i = -1; ++i < recordBatch.length;) {\n        if ((rowOffset + i) % 1000 === 0) {\n            yield header.map((x, j) => leftPad(x, ' ', maxColumnWidths[j])).join(separator);\n        }\n        yield [rowOffset + i, ...recordBatch.get(i) as Struct['TValue']]\n            .map((x) => valueToString(x))\n            .map((x, j) => leftPad(x, ' ', maxColumnWidths[j]))\n            .join(separator);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { RecordBatch } from '../../recordbatch';\nimport { TypeVisitor } from '../../visitor';\nimport { FlatType, NestedType, ListType } from '../../type';\nimport { Message, FieldMetadata, BufferMetadata } from '../metadata';\nimport { FlatData, ListData, NestedData, SingleNestedData, DenseUnionData, SparseUnionData, BoolData, FlatListData, DictionaryData } from '../../data';\nimport {\n    Schema, Field,\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n    UnionMode, SparseUnion, DenseUnion, FlatListType, DataType,\n} from '../../type';\n\nexport function* readRecordBatches(messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport async function* readRecordBatchesAsync(messages: AsyncIterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for await (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport function* readRecordBatch(schema: Schema, message: Message, loader: TypeDataLoader) {\n    if (Message.isRecordBatch(message)) {\n        yield new RecordBatch(schema, message.length, loader.visitFields(schema.fields));\n    } else if (Message.isDictionaryBatch(message)) {\n        const dictionaryId = message.id;\n        const dictionaries = loader.dictionaries;\n        const dictionaryField = schema.dictionaries.get(dictionaryId)!;\n        const dictionaryDataType = (dictionaryField.type as Dictionary).dictionary;\n        let dictionaryVector = Vector.create(loader.visit(dictionaryDataType));\n        if (message.isDelta && dictionaries.has(dictionaryId)) {\n            dictionaryVector = dictionaries.get(dictionaryId)!.concat(dictionaryVector);\n        }\n        dictionaries.set(dictionaryId, dictionaryVector);\n    }\n}\n\nexport abstract class TypeDataLoader extends TypeVisitor {\n\n    public dictionaries: Map<number, Vector>;\n    protected nodes: Iterator<FieldMetadata>;\n    protected buffers: Iterator<BufferMetadata>;\n\n    constructor(nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super();\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visitFields(fields: Field[]) { return fields.map((field) => this.visit(field.type)); }\n\n    public visitNull           (type: Null)            { return this.visitNullType(type);   }\n    public visitInt            (type: Int)             { return this.visitFlatType(type);   }\n    public visitFloat          (type: Float)           { return this.visitFlatType(type);   }\n    public visitBinary         (type: Binary)          { return this.visitFlatList(type);   }\n    public visitUtf8           (type: Utf8)            { return this.visitFlatList(type);   }\n    public visitBool           (type: Bool)            { return this.visitBoolType(type);   }\n    public visitDecimal        (type: Decimal)         { return this.visitFlatType(type);   }\n    public visitDate           (type: Date_)           { return this.visitFlatType(type);   }\n    public visitTime           (type: Time)            { return this.visitFlatType(type);   }\n    public visitTimestamp      (type: Timestamp)       { return this.visitFlatType(type);   }\n    public visitInterval       (type: Interval)        { return this.visitFlatType(type);   }\n    public visitList           (type: List)            { return this.visitListType(type);   }\n    public visitStruct         (type: Struct)          { return this.visitNestedType(type); }\n    public visitUnion          (type: Union)           { return this.visitUnionType(type);  }\n    public visitFixedSizeBinary(type: FixedSizeBinary) { return this.visitFlatType(type);   }\n    public visitFixedSizeList  (type: FixedSizeList)   { return this.visitFixedSizeListType(type); }\n    public visitMap            (type: Map_)            { return this.visitNestedType(type); }\n    public visitDictionary     (type: Dictionary)      {\n        return new DictionaryData(type, this.dictionaries.get(type.id)!, this.visit(type.indices));\n    }\n    protected getFieldMetadata() { return this.nodes.next().value; }\n    protected getBufferMetadata() { return this.buffers.next().value; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.getBufferMetadata()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected abstract readData<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected visitNullType(type: Null, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<any>(type, length, this.readNullBitmap(type, nullCount), new Uint8Array(0), 0, nullCount);\n    }\n    protected visitFlatType<T extends FlatType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<T>(type, length, this.readNullBitmap(type, nullCount), this.readData(type), 0, nullCount);\n    }\n    protected visitBoolType(type: Bool, { length, nullCount }: FieldMetadata = this.getFieldMetadata(), data?: Uint8Array) {\n        return new BoolData(type, length, this.readNullBitmap(type, nullCount), data || this.readData(type), 0, nullCount);\n    }\n    protected visitFlatList<T extends FlatListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type), 0, nullCount);\n    }\n    protected visitListType<T extends ListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new ListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitFixedSizeListType<T extends FixedSizeList>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new SingleNestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitNestedType<T extends NestedType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new NestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visitFields(type.children), 0, nullCount);\n    }\n    protected visitUnionType(type: DenseUnion | SparseUnion, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return type.mode === UnionMode.Sparse ?\n            new SparseUnionData(type as SparseUnion, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount) :\n            new DenseUnionData(type as DenseUnion, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitFields(type.children), 0, nullCount);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { packBools } from '../../util/bit';\nimport * as IntUtil from '../../util/int';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport Long = flatbuffers.Long;\n\nexport function* readJSON(json: any) {\n    const schema = schemaFromJSON(json['schema']);\n    const dictionaries = new Map<number, Vector>();\n    for (const batch of (json['dictionaries'] || [])) {\n        const message = dictionaryBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['data']['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n    for (const batch of (json['batches'] || [])) {\n        const message = recordBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\nfunction flattenDataSources(xs: any[]): any[][] {\n    return (xs || []).reduce<any[][]>((buffers, column: any) => [\n        ...buffers,\n        ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n        ...(column['OFFSET'] && [column['OFFSET']] || []),\n        ...(column['TYPE'] && [column['TYPE']] || []),\n        ...(column['DATA'] && [column['DATA']] || []),\n        ...flattenDataSources(column['children'])\n    ], [] as any[][]);\n}\n\nconst utf8Encoder = new TextEncoder('utf-8');\n\nexport class JSONDataLoader extends TypeDataLoader {\n    constructor(private sources: any[][], nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.getBufferMetadata()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int32Array(this.sources[offset]);\n    }\n    protected readTypeIds<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int8Array(this.sources[offset]);\n    }\n    protected readData<T extends DataType>(type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type) === true) {\n            return new Uint8Array(IntUtil.Int64.convertArray(sources[offset] as string[]).buffer);\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return new Uint8Array(IntUtil.Int64.convertArray(sources[offset] as string[]).buffer);\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return new Uint8Array(IntUtil.Int64.convertArray(sources[offset] as string[]).buffer);\n        } else if (DataType.isDecimal(type) === true) {\n            return new Uint8Array(IntUtil.Int128.convertArray(sources[offset] as string[]).buffer);\n        } else if (DataType.isBinary(type) === true || DataType.isFixedSizeBinary(type) === true) {\n            return new Uint8Array(binaryDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBool(type) === true) {\n            return new Uint8Array(packBools(sources[offset] as number[]).buffer);\n        } else if (DataType.isUtf8(type) === true) {\n            return utf8Encoder.encode((sources[offset] as string[]).join(''));\n        } else {\n            return toTypedArray(type.ArrayType, sources[offset].map((x) => +x)) as any;\n        }\n    }\n}\n\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data.buffer;\n}\n\nimport * as Schema_ from '../../fb/Schema';\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nimport TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nimport UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport { toTypedArray } from '../../data';\n\nfunction schemaFromJSON(s: any): Schema {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    return new Schema(\n        fieldsFromJSON(s['fields'], dictionaryFields),\n        customMetadata(s['customMetadata']),\n        MetadataVersion.V4, dictionaryFields\n    );\n}\n\nfunction recordBatchFromJSON(b: any): RecordBatchMetadata {\n    return new RecordBatchMetadata(\n        MetadataVersion.V4,\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\nfunction dictionaryBatchFromJSON(b: any): DictionaryBatch {\n    return new DictionaryBatch(\n        MetadataVersion.V4,\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\nfunction fieldsFromJSON(fs: any[], dictionaryFields: Map<number, Field<Dictionary>> | null): Field[] {\n    return (fs || [])\n        .map((f) => fieldFromJSON(f, dictionaryFields))\n        .filter((f) => f != null) as Field[];\n}\n\nfunction fieldNodesFromJSON(xs: any[]): FieldMetadata[] {\n    return (xs || []).reduce<FieldMetadata[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldMetadata(\n            new Long(column['count'], 0),\n            new Long(nullCountFromJSON(column['VALIDITY']), 0)\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldMetadata[]);\n}\n\nfunction buffersFromJSON(xs: any[], buffers: BufferMetadata[] = []): BufferMetadata[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));\n        column['OFFSET'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));\n        column['TYPE'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['TYPE'].length, 0)));\n        column['DATA'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\nfunction fieldFromJSON(f: any, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f['name'];\n    let field: Field | void;\n    let nullable = f['nullable'];\n    let dataType: DataType<any> | null;\n    let id: number, keysMeta: any, dictMeta: any;\n    let metadata = customMetadata(f['customMetadata']);\n    if (!dictionaryFields || !(dictMeta = f['dictionary'])) {\n        if (dataType = typeFromJSON(f['type'], fieldsFromJSON(f['children'], dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta['id'])\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromJSON(f['type'], fieldsFromJSON(f['children'], null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta['indexType']) ? intFromJSON(keysMeta)! : new Int32(),\n            id, dictMeta['isOrdered']\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(metadata?: any) {\n    return new Map<string, string>(Object.entries(metadata || {}));\n}\n\nconst namesToTypeMap: { [n: string]: Type }  = {\n    'NONE': Type.NONE,\n    'null': Type.Null,\n    'int': Type.Int,\n    'floatingpoint': Type.FloatingPoint,\n    'binary': Type.Binary,\n    'bool': Type.Bool,\n    'utf8': Type.Utf8,\n    'decimal': Type.Decimal,\n    'date': Type.Date,\n    'time': Type.Time,\n    'timestamp': Type.Timestamp,\n    'interval': Type.Interval,\n    'list': Type.List,\n    'struct': Type.Struct_,\n    'union': Type.Union,\n    'fixedsizebinary': Type.FixedSizeBinary,\n    'fixedsizelist': Type.FixedSizeList,\n    'map': Type.Map,\n};\n\nfunction typeFromJSON(t: any, children?: Field[]) {\n    switch (namesToTypeMap[t['name']]) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromJSON(t);\n        case Type.Int: return intFromJSON(t);\n        case Type.FloatingPoint: return floatingPointFromJSON(t);\n        case Type.Binary: return binaryFromJSON(t);\n        case Type.Utf8: return utf8FromJSON(t);\n        case Type.Bool: return boolFromJSON(t);\n        case Type.Decimal: return decimalFromJSON(t);\n        case Type.Date: return dateFromJSON(t);\n        case Type.Time: return timeFromJSON(t);\n        case Type.Timestamp: return timestampFromJSON(t);\n        case Type.Interval: return intervalFromJSON(t);\n        case Type.List: return listFromJSON(t, children || []);\n        case Type.Struct_: return structFromJSON(t, children || []);\n        case Type.Union: return unionFromJSON(t, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromJSON(t);\n        case Type.FixedSizeList: return fixedSizeListFromJSON(t, children || []);\n        case Type.Map: return mapFromJSON(t, children || []);\n    }\n    throw new Error(`Unrecognized type ${t['name']}`);\n}\n\nfunction nullFromJSON           (_type: any)                    { return new Null();                                                                               }\nfunction intFromJSON            (_type: any)                    { switch (_type['bitWidth']) {\n                                                                      case  8: return _type['isSigned'] ? new  Int8() : new  Uint8();\n                                                                      case 16: return _type['isSigned'] ? new Int16() : new Uint16();\n                                                                      case 32: return _type['isSigned'] ? new Int32() : new Uint32();\n                                                                      case 64: return _type['isSigned'] ? new Int64() : new Uint64();\n                                                                  }\n                                                                  return null;                                                                                     }\nfunction floatingPointFromJSON  (_type: any)                    { switch (Precision[_type['precision']] as any) {\n                                                                      case Precision.HALF: return new Float16();\n                                                                      case Precision.SINGLE: return new Float32();\n                                                                      case Precision.DOUBLE: return new Float64();\n                                                                  }\n                                                                  return null;                                                                                     }\nfunction binaryFromJSON         (_type: any)                    { return new Binary();                                                                             }\nfunction utf8FromJSON           (_type: any)                    { return new Utf8();                                                                               }\nfunction boolFromJSON           (_type: any)                    { return new Bool();                                                                               }\nfunction decimalFromJSON        (_type: any)                    { return new Decimal(_type['scale'], _type['precision']);                                          }\nfunction dateFromJSON           (_type: any)                    { return new Date_(DateUnit[_type['unit']] as any);                                                }\nfunction timeFromJSON           (_type: any)                    { return new Time(TimeUnit[_type['unit']] as any, _type['bitWidth'] as TimeBitWidth);              }\nfunction timestampFromJSON      (_type: any)                    { return new Timestamp(TimeUnit[_type['unit']] as any, _type['timezone']);                         }\nfunction intervalFromJSON       (_type: any)                    { return new Interval(IntervalUnit[_type['unit']] as any);                                         }\nfunction listFromJSON           (_type: any, children: Field[]) { return new List(children);                                                                       }\nfunction structFromJSON         (_type: any, children: Field[]) { return new Struct(children);                                                                     }\nfunction unionFromJSON          (_type: any, children: Field[]) { return new Union(UnionMode[_type['mode']] as any, (_type['typeIds'] || []) as Type[], children); }\nfunction fixedSizeBinaryFromJSON(_type: any)                    { return new FixedSizeBinary(_type['byteWidth']);                                                  }\nfunction fixedSizeListFromJSON  (_type: any, children: Field[]) { return new FixedSizeList(_type['listSize'], children);                                           }\nfunction mapFromJSON            (_type: any, children: Field[]) { return new Map_(_type['keysSorted'], children);                                                  }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { checkForMagicArrowString, PADDING, magicAndPadding, isValidArrowFile } from '../magic';\nimport { Message, Footer, FileBlock, RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata, } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\ntype MessageReader = (bb: ByteBuffer) => IterableIterator<Message>;\n\nexport function* readBuffers<T extends Uint8Array | Buffer | string>(sources: Iterable<T> | Uint8Array | Buffer | string) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    if (ArrayBuffer.isView(sources) || typeof sources === 'string') {\n        sources = [sources as T];\n    }\n    for (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator((message as any).nodes || []),\n                        arrayIterator((message as any).buffers || []),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport async function* readBuffersAsync<T extends Uint8Array | Buffer | string>(sources: AsyncIterable<T>) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    for await (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator((message as any).nodes || []),\n                        arrayIterator((message as any).buffers || []),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport class BinaryDataLoader extends TypeDataLoader {\n    private bytes: Uint8Array;\n    private messageOffset: number;\n    constructor(bb: ByteBuffer, nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n        this.bytes = bb.bytes();\n        this.messageOffset = bb.position();\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Uint8Array(this.bytes.buffer, this.bytes.byteOffset + this.messageOffset + offset, length);\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\n\nfunction toByteBuffer(bytes?: Uint8Array | Buffer | string) {\n    let arr: Uint8Array = bytes as any || new Uint8Array(0);\n    if (typeof bytes === 'string') {\n        arr = new Uint8Array(bytes.length);\n        for (let i = -1, n = bytes.length; ++i < n;) {\n            arr[i] = bytes.charCodeAt(i);\n        }\n        return new ByteBuffer(arr);\n    }\n    return new ByteBuffer(arr);\n}\n\nfunction readSchema(bb: ByteBuffer) {\n    let schema: Schema, readMessages, footer: Footer | null;\n    if (footer = readFileSchema(bb)) {\n        schema = footer.schema;\n        readMessages = readFileMessages(footer);\n    } else if (schema = readStreamSchema(bb)!) {\n        readMessages = readStreamMessages;\n    } else {\n        throw new Error('Invalid Arrow buffer');\n    }\n    return { schema, readMessages };\n}\n\nfunction readStreamSchema(bb: ByteBuffer) {\n    if (!checkForMagicArrowString(bb.bytes(), 0)) {\n        for (const message of readMessages(bb)) {\n            if (Message.isSchema(message)) {\n                return message as Schema;\n            }\n        }\n    }\n    return null;\n}\n\nfunction* readStreamMessages(bb: ByteBuffer) {\n    for (const message of readMessages(bb)) {\n        if (Message.isRecordBatch(message)) {\n            yield message;\n        } else if (Message.isDictionaryBatch(message)) {\n            yield message;\n        } else {\n            yield message;\n        }\n        // position the buffer after the body to read the next message\n        bb.setPosition(bb.position() + message.bodyLength);\n    }\n}\n\nfunction readFileSchema(bb: ByteBuffer) {\n    if (!isValidArrowFile(bb)) {\n        return null;\n    }\n    let fileLength = bb.capacity();\n    let lengthOffset = fileLength - magicAndPadding;\n    let footerLength = bb.readInt32(lengthOffset);\n    bb.setPosition(lengthOffset - footerLength);\n    return footerFromByteBuffer(bb);\n}\n\nfunction readFileMessages(footer: Footer) {\n    return function* (bb: ByteBuffer) {\n        let message: RecordBatchMetadata | DictionaryBatch;\n        for (let i = -1, batches = footer.dictionaryBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset);\n            if (message = readMessage(bb, bb.readInt32(bb.position())) as DictionaryBatch) {\n                yield message;\n            }\n        }\n        for (let i = -1, batches = footer.recordBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset);\n            if (message = readMessage(bb, bb.readInt32(bb.position())) as RecordBatchMetadata) {\n                yield message;\n            }\n        }\n    };\n}\n\nfunction* readMessages(bb: ByteBuffer) {\n    let length: number, message: Schema | RecordBatchMetadata | DictionaryBatch;\n    while (bb.position() < bb.capacity() &&\n          (length = bb.readInt32(bb.position())) > 0) {\n        if (message = readMessage(bb, length)!) {\n            yield message;\n        }\n    }\n}\n\nfunction readMessage(bb: ByteBuffer, length: number) {\n    bb.setPosition(bb.position() + PADDING);\n    const message = messageFromByteBuffer(bb);\n    bb.setPosition(bb.position() + length);\n    return message;\n}\n\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport _Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport _Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport _Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport _List = Schema_.org.apache.arrow.flatbuf.List;\nimport _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport _Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport _Map = Schema_.org.apache.arrow.flatbuf.Map;\n\nfunction footerFromByteBuffer(bb: ByteBuffer) {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    const f = _Footer.getRootAsFooter(bb), s = f.schema()!;\n    return new Footer(\n        dictionaryBatchesFromFooter(f), recordBatchesFromFooter(f),\n        new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), f.version(), dictionaryFields)\n    );\n}\n\nfunction messageFromByteBuffer(bb: ByteBuffer) {\n    const m = _Message.getRootAsMessage(bb)!, type = m.headerType(), version = m.version();\n    switch (type) {\n        case MessageHeader.Schema: return schemaFromMessage(version, m.header(new _Schema())!, new Map());\n        case MessageHeader.RecordBatch: return recordBatchFromMessage(version, m, m.header(new _RecordBatch())!);\n        case MessageHeader.DictionaryBatch: return dictionaryBatchFromMessage(version, m, m.header(new _DictionaryBatch())!);\n    }\n    return null;\n    // throw new Error(`Unrecognized Message type '${type}'`);\n}\n\nfunction schemaFromMessage(version: MetadataVersion, s: _Schema, dictionaryFields: Map<number, Field<Dictionary>>) {\n    return new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), version, dictionaryFields);\n}\n\nfunction recordBatchFromMessage(version: MetadataVersion, m: _Message, b: _RecordBatch) {\n    return new RecordBatchMetadata(version, b.length(), fieldNodesFromRecordBatch(b), buffersFromRecordBatch(b, version), m.bodyLength());\n}\n\nfunction dictionaryBatchFromMessage(version: MetadataVersion, m: _Message, d: _DictionaryBatch) {\n    return new DictionaryBatch(version, recordBatchFromMessage(version, m, d.data()!), d.id(), d.isDelta());\n}\n\nfunction dictionaryBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.dictionariesLength(); ++i < n;) {\n        if (b = f.dictionaries(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction recordBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.recordBatchesLength(); ++i < n;) {\n        if (b = f.recordBatches(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction fieldsFromSchema(s: _Schema, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = s && s.fieldsLength(); ++i < n;) {\n        if (c = field(s.fields(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldsFromField(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = f && f.childrenLength(); ++i < n;) {\n        if (c = field(f.children(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldNodesFromRecordBatch(b: _RecordBatch) {\n    const fieldNodes = [] as FieldMetadata[];\n    for (let i = -1, n = b.nodesLength(); ++i < n;) {\n        fieldNodes.push(fieldNodeFromRecordBatch(b.nodes(i)!));\n    }\n    return fieldNodes;\n}\n\nfunction buffersFromRecordBatch(b: _RecordBatch, version: MetadataVersion) {\n    const buffers = [] as BufferMetadata[];\n    for (let i = -1, n = b.buffersLength(); ++i < n;) {\n        let buffer = b.buffers(i)!;\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page id field.\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        buffers.push(bufferFromRecordBatch(buffer));\n    }\n    return buffers;\n}\n\nfunction field(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f.name()!;\n    let field: Field | void;\n    let nullable = f.nullable();\n    let metadata = customMetadata(f);\n    let dataType: DataType<any> | null;\n    let keysMeta: _Int | null, id: number;\n    let dictMeta: _DictionaryEncoding | null;\n    if (!dictionaryFields || !(dictMeta = f.dictionary())) {\n        if (dataType = typeFromField(f, fieldsFromField(f, dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta.id().low)\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromField(f, fieldsFromField(f, null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta.indexType()) ? intFromField(keysMeta)! : new Int32(),\n            id, dictMeta.isOrdered()\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\nfunction fieldNodeFromRecordBatch(f: _FieldNode) {\n    return new FieldMetadata(f.length(), f.nullCount());\n}\n\nfunction bufferFromRecordBatch(b: _Buffer) {\n    return new BufferMetadata(b.offset(), b.length());\n}\n\nfunction typeFromField(f: _Field, children?: Field[]): DataType<any> | null {\n    switch (f.typeType()) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromField(f.type(new _Null())!);\n        case Type.Int: return intFromField(f.type(new _Int())!);\n        case Type.FloatingPoint: return floatFromField(f.type(new _FloatingPoint())!);\n        case Type.Binary: return binaryFromField(f.type(new _Binary())!);\n        case Type.Utf8: return utf8FromField(f.type(new _Utf8())!);\n        case Type.Bool: return boolFromField(f.type(new _Bool())!);\n        case Type.Decimal: return decimalFromField(f.type(new _Decimal())!);\n        case Type.Date: return dateFromField(f.type(new _Date())!);\n        case Type.Time: return timeFromField(f.type(new _Time())!);\n        case Type.Timestamp: return timestampFromField(f.type(new _Timestamp())!);\n        case Type.Interval: return intervalFromField(f.type(new _Interval())!);\n        case Type.List: return listFromField(f.type(new _List())!, children || []);\n        case Type.Struct_: return structFromField(f.type(new _Struct())!, children || []);\n        case Type.Union: return unionFromField(f.type(new _Union())!, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromField(f.type(new _FixedSizeBinary())!);\n        case Type.FixedSizeList: return fixedSizeListFromField(f.type(new _FixedSizeList())!, children || []);\n        case Type.Map: return mapFromField(f.type(new _Map())!, children || []);\n    }\n    throw new Error(`Unrecognized type ${f.typeType()}`);\n}\n\nfunction nullFromField           (_type: _Null)                             { return new Null();                                                                }\nfunction intFromField            (_type: _Int)                              { switch (_type.bitWidth()) {\n                                                                                  case  8: return _type.isSigned() ? new  Int8() : new  Uint8();\n                                                                                  case 16: return _type.isSigned() ? new Int16() : new Uint16();\n                                                                                  case 32: return _type.isSigned() ? new Int32() : new Uint32();\n                                                                                  case 64: return _type.isSigned() ? new Int64() : new Uint64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction floatFromField          (_type: _FloatingPoint)                    { switch (_type.precision()) {\n                                                                                  case Precision.HALF: return new Float16();\n                                                                                  case Precision.SINGLE: return new Float32();\n                                                                                  case Precision.DOUBLE: return new Float64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction binaryFromField         (_type: _Binary)                           { return new Binary();                                                              }\nfunction utf8FromField           (_type: _Utf8)                             { return new Utf8();                                                                }\nfunction boolFromField           (_type: _Bool)                             { return new Bool();                                                                }\nfunction decimalFromField        (_type: _Decimal)                          { return new Decimal(_type.scale(), _type.precision());                             }\nfunction dateFromField           (_type: _Date)                             { return new Date_(_type.unit());                                                   }\nfunction timeFromField           (_type: _Time)                             { return new Time(_type.unit(), _type.bitWidth() as TimeBitWidth);                  }\nfunction timestampFromField      (_type: _Timestamp)                        { return new Timestamp(_type.unit(), _type.timezone());                             }\nfunction intervalFromField       (_type: _Interval)                         { return new Interval(_type.unit());                                                }\nfunction listFromField           (_type: _List, children: Field[])          { return new List(children);                                                        }\nfunction structFromField         (_type: _Struct, children: Field[])        { return new Struct(children);                                                      }\nfunction unionFromField          (_type: _Union, children: Field[])         { return new Union(_type.mode(), (_type.typeIdsArray() || []) as Type[], children); }\nfunction fixedSizeBinaryFromField(_type: _FixedSizeBinary)                  { return new FixedSizeBinary(_type.byteWidth());                                    }\nfunction fixedSizeListFromField  (_type: _FixedSizeList, children: Field[]) { return new FixedSizeList(_type.listSize(), children);                             }\nfunction mapFromField            (_type: _Map, children: Field[])           { return new Map_(_type.keysSorted(), children);                                    }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { readJSON } from './json';\nimport { fromReadableStream } from './node';\nimport { RecordBatch } from '../../recordbatch';\nimport { readBuffers, readBuffersAsync } from './binary';\nimport { readRecordBatches, readRecordBatchesAsync, TypeDataLoader } from './vector';\nimport { Schema } from '../../type';\nimport { Message } from '../metadata';\n\nexport { readJSON, RecordBatch };\nexport { readBuffers, readBuffersAsync };\nexport { readRecordBatches, readRecordBatchesAsync };\n\nexport function* read(sources: Iterable<Uint8Array | Buffer | string> | object | string) {\n    let input: any = sources;\n    let messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>;\n    if (typeof input === 'string') {\n        try { input = JSON.parse(input); }\n        catch (e) { input = sources; }\n    }\n    if (!input || typeof input !== 'object') {\n        messages = (typeof input === 'string') ? readBuffers([input]) : [];\n    } else {\n        messages = (typeof input[Symbol.iterator] === 'function') ? readBuffers(input) : readJSON(input);\n    }\n    yield* readRecordBatches(messages);\n}\n\nexport async function* readAsync(sources: AsyncIterable<Uint8Array | Buffer | string>) {\n    for await (let recordBatch of readRecordBatchesAsync(readBuffersAsync(sources))) {\n        yield recordBatch;\n    }\n}\n\nexport async function* readStream(stream: NodeJS.ReadableStream) {\n    for await (const recordBatch of readAsync(fromReadableStream(stream))) {\n        yield recordBatch as RecordBatch;\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../../table';\nimport { serializeStream, serializeFile } from './binary';\n\nexport function writeTableBinary(table: Table, stream = true) {\n    return concatBuffers(stream ? serializeStream(table) : serializeFile(table));\n}\n\nfunction concatBuffers(messages: Iterable<Uint8Array | Buffer>) {\n\n    let buffers = [], byteLength = 0;\n\n    for (const message of messages) {\n        buffers.push(message);\n        byteLength += message.byteLength;\n    }\n\n    const { buffer } = buffers.reduce(({ buffer, byteOffset }, bytes) => {\n        buffer.set(bytes, byteOffset);\n        return { buffer, byteOffset: byteOffset + bytes.byteLength };\n    }, { buffer: new Uint8Array(byteLength), byteOffset: 0 });\n\n    return buffer;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Col, Predicate } from './predicate';\nimport { Schema, Field, Struct } from './type';\nimport { read, readAsync } from './ipc/reader/arrow';\nimport { writeTableBinary } from './ipc/writer/arrow';\nimport { PipeIterator } from './util/node';\nimport { isPromise, isAsyncIterable } from './util/compat';\nimport { Vector, DictionaryVector, IntVector, StructVector } from './vector';\nimport { ChunkedView } from './vector/chunked';\n\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\nexport type BindFunc = (batch: RecordBatch) => void;\n\nexport interface DataFrame {\n    count(): number;\n    filter(predicate: Predicate): DataFrame;\n    scan(next: NextFunc, bind?: BindFunc): void;\n    countBy(col: (Col|string)): CountByResult;\n    [Symbol.iterator](): IterableIterator<Struct['TValue']>;\n}\n\nexport class Table implements DataFrame {\n    static empty() { return new Table(new Schema([]), []); }\n    static from(sources?: Iterable<Uint8Array | Buffer | string> | object | string) {\n        if (sources) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for (let recordBatch of read(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        }\n        return Table.empty();\n    }\n    static async fromAsync(sources?: AsyncIterable<Uint8Array | Buffer | string>) {\n        if (isAsyncIterable(sources)) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for await (let recordBatch of readAsync(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        } else if (isPromise(sources)) {\n            return Table.from(await sources);\n        } else if (sources) {\n            return Table.from(sources);\n        }\n        return Table.empty();\n    }\n    static fromStruct(struct: StructVector) {\n        const schema = new Schema(struct.type.children);\n        const chunks = struct.view instanceof ChunkedView ?\n                            (struct.view.chunkVectors as StructVector[]) :\n                            [struct];\n        return new Table(chunks.map((chunk) => new RecordBatch(schema, chunk.length, chunk.view.childData)));\n    }\n\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    // List of inner RecordBatches\n    public readonly batches: RecordBatch[];\n    // List of inner Vectors, possibly spanning batches\n    protected readonly _columns: Vector<any>[] = [];\n    // Union of all inner RecordBatches into one RecordBatch, possibly chunked.\n    // If the Table has just one inner RecordBatch, this points to that.\n    // If the Table has multiple inner RecordBatches, then this is a Chunked view\n    // over the list of RecordBatches. This allows us to delegate the responsibility\n    // of indexing, iterating, slicing, and visiting to the Nested/Chunked Data/Views.\n    public readonly batchesUnion: RecordBatch;\n\n    constructor(batches: RecordBatch[]);\n    constructor(...batches: RecordBatch[]);\n    constructor(schema: Schema, batches: RecordBatch[]);\n    constructor(schema: Schema, ...batches: RecordBatch[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema = null!;\n\n        if (args[0] instanceof Schema) {\n            schema = args.shift();\n        }\n\n        let batches = args.reduce(function flatten(xs: any[], x: any): any[] {\n            return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x: any): x is RecordBatch => x instanceof RecordBatch);\n\n        if (!schema && !(schema = batches[0] && batches[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch with a Schema');\n        }\n\n        this.schema = schema;\n        this.batches = batches;\n        this.batchesUnion = batches.length == 0 ?\n            new RecordBatch(schema, 0, []) :\n            batches.reduce((union, batch) => union.concat(batch));\n        this.length = this.batchesUnion.length;\n        this.numCols = this.batchesUnion.numCols;\n    }\n\n    public get(index: number): Struct['TValue'] {\n        return this.batchesUnion.get(index)!;\n    }\n    public getColumn(name: string) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    public getColumnAt(index: number) {\n        return index < 0 || index >= this.numCols\n            ? null\n            : this._columns[index] || (\n              this._columns[index] = this.batchesUnion.getChildAt(index)!);\n    }\n    public getColumnIndex(name: string) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    public [Symbol.iterator](): IterableIterator<Struct['TValue']> {\n        return this.batchesUnion[Symbol.iterator]() as any;\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(this.batches, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n    public count(): number {\n        return this.length;\n    }\n    public select(...columnNames: string[]) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n    public toString(separator?: string) {\n        let str = '';\n        for (const row of this.rowsToString(separator)) {\n            str += row + '\\n';\n        }\n        return str;\n    }\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        return writeTableBinary(this, stream);\n    }\n    public rowsToString(separator = ' | ') {\n        return new PipeIterator(tableRowsToString(this, separator), 'utf8');\n    }\n}\n\nclass FilteredDataFrame implements DataFrame {\n    private predicate: Predicate;\n    private batches: RecordBatch[];\n    constructor (batches: RecordBatch[], predicate: Predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(\n            this.batches,\n            this.predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult extends Table implements DataFrame {\n    constructor(values: Vector, counts: IntVector<any>) {\n        super(\n            new RecordBatch(new Schema([\n                new Field('values', values.type),\n                new Field('counts', counts.type)\n            ]),\n            counts.length, [values, counts]\n        ));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nfunction* tableRowsToString(table: Table, separator = ' | ') {\n    let rowOffset = 0;\n    let firstValues = [];\n    let maxColumnWidths: number[] = [];\n    let iterators: IterableIterator<string>[] = [];\n    // Gather all the `rowsToString` iterators into a list before iterating,\n    // so that `maxColumnWidths` is filled with the maxWidth for each column\n    // across all RecordBatches.\n    for (const batch of table.batches) {\n        const iterator = batch.rowsToString(separator, rowOffset, maxColumnWidths);\n        const { done, value } = iterator.next();\n        if (!done) {\n            firstValues.push(value);\n            iterators.push(iterator);\n            rowOffset += batch.length;\n        }\n    }\n    for (const iterator of iterators) {\n        yield firstValues.shift();\n        yield* iterator;\n    }\n}\n","export interface Subscription {\n    unsubscribe: () => void;\n}\n\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/**\n * @ignore\n */\nexport function isPromise(x: any): x is PromiseLike<any> {\n    return x != null && Object(x) === x && typeof x['then'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isObservable(x: any): x is Observable<any> {\n    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isArrayLike(x: any): x is ArrayLike<any> {\n    return x != null && Object(x) === x && typeof x['length'] === 'number';\n}\n\n/**\n * @ignore\n */\nexport function isIterable(x: any): x is Iterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.iterator] !== 'undefined';\n}\n\n/**\n * @ignore\n */\nexport function isAsyncIterable(x: any): x is AsyncIterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.asyncIterator] !== 'undefined';\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { DataType, NestedType, DenseUnion, SparseUnion, Struct, Map_ } from '../type';\n\nexport abstract class NestedView<T extends NestedType> implements View<T> {\n    public length: number;\n    public numChildren: number;\n    public childData: Data<any>[];\n    protected _children: Vector<any>[];\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        this.length = data.length;\n        this.childData = data.childData;\n        this.numChildren = data.childData.length;\n        this._children = children || new Array(this.numChildren);\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, new Array(this.numChildren)) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public indexOf(_: T['TValue']): number {\n        throw new Error(`Not implemented yet`);\n    }\n    public toJSON(): any { return this.toArray(); }\n    public toString() {\n        return [...this].map((x) => valueToString(x)).join(', ');\n    }\n    public get(index: number): T['TValue'] {\n        return this.getNested(this, index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setNested(this, index, value);\n    }\n    protected abstract getNested(self: NestedView<T>, index: number): T['TValue'];\n    protected abstract setNested(self: NestedView<T>, index: number, value: T['TValue']): void;\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren\n            ? null\n            : (this._children[index] as Vector<R>) ||\n              (this._children[index] = Vector.create<R>(this.childData[index]));\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getNested;\n        const length = this.length;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index);\n        }\n    }\n}\n\nexport class UnionView<T extends (DenseUnion | SparseUnion) = SparseUnion> extends NestedView<T> {\n    // @ts-ignore\n    public typeIds: Int8Array;\n    // @ts-ignore\n    public valueOffsets?: Int32Array;\n    // @ts-ignore\n    protected typeIdToChildIndex: { [key: number]: number };\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        super(data, children);\n        this.length = data.length;\n        this.typeIds = data.typeIds;\n        this.typeIdToChildIndex = data.typeIdToChildIndex;\n    }\n    protected getNested(self: UnionView<T>, index: number): T['TValue'] {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n    }\n    protected setNested(self: UnionView<T>, index: number, value: T['TValue']): void {\n        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n    }\n    protected getChildValue(self: NestedView<T>, index: number, typeIds: Int8Array, _valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.get(index) : null;\n    }\n    protected setChildValue(self: NestedView<T>, index: number, value: T['TValue'], typeIds: Int8Array, _valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.set(index, value) : null;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const length = this.length;\n        const get = this.getChildValue;\n        const { typeIdToChildIndex } = this;\n        const { typeIds, valueOffsets } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index, typeIds, valueOffsets, typeIdToChildIndex);\n        }\n    }\n}\n\nexport class DenseUnionView extends UnionView<DenseUnion> {\n    public valueOffsets: Int32Array;\n    constructor(data: Data<DenseUnion>, children?: Vector<any>[]) {\n        super(data, children);\n        this.valueOffsets = data.valueOffsets;\n    }\n    protected getNested(self: DenseUnionView, index: number): any | null {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n    }\n    protected getChildValue(self: NestedView<DenseUnion>, index: number, typeIds: Int8Array, valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.get(valueOffsets[index]) : null;\n    }\n    protected setChildValue(self: NestedView<DenseUnion>, index: number, value: any, typeIds: Int8Array, valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.set(valueOffsets[index], value) : null;\n    }\n}\n\ntype RowProxy = {[name: string]: any};\ninterface RowViewConstructor<T extends RowProxy = RowProxy> {\n    readonly prototype: T & RowView;\n    new (data: Data<SparseUnion> & NestedView<any>, children?: Vector<any>[], rowIndex?: number): T & RowView;\n}\n\nexport class StructView extends NestedView<Struct> {\n    private RowView: RowViewConstructor;\n\n    constructor(data: Data<Struct>, children?: Vector<any>[]) {\n        super(data, children);\n\n        // Make a customized RowView that includes proxies for\n        class RowProxy extends RowView {}\n\n        const proto = RowProxy.prototype;\n\n        data.type.children.forEach(function (f, i) {\n            Object.defineProperty(proto, f.name, {\n                get: function () {\n                    return (this as any as RowView).get(i);\n                },\n                enumerable: true\n            });\n        });\n\n        this.RowView = (RowProxy as any);\n    }\n    protected getNested(self: StructView, index: number) {\n        return new self.RowView(self as any, self._children, index);\n    }\n    protected setNested(self: StructView, index: number, value: any): void {\n        let idx = -1, len = self.numChildren, child: Vector | null;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value[idx]);\n                }\n            }\n        } else {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value.get(idx));\n                }\n            }\n        }\n    }\n}\n\nexport class MapView extends NestedView<Map_> {\n    public typeIds: { [k: string]: number };\n    constructor(data: Data<Map_>, children?: Vector<any>[]) {\n        super(data, children);\n        this.typeIds = data.type.children.reduce((xs, x, i) =>\n            (xs[x.name] = i) && xs || xs, Object.create(null));\n    }\n    protected getNested(self: MapView, index: number) {\n        return new MapRowView(self as any, self._children, index);\n    }\n    protected setNested(self: MapView, index: number, value: { [k: string]: any }): void {\n        let typeIds = self.typeIds as any, child: Vector | null;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value[key]);\n                }\n            }\n        } else {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value.get(key as any));\n                }\n            }\n        }\n    }\n}\n\nexport class RowView extends UnionView<SparseUnion> {\n    protected rowIndex: number;\n    constructor(data: Data<SparseUnion> & NestedView<any>, children?: Vector<any>[], rowIndex?: number) {\n        super(data, children);\n        this.rowIndex = rowIndex || 0;\n        this.length = data.numChildren;\n    }\n    public clone(data: Data<SparseUnion> & NestedView<any>): this {\n        return new (<any> this.constructor)(data, this._children, this.rowIndex) as this;\n    }\n    protected getChildValue(self: RowView, index: number, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: RowView, index: number, value: any, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\nexport class MapRowView extends RowView {\n    // @ts-ignore\n    public typeIds: any;\n    public toJSON() {\n        const get = this.getChildValue;\n        const result = {} as { [k: string]: any };\n        const typeIds = this.typeIds as { [k: string]: number };\n        for (const name in typeIds) {\n            result[name] = get(this, name, typeIds, null);\n        }\n        return result;\n    }\n    protected getChildValue(self: MapRowView, key: any, typeIds: any, _valueOffsets: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: MapRowView, key: any, value: any, typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector, createVector } from '../vector';\nimport { TextEncoder, TextDecoder } from 'text-encoding-utf-8';\nimport { List, Binary, Utf8, FixedSizeList, FlatListType } from '../type';\nimport { ListType, SingleNestedType, DataType, IterableArrayLike } from '../type';\n\nexport const encodeUtf8 = ((encoder) =>\n    encoder.encode.bind(encoder) as (input?: string) => Uint8Array\n)(new TextEncoder('utf-8'));\n\nexport const decodeUtf8 = ((decoder) =>\n    decoder.decode.bind(decoder) as (input?: ArrayBufferLike | ArrayBufferView) => string\n)(new TextDecoder('utf-8'));\n\nexport abstract class ListViewBase<T extends (FlatListType | SingleNestedType)> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    public valueOffsets?: Int32Array;\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public get(index: number): T['TValue'] {\n        return this.getList(this.values, index, this.valueOffsets);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setList(this.values, index, value, this.valueOffsets);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getList, length = this.length;\n        const values = this.values, valueOffsets = this.valueOffsets;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, valueOffsets);\n        }\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    protected abstract getList(values: T['TArray'], index: number, valueOffsets?: Int32Array): T['TValue'];\n    protected abstract setList(values: T['TArray'], index: number, value: T['TValue'], valueOffsets?: Int32Array): void;\n}\n\nexport abstract class VariableListViewBase<T extends (ListType | FlatListType)> extends ListViewBase<T> {\n    constructor(data: Data<T>) {\n        super(data);\n        this.length = data.length;\n        this.valueOffsets = data.valueOffsets;\n    }\n}\n\nexport class ListView<T extends DataType> extends VariableListViewBase<List<T>> {\n    public values: Vector<T>;\n    constructor(data: Data<T>) {\n        super(data as any);\n        this.values = createVector((data as any).values);\n    }\n    public getChildAt<R extends T = T>(index: number): Vector<R> | null {\n        return index === 0 ? (this.values as Vector<R>) : null;\n    }\n    protected getList(values: Vector<T>, index: number, valueOffsets: Int32Array) {\n        return values.slice(valueOffsets[index], valueOffsets[index + 1]) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>, valueOffsets: Int32Array): void {\n        let idx = -1;\n        let offset = valueOffsets[index];\n        let end = Math.min(value.length, valueOffsets[index + 1] - offset);\n        while (offset < end) {\n            values.set(offset++, value.get(++idx));\n        }\n    }\n}\n\nexport class FixedSizeListView<T extends DataType> extends ListViewBase<FixedSizeList<T>> {\n    public size: number;\n    public values: Vector<T>;\n    constructor(data: Data<FixedSizeList<T>>) {\n        super(data);\n        this.size = data.type.listSize;\n        this.values = createVector(data.values);\n    }\n    public getChildAt<R extends T = T>(index: number): Vector<R> | null {\n        return index === 0 ? (this.values as Vector<R>) : null;\n    }\n    protected getList(values: Vector<T>, index: number) {\n        const size = this.size;\n        return values.slice(index *= size, index + size) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>): void {\n        let size = this.size;\n        for (let idx = -1, offset = index * size; ++idx < size;) {\n            values.set(offset + idx, value.get(++idx));\n        }\n    }\n}\n\nexport class BinaryView extends VariableListViewBase<Binary> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return values.subarray(valueOffsets[index], valueOffsets[index + 1]);\n    }\n    protected setList(values: Uint8Array, index: number, value: Uint8Array, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(value.subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\nexport class Utf8View extends VariableListViewBase<Utf8> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return decodeUtf8(values.subarray(valueOffsets[index], valueOffsets[index + 1]));\n    }\n    protected setList(values: Uint8Array, index: number, value: string, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(encodeUtf8(value).subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ChunkedData, Data } from '../data';\nimport { View, Vector, NestedVector } from '../vector';\nimport { DataType, TypedArray, IterableArrayLike } from '../type';\n\nexport class ChunkedView<T extends DataType> implements View<T> {\n    public chunkVectors: Vector<T>[];\n    public chunkOffsets: Uint32Array;\n    // @ts-ignore\n    protected _children: Vector<any>[];\n    constructor(data: ChunkedData<T>) {\n        this.chunkVectors = data.chunkVectors;\n        this.chunkOffsets = data.chunkOffsets;\n    }\n    public clone(data: ChunkedData<T> & Data<T>): this {\n        return new ChunkedView(data) as this;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const vector of this.chunkVectors) {\n            yield* vector;\n        }\n    }\n    public getChildAt<R extends DataType = DataType>(index: number) {\n        return index < 0 ? null\n            : (this._children || (this._children = []))[index] ||\n              (this._children[index] = Vector.concat<R>(\n                  ...(<any> this.chunkVectors as NestedVector<any>[])\n                         .map((chunk) => chunk.getChildAt<R>(index))));\n    }\n    public isValid(index: number): boolean {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].isValid(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return false;\n    }\n    public get(index: number): T['TValue'] | null {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].get(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return null;\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].set(index - pos, value);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        const chunks = this.chunkVectors;\n        const numChunks = chunks.length;\n        if (numChunks === 1) {\n            return chunks[0].toArray();\n        }\n        let sources = new Array<any>(numChunks);\n        let sourcesLen = 0, ArrayType: any = Array;\n        for (let index = -1; ++index < numChunks;) {\n            let source = chunks[index].toArray();\n            sourcesLen += (sources[index] = source).length;\n            if (ArrayType !== source.constructor) {\n                ArrayType = source.constructor;\n            }\n        }\n        let target = new ArrayType(sourcesLen);\n        let setValues = ArrayType === Array ? arraySet : typedArraySet as any;\n        for (let index = -1, offset = 0; ++index < numChunks;) {\n            offset = setValues(sources[index], target, offset);\n        }\n        return target;\n    }\n    public indexOf(search: T['TValue']) {\n        let offset = 0, result;\n        for (const vector of this.chunkVectors) {\n            result = vector.indexOf(search);\n            if (result !== -1) { return result + offset; }\n            offset += vector.length;\n        }\n\n        return -1;\n    }\n}\n\nfunction typedArraySet(source: TypedArray, target: TypedArray, index: number) {\n    return target.set(source, index) || index + source.length;\n}\n\nfunction arraySet(source: any[], target: any[], index: number) {\n    let dstIdx = index - 1, srcIdx = -1, srcLen = source.length;\n    while (++srcIdx < srcLen) {\n        target[++dstIdx] = source[srcIdx];\n    }\n    return dstIdx;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../../table';\nimport { DenseUnionData } from '../../data';\nimport { RecordBatch } from '../../recordbatch';\nimport { VectorVisitor, TypeVisitor } from '../../visitor';\nimport { MAGIC, magicLength, magicAndPadding, PADDING } from '../magic';\nimport { align, getBool, packBools, iterateBits } from '../../util/bit';\nimport { Vector, UnionVector, DictionaryVector, NestedVector, ListVector } from '../../vector';\nimport { BufferMetadata, FieldMetadata, Footer, FileBlock, Message, RecordBatchMetadata, DictionaryBatch } from '../metadata';\nimport {\n    Schema, Field, TypedArray, MetadataVersion,\n    DataType,\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n    FlatType, FlatListType, NestedType, UnionMode, SparseUnion, DenseUnion, SingleNestedType,\n} from '../../type';\n\nexport function* serializeStream(table: Table) {\n    yield serializeMessage(table.schema).buffer;\n    for (const [id, field] of table.schema.dictionaries) {\n        const vec = table.getColumn(field.name) as DictionaryVector;\n        if (vec && vec.dictionary) {\n            yield serializeDictionaryBatch(vec.dictionary, id).buffer;\n        }\n    }\n    for (const recordBatch of table.batches) {\n        yield serializeRecordBatch(recordBatch).buffer;\n    }\n}\n\nexport function* serializeFile(table: Table) {\n\n    const recordBatches = [];\n    const dictionaryBatches = [];\n\n    // First yield the magic string (aligned)\n    let buffer = new Uint8Array(align(magicLength, 8));\n    let metadataLength, bodyLength, byteLength = buffer.byteLength;\n    buffer.set(MAGIC, 0);\n    yield buffer;\n\n    // Then yield the schema\n    ({ metadataLength, buffer } = serializeMessage(table.schema));\n    byteLength += buffer.byteLength;\n    yield buffer;\n\n    for (const [id, field] of table.schema.dictionaries) {\n        const vec = table.getColumn(field.name) as DictionaryVector;\n        if (vec && vec.dictionary) {\n            ({ metadataLength, bodyLength, buffer } = serializeDictionaryBatch(vec.dictionary, id));\n            dictionaryBatches.push(new FileBlock(metadataLength, bodyLength, byteLength));\n            byteLength += buffer.byteLength;\n            yield buffer;\n        }\n    }\n    for (const recordBatch of table.batches) {\n        ({ metadataLength, bodyLength, buffer } = serializeRecordBatch(recordBatch));\n        recordBatches.push(new FileBlock(metadataLength, bodyLength, byteLength));\n        byteLength += buffer.byteLength;\n        yield buffer;\n    }\n\n    // Then yield the footer metadata (not aligned)\n    ({ metadataLength, buffer } = serializeFooter(new Footer(dictionaryBatches, recordBatches, table.schema)));\n    yield buffer;\n\n    // Last, yield the footer length + terminating magic arrow string (aligned)\n    buffer = new Uint8Array(magicAndPadding);\n    new DataView(buffer.buffer).setInt32(0, metadataLength, platformIsLittleEndian);\n    buffer.set(MAGIC, buffer.byteLength - magicLength);\n    yield buffer;\n}\n\nexport function serializeRecordBatch(recordBatch: RecordBatch) {\n    const { byteLength, fieldNodes, buffers, buffersMeta } = new RecordBatchSerializer().visitRecordBatch(recordBatch);\n    const rbMeta = new RecordBatchMetadata(MetadataVersion.V4, recordBatch.length, fieldNodes, buffersMeta);\n    const rbData = concatBuffersWithMetadata(byteLength, buffers, buffersMeta);\n    return serializeMessage(rbMeta, rbData);\n}\n\nexport function serializeDictionaryBatch(dictionary: Vector, id: Long | number, isDelta: boolean = false) {\n    const { byteLength, fieldNodes, buffers, buffersMeta } = new RecordBatchSerializer().visitRecordBatch(RecordBatch.from([dictionary]));\n    const rbMeta = new RecordBatchMetadata(MetadataVersion.V4, dictionary.length, fieldNodes, buffersMeta);\n    const dbMeta = new DictionaryBatch(MetadataVersion.V4, rbMeta, id, isDelta);\n    const rbData = concatBuffersWithMetadata(byteLength, buffers, buffersMeta);\n    return serializeMessage(dbMeta, rbData);\n}\n\nexport function serializeMessage(message: Message, data?: Uint8Array) {\n    const b = new Builder();\n    _Message.finishMessageBuffer(b, writeMessage(b, message));\n    // Slice out the buffer that contains the message metadata\n    const metadataBytes = b.asUint8Array();\n    // Reserve 4 bytes for writing the message size at the front.\n    // Metadata length includes the metadata byteLength + the 4\n    // bytes for the length, and rounded up to the nearest 8 bytes.\n    const metadataLength = align(PADDING + metadataBytes.byteLength, 8);\n    // + the length of the optional data buffer at the end, padded\n    const dataByteLength = data ? data.byteLength : 0;\n    // ensure the entire message is aligned to an 8-byte boundary\n    const messageBytes = new Uint8Array(align(metadataLength + dataByteLength, 8));\n    // Write the metadata length into the first 4 bytes, but subtract the\n    // bytes we use to hold the length itself.\n    new DataView(messageBytes.buffer).setInt32(0, metadataLength - PADDING, platformIsLittleEndian);\n    // Copy the metadata bytes into the message buffer\n    messageBytes.set(metadataBytes, PADDING);\n    // Copy the optional data buffer after the metadata bytes\n    (data && dataByteLength > 0) && messageBytes.set(data, metadataLength);\n    // if (messageBytes.byteLength % 8 !== 0) { debugger; }\n    // Return the metadata length because we need to write it into each FileBlock also\n    return { metadataLength, bodyLength: message.bodyLength, buffer: messageBytes };\n}\n\nexport function serializeFooter(footer: Footer) {\n    const b = new Builder();\n    _Footer.finishFooterBuffer(b, writeFooter(b, footer));\n    // Slice out the buffer that contains the footer metadata\n    const footerBytes = b.asUint8Array();\n    const metadataLength = footerBytes.byteLength;\n    return { metadataLength, buffer: footerBytes };\n}\n\nexport class RecordBatchSerializer extends VectorVisitor {\n    public byteLength = 0;\n    public buffers: TypedArray[] = [];\n    public fieldNodes: FieldMetadata[] = [];\n    public buffersMeta: BufferMetadata[] = [];\n    public visitRecordBatch(recordBatch: RecordBatch) {\n        this.buffers = [];\n        this.byteLength = 0;\n        this.fieldNodes = [];\n        this.buffersMeta = [];\n        for (let vector: Vector, index = -1, numCols = recordBatch.numCols; ++index < numCols;) {\n            if (vector = recordBatch.getChildAt(index)!) {\n                this.visit(vector);\n            }\n        }\n        return this;\n    }\n    public visit<T extends DataType>(vector: Vector<T>) {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            this.fieldNodes.push(new FieldMetadata(length, nullCount));\n            this.addBuffer(nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : this.getTruncatedBitmap(data.offset, length, data.nullBitmap!)\n            );\n        }\n        return super.visit(vector);\n    }\n    public visitNull           (_nullz: Vector<Null>)            { return this;                              }\n    public visitBool           (vector: Vector<Bool>)            { return this.visitBoolVector(vector);      }\n    public visitInt            (vector: Vector<Int>)             { return this.visitFlatVector(vector);      }\n    public visitFloat          (vector: Vector<Float>)           { return this.visitFlatVector(vector);      }\n    public visitUtf8           (vector: Vector<Utf8>)            { return this.visitFlatListVector(vector);  }\n    public visitBinary         (vector: Vector<Binary>)          { return this.visitFlatListVector(vector);  }\n    public visitDate           (vector: Vector<Date_>)           { return this.visitFlatVector(vector);      }\n    public visitTimestamp      (vector: Vector<Timestamp>)       { return this.visitFlatVector(vector);      }\n    public visitTime           (vector: Vector<Time>)            { return this.visitFlatVector(vector);      }\n    public visitDecimal        (vector: Vector<Decimal>)         { return this.visitFlatVector(vector);      }\n    public visitInterval       (vector: Vector<Interval>)        { return this.visitFlatVector(vector);      }\n    public visitList           (vector: Vector<List>)            { return this.visitListVector(vector);      }\n    public visitStruct         (vector: Vector<Struct>)          { return this.visitNestedVector(vector);    }\n    public visitFixedSizeBinary(vector: Vector<FixedSizeBinary>) { return this.visitFlatVector(vector);      }\n    public visitFixedSizeList  (vector: Vector<FixedSizeList>)   { return this.visitListVector(vector);      }\n    public visitMap            (vector: Vector<Map_>)            { return this.visitNestedVector(vector);    }\n    public visitDictionary     (vector: DictionaryVector)        {\n        // Dictionary written out separately. Slice offset contained in the indices\n        return this.visit(vector.indices);\n    }\n    public visitUnion(vector: Vector<DenseUnion | SparseUnion>) {\n        const { data, type, length } = vector;\n        const { offset: sliceOffset, typeIds } = data;\n        // All Union Vectors have a typeIds buffer\n        this.addBuffer(typeIds);\n        // If this is a Sparse Union, treat it like all other Nested types\n        if (type.mode === UnionMode.Sparse) {\n            return this.visitNestedVector(vector);\n        } else if (type.mode === UnionMode.Dense) {\n            // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n            const valueOffsets = (data as DenseUnionData).valueOffsets;\n            if (sliceOffset <= 0) {\n                // If the Vector hasn't been sliced, write the existing valueOffsets\n                this.addBuffer(valueOffsets);\n                // We can treat this like all other Nested types\n                return this.visitNestedVector(vector);\n            } else {\n                // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n                // each child vector, we need to \"rebase\" the valueOffsets for each child\n                // Union typeIds are not necessary 0-indexed\n                const maxChildTypeId = Math.max(...type.typeIds);\n                const childLengths = new Int32Array(maxChildTypeId + 1);\n                // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n                const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n                const shiftedOffsets = new Int32Array(length);\n                const unshiftedOffsets = this.getZeroBasedValueOffsets(0, length, valueOffsets);\n                for (let typeId, shift, index = -1; ++index < length;) {\n                    typeId = typeIds[index];\n                    // ~(-1) used to be faster than x === -1, so maybe worth benchmarking the difference of these two impls for large dense unions:\n                    // ~(shift = childOffsets[typeId]) || (shift = childOffsets[typeId] = unshiftedOffsets[index]);\n                    // Going with this form for now, as it's more readable\n                    if ((shift = childOffsets[typeId]) === -1) {\n                        shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                    }\n                    shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                    ++childLengths[typeId];\n                }\n                this.addBuffer(shiftedOffsets);\n                // Slice and visit children accordingly\n                for (let childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                    const typeId = type.typeIds[childIndex];\n                    const child = (vector as UnionVector).getChildAt(childIndex)!;\n                    this.visit(child.slice(childOffsets[typeId], Math.min(length, childLengths[typeId])));\n                }\n            }\n        }\n        return this;\n    }\n    protected visitBoolVector(vector: Vector<Bool>) {\n        // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n        let bitmap: Uint8Array;\n        let values, { data, length } = vector;\n        if (vector.nullCount >= length) {\n            // If all values are null, just insert a placeholder empty data buffer (fastest path)\n            bitmap = new Uint8Array(0);\n        } else if (!((values = data.values) instanceof Uint8Array)) {\n            // Otherwise if the underlying data *isn't* a Uint8Array, enumerate\n            // the values as bools and re-pack them into a Uint8Array (slow path)\n            bitmap = packBools(vector);\n        } else {\n            // otherwise just slice the bitmap (fast path)\n            bitmap = this.getTruncatedBitmap(data.offset, length, values);\n        }\n        return this.addBuffer(bitmap);\n    }\n    protected visitFlatVector<T extends FlatType>(vector: Vector<T>) {\n        const { view, data } = vector;\n        const { length, values } = data;\n        const scaledLength = length * ((view as any).size || 1);\n        return this.addBuffer(values.subarray(0, scaledLength));\n    }\n    protected visitFlatListVector<T extends FlatListType>(vector: Vector<T>) {\n        const { data, length } = vector;\n        const { values, valueOffsets } = data;\n        const firstOffset = valueOffsets[0];\n        const lastOffset = valueOffsets[length];\n        const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n        // Push in the order FlatList types read their buffers\n        // valueOffsets buffer first\n        this.addBuffer(this.getZeroBasedValueOffsets(0, length, valueOffsets));\n        // sliced values buffer second\n        this.addBuffer(values.subarray(firstOffset, firstOffset + byteLength));\n        return this;\n    }\n    protected visitListVector<T extends SingleNestedType>(vector: Vector<T>) {\n        const { data, length } = vector;\n        const { valueOffsets } = <any> data;\n        // If we have valueOffsets (ListVector), push that buffer first\n        if (valueOffsets) {\n            this.addBuffer(this.getZeroBasedValueOffsets(0, length, valueOffsets));\n        }\n        // Then insert the List's values child\n        return this.visit((vector as any as ListVector<T>).getChildAt(0)!);\n    }\n    protected visitNestedVector<T extends NestedType>(vector: Vector<T>) {\n        // Visit the children accordingly\n        const numChildren = (vector.type.children || []).length;\n        for (let child: Vector | null, childIndex = -1; ++childIndex < numChildren;) {\n            if (child = (vector as NestedVector<T>).getChildAt(childIndex)) {\n                this.visit(child);\n            }\n        }\n        return this;\n    }\n    protected addBuffer(values: TypedArray) {\n        const byteLength = align(values.byteLength, 8);\n        this.buffers.push(values);\n        this.buffersMeta.push(new BufferMetadata(this.byteLength, byteLength));\n        this.byteLength += byteLength;\n        return this;\n    }\n    protected getTruncatedBitmap(offset: number, length: number, bitmap: Uint8Array) {\n        const alignedLength = align(bitmap.byteLength, 8);\n        if (offset > 0 || bitmap.byteLength < alignedLength) {\n            // With a sliced array / non-zero offset, we have to copy the bitmap\n            const bytes = new Uint8Array(alignedLength);\n            bytes.set(\n                (offset % 8 === 0)\n                // If the slice offset is aligned to 1 byte, it's safe to slice the nullBitmap directly\n                ? bitmap.subarray(offset >> 3)\n                // iterate each bit starting from the slice offset, and repack into an aligned nullBitmap\n                : packBools(iterateBits(bitmap, offset, length, null, getBool))\n            );\n            return bytes;\n        }\n        return bitmap;\n    }\n    protected getZeroBasedValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n        // If we have a non-zero offset, then the value offsets do not start at\n        // zero. We must a) create a new offsets array with shifted offsets and\n        // b) slice the values array accordingly\n        if (offset > 0 || valueOffsets[0] !== 0) {\n            const startOffset = valueOffsets[0];\n            const destOffsets = new Int32Array(length + 1);\n            for (let index = -1; ++index < length;) {\n                destOffsets[index] = valueOffsets[index] - startOffset;\n            }\n            // Final offset\n            destOffsets[length] = valueOffsets[length] - startOffset;\n            return destOffsets;\n        }\n        return valueOffsets;\n    }\n}\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\n\nimport _Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport _Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport _Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport _List = Schema_.org.apache.arrow.flatbuf.List;\nimport _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport _Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport _Map = Schema_.org.apache.arrow.flatbuf.Map;\n\nexport class TypeSerializer extends TypeVisitor {\n    constructor(protected builder: Builder) {\n        super();\n    }\n    public visitNull(_node: Null) {\n        const b = this.builder;\n        return (\n            _Null.startNull(b) ||\n            _Null.endNull(b)\n        );\n    }\n    public visitInt(node: Int) {\n        const b = this.builder;\n        return (\n            _Int.startInt(b) ||\n            _Int.addBitWidth(b, node.bitWidth) ||\n            _Int.addIsSigned(b, node.isSigned) ||\n            _Int.endInt(b)\n        );\n    }\n    public visitFloat(node: Float) {\n        const b = this.builder;\n        return (\n            _FloatingPoint.startFloatingPoint(b) ||\n            _FloatingPoint.addPrecision(b, node.precision) ||\n            _FloatingPoint.endFloatingPoint(b)\n        );\n    }\n    public visitBinary(_node: Binary) {\n        const b = this.builder;\n        return (\n            _Binary.startBinary(b) ||\n            _Binary.endBinary(b)\n        );\n    }\n    public visitBool(_node: Bool) {\n        const b = this.builder;\n        return (\n            _Bool.startBool(b) ||\n            _Bool.endBool(b)\n        );\n    }\n    public visitUtf8(_node: Utf8) {\n        const b = this.builder;\n        return (\n            _Utf8.startUtf8(b) ||\n            _Utf8.endUtf8(b)\n        );\n    }\n    public visitDecimal(node: Decimal) {\n        const b = this.builder;\n        return (\n            _Decimal.startDecimal(b) ||\n            _Decimal.addScale(b, node.scale) ||\n            _Decimal.addPrecision(b, node.precision) ||\n            _Decimal.endDecimal(b)\n        );\n    }\n    public visitDate(node: Date_) {\n        const b = this.builder;\n        return _Date.startDate(b) || _Date.addUnit(b, node.unit) || _Date.endDate(b);\n    }\n    public visitTime(node: Time) {\n        const b = this.builder;\n        return (\n            _Time.startTime(b) ||\n            _Time.addUnit(b, node.unit) ||\n            _Time.addBitWidth(b, node.bitWidth) ||\n            _Time.endTime(b)\n        );\n    }\n    public visitTimestamp(node: Timestamp) {\n        const b = this.builder;\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        return (\n            _Timestamp.startTimestamp(b) ||\n            _Timestamp.addUnit(b, node.unit) ||\n            (timezone !== undefined && _Timestamp.addTimezone(b, timezone)) ||\n            _Timestamp.endTimestamp(b)\n        );\n    }\n    public visitInterval(node: Interval) {\n        const b = this.builder;\n        return (\n            _Interval.startInterval(b) || _Interval.addUnit(b, node.unit) || _Interval.endInterval(b)\n        );\n    }\n    public visitList(_node: List) {\n        const b = this.builder;\n        return (\n            _List.startList(b) ||\n            _List.endList(b)\n        );\n    }\n    public visitStruct(_node: Struct) {\n        const b = this.builder;\n        return (\n            _Struct.startStruct_(b) ||\n            _Struct.endStruct_(b)\n        );\n    }\n    public visitUnion(node: Union) {\n        const b = this.builder;\n        const typeIds =\n            _Union.startTypeIdsVector(b, node.typeIds.length) ||\n            _Union.createTypeIdsVector(b, node.typeIds);\n        return (\n            _Union.startUnion(b) ||\n            _Union.addMode(b, node.mode) ||\n            _Union.addTypeIds(b, typeIds) ||\n            _Union.endUnion(b)\n        );\n    }\n    public visitDictionary(node: Dictionary) {\n        const b = this.builder;\n        const indexType = this.visit(node.indices);\n        return (\n            _DictionaryEncoding.startDictionaryEncoding(b) ||\n            _DictionaryEncoding.addId(b, new Long(node.id, 0)) ||\n            _DictionaryEncoding.addIsOrdered(b, node.isOrdered) ||\n            (indexType !== undefined && _DictionaryEncoding.addIndexType(b, indexType)) ||\n            _DictionaryEncoding.endDictionaryEncoding(b)\n        );\n    }\n    public visitFixedSizeBinary(node: FixedSizeBinary) {\n        const b = this.builder;\n        return (\n            _FixedSizeBinary.startFixedSizeBinary(b) ||\n            _FixedSizeBinary.addByteWidth(b, node.byteWidth) ||\n            _FixedSizeBinary.endFixedSizeBinary(b)\n        );\n    }\n    public visitFixedSizeList(node: FixedSizeList) {\n        const b = this.builder;\n        return (\n            _FixedSizeList.startFixedSizeList(b) ||\n            _FixedSizeList.addListSize(b, node.listSize) ||\n            _FixedSizeList.endFixedSizeList(b)\n        );\n    }\n    public visitMap(node: Map_) {\n        const b = this.builder;\n        return (\n            _Map.startMap(b) ||\n            _Map.addKeysSorted(b, node.keysSorted) ||\n            _Map.endMap(b)\n        );\n    }\n}\n\nfunction concatBuffersWithMetadata(totalByteLength: number, buffers: Uint8Array[], buffersMeta: BufferMetadata[]) {\n    const data = new Uint8Array(totalByteLength);\n    for (let i = -1, n = buffers.length; ++i < n;) {\n        const { offset, length } = buffersMeta[i];\n        const { buffer, byteOffset, byteLength } = buffers[i];\n        const realBufferLength = Math.min(length, byteLength);\n        if (realBufferLength > 0) {\n            data.set(new Uint8Array(buffer, byteOffset, realBufferLength), offset);\n        }\n    }\n    return data;\n}\n\nfunction writeFooter(b: Builder, node: Footer) {\n    let schemaOffset = writeSchema(b, node.schema);\n    let recordBatches = (node.recordBatches || []);\n    let dictionaryBatches = (node.dictionaryBatches || []);\n    let recordBatchesOffset =\n        _Footer.startRecordBatchesVector(b, recordBatches.length) ||\n            mapReverse(recordBatches, (rb) => writeBlock(b, rb)) &&\n        b.endVector();\n\n    let dictionaryBatchesOffset =\n        _Footer.startDictionariesVector(b, dictionaryBatches.length) ||\n            mapReverse(dictionaryBatches, (db) => writeBlock(b, db)) &&\n        b.endVector();\n\n    return (\n        _Footer.startFooter(b) ||\n        _Footer.addSchema(b, schemaOffset) ||\n        _Footer.addVersion(b, node.schema.version) ||\n        _Footer.addRecordBatches(b, recordBatchesOffset) ||\n        _Footer.addDictionaries(b, dictionaryBatchesOffset) ||\n        _Footer.endFooter(b)\n    );\n}\n\nfunction writeBlock(b: Builder, node: FileBlock) {\n    return _Block.createBlock(b,\n        new Long(node.offset, 0),\n        node.metaDataLength,\n        new Long(node.bodyLength, 0)\n    );\n}\n\nfunction writeMessage(b: Builder, node: Message) {\n    let messageHeaderOffset = 0;\n    if (Message.isSchema(node)) {\n        messageHeaderOffset = writeSchema(b, node as Schema);\n    } else if (Message.isRecordBatch(node)) {\n        messageHeaderOffset = writeRecordBatch(b, node as RecordBatchMetadata);\n    } else if (Message.isDictionaryBatch(node)) {\n        messageHeaderOffset = writeDictionaryBatch(b, node as DictionaryBatch);\n    }\n    return (\n        _Message.startMessage(b) ||\n        _Message.addVersion(b, node.version) ||\n        _Message.addHeader(b, messageHeaderOffset) ||\n        _Message.addHeaderType(b, node.headerType) ||\n        _Message.addBodyLength(b, new Long(node.bodyLength, 0)) ||\n        _Message.endMessage(b)\n    );\n}\n\nfunction writeSchema(b: Builder, node: Schema) {\n\n    const fieldOffsets = node.fields.map((f) => writeField(b, f));\n    const fieldsOffset =\n        _Schema.startFieldsVector(b, fieldOffsets.length) ||\n        _Schema.createFieldsVector(b, fieldOffsets);\n\n    let metadata: number | undefined = undefined;\n    if (node.metadata && node.metadata.size > 0) {\n        metadata = _Schema.createCustomMetadataVector(\n            b,\n            [...node.metadata].map(([k, v]) => {\n                const key = b.createString(`${k}`);\n                const val = b.createString(`${v}`);\n                return (\n                    _KeyValue.startKeyValue(b) ||\n                    _KeyValue.addKey(b, key) ||\n                    _KeyValue.addValue(b, val) ||\n                    _KeyValue.endKeyValue(b)\n                );\n            })\n        );\n    }\n\n    return (\n        _Schema.startSchema(b) ||\n        _Schema.addFields(b, fieldsOffset) ||\n        _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big) ||\n        (metadata !== undefined && _Schema.addCustomMetadata(b, metadata)) ||\n        _Schema.endSchema(b)\n    );\n}\n\nfunction writeRecordBatch(b: Builder, node: RecordBatchMetadata) {\n    let nodes = (node.nodes || []);\n    let buffers = (node.buffers || []);\n    let nodesOffset =\n        _RecordBatch.startNodesVector(b, nodes.length) ||\n        mapReverse(nodes, (n) => writeFieldNode(b, n)) &&\n        b.endVector();\n\n    let buffersOffset =\n        _RecordBatch.startBuffersVector(b, buffers.length) ||\n        mapReverse(buffers, (b_) => writeBuffer(b, b_)) &&\n        b.endVector();\n\n    return (\n        _RecordBatch.startRecordBatch(b) ||\n        _RecordBatch.addLength(b, new Long(node.length, 0)) ||\n        _RecordBatch.addNodes(b, nodesOffset) ||\n        _RecordBatch.addBuffers(b, buffersOffset) ||\n        _RecordBatch.endRecordBatch(b)\n    );\n}\n\nfunction writeDictionaryBatch(b: Builder, node: DictionaryBatch) {\n    const dataOffset = writeRecordBatch(b, node.data);\n    return (\n        _DictionaryBatch.startDictionaryBatch(b) ||\n        _DictionaryBatch.addId(b, new Long(node.id, 0)) ||\n        _DictionaryBatch.addIsDelta(b, node.isDelta) ||\n        _DictionaryBatch.addData(b, dataOffset) ||\n        _DictionaryBatch.endDictionaryBatch(b)\n    );\n}\n\nfunction writeBuffer(b: Builder, node: BufferMetadata) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\nfunction writeFieldNode(b: Builder, node: FieldMetadata) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\nfunction writeField(b: Builder, node: Field) {\n    let typeOffset = -1;\n    let type = node.type;\n    let typeId = node.typeId;\n    let name: number | undefined = undefined;\n    let metadata: number | undefined = undefined;\n    let dictionary: number | undefined = undefined;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = new TypeSerializer(b).visit(type);\n    } else {\n        typeId = type.dictionary.TType;\n        dictionary = new TypeSerializer(b).visit(type);\n        typeOffset = new TypeSerializer(b).visit(type.dictionary);\n    }\n\n    let children = _Field.createChildrenVector(b, (type.children || []).map((f) => writeField(b, f)));\n    if (node.metadata && node.metadata.size > 0) {\n        metadata = _Field.createCustomMetadataVector(\n            b,\n            [...node.metadata].map(([k, v]) => {\n                const key = b.createString(`${k}`);\n                const val = b.createString(`${v}`);\n                return (\n                    _KeyValue.startKeyValue(b) ||\n                    _KeyValue.addKey(b, key) ||\n                    _KeyValue.addValue(b, val) ||\n                    _KeyValue.endKeyValue(b)\n                );\n            })\n        );\n    }\n    if (node.name) {\n        name = b.createString(node.name);\n    }\n    return (\n        _Field.startField(b) ||\n        _Field.addType(b, typeOffset) ||\n        _Field.addTypeType(b, typeId) ||\n        _Field.addChildren(b, children) ||\n        _Field.addNullable(b, !!node.nullable) ||\n        (name !== undefined && _Field.addName(b, name)) ||\n        (dictionary !== undefined && _Field.addDictionary(b, dictionary)) ||\n        (metadata !== undefined && _Field.addCustomMetadata(b, metadata)) ||\n        _Field.endField(b)\n    );\n}\n\nfunction mapReverse<T, U>(source: T[], callbackfn: (value: T, index: number, array: T[]) => U): U[] {\n    const result = new Array(source.length);\n    for (let i = -1, j = source.length; --j > -1;) {\n        result[i] = callbackfn(source[j], i, source);\n    }\n    return result;\n}\n\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n","\nexport function leftPad(str: string, fill: string, n: number) {\n    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n}\n\nexport function valueToString(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","\nexport class PipeIterator<T> implements IterableIterator<T> {\n    constructor(protected iterator: IterableIterator<T>, protected encoding?: any) {}\n    [Symbol.iterator]() { return this.iterator; }\n    next(value?: any) { return this.iterator.next(value); }\n    throw(error?: any) {\n        if (typeof this.iterator.throw === 'function') {\n            return this.iterator.throw(error);\n        }\n        return { done: true, value: null as any };\n    }\n    return(value?: any) {\n        if (typeof this.iterator.return === 'function') {\n            return this.iterator.return(value);\n        }\n        return { done: true, value: null as any };\n    }\n    pipe(stream: NodeJS.WritableStream) {\n        let { encoding } = this;\n        let res: IteratorResult<T>;\n        let write = (err?: any) => {\n            stream['removeListener']('error', write);\n            stream['removeListener']('drain', write);\n            if (err) { return this.throw(err); }\n            if (stream['writable']) {\n                do {\n                    if ((res = this.next()).done) { break; }\n                } while (emit(stream, encoding, res.value));\n            }\n            return wait(stream, res && res.done, write);\n        };\n        write();\n        return stream;\n    }\n}\n\nexport class AsyncPipeIterator<T> implements AsyncIterableIterator<T> {\n    constructor(protected iterator: AsyncIterableIterator<T>, protected encoding?: any) {}\n    [Symbol.asyncIterator]() { return this.iterator; }\n    next(value?: any) { return this.iterator.next(value); }\n    async throw(error?: any) {\n        if (typeof this.iterator.throw === 'function') {\n            return this.iterator.throw(error);\n        }\n        return { done: true, value: null as any };\n    }\n    async return(value?: any) {\n        if (typeof this.iterator.return === 'function') {\n            return this.iterator.return(value);\n        }\n        return { done: true, value: null as any };\n    }\n    pipe(stream: NodeJS.WritableStream) {\n        let { encoding } = this;\n        let res: IteratorResult<T>;\n        let write = async (err?: any) => {\n            stream['removeListener']('error', write);\n            stream['removeListener']('drain', write);\n            if (err) { return this.throw(err); }\n            if (stream['writable']) {\n                do {\n                    if ((res = await this.next()).done) { break; }\n                } while (emit(stream, encoding, res.value));\n            }\n            return wait(stream, res && res.done, write);\n        };\n        write();\n        return stream;\n    }\n}\n\nconst toBufferOrUint8Array = (() => {\n    // If in node, convert Uint8Arrays to Buffer instances. This is necessary\n    // because some node APIs ('http' etc.) don't work unless you give them Buffers.\n    // This eval also defeats closure-compiler, which doesn't recognize the Buffer constructor.\n    const BufferCtor = eval('typeof Buffer !== \"undefined\" ? Buffer : null');\n    return !BufferCtor ? (arr: Uint8Array) => arr :\n        (arr: Uint8Array) => BufferCtor.from(arr.buffer, arr.byteOffset, arr.byteLength);\n})();\n\nfunction emit(stream: NodeJS.WritableStream, encoding: string, value: any) {\n    return stream['write']((encoding === 'utf8' ? value + '\\n' : toBufferOrUint8Array(value)) as any, encoding);\n}\n\nfunction wait(stream: NodeJS.WritableStream, done: boolean, write: (x?: any) => void) {\n    const p = eval('process'); // defeat closure compiler\n    if (!done) {\n        stream['once']('error', write);\n        stream['once']('drain', write);\n    } else if (!(!p || stream === p.stdout) && !(stream as any)['isTTY']) {\n        stream['end']();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { NestedView } from './nested';\nimport { DataType, IterableArrayLike } from '../type';\nimport { getBool, setBool, iterateBits } from '../util/bit';\n\nexport class ValidityView<T extends DataType> implements View<T> {\n    protected view: View<T>;\n    protected length: number;\n    protected offset: number;\n    protected nullBitmap: Uint8Array;\n    constructor(data: Data<T>, view: View<T>) {\n        this.view = view;\n        this.length = data.length;\n        this.offset = data.offset;\n        this.nullBitmap = data.nullBitmap!;\n    }\n    public get size(): number {\n        return (this.view as any).size || 1;\n    }\n    public clone(data: Data<T>): this {\n        return new ValidityView(data, this.view.clone(data)) as this;\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return [...this];\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    public isValid(index: number): boolean {\n        const nullBitIndex = this.offset + index;\n        return getBool(null, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public get(index: number): T['TValue'] | null {\n        const nullBitIndex = this.offset + index;\n        return this.getNullable(this.view, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        if (setBool(this.nullBitmap, this.offset + index, value != null)) {\n            this.view.set(index, value);\n        }\n    }\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return (this.view as NestedView<any>).getChildAt<R>(index);\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return iterateBits<T['TValue'] | null>(this.nullBitmap, this.offset, this.length, this.view, this.getNullable);\n    }\n    protected getNullable(view: View<T>, index: number, byte: number, bit: number) {\n        return getBool(view, index, byte, bit) ? view.get(index) : null;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Message_ from '../../fb/Message';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport { PADDING, isValidArrowFile, checkForMagicArrowString } from '../magic';\n\nexport async function* fromReadableStream(stream: NodeJS.ReadableStream) {\n\n    let bb: ByteBuffer;\n    let bytesRead = 0, bytes = new Uint8Array(0);\n    let messageLength = 0, message: _Message | null = null;\n\n    for await (let chunk of (stream as any as AsyncIterable<Uint8Array | Buffer | string>)) {\n\n        if (chunk == null) {\n            continue;\n        }\n\n        const grown = new Uint8Array(bytes.byteLength + chunk.length);\n\n        if (typeof chunk !== 'string') {\n            grown.set(bytes, 0) || grown.set(chunk, bytes.byteLength);\n        } else {\n            for (let i = -1, j = bytes.byteLength, n = chunk.length; ++i < n;) {\n                grown[i + j] = chunk.charCodeAt(i);\n            }\n        }\n\n        bytes = grown;\n\n        // If we're reading in an Arrow File, just concatenate the bytes until\n        // the file is fully read in\n        if (checkForMagicArrowString(bytes)) {\n            if (!isValidArrowFile(new ByteBuffer(bytes))) {\n                continue;\n            }\n            return yield bytes;\n        }\n\n        if (bytes.byteLength > 0 && messageLength <= 0) {\n            messageLength = new DataView(bytes.buffer).getInt32(0, true);\n        }\n\n        while (messageLength > 0 && messageLength <= bytes.byteLength) {\n            if (!message) {\n                (bb = new ByteBuffer(bytes)).setPosition(4);\n                if (message = _Message.getRootAsMessage(bb)) {\n                    messageLength += message.bodyLength().low;\n                    continue;\n                }\n                throw new Error(`Invalid message at position ${bytesRead}`);\n            }\n            bytesRead += messageLength + PADDING;\n            yield bytes.subarray(0, messageLength + PADDING);\n            bytes = bytes.subarray(messageLength + PADDING);\n            messageLength = bytes.byteLength < 4 ? 0 :\n                new DataView(bytes.buffer).getInt32(bytes.byteOffset, true);\n            message = null;\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike, DataType, Dictionary, Int } from '../type';\n\nexport class DictionaryView<T extends DataType> implements View<T> {\n    public indices: Vector<Int>;\n    public dictionary: Vector<T>;\n    constructor(dictionary: Vector<T>, indices: Vector<Int>) {\n        this.indices = indices;\n        this.dictionary = dictionary;\n    }\n    public clone(data: Data<Dictionary<T>> & Data<T>): this {\n        return new DictionaryView(data.dictionary, this.indices.clone(data.indices)) as this;\n    }\n    public isValid(index: number): boolean {\n        return this.indices.isValid(index);\n    }\n    public get(index: number): T['TValue'] {\n        return this.dictionary.get(this.indices.get(index));\n    }\n    public set(index: number, value: T['TValue']): void {\n        this.dictionary.set(this.indices.get(index), value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const values = this.dictionary, indices = this.indices;\n        for (let index = -1, n = indices.length; ++index < n;) {\n            yield values.get(indices.get(index));\n        }\n    }\n    public indexOf(search: T['TValue']) {\n        // First find the dictionary key for the desired value...\n        const key = this.dictionary.indexOf(search);\n        if (key === -1) { return key; }\n\n        // ... then find the first occurence of that key in indices\n        return this.indices.indexOf(key!);\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type_ from './type';\nimport * as data_ from './data';\nimport * as vector_ from './vector';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_node from './util/node';\nimport * as visitor_ from './visitor';\nimport * as view_ from './vector/view';\nimport * as predicate_ from './predicate';\nimport { Vector } from './vector';\nimport { RecordBatch } from './recordbatch';\nimport { Schema, Field, Type } from './type';\nimport { Table, DataFrame, NextFunc, BindFunc, CountByResult } from './table';\nimport { fromReadableStream } from './ipc/reader/node';\nimport { read, readAsync, readStream } from './ipc/reader/arrow';\nimport { readBuffersAsync, readRecordBatchesAsync } from './ipc/reader/arrow';\nimport { serializeFile, serializeStream } from './ipc/writer/binary';\n\nexport import View = vector_.View;\nexport import VectorLike = vector_.VectorLike;\nexport import TypedArray = type_.TypedArray;\nexport import IntBitWidth = type_.IntBitWidth;\nexport import TimeBitWidth = type_.TimeBitWidth;\nexport import TypedArrayConstructor = type_.TypedArrayConstructor;\n\nexport { fromReadableStream };\nexport { read, readAsync, readStream };\nexport { readBuffersAsync, readRecordBatchesAsync };\nexport { serializeFile, serializeStream };\nexport { Table, DataFrame, NextFunc, BindFunc, CountByResult };\nexport { Field, Schema, RecordBatch, Vector, Type };\n\nexport namespace util {\n    export import Uint64 = util_int_.Uint64;\n    export import Int64 = util_int_.Int64;\n    export import Int128 = util_int_.Int128;\n    export import packBools = util_bit_.packBools;\n    export import PipeIterator = util_node.PipeIterator;\n    export import AsyncPipeIterator = util_node.AsyncPipeIterator;\n}\n\nexport namespace data {\n    export import BaseData = data_.BaseData;\n    export import FlatData = data_.FlatData;\n    export import BoolData = data_.BoolData;\n    export import FlatListData = data_.FlatListData;\n    export import DictionaryData = data_.DictionaryData;\n    export import NestedData = data_.NestedData;\n    export import ListData = data_.ListData;\n    export import UnionData = data_.UnionData;\n    export import SparseUnionData = data_.SparseUnionData;\n    export import DenseUnionData = data_.DenseUnionData;\n    export import ChunkedData = data_.ChunkedData;\n}\n\nexport namespace enum_ {\n    export import Type = type_.ArrowType;\n    export import DateUnit = type_.DateUnit;\n    export import TimeUnit = type_.TimeUnit;\n    export import Precision = type_.Precision;\n    export import UnionMode = type_.UnionMode;\n    export import VectorType = type_.VectorType;\n    export import IntervalUnit = type_.IntervalUnit;\n    export import MessageHeader = type_.MessageHeader;\n    export import MetadataVersion = type_.MetadataVersion;\n}\n\nexport namespace type {\n    export import Schema = type_.Schema;\n    export import Field = type_.Field;\n    export import Null = type_.Null;\n    export import Int = type_.Int;\n    export import Int8 = type_.Int8;\n    export import Int16 = type_.Int16;\n    export import Int32 = type_.Int32;\n    export import Int64 = type_.Int64;\n    export import Uint8 = type_.Uint8;\n    export import Uint16 = type_.Uint16;\n    export import Uint32 = type_.Uint32;\n    export import Uint64 = type_.Uint64;\n    export import Float = type_.Float;\n    export import Float16 = type_.Float16;\n    export import Float32 = type_.Float32;\n    export import Float64 = type_.Float64;\n    export import Binary = type_.Binary;\n    export import Utf8 = type_.Utf8;\n    export import Bool = type_.Bool;\n    export import Decimal = type_.Decimal;\n    export import Date_ = type_.Date_;\n    export import Time = type_.Time;\n    export import Timestamp = type_.Timestamp;\n    export import Interval = type_.Interval;\n    export import List = type_.List;\n    export import Struct = type_.Struct;\n    export import Union = type_.Union;\n    export import DenseUnion = type_.DenseUnion;\n    export import SparseUnion = type_.SparseUnion;\n    export import FixedSizeBinary = type_.FixedSizeBinary;\n    export import FixedSizeList = type_.FixedSizeList;\n    export import Map_ = type_.Map_;\n    export import Dictionary = type_.Dictionary;\n}\n\nexport namespace vector {\n    export import Vector = vector_.Vector;\n    export import NullVector = vector_.NullVector;\n    export import BoolVector = vector_.BoolVector;\n    export import IntVector = vector_.IntVector;\n    export import FloatVector = vector_.FloatVector;\n    export import DateVector = vector_.DateVector;\n    export import DecimalVector = vector_.DecimalVector;\n    export import TimeVector = vector_.TimeVector;\n    export import TimestampVector = vector_.TimestampVector;\n    export import IntervalVector = vector_.IntervalVector;\n    export import BinaryVector = vector_.BinaryVector;\n    export import FixedSizeBinaryVector = vector_.FixedSizeBinaryVector;\n    export import Utf8Vector = vector_.Utf8Vector;\n    export import ListVector = vector_.ListVector;\n    export import FixedSizeListVector = vector_.FixedSizeListVector;\n    export import MapVector = vector_.MapVector;\n    export import StructVector = vector_.StructVector;\n    export import UnionVector = vector_.UnionVector;\n    export import DictionaryVector = vector_.DictionaryVector;\n}\n\nexport namespace visitor {\n    export import TypeVisitor = visitor_.TypeVisitor;\n    export import VectorVisitor = visitor_.VectorVisitor;\n}\n\nexport namespace view {\n    export import ChunkedView = view_.ChunkedView;\n    export import DictionaryView = view_.DictionaryView;\n    export import ListView = view_.ListView;\n    export import FixedSizeListView = view_.FixedSizeListView;\n    export import BinaryView = view_.BinaryView;\n    export import Utf8View = view_.Utf8View;\n    export import UnionView = view_.UnionView;\n    export import DenseUnionView = view_.DenseUnionView;\n    export import NestedView = view_.NestedView;\n    export import StructView = view_.StructView;\n    export import MapView = view_.MapView;\n    export import FlatView = view_.FlatView;\n    export import NullView = view_.NullView;\n    export import BoolView = view_.BoolView;\n    export import ValidityView = view_.ValidityView;\n    export import PrimitiveView = view_.PrimitiveView;\n    export import FixedSizeView = view_.FixedSizeView;\n    export import Float16View = view_.Float16View;\n    export import DateDayView = view_.DateDayView;\n    export import DateMillisecondView = view_.DateMillisecondView;\n    export import TimestampDayView = view_.TimestampDayView;\n    export import TimestampSecondView = view_.TimestampSecondView;\n    export import TimestampMillisecondView = view_.TimestampMillisecondView;\n    export import TimestampMicrosecondView = view_.TimestampMicrosecondView;\n    export import TimestampNanosecondView = view_.TimestampNanosecondView;\n    export import IntervalYearMonthView = view_.IntervalYearMonthView;\n    export import IntervalYearView = view_.IntervalYearView;\n    export import IntervalMonthView = view_.IntervalMonthView;\n}\n\nexport namespace predicate {\n    export import col = predicate_.col;\n    export import lit = predicate_.lit;\n    export import and = predicate_.and;\n    export import or = predicate_.or;\n    export import custom = predicate_.custom;\n\n    export import Or = predicate_.Or;\n    export import Col = predicate_.Col;\n    export import And = predicate_.And;\n    export import Not = predicate_.Not;\n    export import GTeq = predicate_.GTeq;\n    export import LTeq = predicate_.LTeq;\n    export import Value = predicate_.Value;\n    export import Equals = predicate_.Equals;\n    export import Literal = predicate_.Literal;\n    export import Predicate = predicate_.Predicate;\n\n    export import PredicateFunc = predicate_.PredicateFunc;\n}\n\n/* These exports are needed for the closure and uglify umd targets */\ntry {\n    let Arrow: any = eval('exports');\n    if (Arrow && typeof Arrow === 'object') {\n        // string indexers tell closure and uglify not to rename these properties\n        Arrow['data'] = data;\n        Arrow['type'] = type;\n        Arrow['util'] = util;\n        Arrow['view'] = view;\n        Arrow['enum_'] = enum_;\n        Arrow['vector'] = vector;\n        Arrow['visitor'] = visitor;\n        Arrow['predicate'] = predicate;\n\n        Arrow['read'] = read;\n        Arrow['readAsync'] = readAsync;\n        Arrow['readStream'] = readStream;\n        Arrow['fromReadableStream'] = fromReadableStream;\n        Arrow['readBuffersAsync'] = readBuffersAsync;\n        Arrow['readRecordBatchesAsync'] = readRecordBatchesAsync;\n\n        Arrow['serializeFile'] = serializeFile;\n        Arrow['serializeStream'] = serializeStream;\n\n        Arrow['Type'] = Type;\n        Arrow['Field'] = Field;\n        Arrow['Schema'] = Schema;\n        Arrow['Vector'] = Vector;\n        Arrow['RecordBatch'] = RecordBatch;\n\n        Arrow['Table'] = Table;\n        Arrow['CountByResult'] = CountByResult;\n    }\n} catch (e) { /* not the UMD bundle */ }\n/* end umd exports */\n\n// closure compiler erases static properties/methods:\n// https://github.com/google/closure-compiler/issues/1776\n// set them via string indexers to save them from the mangler\nSchema['from'] = Schema.from;\nTable['from'] = Table.from;\nTable['fromAsync'] = Table.fromAsync;\nTable['fromStruct'] = Table.fromStruct;\nTable['empty'] = Table.empty;\nVector['create'] = Vector.create;\nRecordBatch['from'] = RecordBatch.from;\n\nutil_int_.Uint64['add'] = util_int_.Uint64.add;\nutil_int_.Uint64['multiply'] = util_int_.Uint64.multiply;\nutil_int_.Uint64['from'] = util_int_.Uint64.from;\nutil_int_.Uint64['fromNumber'] = util_int_.Uint64.fromNumber;\nutil_int_.Uint64['fromString'] = util_int_.Uint64.fromString;\nutil_int_.Uint64['convertArray'] = util_int_.Uint64.convertArray;\n\nutil_int_.Int64['add'] = util_int_.Int64.add;\nutil_int_.Int64['multiply'] = util_int_.Int64.multiply;\nutil_int_.Int64['from'] = util_int_.Int64.from;\nutil_int_.Int64['fromNumber'] = util_int_.Int64.fromNumber;\nutil_int_.Int64['fromString'] = util_int_.Int64.fromString;\nutil_int_.Int64['convertArray'] = util_int_.Int64.convertArray;\n\nutil_int_.Int128['add'] = util_int_.Int128.add;\nutil_int_.Int128['multiply'] = util_int_.Int128.multiply;\nutil_int_.Int128['from'] = util_int_.Int128.from;\nutil_int_.Int128['fromNumber'] = util_int_.Int128.fromNumber;\nutil_int_.Int128['fromString'] = util_int_.Int128.fromString;\nutil_int_.Int128['convertArray'] = util_int_.Int128.convertArray;\n\ndata_.ChunkedData['computeOffsets'] = data_.ChunkedData.computeOffsets;\n\n(type_.Type as any)['NONE'] = type_.Type.NONE;\n(type_.Type as any)['Null'] = type_.Type.Null;\n(type_.Type as any)['Int'] = type_.Type.Int;\n(type_.Type as any)['Float'] = type_.Type.Float;\n(type_.Type as any)['Binary'] = type_.Type.Binary;\n(type_.Type as any)['Utf8'] = type_.Type.Utf8;\n(type_.Type as any)['Bool'] = type_.Type.Bool;\n(type_.Type as any)['Decimal'] = type_.Type.Decimal;\n(type_.Type as any)['Date'] = type_.Type.Date;\n(type_.Type as any)['Time'] = type_.Type.Time;\n(type_.Type as any)['Timestamp'] = type_.Type.Timestamp;\n(type_.Type as any)['Interval'] = type_.Type.Interval;\n(type_.Type as any)['List'] = type_.Type.List;\n(type_.Type as any)['Struct'] = type_.Type.Struct;\n(type_.Type as any)['Union'] = type_.Type.Union;\n(type_.Type as any)['FixedSizeBinary'] = type_.Type.FixedSizeBinary;\n(type_.Type as any)['FixedSizeList'] = type_.Type.FixedSizeList;\n(type_.Type as any)['Map'] = type_.Type.Map;\n(type_.Type as any)['Dictionary'] = type_.Type.Dictionary;\n(type_.Type as any)['DenseUnion'] = type_.Type.DenseUnion;\n(type_.Type as any)['SparseUnion'] = type_.Type.SparseUnion;\n\ntype_.DataType['isNull'] = type_.DataType.isNull;\ntype_.DataType['isInt'] = type_.DataType.isInt;\ntype_.DataType['isFloat'] = type_.DataType.isFloat;\ntype_.DataType['isBinary'] = type_.DataType.isBinary;\ntype_.DataType['isUtf8'] = type_.DataType.isUtf8;\ntype_.DataType['isBool'] = type_.DataType.isBool;\ntype_.DataType['isDecimal'] = type_.DataType.isDecimal;\ntype_.DataType['isDate'] = type_.DataType.isDate;\ntype_.DataType['isTime'] = type_.DataType.isTime;\ntype_.DataType['isTimestamp'] = type_.DataType.isTimestamp;\ntype_.DataType['isInterval'] = type_.DataType.isInterval;\ntype_.DataType['isList'] = type_.DataType.isList;\ntype_.DataType['isStruct'] = type_.DataType.isStruct;\ntype_.DataType['isUnion'] = type_.DataType.isUnion;\ntype_.DataType['isDenseUnion'] = type_.DataType.isDenseUnion;\ntype_.DataType['isSparseUnion'] = type_.DataType.isSparseUnion;\ntype_.DataType['isFixedSizeBinary'] = type_.DataType.isFixedSizeBinary;\ntype_.DataType['isFixedSizeList'] = type_.DataType.isFixedSizeList;\ntype_.DataType['isMap'] = type_.DataType.isMap;\ntype_.DataType['isDictionary'] = type_.DataType.isDictionary;\n\nvector_.BoolVector['from'] = vector_.BoolVector.from;\nvector_.DateVector['from'] = vector_.DateVector.from;\nvector_.IntVector['from'] = vector_.IntVector.from;\nvector_.FloatVector['from'] = vector_.FloatVector.from;\n\nvisitor_.TypeVisitor['visitTypeInline'] = visitor_.TypeVisitor.visitTypeInline;\nvisitor_.VectorVisitor['visitTypeInline'] = visitor_.VectorVisitor.visitTypeInline;"],"sourceRoot":""}