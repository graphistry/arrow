{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","type.ts","fb/Schema.ts","vector.ts","data.ts","vector/flat.ts","tslib/tslib.es6.js","ipc/metadata.ts","util/bit.ts","vector/view.ts","util/int.ts","ipc/magic.ts","visitor.ts","predicate.ts","recordbatch.ts","ipc/reader/vector.ts","ipc/reader/json.ts","ipc/reader/binary.ts","ipc/reader/arrow.ts","fb/Message.ts","ipc/writer/arrow.ts","table.ts","util/compat.ts","vector/nested.ts","flatbuffers/js/flatbuffers.mjs","vector/list.ts","vector/chunked.ts","ipc/writer/binary.ts","util/pretty.ts","util/node.ts","vector/validity.ts","ipc/reader/node.ts","vector/dictionary.ts","fb/File.ts","text-encoding-utf-8/lib/encoding.lib.mjs","Arrow.ts"],"names":["root","factory","exports","module","define","amd","Arrow","window","t","installedModules","__webpack_require__","moduleId","i","l","S","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","ArrowType","DateUnit","TimeUnit","Precision","UnionMode","VectorType","IntervalUnit","MessageHeader","MetadataVersion","Schema","Field","Type","DataType","Null","Int","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Float","Float16","Float32","Float64","Binary","Utf8","Bool","Decimal","Date_","Time","Timestamp","Interval","List","Struct","Union","DenseUnion","SparseUnion","FixedSizeBinary","FixedSizeList","Map_","Dictionary","_fb_Schema__WEBPACK_IMPORTED_MODULE_0__","_fb_Message__WEBPACK_IMPORTED_MODULE_1__","flatbuffers__WEBPACK_IMPORTED_MODULE_2__","_ipc_metadata__WEBPACK_IMPORTED_MODULE_3__","_visitor__WEBPACK_IMPORTED_MODULE_4__","a","Long","apache","arrow","flatbuf","[object Object]","fields","metadata","version","V4","dictionaries","Map","this","vectors","map","v","type","bodyLength","_bodyLength","headerType","_headerType","fieldNames","namesToKeep","reduce","xs","x","newDictFields","newFields","filter","f","forEach","dictId","set","nullable","typeId","TType","X","indices","isDictionary","NONE","Date","children","visitor","visitTypeInline","proto","ArrayType","Array","super","isSigned","bitWidth","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","precision","HALF","SINGLE","Float32Array","DOUBLE","Float64Array","scale","unit","timezone","valueType","valueField","join","typeIds","Dense","Sparse","byteWidth","listSize","keysSorted","dictionary","id","isOrdered","b","getId","low","org","V1","V2","V3","DAY","MILLISECOND","SECOND","MICROSECOND","NANOSECOND","YEAR_MONTH","DAY_TIME","FloatingPoint","Struct_","OFFSET","DATA","VALIDITY","TYPE","Endianness","Little","Big","bb_pos","bb","obj","__init","readInt32","position","builder","startObject","endObject","offset","__offset","addFieldInt32","readInt8","addFieldInt8","readInt16","index","__vector","__vector_len","bytes","buffer","byteOffset","addFieldInt16","typeIdsOffset","addFieldOffset","data","startVector","length","addInt32","endVector","numElems","optionalEncoding","__string","timezoneOffset","VectorLayout","KeyValue","keyOffset","valueOffset","DictionaryEncoding","readInt64","createLong","__indirect","addFieldInt64","indexTypeOffset","readUint8","__union","nameOffset","typeType","typeOffset","dictionaryOffset","childrenOffset","addOffset","layoutOffset","customMetadataOffset","Buffer","prep","writeInt64","endianness","fieldsOffset","finish","Vector","NullVector","BoolVector","IntVector","FloatVector","DateVector","DecimalVector","TimeVector","TimestampVector","IntervalVector","BinaryVector","FixedSizeBinaryVector","Utf8Vector","ListVector","FixedSizeListVector","MapVector","StructVector","UnionVector","DictionaryVector","createVector","_data__WEBPACK_IMPORTED_MODULE_0__","_visitor__WEBPACK_IMPORTED_MODULE_1__","_type__WEBPACK_IMPORTED_MODULE_2__","_vector_chunked__WEBPACK_IMPORTED_MODULE_3__","_vector_validity__WEBPACK_IMPORTED_MODULE_4__","_vector_dictionary__WEBPACK_IMPORTED_MODULE_5__","_vector_list__WEBPACK_IMPORTED_MODULE_6__","_vector_nested__WEBPACK_IMPORTED_MODULE_7__","_vector_flat__WEBPACK_IMPORTED_MODULE_8__","_util_bit__WEBPACK_IMPORTED_MODULE_9__","view","nulls","nullBitmap","nullCount","source","others","concat","toArray","clone","constructor","isValid","indexOf","iterator","Boolean","vecs","chunkVectors","offsets","computeOffsets","chunksLength","chunkedData","begin","end","size","total","from","to","isFinite","slicedData","slice","Math","min","FlatVector","values","asInt32","stride","int32s","k","ListVectorBase","valueOffsets","NestedVector","getChildAt","childData","_childData","chunks","cols","chunk","_","push","j","defaultView","is64","M","u","N","K","L","TypeError","e","C","H","w","h","Q","F","y","P","idxs","dict","_type","toTypedArray","BaseData","FlatData","BoolData","FlatListData","DictionaryData","NestedData","SingleNestedData","ListData","UnionData","SparseUnionData","DenseUnionData","ChunkedData","_util_bit__WEBPACK_IMPORTED_MODULE_0__","_type__WEBPACK_IMPORTED_MODULE_1__","ArrayBuffer","isView","byteLength","BYTES_PER_ELEMENT","floor","max","_nullCount","R","sliceInternal","arr","sliceData","sliceOffsets","subarray","_indices","_dictionary","_offset","_length","child","valueChildData","_valuesData","typeIdToChildIndex","idx","chunkOffsets","_chunkVectors","_chunkOffsets","chunkData","_chunkData","vec","chunkSlices","childIndex","numChildren","childLength","childOffset","childVectors","childOffsets","FlatView","NullView","BoolView","PrimitiveView","FixedSizeView","Float16View","DateDayView","DateMillisecondView","TimestampDayView","TimestampSecondView","TimestampMillisecondView","TimestampMicrosecondView","TimestampNanosecondView","IntervalYearMonthView","IntervalYearView","IntervalMonthView","search","boolBitIndex","getValue","setValue","every","epochMillisecondsToDate","epochDaysToMs","valueOf","epochMillisecondsLongToMs","epochMs","epochSecondsToMs","epochNanosecondsLongToMs","interval","__awaiter","thisArg","_arguments","generator","Promise","resolve","reject","fulfilled","step","next","rejected","throw","result","done","then","apply","__await","__asyncGenerator","asyncIterator","g","q","verb","resume","fulfill","settle","shift","__asyncDelegator","__asyncValues","__values","Footer","FileBlock","Message","RecordBatchMetadata","DictionaryBatch","BufferMetadata","FieldMetadata","_type__WEBPACK_IMPORTED_MODULE_0__","dictionaryBatches","recordBatches","schema","metaDataLength","z","RecordBatch","nodes","buffers","isDelta","atomicDictionaryId","Fe","De","align","alignment","getBool","_data","_index","byte","bit","getBit","setBool","packBools","iterateBits","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","cnt","pos","DataView","len","popcnt_uint32","getUint32","getUint16","getUint8","uint32","_chunked__WEBPACK_IMPORTED_MODULE_0__","_validity__WEBPACK_IMPORTED_MODULE_1__","_dictionary__WEBPACK_IMPORTED_MODULE_2__","_list__WEBPACK_IMPORTED_MODULE_3__","_nested__WEBPACK_IMPORTED_MODULE_4__","_flat__WEBPACK_IMPORTED_MODULE_5__","Int128","carryBit16","intAsHex","toString","kInt32DecimalDigits","kPowersOfTen","BaseInt64","other","product","lessThan","_times","_plus","left","right","times","plus","this_high","other_high","str","out_buffer","negate","startsWith","out","posn","group","parseInt","substr","multiple","L0","L1","L2","L3","R0","R1","R2","R3","multiply","high","sums","PADDING","MAGIC","checkForMagicArrowString","isValidArrowFile","magicLength","magicAndPadding","MAGIC_STR","charCodeAt","footerLength","lengthOffset","fileLength","capacity","magicX2AndPadding","TypeVisitor","VectorVisitor","acceptTypeVisitor","types","visit","J","visitNull","visitInt","visitFloat","visitBinary","visitUtf8","visitBool","visitDecimal","visitDate","visitTime","visitTimestamp","visitInterval","visitList","visitStruct","visitUnion","visitFixedSizeBinary","visitFixedSizeList","visitMap","visitDictionary","vector","acceptVectorVisitor","Value","Literal","Col","Predicate","And","Or","Equals","LTeq","GTeq","Not","lit","col","and","or","custom","_vector__WEBPACK_IMPORTED_MODULE_0__","ge","le","eq","batch","colidx","expr","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","freeze","accum","bound","some","_batch","rtrn","left_func","right_func","col_func","lastDictionary","reverseLookup","lastKey","getKey","func","CustomPredicate","bind_","_vector__WEBPACK_IMPORTED_MODULE_1__","_data__WEBPACK_IMPORTED_MODULE_2__","_util_node__WEBPACK_IMPORTED_MODULE_3__","_util_pretty__WEBPACK_IMPORTED_MODULE_4__","D","args","numRows","numCols","columnNames","select","separator","rowOffset","maxColumnWidths","recordBatch","header","val","row","readRecordBatches","messages","message","Je","loader","readRecordBatch","readRecordBatchesAsync","messages_1_1","messages_1","tslib_es6","ipc_metadata","isRecordBatch","recordbatch","visitFields","isDictionaryBatch","dictionaryId","dictionaryDataType","dictionaryVector","has","vector_TypeDataLoader","field","visitNullType","visitFlatType","visitFlatList","visitBoolType","visitListType","visitNestedType","visitUnionType","visitFixedSizeListType","cls_data","getBufferMetadata","readData","getFieldMetadata","readNullBitmap","readOffsets","cls_type","readTypeIds","flatbuffers","readJSON","json","dictionaryFields","fieldsFromJSON","fs","dataType","keysMeta","dictMeta","customMetadata","typeFromJSON","indexType","intFromJSON","recordBatchFromJSON","json_JSONDataLoader","flattenDataSources","columns","arrayIterator","batches","column","utf8Encoder","encoding_lib","sources","Dr","oi","isTimestamp","int64DataFromJSON","isInt","isTime","isDate","isDecimal","util_int","fromString","isBinary","isFixedSizeBinary","joined","isBool","isUtf8","encode","count","fieldNodesFromJSON","fieldNodes","validity","buffersFromJSON","entries","namesToTypeMap","null","int","floatingpoint","binary","bool","utf8","decimal","date","time","timestamp","list","struct","union","fixedsizebinary","fixedsizelist","B","G","I","O","$","ByteBuffer","readBuffers","readMessages","toByteBuffer","ai","readSchema","binary_BinaryDataLoader","binary_arrayIterator","readBuffersAsync","sources_1_1","sources_1","messageOffset","footer","magic","setPosition","_Footer","getRootAsFooter","blocks","dictionariesLength","recordBatchesLength","fieldsFromSchema","binary_customMetadata","readMessage","binary_readMessages","isSchema","readStreamMessages","_Message","getRootAsMessage","_Schema","recordBatchFromMessage","_RecordBatch","_DictionaryBatch","binary_Type","binary_Precision","binary_MetadataVersion","File","_Null","_Int","_FloatingPoint","_Binary","_Bool","_Utf8","_Decimal","_Date","_Time","_Timestamp","_Interval","_List","_Struct","_Union","_FixedSizeBinary","_FixedSizeList","_Map","nodesLength","buffersLength","bufferFromRecordBatch","fieldsLength","binary_field","fieldsFromField","childrenLength","typeFromField","intFromField","parent","entry","customMetadataLength","typeIdsArray","read","input","JSON","parse","readAsync","_c","_b","readStream","stream","node","_Schema__WEBPACK_IMPORTED_MODULE_0__","Tensor","FieldNode","null_count","nodesOffset","buffersOffset","dataOffset","headerOffset","table","table_Table","table_CountByResult","_columns","flatten","isArray","batchesUnion","empty","chunked","getColumnAt","getColumnIndex","findIndex","predicate","table_FilteredDataFrame","numBatches","batchIndex","count_by","cls_vector","counts","keys","rowsToString","encoding","writeTableBinary","firstValues","iterators","NestedView","UnionView","DenseUnionView","StructView","MapView","_util_pretty__WEBPACK_IMPORTED_MODULE_1__","_children","getNested","setNested","self","getChildValue","setChildValue","_valueOffsets","Ae","RowProxy","RowView","MapRowView","rowIndex","_typeIds","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","us","os","int32","float32","float64","isLittleEndian","ZERO","toFloat64","equals","Builder","opt_initial_size","initial_size","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","forceDefaults","dataBuffer","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeFloat32","writeFloat64","addInt8","addInt16","addInt64","addFloat32","addFloat64","voffset","defaultValue","slot","addFieldFloat32","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","root_table","opt_file_identifier","file_identifier","requiredField","table_start","vtable_start","elem_size","num_elems","createString","codePoint","bytes_","position_","readUint16","readUint32","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","vtable_offset","opt_encoding","UTF8_BYTES","String","fromCharCode","__has_identifier","ident","ListView","FixedSizeListView","BinaryView","Utf8View","text_encoding_utf_8__WEBPACK_IMPORTED_MODULE_1__","encodeUtf8","encoder","decodeUtf8","decoder","decode","ListViewBase","getList","setList","VariableListViewBase","ChunkedView","mid","numChunks","sourcesLen","target","setValues","arraySet","typedArraySet","dstIdx","srcIdx","srcLen","serializeStream","serializeFile","_recordbatch__WEBPACK_IMPORTED_MODULE_0__","_magic__WEBPACK_IMPORTED_MODULE_2__","_util_bit__WEBPACK_IMPORTED_MODULE_3__","_metadata__WEBPACK_IMPORTED_MODULE_4__","_type__WEBPACK_IMPORTED_MODULE_5__","flatbuffers__WEBPACK_IMPORTED_MODULE_6__","_fb_File__WEBPACK_IMPORTED_MODULE_7__","_fb_Schema__WEBPACK_IMPORTED_MODULE_8__","_fb_Message__WEBPACK_IMPORTED_MODULE_9__","serializeMessage","getColumn","serializeDictionaryBatch","serializeRecordBatch","metadataLength","cu","finishFooterBuffer","schemaOffset","writeSchema","recordBatchesOffset","startRecordBatchesVector","mapReverse","rb","writeBlock","dictionaryBatchesOffset","startDictionariesVector","db","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","endFooter","footerBytes","setInt32","platformIsLittleEndian","pu","gu","buffersMeta","RecordBatchSerializer","visitRecordBatch","A","concatBuffersWithMetadata","rbMeta","finishMessageBuffer","messageHeaderOffset","writeRecordBatch","startDictionaryBatch","addId","addIsDelta","addData","endDictionaryBatch","startMessage","addHeader","addHeaderType","addBodyLength","endMessage","metadataBytes","dataByteLength","messageBytes","RangeError","addBuffer","getTruncatedBitmap","_nullz","visitBoolVector","visitFlatVector","visitFlatListVector","visitListVector","visitNestedVector","sliceOffset","maxChildTypeId","childLengths","fill","shiftedOffsets","unshiftedOffsets","getZeroBasedValueOffsets","bitmap","scaledLength","firstOffset","lastOffset","alignedLength","startOffset","destOffsets","_Block","Block","_Field","_Buffer","_KeyValue","_FieldNode","_DictionaryEncoding","_Endianness","TypeSerializer","_node","startNull","endNull","startInt","addBitWidth","addIsSigned","endInt","startFloatingPoint","addPrecision","endFloatingPoint","startBinary","endBinary","startBool","endBool","startUtf8","endUtf8","startDecimal","addScale","endDecimal","startDate","addUnit","endDate","startTime","endTime","startTimestamp","addTimezone","endTimestamp","startInterval","endInterval","startList","endList","startStruct_","endStruct_","startTypeIdsVector","createTypeIdsVector","startUnion","addMode","addTypeIds","endUnion","startDictionaryEncoding","addIsOrdered","addIndexType","endDictionaryEncoding","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startFixedSizeList","addListSize","endFixedSizeList","startMap","addKeysSorted","endMap","totalByteLength","realBufferLength","createBlock","fieldOffsets","writeField","createChildrenVector","createCustomMetadataVector","startKeyValue","addKey","addValue","endKeyValue","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","addCustomMetadata","endField","startFieldsVector","createFieldsVector","startSchema","addFields","addEndianness","endSchema","startNodesVector","createFieldNode","startBuffersVector","b_","createBuffer","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","callbackfn","setInt16","leftPad","valueToString","stringify","PipeIterator","error","return","res","_u","write","err","removeListener","writable","emit","wait","AsyncPipeIterator","tslib__WEBPACK_IMPORTED_MODULE_0__","toBufferOrUint8Array","BufferCtor","eval","stdout","isTTY","once","ValidityView","nullBitIndex","getNullable","fromReadableStream","flatbuffers__WEBPACK_IMPORTED_MODULE_1__","_fb_Message__WEBPACK_IMPORTED_MODULE_2__","_magic__WEBPACK_IMPORTED_MODULE_3__","bytesRead","messageLength","grown","getInt32","DictionaryView","dictionariesOffset","inRange","ToDictionary","TextEncoder","TextDecoder","Stream","tokens","Cu","end_of_stream","Nu","token","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","options","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","ignoreBOM","_encoder","_options","su","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","bite","prepend","code_point","input_stream","code_points","endOfStream","cp","ci","opt_string","temp","string","util","enum_","_data__WEBPACK_IMPORTED_MODULE_1__","_vector__WEBPACK_IMPORTED_MODULE_2__","_util_int__WEBPACK_IMPORTED_MODULE_3__","_util_bit__WEBPACK_IMPORTED_MODULE_4__","_util_node__WEBPACK_IMPORTED_MODULE_5__","_visitor__WEBPACK_IMPORTED_MODULE_6__","_vector_view__WEBPACK_IMPORTED_MODULE_7__","_predicate__WEBPACK_IMPORTED_MODULE_8__","_recordbatch__WEBPACK_IMPORTED_MODULE_9__","_table__WEBPACK_IMPORTED_MODULE_10__","_ipc_reader_node__WEBPACK_IMPORTED_MODULE_11__","_ipc_reader_arrow__WEBPACK_IMPORTED_MODULE_12__","_ipc_writer_binary__WEBPACK_IMPORTED_MODULE_13__","E","CountByResult","fromAsync","fromStruct","add","isNull","isFloat","isInterval","isList","isStruct","isUnion","isDenseUnion","isSparseUnion","isFixedSizeList","isMap"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\nimport { Vector, View } from './vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { DictionaryBatch } from './ipc/metadata';\nimport { TypeVisitor, VisitorNode } from './visitor';\n\nexport import Long = flatbuffers.Long;\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\nexport class Schema {\n    public static from(vectors: Vector[]) {\n        return new Schema(vectors.map((v, i) => new Field('' + i, v.type)));\n    }\n    // @ts-ignore\n    protected _bodyLength: number;\n    // @ts-ignore\n    protected _headerType: MessageHeader;\n    public readonly fields: Field[];\n    public readonly version: MetadataVersion;\n    public readonly metadata?: Map<string, string>;\n    public readonly dictionaries: Map<number, Field<Dictionary>>;\n    constructor(fields: Field[],\n                metadata?: Map<string, string>,\n                version: MetadataVersion = MetadataVersion.V4,\n                dictionaries: Map<number, Field<Dictionary>> = new Map()) {\n        this.fields = fields;\n        this.version = version;\n        this.metadata = metadata;\n        this.dictionaries = dictionaries;\n    }\n    public get bodyLength() { return this._bodyLength; }\n    public get headerType() { return this._headerType; }\n    public select(...fieldNames: string[]): Schema {\n        const namesToKeep = fieldNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        const newDictFields = new Map(), newFields = this.fields.filter((f) => namesToKeep[f.name]);\n        this.dictionaries.forEach((f, dictId) => (namesToKeep[f.name]) && newDictFields.set(dictId, f));\n        return new Schema(newFields, this.metadata, this.version, newDictFields);\n    }\n    public static [Symbol.toStringTag] = ((prototype: Schema) => {\n        prototype._bodyLength = 0;\n        prototype._headerType = MessageHeader.Schema;\n        return 'Schema';\n    })(Schema.prototype);\n}\n\nexport class Field<T extends DataType = DataType> {\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata?: Map<string, string> | null;\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata;\n    }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public get typeId(): T['TType'] { return this.type.TType; }\n    public get [Symbol.toStringTag](): string { return 'Field'; }\n    public get indices(): T | Int<any> {\n        return DataType.isDictionary(this.type) ? this.type.indices : this.type;\n    }\n}\n\nexport type TimeBitWidth = 32 | 64;\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n\nexport type NumericType = Int | Float | Date_ | Time | Interval | Timestamp;\nexport type FixedSizeType = Int64 |  Uint64 | Decimal | FixedSizeBinary;\nexport type PrimitiveType = NumericType | FixedSizeType;\n\nexport type FlatListType = Utf8 | Binary; // <-- these types have `offset`, `data`, and `validity` buffers\nexport type FlatType = Bool | PrimitiveType | FlatListType; // <-- these types have `data` and `validity` buffers\nexport type ListType = List<any>; // <-- these types have `offset` and `validity` buffers\nexport type NestedType = Map_ | Struct | List<any> | FixedSizeList<any> | Union<any>; // <-- these types have `validity` buffer and nested childData\nexport type SingleNestedType = List<any> | FixedSizeList<any>; // <-- these are nested types that can only have a single child\n\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\n export enum Type {\n    NONE            =  0,  // The default placeholder type\n    Null            =  1,  // A NULL type having no physical storage\n    Int             =  2,  // Signed or unsigned 8, 16, 32, or 64-bit little-endian integer\n    Float           =  3,  // 2, 4, or 8-byte floating point value\n    Binary          =  4,  // Variable-length bytes (no guarantee of UTF8-ness)\n    Utf8            =  5,  // UTF8 variable-length string as List<Char>\n    Bool            =  6,  // Boolean as 1 bit, LSB bit-packed ordering\n    Decimal         =  7,  // Precision-and-scale-based decimal type. Storage type depends on the parameters.\n    Date            =  8,  // int32_t days or int64_t milliseconds since the UNIX epoch\n    Time            =  9,  // Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight\n    Timestamp       = 10,  // Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond)\n    Interval        = 11,  // YEAR_MONTH or DAY_TIME interval in SQL style\n    List            = 12,  // A list of some logical data type\n    Struct          = 13,  // Struct of logical types\n    Union           = 14,  // Union of logical types\n    FixedSizeBinary = 15,  // Fixed-size binary. Each value occupies the same number of bytes\n    FixedSizeList   = 16,  // Fixed-size list. Each value occupies the same number of bytes\n    Map             = 17,  // Map of named logical types\n    Dictionary      = 'Dictionary',  // Dictionary aka Category type\n    DenseUnion      = 'DenseUnion',  // Dense Union of logical types\n    SparseUnion     = 'SparseUnion',  // Sparse Union of logical types\n}\n\nexport interface DataType<TType extends Type = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n}\n\nexport abstract class DataType<TType extends Type = any> implements Partial<VisitorNode> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    static            isNull (x: any): x is Null            { return x && x.TType === Type.Null;            }\n    static             isInt (x: any): x is Int             { return x && x.TType === Type.Int;             }\n    static           isFloat (x: any): x is Float           { return x && x.TType === Type.Float;           }\n    static          isBinary (x: any): x is Binary          { return x && x.TType === Type.Binary;          }\n    static            isUtf8 (x: any): x is Utf8            { return x && x.TType === Type.Utf8;            }\n    static            isBool (x: any): x is Bool            { return x && x.TType === Type.Bool;            }\n    static         isDecimal (x: any): x is Decimal         { return x && x.TType === Type.Decimal;         }\n    static            isDate (x: any): x is Date_           { return x && x.TType === Type.Date;            }\n    static            isTime (x: any): x is Time            { return x && x.TType === Type.Time;            }\n    static       isTimestamp (x: any): x is Timestamp       { return x && x.TType === Type.Timestamp;       }\n    static        isInterval (x: any): x is Interval        { return x && x.TType === Type.Interval;        }\n    static            isList (x: any): x is List            { return x && x.TType === Type.List;            }\n    static          isStruct (x: any): x is Struct          { return x && x.TType === Type.Struct;          }\n    static           isUnion (x: any): x is Union           { return x && x.TType === Type.Union;           }\n    static      isDenseUnion (x: any): x is DenseUnion      { return x && x.TType === Type.DenseUnion;      }\n    static     isSparseUnion (x: any): x is SparseUnion     { return x && x.TType === Type.SparseUnion;     }\n    static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.TType === Type.FixedSizeBinary; }\n    static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.TType === Type.FixedSizeList;   }\n    static             isMap (x: any): x is Map_            { return x && x.TType === Type.Map;             }\n    static      isDictionary (x: any): x is Dictionary      { return x && x.TType === Type.Dictionary;      }\n\n    constructor(public readonly TType: TType,\n                public readonly children?: Field[]) {}\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\nexport class Null extends DataType<Type.Null> {\n    constructor() {\n        super(Type.Null);\n    }\n    public toString() { return `Null`; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\nexport interface Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> { TArray: TArrayType; TValue: TValueType; }\nexport class Int<TValueType = any, TArrayType extends IntArray = IntArray> extends DataType<Type.Int> {\n    constructor(public readonly isSigned: boolean,\n                public readonly bitWidth: IntBitWidth) {\n        super(Type.Int);\n    }\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.bitWidth) {\n            case  8: return (this.isSigned ?  Int8Array :  Uint8Array) as any;\n            case 16: return (this.isSigned ? Int16Array : Uint16Array) as any;\n            case 32: return (this.isSigned ? Int32Array : Uint32Array) as any;\n            case 64: return (this.isSigned ? Int32Array : Uint32Array) as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int) => {\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int.prototype);\n}\n\nexport class Int8 extends Int<number, Int8Array> { constructor() { super(true, 8); } }\nexport class Int16 extends Int<number, Int16Array> { constructor() { super(true, 16); } }\nexport class Int32 extends Int<number, Int32Array> { constructor() { super(true, 32); } }\nexport class Int64 extends Int<Int32Array, Int32Array> { constructor() { super(true, 64); } }\nexport class Uint8 extends Int<number, Uint8Array> { constructor() { super(false, 8); } }\nexport class Uint16 extends Int<number, Uint16Array> { constructor() { super(false, 16); } }\nexport class Uint32 extends Int<number, Uint32Array> { constructor() { super(false, 32); } }\nexport class Uint64 extends Int<Uint32Array, Uint32Array> { constructor() { super(false, 64); } }\n\nexport interface Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> { TArray: TArrayType; TValue: number; }\nexport class Float<TArrayType extends FloatArray = FloatArray> extends DataType<Type.Float> {\n    constructor(public readonly precision: Precision) {\n        super(Type.Float);\n    }\n    // @ts-ignore\n    public get ArrayType(): TypedArrayConstructor<TArrayType> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array as any;\n            case Precision.SINGLE: return Float32Array as any;\n            case Precision.DOUBLE: return Float64Array as any;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\nexport class Float16 extends Float<Uint16Array> { constructor() { super(Precision.HALF); } }\nexport class Float32 extends Float<Float32Array> { constructor() { super(Precision.SINGLE); } }\nexport class Float64 extends Float<Float64Array> { constructor() { super(Precision.DOUBLE); } }\n\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super(Type.Binary);\n    }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; }\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super(Type.Utf8);\n    }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; }\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super(Type.Bool);\n    }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; }\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super(Type.Decimal);\n    }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Date_ extends DataType<Type.Date> { TArray: Int32Array; TValue: Date; }\nexport class Date_ extends DataType<Type.Date> {\n    constructor(public readonly unit: DateUnit) {\n        super(Type.Date);\n    }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\nexport interface Time extends DataType<Type.Time> { TArray: Uint32Array; TValue: number; }\nexport class Time extends DataType<Type.Time> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly bitWidth: TimeBitWidth) {\n        super(Type.Time);\n    }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time) => {\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time.prototype);\n}\n\nexport interface Timestamp extends DataType<Type.Timestamp> { TArray: Int32Array; TValue: number; }\nexport class Timestamp extends DataType<Type.Timestamp> {\n    constructor(public unit: TimeUnit, public timezone?: string | null) {\n        super(Type.Timestamp);\n    }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp.prototype);\n}\n\nexport interface Interval extends DataType<Type.Interval> { TArray: Int32Array; TValue: Int32Array; }\nexport class Interval extends DataType<Type.Interval> {\n    constructor(public unit: IntervalUnit) {\n        super(Type.Interval);\n    }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval) => {\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval.prototype);\n}\n\nexport interface List<T extends DataType = any> extends DataType<Type.List>  { TArray: any; TValue: Vector<T>; }\nexport class List<T extends DataType = any> extends DataType<Type.List> {\n    constructor(public children: Field[]) {\n        super(Type.List, children);\n    }\n    public toString() { return `List<${this.valueType}>`; }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\nexport interface Struct extends DataType<Type.Struct> { TArray: any; TValue: View<any>; }\nexport class Struct extends DataType<Type.Struct> {\n    constructor(public children: Field[]) {\n        super(Type.Struct, children);\n    }\n    public toString() { return `Struct<${this.children.map((f) => f.type).join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\nexport interface Union<TType extends Type = any> extends DataType<TType> { TArray: Int8Array; TValue: any; }\nexport class Union<TType extends Type = any> extends DataType<TType> {\n    constructor(public readonly mode: UnionMode,\n                public readonly typeIds: ArrowType[],\n                public readonly children: Field[]) {\n        super(<TType> Type.Union, children);\n    }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union) => {\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union.prototype);\n}\n\nexport class DenseUnion extends Union<Type.DenseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: DenseUnion) => {\n        return proto[Symbol.toStringTag] = 'DenseUnion';\n    })(DenseUnion.prototype);\n}\n\nexport class SparseUnion extends Union<Type.SparseUnion> {\n    constructor(typeIds: ArrowType[], children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n    protected static [Symbol.toStringTag] = ((proto: SparseUnion) => {\n        return proto[Symbol.toStringTag] = 'SparseUnion';\n    })(SparseUnion.prototype);\n}\n\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; }\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super(Type.FixedSizeBinary);\n    }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: any; TValue: Vector<T>; }\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> {\n    constructor(public readonly listSize: number,\n                public readonly children: Field[]) {\n        super(Type.FixedSizeList, children);\n    }\n    public get ArrayType() { return this.valueType.ArrayType; }\n    public get valueType() { return this.children[0].type as T; }\n    public get valueField() { return this.children[0] as Field<T>; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/* tslint:disable:class-name */\nexport interface Map_ extends DataType<Type.Map> { TArray: Uint8Array; TValue: View<any>; }\nexport class Map_ extends DataType<Type.Map> {\n    constructor(public readonly keysSorted: boolean,\n                public readonly children: Field[]) {\n        super(Type.Map, children);\n    }\n    public toString() { return `Map<${this.children.join(`, `)}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\nexport interface Dictionary<T extends DataType = any> extends DataType<Type.Dictionary> { TArray: T['TArray']; TValue: T['TValue']; }\nexport class Dictionary<T extends DataType> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly dictionary: T;\n    public readonly indices: Int<any>;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: Int<any>, id?: Long | number | null, isOrdered?: boolean | null) {\n        super(Type.Dictionary);\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? DictionaryBatch.getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get ArrayType() { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n\nexport interface TypedArrayConstructor<T extends TypedArray = TypedArray> {\n    readonly prototype: T;\n    readonly BYTES_PER_ELEMENT: number;\n    new (length: number): T;\n    new (elements: Iterable<number>): T;\n    new (arrayOrArrayBuffer: ArrayLike<number> | ArrayBufferLike): T;\n    new (buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n    of(...items: number[]): T;\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): T;\n}\n\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\nexport interface TypedArray extends Iterable<number> {\n    [index: number]: number;\n    readonly length: number;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly buffer: ArrayBufferLike;\n    readonly BYTES_PER_ELEMENT: number;\n    [Symbol.toStringTag]: any;\n    [Symbol.iterator](): IterableIterator<number>;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n    copyWithin(target: number, start: number, end?: number): this;\n    every(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): this;\n    filter(callbackfn: (value: number, index: number, array: TypedArray) => any, thisArg?: any): TypedArray;\n    find(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: TypedArray) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: TypedArray) => void, thisArg?: any): void;\n    includes(searchElement: number, fromIndex?: number): boolean;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    map(callbackfn: (value: number, index: number, array: TypedArray) => number, thisArg?: any): TypedArray;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: TypedArray) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: TypedArray) => U, initialValue: U): U;\n    reverse(): TypedArray;\n    set(array: ArrayLike<number>, offset?: number): void;\n    slice(start?: number, end?: number): TypedArray;\n    some(callbackfn: (value: number, index: number, array: TypedArray) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: (a: number, b: number) => number): this;\n    subarray(begin: number, end?: number): TypedArray;\n    toLocaleString(): string;\n    toString(): string;\n}\n","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MetadataVersion {\n    /**\n     * 0.1.0\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0\n     */\n    V4 = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n  }\n}\n\n/**\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum VectorType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum Endianness {\n    Little = 0,\n    Big = 1\n  }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Null {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Null}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Null=} obj\n     * @returns {Null}\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n      return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Struct_ {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Struct_}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Struct_=} obj\n     * @returns {Struct_}\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n      return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class List {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {List}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {List=} obj\n     * @returns {List}\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n      return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeList {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeList}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeList=} obj\n     * @returns {FixedSizeList}\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n      return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns {number}\n     */\n    listSize(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n      builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Map {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Map}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Map=} obj\n     * @returns {Map}\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n      return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns {boolean}\n     */\n    keysSorted(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n      builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Union {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Union}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Union=} obj\n     * @returns {Union}\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n      return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.UnionMode}\n     */\n    mode(): org.apache.arrow.flatbuf.UnionMode {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n    }\n\n    /**\n     * @param {number} index\n     * @returns {number}\n     */\n    typeIds(index: number): number | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns {number}\n     */\n    typeIdsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {Int32Array}\n     */\n    typeIdsArray(): Int32Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n      builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<number>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Int {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Int}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Int=} obj\n     * @returns {Int}\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n      return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isSigned(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n      builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FloatingPoint {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FloatingPoint}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FloatingPoint=} obj\n     * @returns {FloatingPoint}\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n      return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Precision}\n     */\n    precision(): org.apache.arrow.flatbuf.Precision {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Precision} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n      builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Utf8 {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Utf8}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Utf8=} obj\n     * @returns {Utf8}\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n      return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Binary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Binary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Binary=} obj\n     * @returns {Binary}\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n      return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FixedSizeBinary {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FixedSizeBinary}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {FixedSizeBinary=} obj\n     * @returns {FixedSizeBinary}\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n      return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns {number}\n     */\n    byteWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n      builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Bool {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Bool}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Bool=} obj\n     * @returns {Bool}\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n      return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n      builder.startObject(0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Decimal {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Decimal}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Decimal=} obj\n     * @returns {Decimal}\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n      return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns {number}\n     */\n    precision(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns {number}\n     */\n    scale(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n      builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n      builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Date {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Date}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Date=} obj\n     * @returns {Date}\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n      return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.DateUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.DateUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Time {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Time}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Time=} obj\n     * @returns {Time}\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n      return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Timestamp {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Timestamp}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Timestamp=} obj\n     * @returns {Timestamp}\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n      return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.TimeUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Interval {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Interval}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Interval=} obj\n     * @returns {Interval}\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n      return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n     */\n    unit(): org.apache.arrow.flatbuf.IntervalUnit {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n      builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class VectorLayout {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {VectorLayout}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): VectorLayout {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {VectorLayout=} obj\n     * @returns {VectorLayout}\n     */\n    static getRootAsVectorLayout(bb: flatbuffers.ByteBuffer, obj?: VectorLayout): VectorLayout {\n      return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n     *\n     * @returns {number}\n     */\n    bitWidth(): number {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * the purpose of the vector\n     *\n     * @returns {org.apache.arrow.flatbuf.VectorType}\n     */\n    type(): org.apache.arrow.flatbuf.VectorType {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startVectorLayout(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n      builder.addFieldInt16(0, bitWidth, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.VectorType} type\n     */\n    static addType(builder: flatbuffers.Builder, type: org.apache.arrow.flatbuf.VectorType) {\n      builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endVectorLayout(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class KeyValue {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {KeyValue}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {KeyValue=} obj\n     * @returns {KeyValue}\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n      return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryEncoding {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryEncoding}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryEncoding=} obj\n     * @returns {DictionaryEncoding}\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n      return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be positive integers. If this\n     * field is null, the indices must be signed int32\n     *\n     * @param {org.apache.arrow.flatbuf.Int=} obj\n     * @returns {org.apache.arrow.flatbuf.Int|null}\n     */\n    indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns {boolean}\n     */\n    isOrdered(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n      builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Field {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Field}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Field=} obj\n     * @returns {Field}\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n      return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param {flatbuffers.Encoding=} optionalEncoding\n     * @returns {string|Uint8Array|null}\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    nullable(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.Type}\n     */\n    typeType(): org.apache.arrow.flatbuf.Type {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n     */\n    dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n      let offset = this.bb.__offset(this.bb_pos, 12);\n      return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    childrenLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 14);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * layout of buffers produced for this type (as derived from the Type)\n     * does not include children\n     * each recordbatch will return instances of those Buffers.\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n     */\n    layout(index: number, obj?: org.apache.arrow.flatbuf.VectorLayout): org.apache.arrow.flatbuf.VectorLayout | null {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    layoutLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 16);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 18);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n      builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Type} typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n      builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} layoutOffset\n     */\n    static addLayout(builder: flatbuffers.Builder, layoutOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, layoutOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createLayoutVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startLayoutVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Buffer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Buffer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {flatbuffers.Long} length\n     * @returns {flatbuffers.Offset}\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(length);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Schema {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Schema}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Schema=} obj\n     * @returns {Schema}\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n      return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns {org.apache.arrow.flatbuf.Endianness}\n     */\n    endianness(): org.apache.arrow.flatbuf.Endianness {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Field=} obj\n     * @returns {org.apache.arrow.flatbuf.Field}\n     */\n    fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    fieldsLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n     * @returns {org.apache.arrow.flatbuf.KeyValue}\n     */\n    customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    customMetadataLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n      builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {Array.<flatbuffers.Offset>} data\n     * @returns {flatbuffers.Offset}\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data, ChunkedData, FlatData, BoolData, FlatListData, NestedData, DictionaryData } from './data';\nimport { VisitorNode, TypeVisitor, VectorVisitor } from './visitor';\nimport { DataType, ListType, FlatType, NestedType, FlatListType, TimeUnit } from './type';\nimport { IterableArrayLike, Precision, DateUnit, IntervalUnit, UnionMode } from './type';\n\nexport interface VectorLike { length: number; nullCount: number; }\n\nexport interface View<T extends DataType> {\n    clone(data: Data<T>): this;\n    isValid(index: number): boolean;\n    get(index: number): T['TValue'] | null;\n    set(index: number, value: T['TValue']): void;\n    toArray(): IterableArrayLike<T['TValue'] | null>;\n    indexOf(search: T['TValue']): number;\n    [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n}\n\nexport class Vector<T extends DataType = any> implements VectorLike, View<T>, VisitorNode {\n    public static create<T extends DataType>(data: Data<T>): Vector<T> {\n        return createVector(data);\n    }\n    public static concat<T extends DataType>(source?: Vector<T> | null, ...others: Vector<T>[]): Vector<T> {\n        return others.reduce((a, b) => a ? a.concat(b) : b, source!);\n    }\n    public type: T;\n    public length: number;\n    public readonly data: Data<T>;\n    public readonly view: View<T>;\n    constructor(data: Data<T>, view: View<T>) {\n        this.data = data;\n        this.type = data.type;\n        this.length = data.length;\n        let nulls: Uint8Array;\n        if ((<any> data instanceof ChunkedData) && !(view instanceof ChunkedView)) {\n            this.view = new ChunkedView(data as any) as any;\n        } else if (!(view instanceof ValidityView) && (nulls = data.nullBitmap!) && nulls.length > 0 && data.nullCount > 0) {\n            this.view = new ValidityView(data, view);\n        } else {\n            this.view = view;\n        }\n    }\n\n    public get nullCount() { return this.data.nullCount; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get [Symbol.toStringTag]() {\n        return `Vector<${this.type[Symbol.toStringTag]}>`;\n    }\n    public toJSON(): any { return this.toArray(); }\n    public clone<R extends T>(data: Data<R>, view: View<R> = this.view.clone(data) as any): this {\n        return new (this.constructor as any)(data, view);\n    }\n    public isValid(index: number): boolean {\n        return this.view.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this.view.get(index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.view.set(index, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return this.view.toArray();\n    }\n    public indexOf(value: T['TValue']) {\n        return this.view.indexOf(value);\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return this.view[Symbol.iterator]();\n    }\n    public concat(...others: Vector<T>[]): this {\n        if ((others = others.filter(Boolean)).length === 0) {\n            return this;\n        }\n        const { view } = this;\n        const vecs = !(view instanceof ChunkedView)\n            ? [this, ...others]\n            : [...view.chunkVectors, ...others];\n        const offsets = ChunkedData.computeOffsets(vecs);\n        const chunksLength = offsets[offsets.length - 1];\n        const chunkedData = new ChunkedData(this.type, chunksLength, vecs, 0, -1, offsets);\n        return this.clone(chunkedData, new ChunkedView(chunkedData)) as this;\n    }\n    public slice(begin?: number, end?: number): this {\n        let { length } = this;\n        let size = (this.view as any).size || 1;\n        let total = length, from = (begin || 0) * size;\n        let to = (typeof end === 'number' ? end : total) * size;\n        if (to < 0) { to = total - (to * -1) % total; }\n        if (from < 0) { from = total - (from * -1) % total; }\n        if (to < from) { [from, to] = [to, from]; }\n        total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;\n        const slicedData = this.data.slice(from, Math.min(total, length));\n        return this.clone(slicedData, this.view.clone(slicedData)) as this;\n    }\n\n    public acceptTypeVisitor(visitor: TypeVisitor): any {\n        return TypeVisitor.visitTypeInline(visitor, this.type);\n    }\n    public acceptVectorVisitor(visitor: VectorVisitor): any {\n        return VectorVisitor.visitTypeInline(visitor, this.type, this);\n    }\n}\n\nexport abstract class FlatVector<T extends FlatType> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public lows(): IntVector<Int32> { return this.asInt32(0, 2); }\n    public highs(): IntVector<Int32> { return this.asInt32(1, 2); }\n    public asInt32(offset: number = 0, stride: number = 2): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        if (offset > 0) {\n            data = data.slice(offset, this.length - offset);\n        }\n        const int32s = new IntVector(data, new PrimitiveView(data, stride));\n        int32s.length = this.length / stride | 0;\n        return int32s;\n    }\n}\n\nexport abstract class ListVectorBase<T extends (ListType | FlatListType)> extends Vector<T> {\n    public get values() { return this.data.values; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n    public getValueOffset(index: number) {\n        return this.valueOffsets[index];\n    }\n    public getValueLength(index: number) {\n        return this.valueOffsets[index + 1] - this.valueOffsets[index];\n    }\n}\n\nexport abstract class NestedVector<T extends NestedType> extends Vector<T>  {\n    // @ts-ignore\n    public readonly view: NestedView<T>;\n    // @ts-ignore\n    protected _childData: Data<any>[];\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return this.view.getChildAt<R>(index);\n    }\n    public get childData(): Data<any>[] {\n        let data: Data<T> | Data<any>[];\n        if ((data = this._childData)) {\n            // Return the cached childData reference first\n            return data as Data<any>[];\n        } else if (!(<any> (data = this.data) instanceof ChunkedData)) {\n            // If data isn't chunked, cache and return NestedData's childData\n            return this._childData = data.childData;\n        }\n        // Otherwise if the data is chunked, concatenate the childVectors from each chunk\n        // to construct a single chunked Vector for each column. Then return the ChunkedData\n        // instance from each unified chunked column as the childData of a chunked NestedVector\n        const chunks = ((data as any as ChunkedData<T>).chunkVectors as NestedVector<T>[]);\n        return this._childData = chunks\n            .reduce<(Vector<T> | null)[][]>((cols, chunk) => chunk.childData\n            .reduce<(Vector<T> | null)[][]>((cols, _, i) => (\n                (cols[i] || (cols[i] = [])).push(chunk.getChildAt(i))\n            ) && cols || cols, cols), [] as Vector<T>[][])\n        .map((vecs) => Vector.concat<T>(...vecs).data);\n    }\n}\n\nimport { List, Binary, Utf8, Bool, } from './type';\nimport { Null, Int, Float, Decimal, Date_, Time, Timestamp, Interval } from './type';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, Float16, Float32, Float64 } from './type';\nimport { Struct, Union, SparseUnion, DenseUnion, FixedSizeBinary, FixedSizeList, Map_, Dictionary } from './type';\n\nimport { ChunkedView } from './vector/chunked';\nimport { ValidityView } from './vector/validity';\nimport { DictionaryView } from './vector/dictionary';\nimport { ListView, FixedSizeListView, BinaryView, Utf8View } from './vector/list';\nimport { UnionView, DenseUnionView, NestedView, StructView, MapView } from './vector/nested';\nimport { FlatView, NullView, BoolView, PrimitiveView, FixedSizeView, Float16View } from './vector/flat';\nimport { DateDayView, DateMillisecondView, IntervalYearMonthView } from './vector/flat';\nimport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './vector/flat';\nimport { packBools } from './util/bit';\n\nexport class NullVector extends Vector<Null> {\n    constructor(data: Data<Null>, view: View<Null> = new NullView(data)) {\n        super(data, view);\n    }\n}\n\nexport class BoolVector extends Vector<Bool> {\n    public static from(data: IterableArrayLike<boolean>) {\n        return new BoolVector(new BoolData(new Bool(), data.length, null, packBools(data)) as Data<Bool>);\n    }\n    public get values() { return this.data.values; }\n    constructor(data: Data<Bool>, view: View<Bool> = new BoolView(data)) {\n        super(data, view);\n    }\n}\n\nexport class IntVector<T extends Int = Int<any>> extends FlatVector<T> {\n    public static from(data: Int8Array): IntVector<Int8>;\n    public static from(data: Int16Array): IntVector<Int16>;\n    public static from(data: Int32Array): IntVector<Int32>;\n    public static from(data: Uint8Array): IntVector<Uint8>;\n    public static from(data: Uint16Array): IntVector<Uint16>;\n    public static from(data: Uint32Array): IntVector<Uint32>;\n    public static from(data: Int32Array, is64: true): IntVector<Int64>;\n    public static from(data: Uint32Array, is64: true): IntVector<Uint64>;\n    public static from(data: any, is64?: boolean) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? new IntVector(new FlatData(new Int64(), data.length, null, data))\n                : new IntVector(new FlatData(new Uint64(), data.length, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return new IntVector(new FlatData(new Int8(), data.length, null, data));\n            case Int16Array: return new IntVector(new FlatData(new Int16(), data.length, null, data));\n            case Int32Array: return new IntVector(new FlatData(new Int32(), data.length, null, data));\n            case Uint8Array: return new IntVector(new FlatData(new Uint8(), data.length, null, data));\n            case Uint16Array: return new IntVector(new FlatData(new Uint16(), data.length, null, data));\n            case Uint32Array: return new IntVector(new FlatData(new Uint32(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    static defaultView<T extends Int>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<T>, view: View<T> = IntVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class FloatVector<T extends Float = Float<any>> extends FlatVector<T> {\n    public static from(data: Uint16Array): FloatVector<Float16>;\n    public static from(data: Float32Array): FloatVector<Float32>;\n    public static from(data: Float64Array): FloatVector<Float64>;\n    public static from(data: any) {\n        switch (data.constructor) {\n            case Uint16Array: return new FloatVector(new FlatData(new Float16(), data.length, null, data));\n            case Float32Array: return new FloatVector(new FlatData(new Float32(), data.length, null, data));\n            case Float64Array: return new FloatVector(new FlatData(new Float64(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n    static defaultView<T extends Float>(data: Data<T>): FlatView<any> {\n        return data.type.precision !== Precision.HALF ? new FlatView(data) : new Float16View(data as Data<Float16>);\n    }\n    constructor(data: Data<T>, view: View<T> = FloatVector.defaultView(data)) {\n        super(data, view);\n    }\n}\n\nexport class DateVector extends FlatVector<Date_> {\n    static defaultView<T extends Date_>(data: Data<T>) {\n        return data.type.unit === DateUnit.DAY ? new DateDayView(data) : new DateMillisecondView(data, 2);\n    }\n    constructor(data: Data<Date_>, view: View<Date_> = DateVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case DateUnit.DAY: return new IntVector(data, new TimestampDayView(data as any, 1) as any);\n            case DateUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class DecimalVector extends FlatVector<Decimal> {\n    constructor(data: Data<Decimal>, view: View<Decimal> = new FixedSizeView(data, 4)) {\n        super(data, view);\n    }\n}\n\nexport class TimeVector extends FlatVector<Time> {\n    static defaultView<T extends Time>(data: Data<T>) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data: Data<Time>, view: View<Time> = TimeVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class TimestampVector extends FlatVector<Timestamp> {\n    constructor(data: Data<Timestamp>, view: View<Timestamp> = new FixedSizeView(data, 2)) {\n        super(data, view);\n    }\n    public asEpochMilliseconds(): IntVector<Int32> {\n        let data = (this.data as FlatData<any>).clone(new Int32());\n        switch (this.type.unit) {\n            case TimeUnit.SECOND: return new IntVector(data, new TimestampSecondView(data as any, 1) as any);\n            case TimeUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data as any, 2) as any);\n            case TimeUnit.MICROSECOND: return new IntVector(data, new TimestampMicrosecondView(data as any, 2) as any);\n            case TimeUnit.NANOSECOND: return new IntVector(data, new TimestampNanosecondView(data as any, 2) as any);\n        }\n        throw new TypeError(`Unrecognized time unit \"${TimeUnit[this.type.unit]}\"`);\n    }\n}\n\nexport class IntervalVector extends FlatVector<Interval> {\n    static defaultView<T extends Interval>(data: Data<T>) {\n        return data.type.unit === IntervalUnit.YEAR_MONTH ? new IntervalYearMonthView(data) : new FixedSizeView(data, 2);\n    }\n    constructor(data: Data<Interval>, view: View<Interval> = IntervalVector.defaultView(data)) {\n        super(data, view);\n    }\n    public lows(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    public highs(): IntVector<Int32> {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\n\nexport class BinaryVector extends ListVectorBase<Binary> {\n    constructor(data: Data<Binary>, view: View<Binary> = new BinaryView(data)) {\n        super(data, view);\n    }\n    public asUtf8() {\n        return new Utf8Vector((this.data as FlatListData<any>).clone(new Utf8()));\n    }\n}\n\nexport class FixedSizeBinaryVector extends FlatVector<FixedSizeBinary> {\n    constructor(data: Data<FixedSizeBinary>, view: View<FixedSizeBinary> = new FixedSizeView(data, data.type.byteWidth)) {\n        super(data, view);\n    }\n}\n\nexport class Utf8Vector extends ListVectorBase<Utf8> {\n    constructor(data: Data<Utf8>, view: View<Utf8> = new Utf8View(data)) {\n        super(data, view);\n    }\n    public asBinary() {\n        return new BinaryVector((this.data as FlatListData<any>).clone(new Binary()));\n    }\n}\n\nexport class ListVector<T extends DataType = DataType> extends ListVectorBase<List<T>> {\n    // @ts-ignore\n    public readonly view: ListView<T>;\n    constructor(data: Data<List<T>>, view: ListView<T> = new ListView<T>(data as any)) {\n        super(data, view);\n    }\n    public getChildAt(index: number): Vector<T> | null {\n        return this.view.getChildAt<T>(index);\n    }\n}\n\nexport class FixedSizeListVector<T extends DataType = DataType> extends Vector<FixedSizeList<T>> {\n    // @ts-ignore\n    public readonly view: FixedSizeListView<T>;\n    constructor(data: Data<FixedSizeList<T>>, view: View<FixedSizeList<T>> = new FixedSizeListView(data)) {\n        super(data, view);\n    }\n    public getChildAt(index: number): Vector<T> | null {\n        return this.view.getChildAt<T>(index);\n    }\n}\n\nexport class MapVector extends NestedVector<Map_> {\n    constructor(data: Data<Map_>, view: View<Map_> = new MapView(data)) {\n        super(data, view);\n    }\n    public asStruct() {\n        return new StructVector((this.data as NestedData<any>).clone(new Struct(this.type.children)));\n    }\n}\n\nexport class StructVector extends NestedVector<Struct> {\n    constructor(data: Data<Struct>, view: View<Struct> = new StructView(data)) {\n        super(data, view);\n    }\n    public asMap(keysSorted: boolean = false) {\n        return new MapVector((this.data as NestedData<any>).clone(new Map_(keysSorted, this.type.children)));\n    }\n}\n\nexport class UnionVector<T extends (SparseUnion | DenseUnion) = any> extends NestedVector<T> {\n    constructor(data: Data<T>, view: View<T> = <any> (data.type.mode === UnionMode.Sparse ? new UnionView<SparseUnion>(data as Data<SparseUnion>) : new DenseUnionView(data as Data<DenseUnion>))) {\n        super(data, view);\n    }\n}\n\nexport class DictionaryVector<T extends DataType = DataType> extends Vector<Dictionary<T>> {\n    // @ts-ignore\n    public readonly indices: Vector<Int>;\n    // @ts-ignore\n    public readonly dictionary: Vector<T>;\n    constructor(data: Data<Dictionary<T>>, view: View<Dictionary<T>> = new DictionaryView<T>(data.dictionary, new IntVector(data.indices))) {\n        super(data as Data<any>, view);\n        if (view instanceof ValidityView) {\n            view = (view as any).view;\n        }\n        if (data instanceof DictionaryData && view instanceof DictionaryView) {\n            this.indices = view.indices;\n            this.dictionary = data.dictionary;\n        } else if (data instanceof ChunkedData && view instanceof ChunkedView) {\n            const chunks = view.chunkVectors as DictionaryVector<T>[];\n            // Assume the last chunk's dictionary data is the most up-to-date,\n            // including data from DictionaryBatches that were marked as deltas\n            this.dictionary = chunks[chunks.length - 1].dictionary;\n            this.indices = chunks.reduce<Vector<Int> | null>(\n                (idxs: Vector<Int> | null, dict: DictionaryVector<T>) =>\n                    !idxs ? dict.indices! : idxs.concat(dict.indices!),\n                null\n            )!;\n        } else {\n            throw new TypeError(`Unrecognized DictionaryVector view`);\n        }\n    }\n    public getKey(index: number) { return this.indices.get(index); }\n    public getValue(key: number) { return this.dictionary.get(key); }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n}\n\nexport const createVector = ((VectorLoader: new <T extends DataType>(data: Data<T>) => TypeVisitor) => (\n    <T extends DataType>(data: Data<T>) => TypeVisitor.visitTypeInline(new VectorLoader(data), data.type) as Vector<T>\n))(class VectorLoader<T extends DataType> extends TypeVisitor {\n    constructor(private data: Data<T>) { super(); }\n    visitNull           (_type: Null)            { return new NullVector(<any> this.data);            }\n    visitInt            (_type: Int)             { return new IntVector(<any> this.data);             }\n    visitFloat          (_type: Float)           { return new FloatVector(<any> this.data);           }\n    visitBinary         (_type: Binary)          { return new BinaryVector(<any> this.data);          }\n    visitUtf8           (_type: Utf8)            { return new Utf8Vector(<any> this.data);            }\n    visitBool           (_type: Bool)            { return new BoolVector(<any> this.data);            }\n    visitDecimal        (_type: Decimal)         { return new DecimalVector(<any> this.data);         }\n    visitDate           (_type: Date_)           { return new DateVector(<any> this.data);            }\n    visitTime           (_type: Time)            { return new TimeVector(<any> this.data);            }\n    visitTimestamp      (_type: Timestamp)       { return new TimestampVector(<any> this.data);       }\n    visitInterval       (_type: Interval)        { return new IntervalVector(<any> this.data);        }\n    visitList           (_type: List)            { return new ListVector(<any> this.data);            }\n    visitStruct         (_type: Struct)          { return new StructVector(<any> this.data);          }\n    visitUnion          (_type: Union)           { return new UnionVector(<any> this.data);           }\n    visitFixedSizeBinary(_type: FixedSizeBinary) { return new FixedSizeBinaryVector(<any> this.data); }\n    visitFixedSizeList  (_type: FixedSizeList)   { return new FixedSizeListVector(<any> this.data);   }\n    visitMap            (_type: Map_)            { return new MapVector(<any> this.data);             }\n    visitDictionary     (_type: Dictionary)      { return new DictionaryVector(<any> this.data);      }\n});\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { popcnt_bit_range } from './util/bit';\nimport { VectorLike, Vector } from './vector';\nimport { Int, Bool, FlatListType, List, Struct, Map_ } from './type';\nimport { VectorType, TypedArray, TypedArrayConstructor, Dictionary } from './type';\nimport { DataType, FlatType, ListType, NestedType, SingleNestedType, DenseUnion, SparseUnion } from './type';\n\nexport function toTypedArray<T extends TypedArray>(ArrayType: TypedArrayConstructor<T>, values?: T | ArrayLike<number> | Iterable<number> | null): T {\n    if (!ArrayType && ArrayBuffer.isView(values)) { return values; }\n    return values instanceof ArrayType ? values\n         : !values || !ArrayBuffer.isView(values) ? ArrayType.from(values || [])\n         : new ArrayType(values.buffer, values.byteOffset, values.byteLength / ArrayType.BYTES_PER_ELEMENT);\n}\n\nexport type Data<T extends DataType> = DataTypes<T>[T['TType']] & BaseData<T>;\nexport interface DataTypes<T extends DataType> {\n/*                [Type.NONE]*/  0: BaseData<T>;\n/*                [Type.Null]*/  1: FlatData<T>;\n/*                 [Type.Int]*/  2: FlatData<T>;\n/*               [Type.Float]*/  3: FlatData<T>;\n/*              [Type.Binary]*/  4: FlatListData<T>;\n/*                [Type.Utf8]*/  5: FlatListData<T>;\n/*                [Type.Bool]*/  6: BoolData;\n/*             [Type.Decimal]*/  7: FlatData<T>;\n/*                [Type.Date]*/  8: FlatData<T>;\n/*                [Type.Time]*/  9: FlatData<T>;\n/*           [Type.Timestamp]*/ 10: FlatData<T>;\n/*            [Type.Interval]*/ 11: FlatData<T>;\n/*                [Type.List]*/ 12: ListData<List<T>>;\n/*              [Type.Struct]*/ 13: NestedData<Struct>;\n/*               [Type.Union]*/ 14: UnionData;\n/*     [Type.FixedSizeBinary]*/ 15: FlatData<T>;\n/*       [Type.FixedSizeList]*/ 16: SingleNestedData<any>;\n/*                 [Type.Map]*/ 17: NestedData<Map_>;\n/*  [Type.DenseUnion]*/ DenseUnion: DenseUnionData;\n/*[Type.SparseUnion]*/ SparseUnion: SparseUnionData;\n/*[  Type.Dictionary]*/ Dictionary: DictionaryData<any>;\n}\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Array::null_count is called the\n// first time, the null count will be computed. See ARROW-33\nexport type kUnknownNullCount = -1;\nexport const kUnknownNullCount = -1;\n\nexport class BaseData<T extends DataType = DataType> implements VectorLike {\n    public type: T;\n    public length: number;\n    public offset: number;\n    // @ts-ignore\n    public childData: Data<any>[];\n    protected _nullCount: number | kUnknownNullCount;\n    protected /*  [VectorType.OFFSET]:*/ 0?: Int32Array;\n    protected /*    [VectorType.DATA]:*/ 1?: T['TArray'];\n    protected /*[VectorType.VALIDITY]:*/ 2?: Uint8Array;\n    protected /*    [VectorType.TYPE]:*/ 3?: Int8Array;\n    constructor(type: T, length: number, offset?: number, nullCount?: number) {\n        this.type = type;\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    }\n    public get typeId() { return this.type.TType; }\n    public get nullBitmap() { return this[VectorType.VALIDITY]; }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount === -1 && (nullBitmap = this[VectorType.VALIDITY])) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new BaseData(type, length, offset, nullCount) as any;\n    }\n    public slice(offset: number, length: number) {\n        return length <= 0 ? this : this.sliceInternal(this.clone(\n            this.type, length, this.offset + offset, +(this._nullCount === 0) - 1\n        ) as any, offset, length);\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        let arr: any;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = this[VectorType.TYPE]) && (clone[VectorType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = this[VectorType.OFFSET]) && (clone[VectorType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = this[VectorType.DATA]) && (clone[VectorType.DATA] = this.sliceData(arr, offset, length));\n        return clone;\n    }\n    protected sliceData(data: T['TArray'] & TypedArray, offset: number, length: number) {\n        return data.subarray(offset, offset + length);\n    }\n    protected sliceOffsets(valueOffsets: Int32Array, offset: number, length: number) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n}\n\nexport class FlatData<T extends FlatType> extends BaseData<T> {\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, data: Iterable<number>, offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this[VectorType.DATA] = toTypedArray(this.ArrayType, data);\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new (this.constructor as any)(type, length, this[VectorType.VALIDITY], this[VectorType.DATA], offset, nullCount) as FlatData<R>;\n    }\n}\n\nexport class BoolData extends FlatData<Bool> {\n    protected sliceData(data: Uint8Array) { return data; }\n}\n\nexport class FlatListData<T extends FlatListType> extends FlatData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*    [VectorType.DATA]:*/ 1: T['TArray'];\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get values() { return this[VectorType.DATA]; }\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, data: T['TArray'], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, data, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new FlatListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this[VectorType.DATA], offset, nullCount) as FlatListData<R>;\n    }\n}\n\nexport class DictionaryData<T extends DataType> extends BaseData<Dictionary<T>> {\n    protected _dictionary: Vector<T>;\n    protected _indices: Data<Int<any>>;\n    public get indices() { return this._indices; }\n    public get dictionary() { return this._dictionary; }\n    constructor(type: Dictionary<T>, dictionary: Vector<T>, indices: Data<Int<any>>) {\n        super(type, indices.length, indices.offset, (indices as any)._nullCount);\n        this._indices = indices;\n        this._dictionary = dictionary;\n    }\n    public get nullCount() { return this._indices.nullCount; }\n    public get nullBitmap() { return this._indices.nullBitmap; }\n    public clone<R extends Dictionary<T>>(type: R, length = this.length, offset = this.offset) {\n        const data = this._dictionary.data.clone(type.dictionary as any);\n        return new DictionaryData<R>(\n            this.type as any,\n            this._dictionary.clone(data) as any,\n            this._indices.slice(offset - this.offset, length)\n        ) as any;\n    }\n    protected sliceInternal(clone: this, _offset: number, _length: number) {\n        clone.length = clone._indices.length;\n        clone._nullCount = (clone._indices as any)._nullCount;\n        return clone;\n    }\n}\n\nexport class NestedData<T extends NestedType = NestedType> extends BaseData<T> {\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, offset, nullCount);\n        this.childData = childData;\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new NestedData<R>(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount) as any;\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        if (!this[VectorType.OFFSET]) {\n            clone.childData = this.childData.map((child) => child.slice(offset, length));\n        }\n        return super.sliceInternal(clone, offset, length);\n    }\n}\n\nexport class SingleNestedData<T extends SingleNestedType> extends NestedData<T> {\n    protected _valuesData: Data<T>;\n    public get values() { return this._valuesData; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, [valueChildData], offset, nullCount);\n        this._valuesData = valueChildData;\n    }\n}\n\nexport class ListData<T extends ListType> extends SingleNestedData<T> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public /*[VectorType.VALIDITY]:*/ 2: Uint8Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, valueOffsets: Iterable<number>, valueChildData: Data<T>, offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, valueChildData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new ListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this._valuesData as any, offset, nullCount) as any;\n    }\n}\n\nexport class UnionData<T extends (DenseUnion | SparseUnion) = any> extends NestedData<T> {\n    public /*    [VectorType.TYPE]:*/ 3: T['TArray'];\n    public get typeIds() { return this[VectorType.TYPE]; }\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(type: T, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, childData, offset, nullCount);\n        this[VectorType.TYPE] = toTypedArray(Int8Array, typeIds);\n        this.typeIdToChildIndex = type.typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new UnionData<R>(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount) as any;\n    }\n}\n\nexport class SparseUnionData extends UnionData<SparseUnion> {\n    constructor(type: SparseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n    }\n    public clone<R extends SparseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new SparseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this.childData,\n            offset, nullCount\n        ) as any;\n    }\n}\n\nexport class DenseUnionData extends UnionData<DenseUnion> {\n    public /*  [VectorType.OFFSET]:*/ 0: Int32Array;\n    public get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type: DenseUnion, length: number, nullBitmap: Uint8Array | null | undefined, typeIds: Iterable<number>, valueOffsets: Iterable<number>, childData: Data<any>[], offset?: number, nullCount?: number) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    public clone<R extends DenseUnion>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new DenseUnionData(\n            type,\n            length,\n            this[VectorType.VALIDITY],\n            this[VectorType.TYPE],\n            this[VectorType.OFFSET],\n            this.childData,\n            offset, nullCount\n        ) as any;\n    }\n}\n\nexport class ChunkedData<T extends DataType> extends BaseData<T> {\n    // @ts-ignore\n    protected _chunkData: Data<T>[];\n    protected _chunkVectors: Vector<T>[];\n    protected _chunkOffsets: Uint32Array;\n    public get chunkVectors() { return this._chunkVectors; }\n    public get chunkOffsets() { return this._chunkOffsets; }\n    public get chunkData() {\n        return this._chunkData || (\n               this._chunkData = this._chunkVectors.map(({ data }) => data));\n    }\n    constructor(type: T, length: number, chunkVectors: Vector<T>[], offset?: number, nullCount?: number, chunkOffsets?: Uint32Array) {\n        super(type, length, offset, nullCount);\n        this._chunkVectors = chunkVectors;\n        this._chunkOffsets = chunkOffsets || ChunkedData.computeOffsets(chunkVectors);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount === -1) {\n            this._nullCount = nullCount = this._chunkVectors.reduce((x, c) => x + c.nullCount, 0);\n        }\n        return nullCount;\n    }\n    public clone<R extends T>(type: R, length = this.length, offset = this.offset, nullCount = this._nullCount): Data<R> {\n        return new ChunkedData(\n            type, length,\n            this._chunkVectors.map((vec) => vec.clone(vec.data.clone(type))) as any,\n            offset, nullCount, this._chunkOffsets\n        ) as any;\n    }\n    protected sliceInternal(clone: this, offset: number, length: number) {\n        const chunks = this._chunkVectors;\n        const offsets = this._chunkOffsets;\n        const chunkSlices: Vector<T>[] = [];\n        for (let childIndex = -1, numChildren = chunks.length; ++childIndex < numChildren;) {\n            const child = chunks[childIndex];\n            const childLength = child.length;\n            const childOffset = offsets[childIndex];\n            // If the child is to the right of the slice boundary, exclude\n            if (childOffset >= offset + length) { continue; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= childOffset + childLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (childOffset >= offset && (childOffset + childLength) <= offset + length) {\n                chunkSlices.push(child);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - childOffset);\n            const end = begin + Math.min(childLength - begin, (offset + length) - childOffset);\n            chunkSlices.push(child.slice(begin, end));\n        }\n        clone._chunkVectors = chunkSlices;\n        clone._chunkOffsets = ChunkedData.computeOffsets(chunkSlices);\n        return clone;\n    }\n    static computeOffsets<T extends DataType>(childVectors: Vector<T>[]) {\n        const childOffsets = new Uint32Array(childVectors.length + 1);\n        for (let index = 0, length = childOffsets.length, childOffset = childOffsets[0] = 0; ++index < length;) {\n            childOffsets[index] = (childOffset += childVectors[index - 1].length);\n        }\n        return childOffsets;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View } from '../vector';\nimport { getBool, setBool, iterateBits } from '../util/bit';\nimport { FlatType, PrimitiveType, IterableArrayLike } from '../type';\nimport { Bool, Float16, Date_, Interval, Null, Int32, Timestamp } from '../type';\n\nexport class FlatView<T extends FlatType> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public get(index: number): T['TValue'] {\n        return this.values[index];\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.values[index] = value;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values.subarray(0, this.length);\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue']> {\n        return this.values.subarray(0, this.length)[Symbol.iterator]() as IterableIterator<T['TValue']>;\n    }\n}\n\nexport class NullView implements View<Null> {\n    public length: number;\n    constructor(data: Data<Null>) {\n        this.length = data.length;\n    }\n    public clone(data: Data<Null>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public set(): void {}\n    public get() { return null; }\n    public toArray(): IterableArrayLike<null> {\n        return [...this];\n    }\n    public indexOf(search: any) {\n        // if you're looking for nulls and the view isn't empty, we've got 'em!\n        return search === null && this.length > 0 ? 0 : -1;\n    }\n    public *[Symbol.iterator](): IterableIterator<null> {\n        for (let index = -1, length = this.length; ++index < length;) {\n            yield null;\n        }\n    }\n}\n\nexport class BoolView extends FlatView<Bool> {\n    protected offset: number;\n    constructor(data: Data<Bool>) {\n        super(data);\n        this.offset = data.offset;\n    }\n    public toArray() { return [...this]; }\n    public get(index: number): boolean {\n        const boolBitIndex = this.offset + index;\n        return getBool(null, index, this.values[boolBitIndex >> 3], boolBitIndex % 8);\n    }\n    public set(index: number, value: boolean): void {\n        setBool(this.values, this.offset + index, value);\n    }\n    public [Symbol.iterator](): IterableIterator<boolean> {\n        return iterateBits<boolean>(this.values, this.offset, this.length, this.values, getBool);\n    }\n}\n\nexport class PrimitiveView<T extends PrimitiveType> extends FlatView<T> {\n    public size: number;\n    public ArrayType: T['ArrayType'];\n    constructor(data: Data<T>, size?: number) {\n        super(data);\n        this.size = size || 1;\n        this.ArrayType = data.type.ArrayType;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, this.size) as this;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values[index * size];\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values[index * size] = value;\n    }\n    public get(index: number): T['TValue'] {\n        return this.getValue(this.values, index, this.size);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setValue(this.values, index, this.size, value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.size > 1 ?\n            new this.ArrayType(this) :\n            this.values.subarray(0, this.length);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getValue;\n        const { size, values, length } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, size);\n        }\n    }\n}\n\nexport class FixedSizeView<T extends PrimitiveType> extends PrimitiveView<T> {\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return this.values;\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value.every((d: number, i: number) => d === search[i])) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    protected getValue(values: T['TArray'], index: number, size: number): T['TValue'] {\n        return values.subarray(index * size, index * size + size);\n    }\n    protected setValue(values: T['TArray'], index: number, size: number, value: T['TValue']): void {\n        values.set((value as T['TArray']).subarray(0, size), index * size);\n    }\n}\n\nexport class Float16View extends PrimitiveView<Float16> {\n    public toArray() { return new Float32Array(this); }\n    protected getValue(values: Uint16Array, index: number, size: number): number {\n        return (values[index * size] - 32767) / 32767;\n    }\n    protected setValue(values: Uint16Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 32767) + 32767;\n    }\n}\n\nexport class DateDayView extends PrimitiveView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochDaysToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        values[index * size] = value.valueOf() / 86400000;\n    }\n}\n\nexport class DateMillisecondView extends FixedSizeView<Date_> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Date {\n        return epochMillisecondsLongToDate(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Date): void {\n        const epochMs = value.valueOf();\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampDayView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochDaysToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 86400000) | 0;\n    }\n}\n\nexport class TimestampSecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochSecondsToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs / 1000) | 0;\n    }\n}\n\nexport class TimestampMillisecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMillisecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\n\nexport class TimestampMicrosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochMicrosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000) / 4294967296) | 0;\n    }\n}\n\nexport class TimestampNanosecondView extends PrimitiveView<Timestamp> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return epochNanosecondsLongToMs(values, index * size);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, epochMs: number): void {\n        values[index * size] = ((epochMs / 1000000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000000) / 4294967296) | 0;\n    }\n}\n\nexport class IntervalYearMonthView extends PrimitiveView<Interval> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): Int32Array {\n        const interval = values[index * size];\n        return new Int32Array([interval / 12, /* years */ interval % 12  /* months */]);\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: Int32Array): void {\n        values[index * size] = (value[0] * 12) + (value[1] % 12);\n    }\n}\n\nexport class IntervalYearView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] / 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (value * 12) + (values[index * size] % 12);\n    }\n}\n\nexport class IntervalMonthView extends PrimitiveView<Int32> {\n    public toArray() { return [...this]; }\n    protected getValue(values: Int32Array, index: number, size: number): number {\n        return values[index * size] % 12;\n    }\n    protected setValue(values: Int32Array, index: number, size: number, value: number): void {\n        values[index * size] = (values[index * size] * 12) + (value % 12);\n    }\n}\n\nexport function epochSecondsToMs(data: Int32Array, index: number) { return 1000 * data[index]; }\nexport function epochDaysToMs(data: Int32Array, index: number) { return 86400000 * data[index]; }\nexport function epochMillisecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1]) + (data[index] >>> 0); }\nexport function epochMicrosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000); }\nexport function epochNanosecondsLongToMs(data: Int32Array, index: number) { return 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000); }\n\nexport function epochMillisecondsToDate(epochMs: number) { return new Date(epochMs); }\nexport function epochDaysToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochDaysToMs(data, index)); }\nexport function epochSecondsToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochSecondsToMs(data, index)); }\nexport function epochNanosecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochNanosecondsLongToMs(data, index)); }\nexport function epochMillisecondsLongToDate(data: Int32Array, index: number) { return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index)); }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Schema, Long, MessageHeader, MetadataVersion } from '../type';\n\nexport class Footer {\n    constructor(public dictionaryBatches: FileBlock[], public recordBatches: FileBlock[], public schema: Schema) {}\n}\n\nexport class FileBlock {\n    public offset: number;\n    public bodyLength: number;\n    constructor(public metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\nexport class Message {\n    public bodyLength: number;\n    public version: MetadataVersion;\n    public headerType: MessageHeader;\n    constructor(version: MetadataVersion, bodyLength: Long | number, headerType: MessageHeader) {\n        this.version = version;\n        this.headerType = headerType;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    static isSchema(m: Message): m is Schema { return m.headerType === MessageHeader.Schema; }\n    static isRecordBatch(m: Message): m is RecordBatchMetadata { return m.headerType === MessageHeader.RecordBatch; }\n    static isDictionaryBatch(m: Message): m is DictionaryBatch { return m.headerType === MessageHeader.DictionaryBatch; }\n}\n\nexport class RecordBatchMetadata extends Message {\n    public length: number;\n    public nodes: FieldMetadata[];\n    public buffers: BufferMetadata[];\n    constructor(version: MetadataVersion, length: Long | number, nodes: FieldMetadata[], buffers: BufferMetadata[], bodyLength?: Long | number) {\n        if (bodyLength === void(0)) {\n            bodyLength = buffers.reduce((bodyLength, buffer) => bodyLength + buffer.length, 0);\n        }\n        super(version, bodyLength, MessageHeader.RecordBatch);\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class DictionaryBatch extends Message {\n    public id: number;\n    public isDelta: boolean;\n    public data: RecordBatchMetadata;\n    constructor(version: MetadataVersion, data: RecordBatchMetadata, id: Long | number, isDelta: boolean = false) {\n        super(version, data.bodyLength, MessageHeader.DictionaryBatch);\n        this.isDelta = isDelta;\n        this.data = data;\n        this.id = typeof id === 'number' ? id : id.low;\n    }\n    private static atomicDictionaryId = 0;\n    public static getId() { return DictionaryBatch.atomicDictionaryId++; }\n    public get nodes(): FieldMetadata[] { return this.data.nodes; }\n    public get buffers(): BufferMetadata[] { return this.data.buffers; }\n}\n\nexport class BufferMetadata {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\nexport class FieldMetadata {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { TypedArray } from '../type';\n\nexport function align(value: number, alignment: number) {\n    return value + padding(value, alignment);\n}\n\nexport function padding(value: number, alignment: number) {\n    return (value % alignment === 0 ? 0 : alignment - value % alignment);\n}\n\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\nexport function packBools(values: Iterable<any>) {\n    let n = 0, i = 0;\n    let xs: number[] = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do { xs[i] = 0; } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\nexport function popcnt_array(arr: TypedArray, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","export { ChunkedView } from './chunked';\nexport { ValidityView } from './validity';\nexport { DictionaryView } from './dictionary';\nexport { ListView, FixedSizeListView, BinaryView, Utf8View } from './list';\nexport { UnionView, DenseUnionView, NestedView, StructView, MapView } from './nested';\nexport { FlatView, NullView, BoolView, PrimitiveView, FixedSizeView, Float16View } from './flat';\nexport { DateDayView, DateMillisecondView } from './flat';\nexport { IntervalYearMonthView, IntervalYearView, IntervalMonthView } from './flat';\nexport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './flat';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst carryBit16 = 1 << 16;\n\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    high(): number { return this.buffer[1]; }\n    low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\nexport class Uint64 extends BaseInt64 {\n    times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int64 extends BaseInt64 {\n    negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\nexport const PADDING = 4;\nexport const MAGIC_STR = 'ARROW1';\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function isValidArrowFile(bb: ByteBuffer) {\n    let fileLength = bb.capacity(), footerLength: number, lengthOffset: number;\n    if ((fileLength < magicX2AndPadding /*                     Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        (/*                                                    Invalid footer length  */\n        (footerLength = bb.readInt32(lengthOffset = fileLength - magicAndPadding)) < 1 &&\n        (footerLength + lengthOffset > fileLength))) {\n        return false;\n    }\n    return true;\n}\n\nexport const magicLength = MAGIC.length;\nexport const magicAndPadding = magicLength + PADDING;\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { Type, DataType, Dictionary } from './type';\nimport { Utf8, Binary, Decimal, FixedSizeBinary } from './type';\nimport { List, FixedSizeList, Union, Map_, Struct } from './type';\nimport { Bool, Null, Int, Float, Date_, Time, Interval, Timestamp } from './type';\n\nexport interface VisitorNode {\n    acceptTypeVisitor(visitor: TypeVisitor): any;\n    acceptVectorVisitor(visitor: VectorVisitor): any;\n}\n\nexport abstract class TypeVisitor {\n    visit(type: Partial<VisitorNode>): any {\n        return type.acceptTypeVisitor && type.acceptTypeVisitor(this) || null;\n    }\n    visitMany(types: Partial<VisitorNode>[]): any[] {\n        return types.map((type) => this.visit(type));\n    }\n    abstract visitNull?(type: Null): any;\n    abstract visitBool?(type: Bool): any;\n    abstract visitInt?(type: Int): any;\n    abstract visitFloat?(type: Float): any;\n    abstract visitUtf8?(type: Utf8): any;\n    abstract visitBinary?(type: Binary): any;\n    abstract visitFixedSizeBinary?(type: FixedSizeBinary): any;\n    abstract visitDate?(type: Date_): any;\n    abstract visitTimestamp?(type: Timestamp): any;\n    abstract visitTime?(type: Time): any;\n    abstract visitDecimal?(type: Decimal): any;\n    abstract visitList?(type: List): any;\n    abstract visitStruct?(type: Struct): any;\n    abstract visitUnion?(type: Union<any>): any;\n    abstract visitDictionary?(type: Dictionary): any;\n    abstract visitInterval?(type: Interval): any;\n    abstract visitFixedSizeList?(type: FixedSizeList): any;\n    abstract visitMap?(type: Map_): any;\n\n    static visitTypeInline<T extends DataType>(visitor: TypeVisitor, type: T): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull            && visitor.visitNull(type            as any as Null);\n            case Type.Int:             return visitor.visitInt             && visitor.visitInt(type             as any as Int);\n            case Type.Float:           return visitor.visitFloat           && visitor.visitFloat(type           as any as Float);\n            case Type.Binary:          return visitor.visitBinary          && visitor.visitBinary(type          as any as Binary);\n            case Type.Utf8:            return visitor.visitUtf8            && visitor.visitUtf8(type            as any as Utf8);\n            case Type.Bool:            return visitor.visitBool            && visitor.visitBool(type            as any as Bool);\n            case Type.Decimal:         return visitor.visitDecimal         && visitor.visitDecimal(type         as any as Decimal);\n            case Type.Date:            return visitor.visitDate            && visitor.visitDate(type            as any as Date_);\n            case Type.Time:            return visitor.visitTime            && visitor.visitTime(type            as any as Time);\n            case Type.Timestamp:       return visitor.visitTimestamp       && visitor.visitTimestamp(type       as any as Timestamp);\n            case Type.Interval:        return visitor.visitInterval        && visitor.visitInterval(type        as any as Interval);\n            case Type.List:            return visitor.visitList            && visitor.visitList(type            as any as List<T>);\n            case Type.Struct:          return visitor.visitStruct          && visitor.visitStruct(type          as any as Struct);\n            case Type.Union:           return visitor.visitUnion           && visitor.visitUnion(type           as any as Union);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(type as any as FixedSizeBinary);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList   && visitor.visitFixedSizeList(type   as any as FixedSizeList);\n            case Type.Map:             return visitor.visitMap             && visitor.visitMap(type             as any as Map_);\n            case Type.Dictionary:      return visitor.visitDictionary      && visitor.visitDictionary(type      as any as Dictionary);\n            default: return null;\n        }\n    }\n}\n\nexport abstract class VectorVisitor {\n    visit(vector: Partial<VisitorNode>): any {\n        return vector.acceptVectorVisitor && vector.acceptVectorVisitor(this) || null;\n    }\n    visitMany(vectors: Partial<VisitorNode>[]): any[] {\n        return vectors.map((vector) => this.visit(vector));\n    }\n    abstract visitNull?(vector: Vector<Null>): any;\n    abstract visitBool?(vector: Vector<Bool>): any;\n    abstract visitInt?(vector: Vector<Int>): any;\n    abstract visitFloat?(vector: Vector<Float>): any;\n    abstract visitUtf8?(vector: Vector<Utf8>): any;\n    abstract visitBinary?(vector: Vector<Binary>): any;\n    abstract visitFixedSizeBinary?(vector: Vector<FixedSizeBinary>): any;\n    abstract visitDate?(vector: Vector<Date_>): any;\n    abstract visitTimestamp?(vector: Vector<Timestamp>): any;\n    abstract visitTime?(vector: Vector<Time>): any;\n    abstract visitDecimal?(vector: Vector<Decimal>): any;\n    abstract visitList?(vector: Vector<List>): any;\n    abstract visitStruct?(vector: Vector<Struct>): any;\n    abstract visitUnion?(vector: Vector<Union<any>>): any;\n    abstract visitDictionary?(vector: Vector<Dictionary>): any;\n    abstract visitInterval?(vector: Vector<Interval>): any;\n    abstract visitFixedSizeList?(vector: Vector<FixedSizeList>): any;\n    abstract visitMap?(vector: Vector<Map_>): any;\n\n    static visitTypeInline<T extends DataType>(visitor: VectorVisitor, type: T, vector: Vector<T>): any {\n        switch (type.TType) {\n            case Type.Null:            return visitor.visitNull            && visitor.visitNull(vector            as any as Vector<Null>);\n            case Type.Int:             return visitor.visitInt             && visitor.visitInt(vector             as any as Vector<Int>);\n            case Type.Float:           return visitor.visitFloat           && visitor.visitFloat(vector           as any as Vector<Float>);\n            case Type.Binary:          return visitor.visitBinary          && visitor.visitBinary(vector          as any as Vector<Binary>);\n            case Type.Utf8:            return visitor.visitUtf8            && visitor.visitUtf8(vector            as any as Vector<Utf8>);\n            case Type.Bool:            return visitor.visitBool            && visitor.visitBool(vector            as any as Vector<Bool>);\n            case Type.Decimal:         return visitor.visitDecimal         && visitor.visitDecimal(vector         as any as Vector<Decimal>);\n            case Type.Date:            return visitor.visitDate            && visitor.visitDate(vector            as any as Vector<Date_>);\n            case Type.Time:            return visitor.visitTime            && visitor.visitTime(vector            as any as Vector<Time>);\n            case Type.Timestamp:       return visitor.visitTimestamp       && visitor.visitTimestamp(vector       as any as Vector<Timestamp>);\n            case Type.Interval:        return visitor.visitInterval        && visitor.visitInterval(vector        as any as Vector<Interval>);\n            case Type.List:            return visitor.visitList            && visitor.visitList(vector            as any as Vector<List<T>>);\n            case Type.Struct:          return visitor.visitStruct          && visitor.visitStruct(vector          as any as Vector<Struct>);\n            case Type.Union:           return visitor.visitUnion           && visitor.visitUnion(vector           as any as Vector<Union>);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(vector as any as Vector<FixedSizeBinary>);\n            case Type.FixedSizeList:   return visitor.visitFixedSizeList   && visitor.visitFixedSizeList(vector   as any as Vector<FixedSizeList>);\n            case Type.Map:             return visitor.visitMap             && visitor.visitMap(vector             as any as Vector<Map_>);\n            case Type.Dictionary:      return visitor.visitDictionary      && visitor.visitDictionary(vector      as any as Vector<Dictionary>);\n            default: return null;\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Vector, DictionaryVector } from './vector';\n\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n        this.vector = batch.getChildAt(this.colidx)!;\n        return this.vector.get.bind(this.vector);\n    }\n}\n\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[]\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p)\n        }, [])\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p)\n        }, [])\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Struct, DataType } from './type';\nimport { flatbuffers } from 'flatbuffers';\nimport { View, Vector, StructVector } from './vector';\nimport { Data, NestedData } from './data';\nimport { PipeIterator } from './util/node';\nimport { valueToString, leftPad } from './util/pretty';\n\nimport Long = flatbuffers.Long;\n\nexport class RecordBatch extends StructVector {\n    public static from(vectors: Vector[]) {\n        return new RecordBatch(Schema.from(vectors),\n            Math.max(...vectors.map((v) => v.length)),\n            vectors\n        );\n    }\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    constructor(schema: Schema, data: Data<Struct>, view: View<Struct>);\n    constructor(schema: Schema, numRows: Long | number, cols: Data<any> | Vector[]);\n    constructor(...args: any[]) {\n        if (typeof args[1] !== 'number') {\n            const data = args[1] as Data<Struct>;\n            super(data, args[2]);\n            this.schema = args[0];\n            this.length = data.length;\n        } else {\n            const [schema, numRows, cols] = args;\n            const childData: Data<any>[] = new Array(cols.length);\n            for (let index = -1, length = cols.length; ++index < length;) {\n                const col: Data<any> | Vector = cols[index];\n                childData[index] = col instanceof Vector ? col.data : col;\n            }\n            super(new NestedData(new Struct(schema.fields), numRows, null, childData));\n            this.schema = schema;\n            this.length = numRows;\n        }\n        this.numCols = this.schema.fields.length;\n    }\n    public clone<R extends Struct>(data: Data<R>, view: View<R> = this.view.clone(data)): this {\n        return new RecordBatch(this.schema, data as any, view) as any;\n    }\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numCols ? null : super.getChildAt<R>(index);\n    }\n    public select(...columnNames: string[]) {\n        const fields = this.schema.fields;\n        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new RecordBatch(\n            this.schema.select(...columnNames), this.length,\n            this.childData.filter((_, i) => namesToKeep[fields[i].name])\n        );\n    }\n    public rowsToString(separator = ' | ', rowOffset = 0, maxColumnWidths: number[] = []) {\n        return new PipeIterator(recordBatchRowsToString(this, separator, rowOffset, maxColumnWidths), 'utf8');\n    }\n}\n\nfunction* recordBatchRowsToString(recordBatch: RecordBatch, separator = ' | ', rowOffset = 0, maxColumnWidths: number[] = []) {\n    const fields = recordBatch.schema.fields;\n    const header = ['row_id', ...fields.map((f) => `${f}`)].map(valueToString);\n    header.forEach((x, i) => {\n        maxColumnWidths[i] = Math.max(maxColumnWidths[i] || 0, x.length);\n    });\n    // Pass one to convert to strings and count max column widths\n    for (let i = -1, n = recordBatch.length - 1; ++i < n;) {\n        let val, row = [rowOffset + i, ...recordBatch.get(i) as Struct['TValue']];\n        for (let j = -1, k = row.length; ++j < k; ) {\n            val = valueToString(row[j]);\n            maxColumnWidths[j] = Math.max(maxColumnWidths[j] || 0, val.length);\n        }\n    }\n    for (let i = -1; ++i < recordBatch.length;) {\n        if ((rowOffset + i) % 1000 === 0) {\n            yield header.map((x, j) => leftPad(x, ' ', maxColumnWidths[j])).join(separator);\n        }\n        yield [rowOffset + i, ...recordBatch.get(i) as Struct['TValue']]\n            .map((x) => valueToString(x))\n            .map((x, j) => leftPad(x, ' ', maxColumnWidths[j]))\n            .join(separator);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { RecordBatch } from '../../recordbatch';\nimport { TypeVisitor } from '../../visitor';\nimport { FlatType, NestedType, ListType } from '../../type';\nimport { Message, FieldMetadata, BufferMetadata } from '../metadata';\nimport { FlatData, ListData, NestedData, SingleNestedData, DenseUnionData, SparseUnionData, BoolData, FlatListData, DictionaryData } from '../../data';\nimport {\n    Schema, Field,\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n    UnionMode, SparseUnion, DenseUnion, FlatListType, DataType,\n} from '../../type';\n\nexport function* readRecordBatches(messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport async function* readRecordBatchesAsync(messages: AsyncIterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>) {\n    for await (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\n\nexport function* readRecordBatch(schema: Schema, message: Message, loader: TypeDataLoader) {\n    if (Message.isRecordBatch(message)) {\n        yield new RecordBatch(schema, message.length, loader.visitFields(schema.fields));\n    } else if (Message.isDictionaryBatch(message)) {\n        const dictionaryId = message.id;\n        const dictionaries = loader.dictionaries;\n        const dictionaryField = schema.dictionaries.get(dictionaryId)!;\n        const dictionaryDataType = (dictionaryField.type as Dictionary).dictionary;\n        let dictionaryVector = Vector.create(loader.visit(dictionaryDataType));\n        if (message.isDelta && dictionaries.has(dictionaryId)) {\n            dictionaryVector = dictionaries.get(dictionaryId)!.concat(dictionaryVector);\n        }\n        dictionaries.set(dictionaryId, dictionaryVector);\n    }\n}\n\nexport abstract class TypeDataLoader extends TypeVisitor {\n\n    public dictionaries: Map<number, Vector>;\n    protected nodes: Iterator<FieldMetadata>;\n    protected buffers: Iterator<BufferMetadata>;\n\n    constructor(nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super();\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visitFields(fields: Field[]) { return fields.map((field) => this.visit(field.type)); }\n\n    public visitNull           (type: Null)            { return this.visitNullType(type);   }\n    public visitInt            (type: Int)             { return this.visitFlatType(type);   }\n    public visitFloat          (type: Float)           { return this.visitFlatType(type);   }\n    public visitBinary         (type: Binary)          { return this.visitFlatList(type);   }\n    public visitUtf8           (type: Utf8)            { return this.visitFlatList(type);   }\n    public visitBool           (type: Bool)            { return this.visitBoolType(type);   }\n    public visitDecimal        (type: Decimal)         { return this.visitFlatType(type);   }\n    public visitDate           (type: Date_)           { return this.visitFlatType(type);   }\n    public visitTime           (type: Time)            { return this.visitFlatType(type);   }\n    public visitTimestamp      (type: Timestamp)       { return this.visitFlatType(type);   }\n    public visitInterval       (type: Interval)        { return this.visitFlatType(type);   }\n    public visitList           (type: List)            { return this.visitListType(type);   }\n    public visitStruct         (type: Struct)          { return this.visitNestedType(type); }\n    public visitUnion          (type: Union)           { return this.visitUnionType(type);  }\n    public visitFixedSizeBinary(type: FixedSizeBinary) { return this.visitFlatType(type);   }\n    public visitFixedSizeList  (type: FixedSizeList)   { return this.visitFixedSizeListType(type); }\n    public visitMap            (type: Map_)            { return this.visitNestedType(type); }\n    public visitDictionary     (type: Dictionary)      {\n        return new DictionaryData(type, this.dictionaries.get(type.id)!, this.visit(type.indices));\n    }\n    protected getFieldMetadata() { return this.nodes.next().value; }\n    protected getBufferMetadata() { return this.buffers.next().value; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.getBufferMetadata()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected abstract readData<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected abstract readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata): any;\n    protected visitNullType(type: Null, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<any>(type, length, this.readNullBitmap(type, nullCount), new Uint8Array(0), 0, nullCount);\n    }\n    protected visitFlatType<T extends FlatType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatData<T>(type, length, this.readNullBitmap(type, nullCount), this.readData(type), 0, nullCount);\n    }\n    protected visitBoolType(type: Bool, { length, nullCount }: FieldMetadata = this.getFieldMetadata(), data?: Uint8Array) {\n        return new BoolData(type, length, this.readNullBitmap(type, nullCount), data || this.readData(type), 0, nullCount);\n    }\n    protected visitFlatList<T extends FlatListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new FlatListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type), 0, nullCount);\n    }\n    protected visitListType<T extends ListType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new ListData<T>(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitFixedSizeListType<T extends FixedSizeList>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new SingleNestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visit(type.children![0].type), 0, nullCount);\n    }\n    protected visitNestedType<T extends NestedType>(type: T, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return new NestedData<T>(type, length, this.readNullBitmap(type, nullCount), this.visitFields(type.children), 0, nullCount);\n    }\n    protected visitUnionType(type: DenseUnion | SparseUnion, { length, nullCount }: FieldMetadata = this.getFieldMetadata()) {\n        return type.mode === UnionMode.Sparse ?\n            new SparseUnionData(type as SparseUnion, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount) :\n            new DenseUnionData(type as DenseUnion, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitFields(type.children), 0, nullCount);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { packBools } from '../../util/bit';\nimport * as IntUtil from '../../util/int';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport Long = flatbuffers.Long;\n\nexport function* readJSON(json: any) {\n    const schema = schemaFromJSON(json['schema']);\n    const dictionaries = new Map<number, Vector>();\n    for (const batch of (json['dictionaries'] || [])) {\n        const message = dictionaryBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['data']['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n    for (const batch of (json['batches'] || [])) {\n        const message = recordBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(\n                flattenDataSources(batch['columns']),\n                arrayIterator(message.nodes),\n                arrayIterator(message.buffers),\n                dictionaries\n            )\n        };\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\nfunction flattenDataSources(xs: any[]): any[][] {\n    return (xs || []).reduce<any[][]>((buffers, column: any) => [\n        ...buffers,\n        ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n        ...(column['OFFSET'] && [column['OFFSET']] || []),\n        ...(column['TYPE'] && [column['TYPE']] || []),\n        ...(column['DATA'] && [column['DATA']] || []),\n        ...flattenDataSources(column['children'])\n    ], [] as any[][]);\n}\n\nconst utf8Encoder = new TextEncoder('utf-8');\n\nexport class JSONDataLoader extends TypeDataLoader {\n    constructor(private sources: any[][], nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.getBufferMetadata()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int32Array(this.sources[offset]);\n    }\n    protected readTypeIds<T extends DataType>(_type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Int8Array(this.sources[offset]);\n    }\n    protected readData<T extends DataType>(type: T, { offset }: BufferMetadata = this.getBufferMetadata()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type) === true) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return new Uint8Array(int64DataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type) === true) {\n            return new Uint8Array(decimalDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) === true || DataType.isFixedSizeBinary(type) === true) {\n            return new Uint8Array(binaryDataFromJSON(sources[offset] as string[]));\n        } else if (DataType.isBool(type) === true) {\n            return new Uint8Array(packBools(sources[offset] as number[]).buffer);\n        } else if (DataType.isUtf8(type) === true) {\n            return utf8Encoder.encode((sources[offset] as string[]).join(''));\n        } else {\n            return toTypedArray(type.ArrayType, sources[offset].map((x) => +x)) as any;\n        }\n    }\n}\n\nfunction int64DataFromJSON(values: string[]) {\n    const data = new Uint32Array(values.length * 2);\n    for (let i = -1, n = values.length; ++i < n;) {\n        // Force all values (even numbers) to be parsed as strings since\n        // pulling out high and low bits seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        IntUtil.Int64.fromString(values[i].toString(), new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n    return data.buffer;\n}\n\nfunction decimalDataFromJSON(values: string[]) {\n    const data = new Uint32Array(values.length * 4);\n    for (let i = -1, n = values.length; ++i < n;) {\n        IntUtil.Int128.fromString(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n    }\n    return data.buffer;\n}\n\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data.buffer;\n}\n\nimport * as Schema_ from '../../fb/Schema';\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nimport TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nimport UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport { toTypedArray } from '../../data';\n\nfunction schemaFromJSON(s: any): Schema {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    return new Schema(\n        fieldsFromJSON(s['fields'], dictionaryFields),\n        customMetadata(s['customMetadata']),\n        MetadataVersion.V4, dictionaryFields\n    );\n}\n\nfunction recordBatchFromJSON(b: any): RecordBatchMetadata {\n    return new RecordBatchMetadata(\n        MetadataVersion.V4,\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\nfunction dictionaryBatchFromJSON(b: any): DictionaryBatch {\n    return new DictionaryBatch(\n        MetadataVersion.V4,\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\nfunction fieldsFromJSON(fs: any[], dictionaryFields: Map<number, Field<Dictionary>> | null): Field[] {\n    return (fs || [])\n        .map((f) => fieldFromJSON(f, dictionaryFields))\n        .filter((f) => f != null) as Field[];\n}\n\nfunction fieldNodesFromJSON(xs: any[]): FieldMetadata[] {\n    return (xs || []).reduce<FieldMetadata[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldMetadata(\n            new Long(column['count'], 0),\n            new Long(nullCountFromJSON(column['VALIDITY']), 0)\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldMetadata[]);\n}\n\nfunction buffersFromJSON(xs: any[], buffers: BufferMetadata[] = []): BufferMetadata[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));\n        column['OFFSET'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));\n        column['TYPE'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['TYPE'].length, 0)));\n        column['DATA'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\nfunction fieldFromJSON(f: any, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f['name'];\n    let field: Field | void;\n    let nullable = f['nullable'];\n    let dataType: DataType<any> | null;\n    let id: number, keysMeta: any, dictMeta: any;\n    let metadata = customMetadata(f['customMetadata']);\n    if (!dictionaryFields || !(dictMeta = f['dictionary'])) {\n        if (dataType = typeFromJSON(f['type'], fieldsFromJSON(f['children'], dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta['id'])\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromJSON(f['type'], fieldsFromJSON(f['children'], null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta['indexType']) ? intFromJSON(keysMeta)! : new Int32(),\n            id, dictMeta['isOrdered']\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(metadata?: any) {\n    return new Map<string, string>(Object.entries(metadata || {}));\n}\n\nconst namesToTypeMap: { [n: string]: Type }  = {\n    'NONE': Type.NONE,\n    'null': Type.Null,\n    'int': Type.Int,\n    'floatingpoint': Type.FloatingPoint,\n    'binary': Type.Binary,\n    'bool': Type.Bool,\n    'utf8': Type.Utf8,\n    'decimal': Type.Decimal,\n    'date': Type.Date,\n    'time': Type.Time,\n    'timestamp': Type.Timestamp,\n    'interval': Type.Interval,\n    'list': Type.List,\n    'struct': Type.Struct_,\n    'union': Type.Union,\n    'fixedsizebinary': Type.FixedSizeBinary,\n    'fixedsizelist': Type.FixedSizeList,\n    'map': Type.Map,\n};\n\nfunction typeFromJSON(t: any, children?: Field[]) {\n    switch (namesToTypeMap[t['name']]) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromJSON(t);\n        case Type.Int: return intFromJSON(t);\n        case Type.FloatingPoint: return floatingPointFromJSON(t);\n        case Type.Binary: return binaryFromJSON(t);\n        case Type.Utf8: return utf8FromJSON(t);\n        case Type.Bool: return boolFromJSON(t);\n        case Type.Decimal: return decimalFromJSON(t);\n        case Type.Date: return dateFromJSON(t);\n        case Type.Time: return timeFromJSON(t);\n        case Type.Timestamp: return timestampFromJSON(t);\n        case Type.Interval: return intervalFromJSON(t);\n        case Type.List: return listFromJSON(t, children || []);\n        case Type.Struct_: return structFromJSON(t, children || []);\n        case Type.Union: return unionFromJSON(t, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromJSON(t);\n        case Type.FixedSizeList: return fixedSizeListFromJSON(t, children || []);\n        case Type.Map: return mapFromJSON(t, children || []);\n    }\n    throw new Error(`Unrecognized type ${t['name']}`);\n}\n\nfunction nullFromJSON           (_type: any)                    { return new Null();                                                                               }\nfunction intFromJSON            (_type: any)                    { switch (_type['bitWidth']) {\n                                                                      case  8: return _type['isSigned'] ? new  Int8() : new  Uint8();\n                                                                      case 16: return _type['isSigned'] ? new Int16() : new Uint16();\n                                                                      case 32: return _type['isSigned'] ? new Int32() : new Uint32();\n                                                                      case 64: return _type['isSigned'] ? new Int64() : new Uint64();\n                                                                  }\n                                                                  return null;                                                                                     }\nfunction floatingPointFromJSON  (_type: any)                    { switch (Precision[_type['precision']] as any) {\n                                                                      case Precision.HALF: return new Float16();\n                                                                      case Precision.SINGLE: return new Float32();\n                                                                      case Precision.DOUBLE: return new Float64();\n                                                                  }\n                                                                  return null;                                                                                     }\nfunction binaryFromJSON         (_type: any)                    { return new Binary();                                                                             }\nfunction utf8FromJSON           (_type: any)                    { return new Utf8();                                                                               }\nfunction boolFromJSON           (_type: any)                    { return new Bool();                                                                               }\nfunction decimalFromJSON        (_type: any)                    { return new Decimal(_type['scale'], _type['precision']);                                          }\nfunction dateFromJSON           (_type: any)                    { return new Date_(DateUnit[_type['unit']] as any);                                                }\nfunction timeFromJSON           (_type: any)                    { return new Time(TimeUnit[_type['unit']] as any, _type['bitWidth'] as TimeBitWidth);              }\nfunction timestampFromJSON      (_type: any)                    { return new Timestamp(TimeUnit[_type['unit']] as any, _type['timezone']);                         }\nfunction intervalFromJSON       (_type: any)                    { return new Interval(IntervalUnit[_type['unit']] as any);                                         }\nfunction listFromJSON           (_type: any, children: Field[]) { return new List(children);                                                                       }\nfunction structFromJSON         (_type: any, children: Field[]) { return new Struct(children);                                                                     }\nfunction unionFromJSON          (_type: any, children: Field[]) { return new Union(UnionMode[_type['mode']] as any, (_type['typeIds'] || []) as Type[], children); }\nfunction fixedSizeBinaryFromJSON(_type: any)                    { return new FixedSizeBinary(_type['byteWidth']);                                                  }\nfunction fixedSizeListFromJSON  (_type: any, children: Field[]) { return new FixedSizeList(_type['listSize'], children);                                           }\nfunction mapFromJSON            (_type: any, children: Field[]) { return new Map_(_type['keysSorted'], children);                                                  }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../../vector';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { checkForMagicArrowString, PADDING, magicAndPadding, isValidArrowFile } from '../magic';\nimport { Message, Footer, FileBlock, RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata, } from '../metadata';\nimport {\n    Schema, Field,\n    DataType, Dictionary,\n    Null, TimeBitWidth,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from '../../type';\n\nimport {\n    Int8,  Uint8,\n    Int16, Uint16,\n    Int32, Uint32,\n    Int64, Uint64,\n    Float16, Float64, Float32,\n} from '../../type';\n\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\ntype MessageReader = (bb: ByteBuffer) => IterableIterator<Message>;\n\nexport function* readBuffers<T extends Uint8Array | Buffer | string>(sources: Iterable<T> | Uint8Array | Buffer | string) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    if (ArrayBuffer.isView(sources) || typeof sources === 'string') {\n        sources = [sources as T];\n    }\n    for (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator((message as any).nodes || []),\n                        arrayIterator((message as any).buffers || []),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport async function* readBuffersAsync<T extends Uint8Array | Buffer | string>(sources: AsyncIterable<T>) {\n    let schema: Schema | null = null;\n    let dictionaries = new Map<number, Vector>();\n    let readMessages: MessageReader | null = null;\n    for await (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(\n                        bb,\n                        arrayIterator((message as any).nodes || []),\n                        arrayIterator((message as any).buffers || []),\n                        dictionaries\n                    )\n                };\n            }\n        }\n    }\n}\n\nexport class BinaryDataLoader extends TypeDataLoader {\n    private bytes: Uint8Array;\n    private messageOffset: number;\n    constructor(bb: ByteBuffer, nodes: Iterator<FieldMetadata>, buffers: Iterator<BufferMetadata>, dictionaries: Map<number, Vector>) {\n        super(nodes, buffers, dictionaries);\n        this.bytes = bb.bytes();\n        this.messageOffset = bb.position();\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferMetadata) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset }: BufferMetadata = this.getBufferMetadata()) {\n        return new Uint8Array(this.bytes.buffer, this.bytes.byteOffset + this.messageOffset + offset, length);\n    }\n}\n\nfunction* arrayIterator(arr: Array<any>) { yield* arr; }\n\nfunction toByteBuffer(bytes?: Uint8Array | Buffer | string) {\n    let arr: Uint8Array = bytes as any || new Uint8Array(0);\n    if (typeof bytes === 'string') {\n        arr = new Uint8Array(bytes.length);\n        for (let i = -1, n = bytes.length; ++i < n;) {\n            arr[i] = bytes.charCodeAt(i);\n        }\n        return new ByteBuffer(arr);\n    }\n    return new ByteBuffer(arr);\n}\n\nfunction readSchema(bb: ByteBuffer) {\n    let schema: Schema, readMessages, footer: Footer | null;\n    if (footer = readFileSchema(bb)) {\n        schema = footer.schema;\n        readMessages = readFileMessages(footer);\n    } else if (schema = readStreamSchema(bb)!) {\n        readMessages = readStreamMessages;\n    } else {\n        throw new Error('Invalid Arrow buffer');\n    }\n    return { schema, readMessages };\n}\n\nfunction readStreamSchema(bb: ByteBuffer) {\n    if (!checkForMagicArrowString(bb.bytes(), 0)) {\n        for (const message of readMessages(bb)) {\n            if (Message.isSchema(message)) {\n                return message as Schema;\n            }\n        }\n    }\n    return null;\n}\n\nfunction* readStreamMessages(bb: ByteBuffer) {\n    for (const message of readMessages(bb)) {\n        if (Message.isRecordBatch(message)) {\n            yield message;\n        } else if (Message.isDictionaryBatch(message)) {\n            yield message;\n        } else {\n            yield message;\n        }\n        // position the buffer after the body to read the next message\n        bb.setPosition(bb.position() + message.bodyLength);\n    }\n}\n\nfunction readFileSchema(bb: ByteBuffer) {\n    if (!isValidArrowFile(bb)) {\n        return null;\n    }\n    let fileLength = bb.capacity();\n    let lengthOffset = fileLength - magicAndPadding;\n    let footerLength = bb.readInt32(lengthOffset);\n    bb.setPosition(lengthOffset - footerLength);\n    return footerFromByteBuffer(bb);\n}\n\nfunction readFileMessages(footer: Footer) {\n    return function* (bb: ByteBuffer) {\n        let message: RecordBatchMetadata | DictionaryBatch;\n        for (let i = -1, batches = footer.dictionaryBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset);\n            if (message = readMessage(bb, bb.readInt32(bb.position())) as DictionaryBatch) {\n                yield message;\n            }\n        }\n        for (let i = -1, batches = footer.recordBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset);\n            if (message = readMessage(bb, bb.readInt32(bb.position())) as RecordBatchMetadata) {\n                yield message;\n            }\n        }\n    };\n}\n\nfunction* readMessages(bb: ByteBuffer) {\n    let length: number, message: Schema | RecordBatchMetadata | DictionaryBatch;\n    while (bb.position() < bb.capacity() &&\n          (length = bb.readInt32(bb.position())) > 0) {\n        if (message = readMessage(bb, length)!) {\n            yield message;\n        }\n    }\n}\n\nfunction readMessage(bb: ByteBuffer, length: number) {\n    bb.setPosition(bb.position() + PADDING);\n    const message = messageFromByteBuffer(bb);\n    bb.setPosition(bb.position() + length);\n    return message;\n}\n\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nimport MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nimport MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport _Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport _Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport _Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport _List = Schema_.org.apache.arrow.flatbuf.List;\nimport _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport _Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport _Map = Schema_.org.apache.arrow.flatbuf.Map;\n\nfunction footerFromByteBuffer(bb: ByteBuffer) {\n    const dictionaryFields = new Map<number, Field<Dictionary>>();\n    const f = _Footer.getRootAsFooter(bb), s = f.schema()!;\n    return new Footer(\n        dictionaryBatchesFromFooter(f), recordBatchesFromFooter(f),\n        new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), f.version(), dictionaryFields)\n    );\n}\n\nfunction messageFromByteBuffer(bb: ByteBuffer) {\n    const m = _Message.getRootAsMessage(bb)!, type = m.headerType(), version = m.version();\n    switch (type) {\n        case MessageHeader.Schema: return schemaFromMessage(version, m.header(new _Schema())!, new Map());\n        case MessageHeader.RecordBatch: return recordBatchFromMessage(version, m, m.header(new _RecordBatch())!);\n        case MessageHeader.DictionaryBatch: return dictionaryBatchFromMessage(version, m, m.header(new _DictionaryBatch())!);\n    }\n    return null;\n    // throw new Error(`Unrecognized Message type '${type}'`);\n}\n\nfunction schemaFromMessage(version: MetadataVersion, s: _Schema, dictionaryFields: Map<number, Field<Dictionary>>) {\n    return new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), version, dictionaryFields);\n}\n\nfunction recordBatchFromMessage(version: MetadataVersion, m: _Message, b: _RecordBatch) {\n    return new RecordBatchMetadata(version, b.length(), fieldNodesFromRecordBatch(b), buffersFromRecordBatch(b, version), m.bodyLength());\n}\n\nfunction dictionaryBatchFromMessage(version: MetadataVersion, m: _Message, d: _DictionaryBatch) {\n    return new DictionaryBatch(version, recordBatchFromMessage(version, m, d.data()!), d.id(), d.isDelta());\n}\n\nfunction dictionaryBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.dictionariesLength(); ++i < n;) {\n        if (b = f.dictionaries(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction recordBatchesFromFooter(f: _Footer) {\n    const blocks = [] as FileBlock[];\n    for (let b: _Block, i = -1, n = f && f.recordBatchesLength(); ++i < n;) {\n        if (b = f.recordBatches(i)!) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\n\nfunction fieldsFromSchema(s: _Schema, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = s && s.fieldsLength(); ++i < n;) {\n        if (c = field(s.fields(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldsFromField(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    const fields = [] as Field[];\n    for (let i = -1, c: Field | null, n = f && f.childrenLength(); ++i < n;) {\n        if (c = field(f.children(i)!, dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\n\nfunction fieldNodesFromRecordBatch(b: _RecordBatch) {\n    const fieldNodes = [] as FieldMetadata[];\n    for (let i = -1, n = b.nodesLength(); ++i < n;) {\n        fieldNodes.push(fieldNodeFromRecordBatch(b.nodes(i)!));\n    }\n    return fieldNodes;\n}\n\nfunction buffersFromRecordBatch(b: _RecordBatch, version: MetadataVersion) {\n    const buffers = [] as BufferMetadata[];\n    for (let i = -1, n = b.buffersLength(); ++i < n;) {\n        let buffer = b.buffers(i)!;\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page id field.\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        buffers.push(bufferFromRecordBatch(buffer));\n    }\n    return buffers;\n}\n\nfunction field(f: _Field, dictionaryFields: Map<number, Field<Dictionary>> | null) {\n    let name = f.name()!;\n    let field: Field | void;\n    let nullable = f.nullable();\n    let metadata = customMetadata(f);\n    let dataType: DataType<any> | null;\n    let keysMeta: _Int | null, id: number;\n    let dictMeta: _DictionaryEncoding | null;\n    if (!dictionaryFields || !(dictMeta = f.dictionary())) {\n        if (dataType = typeFromField(f, fieldsFromField(f, dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    } else if (dataType = dictionaryFields.has(id = dictMeta.id().low)\n                        ? dictionaryFields.get(id)!.type.dictionary\n                        : typeFromField(f, fieldsFromField(f, null))) {\n        dataType = new Dictionary(dataType,\n            // a dictionary index defaults to signed 32 bit int if unspecified\n            (keysMeta = dictMeta.indexType()) ? intFromField(keysMeta)! : new Int32(),\n            id, dictMeta.isOrdered()\n        );\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field as Field<Dictionary>);\n    }\n    return field || null;\n}\n\nfunction customMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\nfunction fieldNodeFromRecordBatch(f: _FieldNode) {\n    return new FieldMetadata(f.length(), f.nullCount());\n}\n\nfunction bufferFromRecordBatch(b: _Buffer) {\n    return new BufferMetadata(b.offset(), b.length());\n}\n\nfunction typeFromField(f: _Field, children?: Field[]): DataType<any> | null {\n    switch (f.typeType()) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromField(f.type(new _Null())!);\n        case Type.Int: return intFromField(f.type(new _Int())!);\n        case Type.FloatingPoint: return floatFromField(f.type(new _FloatingPoint())!);\n        case Type.Binary: return binaryFromField(f.type(new _Binary())!);\n        case Type.Utf8: return utf8FromField(f.type(new _Utf8())!);\n        case Type.Bool: return boolFromField(f.type(new _Bool())!);\n        case Type.Decimal: return decimalFromField(f.type(new _Decimal())!);\n        case Type.Date: return dateFromField(f.type(new _Date())!);\n        case Type.Time: return timeFromField(f.type(new _Time())!);\n        case Type.Timestamp: return timestampFromField(f.type(new _Timestamp())!);\n        case Type.Interval: return intervalFromField(f.type(new _Interval())!);\n        case Type.List: return listFromField(f.type(new _List())!, children || []);\n        case Type.Struct_: return structFromField(f.type(new _Struct())!, children || []);\n        case Type.Union: return unionFromField(f.type(new _Union())!, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromField(f.type(new _FixedSizeBinary())!);\n        case Type.FixedSizeList: return fixedSizeListFromField(f.type(new _FixedSizeList())!, children || []);\n        case Type.Map: return mapFromField(f.type(new _Map())!, children || []);\n    }\n    throw new Error(`Unrecognized type ${f.typeType()}`);\n}\n\nfunction nullFromField           (_type: _Null)                             { return new Null();                                                                }\nfunction intFromField            (_type: _Int)                              { switch (_type.bitWidth()) {\n                                                                                  case  8: return _type.isSigned() ? new  Int8() : new  Uint8();\n                                                                                  case 16: return _type.isSigned() ? new Int16() : new Uint16();\n                                                                                  case 32: return _type.isSigned() ? new Int32() : new Uint32();\n                                                                                  case 64: return _type.isSigned() ? new Int64() : new Uint64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction floatFromField          (_type: _FloatingPoint)                    { switch (_type.precision()) {\n                                                                                  case Precision.HALF: return new Float16();\n                                                                                  case Precision.SINGLE: return new Float32();\n                                                                                  case Precision.DOUBLE: return new Float64();\n                                                                              }\n                                                                              return null;                                                                      }\nfunction binaryFromField         (_type: _Binary)                           { return new Binary();                                                              }\nfunction utf8FromField           (_type: _Utf8)                             { return new Utf8();                                                                }\nfunction boolFromField           (_type: _Bool)                             { return new Bool();                                                                }\nfunction decimalFromField        (_type: _Decimal)                          { return new Decimal(_type.scale(), _type.precision());                             }\nfunction dateFromField           (_type: _Date)                             { return new Date_(_type.unit());                                                   }\nfunction timeFromField           (_type: _Time)                             { return new Time(_type.unit(), _type.bitWidth() as TimeBitWidth);                  }\nfunction timestampFromField      (_type: _Timestamp)                        { return new Timestamp(_type.unit(), _type.timezone());                             }\nfunction intervalFromField       (_type: _Interval)                         { return new Interval(_type.unit());                                                }\nfunction listFromField           (_type: _List, children: Field[])          { return new List(children);                                                        }\nfunction structFromField         (_type: _Struct, children: Field[])        { return new Struct(children);                                                      }\nfunction unionFromField          (_type: _Union, children: Field[])         { return new Union(_type.mode(), (_type.typeIdsArray() || []) as Type[], children); }\nfunction fixedSizeBinaryFromField(_type: _FixedSizeBinary)                  { return new FixedSizeBinary(_type.byteWidth());                                    }\nfunction fixedSizeListFromField  (_type: _FixedSizeList, children: Field[]) { return new FixedSizeList(_type.listSize(), children);                             }\nfunction mapFromField            (_type: _Map, children: Field[])           { return new Map_(_type.keysSorted(), children);                                    }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { readJSON } from './json';\nimport { fromReadableStream } from './node';\nimport { RecordBatch } from '../../recordbatch';\nimport { readBuffers, readBuffersAsync } from './binary';\nimport { readRecordBatches, readRecordBatchesAsync, TypeDataLoader } from './vector';\nimport { Schema } from '../../type';\nimport { Message } from '../metadata';\n\nexport { readJSON, RecordBatch };\nexport { readBuffers, readBuffersAsync };\nexport { readRecordBatches, readRecordBatchesAsync };\n\nexport function* read(sources: Iterable<Uint8Array | Buffer | string> | object | string) {\n    let input: any = sources;\n    let messages: Iterable<{ schema: Schema, message: Message, loader: TypeDataLoader }>;\n    if (typeof input === 'string') {\n        try { input = JSON.parse(input); }\n        catch (e) { input = sources; }\n    }\n    if (!input || typeof input !== 'object') {\n        messages = (typeof input === 'string') ? readBuffers([input]) : [];\n    } else {\n        messages = (typeof input[Symbol.iterator] === 'function') ? readBuffers(input) : readJSON(input);\n    }\n    yield* readRecordBatches(messages);\n}\n\nexport async function* readAsync(sources: AsyncIterable<Uint8Array | Buffer | string>) {\n    for await (let recordBatch of readRecordBatchesAsync(readBuffersAsync(sources))) {\n        yield recordBatch;\n    }\n}\n\nexport async function* readStream(stream: NodeJS.ReadableStream) {\n    for await (const recordBatch of readAsync(fromReadableStream(stream))) {\n        yield recordBatch as RecordBatch;\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n  export import Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\nexport namespace org.apache.arrow.flatbuf {\n  export enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4\n  }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class FieldNode {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {FieldNode}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns {flatbuffers.Long}\n     */\n    nullCount(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     * @param {flatbuffers.Long} null_count\n     * @returns {flatbuffers.Offset}\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 16);\n      builder.writeInt64(null_count);\n      builder.writeInt64(length);\n      return builder.offset();\n    }\n\n  }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class RecordBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {RecordBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {RecordBatch=} obj\n     * @returns {RecordBatch}\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n      return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns {flatbuffers.Long}\n     */\n    length(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n     * @returns {org.apache.arrow.flatbuf.FieldNode}\n     */\n    nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    nodesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n     * @returns {org.apache.arrow.flatbuf.Buffer}\n     */\n    buffers(index: number, obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Buffer): NS16187549871986683199.org.apache.arrow.flatbuf.Buffer | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    buffersLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n      builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class DictionaryBatch {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {DictionaryBatch}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {DictionaryBatch=} obj\n     * @returns {DictionaryBatch}\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n      return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    id(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n     */\n    data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id\n     *\n     * @returns {boolean}\n     */\n    isDelta(): boolean {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n      builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {boolean} isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n      builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Message {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Message}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Message=} obj\n     * @returns {Message}\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n      return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n     */\n    headerType(): org.apache.arrow.flatbuf.MessageHeader {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n    }\n\n    /**\n     * @param {flatbuffers.Table} obj\n     * @returns {?flatbuffers.Table}\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n      builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n      builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../../table';\nimport { serializeStream, serializeFile } from './binary';\n\nexport function writeTableBinary(table: Table, stream = true) {\n    return concatBuffers(stream ? serializeStream(table) : serializeFile(table));\n}\n\nfunction concatBuffers(messages: Iterable<Uint8Array | Buffer>) {\n\n    let buffers = [], byteLength = 0;\n\n    for (const message of messages) {\n        buffers.push(message);\n        byteLength += message.byteLength;\n    }\n\n    const { buffer } = buffers.reduce(({ buffer, byteOffset }, bytes) => {\n        buffer.set(bytes, byteOffset);\n        return { buffer, byteOffset: byteOffset + bytes.byteLength };\n    }, { buffer: new Uint8Array(byteLength), byteOffset: 0 });\n\n    return buffer;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { RecordBatch } from './recordbatch';\nimport { Col, Predicate } from './predicate';\nimport { Schema, Field, Struct } from './type';\nimport { read, readAsync } from './ipc/reader/arrow';\nimport { writeTableBinary } from './ipc/writer/arrow';\nimport { PipeIterator } from './util/node';\nimport { isPromise, isAsyncIterable } from './util/compat';\nimport { Vector, DictionaryVector, IntVector, StructVector } from './vector';\nimport { ChunkedView } from './vector/chunked';\n\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\nexport type BindFunc = (batch: RecordBatch) => void;\n\nexport interface DataFrame {\n    count(): number;\n    filter(predicate: Predicate): DataFrame;\n    scan(next: NextFunc, bind?: BindFunc): void;\n    countBy(col: (Col|string)): CountByResult;\n    [Symbol.iterator](): IterableIterator<Struct['TValue']>;\n}\n\nexport class Table implements DataFrame {\n    static empty() { return new Table(new Schema([]), []); }\n    static from(sources?: Iterable<Uint8Array | Buffer | string> | object | string) {\n        if (sources) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for (let recordBatch of read(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        }\n        return Table.empty();\n    }\n    static async fromAsync(sources?: AsyncIterable<Uint8Array | Buffer | string>) {\n        if (isAsyncIterable(sources)) {\n            let schema: Schema | undefined;\n            let recordBatches: RecordBatch[] = [];\n            for await (let recordBatch of readAsync(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        } else if (isPromise(sources)) {\n            return Table.from(await sources);\n        } else if (sources) {\n            return Table.from(sources);\n        }\n        return Table.empty();\n    }\n    static fromStruct(struct: StructVector) {\n        const schema = new Schema(struct.type.children);\n        const chunks = struct.view instanceof ChunkedView ?\n                            (struct.view.chunkVectors as StructVector[]) :\n                            [struct];\n        return new Table(chunks.map((chunk) => new RecordBatch(schema, chunk.length, chunk.view.childData)));\n    }\n\n    public readonly schema: Schema;\n    public readonly length: number;\n    public readonly numCols: number;\n    // List of inner RecordBatches\n    public readonly batches: RecordBatch[];\n    // List of inner Vectors, possibly spanning batches\n    protected readonly _columns: Vector<any>[] = [];\n    // Union of all inner RecordBatches into one RecordBatch, possibly chunked.\n    // If the Table has just one inner RecordBatch, this points to that.\n    // If the Table has multiple inner RecordBatches, then this is a Chunked view\n    // over the list of RecordBatches. This allows us to delegate the responsibility\n    // of indexing, iterating, slicing, and visiting to the Nested/Chunked Data/Views.\n    public readonly batchesUnion: RecordBatch;\n\n    constructor(batches: RecordBatch[]);\n    constructor(...batches: RecordBatch[]);\n    constructor(schema: Schema, batches: RecordBatch[]);\n    constructor(schema: Schema, ...batches: RecordBatch[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema = null!;\n\n        if (args[0] instanceof Schema) {\n            schema = args.shift();\n        }\n\n        let batches = args.reduce(function flatten(xs: any[], x: any): any[] {\n            return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x: any): x is RecordBatch => x instanceof RecordBatch);\n\n        if (!schema && !(schema = batches[0] && batches[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch with a Schema');\n        }\n\n        this.schema = schema;\n        this.batches = batches;\n        this.batchesUnion = batches.length == 0 ?\n            new RecordBatch(schema, 0, []) :\n            batches.reduce((union, batch) => union.concat(batch));\n        this.length = this.batchesUnion.length;\n        this.numCols = this.batchesUnion.numCols;\n    }\n\n    public get(index: number): Struct['TValue'] {\n        return this.batchesUnion.get(index)!;\n    }\n    public getColumn(name: string) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    public getColumnAt(index: number) {\n        return index < 0 || index >= this.numCols\n            ? null\n            : this._columns[index] || (\n              this._columns[index] = this.batchesUnion.getChildAt(index)!);\n    }\n    public getColumnIndex(name: string) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    public [Symbol.iterator](): IterableIterator<Struct['TValue']> {\n        return this.batchesUnion[Symbol.iterator]() as any;\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(this.batches, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n    public count(): number {\n        return this.length;\n    }\n    public select(...columnNames: string[]) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n    public toString(separator?: string) {\n        let str = '';\n        for (const row of this.rowsToString(separator)) {\n            str += row + '\\n';\n        }\n        return str;\n    }\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        return writeTableBinary(this, stream);\n    }\n    public rowsToString(separator = ' | ') {\n        return new PipeIterator(tableRowsToString(this, separator), 'utf8');\n    }\n}\n\nclass FilteredDataFrame implements DataFrame {\n    private predicate: Predicate;\n    private batches: RecordBatch[];\n    constructor (batches: RecordBatch[], predicate: Predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) { bind(batch); }\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { next(index, batch); }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): DataFrame {\n        return new FilteredDataFrame(\n            this.batches,\n            this.predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string): CountByResult {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as DictionaryVector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts: Uint32Array = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as DictionaryVector).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\nexport class CountByResult extends Table implements DataFrame {\n    constructor(values: Vector, counts: IntVector<any>) {\n        super(\n            new RecordBatch(new Schema([\n                new Field('values', values.type),\n                new Field('counts', counts.type)\n            ]),\n            counts.length, [values, counts]\n        ));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\nfunction* tableRowsToString(table: Table, separator = ' | ') {\n    let rowOffset = 0;\n    let firstValues = [];\n    let maxColumnWidths: number[] = [];\n    let iterators: IterableIterator<string>[] = [];\n    // Gather all the `rowsToString` iterators into a list before iterating,\n    // so that `maxColumnWidths` is filled with the maxWidth for each column\n    // across all RecordBatches.\n    for (const batch of table.batches) {\n        const iterator = batch.rowsToString(separator, rowOffset, maxColumnWidths);\n        const { done, value } = iterator.next();\n        if (!done) {\n            firstValues.push(value);\n            iterators.push(iterator);\n            rowOffset += batch.length;\n        }\n    }\n    for (const iterator of iterators) {\n        yield firstValues.shift();\n        yield* iterator;\n    }\n}\n","export interface Subscription {\n    unsubscribe: () => void;\n}\n\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/**\n * @ignore\n */\nexport function isPromise(x: any): x is PromiseLike<any> {\n    return x != null && Object(x) === x && typeof x['then'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isObservable(x: any): x is Observable<any> {\n    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';\n}\n\n/**\n * @ignore\n */\nexport function isArrayLike(x: any): x is ArrayLike<any> {\n    return x != null && Object(x) === x && typeof x['length'] === 'number';\n}\n\n/**\n * @ignore\n */\nexport function isIterable(x: any): x is Iterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.iterator] !== 'undefined';\n}\n\n/**\n * @ignore\n */\nexport function isAsyncIterable(x: any): x is AsyncIterable<any> {\n    return x != null && Object(x) === x && typeof x[Symbol.asyncIterator] !== 'undefined';\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { DataType, NestedType, DenseUnion, SparseUnion, Struct, Map_ } from '../type';\n\nexport abstract class NestedView<T extends NestedType> implements View<T> {\n    public length: number;\n    public numChildren: number;\n    public childData: Data<any>[];\n    protected _children: Vector<any>[];\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        this.length = data.length;\n        this.childData = data.childData;\n        this.numChildren = data.childData.length;\n        this._children = children || new Array(this.numChildren);\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data, new Array(this.numChildren)) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public indexOf(_: T['TValue']): number {\n        throw new Error(`Not implemented yet`);\n    }\n    public toJSON(): any { return this.toArray(); }\n    public toString() {\n        return [...this].map((x) => valueToString(x)).join(', ');\n    }\n    public get(index: number): T['TValue'] {\n        return this.getNested(this, index);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setNested(this, index, value);\n    }\n    protected abstract getNested(self: NestedView<T>, index: number): T['TValue'];\n    protected abstract setNested(self: NestedView<T>, index: number, value: T['TValue']): void;\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren\n            ? null\n            : (this._children[index] as Vector<R>) ||\n              (this._children[index] = Vector.create<R>(this.childData[index]));\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getNested;\n        const length = this.length;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index);\n        }\n    }\n}\n\nexport class UnionView<T extends (DenseUnion | SparseUnion) = SparseUnion> extends NestedView<T> {\n    // @ts-ignore\n    public typeIds: Int8Array;\n    // @ts-ignore\n    public valueOffsets?: Int32Array;\n    // @ts-ignore\n    protected typeIdToChildIndex: { [key: number]: number };\n    constructor(data: Data<T>, children?: Vector<any>[]) {\n        super(data, children);\n        this.length = data.length;\n        this.typeIds = data.typeIds;\n        this.typeIdToChildIndex = data.typeIdToChildIndex;\n    }\n    protected getNested(self: UnionView<T>, index: number): T['TValue'] {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n    }\n    protected setNested(self: UnionView<T>, index: number, value: T['TValue']): void {\n        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n    }\n    protected getChildValue(self: NestedView<T>, index: number, typeIds: Int8Array, _valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.get(index) : null;\n    }\n    protected setChildValue(self: NestedView<T>, index: number, value: T['TValue'], typeIds: Int8Array, _valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.set(index, value) : null;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const length = this.length;\n        const get = this.getChildValue;\n        const { typeIdToChildIndex } = this;\n        const { typeIds, valueOffsets } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index, typeIds, valueOffsets, typeIdToChildIndex);\n        }\n    }\n}\n\nexport class DenseUnionView extends UnionView<DenseUnion> {\n    public valueOffsets: Int32Array;\n    constructor(data: Data<DenseUnion>, children?: Vector<any>[]) {\n        super(data, children);\n        this.valueOffsets = data.valueOffsets;\n    }\n    protected getNested(self: DenseUnionView, index: number): any | null {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n    }\n    protected getChildValue(self: NestedView<DenseUnion>, index: number, typeIds: Int8Array, valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.get(valueOffsets[index]) : null;\n    }\n    protected setChildValue(self: NestedView<DenseUnion>, index: number, value: any, typeIds: Int8Array, valueOffsets: any, typeIdToChildIndex: { [key: number]: number }): any | null {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.set(valueOffsets[index], value) : null;\n    }\n}\n\ntype RowProxy = {[name: string]: any};\ninterface RowViewConstructor<T extends RowProxy = RowProxy> {\n    readonly prototype: T & RowView;\n    new (data: Data<SparseUnion> & NestedView<any>, children?: Vector<any>[], rowIndex?: number): T & RowView;\n}\n\nexport class StructView extends NestedView<Struct> {\n    private RowView: RowViewConstructor;\n\n    constructor(data: Data<Struct>, children?: Vector<any>[]) {\n        super(data, children);\n\n        // Make a customized RowView that includes proxies for\n        class RowProxy extends RowView {}\n\n        const proto = RowProxy.prototype;\n\n        data.type.children.forEach(function (f, i) {\n            Object.defineProperty(proto, f.name, {\n                get: function () {\n                    return (this as any as RowView).get(i);\n                },\n                enumerable: true\n            });\n        });\n\n        this.RowView = (RowProxy as any);\n    }\n    protected getNested(self: StructView, index: number) {\n        return new self.RowView(self as any, self._children, index);\n    }\n    protected setNested(self: StructView, index: number, value: any): void {\n        let idx = -1, len = self.numChildren, child: Vector | null;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value[idx]);\n                }\n            }\n        } else {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value.get(idx));\n                }\n            }\n        }\n    }\n}\n\nexport class MapView extends NestedView<Map_> {\n    public typeIds: { [k: string]: number };\n    constructor(data: Data<Map_>, children?: Vector<any>[]) {\n        super(data, children);\n        this.typeIds = data.type.children.reduce((xs, x, i) =>\n            (xs[x.name] = i) && xs || xs, Object.create(null));\n    }\n    protected getNested(self: MapView, index: number) {\n        return new MapRowView(self as any, self._children, index);\n    }\n    protected setNested(self: MapView, index: number, value: { [k: string]: any }): void {\n        let typeIds = self.typeIds as any, child: Vector | null;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value[key]);\n                }\n            }\n        } else {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value.get(key as any));\n                }\n            }\n        }\n    }\n}\n\nexport class RowView extends UnionView<SparseUnion> {\n    protected rowIndex: number;\n    constructor(data: Data<SparseUnion> & NestedView<any>, children?: Vector<any>[], rowIndex?: number) {\n        super(data, children);\n        this.rowIndex = rowIndex || 0;\n        this.length = data.numChildren;\n    }\n    public clone(data: Data<SparseUnion> & NestedView<any>): this {\n        return new (<any> this.constructor)(data, this._children, this.rowIndex) as this;\n    }\n    protected getChildValue(self: RowView, index: number, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: RowView, index: number, value: any, _typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(index);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\nexport class MapRowView extends RowView {\n    // @ts-ignore\n    public typeIds: any;\n    public toJSON() {\n        const get = this.getChildValue;\n        const result = {} as { [k: string]: any };\n        const typeIds = this.typeIds as { [k: string]: number };\n        for (const name in typeIds) {\n            result[name] = get(this, name, typeIds, null);\n        }\n        return result;\n    }\n    protected getChildValue(self: MapRowView, key: any, typeIds: any, _valueOffsets: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    protected setChildValue(self: MapRowView, key: any, value: any, typeIds: any, _valueOffsets?: any): any | null {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector, createVector } from '../vector';\nimport { TextEncoder, TextDecoder } from 'text-encoding-utf-8';\nimport { List, Binary, Utf8, FixedSizeList, FlatListType } from '../type';\nimport { ListType, SingleNestedType, DataType, IterableArrayLike } from '../type';\n\nexport const encodeUtf8 = ((encoder) =>\n    encoder.encode.bind(encoder) as (input?: string) => Uint8Array\n)(new TextEncoder('utf-8'));\n\nexport const decodeUtf8 = ((decoder) =>\n    decoder.decode.bind(decoder) as (input?: ArrayBufferLike | ArrayBufferView) => string\n)(new TextDecoder('utf-8'));\n\nexport abstract class ListViewBase<T extends (FlatListType | SingleNestedType)> implements View<T> {\n    public length: number;\n    public values: T['TArray'];\n    public valueOffsets?: Int32Array;\n    constructor(data: Data<T>) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    public clone(data: Data<T>): this {\n        return new (<any> this.constructor)(data) as this;\n    }\n    public isValid(): boolean {\n        return true;\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public get(index: number): T['TValue'] {\n        return this.getList(this.values, index, this.valueOffsets);\n    }\n    public set(index: number, value: T['TValue']): void {\n        return this.setList(this.values, index, value, this.valueOffsets);\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const get = this.getList, length = this.length;\n        const values = this.values, valueOffsets = this.valueOffsets;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, valueOffsets);\n        }\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    protected abstract getList(values: T['TArray'], index: number, valueOffsets?: Int32Array): T['TValue'];\n    protected abstract setList(values: T['TArray'], index: number, value: T['TValue'], valueOffsets?: Int32Array): void;\n}\n\nexport abstract class VariableListViewBase<T extends (ListType | FlatListType)> extends ListViewBase<T> {\n    constructor(data: Data<T>) {\n        super(data);\n        this.length = data.length;\n        this.valueOffsets = data.valueOffsets;\n    }\n}\n\nexport class ListView<T extends DataType> extends VariableListViewBase<List<T>> {\n    public values: Vector<T>;\n    constructor(data: Data<T>) {\n        super(data as any);\n        this.values = createVector((data as any).values);\n    }\n    public getChildAt<R extends T = T>(index: number): Vector<R> | null {\n        return index === 0 ? (this.values as Vector<R>) : null;\n    }\n    protected getList(values: Vector<T>, index: number, valueOffsets: Int32Array) {\n        return values.slice(valueOffsets[index], valueOffsets[index + 1]) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>, valueOffsets: Int32Array): void {\n        let idx = -1;\n        let offset = valueOffsets[index];\n        let end = Math.min(value.length, valueOffsets[index + 1] - offset);\n        while (offset < end) {\n            values.set(offset++, value.get(++idx));\n        }\n    }\n}\n\nexport class FixedSizeListView<T extends DataType> extends ListViewBase<FixedSizeList<T>> {\n    public size: number;\n    public values: Vector<T>;\n    constructor(data: Data<FixedSizeList<T>>) {\n        super(data);\n        this.size = data.type.listSize;\n        this.values = createVector(data.values);\n    }\n    public getChildAt<R extends T = T>(index: number): Vector<R> | null {\n        return index === 0 ? (this.values as Vector<R>) : null;\n    }\n    protected getList(values: Vector<T>, index: number) {\n        const size = this.size;\n        return values.slice(index *= size, index + size) as Vector<T>;\n    }\n    protected setList(values: Vector<T>, index: number, value: Vector<T>): void {\n        let size = this.size;\n        for (let idx = -1, offset = index * size; ++idx < size;) {\n            values.set(offset + idx, value.get(++idx));\n        }\n    }\n}\n\nexport class BinaryView extends VariableListViewBase<Binary> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return values.subarray(valueOffsets[index], valueOffsets[index + 1]);\n    }\n    protected setList(values: Uint8Array, index: number, value: Uint8Array, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(value.subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\nexport class Utf8View extends VariableListViewBase<Utf8> {\n    protected getList(values: Uint8Array, index: number, valueOffsets: Int32Array) {\n        return decodeUtf8(values.subarray(valueOffsets[index], valueOffsets[index + 1]));\n    }\n    protected setList(values: Uint8Array, index: number, value: string, valueOffsets: Int32Array): void {\n        const offset = valueOffsets[index];\n        values.set(encodeUtf8(value).subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ChunkedData, Data } from '../data';\nimport { View, Vector, NestedVector } from '../vector';\nimport { DataType, TypedArray, IterableArrayLike } from '../type';\n\nexport class ChunkedView<T extends DataType> implements View<T> {\n    public chunkVectors: Vector<T>[];\n    public chunkOffsets: Uint32Array;\n    // @ts-ignore\n    protected _children: Vector<any>[];\n    constructor(data: ChunkedData<T>) {\n        this.chunkVectors = data.chunkVectors;\n        this.chunkOffsets = data.chunkOffsets;\n    }\n    public clone(data: ChunkedData<T> & Data<T>): this {\n        return new ChunkedView(data) as this;\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const vector of this.chunkVectors) {\n            yield* vector;\n        }\n    }\n    public getChildAt<R extends DataType = DataType>(index: number) {\n        return index < 0 ? null\n            : (this._children || (this._children = []))[index] ||\n              (this._children[index] = Vector.concat<R>(\n                  ...(<any> this.chunkVectors as NestedVector<any>[])\n                         .map((chunk) => chunk.getChildAt<R>(index))));\n    }\n    public isValid(index: number): boolean {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].isValid(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return false;\n    }\n    public get(index: number): T['TValue'] | null {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].get(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return null;\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].set(index - pos, value);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        const chunks = this.chunkVectors;\n        const numChunks = chunks.length;\n        if (numChunks === 1) {\n            return chunks[0].toArray();\n        }\n        let sources = new Array<any>(numChunks);\n        let sourcesLen = 0, ArrayType: any = Array;\n        for (let index = -1; ++index < numChunks;) {\n            let source = chunks[index].toArray();\n            sourcesLen += (sources[index] = source).length;\n            if (ArrayType !== source.constructor) {\n                ArrayType = source.constructor;\n            }\n        }\n        let target = new ArrayType(sourcesLen);\n        let setValues = ArrayType === Array ? arraySet : typedArraySet as any;\n        for (let index = -1, offset = 0; ++index < numChunks;) {\n            offset = setValues(sources[index], target, offset);\n        }\n        return target;\n    }\n    public indexOf(search: T['TValue']) {\n        let offset = 0, result;\n        for (const vector of this.chunkVectors) {\n            result = vector.indexOf(search);\n            if (result !== -1) { return result + offset; }\n            offset += vector.length;\n        }\n\n        return -1;\n    }\n}\n\nfunction typedArraySet(source: TypedArray, target: TypedArray, index: number) {\n    return target.set(source, index) || index + source.length;\n}\n\nfunction arraySet(source: any[], target: any[], index: number) {\n    let dstIdx = index - 1, srcIdx = -1, srcLen = source.length;\n    while (++srcIdx < srcLen) {\n        target[++dstIdx] = source[srcIdx];\n    }\n    return dstIdx;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../../table';\nimport { DenseUnionData } from '../../data';\nimport { RecordBatch } from '../../recordbatch';\nimport { VectorVisitor, TypeVisitor } from '../../visitor';\nimport { MAGIC, magicLength, magicAndPadding, PADDING } from '../magic';\nimport { align, getBool, packBools, iterateBits } from '../../util/bit';\nimport { Vector, UnionVector, DictionaryVector, NestedVector, ListVector } from '../../vector';\nimport { BufferMetadata, FieldMetadata, Footer, FileBlock, Message, RecordBatchMetadata, DictionaryBatch } from '../metadata';\nimport {\n    Schema, Field, TypedArray, MetadataVersion,\n    DataType,\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n    FlatType, FlatListType, NestedType, UnionMode, SparseUnion, DenseUnion, SingleNestedType,\n} from '../../type';\n\nexport function* serializeStream(table: Table) {\n    yield serializeMessage(table.schema).buffer;\n    for (const [id, field] of table.schema.dictionaries) {\n        const vec = table.getColumn(field.name) as DictionaryVector;\n        if (vec && vec.dictionary) {\n            yield serializeDictionaryBatch(vec.dictionary, id).buffer;\n        }\n    }\n    for (const recordBatch of table.batches) {\n        yield serializeRecordBatch(recordBatch).buffer;\n    }\n}\n\nexport function* serializeFile(table: Table) {\n\n    const recordBatches = [];\n    const dictionaryBatches = [];\n\n    // First yield the magic string (aligned)\n    let buffer = new Uint8Array(align(magicLength, 8));\n    let metadataLength, bodyLength, byteLength = buffer.byteLength;\n    buffer.set(MAGIC, 0);\n    yield buffer;\n\n    // Then yield the schema\n    ({ metadataLength, buffer } = serializeMessage(table.schema));\n    byteLength += buffer.byteLength;\n    yield buffer;\n\n    for (const [id, field] of table.schema.dictionaries) {\n        const vec = table.getColumn(field.name) as DictionaryVector;\n        if (vec && vec.dictionary) {\n            ({ metadataLength, bodyLength, buffer } = serializeDictionaryBatch(vec.dictionary, id));\n            dictionaryBatches.push(new FileBlock(metadataLength, bodyLength, byteLength));\n            byteLength += buffer.byteLength;\n            yield buffer;\n        }\n    }\n    for (const recordBatch of table.batches) {\n        ({ metadataLength, bodyLength, buffer } = serializeRecordBatch(recordBatch));\n        recordBatches.push(new FileBlock(metadataLength, bodyLength, byteLength));\n        byteLength += buffer.byteLength;\n        yield buffer;\n    }\n\n    // Then yield the footer metadata (not aligned)\n    ({ metadataLength, buffer } = serializeFooter(new Footer(dictionaryBatches, recordBatches, table.schema)));\n    yield buffer;\n\n    // Last, yield the footer length + terminating magic arrow string (aligned)\n    buffer = new Uint8Array(magicAndPadding);\n    new DataView(buffer.buffer).setInt32(0, metadataLength, platformIsLittleEndian);\n    buffer.set(MAGIC, buffer.byteLength - magicLength);\n    yield buffer;\n}\n\nexport function serializeRecordBatch(recordBatch: RecordBatch) {\n    const { byteLength, fieldNodes, buffers, buffersMeta } = new RecordBatchSerializer().visitRecordBatch(recordBatch);\n    const rbMeta = new RecordBatchMetadata(MetadataVersion.V4, recordBatch.length, fieldNodes, buffersMeta);\n    const rbData = concatBuffersWithMetadata(byteLength, buffers, buffersMeta);\n    return serializeMessage(rbMeta, rbData);\n}\n\nexport function serializeDictionaryBatch(dictionary: Vector, id: Long | number, isDelta: boolean = false) {\n    const { byteLength, fieldNodes, buffers, buffersMeta } = new RecordBatchSerializer().visitRecordBatch(RecordBatch.from([dictionary]));\n    const rbMeta = new RecordBatchMetadata(MetadataVersion.V4, dictionary.length, fieldNodes, buffersMeta);\n    const dbMeta = new DictionaryBatch(MetadataVersion.V4, rbMeta, id, isDelta);\n    const rbData = concatBuffersWithMetadata(byteLength, buffers, buffersMeta);\n    return serializeMessage(dbMeta, rbData);\n}\n\nexport function serializeMessage(message: Message, data?: Uint8Array) {\n    const b = new Builder();\n    _Message.finishMessageBuffer(b, writeMessage(b, message));\n    // Slice out the buffer that contains the message metadata\n    const metadataBytes = b.asUint8Array();\n    // Reserve 4 bytes for writing the message size at the front.\n    // Metadata length includes the metadata byteLength + the 4\n    // bytes for the length, and rounded up to the nearest 8 bytes.\n    const metadataLength = align(PADDING + metadataBytes.byteLength, 8);\n    // + the length of the optional data buffer at the end, padded\n    const dataByteLength = data ? data.byteLength : 0;\n    // ensure the entire message is aligned to an 8-byte boundary\n    const messageBytes = new Uint8Array(align(metadataLength + dataByteLength, 8));\n    // Write the metadata length into the first 4 bytes, but subtract the\n    // bytes we use to hold the length itself.\n    new DataView(messageBytes.buffer).setInt32(0, metadataLength - PADDING, platformIsLittleEndian);\n    // Copy the metadata bytes into the message buffer\n    messageBytes.set(metadataBytes, PADDING);\n    // Copy the optional data buffer after the metadata bytes\n    (data && dataByteLength > 0) && messageBytes.set(data, metadataLength);\n    // if (messageBytes.byteLength % 8 !== 0) { debugger; }\n    // Return the metadata length because we need to write it into each FileBlock also\n    return { metadataLength, bodyLength: message.bodyLength, buffer: messageBytes };\n}\n\nexport function serializeFooter(footer: Footer) {\n    const b = new Builder();\n    _Footer.finishFooterBuffer(b, writeFooter(b, footer));\n    // Slice out the buffer that contains the footer metadata\n    const footerBytes = b.asUint8Array();\n    const metadataLength = footerBytes.byteLength;\n    return { metadataLength, buffer: footerBytes };\n}\n\nexport class RecordBatchSerializer extends VectorVisitor {\n    public byteLength = 0;\n    public buffers: TypedArray[] = [];\n    public fieldNodes: FieldMetadata[] = [];\n    public buffersMeta: BufferMetadata[] = [];\n    public visitRecordBatch(recordBatch: RecordBatch) {\n        this.buffers = [];\n        this.byteLength = 0;\n        this.fieldNodes = [];\n        this.buffersMeta = [];\n        for (let vector: Vector, index = -1, numCols = recordBatch.numCols; ++index < numCols;) {\n            if (vector = recordBatch.getChildAt(index)!) {\n                this.visit(vector);\n            }\n        }\n        return this;\n    }\n    public visit<T extends DataType>(vector: Vector<T>) {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            this.fieldNodes.push(new FieldMetadata(length, nullCount));\n            this.addBuffer(nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : this.getTruncatedBitmap(data.offset, length, data.nullBitmap!)\n            );\n        }\n        return super.visit(vector);\n    }\n    public visitNull           (_nullz: Vector<Null>)            { return this;                              }\n    public visitBool           (vector: Vector<Bool>)            { return this.visitBoolVector(vector);      }\n    public visitInt            (vector: Vector<Int>)             { return this.visitFlatVector(vector);      }\n    public visitFloat          (vector: Vector<Float>)           { return this.visitFlatVector(vector);      }\n    public visitUtf8           (vector: Vector<Utf8>)            { return this.visitFlatListVector(vector);  }\n    public visitBinary         (vector: Vector<Binary>)          { return this.visitFlatListVector(vector);  }\n    public visitDate           (vector: Vector<Date_>)           { return this.visitFlatVector(vector);      }\n    public visitTimestamp      (vector: Vector<Timestamp>)       { return this.visitFlatVector(vector);      }\n    public visitTime           (vector: Vector<Time>)            { return this.visitFlatVector(vector);      }\n    public visitDecimal        (vector: Vector<Decimal>)         { return this.visitFlatVector(vector);      }\n    public visitInterval       (vector: Vector<Interval>)        { return this.visitFlatVector(vector);      }\n    public visitList           (vector: Vector<List>)            { return this.visitListVector(vector);      }\n    public visitStruct         (vector: Vector<Struct>)          { return this.visitNestedVector(vector);    }\n    public visitFixedSizeBinary(vector: Vector<FixedSizeBinary>) { return this.visitFlatVector(vector);      }\n    public visitFixedSizeList  (vector: Vector<FixedSizeList>)   { return this.visitListVector(vector);      }\n    public visitMap            (vector: Vector<Map_>)            { return this.visitNestedVector(vector);    }\n    public visitDictionary     (vector: DictionaryVector)        {\n        // Dictionary written out separately. Slice offset contained in the indices\n        return this.visit(vector.indices);\n    }\n    public visitUnion(vector: Vector<DenseUnion | SparseUnion>) {\n        const { data, type, length } = vector;\n        const { offset: sliceOffset, typeIds } = data;\n        // All Union Vectors have a typeIds buffer\n        this.addBuffer(typeIds);\n        // If this is a Sparse Union, treat it like all other Nested types\n        if (type.mode === UnionMode.Sparse) {\n            return this.visitNestedVector(vector);\n        } else if (type.mode === UnionMode.Dense) {\n            // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n            const valueOffsets = (data as DenseUnionData).valueOffsets;\n            if (sliceOffset <= 0) {\n                // If the Vector hasn't been sliced, write the existing valueOffsets\n                this.addBuffer(valueOffsets);\n                // We can treat this like all other Nested types\n                return this.visitNestedVector(vector);\n            } else {\n                // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n                // each child vector, we need to \"rebase\" the valueOffsets for each child\n                // Union typeIds are not necessary 0-indexed\n                const maxChildTypeId = Math.max(...type.typeIds);\n                const childLengths = new Int32Array(maxChildTypeId + 1);\n                // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n                const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n                const shiftedOffsets = new Int32Array(length);\n                const unshiftedOffsets = this.getZeroBasedValueOffsets(0, length, valueOffsets);\n                for (let typeId, shift, index = -1; ++index < length;) {\n                    typeId = typeIds[index];\n                    // ~(-1) used to be faster than x === -1, so maybe worth benchmarking the difference of these two impls for large dense unions:\n                    // ~(shift = childOffsets[typeId]) || (shift = childOffsets[typeId] = unshiftedOffsets[index]);\n                    // Going with this form for now, as it's more readable\n                    if ((shift = childOffsets[typeId]) === -1) {\n                        shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                    }\n                    shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                    ++childLengths[typeId];\n                }\n                this.addBuffer(shiftedOffsets);\n                // Slice and visit children accordingly\n                for (let childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                    const typeId = type.typeIds[childIndex];\n                    const child = (vector as UnionVector).getChildAt(childIndex)!;\n                    this.visit(child.slice(childOffsets[typeId], Math.min(length, childLengths[typeId])));\n                }\n            }\n        }\n        return this;\n    }\n    protected visitBoolVector(vector: Vector<Bool>) {\n        // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n        let bitmap: Uint8Array;\n        let values, { data, length } = vector;\n        if (vector.nullCount >= length) {\n            // If all values are null, just insert a placeholder empty data buffer (fastest path)\n            bitmap = new Uint8Array(0);\n        } else if (!((values = data.values) instanceof Uint8Array)) {\n            // Otherwise if the underlying data *isn't* a Uint8Array, enumerate\n            // the values as bools and re-pack them into a Uint8Array (slow path)\n            bitmap = packBools(vector);\n        } else {\n            // otherwise just slice the bitmap (fast path)\n            bitmap = this.getTruncatedBitmap(data.offset, length, values);\n        }\n        return this.addBuffer(bitmap);\n    }\n    protected visitFlatVector<T extends FlatType>(vector: Vector<T>) {\n        const { view, data } = vector;\n        const { length, values } = data;\n        const scaledLength = length * ((view as any).size || 1);\n        return this.addBuffer(values.subarray(0, scaledLength));\n    }\n    protected visitFlatListVector<T extends FlatListType>(vector: Vector<T>) {\n        const { data, length } = vector;\n        const { offset, values, valueOffsets } = data;\n        const firstOffset = valueOffsets[0];\n        const lastOffset = valueOffsets[length];\n        const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n        // Push in the order FlatList types read their buffers\n        // valueOffsets buffer first\n        this.addBuffer(this.getZeroBasedValueOffsets(0, length, valueOffsets));\n        // sliced values buffer second\n        this.addBuffer(values.subarray(firstOffset + offset, firstOffset + offset + byteLength));\n        return this;\n    }\n    protected visitListVector<T extends SingleNestedType>(vector: Vector<T>) {\n        const { data, length } = vector;\n        const { valueOffsets } = <any> data;\n        // If we have valueOffsets (ListVector), push that buffer first\n        if (valueOffsets) {\n            this.addBuffer(this.getZeroBasedValueOffsets(0, length, valueOffsets));\n        }\n        // Then insert the List's values child\n        return this.visit((vector as any as ListVector<T>).getChildAt(0)!);\n    }\n    protected visitNestedVector<T extends NestedType>(vector: Vector<T>) {\n        // Visit the children accordingly\n        const numChildren = (vector.type.children || []).length;\n        for (let child: Vector | null, childIndex = -1; ++childIndex < numChildren;) {\n            if (child = (vector as NestedVector<T>).getChildAt(childIndex)) {\n                this.visit(child);\n            }\n        }\n        return this;\n    }\n    protected addBuffer(values: TypedArray) {\n        const byteLength = align(values.byteLength, 8);\n        this.buffers.push(values);\n        this.buffersMeta.push(new BufferMetadata(this.byteLength, byteLength));\n        this.byteLength += byteLength;\n        return this;\n    }\n    protected getTruncatedBitmap(offset: number, length: number, bitmap: Uint8Array) {\n        const alignedLength = align(bitmap.byteLength, 8);\n        if (offset > 0 || bitmap.byteLength < alignedLength) {\n            // With a sliced array / non-zero offset, we have to copy the bitmap\n            const bytes = new Uint8Array(alignedLength);\n            bytes.set(\n                (offset % 8 === 0)\n                // If the slice offset is aligned to 1 byte, it's safe to slice the nullBitmap directly\n                ? bitmap.subarray(offset >> 3)\n                // iterate each bit starting from the slice offset, and repack into an aligned nullBitmap\n                : packBools(iterateBits(bitmap, offset, length, null, getBool))\n            );\n            return bytes;\n        }\n        return bitmap;\n    }\n    protected getZeroBasedValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n        // If we have a non-zero offset, then the value offsets do not start at\n        // zero. We must a) create a new offsets array with shifted offsets and\n        // b) slice the values array accordingly\n        if (offset > 0 || valueOffsets[0] !== 0) {\n            const startOffset = valueOffsets[0];\n            const destOffsets = new Int32Array(length + 1);\n            for (let index = -1; ++index < length;) {\n                destOffsets[index] = valueOffsets[index] - startOffset;\n            }\n            // Final offset\n            destOffsets[length] = valueOffsets[length] - startOffset;\n            return destOffsets;\n        }\n        return valueOffsets;\n    }\n}\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\n\nimport _Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport _Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport _Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport _List = Schema_.org.apache.arrow.flatbuf.List;\nimport _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport _Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport _Map = Schema_.org.apache.arrow.flatbuf.Map;\n\nexport class TypeSerializer extends TypeVisitor {\n    constructor(protected builder: Builder) {\n        super();\n    }\n    public visitNull(_node: Null) {\n        const b = this.builder;\n        return (\n            _Null.startNull(b) ||\n            _Null.endNull(b)\n        );\n    }\n    public visitInt(node: Int) {\n        const b = this.builder;\n        return (\n            _Int.startInt(b) ||\n            _Int.addBitWidth(b, node.bitWidth) ||\n            _Int.addIsSigned(b, node.isSigned) ||\n            _Int.endInt(b)\n        );\n    }\n    public visitFloat(node: Float) {\n        const b = this.builder;\n        return (\n            _FloatingPoint.startFloatingPoint(b) ||\n            _FloatingPoint.addPrecision(b, node.precision) ||\n            _FloatingPoint.endFloatingPoint(b)\n        );\n    }\n    public visitBinary(_node: Binary) {\n        const b = this.builder;\n        return (\n            _Binary.startBinary(b) ||\n            _Binary.endBinary(b)\n        );\n    }\n    public visitBool(_node: Bool) {\n        const b = this.builder;\n        return (\n            _Bool.startBool(b) ||\n            _Bool.endBool(b)\n        );\n    }\n    public visitUtf8(_node: Utf8) {\n        const b = this.builder;\n        return (\n            _Utf8.startUtf8(b) ||\n            _Utf8.endUtf8(b)\n        );\n    }\n    public visitDecimal(node: Decimal) {\n        const b = this.builder;\n        return (\n            _Decimal.startDecimal(b) ||\n            _Decimal.addScale(b, node.scale) ||\n            _Decimal.addPrecision(b, node.precision) ||\n            _Decimal.endDecimal(b)\n        );\n    }\n    public visitDate(node: Date_) {\n        const b = this.builder;\n        return _Date.startDate(b) || _Date.addUnit(b, node.unit) || _Date.endDate(b);\n    }\n    public visitTime(node: Time) {\n        const b = this.builder;\n        return (\n            _Time.startTime(b) ||\n            _Time.addUnit(b, node.unit) ||\n            _Time.addBitWidth(b, node.bitWidth) ||\n            _Time.endTime(b)\n        );\n    }\n    public visitTimestamp(node: Timestamp) {\n        const b = this.builder;\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        return (\n            _Timestamp.startTimestamp(b) ||\n            _Timestamp.addUnit(b, node.unit) ||\n            (timezone !== undefined && _Timestamp.addTimezone(b, timezone)) ||\n            _Timestamp.endTimestamp(b)\n        );\n    }\n    public visitInterval(node: Interval) {\n        const b = this.builder;\n        return (\n            _Interval.startInterval(b) || _Interval.addUnit(b, node.unit) || _Interval.endInterval(b)\n        );\n    }\n    public visitList(_node: List) {\n        const b = this.builder;\n        return (\n            _List.startList(b) ||\n            _List.endList(b)\n        );\n    }\n    public visitStruct(_node: Struct) {\n        const b = this.builder;\n        return (\n            _Struct.startStruct_(b) ||\n            _Struct.endStruct_(b)\n        );\n    }\n    public visitUnion(node: Union) {\n        const b = this.builder;\n        const typeIds =\n            _Union.startTypeIdsVector(b, node.typeIds.length) ||\n            _Union.createTypeIdsVector(b, node.typeIds);\n        return (\n            _Union.startUnion(b) ||\n            _Union.addMode(b, node.mode) ||\n            _Union.addTypeIds(b, typeIds) ||\n            _Union.endUnion(b)\n        );\n    }\n    public visitDictionary(node: Dictionary) {\n        const b = this.builder;\n        const indexType = this.visit(node.indices);\n        return (\n            _DictionaryEncoding.startDictionaryEncoding(b) ||\n            _DictionaryEncoding.addId(b, new Long(node.id, 0)) ||\n            _DictionaryEncoding.addIsOrdered(b, node.isOrdered) ||\n            (indexType !== undefined && _DictionaryEncoding.addIndexType(b, indexType)) ||\n            _DictionaryEncoding.endDictionaryEncoding(b)\n        );\n    }\n    public visitFixedSizeBinary(node: FixedSizeBinary) {\n        const b = this.builder;\n        return (\n            _FixedSizeBinary.startFixedSizeBinary(b) ||\n            _FixedSizeBinary.addByteWidth(b, node.byteWidth) ||\n            _FixedSizeBinary.endFixedSizeBinary(b)\n        );\n    }\n    public visitFixedSizeList(node: FixedSizeList) {\n        const b = this.builder;\n        return (\n            _FixedSizeList.startFixedSizeList(b) ||\n            _FixedSizeList.addListSize(b, node.listSize) ||\n            _FixedSizeList.endFixedSizeList(b)\n        );\n    }\n    public visitMap(node: Map_) {\n        const b = this.builder;\n        return (\n            _Map.startMap(b) ||\n            _Map.addKeysSorted(b, node.keysSorted) ||\n            _Map.endMap(b)\n        );\n    }\n}\n\nfunction concatBuffersWithMetadata(totalByteLength: number, buffers: Uint8Array[], buffersMeta: BufferMetadata[]) {\n    const data = new Uint8Array(totalByteLength);\n    for (let i = -1, n = buffers.length; ++i < n;) {\n        const { offset, length } = buffersMeta[i];\n        const { buffer, byteOffset, byteLength } = buffers[i];\n        const realBufferLength = Math.min(length, byteLength);\n        if (realBufferLength > 0) {\n            data.set(new Uint8Array(buffer, byteOffset, realBufferLength), offset);\n        }\n    }\n    return data;\n}\n\nfunction writeFooter(b: Builder, node: Footer) {\n    let schemaOffset = writeSchema(b, node.schema);\n    let recordBatches = (node.recordBatches || []);\n    let dictionaryBatches = (node.dictionaryBatches || []);\n    let recordBatchesOffset =\n        _Footer.startRecordBatchesVector(b, recordBatches.length) ||\n            mapReverse(recordBatches, (rb) => writeBlock(b, rb)) &&\n        b.endVector();\n\n    let dictionaryBatchesOffset =\n        _Footer.startDictionariesVector(b, dictionaryBatches.length) ||\n            mapReverse(dictionaryBatches, (db) => writeBlock(b, db)) &&\n        b.endVector();\n\n    return (\n        _Footer.startFooter(b) ||\n        _Footer.addSchema(b, schemaOffset) ||\n        _Footer.addVersion(b, node.schema.version) ||\n        _Footer.addRecordBatches(b, recordBatchesOffset) ||\n        _Footer.addDictionaries(b, dictionaryBatchesOffset) ||\n        _Footer.endFooter(b)\n    );\n}\n\nfunction writeBlock(b: Builder, node: FileBlock) {\n    return _Block.createBlock(b,\n        new Long(node.offset, 0),\n        node.metaDataLength,\n        new Long(node.bodyLength, 0)\n    );\n}\n\nfunction writeMessage(b: Builder, node: Message) {\n    let messageHeaderOffset = 0;\n    if (Message.isSchema(node)) {\n        messageHeaderOffset = writeSchema(b, node as Schema);\n    } else if (Message.isRecordBatch(node)) {\n        messageHeaderOffset = writeRecordBatch(b, node as RecordBatchMetadata);\n    } else if (Message.isDictionaryBatch(node)) {\n        messageHeaderOffset = writeDictionaryBatch(b, node as DictionaryBatch);\n    }\n    return (\n        _Message.startMessage(b) ||\n        _Message.addVersion(b, node.version) ||\n        _Message.addHeader(b, messageHeaderOffset) ||\n        _Message.addHeaderType(b, node.headerType) ||\n        _Message.addBodyLength(b, new Long(node.bodyLength, 0)) ||\n        _Message.endMessage(b)\n    );\n}\n\nfunction writeSchema(b: Builder, node: Schema) {\n\n    const fieldOffsets = node.fields.map((f) => writeField(b, f));\n    const fieldsOffset =\n        _Schema.startFieldsVector(b, fieldOffsets.length) ||\n        _Schema.createFieldsVector(b, fieldOffsets);\n\n    let metadata: number | undefined = undefined;\n    if (node.metadata && node.metadata.size > 0) {\n        metadata = _Schema.createCustomMetadataVector(\n            b,\n            [...node.metadata].map(([k, v]) => {\n                const key = b.createString(`${k}`);\n                const val = b.createString(`${v}`);\n                return (\n                    _KeyValue.startKeyValue(b) ||\n                    _KeyValue.addKey(b, key) ||\n                    _KeyValue.addValue(b, val) ||\n                    _KeyValue.endKeyValue(b)\n                );\n            })\n        );\n    }\n\n    return (\n        _Schema.startSchema(b) ||\n        _Schema.addFields(b, fieldsOffset) ||\n        _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big) ||\n        (metadata !== undefined && _Schema.addCustomMetadata(b, metadata)) ||\n        _Schema.endSchema(b)\n    );\n}\n\nfunction writeRecordBatch(b: Builder, node: RecordBatchMetadata) {\n    let nodes = (node.nodes || []);\n    let buffers = (node.buffers || []);\n    let nodesOffset =\n        _RecordBatch.startNodesVector(b, nodes.length) ||\n        mapReverse(nodes, (n) => writeFieldNode(b, n)) &&\n        b.endVector();\n\n    let buffersOffset =\n        _RecordBatch.startBuffersVector(b, buffers.length) ||\n        mapReverse(buffers, (b_) => writeBuffer(b, b_)) &&\n        b.endVector();\n\n    return (\n        _RecordBatch.startRecordBatch(b) ||\n        _RecordBatch.addLength(b, new Long(node.length, 0)) ||\n        _RecordBatch.addNodes(b, nodesOffset) ||\n        _RecordBatch.addBuffers(b, buffersOffset) ||\n        _RecordBatch.endRecordBatch(b)\n    );\n}\n\nfunction writeDictionaryBatch(b: Builder, node: DictionaryBatch) {\n    const dataOffset = writeRecordBatch(b, node.data);\n    return (\n        _DictionaryBatch.startDictionaryBatch(b) ||\n        _DictionaryBatch.addId(b, new Long(node.id, 0)) ||\n        _DictionaryBatch.addIsDelta(b, node.isDelta) ||\n        _DictionaryBatch.addData(b, dataOffset) ||\n        _DictionaryBatch.endDictionaryBatch(b)\n    );\n}\n\nfunction writeBuffer(b: Builder, node: BufferMetadata) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\nfunction writeFieldNode(b: Builder, node: FieldMetadata) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\nfunction writeField(b: Builder, node: Field) {\n    let typeOffset = -1;\n    let type = node.type;\n    let typeId = node.typeId;\n    let name: number | undefined = undefined;\n    let metadata: number | undefined = undefined;\n    let dictionary: number | undefined = undefined;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = new TypeSerializer(b).visit(type);\n    } else {\n        typeId = type.dictionary.TType;\n        dictionary = new TypeSerializer(b).visit(type);\n        typeOffset = new TypeSerializer(b).visit(type.dictionary);\n    }\n\n    let children = _Field.createChildrenVector(b, (type.children || []).map((f) => writeField(b, f)));\n    if (node.metadata && node.metadata.size > 0) {\n        metadata = _Field.createCustomMetadataVector(\n            b,\n            [...node.metadata].map(([k, v]) => {\n                const key = b.createString(`${k}`);\n                const val = b.createString(`${v}`);\n                return (\n                    _KeyValue.startKeyValue(b) ||\n                    _KeyValue.addKey(b, key) ||\n                    _KeyValue.addValue(b, val) ||\n                    _KeyValue.endKeyValue(b)\n                );\n            })\n        );\n    }\n    if (node.name) {\n        name = b.createString(node.name);\n    }\n    return (\n        _Field.startField(b) ||\n        _Field.addType(b, typeOffset) ||\n        _Field.addTypeType(b, typeId) ||\n        _Field.addChildren(b, children) ||\n        _Field.addNullable(b, !!node.nullable) ||\n        (name !== undefined && _Field.addName(b, name)) ||\n        (dictionary !== undefined && _Field.addDictionary(b, dictionary)) ||\n        (metadata !== undefined && _Field.addCustomMetadata(b, metadata)) ||\n        _Field.endField(b)\n    );\n}\n\nfunction mapReverse<T, U>(source: T[], callbackfn: (value: T, index: number, array: T[]) => U): U[] {\n    const result = new Array(source.length);\n    for (let i = -1, j = source.length; --j > -1;) {\n        result[i] = callbackfn(source[j], i, source);\n    }\n    return result;\n}\n\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n","\nexport function leftPad(str: string, fill: string, n: number) {\n    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n}\n\nexport function valueToString(x: any) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","\nexport class PipeIterator<T> implements IterableIterator<T> {\n    constructor(protected iterator: IterableIterator<T>, protected encoding?: any) {}\n    [Symbol.iterator]() { return this.iterator; }\n    next(value?: any) { return this.iterator.next(value); }\n    throw(error?: any) {\n        if (typeof this.iterator.throw === 'function') {\n            return this.iterator.throw(error);\n        }\n        return { done: true, value: null as any };\n    }\n    return(value?: any) {\n        if (typeof this.iterator.return === 'function') {\n            return this.iterator.return(value);\n        }\n        return { done: true, value: null as any };\n    }\n    pipe(stream: NodeJS.WritableStream) {\n        let { encoding } = this;\n        let res: IteratorResult<T>;\n        let write = (err?: any) => {\n            stream['removeListener']('error', write);\n            stream['removeListener']('drain', write);\n            if (err) { return this.throw(err); }\n            if (stream['writable']) {\n                do {\n                    if ((res = this.next()).done) { break; }\n                } while (emit(stream, encoding, res.value));\n            }\n            return wait(stream, res && res.done, write);\n        };\n        write();\n        return stream;\n    }\n}\n\nexport class AsyncPipeIterator<T> implements AsyncIterableIterator<T> {\n    constructor(protected iterator: AsyncIterableIterator<T>, protected encoding?: any) {}\n    [Symbol.asyncIterator]() { return this.iterator; }\n    next(value?: any) { return this.iterator.next(value); }\n    async throw(error?: any) {\n        if (typeof this.iterator.throw === 'function') {\n            return this.iterator.throw(error);\n        }\n        return { done: true, value: null as any };\n    }\n    async return(value?: any) {\n        if (typeof this.iterator.return === 'function') {\n            return this.iterator.return(value);\n        }\n        return { done: true, value: null as any };\n    }\n    pipe(stream: NodeJS.WritableStream) {\n        let { encoding } = this;\n        let res: IteratorResult<T>;\n        let write = async (err?: any) => {\n            stream['removeListener']('error', write);\n            stream['removeListener']('drain', write);\n            if (err) { return this.throw(err); }\n            if (stream['writable']) {\n                do {\n                    if ((res = await this.next()).done) { break; }\n                } while (emit(stream, encoding, res.value));\n            }\n            return wait(stream, res && res.done, write);\n        };\n        write();\n        return stream;\n    }\n}\n\nconst toBufferOrUint8Array = (() => {\n    // If in node, convert Uint8Arrays to Buffer instances. This is necessary\n    // because some node APIs ('http' etc.) don't work unless you give them Buffers.\n    // This eval also defeats closure-compiler, which doesn't recognize the Buffer constructor.\n    const BufferCtor = eval('typeof Buffer !== \"undefined\" ? Buffer : null');\n    return !BufferCtor ? (arr: Uint8Array) => arr :\n        (arr: Uint8Array) => BufferCtor.from(arr.buffer, arr.byteOffset, arr.byteLength);\n})();\n\nfunction emit(stream: NodeJS.WritableStream, encoding: string, value: any) {\n    return stream['write']((encoding === 'utf8' ? value + '\\n' : toBufferOrUint8Array(value)) as any, encoding);\n}\n\nfunction wait(stream: NodeJS.WritableStream, done: boolean, write: (x?: any) => void) {\n    const p = eval('process'); // defeat closure compiler\n    if (!done) {\n        stream['once']('error', write);\n        stream['once']('drain', write);\n    } else if (!(!p || stream === p.stdout) && !(stream as any)['isTTY']) {\n        stream['end']();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { NestedView } from './nested';\nimport { DataType, IterableArrayLike } from '../type';\nimport { getBool, setBool, iterateBits } from '../util/bit';\n\nexport class ValidityView<T extends DataType> implements View<T> {\n    protected view: View<T>;\n    protected length: number;\n    protected offset: number;\n    protected nullBitmap: Uint8Array;\n    constructor(data: Data<T>, view: View<T>) {\n        this.view = view;\n        this.length = data.length;\n        this.offset = data.offset;\n        this.nullBitmap = data.nullBitmap!;\n    }\n    public get size(): number {\n        return (this.view as any).size || 1;\n    }\n    public clone(data: Data<T>): this {\n        return new ValidityView(data, this.view.clone(data)) as this;\n    }\n    public toArray(): IterableArrayLike<T['TValue'] | null> {\n        return [...this];\n    }\n    public indexOf(search: T['TValue']) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) { return index; }\n            ++index;\n        }\n\n        return -1;\n    }\n    public isValid(index: number): boolean {\n        const nullBitIndex = this.offset + index;\n        return getBool(null, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public get(index: number): T['TValue'] | null {\n        const nullBitIndex = this.offset + index;\n        return this.getNullable(this.view, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        if (setBool(this.nullBitmap, this.offset + index, value != null)) {\n            this.view.set(index, value);\n        }\n    }\n    public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n        return (this.view as NestedView<any>).getChildAt<R>(index);\n    }\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return iterateBits<T['TValue'] | null>(this.nullBitmap, this.offset, this.length, this.view, this.getNullable);\n    }\n    protected getNullable(view: View<T>, index: number, byte: number, bit: number) {\n        return getBool(view, index, byte, bit) ? view.get(index) : null;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Message_ from '../../fb/Message';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport { PADDING, isValidArrowFile, checkForMagicArrowString } from '../magic';\n\nexport async function* fromReadableStream(stream: NodeJS.ReadableStream) {\n\n    let bb: ByteBuffer;\n    let bytesRead = 0, bytes = new Uint8Array(0);\n    let messageLength = 0, message: _Message | null = null;\n\n    for await (let chunk of (stream as any as AsyncIterable<Uint8Array | Buffer | string>)) {\n\n        if (chunk == null) {\n            continue;\n        }\n\n        const grown = new Uint8Array(bytes.byteLength + chunk.length);\n\n        if (typeof chunk !== 'string') {\n            grown.set(bytes, 0) || grown.set(chunk, bytes.byteLength);\n        } else {\n            for (let i = -1, j = bytes.byteLength, n = chunk.length; ++i < n;) {\n                grown[i + j] = chunk.charCodeAt(i);\n            }\n        }\n\n        bytes = grown;\n\n        // If we're reading in an Arrow File, just concatenate the bytes until\n        // the file is fully read in\n        if (checkForMagicArrowString(bytes)) {\n            if (!isValidArrowFile(new ByteBuffer(bytes))) {\n                continue;\n            }\n            return yield bytes;\n        }\n\n        if (bytes.byteLength > 0 && messageLength <= 0) {\n            messageLength = new DataView(bytes.buffer).getInt32(0, true);\n        }\n\n        while (messageLength > 0 && messageLength <= bytes.byteLength) {\n            if (!message) {\n                (bb = new ByteBuffer(bytes)).setPosition(4);\n                if (message = _Message.getRootAsMessage(bb)) {\n                    messageLength += message.bodyLength().low;\n                    continue;\n                }\n                throw new Error(`Invalid message at position ${bytesRead}`);\n            }\n            bytesRead += messageLength + PADDING;\n            yield bytes.subarray(0, messageLength + PADDING);\n            bytes = bytes.subarray(messageLength + PADDING);\n            messageLength = bytes.byteLength < 4 ? 0 :\n                new DataView(bytes.buffer).getInt32(bytes.byteOffset, true);\n            message = null;\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { View, Vector } from '../vector';\nimport { IterableArrayLike, DataType, Dictionary, Int } from '../type';\n\nexport class DictionaryView<T extends DataType> implements View<T> {\n    public indices: Vector<Int>;\n    public dictionary: Vector<T>;\n    constructor(dictionary: Vector<T>, indices: Vector<Int>) {\n        this.indices = indices;\n        this.dictionary = dictionary;\n    }\n    public clone(data: Data<Dictionary<T>> & Data<T>): this {\n        return new DictionaryView(data.dictionary, this.indices.clone(data.indices)) as this;\n    }\n    public isValid(index: number): boolean {\n        return this.indices.isValid(index);\n    }\n    public get(index: number): T['TValue'] {\n        return this.dictionary.get(this.indices.get(index));\n    }\n    public set(index: number, value: T['TValue']): void {\n        this.dictionary.set(this.indices.get(index), value);\n    }\n    public toArray(): IterableArrayLike<T['TValue']> {\n        return [...this];\n    }\n    public *[Symbol.iterator](): IterableIterator<T['TValue']> {\n        const values = this.dictionary, indices = this.indices;\n        for (let index = -1, n = indices.length; ++index < n;) {\n            yield values.get(indices.get(index));\n        }\n    }\n    public indexOf(search: T['TValue']) {\n        // First find the dictionary key for the desired value...\n        const key = this.dictionary.indexOf(search);\n        if (key === -1) { return key; }\n\n        // ... then find the first occurence of that key in indices\n        return this.indices.indexOf(key!);\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Footer {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Footer}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param {flatbuffers.ByteBuffer} bb\n     * @param {Footer=} obj\n     * @returns {Footer}\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n      return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n     */\n    version(): NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion {\n      let offset = this.bb.__offset(this.bb_pos, 4);\n      return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n    }\n\n    /**\n     * @param {org.apache.arrow.flatbuf.Schema=} obj\n     * @returns {org.apache.arrow.flatbuf.Schema|null}\n     */\n    schema(obj?: NS16187549871986683199.org.apache.arrow.flatbuf.Schema): NS16187549871986683199.org.apache.arrow.flatbuf.Schema | null {\n      let offset = this.bb.__offset(this.bb_pos, 6);\n      return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    dictionariesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 8);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {number} index\n     * @param {org.apache.arrow.flatbuf.Block=} obj\n     * @returns {org.apache.arrow.flatbuf.Block}\n     */\n    recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n    }\n\n    /**\n     * @returns {number}\n     */\n    recordBatchesLength(): number {\n      let offset = this.bb.__offset(this.bb_pos, 10);\n      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n      builder.startObject(4);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion) {\n      builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {number} numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @returns {flatbuffers.Offset}\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Offset} offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset);\n    }\n\n  }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n  export class Block {\n    /**\n     * @type {flatbuffers.ByteBuffer}\n     */\n    // @ts-ignore\n    bb: flatbuffers.ByteBuffer;\n\n    /**\n     * @type {number}\n     */\n    bb_pos: number = 0;\n    /**\n     * @param {number} i\n     * @param {flatbuffers.ByteBuffer} bb\n     * @returns {Block}\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns {flatbuffers.Long}\n     */\n    offset(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns {number}\n     */\n    metaDataLength(): number {\n      return this.bb.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metatdata).\n     *\n     * @returns {flatbuffers.Long}\n     */\n    bodyLength(): flatbuffers.Long {\n      return this.bb.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param {flatbuffers.Builder} builder\n     * @param {flatbuffers.Long} offset\n     * @param {number} metaDataLength\n     * @param {flatbuffers.Long} bodyLength\n     * @returns {flatbuffers.Offset}\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n      builder.prep(8, 24);\n      builder.writeInt64(bodyLength);\n      builder.pad(4);\n      builder.writeInt32(metaDataLength);\n      builder.writeInt64(offset);\n      return builder.offset();\n    }\n\n  }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type_ from './type';\nimport * as data_ from './data';\nimport * as vector_ from './vector';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_node from './util/node';\nimport * as visitor_ from './visitor';\nimport * as view_ from './vector/view';\nimport * as predicate_ from './predicate';\nimport { Vector } from './vector';\nimport { RecordBatch } from './recordbatch';\nimport { Schema, Field, Type } from './type';\nimport { Table, DataFrame, NextFunc, BindFunc, CountByResult } from './table';\nimport { fromReadableStream } from './ipc/reader/node';\nimport { read, readAsync, readStream } from './ipc/reader/arrow';\nimport { readBuffersAsync, readRecordBatchesAsync } from './ipc/reader/arrow';\nimport { serializeFile, serializeStream } from './ipc/writer/binary';\n\nexport import View = vector_.View;\nexport import VectorLike = vector_.VectorLike;\nexport import TypedArray = type_.TypedArray;\nexport import IntBitWidth = type_.IntBitWidth;\nexport import TimeBitWidth = type_.TimeBitWidth;\nexport import TypedArrayConstructor = type_.TypedArrayConstructor;\n\nexport { fromReadableStream };\nexport { read, readAsync, readStream };\nexport { readBuffersAsync, readRecordBatchesAsync };\nexport { serializeFile, serializeStream };\nexport { Table, DataFrame, NextFunc, BindFunc, CountByResult };\nexport { Field, Schema, RecordBatch, Vector, Type };\n\nexport namespace util {\n    export import Uint64 = util_int_.Uint64;\n    export import Int64 = util_int_.Int64;\n    export import Int128 = util_int_.Int128;\n    export import packBools = util_bit_.packBools;\n    export import PipeIterator = util_node.PipeIterator;\n    export import AsyncPipeIterator = util_node.AsyncPipeIterator;\n}\n\nexport namespace data {\n    export import BaseData = data_.BaseData;\n    export import FlatData = data_.FlatData;\n    export import BoolData = data_.BoolData;\n    export import FlatListData = data_.FlatListData;\n    export import DictionaryData = data_.DictionaryData;\n    export import NestedData = data_.NestedData;\n    export import ListData = data_.ListData;\n    export import UnionData = data_.UnionData;\n    export import SparseUnionData = data_.SparseUnionData;\n    export import DenseUnionData = data_.DenseUnionData;\n    export import ChunkedData = data_.ChunkedData;\n}\n\nexport namespace enum_ {\n    export import Type = type_.ArrowType;\n    export import DateUnit = type_.DateUnit;\n    export import TimeUnit = type_.TimeUnit;\n    export import Precision = type_.Precision;\n    export import UnionMode = type_.UnionMode;\n    export import VectorType = type_.VectorType;\n    export import IntervalUnit = type_.IntervalUnit;\n    export import MessageHeader = type_.MessageHeader;\n    export import MetadataVersion = type_.MetadataVersion;\n}\n\nexport namespace type {\n    export import Schema = type_.Schema;\n    export import Field = type_.Field;\n    export import Null = type_.Null;\n    export import Int = type_.Int;\n    export import Int8 = type_.Int8;\n    export import Int16 = type_.Int16;\n    export import Int32 = type_.Int32;\n    export import Int64 = type_.Int64;\n    export import Uint8 = type_.Uint8;\n    export import Uint16 = type_.Uint16;\n    export import Uint32 = type_.Uint32;\n    export import Uint64 = type_.Uint64;\n    export import Float = type_.Float;\n    export import Float16 = type_.Float16;\n    export import Float32 = type_.Float32;\n    export import Float64 = type_.Float64;\n    export import Binary = type_.Binary;\n    export import Utf8 = type_.Utf8;\n    export import Bool = type_.Bool;\n    export import Decimal = type_.Decimal;\n    export import Date_ = type_.Date_;\n    export import Time = type_.Time;\n    export import Timestamp = type_.Timestamp;\n    export import Interval = type_.Interval;\n    export import List = type_.List;\n    export import Struct = type_.Struct;\n    export import Union = type_.Union;\n    export import DenseUnion = type_.DenseUnion;\n    export import SparseUnion = type_.SparseUnion;\n    export import FixedSizeBinary = type_.FixedSizeBinary;\n    export import FixedSizeList = type_.FixedSizeList;\n    export import Map_ = type_.Map_;\n    export import Dictionary = type_.Dictionary;\n}\n\nexport namespace vector {\n    export import Vector = vector_.Vector;\n    export import NullVector = vector_.NullVector;\n    export import BoolVector = vector_.BoolVector;\n    export import IntVector = vector_.IntVector;\n    export import FloatVector = vector_.FloatVector;\n    export import DateVector = vector_.DateVector;\n    export import DecimalVector = vector_.DecimalVector;\n    export import TimeVector = vector_.TimeVector;\n    export import TimestampVector = vector_.TimestampVector;\n    export import IntervalVector = vector_.IntervalVector;\n    export import BinaryVector = vector_.BinaryVector;\n    export import FixedSizeBinaryVector = vector_.FixedSizeBinaryVector;\n    export import Utf8Vector = vector_.Utf8Vector;\n    export import ListVector = vector_.ListVector;\n    export import FixedSizeListVector = vector_.FixedSizeListVector;\n    export import MapVector = vector_.MapVector;\n    export import StructVector = vector_.StructVector;\n    export import UnionVector = vector_.UnionVector;\n    export import DictionaryVector = vector_.DictionaryVector;\n}\n\nexport namespace visitor {\n    export import TypeVisitor = visitor_.TypeVisitor;\n    export import VectorVisitor = visitor_.VectorVisitor;\n}\n\nexport namespace view {\n    export import ChunkedView = view_.ChunkedView;\n    export import DictionaryView = view_.DictionaryView;\n    export import ListView = view_.ListView;\n    export import FixedSizeListView = view_.FixedSizeListView;\n    export import BinaryView = view_.BinaryView;\n    export import Utf8View = view_.Utf8View;\n    export import UnionView = view_.UnionView;\n    export import DenseUnionView = view_.DenseUnionView;\n    export import NestedView = view_.NestedView;\n    export import StructView = view_.StructView;\n    export import MapView = view_.MapView;\n    export import FlatView = view_.FlatView;\n    export import NullView = view_.NullView;\n    export import BoolView = view_.BoolView;\n    export import ValidityView = view_.ValidityView;\n    export import PrimitiveView = view_.PrimitiveView;\n    export import FixedSizeView = view_.FixedSizeView;\n    export import Float16View = view_.Float16View;\n    export import DateDayView = view_.DateDayView;\n    export import DateMillisecondView = view_.DateMillisecondView;\n    export import TimestampDayView = view_.TimestampDayView;\n    export import TimestampSecondView = view_.TimestampSecondView;\n    export import TimestampMillisecondView = view_.TimestampMillisecondView;\n    export import TimestampMicrosecondView = view_.TimestampMicrosecondView;\n    export import TimestampNanosecondView = view_.TimestampNanosecondView;\n    export import IntervalYearMonthView = view_.IntervalYearMonthView;\n    export import IntervalYearView = view_.IntervalYearView;\n    export import IntervalMonthView = view_.IntervalMonthView;\n}\n\nexport namespace predicate {\n    export import col = predicate_.col;\n    export import lit = predicate_.lit;\n    export import and = predicate_.and;\n    export import or = predicate_.or;\n    export import custom = predicate_.custom;\n\n    export import Or = predicate_.Or;\n    export import Col = predicate_.Col;\n    export import And = predicate_.And;\n    export import Not = predicate_.Not;\n    export import GTeq = predicate_.GTeq;\n    export import LTeq = predicate_.LTeq;\n    export import Value = predicate_.Value;\n    export import Equals = predicate_.Equals;\n    export import Literal = predicate_.Literal;\n    export import Predicate = predicate_.Predicate;\n\n    export import PredicateFunc = predicate_.PredicateFunc;\n}\n\n/* These exports are needed for the closure and uglify umd targets */\ntry {\n    let Arrow: any = eval('exports');\n    if (Arrow && typeof Arrow === 'object') {\n        // string indexers tell closure and uglify not to rename these properties\n        Arrow['data'] = data;\n        Arrow['type'] = type;\n        Arrow['util'] = util;\n        Arrow['view'] = view;\n        Arrow['enum_'] = enum_;\n        Arrow['vector'] = vector;\n        Arrow['visitor'] = visitor;\n        Arrow['predicate'] = predicate;\n\n        Arrow['read'] = read;\n        Arrow['readAsync'] = readAsync;\n        Arrow['readStream'] = readStream;\n        Arrow['fromReadableStream'] = fromReadableStream;\n        Arrow['readBuffersAsync'] = readBuffersAsync;\n        Arrow['readRecordBatchesAsync'] = readRecordBatchesAsync;\n\n        Arrow['serializeFile'] = serializeFile;\n        Arrow['serializeStream'] = serializeStream;\n\n        Arrow['Type'] = Type;\n        Arrow['Field'] = Field;\n        Arrow['Schema'] = Schema;\n        Arrow['Vector'] = Vector;\n        Arrow['RecordBatch'] = RecordBatch;\n\n        Arrow['Table'] = Table;\n        Arrow['CountByResult'] = CountByResult;\n    }\n} catch (e) { /* not the UMD bundle */ }\n/* end umd exports */\n\n// closure compiler erases static properties/methods:\n// https://github.com/google/closure-compiler/issues/1776\n// set them via string indexers to save them from the mangler\nSchema['from'] = Schema.from;\nTable['from'] = Table.from;\nTable['fromAsync'] = Table.fromAsync;\nTable['fromStruct'] = Table.fromStruct;\nTable['empty'] = Table.empty;\nVector['create'] = Vector.create;\nRecordBatch['from'] = RecordBatch.from;\n\nutil_int_.Uint64['add'] = util_int_.Uint64.add;\nutil_int_.Uint64['multiply'] = util_int_.Uint64.multiply;\n\nutil_int_.Int64['add'] = util_int_.Int64.add;\nutil_int_.Int64['multiply'] = util_int_.Int64.multiply;\nutil_int_.Int64['fromString'] = util_int_.Int64.fromString;\n\nutil_int_.Int128['add'] = util_int_.Int128.add;\nutil_int_.Int128['multiply'] = util_int_.Int128.multiply;\nutil_int_.Int128['fromString'] = util_int_.Int128.fromString;\n\ndata_.ChunkedData['computeOffsets'] = data_.ChunkedData.computeOffsets;\n\n(type_.Type as any)['NONE'] = type_.Type.NONE;\n(type_.Type as any)['Null'] = type_.Type.Null;\n(type_.Type as any)['Int'] = type_.Type.Int;\n(type_.Type as any)['Float'] = type_.Type.Float;\n(type_.Type as any)['Binary'] = type_.Type.Binary;\n(type_.Type as any)['Utf8'] = type_.Type.Utf8;\n(type_.Type as any)['Bool'] = type_.Type.Bool;\n(type_.Type as any)['Decimal'] = type_.Type.Decimal;\n(type_.Type as any)['Date'] = type_.Type.Date;\n(type_.Type as any)['Time'] = type_.Type.Time;\n(type_.Type as any)['Timestamp'] = type_.Type.Timestamp;\n(type_.Type as any)['Interval'] = type_.Type.Interval;\n(type_.Type as any)['List'] = type_.Type.List;\n(type_.Type as any)['Struct'] = type_.Type.Struct;\n(type_.Type as any)['Union'] = type_.Type.Union;\n(type_.Type as any)['FixedSizeBinary'] = type_.Type.FixedSizeBinary;\n(type_.Type as any)['FixedSizeList'] = type_.Type.FixedSizeList;\n(type_.Type as any)['Map'] = type_.Type.Map;\n(type_.Type as any)['Dictionary'] = type_.Type.Dictionary;\n(type_.Type as any)['DenseUnion'] = type_.Type.DenseUnion;\n(type_.Type as any)['SparseUnion'] = type_.Type.SparseUnion;\n\ntype_.DataType['isNull'] = type_.DataType.isNull;\ntype_.DataType['isInt'] = type_.DataType.isInt;\ntype_.DataType['isFloat'] = type_.DataType.isFloat;\ntype_.DataType['isBinary'] = type_.DataType.isBinary;\ntype_.DataType['isUtf8'] = type_.DataType.isUtf8;\ntype_.DataType['isBool'] = type_.DataType.isBool;\ntype_.DataType['isDecimal'] = type_.DataType.isDecimal;\ntype_.DataType['isDate'] = type_.DataType.isDate;\ntype_.DataType['isTime'] = type_.DataType.isTime;\ntype_.DataType['isTimestamp'] = type_.DataType.isTimestamp;\ntype_.DataType['isInterval'] = type_.DataType.isInterval;\ntype_.DataType['isList'] = type_.DataType.isList;\ntype_.DataType['isStruct'] = type_.DataType.isStruct;\ntype_.DataType['isUnion'] = type_.DataType.isUnion;\ntype_.DataType['isDenseUnion'] = type_.DataType.isDenseUnion;\ntype_.DataType['isSparseUnion'] = type_.DataType.isSparseUnion;\ntype_.DataType['isFixedSizeBinary'] = type_.DataType.isFixedSizeBinary;\ntype_.DataType['isFixedSizeList'] = type_.DataType.isFixedSizeList;\ntype_.DataType['isMap'] = type_.DataType.isMap;\ntype_.DataType['isDictionary'] = type_.DataType.isDictionary;\n\nvector_.BoolVector['from'] = vector_.BoolVector.from;\nvector_.IntVector['from'] = vector_.IntVector.from;\nvector_.FloatVector['from'] = vector_.FloatVector.from;\n\nvisitor_.TypeVisitor['visitTypeInline'] = visitor_.TypeVisitor.visitTypeInline;\nvisitor_.VectorVisitor['visitTypeInline'] = visitor_.VectorVisitor.visitTypeInline;"],"sourceRoot":""}