// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { ChunkedData, FlatData, BoolData } from './data';
import { TypeVisitor, VectorVisitor } from './visitor';
import { TimeUnit } from './type';
import { Precision, DateUnit, IntervalUnit, UnionMode } from './type';
export class Vector {
    constructor(data, view) {
        this.data = data;
        this.type = data.type;
        this.length = data.length;
        let nulls;
        if ((data instanceof ChunkedData) && !(view instanceof ChunkedView)) {
            this.view = new ChunkedView(data);
        }
        else if (!(view instanceof ValidityView) && (nulls = data.nullBitmap) && nulls.length > 0 && data.nullCount > 0) {
            this.view = new ValidityView(data, view);
        }
        else {
            this.view = view;
        }
    }
    static create(data) {
        return createVector(data);
    }
    get nullCount() { return this.data.nullCount; }
    get nullBitmap() { return this.data.nullBitmap; }
    get [Symbol.toStringTag]() {
        return `Vector<${this.type[Symbol.toStringTag]}>`;
    }
    toJSON() { return this.toArray(); }
    clone(data, view = this.view.clone(data)) {
        return new this.constructor(data, view);
    }
    isValid(index) {
        return this.view.isValid(index);
    }
    get(index) {
        return this.view.get(index);
    }
    set(index, value) {
        return this.view.set(index, value);
    }
    toArray() {
        return this.view.toArray();
    }
    [Symbol.iterator]() {
        return this.view[Symbol.iterator]();
    }
    concat(...others) {
        if ((others = others.filter(Boolean)).length === 0) {
            return this;
        }
        const { view } = this;
        const vecs = !(view instanceof ChunkedView)
            ? [this, ...others]
            : [...view.chunks, ...others];
        const offsets = ChunkedData.computeOffsets(vecs);
        const chunksLength = offsets[offsets.length - 1];
        const chunkedData = new ChunkedData(this.type, chunksLength, vecs, 0, -1, offsets);
        return this.clone(chunkedData, new ChunkedView(chunkedData));
    }
    slice(begin, end) {
        let { length } = this;
        let size = this.view.size || 1;
        let total = length, from = (begin || 0) * size;
        let to = (typeof end === 'number' ? end : total) * size;
        if (to < 0) {
            to = total - (to * -1) % total;
        }
        if (from < 0) {
            from = total - (from * -1) % total;
        }
        if (to < from) {
            [from, to] = [to, from];
        }
        total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;
        const slicedData = this.data.slice(from, Math.min(total, length));
        return this.clone(slicedData, this.view.clone(slicedData));
    }
    acceptTypeVisitor(visitor) {
        return TypeVisitor.visitTypeInline(visitor, this.type);
    }
    acceptVectorVisitor(visitor) {
        return VectorVisitor.visitTypeInline(visitor, this.type, this);
    }
}
export class FlatVector extends Vector {
    get values() { return this.data.values; }
    lows() { return this.asInt32(0, 2); }
    highs() { return this.asInt32(1, 2); }
    asInt32(offset = 0, stride = 2) {
        let data = this.data.clone(new Int32());
        if (offset > 0) {
            data = data.slice(offset, this.length - offset);
        }
        const int32s = new IntVector(data, new PrimitiveView(data, stride));
        int32s.length = this.length / stride | 0;
        return int32s;
    }
}
export class ListVectorBase extends Vector {
    get values() { return this.data.values; }
    get valueOffsets() { return this.data.valueOffsets; }
    getValueOffset(index) {
        return this.valueOffsets[index];
    }
    getValueLength(index) {
        return this.valueOffsets[index + 1] - this.valueOffsets[index];
    }
}
export class NestedVector extends Vector {
    get childData() {
        return this.data.childData;
    }
    getChildAt(index) {
        return this.view.getChildAt(index);
    }
}
import { Binary, Utf8, Bool, } from './type';
import { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, Float16, Float32, Float64 } from './type';
import { Struct, Map_ } from './type';
import { ChunkedView } from './vector/chunked';
import { DictionaryView } from './vector/dictionary';
import { ListView, FixedSizeListView, BinaryView, Utf8View } from './vector/list';
import { UnionView, DenseUnionView, StructView, MapView } from './vector/nested';
import { FlatView, NullView, BoolView, ValidityView, PrimitiveView, FixedSizeView, Float16View } from './vector/flat';
import { DateDayView, DateMillisecondView, IntervalYearMonthView } from './vector/flat';
import { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './vector/flat';
import { packBools } from './util/bit';
export class NullVector extends Vector {
    constructor(data, view = new NullView(data)) {
        super(data, view);
    }
}
export class BoolVector extends Vector {
    static from(data) {
        return new BoolVector(new BoolData(new Bool(), data.length, null, packBools(data)));
    }
    get values() { return this.data.values; }
    constructor(data, view = new BoolView(data)) {
        super(data, view);
    }
}
export class IntVector extends FlatVector {
    constructor(data, view = IntVector.defaultView(data)) {
        super(data, view);
    }
    static from(data, is64) {
        if (is64 === true) {
            return data instanceof Int32Array
                ? new IntVector(new FlatData(new Int64(), data.length, null, data))
                : new IntVector(new FlatData(new Uint64(), data.length, null, data));
        }
        switch (data.constructor) {
            case Int8Array: return new IntVector(new FlatData(new Int8(), data.length, null, data));
            case Int16Array: return new IntVector(new FlatData(new Int16(), data.length, null, data));
            case Int32Array: return new IntVector(new FlatData(new Int32(), data.length, null, data));
            case Uint8Array: return new IntVector(new FlatData(new Uint8(), data.length, null, data));
            case Uint16Array: return new IntVector(new FlatData(new Uint16(), data.length, null, data));
            case Uint32Array: return new IntVector(new FlatData(new Uint32(), data.length, null, data));
        }
        throw new TypeError('Unrecognized Int data');
    }
    static defaultView(data) {
        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);
    }
}
export class FloatVector extends FlatVector {
    constructor(data, view = FloatVector.defaultView(data)) {
        super(data, view);
    }
    static from(data) {
        switch (data.constructor) {
            case Uint16Array: return new FloatVector(new FlatData(new Float16(), data.length, null, data));
            case Float32Array: return new FloatVector(new FlatData(new Float32(), data.length, null, data));
            case Float64Array: return new FloatVector(new FlatData(new Float64(), data.length, null, data));
        }
        throw new TypeError('Unrecognized Float data');
    }
    static defaultView(data) {
        return data.type.precision !== Precision.HALF ? new FlatView(data) : new Float16View(data);
    }
}
export class DateVector extends FlatVector {
    static defaultView(data) {
        return data.type.unit === DateUnit.DAY ? new DateDayView(data) : new DateMillisecondView(data, 2);
    }
    constructor(data, view = DateVector.defaultView(data)) {
        super(data, view);
    }
    lows() {
        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(0, 2);
    }
    highs() {
        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(1, 2);
    }
    asEpochMilliseconds() {
        let data = this.data.clone(new Int32());
        switch (this.type.unit) {
            case DateUnit.DAY: return new IntVector(data, new TimestampDayView(data, 1));
            case DateUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data, 2));
        }
        throw new TypeError(`Unrecognized date unit "${DateUnit[this.type.unit]}"`);
    }
}
export class DecimalVector extends FlatVector {
    constructor(data, view = new FixedSizeView(data, 4)) {
        super(data, view);
    }
}
export class TimeVector extends FlatVector {
    static defaultView(data) {
        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);
    }
    constructor(data, view = TimeVector.defaultView(data)) {
        super(data, view);
    }
    lows() {
        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(0, 2);
    }
    highs() {
        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(1, 2);
    }
}
export class TimestampVector extends FlatVector {
    constructor(data, view = new FixedSizeView(data, 2)) {
        super(data, view);
    }
    asEpochMilliseconds() {
        let data = this.data.clone(new Int32());
        switch (this.type.unit) {
            case TimeUnit.SECOND: return new IntVector(data, new TimestampSecondView(data, 1));
            case TimeUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data, 2));
            case TimeUnit.MICROSECOND: return new IntVector(data, new TimestampMicrosecondView(data, 2));
            case TimeUnit.NANOSECOND: return new IntVector(data, new TimestampNanosecondView(data, 2));
        }
        throw new TypeError(`Unrecognized time unit "${TimeUnit[this.type.unit]}"`);
    }
}
export class IntervalVector extends FlatVector {
    static defaultView(data) {
        return data.type.unit === IntervalUnit.YEAR_MONTH ? new IntervalYearMonthView(data) : new FixedSizeView(data, 2);
    }
    constructor(data, view = IntervalVector.defaultView(data)) {
        super(data, view);
    }
    lows() {
        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(0, 2);
    }
    highs() {
        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(1, 2);
    }
}
export class BinaryVector extends ListVectorBase {
    constructor(data, view = new BinaryView(data)) {
        super(data, view);
    }
    asUtf8() {
        return new Utf8Vector(this.data.clone(new Utf8()));
    }
}
export class FixedSizeBinaryVector extends FlatVector {
    constructor(data, view = new FixedSizeView(data, data.type.byteWidth)) {
        super(data, view);
    }
}
export class Utf8Vector extends ListVectorBase {
    constructor(data, view = new Utf8View(data)) {
        super(data, view);
    }
    asBinary() {
        return new BinaryVector(this.data.clone(new Binary()));
    }
}
export class ListVector extends ListVectorBase {
    constructor(data, view = new ListView(data)) {
        super(data, view);
    }
}
export class FixedSizeListVector extends ListVectorBase {
    constructor(data, view = new FixedSizeListView(data)) {
        super(data, view);
    }
}
export class MapVector extends NestedVector {
    constructor(data, view = new MapView(data)) {
        super(data, view);
    }
    asStruct() {
        return new StructVector(this.data.clone(new Struct(this.type.children)));
    }
}
export class StructVector extends NestedVector {
    constructor(data, view = new StructView(data)) {
        super(data, view);
    }
    asMap(keysSorted = false) {
        return new MapVector(this.data.clone(new Map_(keysSorted, this.type.children)));
    }
}
export class UnionVector extends NestedVector {
    constructor(data, view = (data.type.mode === UnionMode.Sparse ? new UnionView(data) : new DenseUnionView(data))) {
        super(data, view);
    }
}
export class DictionaryVector extends Vector {
    constructor(data, view = new DictionaryView(data.dictionary, new IntVector(data.indicies))) {
        super(data, view);
        if (view instanceof DictionaryView) {
            this.indicies = view.indicies;
            this.dictionary = view.dictionary;
        }
        else if (view instanceof ChunkedView) {
            this.dictionary = view.chunks[0].dictionary;
            this.indicies = view.chunks.reduce((idxs, dict) => !idxs ? dict.indicies : idxs.concat(dict.indicies), null);
        }
    }
    getKey(index) { return this.indicies.get(index); }
    getValue(key) { return this.dictionary.get(key); }
}
export const createVector = ((VectorLoader) => ((data) => TypeVisitor.visitTypeInline(new VectorLoader(data), data.type)))(class VectorLoader extends TypeVisitor {
    constructor(data) {
        super();
        this.data = data;
    }
    visitNull(_type) { return new NullVector(this.data); }
    visitInt(_type) { return new IntVector(this.data); }
    visitFloat(_type) { return new FloatVector(this.data); }
    visitBinary(_type) { return new BinaryVector(this.data); }
    visitUtf8(_type) { return new Utf8Vector(this.data); }
    visitBool(_type) { return new BoolVector(this.data); }
    visitDecimal(_type) { return new DecimalVector(this.data); }
    visitDate(_type) { return new DateVector(this.data); }
    visitTime(_type) { return new TimeVector(this.data); }
    visitTimestamp(_type) { return new TimestampVector(this.data); }
    visitInterval(_type) { return new IntervalVector(this.data); }
    visitList(_type) { return new ListVector(this.data); }
    visitStruct(_type) { return new StructVector(this.data); }
    visitUnion(_type) { return new UnionVector(this.data); }
    visitFixedSizeBinary(_type) { return new FixedSizeBinaryVector(this.data); }
    visitFixedSizeList(_type) { return new FixedSizeListVector(this.data); }
    visitMap(_type) { return new MapVector(this.data); }
    visitDictionary(_type) { return new DictionaryVector(this.data); }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
