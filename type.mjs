// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Type, Precision, UnionMode, DateUnit, TimeUnit, IntervalUnit } from './enum';
export class DataType {
    constructor(_children) {
        this._children = _children;
    }
    /** @nocollapse */ static isNull(x) { return x && x.typeId === Type.Null; }
    /** @nocollapse */ static isInt(x) { return x && x.typeId === Type.Int; }
    /** @nocollapse */ static isFloat(x) { return x && x.typeId === Type.Float; }
    /** @nocollapse */ static isBinary(x) { return x && x.typeId === Type.Binary; }
    /** @nocollapse */ static isUtf8(x) { return x && x.typeId === Type.Utf8; }
    /** @nocollapse */ static isBool(x) { return x && x.typeId === Type.Bool; }
    /** @nocollapse */ static isDecimal(x) { return x && x.typeId === Type.Decimal; }
    /** @nocollapse */ static isDate(x) { return x && x.typeId === Type.Date; }
    /** @nocollapse */ static isTime(x) { return x && x.typeId === Type.Time; }
    /** @nocollapse */ static isTimestamp(x) { return x && x.typeId === Type.Timestamp; }
    /** @nocollapse */ static isInterval(x) { return x && x.typeId === Type.Interval; }
    /** @nocollapse */ static isList(x) { return x && x.typeId === Type.List; }
    /** @nocollapse */ static isStruct(x) { return x && x.typeId === Type.Struct; }
    /** @nocollapse */ static isUnion(x) { return x && x.typeId === Type.Union; }
    /** @nocollapse */ static isFixedSizeBinary(x) { return x && x.typeId === Type.FixedSizeBinary; }
    /** @nocollapse */ static isFixedSizeList(x) { return x && x.typeId === Type.FixedSizeList; }
    /** @nocollapse */ static isMap(x) { return x && x.typeId === Type.Map; }
    /** @nocollapse */ static isDictionary(x) { return x && x.typeId === Type.Dictionary; }
    get children() { return this._children; }
    get typeId() { return Type.NONE; }
}
DataType[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Array;
    return proto[Symbol.toStringTag] = 'DataType';
})(DataType.prototype);
export class Null extends DataType {
    toString() { return `Null`; }
    get typeId() { return Type.Null; }
}
Null[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Null';
})(Null.prototype);
class Int_ extends DataType {
    constructor(_isSigned, _bitWidth) {
        super();
        this._isSigned = _isSigned;
        this._bitWidth = _bitWidth;
    }
    get typeId() { return Type.Int; }
    get isSigned() { return this._isSigned; }
    get bitWidth() { return this._bitWidth; }
    get ArrayType() {
        switch (this._bitWidth) {
            case 8: return (this._isSigned ? Int8Array : Uint8Array);
            case 16: return (this._isSigned ? Int16Array : Uint16Array);
            case 32: return (this._isSigned ? Int32Array : Uint32Array);
            case 64: return (this._isSigned ? Int32Array : Uint32Array);
        }
        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
    }
    toString() { return `${this._isSigned ? `I` : `Ui`}nt${this._bitWidth}`; }
}
Int_[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Int';
})(Int_.prototype);
export { Int_ as Int };
export class Int8 extends Int_ {
    constructor() { super(true, 8); }
}
export class Int16 extends Int_ {
    constructor() { super(true, 16); }
}
export class Int32 extends Int_ {
    constructor() { super(true, 32); }
}
export class Int64 extends Int_ {
    constructor() { super(true, 64); }
}
export class Uint8 extends Int_ {
    constructor() { super(false, 8); }
}
export class Uint16 extends Int_ {
    constructor() { super(false, 16); }
}
export class Uint32 extends Int_ {
    constructor() { super(false, 32); }
}
export class Uint64 extends Int_ {
    constructor() { super(false, 64); }
}
export class Float extends DataType {
    constructor(_precision) {
        super();
        this._precision = _precision;
    }
    get typeId() { return Type.Float; }
    get precision() { return this._precision; }
    // @ts-ignore
    get ArrayType() {
        switch (this.precision) {
            case Precision.HALF: return Uint16Array;
            case Precision.SINGLE: return Float32Array;
            case Precision.DOUBLE: return Float64Array;
        }
        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
    }
    toString() { return `Float${(this.precision << 5) || 16}`; }
}
Float[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Float';
})(Float.prototype);
export class Float16 extends Float {
    constructor() { super(Precision.HALF); }
}
export class Float32 extends Float {
    constructor() { super(Precision.SINGLE); }
}
export class Float64 extends Float {
    constructor() { super(Precision.DOUBLE); }
}
export class Binary extends DataType {
    constructor() {
        super();
    }
    get typeId() { return Type.Binary; }
    toString() { return `Binary`; }
}
Binary[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = 'Binary';
})(Binary.prototype);
export class Utf8 extends DataType {
    constructor() {
        super();
    }
    get typeId() { return Type.Utf8; }
    toString() { return `Utf8`; }
}
Utf8[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = 'Utf8';
})(Utf8.prototype);
export class Bool extends DataType {
    constructor() {
        super();
    }
    get typeId() { return Type.Bool; }
    toString() { return `Bool`; }
}
Bool[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = 'Bool';
})(Bool.prototype);
export class Decimal extends DataType {
    constructor(_scale, _precision) {
        super();
        this._scale = _scale;
        this._precision = _precision;
    }
    get typeId() { return Type.Decimal; }
    get scale() { return this._scale; }
    get precision() { return this._precision; }
    toString() { return `Decimal[${this._precision}e${this._scale > 0 ? `+` : ``}${this._scale}]`; }
}
Decimal[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint32Array;
    return proto[Symbol.toStringTag] = 'Decimal';
})(Decimal.prototype);
export class Date_ extends DataType {
    constructor(_unit) {
        super();
        this._unit = _unit;
    }
    get typeId() { return Type.Date; }
    get unit() { return this._unit; }
    toString() { return `Date${(this._unit + 1) * 32}<${DateUnit[this._unit]}>`; }
}
Date_[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = 'Date';
})(Date_.prototype);
export class DateDay extends Date_ {
    constructor() { super(DateUnit.DAY); }
}
export class DateMillisecond extends Date_ {
    constructor() { super(DateUnit.MILLISECOND); }
}
class Time_ extends DataType {
    constructor(_unit, _bitWidth) {
        super();
        this._unit = _unit;
        this._bitWidth = _bitWidth;
    }
    get typeId() { return Type.Time; }
    get unit() { return this._unit; }
    get bitWidth() { return this._bitWidth; }
    toString() { return `Time${this._bitWidth}<${TimeUnit[this._unit]}>`; }
}
Time_[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint32Array;
    return proto[Symbol.toStringTag] = 'Time';
})(Time_.prototype);
export { Time_ as Time };
export class TimeSecond extends Time_ {
    constructor() { super(TimeUnit.SECOND, 32); }
}
export class TimeMillisecond extends Time_ {
    constructor() { super(TimeUnit.MILLISECOND, 32); }
}
export class TimeMicrosecond extends Time_ {
    constructor() { super(TimeUnit.MICROSECOND, 64); }
}
export class TimeNanosecond extends Time_ {
    constructor() { super(TimeUnit.NANOSECOND, 64); }
}
class Timestamp_ extends DataType {
    constructor(_unit, _timezone) {
        super();
        this._unit = _unit;
        this._timezone = _timezone;
    }
    get typeId() { return Type.Timestamp; }
    get unit() { return this._unit; }
    get timezone() { return this._timezone; }
    toString() { return `Timestamp<${TimeUnit[this._unit]}${this._timezone ? `, ${this._timezone}` : ``}>`; }
}
Timestamp_[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = 'Timestamp';
})(Timestamp_.prototype);
export { Timestamp_ as Timestamp };
export class TimestampSecond extends Timestamp_ {
    constructor(timezone) { super(TimeUnit.SECOND, timezone); }
}
export class TimestampMillisecond extends Timestamp_ {
    constructor(timezone) { super(TimeUnit.MILLISECOND, timezone); }
}
export class TimestampMicrosecond extends Timestamp_ {
    constructor(timezone) { super(TimeUnit.MICROSECOND, timezone); }
}
export class TimestampNanosecond extends Timestamp_ {
    constructor(timezone) { super(TimeUnit.NANOSECOND, timezone); }
}
class Interval_ extends DataType {
    constructor(_unit) {
        super();
        this._unit = _unit;
    }
    get typeId() { return Type.Interval; }
    get unit() { return this._unit; }
    toString() { return `Interval<${IntervalUnit[this._unit]}>`; }
}
Interval_[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = 'Interval';
})(Interval_.prototype);
export { Interval_ as Interval };
export class IntervalDayTime extends Interval_ {
    constructor() { super(IntervalUnit.DAY_TIME); }
}
export class IntervalYearMonth extends Interval_ {
    constructor() { super(IntervalUnit.YEAR_MONTH); }
}
export class List extends DataType {
    constructor(child) {
        super([child]);
    }
    get typeId() { return Type.List; }
    toString() { return `List<${this.valueType}>`; }
    get children() { return this._children; }
    get valueType() { return this._children[0].type; }
    get valueField() { return this._children[0]; }
    get ArrayType() { return this.valueType.ArrayType; }
}
List[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'List';
})(List.prototype);
export class Struct extends DataType {
    constructor(_children) {
        super(_children);
        this._children = _children;
    }
    get typeId() { return Type.Struct; }
    get children() { return this._children; }
    toString() { return `Struct<${this._children.map((f) => f.type).join(`, `)}>`; }
}
Struct[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Struct';
})(Struct.prototype);
class Union_ extends DataType {
    constructor(_mode, _typeIds, _children) {
        super(_children);
        this._mode = _mode;
        this._children = _children;
        this._typeIds = _typeIds = Int32Array.from(_typeIds);
        this._typeIdToChildIndex = _typeIds.reduce((typeIdToChildIndex, typeId, idx) => {
            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;
        }, Object.create(null));
    }
    get typeId() { return Type.Union; }
    get mode() { return this._mode; }
    get typeIds() { return this._typeIds; }
    get children() { return this._children; }
    get typeIdToChildIndex() { return this._typeIdToChildIndex; }
    toString() {
        return `${this[Symbol.toStringTag]}<${this._children.map((x) => `${x.type}`).join(` | `)}>`;
    }
}
Union_[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = 'Union';
})(Union_.prototype);
export { Union_ as Union };
export class DenseUnion extends Union_ {
    constructor(typeIds, children) {
        super(UnionMode.Dense, typeIds, children);
    }
}
export class SparseUnion extends Union_ {
    constructor(typeIds, children) {
        super(UnionMode.Sparse, typeIds, children);
    }
}
export class FixedSizeBinary extends DataType {
    constructor(_byteWidth) {
        super();
        this._byteWidth = _byteWidth;
    }
    get typeId() { return Type.FixedSizeBinary; }
    get byteWidth() { return this._byteWidth; }
    toString() { return `FixedSizeBinary[${this.byteWidth}]`; }
}
FixedSizeBinary[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = 'FixedSizeBinary';
})(FixedSizeBinary.prototype);
export class FixedSizeList extends DataType {
    constructor(_listSize, child) {
        super([child]);
        this._listSize = _listSize;
    }
    get typeId() { return Type.FixedSizeList; }
    get listSize() { return this._listSize; }
    get children() { return this._children; }
    get valueType() { return this.children[0].type; }
    get valueField() { return this.children[0]; }
    get ArrayType() { return this.valueType.ArrayType; }
    toString() { return `FixedSizeList[${this._listSize}]<${this.valueType}>`; }
}
FixedSizeList[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'FixedSizeList';
})(FixedSizeList.prototype);
export class Map_ extends DataType {
    constructor(_children, _keysSorted = false) {
        super(_children);
        this._children = _children;
        this._keysSorted = _keysSorted;
    }
    get typeId() { return Type.Map; }
    get children() { return this._children; }
    get keysSorted() { return this._keysSorted; }
    toString() { return `Map<${this.children.join(`, `)}>`; }
}
Map_[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Map_';
})(Map_.prototype);
const getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);
export class Dictionary extends DataType {
    constructor(dictionary, indices, id, isOrdered, dictionaryVector) {
        super();
        this._indices = indices;
        this._dictionary = dictionary;
        this._isOrdered = isOrdered || false;
        this._dictionaryVector = dictionaryVector;
        this._id = id == null ? getId() : typeof id === 'number' ? id : id.low;
    }
    set dictionaryVector(v) { this._dictionaryVector = v; }
    get dictionaryVector() { return this._dictionaryVector; }
    get typeId() { return Type.Dictionary; }
    get id() { return this._id; }
    get indices() { return this._indices; }
    get dictionary() { return this._dictionary; }
    get isOrdered() { return this._isOrdered; }
    set children(_) { }
    get children() { return this.dictionary.children; }
    get valueType() { return this.dictionary; }
    get ArrayType() { return this.dictionary.ArrayType; }
    toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }
}
Dictionary[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Dictionary';
})(Dictionary.prototype);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
