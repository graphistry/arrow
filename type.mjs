// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import * as Schema_ from './fb/Schema';
import * as Message_ from './fb/Message';
import { flatbuffers } from 'flatbuffers';
import { DictionaryBatch } from './ipc/metadata';
import { TypeVisitor } from './visitor';
export var Long = flatbuffers.Long;
export var ArrowType = Schema_.org.apache.arrow.flatbuf.Type;
export var DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;
export var TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;
export var Precision = Schema_.org.apache.arrow.flatbuf.Precision;
export var UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;
export var VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;
export var IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;
export var MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;
export var MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;
export class Schema {
    constructor(fields, metadata, version = MetadataVersion.V4, dictionaries = new Map()) {
        this.fields = fields;
        this.version = version;
        this.metadata = metadata;
        this.dictionaries = dictionaries;
    }
    static from(vectors) {
        return new Schema(vectors.map((v, i) => new Field('' + i, v.type)));
    }
    get bodyLength() { return this._bodyLength; }
    get headerType() { return this._headerType; }
    select(...fieldNames) {
        const namesToKeep = fieldNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));
        const newDictFields = new Map(), newFields = this.fields.filter((f) => namesToKeep[f.name]);
        this.dictionaries.forEach((f, dictId) => (namesToKeep[f.name]) && newDictFields.set(dictId, f));
        return new Schema(newFields, this.metadata, this.version, newDictFields);
    }
}
Schema[Symbol.toStringTag] = ((prototype) => {
    prototype._bodyLength = 0;
    prototype._headerType = MessageHeader.Schema;
    return 'Schema';
})(Schema.prototype);
export class Field {
    constructor(name, type, nullable = false, metadata) {
        this.name = name;
        this.type = type;
        this.nullable = nullable;
        this.metadata = metadata;
    }
    toString() { return `${this.name}: ${this.type}`; }
    get typeId() { return this.type.TType; }
    get [Symbol.toStringTag]() { return 'Field'; }
    get indicies() {
        return DataType.isDictionary(this.type) ? this.type.indicies : this.type;
    }
}
/**
 * *
 * Main data type enumeration:
 * *
 * Data types in this library are all *logical*. They can be expressed as
 * either a primitive physical type (bytes or bits of some fixed size), a
 * nested type consisting of other data types, or another data type (e.g. a
 * timestamp encoded as an int64)
 */
export var Type;
(function (Type) {
    Type[Type["NONE"] = 0] = "NONE";
    Type[Type["Null"] = 1] = "Null";
    Type[Type["Int"] = 2] = "Int";
    Type[Type["Float"] = 3] = "Float";
    Type[Type["Binary"] = 4] = "Binary";
    Type[Type["Utf8"] = 5] = "Utf8";
    Type[Type["Bool"] = 6] = "Bool";
    Type[Type["Decimal"] = 7] = "Decimal";
    Type[Type["Date"] = 8] = "Date";
    Type[Type["Time"] = 9] = "Time";
    Type[Type["Timestamp"] = 10] = "Timestamp";
    Type[Type["Interval"] = 11] = "Interval";
    Type[Type["List"] = 12] = "List";
    Type[Type["Struct"] = 13] = "Struct";
    Type[Type["Union"] = 14] = "Union";
    Type[Type["FixedSizeBinary"] = 15] = "FixedSizeBinary";
    Type[Type["FixedSizeList"] = 16] = "FixedSizeList";
    Type[Type["Map"] = 17] = "Map";
    Type["Dictionary"] = "Dictionary";
    Type["DenseUnion"] = "DenseUnion";
    Type["SparseUnion"] = "SparseUnion";
})(Type || (Type = {}));
export class DataType {
    constructor(TType, children) {
        this.TType = TType;
        this.children = children;
    }
    static isNull(x) { return x && x.TType === Type.Null; }
    static isInt(x) { return x && x.TType === Type.Int; }
    static isFloat(x) { return x && x.TType === Type.Float; }
    static isBinary(x) { return x && x.TType === Type.Binary; }
    static isUtf8(x) { return x && x.TType === Type.Utf8; }
    static isBool(x) { return x && x.TType === Type.Bool; }
    static isDecimal(x) { return x && x.TType === Type.Decimal; }
    static isDate(x) { return x && x.TType === Type.Date; }
    static isTime(x) { return x && x.TType === Type.Time; }
    static isTimestamp(x) { return x && x.TType === Type.Timestamp; }
    static isInterval(x) { return x && x.TType === Type.Interval; }
    static isList(x) { return x && x.TType === Type.List; }
    static isStruct(x) { return x && x.TType === Type.Struct; }
    static isUnion(x) { return x && x.TType === Type.Union; }
    static isDenseUnion(x) { return x && x.TType === Type.DenseUnion; }
    static isSparseUnion(x) { return x && x.TType === Type.SparseUnion; }
    static isFixedSizeBinary(x) { return x && x.TType === Type.FixedSizeBinary; }
    static isFixedSizeList(x) { return x && x.TType === Type.FixedSizeList; }
    static isMap(x) { return x && x.TType === Type.Map; }
    static isDictionary(x) { return x && x.TType === Type.Dictionary; }
    acceptTypeVisitor(visitor) {
        return TypeVisitor.visitTypeInline(visitor, this);
    }
}
DataType[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Array;
    return proto[Symbol.toStringTag] = 'DataType';
})(DataType.prototype);
export class Null extends DataType {
    constructor() {
        super(Type.Null);
    }
    toString() { return `Null`; }
}
Null[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Null';
})(Null.prototype);
export class Int extends DataType {
    constructor(isSigned, bitWidth) {
        super(Type.Int);
        this.isSigned = isSigned;
        this.bitWidth = bitWidth;
    }
    get ArrayType() {
        switch (this.bitWidth) {
            case 8: return (this.isSigned ? Int8Array : Uint8Array);
            case 16: return (this.isSigned ? Int16Array : Uint16Array);
            case 32: return (this.isSigned ? Int32Array : Uint32Array);
            case 64: return (this.isSigned ? Int32Array : Uint32Array);
        }
        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
    }
    toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }
}
Int[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Int';
})(Int.prototype);
export class Int8 extends Int {
    constructor() { super(true, 8); }
}
export class Int16 extends Int {
    constructor() { super(true, 16); }
}
export class Int32 extends Int {
    constructor() { super(true, 32); }
}
export class Int64 extends Int {
    constructor() { super(true, 64); }
}
export class Uint8 extends Int {
    constructor() { super(false, 8); }
}
export class Uint16 extends Int {
    constructor() { super(false, 16); }
}
export class Uint32 extends Int {
    constructor() { super(false, 32); }
}
export class Uint64 extends Int {
    constructor() { super(false, 64); }
}
export class Float extends DataType {
    constructor(precision) {
        super(Type.Float);
        this.precision = precision;
    }
    // @ts-ignore
    get ArrayType() {
        switch (this.precision) {
            case Precision.HALF: return Uint16Array;
            case Precision.SINGLE: return Float32Array;
            case Precision.DOUBLE: return Float64Array;
        }
        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
    }
    toString() { return `Float${(this.precision << 5) || 16}`; }
}
Float[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Float';
})(Float.prototype);
export class Float16 extends Float {
    constructor() { super(Precision.HALF); }
}
export class Float32 extends Float {
    constructor() { super(Precision.SINGLE); }
}
export class Float64 extends Float {
    constructor() { super(Precision.DOUBLE); }
}
export class Binary extends DataType {
    constructor() {
        super(Type.Binary);
    }
    toString() { return `Binary`; }
}
Binary[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = 'Binary';
})(Binary.prototype);
export class Utf8 extends DataType {
    constructor() {
        super(Type.Utf8);
    }
    toString() { return `Utf8`; }
}
Utf8[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = 'Utf8';
})(Utf8.prototype);
export class Bool extends DataType {
    constructor() {
        super(Type.Bool);
    }
    toString() { return `Bool`; }
}
Bool[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = 'Bool';
})(Bool.prototype);
export class Decimal extends DataType {
    constructor(scale, precision) {
        super(Type.Decimal);
        this.scale = scale;
        this.precision = precision;
    }
    toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }
}
Decimal[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint32Array;
    return proto[Symbol.toStringTag] = 'Decimal';
})(Decimal.prototype);
export class Date_ extends DataType {
    constructor(unit) {
        super(Type.Date);
        this.unit = unit;
    }
    toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }
}
Date_[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = 'Date';
})(Date_.prototype);
export class Time extends DataType {
    constructor(unit, bitWidth) {
        super(Type.Time);
        this.unit = unit;
        this.bitWidth = bitWidth;
    }
    toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }
}
Time[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint32Array;
    return proto[Symbol.toStringTag] = 'Time';
})(Time.prototype);
export class Timestamp extends DataType {
    constructor(unit, timezone) {
        super(Type.Timestamp);
        this.unit = unit;
        this.timezone = timezone;
    }
    toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }
}
Timestamp[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = 'Timestamp';
})(Timestamp.prototype);
export class Interval extends DataType {
    constructor(unit) {
        super(Type.Interval);
        this.unit = unit;
    }
    toString() { return `Interval<${IntervalUnit[this.unit]}>`; }
}
Interval[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = 'Interval';
})(Interval.prototype);
export class List extends DataType {
    constructor(children) {
        super(Type.List, children);
        this.children = children;
    }
    toString() { return `List<${this.valueType}>`; }
    get ArrayType() { return this.valueType.ArrayType; }
    get valueType() { return this.children[0].type; }
    get valueField() { return this.children[0]; }
}
List[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'List';
})(List.prototype);
export class Struct extends DataType {
    constructor(children) {
        super(Type.Struct, children);
        this.children = children;
    }
    toString() { return `Struct<${this.children.map((f) => f.type).join(`, `)}>`; }
}
Struct[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Struct';
})(Struct.prototype);
export class Union extends DataType {
    constructor(mode, typeIds, children) {
        super((mode === UnionMode.Sparse ? Type.SparseUnion : Type.DenseUnion), children);
        this.mode = mode;
        this.typeIds = typeIds;
        this.children = children;
    }
    toString() { return `${this[Symbol.toStringTag]}<${this.typeIds.map((x) => Type[x]).join(` | `)}>`; }
}
Union[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int8Array;
    return proto[Symbol.toStringTag] = 'Union';
})(Union.prototype);
export class DenseUnion extends Union {
    constructor(typeIds, children) {
        super(UnionMode.Dense, typeIds, children);
    }
}
DenseUnion[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'DenseUnion';
})(DenseUnion.prototype);
export class SparseUnion extends Union {
    constructor(typeIds, children) {
        super(UnionMode.Sparse, typeIds, children);
    }
}
SparseUnion[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'SparseUnion';
})(SparseUnion.prototype);
export class FixedSizeBinary extends DataType {
    constructor(byteWidth) {
        super(Type.FixedSizeBinary);
        this.byteWidth = byteWidth;
    }
    toString() { return `FixedSizeBinary[${this.byteWidth}]`; }
}
FixedSizeBinary[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = 'FixedSizeBinary';
})(FixedSizeBinary.prototype);
export class FixedSizeList extends DataType {
    constructor(listSize, children) {
        super(Type.FixedSizeList, children);
        this.listSize = listSize;
        this.children = children;
    }
    get ArrayType() { return this.valueType.ArrayType; }
    get valueType() { return this.children[0].type; }
    get valueField() { return this.children[0]; }
    toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }
}
FixedSizeList[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'FixedSizeList';
})(FixedSizeList.prototype);
export class Map_ extends DataType {
    constructor(keysSorted, children) {
        super(Type.Map, children);
        this.keysSorted = keysSorted;
        this.children = children;
    }
    toString() { return `Map<${this.children.join(`, `)}>`; }
}
Map_[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Map_';
})(Map_.prototype);
export class Dictionary extends DataType {
    constructor(dictionary, indicies, id, isOrdered) {
        super(Type.Dictionary);
        this.indicies = indicies;
        this.dictionary = dictionary;
        this.isOrdered = isOrdered || false;
        this.id = id == null ? DictionaryBatch.getId() : typeof id === 'number' ? id : id.low;
    }
    get ArrayType() { return this.dictionary.ArrayType; }
    toString() { return `Dictionary<${this.indicies}, ${this.dictionary}>`; }
}
Dictionary[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Dictionary';
})(Dictionary.prototype);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
