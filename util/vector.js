"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const vector_1 = require("../vector");
const row_1 = require("../vector/row");
const buffer_1 = require("../util/buffer");
/** @ignore */
function clampIndex(source, index, then) {
    const length = source.length;
    const adjust = index > -1 ? index : (length + (index % length));
    return then ? then(source, adjust) : adjust;
}
exports.clampIndex = clampIndex;
/** @ignore */
let tmp;
/** @ignore */
function clampRange(source, begin, end, then) {
    // Adjust args similar to Array.prototype.slice. Normalize begin/end to
    // clamp between 0 and length, and wrap around on negative indices, e.g.
    // slice(-1, 5) or slice(5, -1)
    let { length: len = 0 } = source;
    let lhs = typeof begin !== 'number' ? 0 : begin;
    let rhs = typeof end !== 'number' ? len : end;
    // wrap around on negative start/end positions
    (lhs < 0) && (lhs = ((lhs % len) + len) % len);
    (rhs < 0) && (rhs = ((rhs % len) + len) % len);
    // ensure lhs <= rhs
    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);
    // ensure rhs <= length
    (rhs > len) && (rhs = len);
    return then ? then(source, lhs, rhs) : [lhs, rhs];
}
exports.clampRange = clampRange;
/** @ignore */
function createElementComparator(search) {
    // Compare primitives
    if (search == null || typeof search !== 'object') {
        return (value) => value === search;
    }
    // Compare Dates
    if (search instanceof Date) {
        const valueOfSearch = search.valueOf();
        return (value) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;
    }
    if (ArrayBuffer.isView(search)) {
        return (value) => value ? buffer_1.compareArrayLike(search, value) : false;
    }
    // Compare Array-likes
    if (Array.isArray(search)) {
        const n = search.length;
        const fns = [];
        for (let i = -1; ++i < n;) {
            fns[i] = createElementComparator(search[i]);
        }
        return (value) => {
            if (!value || value.length !== n) {
                return false;
            }
            // Handle the case where the search element is an Array, but the
            // values are Rows or Vectors, e.g. list.indexOf(['foo', 'bar'])
            if ((value instanceof row_1.Row) || (value instanceof vector_1.Vector)) {
                for (let i = -1, n = value.length; ++i < n;) {
                    if (!(fns[i](value.get(i)))) {
                        return false;
                    }
                }
                return true;
            }
            for (let i = -1, n = value.length; ++i < n;) {
                if (!(fns[i](value[i]))) {
                    return false;
                }
            }
            return true;
        };
    }
    // Compare Rows and Vectors
    if ((search instanceof row_1.Row) || (search instanceof vector_1.Vector)) {
        const n = search.length;
        const C = search.constructor;
        const fns = [];
        for (let i = -1; ++i < n;) {
            fns[i] = createElementComparator(search.get(i));
        }
        return (value) => {
            if (!(value instanceof C)) {
                return false;
            }
            if (!(value.length === n)) {
                return false;
            }
            for (let i = -1; ++i < n;) {
                if (!(fns[i](value.get(i)))) {
                    return false;
                }
            }
            return true;
        };
    }
    // Compare non-empty Objects
    const keys = Object.keys(search);
    if (keys.length > 0) {
        const n = keys.length;
        const fns = [];
        for (let i = -1; ++i < n;) {
            fns[i] = createElementComparator(search[keys[i]]);
        }
        return (value) => {
            if (!value || typeof value !== 'object') {
                return false;
            }
            for (let i = -1; ++i < n;) {
                if (!(fns[i](value[keys[i]]))) {
                    return false;
                }
            }
            return true;
        };
    }
    // No valid comparator
    return () => false;
}
exports.createElementComparator = createElementComparator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Q0FBQyxDQUFDLENBQUMsRUFBRTtvQkFBRSxPQUFPLEtBQUssQ0FBQztpQkFBRTthQUNuRDtZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUMsQ0FBQztLQUNMO0lBQ0Qsc0JBQXNCO0lBQ3RCLE9BQU8sR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0FBQ3ZCLENBQUM7QUF2RUQsMERBdUVDIiwiZmlsZSI6InV0aWwvdmVjdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBSb3cgfSBmcm9tICcuLi92ZWN0b3Ivcm93JztcbmltcG9ydCB7IGNvbXBhcmVBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2J1ZmZlcic7XG5cbi8qKiBAaWdub3JlICovXG50eXBlIFJhbmdlTGlrZSA9IHsgbGVuZ3RoOiBudW1iZXI7IHN0cmlkZT86IG51bWJlciB9O1xuLyoqIEBpZ25vcmUgKi9cbnR5cGUgQ2xhbXBUaGVuPFQgZXh0ZW5kcyBSYW5nZUxpa2U+ID0gKHNvdXJjZTogVCwgaW5kZXg6IG51bWJlcikgPT4gYW55O1xuLyoqIEBpZ25vcmUgKi9cbnR5cGUgQ2xhbXBSYW5nZVRoZW48VCBleHRlbmRzIFJhbmdlTGlrZT4gPSAoc291cmNlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpID0+IGFueTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wSW5kZXg8VCBleHRlbmRzIFJhbmdlTGlrZT4oc291cmNlOiBULCBpbmRleDogbnVtYmVyKTogbnVtYmVyO1xuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wSW5kZXg8VCBleHRlbmRzIFJhbmdlTGlrZSwgTiBleHRlbmRzIENsYW1wVGhlbjxUPiA9IENsYW1wVGhlbjxUPj4oc291cmNlOiBULCBpbmRleDogbnVtYmVyLCB0aGVuOiBOKTogUmV0dXJuVHlwZTxOPjtcbi8qKiBAaWdub3JlICovXG5leHBvcnQgZnVuY3Rpb24gY2xhbXBJbmRleDxUIGV4dGVuZHMgUmFuZ2VMaWtlLCBOIGV4dGVuZHMgQ2xhbXBUaGVuPFQ+ID0gQ2xhbXBUaGVuPFQ+Pihzb3VyY2U6IFQsIGluZGV4OiBudW1iZXIsIHRoZW4/OiBOKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICBjb25zdCBhZGp1c3QgPSBpbmRleCA+IC0xID8gaW5kZXggOiAobGVuZ3RoICsgKGluZGV4ICUgbGVuZ3RoKSk7XG4gICAgcmV0dXJuIHRoZW4gPyB0aGVuKHNvdXJjZSwgYWRqdXN0KSA6IGFkanVzdDtcbn1cblxuLyoqIEBpZ25vcmUgKi9cbmxldCB0bXA6IG51bWJlcjtcbmV4cG9ydCBmdW5jdGlvbiBjbGFtcFJhbmdlPFQgZXh0ZW5kcyBSYW5nZUxpa2U+KHNvdXJjZTogVCwgYmVnaW46IG51bWJlciB8IHVuZGVmaW5lZCwgZW5kOiBudW1iZXIgfCB1bmRlZmluZWQpOiBbbnVtYmVyLCBudW1iZXJdO1xuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wUmFuZ2U8VCBleHRlbmRzIFJhbmdlTGlrZSwgTiBleHRlbmRzIENsYW1wUmFuZ2VUaGVuPFQ+ID0gQ2xhbXBSYW5nZVRoZW48VD4+KHNvdXJjZTogVCwgYmVnaW46IG51bWJlciB8IHVuZGVmaW5lZCwgZW5kOiBudW1iZXIgfCB1bmRlZmluZWQsIHRoZW46IE4pOiBSZXR1cm5UeXBlPE4+O1xuLyoqIEBpZ25vcmUgKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcFJhbmdlPFQgZXh0ZW5kcyBSYW5nZUxpa2UsIE4gZXh0ZW5kcyBDbGFtcFJhbmdlVGhlbjxUPiA9IENsYW1wUmFuZ2VUaGVuPFQ+Pihzb3VyY2U6IFQsIGJlZ2luOiBudW1iZXIgfCB1bmRlZmluZWQsIGVuZDogbnVtYmVyIHwgdW5kZWZpbmVkLCB0aGVuPzogTikge1xuXG4gICAgLy8gQWRqdXN0IGFyZ3Mgc2ltaWxhciB0byBBcnJheS5wcm90b3R5cGUuc2xpY2UuIE5vcm1hbGl6ZSBiZWdpbi9lbmQgdG9cbiAgICAvLyBjbGFtcCBiZXR3ZWVuIDAgYW5kIGxlbmd0aCwgYW5kIHdyYXAgYXJvdW5kIG9uIG5lZ2F0aXZlIGluZGljZXMsIGUuZy5cbiAgICAvLyBzbGljZSgtMSwgNSkgb3Igc2xpY2UoNSwgLTEpXG4gICAgbGV0IHsgbGVuZ3RoOiBsZW4gPSAwIH0gPSBzb3VyY2U7XG4gICAgbGV0IGxocyA9IHR5cGVvZiBiZWdpbiAhPT0gJ251bWJlcicgPyAwIDogYmVnaW47XG4gICAgbGV0IHJocyA9IHR5cGVvZiBlbmQgIT09ICdudW1iZXInID8gbGVuIDogZW5kO1xuICAgIC8vIHdyYXAgYXJvdW5kIG9uIG5lZ2F0aXZlIHN0YXJ0L2VuZCBwb3NpdGlvbnNcbiAgICAobGhzIDwgMCkgJiYgKGxocyA9ICgobGhzICUgbGVuKSArIGxlbikgJSBsZW4pO1xuICAgIChyaHMgPCAwKSAmJiAocmhzID0gKChyaHMgJSBsZW4pICsgbGVuKSAlIGxlbik7XG4gICAgLy8gZW5zdXJlIGxocyA8PSByaHNcbiAgICAocmhzIDwgbGhzKSAmJiAodG1wID0gbGhzLCBsaHMgPSByaHMsIHJocyA9IHRtcCk7XG4gICAgIC8vIGVuc3VyZSByaHMgPD0gbGVuZ3RoXG4gICAgKHJocyA+IGxlbikgJiYgKHJocyA9IGxlbik7XG5cbiAgICByZXR1cm4gdGhlbiA/IHRoZW4oc291cmNlLCBsaHMsIHJocykgOiBbbGhzLCByaHNdO1xufVxuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRDb21wYXJhdG9yKHNlYXJjaDogYW55KSB7XG4gICAgLy8gQ29tcGFyZSBwcmltaXRpdmVzXG4gICAgaWYgKHNlYXJjaCA9PSBudWxsIHx8IHR5cGVvZiBzZWFyY2ggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiAodmFsdWU6IGFueSkgPT4gdmFsdWUgPT09IHNlYXJjaDtcbiAgICB9XG4gICAgLy8gQ29tcGFyZSBEYXRlc1xuICAgIGlmIChzZWFyY2ggaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlT2ZTZWFyY2ggPSBzZWFyY2gudmFsdWVPZigpO1xuICAgICAgICByZXR1cm4gKHZhbHVlOiBhbnkpID0+IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSA/ICh2YWx1ZS52YWx1ZU9mKCkgPT09IHZhbHVlT2ZTZWFyY2gpIDogZmFsc2U7XG4gICAgfVxuICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc2VhcmNoKSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlOiBhbnkpID0+IHZhbHVlID8gY29tcGFyZUFycmF5TGlrZShzZWFyY2gsIHZhbHVlKSA6IGZhbHNlO1xuICAgIH1cbiAgICAvLyBDb21wYXJlIEFycmF5LWxpa2VzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2VhcmNoKSkge1xuICAgICAgICBjb25zdCBuID0gKHNlYXJjaCBhcyBhbnkpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZm5zID0gW10gYXMgKCh4OiBhbnkpID0+IGJvb2xlYW4pW107XG4gICAgICAgIGZvciAobGV0IGkgPSAtMTsgKytpIDwgbjspIHtcbiAgICAgICAgICAgIGZuc1tpXSA9IGNyZWF0ZUVsZW1lbnRDb21wYXJhdG9yKChzZWFyY2ggYXMgYW55KVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCAhPT0gbikgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgc2VhcmNoIGVsZW1lbnQgaXMgYW4gQXJyYXksIGJ1dCB0aGVcbiAgICAgICAgICAgIC8vIHZhbHVlcyBhcmUgUm93cyBvciBWZWN0b3JzLCBlLmcuIGxpc3QuaW5kZXhPZihbJ2ZvbycsICdiYXInXSlcbiAgICAgICAgICAgIGlmICgodmFsdWUgaW5zdGFuY2VvZiBSb3cpIHx8ICh2YWx1ZSBpbnN0YW5jZW9mIFZlY3RvcikpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGZuc1tpXSgodmFsdWUgYXMgYW55KS5nZXQoaSkpKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoZm5zW2ldKHZhbHVlW2ldKSkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ29tcGFyZSBSb3dzIGFuZCBWZWN0b3JzXG4gICAgaWYgKChzZWFyY2ggaW5zdGFuY2VvZiBSb3cpIHx8IChzZWFyY2ggaW5zdGFuY2VvZiBWZWN0b3IpKSB7XG4gICAgICAgIGNvbnN0IG4gPSBzZWFyY2gubGVuZ3RoO1xuICAgICAgICBjb25zdCBDID0gc2VhcmNoLmNvbnN0cnVjdG9yIGFzIGFueTtcbiAgICAgICAgY29uc3QgZm5zID0gW10gYXMgKCh4OiBhbnkpID0+IGJvb2xlYW4pW107XG4gICAgICAgIGZvciAobGV0IGkgPSAtMTsgKytpIDwgbjspIHtcbiAgICAgICAgICAgIGZuc1tpXSA9IGNyZWF0ZUVsZW1lbnRDb21wYXJhdG9yKChzZWFyY2ggYXMgYW55KS5nZXQoaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBDKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgIGlmICghKHZhbHVlLmxlbmd0aCA9PT0gbikpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gLTE7ICsraSA8IG47KSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoZm5zW2ldKHZhbHVlLmdldChpKSkpKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIENvbXBhcmUgbm9uLWVtcHR5IE9iamVjdHNcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc2VhcmNoKTtcbiAgICBpZiAoa2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG4gPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZm5zID0gW10gYXMgKCh4OiBhbnkpID0+IGJvb2xlYW4pW107XG4gICAgICAgIGZvciAobGV0IGkgPSAtMTsgKytpIDwgbjspIHtcbiAgICAgICAgICAgIGZuc1tpXSA9IGNyZWF0ZUVsZW1lbnRDb21wYXJhdG9yKHNlYXJjaFtrZXlzW2ldXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gLTE7ICsraSA8IG47KSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoZm5zW2ldKHZhbHVlW2tleXNbaV1dKSkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gTm8gdmFsaWQgY29tcGFyYXRvclxuICAgIHJldHVybiAoKSA9PiBmYWxzZTtcbn1cbiJdfQ==
