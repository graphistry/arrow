"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const vector_1 = require("../vector");
const row_1 = require("../vector/row");
function clampIndex(source, index, then) {
    const length = source.length;
    const adjust = index > -1 ? index : (length + (index % length));
    return then ? then(source, adjust) : adjust;
}
exports.clampIndex = clampIndex;
let tmp;
function clampRange(source, begin, end, then) {
    // Adjust args similar to Array.prototype.slice. Normalize begin/end to
    // clamp between 0 and length, and wrap around on negative indices, e.g.
    // slice(-1, 5) or slice(5, -1)
    let { length: len = 0 } = source;
    let lhs = typeof begin !== 'number' ? 0 : begin;
    let rhs = typeof end !== 'number' ? len : end;
    // wrap around on negative start/end positions
    (lhs < 0) && (lhs = ((lhs % len) + len) % len);
    (rhs < 0) && (rhs = ((rhs % len) + len) % len);
    // ensure lhs <= rhs
    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);
    // ensure rhs <= length
    (rhs > len) && (rhs = len);
    return then ? then(source, lhs, rhs) : [lhs, rhs];
}
exports.clampRange = clampRange;
function createElementComparator(search) {
    // Compare primitives
    if (search == null || typeof search !== 'object') {
        return (value) => value === search;
    }
    // Compare Dates
    if (search instanceof Date) {
        const valueOfSearch = search.valueOf();
        return (value) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;
    }
    // Compare Array-likes
    if (Array.isArray(search) || ArrayBuffer.isView(search)) {
        const n = search.length;
        const fns = [];
        for (let i = -1; ++i < n;) {
            fns[i] = createElementComparator(search[i]);
        }
        return (value) => {
            if (!value || value.length !== n) {
                return false;
            }
            // Handle the case where the search element is an Array, but the
            // values are Rows or Vectors, e.g. list.indexOf(['foo', 'bar'])
            if ((value instanceof row_1.Row) || (value instanceof vector_1.Vector)) {
                for (let i = -1, n = value.length; ++i < n;) {
                    if (!(fns[i](value.get(i)))) {
                        return false;
                    }
                }
                return true;
            }
            for (let i = -1, n = value.length; ++i < n;) {
                if (!(fns[i](value[i]))) {
                    return false;
                }
            }
            return true;
        };
    }
    // Compare Rows and Vectors
    if ((search instanceof row_1.Row) || (search instanceof vector_1.Vector)) {
        const n = search.length;
        const C = search.constructor;
        const fns = [];
        for (let i = -1; ++i < n;) {
            fns[i] = createElementComparator(search.get(i));
        }
        return (value) => {
            if (!(value instanceof C)) {
                return false;
            }
            if (!(value.length === n)) {
                return false;
            }
            for (let i = -1; ++i < n;) {
                if (!(fns[i](value.get(i)))) {
                    return false;
                }
            }
            return true;
        };
    }
    // Compare non-empty Objects
    const keys = Object.keys(search);
    if (keys.length > 0) {
        const n = keys.length;
        const fns = [];
        for (let i = -1; ++i < n;) {
            fns[i] = createElementComparator(search[keys[i]]);
        }
        return (value) => {
            if (!value || typeof value !== 'object') {
                return false;
            }
            for (let i = -1; ++i < n;) {
                if (!(fns[i](value[keys[i]]))) {
                    return false;
                }
            }
            return true;
        };
    }
    // No valid comparator
    return () => false;
}
exports.createElementComparator = createElementComparator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Y3Rvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgUm93IH0gZnJvbSAnLi4vdmVjdG9yL3Jvdyc7XG5cbnR5cGUgUmFuZ2VMaWtlID0geyBsZW5ndGg6IG51bWJlcjsgc3RyaWRlPzogbnVtYmVyIH07XG50eXBlIENsYW1wVGhlbjxUIGV4dGVuZHMgUmFuZ2VMaWtlPiA9IChzb3VyY2U6IFQsIGluZGV4OiBudW1iZXIpID0+IGFueTtcbnR5cGUgQ2xhbXBSYW5nZVRoZW48VCBleHRlbmRzIFJhbmdlTGlrZT4gPSAoc291cmNlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpID0+IGFueTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wSW5kZXg8VCBleHRlbmRzIFJhbmdlTGlrZT4oc291cmNlOiBULCBpbmRleDogbnVtYmVyKTogbnVtYmVyO1xuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wSW5kZXg8VCBleHRlbmRzIFJhbmdlTGlrZSwgTiBleHRlbmRzIENsYW1wVGhlbjxUPiA9IENsYW1wVGhlbjxUPj4oc291cmNlOiBULCBpbmRleDogbnVtYmVyLCB0aGVuOiBOKTogUmV0dXJuVHlwZTxOPjtcbmV4cG9ydCBmdW5jdGlvbiBjbGFtcEluZGV4PFQgZXh0ZW5kcyBSYW5nZUxpa2UsIE4gZXh0ZW5kcyBDbGFtcFRoZW48VD4gPSBDbGFtcFRoZW48VD4+KHNvdXJjZTogVCwgaW5kZXg6IG51bWJlciwgdGhlbj86IE4pIHtcbiAgICBjb25zdCBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuICAgIGNvbnN0IGFkanVzdCA9IGluZGV4ID4gLTEgPyBpbmRleCA6IChsZW5ndGggKyAoaW5kZXggJSBsZW5ndGgpKTtcbiAgICByZXR1cm4gdGhlbiA/IHRoZW4oc291cmNlLCBhZGp1c3QpIDogYWRqdXN0O1xufVxuXG5sZXQgdG1wOiBudW1iZXI7XG5leHBvcnQgZnVuY3Rpb24gY2xhbXBSYW5nZTxUIGV4dGVuZHMgUmFuZ2VMaWtlPihzb3VyY2U6IFQsIGJlZ2luOiBudW1iZXIgfCB1bmRlZmluZWQsIGVuZDogbnVtYmVyIHwgdW5kZWZpbmVkKTogW251bWJlciwgbnVtYmVyXTtcbmV4cG9ydCBmdW5jdGlvbiBjbGFtcFJhbmdlPFQgZXh0ZW5kcyBSYW5nZUxpa2UsIE4gZXh0ZW5kcyBDbGFtcFJhbmdlVGhlbjxUPiA9IENsYW1wUmFuZ2VUaGVuPFQ+Pihzb3VyY2U6IFQsIGJlZ2luOiBudW1iZXIgfCB1bmRlZmluZWQsIGVuZDogbnVtYmVyIHwgdW5kZWZpbmVkLCB0aGVuOiBOKTogUmV0dXJuVHlwZTxOPjtcbmV4cG9ydCBmdW5jdGlvbiBjbGFtcFJhbmdlPFQgZXh0ZW5kcyBSYW5nZUxpa2UsIE4gZXh0ZW5kcyBDbGFtcFJhbmdlVGhlbjxUPiA9IENsYW1wUmFuZ2VUaGVuPFQ+Pihzb3VyY2U6IFQsIGJlZ2luOiBudW1iZXIgfCB1bmRlZmluZWQsIGVuZDogbnVtYmVyIHwgdW5kZWZpbmVkLCB0aGVuPzogTikge1xuXG4gICAgLy8gQWRqdXN0IGFyZ3Mgc2ltaWxhciB0byBBcnJheS5wcm90b3R5cGUuc2xpY2UuIE5vcm1hbGl6ZSBiZWdpbi9lbmQgdG9cbiAgICAvLyBjbGFtcCBiZXR3ZWVuIDAgYW5kIGxlbmd0aCwgYW5kIHdyYXAgYXJvdW5kIG9uIG5lZ2F0aXZlIGluZGljZXMsIGUuZy5cbiAgICAvLyBzbGljZSgtMSwgNSkgb3Igc2xpY2UoNSwgLTEpXG4gICAgbGV0IHsgbGVuZ3RoOiBsZW4gPSAwIH0gPSBzb3VyY2U7XG4gICAgbGV0IGxocyA9IHR5cGVvZiBiZWdpbiAhPT0gJ251bWJlcicgPyAwIDogYmVnaW47XG4gICAgbGV0IHJocyA9IHR5cGVvZiBlbmQgIT09ICdudW1iZXInID8gbGVuIDogZW5kO1xuICAgIC8vIHdyYXAgYXJvdW5kIG9uIG5lZ2F0aXZlIHN0YXJ0L2VuZCBwb3NpdGlvbnNcbiAgICAobGhzIDwgMCkgJiYgKGxocyA9ICgobGhzICUgbGVuKSArIGxlbikgJSBsZW4pO1xuICAgIChyaHMgPCAwKSAmJiAocmhzID0gKChyaHMgJSBsZW4pICsgbGVuKSAlIGxlbik7XG4gICAgLy8gZW5zdXJlIGxocyA8PSByaHNcbiAgICAocmhzIDwgbGhzKSAmJiAodG1wID0gbGhzLCBsaHMgPSByaHMsIHJocyA9IHRtcCk7XG4gICAgIC8vIGVuc3VyZSByaHMgPD0gbGVuZ3RoXG4gICAgKHJocyA+IGxlbikgJiYgKHJocyA9IGxlbik7XG5cbiAgICByZXR1cm4gdGhlbiA/IHRoZW4oc291cmNlLCBsaHMsIHJocykgOiBbbGhzLCByaHNdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWxlbWVudENvbXBhcmF0b3Ioc2VhcmNoOiBhbnkpIHtcbiAgICAvLyBDb21wYXJlIHByaW1pdGl2ZXNcbiAgICBpZiAoc2VhcmNoID09IG51bGwgfHwgdHlwZW9mIHNlYXJjaCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZTogYW55KSA9PiB2YWx1ZSA9PT0gc2VhcmNoO1xuICAgIH1cbiAgICAvLyBDb21wYXJlIERhdGVzXG4gICAgaWYgKHNlYXJjaCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgY29uc3QgdmFsdWVPZlNlYXJjaCA9IHNlYXJjaC52YWx1ZU9mKCk7XG4gICAgICAgIHJldHVybiAodmFsdWU6IGFueSkgPT4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlID8gKHZhbHVlLnZhbHVlT2YoKSA9PT0gdmFsdWVPZlNlYXJjaCkgOiBmYWxzZTtcbiAgICB9XG4gICAgLy8gQ29tcGFyZSBBcnJheS1saWtlc1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNlYXJjaCkgfHwgQXJyYXlCdWZmZXIuaXNWaWV3KHNlYXJjaCkpIHtcbiAgICAgICAgY29uc3QgbiA9IChzZWFyY2ggYXMgYW55KS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGZucyA9IFtdIGFzICgoeDogYW55KSA9PiBib29sZWFuKVtdO1xuICAgICAgICBmb3IgKGxldCBpID0gLTE7ICsraSA8IG47KSB7XG4gICAgICAgICAgICBmbnNbaV0gPSBjcmVhdGVFbGVtZW50Q29tcGFyYXRvcigoc2VhcmNoIGFzIGFueSlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggIT09IG4pIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIHNlYXJjaCBlbGVtZW50IGlzIGFuIEFycmF5LCBidXQgdGhlXG4gICAgICAgICAgICAvLyB2YWx1ZXMgYXJlIFJvd3Mgb3IgVmVjdG9ycywgZS5nLiBsaXN0LmluZGV4T2YoWydmb28nLCAnYmFyJ10pXG4gICAgICAgICAgICBpZiAoKHZhbHVlIGluc3RhbmNlb2YgUm93KSB8fCAodmFsdWUgaW5zdGFuY2VvZiBWZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoOyArK2kgPCBuOykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShmbnNbaV0oKHZhbHVlIGFzIGFueSkuZ2V0KGkpKSkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoOyArK2kgPCBuOykge1xuICAgICAgICAgICAgICAgIGlmICghKGZuc1tpXSh2YWx1ZVtpXSkpKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIENvbXBhcmUgUm93cyBhbmQgVmVjdG9yc1xuICAgIGlmICgoc2VhcmNoIGluc3RhbmNlb2YgUm93KSB8fCAoc2VhcmNoIGluc3RhbmNlb2YgVmVjdG9yKSkge1xuICAgICAgICBjb25zdCBuID0gc2VhcmNoLmxlbmd0aDtcbiAgICAgICAgY29uc3QgQyA9IHNlYXJjaC5jb25zdHJ1Y3RvciBhcyBhbnk7XG4gICAgICAgIGNvbnN0IGZucyA9IFtdIGFzICgoeDogYW55KSA9PiBib29sZWFuKVtdO1xuICAgICAgICBmb3IgKGxldCBpID0gLTE7ICsraSA8IG47KSB7XG4gICAgICAgICAgICBmbnNbaV0gPSBjcmVhdGVFbGVtZW50Q29tcGFyYXRvcigoc2VhcmNoIGFzIGFueSkuZ2V0KGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgQykpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICBpZiAoISh2YWx1ZS5sZW5ndGggPT09IG4pKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IC0xOyArK2kgPCBuOykge1xuICAgICAgICAgICAgICAgIGlmICghKGZuc1tpXSh2YWx1ZS5nZXQoaSkpKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBDb21wYXJlIG5vbi1lbXB0eSBPYmplY3RzXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNlYXJjaCk7XG4gICAgaWYgKGtleXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBuID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGZucyA9IFtdIGFzICgoeDogYW55KSA9PiBib29sZWFuKVtdO1xuICAgICAgICBmb3IgKGxldCBpID0gLTE7ICsraSA8IG47KSB7XG4gICAgICAgICAgICBmbnNbaV0gPSBjcmVhdGVFbGVtZW50Q29tcGFyYXRvcihzZWFyY2hba2V5c1tpXV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IC0xOyArK2kgPCBuOykge1xuICAgICAgICAgICAgICAgIGlmICghKGZuc1tpXSh2YWx1ZVtrZXlzW2ldXSkpKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIE5vIHZhbGlkIGNvbXBhcmF0b3JcbiAgICByZXR1cm4gKCkgPT4gZmFsc2U7XG59XG4iXX0=
