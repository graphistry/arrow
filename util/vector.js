"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
function clampIndex(source, index, then) {
    const length = source.length;
    const adjust = index > -1 ? index : (length + (index % length));
    return then ? then(source, adjust) : adjust;
}
exports.clampIndex = clampIndex;
let tmp;
function clampRange(source, begin, end, then) {
    // Adjust args similar to Array.prototype.slice. Normalize begin/end to
    // clamp between 0 and length, and wrap around on negative indices, e.g.
    // slice(-1, 5) or slice(5, -1)
    let { length: len = 0 } = source;
    let lhs = typeof begin !== 'number' ? 0 : begin;
    let rhs = typeof end !== 'number' ? len : end;
    // wrap around on negative start/end positions
    (lhs < 0) && (lhs = ((lhs % len) + len) % len);
    (rhs < 0) && (rhs = ((rhs % len) + len) % len);
    // ensure lhs <= rhs
    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);
    // ensure rhs <= length
    (rhs > len) && (rhs = len);
    return then ? then(source, lhs, rhs) : [lhs, rhs];
}
exports.clampRange = clampRange;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvdmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7O0FBUXJCLFNBQWdCLFVBQVUsQ0FBNkQsTUFBUyxFQUFFLEtBQWEsRUFBRSxJQUFRO0lBQ3JILE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDN0IsTUFBTSxNQUFNLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDaEUsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNoRCxDQUFDO0FBSkQsZ0NBSUM7QUFFRCxJQUFJLEdBQVcsQ0FBQztBQUdoQixTQUFnQixVQUFVLENBQXVFLE1BQVMsRUFBRSxLQUF5QixFQUFFLEdBQXVCLEVBQUUsSUFBUTtJQUVwSyx1RUFBdUU7SUFDdkUsd0VBQXdFO0lBQ3hFLCtCQUErQjtJQUMvQixJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUM7SUFDakMsSUFBSSxHQUFHLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNoRCxJQUFJLEdBQUcsR0FBRyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQzlDLDhDQUE4QztJQUM5QyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDL0Msb0JBQW9CO0lBQ3BCLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNoRCx1QkFBdUI7SUFDeEIsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFFM0IsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBakJELGdDQWlCQyIsImZpbGUiOiJ1dGlsL3ZlY3Rvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG50eXBlIFJhbmdlTGlrZSA9IHsgbGVuZ3RoOiBudW1iZXI7IHN0cmlkZT86IG51bWJlciB9O1xudHlwZSBDbGFtcFRoZW48VCBleHRlbmRzIFJhbmdlTGlrZT4gPSAoc291cmNlOiBULCBpbmRleDogbnVtYmVyKSA9PiBhbnk7XG50eXBlIENsYW1wUmFuZ2VUaGVuPFQgZXh0ZW5kcyBSYW5nZUxpa2U+ID0gKHNvdXJjZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKSA9PiBhbnk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcEluZGV4PFQgZXh0ZW5kcyBSYW5nZUxpa2U+KHNvdXJjZTogVCwgaW5kZXg6IG51bWJlcik6IG51bWJlcjtcbmV4cG9ydCBmdW5jdGlvbiBjbGFtcEluZGV4PFQgZXh0ZW5kcyBSYW5nZUxpa2UsIE4gZXh0ZW5kcyBDbGFtcFRoZW48VD4gPSBDbGFtcFRoZW48VD4+KHNvdXJjZTogVCwgaW5kZXg6IG51bWJlciwgdGhlbjogTik6IFJldHVyblR5cGU8Tj47XG5leHBvcnQgZnVuY3Rpb24gY2xhbXBJbmRleDxUIGV4dGVuZHMgUmFuZ2VMaWtlLCBOIGV4dGVuZHMgQ2xhbXBUaGVuPFQ+ID0gQ2xhbXBUaGVuPFQ+Pihzb3VyY2U6IFQsIGluZGV4OiBudW1iZXIsIHRoZW4/OiBOKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICBjb25zdCBhZGp1c3QgPSBpbmRleCA+IC0xID8gaW5kZXggOiAobGVuZ3RoICsgKGluZGV4ICUgbGVuZ3RoKSk7XG4gICAgcmV0dXJuIHRoZW4gPyB0aGVuKHNvdXJjZSwgYWRqdXN0KSA6IGFkanVzdDtcbn1cblxubGV0IHRtcDogbnVtYmVyO1xuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wUmFuZ2U8VCBleHRlbmRzIFJhbmdlTGlrZT4oc291cmNlOiBULCBiZWdpbjogbnVtYmVyIHwgdW5kZWZpbmVkLCBlbmQ6IG51bWJlciB8IHVuZGVmaW5lZCk6IFtudW1iZXIsIG51bWJlcl07XG5leHBvcnQgZnVuY3Rpb24gY2xhbXBSYW5nZTxUIGV4dGVuZHMgUmFuZ2VMaWtlLCBOIGV4dGVuZHMgQ2xhbXBSYW5nZVRoZW48VD4gPSBDbGFtcFJhbmdlVGhlbjxUPj4oc291cmNlOiBULCBiZWdpbjogbnVtYmVyIHwgdW5kZWZpbmVkLCBlbmQ6IG51bWJlciB8IHVuZGVmaW5lZCwgdGhlbjogTik6IFJldHVyblR5cGU8Tj47XG5leHBvcnQgZnVuY3Rpb24gY2xhbXBSYW5nZTxUIGV4dGVuZHMgUmFuZ2VMaWtlLCBOIGV4dGVuZHMgQ2xhbXBSYW5nZVRoZW48VD4gPSBDbGFtcFJhbmdlVGhlbjxUPj4oc291cmNlOiBULCBiZWdpbjogbnVtYmVyIHwgdW5kZWZpbmVkLCBlbmQ6IG51bWJlciB8IHVuZGVmaW5lZCwgdGhlbj86IE4pIHtcblxuICAgIC8vIEFkanVzdCBhcmdzIHNpbWlsYXIgdG8gQXJyYXkucHJvdG90eXBlLnNsaWNlLiBOb3JtYWxpemUgYmVnaW4vZW5kIHRvXG4gICAgLy8gY2xhbXAgYmV0d2VlbiAwIGFuZCBsZW5ndGgsIGFuZCB3cmFwIGFyb3VuZCBvbiBuZWdhdGl2ZSBpbmRpY2VzLCBlLmcuXG4gICAgLy8gc2xpY2UoLTEsIDUpIG9yIHNsaWNlKDUsIC0xKVxuICAgIGxldCB7IGxlbmd0aDogbGVuID0gMCB9ID0gc291cmNlO1xuICAgIGxldCBsaHMgPSB0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInID8gMCA6IGJlZ2luO1xuICAgIGxldCByaHMgPSB0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyA/IGxlbiA6IGVuZDtcbiAgICAvLyB3cmFwIGFyb3VuZCBvbiBuZWdhdGl2ZSBzdGFydC9lbmQgcG9zaXRpb25zXG4gICAgKGxocyA8IDApICYmIChsaHMgPSAoKGxocyAlIGxlbikgKyBsZW4pICUgbGVuKTtcbiAgICAocmhzIDwgMCkgJiYgKHJocyA9ICgocmhzICUgbGVuKSArIGxlbikgJSBsZW4pO1xuICAgIC8vIGVuc3VyZSBsaHMgPD0gcmhzXG4gICAgKHJocyA8IGxocykgJiYgKHRtcCA9IGxocywgbGhzID0gcmhzLCByaHMgPSB0bXApO1xuICAgICAvLyBlbnN1cmUgcmhzIDw9IGxlbmd0aFxuICAgIChyaHMgPiBsZW4pICYmIChyaHMgPSBsZW4pO1xuXG4gICAgcmV0dXJuIHRoZW4gPyB0aGVuKHNvdXJjZSwgbGhzLCByaHMpIDogW2xocywgcmhzXTtcbn1cbiJdfQ==
