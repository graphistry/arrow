"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const bit_1 = require("./bit");
const text_encoding_utf_8_1 = require("text-encoding-utf-8");
const writeNumeric64Value = writeFixedWidthValue.bind(null, 64);
const writeNumeric128Value = writeFixedWidthValue.bind(null, 128);
const utf8Encoder = new text_encoding_utf_8_1.TextEncoder();
const stride1Encode = writeValidityLayout.bind(null, writeFixedWidthLayoutWithStride.bind(null, 1));
const stride1FixedWidth = writeFixedWidthLayout.bind(null, writeValidityLayout.bind(null, stride1Encode));
const stride2FixedWidth = writeFixedWidthLayout.bind(null, writeValidityLayout.bind(null, writeFixedWidthLayoutWithStride.bind(null, 2)));
const stride4FixedWidth = writeFixedWidthLayout.bind(null, writeValidityLayout.bind(null, writeFixedWidthLayoutWithStride.bind(null, 4)));
exports.writeBools = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeBooleanValue), Uint8Array);
exports.writeInt8s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Int8Array);
exports.writeInt16s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Int16Array);
exports.writeInt32s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Int32Array);
exports.writeInt64s = writeTypedLayout.bind(null, stride2FixedWidth.bind(null, writeNumeric64Value), Int32Array);
exports.writeUint8s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Uint8Array);
exports.writeUint16s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Uint16Array);
exports.writeUint32s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Uint32Array);
exports.writeUint64s = writeTypedLayout.bind(null, stride2FixedWidth.bind(null, writeNumeric64Value), Uint32Array);
exports.writeDecimals = writeTypedLayout.bind(null, stride4FixedWidth.bind(null, writeNumeric128Value), Uint32Array);
exports.writeFloat32s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Float32Array);
exports.writeFloat64s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Float64Array);
exports.writeVariableWidth = writeVariableWidthLayout.bind(null, stride1Encode);
exports.writeBinary = writeTypedLayout.bind(null, exports.writeVariableWidth.bind(null, writeBinaryValue));
exports.writeUtf8s = writeTypedLayout.bind(null, exports.writeVariableWidth.bind(null, writeUtf8Value), Uint8Array);
exports.writeDictionaryEncoded = writeDictionaryLayout.bind(null, stride1Encode);
exports.writeDictionaryEncodedBools = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeBooleanValue), Uint8Array);
exports.writeDictionaryEncodedInt8s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Int8Array);
exports.writeDictionaryEncodedInt16s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Int16Array);
exports.writeDictionaryEncodedInt32s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Int32Array);
exports.writeDictionaryEncodedInt64s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride2FixedWidth, writeNumeric64Value), Int32Array);
exports.writeDictionaryEncodedUint8s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Uint8Array);
exports.writeDictionaryEncodedUint16s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Uint16Array);
exports.writeDictionaryEncodedUint32s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Uint32Array);
exports.writeDictionaryEncodedUint64s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride2FixedWidth, writeNumeric64Value), Uint32Array);
exports.writeDictionaryEncodedDecimals = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride4FixedWidth, writeNumeric128Value), Uint32Array);
exports.writeDictionaryEncodedFloat32s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Float32Array);
exports.writeDictionaryEncodedFloat64s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Float64Array);
exports.writeDictionaryEncodedVariableWidth = writeDictionaryLayout.bind(null, exports.writeVariableWidth);
exports.writeDictionaryEncodedBinary = writeTypedLayout.bind(null, exports.writeDictionaryEncodedVariableWidth.bind(null, writeBinaryValue));
exports.writeDictionaryEncodedUtf8s = writeTypedLayout.bind(null, exports.writeDictionaryEncodedVariableWidth.bind(null, writeUtf8Value), Uint8Array);
function writeFixedWidthLayoutWithStride(stride, writeValue, values) {
    let index = -stride;
    const data = [];
    const length = values.length;
    while ((index += stride) < length) {
        writeValue(values, data, index);
    }
    return { data: data };
}
function writeFixedWidthLayout(writeLayout, writeValue, values, nulls) {
    return writeLayout(writeValue, values, nulls);
}
function writeValidityLayout(writeLayout, writeValue, values, nulls) {
    let nullCount = 0;
    let nullsLength = nulls && nulls.length || 0;
    let validity = new Uint8Array(bit_1.align(values.length >>> 3, 8)).fill(255);
    return Object.assign({}, writeLayout(writeValueOrValidity, values), { nullCount, validity: (nullCount > 0 && validity) || new Uint8Array(0) });
    function writeValueOrValidity(src, dst, index) {
        writeValue(src, dst, index);
        let i = -1, x = src[index];
        let isNull = x === null || x === undefined;
        while (!isNull && ++i < nullsLength) {
            isNull = x === nulls[i];
        }
        if (isNull) {
            nullCount++;
            validity[index >> 3] &= ~(1 << (index % 8));
        }
    }
}
function writeVariableWidthLayout(writeLayout, writeValue, values, nulls) {
    let offsets = [0], offsetsIndex = 0;
    return Object.assign({}, writeLayout(writeValueAndOffset, values, nulls), { offsets });
    function writeValueAndOffset(src, dst, index) {
        if (!writeValue(src, dst, index)) {
            offsets[++offsetsIndex] = dst.length;
        }
    }
}
function writeDictionaryLayout(writeLayout, writeValue, values, nulls) {
    let keys = [], keysIndex = 0, keysMap = Object.create(null);
    return Object.assign({}, writeLayout(writeKeysOrValues, values, nulls), { keys });
    function writeKeysOrValues(src, dst, index) {
        const x = src[index];
        if (x in keysMap) {
            return (keys[index] = keysMap[x]) || true;
        }
        else if (!writeValue(src, dst, index)) {
            keys[index] = keysMap[x] = keysIndex++;
        }
    }
}
function writeTypedLayout(writeBuffers, ArrayBufferView, values, nulls) {
    const result = writeBuffers(values, nulls);
    result.data = new ArrayBufferView(result.data);
    return result;
}
function writeBooleanValue(src, dst, index) {
    if (src[index]) {
        let i = index >>> 3;
        let b = dst[i] || 0;
        dst[i] = b | 1 << (index % 8);
    }
}
function writeNumericValue(src, dst, index) {
    dst[index] = +src[index];
}
function writeFixedWidthValue(bitWidth, src, dst, index) {
    const bytesLen = bitWidth / 32;
    for (let i = -1; ++i < bytesLen;) {
        dst[index + i] = src[index + i];
    }
}
function writeUtf8Value(src, dst, index) {
    dst.push(...utf8Encoder.encode(src[index]));
}
function writeBinaryValue(src, dst, index) {
    dst.push(...src[index]);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
