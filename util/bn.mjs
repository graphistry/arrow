// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { toArrayBufferView } from './buffer';
const BigNumNMixin = {
    toJSON() { return `"${bignumToString(this)}"`; },
    valueOf() { return bignumToNumber(this); },
    toString() { return bignumToString(this); },
    [Symbol.toPrimitive](hint) {
        if (hint === 'number') {
            return bignumToNumber(this);
        }
        /** @suppress {missingRequire} */
        return hint === 'string' || typeof BigInt !== 'function' ?
            bignumToString(this) : BigInt(bignumToString(this));
    }
};
/** @ignore */
const SignedBigNumNMixin = Object.assign({}, BigNumNMixin, { signed: true, constructor: undefined });
/** @ignore */
const UnsignedBigNumNMixin = Object.assign({}, BigNumNMixin, { signed: false, constructor: undefined });
/** @ignore */
export class BN {
    constructor(input, signed = input instanceof Int32Array) {
        return BN.new(input, signed);
    }
    /** @nocollapse */
    static new(input, signed = (input instanceof Int8Array || input instanceof Int16Array || input instanceof Int32Array)) {
        return (signed === true) ? BN.signed(input) : BN.unsigned(input);
    }
    /** @nocollapse */
    static signed(input) {
        const Ctor = ArrayBuffer.isView(input) ? input.constructor : Int32Array;
        const { buffer, byteOffset, length } = toArrayBufferView(Ctor, input);
        const bn = new Ctor(buffer, byteOffset, length);
        return Object.assign(bn, SignedBigNumNMixin);
    }
    /** @nocollapse */
    static unsigned(input) {
        const Ctor = ArrayBuffer.isView(input) ? input.constructor : Uint32Array;
        const { buffer, byteOffset, length } = toArrayBufferView(Ctor, input);
        const bn = new Ctor(buffer, byteOffset, length);
        return Object.assign(bn, UnsignedBigNumNMixin);
    }
}
/** @ignore */
function bignumToNumber({ buffer, byteOffset, length }) {
    let int64 = 0;
    let words = new Uint32Array(buffer, byteOffset, length);
    for (let i = 0, n = words.length; i < n;) {
        int64 += words[i++] + (words[i++] * (i ** 32));
        // int64 += (words[i++] >>> 0) + (words[i++] * (i ** 32));
    }
    return int64;
}
/** @ignore */
function bignumToString({ buffer, byteOffset, length }) {
    let string = '', i = -1;
    let base64 = new Uint32Array(2);
    let base32 = new Uint16Array(buffer, byteOffset, length * 2);
    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);
    let n = base32.length - 1;
    do {
        for (base64[0] = base32[i = 0]; i < n;) {
            base32[i++] = base64[1] = base64[0] / 10;
            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];
        }
        base32[i] = base64[1] = base64[0] / 10;
        base64[0] = base64[0] - base64[1] * 10;
        string = `${base64[0]}${string}`;
    } while (checks[0] || checks[1] || checks[2] || checks[3]);
    return string ? string : `0`;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
