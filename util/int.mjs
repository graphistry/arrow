// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
const carryBit16 = 1 << 16;
function intAsHex(value) {
    if (value < 0) {
        value = 0xFFFFFFFF + value + 1;
    }
    return `0x${value.toString(16)}`;
}
const kInt32DecimalDigits = 8;
const kPowersOfTen = [1,
    10,
    100,
    1000,
    10000,
    100000,
    1000000,
    10000000,
    100000000];
export class BaseInt64 {
    constructor(buffer) {
        this.buffer = buffer;
    }
    high() { return this.buffer[1]; }
    low() { return this.buffer[0]; }
    _times(other) {
        // Break the left and right numbers into 16 bit chunks
        // so that we can multiply them without overflow.
        const L = new Uint32Array([
            this.buffer[1] >>> 16,
            this.buffer[1] & 0xFFFF,
            this.buffer[0] >>> 16,
            this.buffer[0] & 0xFFFF
        ]);
        const R = new Uint32Array([
            other.buffer[1] >>> 16,
            other.buffer[1] & 0xFFFF,
            other.buffer[0] >>> 16,
            other.buffer[0] & 0xFFFF
        ]);
        let product = L[3] * R[3];
        this.buffer[0] = product & 0xFFFF;
        let sum = product >>> 16;
        product = L[2] * R[3];
        sum += product;
        product = (L[3] * R[2]) >>> 0;
        sum += product;
        this.buffer[0] += sum << 16;
        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);
        this.buffer[1] += sum >>> 16;
        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];
        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;
        return this;
    }
    _plus(other) {
        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;
        this.buffer[1] += other.buffer[1];
        if (sum < (this.buffer[0] >>> 0)) {
            ++this.buffer[1];
        }
        this.buffer[0] = sum;
    }
    lessThan(other) {
        return this.buffer[1] < other.buffer[1] ||
            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);
    }
    equals(other) {
        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];
    }
    greaterThan(other) {
        return other.lessThan(this);
    }
    hex() {
        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;
    }
}
export class Uint64 extends BaseInt64 {
    times(other) {
        this._times(other);
        return this;
    }
    plus(other) {
        this._plus(other);
        return this;
    }
    static from(val, out_buffer = new Uint32Array(2)) {
        return Uint64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);
    }
    static fromNumber(num, out_buffer = new Uint32Array(2)) {
        // Always parse numbers as strings - pulling out high and low bits
        // directly seems to lose precision sometimes
        // For example:
        //     > -4613034156400212000 >>> 0
        //     721782784
        // The correct lower 32-bits are 721782752
        return Uint64.fromString(num.toString(), out_buffer);
    }
    static fromString(str, out_buffer = new Uint32Array(2)) {
        const length = str.length;
        let out = new Uint64(out_buffer);
        for (let posn = 0; posn < length;) {
            const group = kInt32DecimalDigits < length - posn ?
                kInt32DecimalDigits : length - posn;
            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));
            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));
            out.times(multiple);
            out.plus(chunk);
            posn += group;
        }
        return out;
    }
    static convertArray(values) {
        const data = new Uint32Array(values.length * 2);
        for (let i = -1, n = values.length; ++i < n;) {
            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));
        }
        return data;
    }
    static multiply(left, right) {
        let rtrn = new Uint64(new Uint32Array(left.buffer));
        return rtrn.times(right);
    }
    static add(left, right) {
        let rtrn = new Uint64(new Uint32Array(left.buffer));
        return rtrn.plus(right);
    }
}
export class Int64 extends BaseInt64 {
    negate() {
        this.buffer[0] = ~this.buffer[0] + 1;
        this.buffer[1] = ~this.buffer[1];
        if (this.buffer[0] == 0) {
            ++this.buffer[1];
        }
        return this;
    }
    times(other) {
        this._times(other);
        return this;
    }
    plus(other) {
        this._plus(other);
        return this;
    }
    lessThan(other) {
        // force high bytes to be signed
        const this_high = this.buffer[1] << 0;
        const other_high = other.buffer[1] << 0;
        return this_high < other_high ||
            (this_high === other_high && this.buffer[0] < other.buffer[0]);
    }
    static from(val, out_buffer = new Uint32Array(2)) {
        return Int64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);
    }
    static fromNumber(num, out_buffer = new Uint32Array(2)) {
        // Always parse numbers as strings - pulling out high and low bits
        // directly seems to lose precision sometimes
        // For example:
        //     > -4613034156400212000 >>> 0
        //     721782784
        // The correct lower 32-bits are 721782752
        return Int64.fromString(num.toString(), out_buffer);
    }
    static fromString(str, out_buffer = new Uint32Array(2)) {
        // TODO: Assert that out_buffer is 0 and length = 2
        const negate = str.startsWith('-');
        const length = str.length;
        let out = new Int64(out_buffer);
        for (let posn = negate ? 1 : 0; posn < length;) {
            const group = kInt32DecimalDigits < length - posn ?
                kInt32DecimalDigits : length - posn;
            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));
            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));
            out.times(multiple);
            out.plus(chunk);
            posn += group;
        }
        return negate ? out.negate() : out;
    }
    static convertArray(values) {
        const data = new Uint32Array(values.length * 2);
        for (let i = -1, n = values.length; ++i < n;) {
            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));
        }
        return data;
    }
    static multiply(left, right) {
        let rtrn = new Int64(new Uint32Array(left.buffer));
        return rtrn.times(right);
    }
    static add(left, right) {
        let rtrn = new Int64(new Uint32Array(left.buffer));
        return rtrn.plus(right);
    }
}
export class Int128 {
    constructor(buffer) {
        this.buffer = buffer;
        // buffer[3] MSB (high)
        // buffer[2]
        // buffer[1]
        // buffer[0] LSB (low)
    }
    high() {
        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
    }
    low() {
        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));
    }
    negate() {
        this.buffer[0] = ~this.buffer[0] + 1;
        this.buffer[1] = ~this.buffer[1];
        this.buffer[2] = ~this.buffer[2];
        this.buffer[3] = ~this.buffer[3];
        if (this.buffer[0] == 0) {
            ++this.buffer[1];
        }
        if (this.buffer[1] == 0) {
            ++this.buffer[2];
        }
        if (this.buffer[2] == 0) {
            ++this.buffer[3];
        }
        return this;
    }
    times(other) {
        // Break the left and right numbers into 32 bit chunks
        // so that we can multiply them without overflow.
        const L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));
        const L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));
        const L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));
        const L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));
        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));
        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));
        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));
        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));
        let product = Uint64.multiply(L3, R3);
        this.buffer[0] = product.low();
        let sum = new Uint64(new Uint32Array([product.high(), 0]));
        product = Uint64.multiply(L2, R3);
        sum.plus(product);
        product = Uint64.multiply(L3, R2);
        sum.plus(product);
        this.buffer[1] = sum.low();
        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);
        this.buffer[2] = sum.high();
        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
        high.plus(Uint64.multiply(L1, R3))
            .plus(Uint64.multiply(L2, R2))
            .plus(Uint64.multiply(L3, R1));
        this.buffer[3] += Uint64.multiply(L0, R3)
            .plus(Uint64.multiply(L1, R2))
            .plus(Uint64.multiply(L2, R1))
            .plus(Uint64.multiply(L3, R0)).low();
        return this;
    }
    plus(other) {
        let sums = new Uint32Array(4);
        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;
        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;
        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;
        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;
        if (sums[0] < (this.buffer[0] >>> 0)) {
            ++sums[1];
        }
        if (sums[1] < (this.buffer[1] >>> 0)) {
            ++sums[2];
        }
        if (sums[2] < (this.buffer[2] >>> 0)) {
            ++sums[3];
        }
        this.buffer[3] = sums[3];
        this.buffer[2] = sums[2];
        this.buffer[1] = sums[1];
        this.buffer[0] = sums[0];
        return this;
    }
    hex() {
        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;
    }
    static multiply(left, right) {
        let rtrn = new Int128(new Uint32Array(left.buffer));
        return rtrn.times(right);
    }
    static add(left, right) {
        let rtrn = new Int128(new Uint32Array(left.buffer));
        return rtrn.plus(right);
    }
    static from(val, out_buffer = new Uint32Array(4)) {
        return Int128.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);
    }
    static fromNumber(num, out_buffer = new Uint32Array(4)) {
        // Always parse numbers as strings - pulling out high and low bits
        // directly seems to lose precision sometimes
        // For example:
        //     > -4613034156400212000 >>> 0
        //     721782784
        // The correct lower 32-bits are 721782752
        return Int128.fromString(num.toString(), out_buffer);
    }
    static fromString(str, out_buffer = new Uint32Array(4)) {
        // TODO: Assert that out_buffer is 0 and length = 4
        const negate = str.startsWith('-');
        const length = str.length;
        let out = new Int128(out_buffer);
        for (let posn = negate ? 1 : 0; posn < length;) {
            const group = kInt32DecimalDigits < length - posn ?
                kInt32DecimalDigits : length - posn;
            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));
            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));
            out.times(multiple);
            out.plus(chunk);
            posn += group;
        }
        return negate ? out.negate() : out;
    }
    static convertArray(values) {
        // TODO: Distinguish between string and number at compile-time
        const data = new Uint32Array(values.length * 4);
        for (let i = -1, n = values.length; ++i < n;) {
            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));
        }
        return data;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsRUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsTUFBTSxFQUFFLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3RCxNQUFNLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTdELE1BQU0sRUFBRSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsTUFBTSxFQUFFLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3RCxNQUFNLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdELE1BQU0sRUFBRSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFN0QsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFL0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxNQUFNLENBQUMs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QUcsQ0FBQyxDQUFDLENBQUM7UUFDaEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUc7WUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEY7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0oiLCJmaWxlIjoidXRpbC9pbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuY29uc3QgY2FycnlCaXQxNiA9IDEgPDwgMTY7XG5cbmZ1bmN0aW9uIGludEFzSGV4KHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgdmFsdWUgPSAweEZGRkZGRkZGICsgdmFsdWUgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gYDB4JHt2YWx1ZS50b1N0cmluZygxNil9YDtcbn1cblxuY29uc3Qga0ludDMyRGVjaW1hbERpZ2l0cyA9IDg7XG5jb25zdCBrUG93ZXJzT2ZUZW4gPSBbMSxcbiAgICAgICAgICAgICAgICAgICAgICAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAxMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAxMDAwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgMTAwMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAxMDAwMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAxMDAwMDAwMDBdO1xuXG5leHBvcnQgY2xhc3MgQmFzZUludDY0IHtcbiAgICBjb25zdHJ1Y3RvciAocHJvdGVjdGVkIGJ1ZmZlcjogVWludDMyQXJyYXkpIHt9XG5cbiAgICBoaWdoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmJ1ZmZlclsxXTsgfVxuICAgIGxvdyAoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuYnVmZmVyWzBdOyB9XG5cbiAgICBwcm90ZWN0ZWQgX3RpbWVzKG90aGVyOiBCYXNlSW50NjQpIHtcbiAgICAgICAgLy8gQnJlYWsgdGhlIGxlZnQgYW5kIHJpZ2h0IG51bWJlcnMgaW50byAxNiBiaXQgY2h1bmtzXG4gICAgICAgIC8vIHNvIHRoYXQgd2UgY2FuIG11bHRpcGx5IHRoZW0gd2l0aG91dCBvdmVyZmxvdy5cbiAgICAgICAgY29uc3QgTCA9IG5ldyBVaW50MzJBcnJheShbXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlclsxXSA+Pj4gMTYsXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlclsxXSAmIDB4RkZGRixcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyWzBdID4+PiAxNixcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyWzBdICYgMHhGRkZGXG4gICAgICAgIF0pO1xuXG4gICAgICAgIGNvbnN0IFIgPSBuZXcgVWludDMyQXJyYXkoW1xuICAgICAgICAgICAgb3RoZXIuYnVmZmVyWzFdID4+PiAxNixcbiAgICAgICAgICAgIG90aGVyLmJ1ZmZlclsxXSAmIDB4RkZGRixcbiAgICAgICAgICAgIG90aGVyLmJ1ZmZlclswXSA+Pj4gMTYsXG4gICAgICAgICAgICBvdGhlci5idWZmZXJbMF0gJiAweEZGRkZcbiAgICAgICAgXSk7XG5cbiAgICAgICAgbGV0IHByb2R1Y3QgPSBMWzNdICogUlszXTtcbiAgICAgICAgdGhpcy5idWZmZXJbMF0gPSBwcm9kdWN0ICYgMHhGRkZGO1xuXG4gICAgICAgIGxldCBzdW0gPSBwcm9kdWN0ID4+PiAxNjtcblxuICAgICAgICBwcm9kdWN0ID0gTFsyXSAqIFJbM107XG4gICAgICAgIHN1bSArPSBwcm9kdWN0O1xuXG4gICAgICAgIHByb2R1Y3QgPSAoTFszXSAqIFJbMl0pID4+PiAwO1xuICAgICAgICBzdW0gKz0gcHJvZHVjdDtcblxuICAgICAgICB0aGlzLmJ1ZmZlclswXSArPSBzdW0gPDwgMTY7XG5cbiAgICAgICAgdGhpcy5idWZmZXJbMV0gPSAoc3VtID4+PiAwIDwgcHJvZHVjdCA/IGNhcnJ5Qml0MTYgOiAwKTtcblxuICAgICAgICB0aGlzLmJ1ZmZlclsxXSArPSBzdW0gPj4+IDE2O1xuICAgICAgICB0aGlzLmJ1ZmZlclsxXSArPSBMWzFdICogUlszXSArIExbMl0gKiBSWzJdICsgTFszXSAqIFJbMV07XG4gICAgICAgIHRoaXMuYnVmZmVyWzFdICs9IChMWzBdICogUlszXSArIExbMV0gKiBSWzJdICsgTFsyXSAqIFJbMV0gKyBMWzNdICogUlswXSkgPDwgMTY7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX3BsdXMob3RoZXI6IEJhc2VJbnQ2NCkge1xuICAgICAgICBjb25zdCBzdW0gPSAodGhpcy5idWZmZXJbMF0gKyBvdGhlci5idWZmZXJbMF0pID4+PiAwO1xuICAgICAgICB0aGlzLmJ1ZmZlclsxXSArPSBvdGhlci5idWZmZXJbMV07XG4gICAgICAgIGlmIChzdW0gPCAodGhpcy5idWZmZXJbMF0gPj4+IDApKSB7XG4gICAgICAgICAgKyt0aGlzLmJ1ZmZlclsxXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1ZmZlclswXSA9IHN1bTtcbiAgICB9XG5cbiAgICBsZXNzVGhhbihvdGhlcjogQmFzZUludDY0KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlclsxXSA8IG90aGVyLmJ1ZmZlclsxXSB8fFxuICAgICAgICAgICAgKHRoaXMuYnVmZmVyWzFdID09PSBvdGhlci5idWZmZXJbMV0gJiYgdGhpcy5idWZmZXJbMF0gPCBvdGhlci5idWZmZXJbMF0pO1xuICAgIH1cblxuICAgIGVxdWFscyhvdGhlcjogQmFzZUludDY0KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlclsxXSA9PT0gb3RoZXIuYnVmZmVyWzFdICYmIHRoaXMuYnVmZmVyWzBdID09IG90aGVyLmJ1ZmZlclswXTtcbiAgICB9XG5cbiAgICBncmVhdGVyVGhhbihvdGhlcjogQmFzZUludDY0KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBvdGhlci5sZXNzVGhhbih0aGlzKTtcbiAgICB9XG5cbiAgICBoZXgoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke2ludEFzSGV4KHRoaXMuYnVmZmVyWzFdKX0gJHtpbnRBc0hleCh0aGlzLmJ1ZmZlclswXSl9YDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVaW50NjQgZXh0ZW5kcyBCYXNlSW50NjQge1xuICAgIHRpbWVzKG90aGVyOiBVaW50NjQpOiBVaW50NjQge1xuICAgICAgICB0aGlzLl90aW1lcyhvdGhlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHBsdXMob3RoZXI6IFVpbnQ2NCk6IFVpbnQ2NCB7XG4gICAgICAgIHRoaXMuX3BsdXMob3RoZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbSh2YWw6IGFueSwgb3V0X2J1ZmZlciA9IG5ldyBVaW50MzJBcnJheSgyKSk6IFVpbnQ2NCB7XG4gICAgICAgIHJldHVybiBVaW50NjQuZnJvbVN0cmluZyhcbiAgICAgICAgICAgIHR5cGVvZih2YWwpID09PSAnc3RyaW5nJyA/IHZhbCA6IHZhbC50b1N0cmluZygpLFxuICAgICAgICAgICAgb3V0X2J1ZmZlclxuICAgICAgICApO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tTnVtYmVyKG51bTogbnVtYmVyLCBvdXRfYnVmZmVyID0gbmV3IFVpbnQzMkFycmF5KDIpKTogVWludDY0IHtcbiAgICAgICAgLy8gQWx3YXlzIHBhcnNlIG51bWJlcnMgYXMgc3RyaW5ncyAtIHB1bGxpbmcgb3V0IGhpZ2ggYW5kIGxvdyBiaXRzXG4gICAgICAgIC8vIGRpcmVjdGx5IHNlZW1zIHRvIGxvc2UgcHJlY2lzaW9uIHNvbWV0aW1lc1xuICAgICAgICAvLyBGb3IgZXhhbXBsZTpcbiAgICAgICAgLy8gICAgID4gLTQ2MTMwMzQxNTY0MDAyMTIwMDAgPj4+IDBcbiAgICAgICAgLy8gICAgIDcyMTc4Mjc4NFxuICAgICAgICAvLyBUaGUgY29ycmVjdCBsb3dlciAzMi1iaXRzIGFyZSA3MjE3ODI3NTJcbiAgICAgICAgcmV0dXJuIFVpbnQ2NC5mcm9tU3RyaW5nKG51bS50b1N0cmluZygpLCBvdXRfYnVmZmVyKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVN0cmluZyhzdHI6IHN0cmluZywgb3V0X2J1ZmZlciA9IG5ldyBVaW50MzJBcnJheSgyKSk6IFVpbnQ2NCB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHN0ci5sZW5ndGg7XG5cbiAgICAgICAgbGV0IG91dCA9IG5ldyBVaW50NjQob3V0X2J1ZmZlcik7XG4gICAgICAgIGZvciAobGV0IHBvc24gPSAwOyBwb3NuIDwgbGVuZ3RoOykge1xuICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSBrSW50MzJEZWNpbWFsRGlnaXRzIDwgbGVuZ3RoIC0gcG9zbiA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGtJbnQzMkRlY2ltYWxEaWdpdHMgOiBsZW5ndGggLSBwb3NuO1xuICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBuZXcgVWludDY0KG5ldyBVaW50MzJBcnJheShbcGFyc2VJbnQoc3RyLnN1YnN0cihwb3NuLCBncm91cCksIDEwKSwgMF0pKTtcbiAgICAgICAgICAgIGNvbnN0IG11bHRpcGxlID0gbmV3IFVpbnQ2NChuZXcgVWludDMyQXJyYXkoW2tQb3dlcnNPZlRlbltncm91cF0sIDBdKSk7XG5cbiAgICAgICAgICAgIG91dC50aW1lcyhtdWx0aXBsZSk7XG4gICAgICAgICAgICBvdXQucGx1cyhjaHVuayk7XG5cbiAgICAgICAgICAgIHBvc24gKz0gZ3JvdXA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIHN0YXRpYyBjb252ZXJ0QXJyYXkodmFsdWVzOiAoc3RyaW5nfG51bWJlcilbXSk6IFVpbnQzMkFycmF5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50MzJBcnJheSh2YWx1ZXMubGVuZ3RoICogMik7XG4gICAgICAgIGZvciAobGV0IGkgPSAtMSwgbiA9IHZhbHVlcy5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgICAgICBVaW50NjQuZnJvbSh2YWx1ZXNbaV0sIG5ldyBVaW50MzJBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0ICsgMiAqIGkgKiA0LCAyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgc3RhdGljIG11bHRpcGx5KGxlZnQ6IFVpbnQ2NCwgcmlnaHQ6IFVpbnQ2NCk6IFVpbnQ2NCB7XG4gICAgICAgIGxldCBydHJuID0gbmV3IFVpbnQ2NChuZXcgVWludDMyQXJyYXkobGVmdC5idWZmZXIpKTtcbiAgICAgICAgcmV0dXJuIHJ0cm4udGltZXMocmlnaHQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGQobGVmdDogVWludDY0LCByaWdodDogVWludDY0KTogVWludDY0IHtcbiAgICAgICAgbGV0IHJ0cm4gPSBuZXcgVWludDY0KG5ldyBVaW50MzJBcnJheShsZWZ0LmJ1ZmZlcikpO1xuICAgICAgICByZXR1cm4gcnRybi5wbHVzKHJpZ2h0KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnQ2NCBleHRlbmRzIEJhc2VJbnQ2NCB7XG4gICAgbmVnYXRlKCk6IEludDY0IHtcbiAgICAgICAgdGhpcy5idWZmZXJbMF0gPSB+dGhpcy5idWZmZXJbMF0gKyAxO1xuICAgICAgICB0aGlzLmJ1ZmZlclsxXSA9IH50aGlzLmJ1ZmZlclsxXTtcblxuICAgICAgICBpZiAodGhpcy5idWZmZXJbMF0gPT0gMCkgeyArK3RoaXMuYnVmZmVyWzFdOyB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRpbWVzKG90aGVyOiBJbnQ2NCk6IEludDY0IHtcbiAgICAgICAgdGhpcy5fdGltZXMob3RoZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwbHVzKG90aGVyOiBJbnQ2NCk6IEludDY0IHtcbiAgICAgICAgdGhpcy5fcGx1cyhvdGhlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGxlc3NUaGFuKG90aGVyOiBJbnQ2NCk6IGJvb2xlYW4ge1xuICAgICAgICAvLyBmb3JjZSBoaWdoIGJ5dGVzIHRvIGJlIHNpZ25lZFxuICAgICAgICBjb25zdCB0aGlzX2hpZ2ggPSB0aGlzLmJ1ZmZlclsxXSA8PCAwO1xuICAgICAgICBjb25zdCBvdGhlcl9oaWdoID0gb3RoZXIuYnVmZmVyWzFdIDw8IDA7XG4gICAgICAgIHJldHVybiB0aGlzX2hpZ2ggPCBvdGhlcl9oaWdoIHx8XG4gICAgICAgICAgICAodGhpc19oaWdoID09PSBvdGhlcl9oaWdoICYmIHRoaXMuYnVmZmVyWzBdIDwgb3RoZXIuYnVmZmVyWzBdKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbSh2YWw6IGFueSwgb3V0X2J1ZmZlciA9IG5ldyBVaW50MzJBcnJheSgyKSk6IEludDY0IHtcbiAgICAgICAgcmV0dXJuIEludDY0LmZyb21TdHJpbmcoXG4gICAgICAgICAgICB0eXBlb2YodmFsKSA9PT0gJ3N0cmluZycgPyB2YWwgOiB2YWwudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIG91dF9idWZmZXJcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbU51bWJlcihudW06IG51bWJlciwgb3V0X2J1ZmZlciA9IG5ldyBVaW50MzJBcnJheSgyKSk6IEludDY0IHtcbiAgICAgICAgLy8gQWx3YXlzIHBhcnNlIG51bWJlcnMgYXMgc3RyaW5ncyAtIHB1bGxpbmcgb3V0IGhpZ2ggYW5kIGxvdyBiaXRzXG4gICAgICAgIC8vIGRpcmVjdGx5IHNlZW1zIHRvIGxvc2UgcHJlY2lzaW9uIHNvbWV0aW1lc1xuICAgICAgICAvLyBGb3IgZXhhbXBsZTpcbiAgICAgICAgLy8gICAgID4gLTQ2MTMwMzQxNTY0MDAyMTIwMDAgPj4+IDBcbiAgICAgICAgLy8gICAgIDcyMTc4Mjc4NFxuICAgICAgICAvLyBUaGUgY29ycmVjdCBsb3dlciAzMi1iaXRzIGFyZSA3MjE3ODI3NTJcbiAgICAgICAgcmV0dXJuIEludDY0LmZyb21TdHJpbmcobnVtLnRvU3RyaW5nKCksIG91dF9idWZmZXIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKHN0cjogc3RyaW5nLCBvdXRfYnVmZmVyID0gbmV3IFVpbnQzMkFycmF5KDIpKTogSW50NjQge1xuICAgICAgICAvLyBUT0RPOiBBc3NlcnQgdGhhdCBvdXRfYnVmZmVyIGlzIDAgYW5kIGxlbmd0aCA9IDJcbiAgICAgICAgY29uc3QgbmVnYXRlID0gc3RyLnN0YXJ0c1dpdGgoJy0nKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gc3RyLmxlbmd0aDtcblxuICAgICAgICBsZXQgb3V0ID0gbmV3IEludDY0KG91dF9idWZmZXIpO1xuICAgICAgICBmb3IgKGxldCBwb3NuID0gbmVnYXRlID8gMSA6IDA7IHBvc24gPCBsZW5ndGg7KSB7XG4gICAgICAgICAgICBjb25zdCBncm91cCA9IGtJbnQzMkRlY2ltYWxEaWdpdHMgPCBsZW5ndGggLSBwb3NuID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAga0ludDMyRGVjaW1hbERpZ2l0cyA6IGxlbmd0aCAtIHBvc247XG4gICAgICAgICAgICBjb25zdCBjaHVuayA9IG5ldyBJbnQ2NChuZXcgVWludDMyQXJyYXkoW3BhcnNlSW50KHN0ci5zdWJzdHIocG9zbiwgZ3JvdXApLCAxMCksIDBdKSk7XG4gICAgICAgICAgICBjb25zdCBtdWx0aXBsZSA9IG5ldyBJbnQ2NChuZXcgVWludDMyQXJyYXkoW2tQb3dlcnNPZlRlbltncm91cF0sIDBdKSk7XG5cbiAgICAgICAgICAgIG91dC50aW1lcyhtdWx0aXBsZSk7XG4gICAgICAgICAgICBvdXQucGx1cyhjaHVuayk7XG5cbiAgICAgICAgICAgIHBvc24gKz0gZ3JvdXA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5lZ2F0ZSA/IG91dC5uZWdhdGUoKSA6IG91dDtcbiAgICB9XG5cbiAgICBzdGF0aWMgY29udmVydEFycmF5KHZhbHVlczogKHN0cmluZ3xudW1iZXIpW10pOiBVaW50MzJBcnJheSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDMyQXJyYXkodmFsdWVzLmxlbmd0aCAqIDIpO1xuICAgICAgICBmb3IgKGxldCBpID0gLTEsIG4gPSB2YWx1ZXMubGVuZ3RoOyArK2kgPCBuOykge1xuICAgICAgICAgICAgSW50NjQuZnJvbSh2YWx1ZXNbaV0sIG5ldyBVaW50MzJBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0ICsgMiAqIGkgKiA0LCAyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgc3RhdGljIG11bHRpcGx5KGxlZnQ6IEludDY0LCByaWdodDogSW50NjQpOiBJbnQ2NCB7XG4gICAgICAgIGxldCBydHJuID0gbmV3IEludDY0KG5ldyBVaW50MzJBcnJheShsZWZ0LmJ1ZmZlcikpO1xuICAgICAgICByZXR1cm4gcnRybi50aW1lcyhyaWdodCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFkZChsZWZ0OiBJbnQ2NCwgcmlnaHQ6IEludDY0KTogSW50NjQge1xuICAgICAgICBsZXQgcnRybiA9IG5ldyBJbnQ2NChuZXcgVWludDMyQXJyYXkobGVmdC5idWZmZXIpKTtcbiAgICAgICAgcmV0dXJuIHJ0cm4ucGx1cyhyaWdodCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW50MTI4IHtcbiAgICBjb25zdHJ1Y3RvciAocHJpdmF0ZSBidWZmZXI6IFVpbnQzMkFycmF5KSB7XG4gICAgICAgIC8vIGJ1ZmZlclszXSBNU0IgKGhpZ2gpXG4gICAgICAgIC8vIGJ1ZmZlclsyXVxuICAgICAgICAvLyBidWZmZXJbMV1cbiAgICAgICAgLy8gYnVmZmVyWzBdIExTQiAobG93KVxuICAgIH1cblxuICAgIGhpZ2goKTogSW50NjQge1xuICAgICAgICByZXR1cm4gbmV3IEludDY0KG5ldyBVaW50MzJBcnJheSh0aGlzLmJ1ZmZlci5idWZmZXIsIHRoaXMuYnVmZmVyLmJ5dGVPZmZzZXQgKyA4LCAyKSk7XG4gICAgfVxuXG4gICAgbG93KCk6IEludDY0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnQ2NChuZXcgVWludDMyQXJyYXkodGhpcy5idWZmZXIuYnVmZmVyLCB0aGlzLmJ1ZmZlci5ieXRlT2Zmc2V0LCAyKSk7XG4gICAgfVxuXG4gICAgbmVnYXRlKCk6IEludDEyOCB7XG4gICAgICAgIHRoaXMuYnVmZmVyWzBdID0gfnRoaXMuYnVmZmVyWzBdICsgMTtcbiAgICAgICAgdGhpcy5idWZmZXJbMV0gPSB+dGhpcy5idWZmZXJbMV07XG4gICAgICAgIHRoaXMuYnVmZmVyWzJdID0gfnRoaXMuYnVmZmVyWzJdO1xuICAgICAgICB0aGlzLmJ1ZmZlclszXSA9IH50aGlzLmJ1ZmZlclszXTtcblxuICAgICAgICBpZiAodGhpcy5idWZmZXJbMF0gPT0gMCkgeyArK3RoaXMuYnVmZmVyWzFdOyB9XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlclsxXSA9PSAwKSB7ICsrdGhpcy5idWZmZXJbMl07IH1cbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyWzJdID09IDApIHsgKyt0aGlzLmJ1ZmZlclszXTsgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aW1lcyhvdGhlcjogSW50MTI4KTogSW50MTI4IHtcbiAgICAgICAgLy8gQnJlYWsgdGhlIGxlZnQgYW5kIHJpZ2h0IG51bWJlcnMgaW50byAzMiBiaXQgY2h1bmtzXG4gICAgICAgIC8vIHNvIHRoYXQgd2UgY2FuIG11bHRpcGx5IHRoZW0gd2l0aG91dCBvdmVyZmxvdy5cbiAgICAgICAgY29uc3QgTDAgPSBuZXcgVWludDY0KG5ldyBVaW50MzJBcnJheShbdGhpcy5idWZmZXJbM10sICAwXSkpO1xuICAgICAgICBjb25zdCBMMSA9IG5ldyBVaW50NjQobmV3IFVpbnQzMkFycmF5KFt0aGlzLmJ1ZmZlclsyXSwgIDBdKSk7XG4gICAgICAgIGNvbnN0IEwyID0gbmV3IFVpbnQ2NChuZXcgVWludDMyQXJyYXkoW3RoaXMuYnVmZmVyWzFdLCAgMF0pKTtcbiAgICAgICAgY29uc3QgTDMgPSBuZXcgVWludDY0KG5ldyBVaW50MzJBcnJheShbdGhpcy5idWZmZXJbMF0sICAwXSkpO1xuXG4gICAgICAgIGNvbnN0IFIwID0gbmV3IFVpbnQ2NChuZXcgVWludDMyQXJyYXkoW290aGVyLmJ1ZmZlclszXSwgMF0pKTtcbiAgICAgICAgY29uc3QgUjEgPSBuZXcgVWludDY0KG5ldyBVaW50MzJBcnJheShbb3RoZXIuYnVmZmVyWzJdLCAwXSkpO1xuICAgICAgICBjb25zdCBSMiA9IG5ldyBVaW50NjQobmV3IFVpbnQzMkFycmF5KFtvdGhlci5idWZmZXJbMV0sIDBdKSk7XG4gICAgICAgIGNvbnN0IFIzID0gbmV3IFVpbnQ2NChuZXcgVWludDMyQXJyYXkoW290aGVyLmJ1ZmZlclswXSwgMF0pKTtcblxuICAgICAgICBsZXQgcHJvZHVjdCA9IFVpbnQ2NC5tdWx0aXBseShMMywgUjMpO1xuICAgICAgICB0aGlzLmJ1ZmZlclswXSA9IHByb2R1Y3QubG93KCk7XG5cbiAgICAgICAgbGV0IHN1bSA9IG5ldyBVaW50NjQobmV3IFVpbnQzMkFycmF5KFtwcm9kdWN0LmhpZ2goKSwgMF0pKTtcblxuICAgICAgICBwcm9kdWN0ID0gVWludDY0Lm11bHRpcGx5KEwyLCBSMyk7XG4gICAgICAgIHN1bS5wbHVzKHByb2R1Y3QpO1xuXG4gICAgICAgIHByb2R1Y3QgPSBVaW50NjQubXVsdGlwbHkoTDMsIFIyKTtcbiAgICAgICAgc3VtLnBsdXMocHJvZHVjdCk7XG5cbiAgICAgICAgdGhpcy5idWZmZXJbMV0gPSBzdW0ubG93KCk7XG5cbiAgICAgICAgdGhpcy5idWZmZXJbM10gPSAoc3VtLmxlc3NUaGFuKHByb2R1Y3QpID8gMSA6IDApO1xuXG4gICAgICAgIHRoaXMuYnVmZmVyWzJdID0gc3VtLmhpZ2goKTtcbiAgICAgICAgbGV0IGhpZ2ggPSBuZXcgVWludDY0KG5ldyBVaW50MzJBcnJheSh0aGlzLmJ1ZmZlci5idWZmZXIsIHRoaXMuYnVmZmVyLmJ5dGVPZmZzZXQgKyA4LCAyKSk7XG5cbiAgICAgICAgaGlnaC5wbHVzKFVpbnQ2NC5tdWx0aXBseShMMSwgUjMpKVxuICAgICAgICAgICAgLnBsdXMoVWludDY0Lm11bHRpcGx5KEwyLCBSMikpXG4gICAgICAgICAgICAucGx1cyhVaW50NjQubXVsdGlwbHkoTDMsIFIxKSk7XG4gICAgICAgIHRoaXMuYnVmZmVyWzNdICs9IFVpbnQ2NC5tdWx0aXBseShMMCwgUjMpXG4gICAgICAgICAgICAgICAgICAgICAgICAucGx1cyhVaW50NjQubXVsdGlwbHkoTDEsIFIyKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wbHVzKFVpbnQ2NC5tdWx0aXBseShMMiwgUjEpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBsdXMoVWludDY0Lm11bHRpcGx5KEwzLCBSMCkpLmxvdygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHBsdXMob3RoZXI6IEludDEyOCk6IEludDEyOCB7XG4gICAgICAgIGxldCBzdW1zID0gbmV3IFVpbnQzMkFycmF5KDQpO1xuICAgICAgICBzdW1zWzNdID0gKHRoaXMuYnVmZmVyWzNdICsgb3RoZXIuYnVmZmVyWzNdKSA+Pj4gMDtcbiAgICAgICAgc3Vtc1syXSA9ICh0aGlzLmJ1ZmZlclsyXSArIG90aGVyLmJ1ZmZlclsyXSkgPj4+IDA7XG4gICAgICAgIHN1bXNbMV0gPSAodGhpcy5idWZmZXJbMV0gKyBvdGhlci5idWZmZXJbMV0pID4+PiAwO1xuICAgICAgICBzdW1zWzBdID0gKHRoaXMuYnVmZmVyWzBdICsgb3RoZXIuYnVmZmVyWzBdKSA+Pj4gMDtcblxuICAgICAgICBpZiAoc3Vtc1swXSA8ICh0aGlzLmJ1ZmZlclswXSA+Pj4gMCkpIHtcbiAgICAgICAgICAgICsrc3Vtc1sxXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3Vtc1sxXSA8ICh0aGlzLmJ1ZmZlclsxXSA+Pj4gMCkpIHtcbiAgICAgICAgICAgICsrc3Vtc1syXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3Vtc1syXSA8ICh0aGlzLmJ1ZmZlclsyXSA+Pj4gMCkpIHtcbiAgICAgICAgICAgICsrc3Vtc1szXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnVmZmVyWzNdID0gc3Vtc1szXTtcbiAgICAgICAgdGhpcy5idWZmZXJbMl0gPSBzdW1zWzJdO1xuICAgICAgICB0aGlzLmJ1ZmZlclsxXSA9IHN1bXNbMV07XG4gICAgICAgIHRoaXMuYnVmZmVyWzBdID0gc3Vtc1swXTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBoZXgoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke2ludEFzSGV4KHRoaXMuYnVmZmVyWzNdKX0gJHtpbnRBc0hleCh0aGlzLmJ1ZmZlclsyXSl9ICR7aW50QXNIZXgodGhpcy5idWZmZXJbMV0pfSAke2ludEFzSGV4KHRoaXMuYnVmZmVyWzBdKX1gO1xuICAgIH1cblxuICAgIHN0YXRpYyBtdWx0aXBseShsZWZ0OiBJbnQxMjgsIHJpZ2h0OiBJbnQxMjgpOiBJbnQxMjgge1xuICAgICAgICBsZXQgcnRybiA9IG5ldyBJbnQxMjgobmV3IFVpbnQzMkFycmF5KGxlZnQuYnVmZmVyKSk7XG4gICAgICAgIHJldHVybiBydHJuLnRpbWVzKHJpZ2h0KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYWRkKGxlZnQ6IEludDEyOCwgcmlnaHQ6IEludDEyOCk6IEludDEyOCB7XG4gICAgICAgIGxldCBydHJuID0gbmV3IEludDEyOChuZXcgVWludDMyQXJyYXkobGVmdC5idWZmZXIpKTtcbiAgICAgICAgcmV0dXJuIHJ0cm4ucGx1cyhyaWdodCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb20odmFsOiBhbnksIG91dF9idWZmZXIgPSBuZXcgVWludDMyQXJyYXkoNCkpOiBJbnQxMjgge1xuICAgICAgICByZXR1cm4gSW50MTI4LmZyb21TdHJpbmcoXG4gICAgICAgICAgICB0eXBlb2YodmFsKSA9PT0gJ3N0cmluZycgPyB2YWwgOiB2YWwudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIG91dF9idWZmZXJcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbU51bWJlcihudW06IG51bWJlciwgb3V0X2J1ZmZlciA9IG5ldyBVaW50MzJBcnJheSg0KSk6IEludDEyOCB7XG4gICAgICAgIC8vIEFsd2F5cyBwYXJzZSBudW1iZXJzIGFzIHN0cmluZ3MgLSBwdWxsaW5nIG91dCBoaWdoIGFuZCBsb3cgYml0c1xuICAgICAgICAvLyBkaXJlY3RseSBzZWVtcyB0byBsb3NlIHByZWNpc2lvbiBzb21ldGltZXNcbiAgICAgICAgLy8gRm9yIGV4YW1wbGU6XG4gICAgICAgIC8vICAgICA+IC00NjEzMDM0MTU2NDAwMjEyMDAwID4+PiAwXG4gICAgICAgIC8vICAgICA3MjE3ODI3ODRcbiAgICAgICAgLy8gVGhlIGNvcnJlY3QgbG93ZXIgMzItYml0cyBhcmUgNzIxNzgyNzUyXG4gICAgICAgIHJldHVybiBJbnQxMjguZnJvbVN0cmluZyhudW0udG9TdHJpbmcoKSwgb3V0X2J1ZmZlcik7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21TdHJpbmcoc3RyOiBzdHJpbmcsIG91dF9idWZmZXIgPSBuZXcgVWludDMyQXJyYXkoNCkpOiBJbnQxMjgge1xuICAgICAgICAvLyBUT0RPOiBBc3NlcnQgdGhhdCBvdXRfYnVmZmVyIGlzIDAgYW5kIGxlbmd0aCA9IDRcbiAgICAgICAgY29uc3QgbmVnYXRlID0gc3RyLnN0YXJ0c1dpdGgoJy0nKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gc3RyLmxlbmd0aDtcblxuICAgICAgICBsZXQgb3V0ID0gbmV3IEludDEyOChvdXRfYnVmZmVyKTtcbiAgICAgICAgZm9yIChsZXQgcG9zbiA9IG5lZ2F0ZSA/IDEgOiAwOyBwb3NuIDwgbGVuZ3RoOykge1xuICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSBrSW50MzJEZWNpbWFsRGlnaXRzIDwgbGVuZ3RoIC0gcG9zbiA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGtJbnQzMkRlY2ltYWxEaWdpdHMgOiBsZW5ndGggLSBwb3NuO1xuICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBuZXcgSW50MTI4KG5ldyBVaW50MzJBcnJheShbcGFyc2VJbnQoc3RyLnN1YnN0cihwb3NuLCBncm91cCksIDEwKSwgMCwgMCwgMF0pKTtcbiAgICAgICAgICAgIGNvbnN0IG11bHRpcGxlID0gbmV3IEludDEyOChuZXcgVWludDMyQXJyYXkoW2tQb3dlcnNPZlRlbltncm91cF0sIDAsIDAsIDBdKSk7XG5cbiAgICAgICAgICAgIG91dC50aW1lcyhtdWx0aXBsZSk7XG4gICAgICAgICAgICBvdXQucGx1cyhjaHVuayk7XG5cbiAgICAgICAgICAgIHBvc24gKz0gZ3JvdXA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmVnYXRlID8gb3V0Lm5lZ2F0ZSgpIDogb3V0O1xuICAgIH1cblxuICAgIHN0YXRpYyBjb252ZXJ0QXJyYXkodmFsdWVzOiAoc3RyaW5nfG51bWJlcilbXSk6IFVpbnQzMkFycmF5IHtcbiAgICAgICAgLy8gVE9ETzogRGlzdGluZ3Vpc2ggYmV0d2VlbiBzdHJpbmcgYW5kIG51bWJlciBhdCBjb21waWxlLXRpbWVcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50MzJBcnJheSh2YWx1ZXMubGVuZ3RoICogNCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAtMSwgbiA9IHZhbHVlcy5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgICAgICBJbnQxMjguZnJvbSh2YWx1ZXNbaV0sIG5ldyBVaW50MzJBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0ICsgNCAqIDQgKiBpLCA0KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxufVxuIl19
