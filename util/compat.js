"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const interfaces_1 = require("../io/interfaces");
const isObject = (x) => x != null && Object(x) === x;
const hasFuncs = (x, ...fn) => hasProps(x, ...fn.map((f) => [f, 'function']));
const hasProps = (x, ...ks) => isObject(x) && ks.every(([k, t]) => t ? (x[k] != null && typeof x[k] === t) : (k in x));
/** @ignore */ exports.isPromise = (x) => hasFuncs(x, 'then');
/** @ignore */ exports.isObservable = (x) => hasFuncs(x, 'subscribe');
/** @ignore */ exports.isIterable = (x) => hasFuncs(x, Symbol.iterator);
/** @ignore */ exports.isAsyncIterable = (x) => hasFuncs(x, Symbol.asyncIterator);
/** @ignore */ exports.isArrowJSON = (x) => hasProps(x, ['schema', 'object']);
/** @ignore */ exports.isArrayLike = (x) => hasProps(x, ['length', 'number']);
/** @ignore */ exports.isIteratorResult = (x) => hasProps(x, ['done'], ['value']);
/** @ignore */ exports.isUnderlyingSink = (x) => hasFuncs(x, 'abort', 'close', 'start', 'write');
/** @ignore */ exports.isFileHandle = (x) => hasFuncs(x, 'stat') && hasProps(x, ['fd', 'number']);
/** @ignore */ exports.isFSReadStream = (x) => exports.isReadableNodeStream(x) && hasProps(x, ['bytesRead', 'number']);
/** @ignore */ exports.isFetchResponse = (x) => hasProps(x, ['body'], ['bodyUsed', 'boolean'], ['ok', 'boolean']);
/** @ignore */ exports.isWritableDOMStream = (x) => !(x instanceof interfaces_1.ReadableInterop) && hasFuncs(x, 'abort', 'getWriter');
/** @ignore */ exports.isWritableNodeStream = (x) => !(x instanceof interfaces_1.ReadableInterop) && hasFuncs(x, 'write', 'cork', 'uncork', 'end');
/** @ignore */ exports.isReadableDOMStream = (x) => !(x instanceof interfaces_1.ReadableInterop) && hasFuncs(x, 'tee', 'cancel', 'pipeTo', 'getReader');
/** @ignore */ exports.isReadableNodeStream = (x) => !(x instanceof interfaces_1.ReadableInterop) && hasFuncs(x, 'read', 'pipe', 'unpipe', 'pause', 'resume', 'wrap');

//# sourceMappingURL=data:application/json;charset=utf8;base64,
