{"version":3,"sources":["util/bn.ts"],"names":[],"mappings":"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","file":"bn.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { toArrayBufferView, ArrayBufferViewInput } from './buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\ntype BigNumArray = IntArray | UintArray;\n/** @ignore */\ntype IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */\ntype UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nconst BigNumNMixin = {\n    toJSON(this: BN<BigNumArray>) { return `\"${bignumToString(this)}\"`; },\n    valueOf(this: BN<BigNumArray>) { return bignumToNumber(this); },\n    toString(this: BN<BigNumArray>) { return bignumToString(this); },\n    [Symbol.toPrimitive]<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default') {\n        switch (hint) {\n            case 'number': return bignumToNumber(this);\n            case 'string': return bignumToString(this);\n            case 'default': return bignumToBigInt(this);\n        }\n        return bignumToString(this);\n    }\n};\n\n/** @ignore */\nconst SignedBigNumNMixin: any = Object.assign({}, BigNumNMixin, { signed: true, BigIntArray: BigInt64Array });\n/** @ignore */\nconst UnsignedBigNumNMixin: any = Object.assign({}, BigNumNMixin, { signed: false, BigIntArray: BigUint64Array });\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    public static new<T extends BigNumArray>(input: ArrayBufferViewInput, signed?: boolean): T;\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(input: ArrayBufferViewInput, signed = (input instanceof Int8Array || input instanceof Int16Array || input instanceof Int32Array)): T {\n        return (signed === true) ? BN.signed(input) as T : BN.unsigned(input) as T;\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(input: ArrayBufferViewInput): T {\n        const Ctor: any = ArrayBuffer.isView(input) ? <any> input.constructor : Int32Array;\n        const { buffer, byteOffset, length } = toArrayBufferView<T>(<any> Ctor, input) as T;\n        const bn = new Ctor(buffer, byteOffset, length);\n        return Object.assign(bn, SignedBigNumNMixin);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(input: ArrayBufferViewInput): T {\n        const Ctor: any = ArrayBuffer.isView(input) ? <any> input.constructor : Uint32Array;\n        const { buffer, byteOffset, length } = toArrayBufferView<T>(<any> Ctor, input) as T;\n        const bn = new Ctor(buffer, byteOffset, length);\n        return Object.assign(bn, UnsignedBigNumNMixin);\n    }\n    constructor(input: ArrayBufferViewInput, signed = input instanceof Int32Array) {\n        return BN.new(input, signed) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmatic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint: any): number | string | bigint;\n}\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>({ buffer, byteOffset, length, signed }: T) {\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        number += signed ? (lo >>> 0) + (hi         * (i ** 32))\n                         : (lo >>> 0) + ((hi >>> 0) * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a.BigIntArray(a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a.BigIntArray(a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n"]}