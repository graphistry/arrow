"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const column_1 = require("../column");
const vector_1 = require("../vector");
const chunked_1 = require("../vector/chunked");
const isArray = Array.isArray;
/** @ignore */
exports.selectAndFlatten = (Ctor, vals) => _selectAndFlatten(Ctor, vals, [], 0);
/** @ignore */
exports.selectAndFlattenChunks = (Ctor, vals) => _selectAndFlattenChunks(Ctor, vals, [], 0);
/** @ignore */
exports.selectAndFlattenVectorChildren = (Ctor, vals) => _selectAndFlattenVectorChildren(Ctor, vals, [], 0);
/** @ignore */
exports.selectAndFlattenColumnChildren = (Ctor, vals) => _selectAndFlattenColumnChildren(Ctor, vals, [], 0);
/** @ignore */
function _selectAndFlatten(Ctor, vals, ret, idx) {
    for (let value, j = idx, i = -1, n = vals.length; ++i < n;) {
        if (isArray(value = vals[i])) {
            j = _selectAndFlatten(Ctor, value, ret, j).length;
        }
        else if (value instanceof Ctor) {
            ret[j++] = value;
        }
    }
    return ret;
}
/** @ignore */
function _selectAndFlattenChunks(Ctor, vals, ret, idx) {
    for (let value, j = idx, i = -1, n = vals.length; ++i < n;) {
        if ((value = vals[i]) instanceof chunked_1.Chunked) {
            j = _selectAndFlattenChunks(Ctor, value.chunks, ret, j).length;
        }
        else if (value instanceof Ctor) {
            ret[j++] = value;
        }
    }
    return ret;
}
/** @ignore */
function _selectAndFlattenVectorChildren(Ctor, vals, ret, idx) {
    for (let value, j = idx, i = -1, n = vals.length; ++i < n;) {
        if (isArray(value = vals[i])) {
            j = _selectAndFlattenVectorChildren(Ctor, value, ret, j).length;
        }
        else if (value instanceof Ctor) {
            j = _selectAndFlatten(vector_1.Vector, value.schema.fields.map((_, i) => value.getChildAt(i)), ret, j).length;
        }
        else if (value instanceof vector_1.Vector) {
            ret[j++] = value;
        }
    }
    return ret;
}
/** @ignore */
function _selectAndFlattenColumnChildren(Ctor, vals, ret, idx) {
    for (let value, j = idx, i = -1, n = vals.length; ++i < n;) {
        if (isArray(value = vals[i])) {
            j = _selectAndFlattenColumnChildren(Ctor, value, ret, j).length;
        }
        else if (value instanceof Ctor) {
            j = _selectAndFlatten(column_1.Column, value.schema.fields.map((f, i) => column_1.Column.new(f, value.getChildAt(i))), ret, j).length;
        }
        else if (value instanceof column_1.Column) {
            ret[j++] = value;
        }
    }
    return ret;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
