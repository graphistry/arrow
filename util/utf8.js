"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("./buffer");
const text_encoding_utf_8_1 = require("text-encoding-utf-8");
/** @ignore @suppress {missingRequire} */
const _Buffer = typeof Buffer === 'function' ? Buffer : null;
/** @ignore */
const useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';
/** @ignore */
exports.decodeUtf8 = ((TextDecoder) => {
    if (useNativeEncoders || !_Buffer) {
        const decoder = new TextDecoder();
        return decoder.decode.bind(decoder);
    }
    return (input) => {
        const { buffer, byteOffset, length } = buffer_1.toUint8Array(input);
        return _Buffer.from(buffer, byteOffset, length).toString();
    };
})(typeof TextDecoder !== 'undefined' ? TextDecoder : text_encoding_utf_8_1.TextDecoder);
/** @ignore */
exports.encodeUtf8 = ((TextEncoder) => {
    if (useNativeEncoders || !_Buffer) {
        const encoder = new TextEncoder();
        return encoder.encode.bind(encoder);
    }
    return (input = '') => buffer_1.toUint8Array(_Buffer.from(input, 'utf8'));
})(typeof TextEncoder !== 'undefined' ? TextEncoder : text_encoding_utf_8_1.TextEncoder);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvdXRmOC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCOztBQUVyQixxQ0FBd0M7QUFDeEMsNkRBRzZCO0FBRTdCLHlDQUF5QztBQUN6QyxNQUFNLE9BQU8sR0FBRyxPQUFPLE1BQU0sS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzdELGNBQWM7QUFDZCxNQUFNLGlCQUFpQixHQUFHLE9BQU8sV0FBVyxLQUFLLFVBQVUsSUFBSSxPQUFPLFdBQVcsS0FBSyxVQUFVLENBQUM7QUFFakcsY0FBYztBQUNELFFBQUEsVUFBVSxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtJQUN2QyxJQUFJLGlCQUFpQixJQUFJLENBQUMsT0FBTyxFQUFFO1FBQy9CLE1BQU0sT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDbEMsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN2QztJQUNELE9BQU8sQ0FBQyxLQUF3QyxFQUFFLEVBQUU7UUFDaEQsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEdBQUcscUJBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvRCxDQUFDLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQyxPQUFPLFdBQVcsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsaUNBQW1CLENBQUMsQ0FBQztBQUUzRSxjQUFjO0FBQ0QsUUFBQSxVQUFVLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO0lBQ3ZDLElBQUksaUJBQWlCLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUNsQyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZDO0lBQ0QsT0FBTyxDQUFDLEtBQUssR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLHFCQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNyRSxDQUFDLENBQUMsQ0FBQyxPQUFPLFdBQVcsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsaUNBQW1CLENBQUMsQ0FBQyIsImZpbGUiOiJ1dGlsL3V0ZjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgdG9VaW50OEFycmF5IH0gZnJvbSAnLi9idWZmZXInO1xuaW1wb3J0IHtcbiAgICBUZXh0RGVjb2RlciBhcyBUZXh0RGVjb2RlclBvbHlmaWxsLFxuICAgIFRleHRFbmNvZGVyIGFzIFRleHRFbmNvZGVyUG9seWZpbGwsXG59IGZyb20gJ3RleHQtZW5jb2RpbmctdXRmLTgnO1xuXG4vKiogQGlnbm9yZSBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSAqL1xuY29uc3QgX0J1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgPyBCdWZmZXIgOiBudWxsO1xuLyoqIEBpZ25vcmUgKi9cbmNvbnN0IHVzZU5hdGl2ZUVuY29kZXJzID0gdHlwZW9mIFRleHREZWNvZGVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJztcblxuLyoqIEBpZ25vcmUgKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVVdGY4ID0gKChUZXh0RGVjb2RlcikgPT4ge1xuICAgIGlmICh1c2VOYXRpdmVFbmNvZGVycyB8fCAhX0J1ZmZlcikge1xuICAgICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG4gICAgICAgIHJldHVybiBkZWNvZGVyLmRlY29kZS5iaW5kKGRlY29kZXIpO1xuICAgIH1cbiAgICByZXR1cm4gKGlucHV0OiBBcnJheUJ1ZmZlckxpa2UgfCBBcnJheUJ1ZmZlclZpZXcpID0+IHtcbiAgICAgICAgY29uc3QgeyBidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCB9ID0gdG9VaW50OEFycmF5KGlucHV0KTtcbiAgICAgICAgcmV0dXJuIF9CdWZmZXIuZnJvbShidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCkudG9TdHJpbmcoKTtcbiAgICB9O1xufSkodHlwZW9mIFRleHREZWNvZGVyICE9PSAndW5kZWZpbmVkJyA/IFRleHREZWNvZGVyIDogVGV4dERlY29kZXJQb2x5ZmlsbCk7XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgY29uc3QgZW5jb2RlVXRmOCA9ICgoVGV4dEVuY29kZXIpID0+IHtcbiAgICBpZiAodXNlTmF0aXZlRW5jb2RlcnMgfHwgIV9CdWZmZXIpIHtcbiAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICByZXR1cm4gZW5jb2Rlci5lbmNvZGUuYmluZChlbmNvZGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIChpbnB1dCA9ICcnKSA9PiB0b1VpbnQ4QXJyYXkoX0J1ZmZlci5mcm9tKGlucHV0LCAndXRmOCcpKTtcbn0pKHR5cGVvZiBUZXh0RW5jb2RlciAhPT0gJ3VuZGVmaW5lZCcgPyBUZXh0RW5jb2RlciA6IFRleHRFbmNvZGVyUG9seWZpbGwpO1xuIl19
