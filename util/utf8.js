"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("./buffer");
const text_encoding_utf_8_1 = require("text-encoding-utf-8");
/**
 * @ignore
 */
exports.decodeUtf8 = ((decoder) => {
    /** @suppress {missingRequire} */
    const NodeBuffer = typeof Buffer !== 'undefined' ? Buffer : null;
    return !NodeBuffer ? decoder.decode.bind(decoder) : (input) => {
        const { buffer, byteOffset, length } = buffer_1.toUint8Array(input);
        return NodeBuffer.from(buffer, byteOffset, length).toString();
    };
})(new (typeof TextDecoder !== 'undefined' ? TextDecoder : text_encoding_utf_8_1.TextDecoder)());
/**
 * @ignore
 */
exports.encodeUtf8 = ((encoder) => {
    /** @suppress {missingRequire} */
    const NodeBuffer = typeof Buffer !== 'undefined' ? Buffer : null;
    return !NodeBuffer ? encoder.encode.bind(encoder) :
        (input = '') => buffer_1.toUint8Array(NodeBuffer.from(input, 'utf8'));
})(new (typeof TextEncoder !== 'undefined' ? TextEncoder : text_encoding_utf_8_1.TextEncoder)());

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvdXRmOC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCOztBQUVyQixxQ0FBd0M7QUFDeEMsNkRBRzZCO0FBRTdCOztHQUVHO0FBQ1UsUUFBQSxVQUFVLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO0lBQ25DLGlDQUFpQztJQUNqQyxNQUFNLFVBQVUsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2pFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQXdDLEVBQUUsRUFBRTtRQUM3RixNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsR0FBRyxxQkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xFLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLFdBQVcsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsaUNBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFbkY7O0dBRUc7QUFDVSxRQUFBLFVBQVUsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7SUFDbkMsaUNBQWlDO0lBQ2pDLE1BQU0sVUFBVSxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDakUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMvQyxDQUFDLEtBQUssR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLHFCQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNyRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxXQUFXLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGlDQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDIiwiZmlsZSI6InV0aWwvdXRmOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyB0b1VpbnQ4QXJyYXkgfSBmcm9tICcuL2J1ZmZlcic7XG5pbXBvcnQge1xuICAgIFRleHREZWNvZGVyIGFzIFRleHREZWNvZGVyUG9seWZpbGwsXG4gICAgVGV4dEVuY29kZXIgYXMgVGV4dEVuY29kZXJQb2x5ZmlsbCxcbn0gZnJvbSAndGV4dC1lbmNvZGluZy11dGYtOCc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgY29uc3QgZGVjb2RlVXRmOCA9ICgoZGVjb2RlcikgPT4ge1xuICAgIC8qKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSAqL1xuICAgIGNvbnN0IE5vZGVCdWZmZXIgPSB0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyA/IEJ1ZmZlciA6IG51bGw7XG4gICAgcmV0dXJuICFOb2RlQnVmZmVyID8gZGVjb2Rlci5kZWNvZGUuYmluZChkZWNvZGVyKSA6IChpbnB1dDogQXJyYXlCdWZmZXJMaWtlIHwgQXJyYXlCdWZmZXJWaWV3KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGggfSA9IHRvVWludDhBcnJheShpbnB1dCk7XG4gICAgICAgIHJldHVybiBOb2RlQnVmZmVyLmZyb20oYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpLnRvU3RyaW5nKCk7XG4gICAgfTtcbn0pKG5ldyAodHlwZW9mIFRleHREZWNvZGVyICE9PSAndW5kZWZpbmVkJyA/IFRleHREZWNvZGVyIDogVGV4dERlY29kZXJQb2x5ZmlsbCkoKSk7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgY29uc3QgZW5jb2RlVXRmOCA9ICgoZW5jb2RlcikgPT4ge1xuICAgIC8qKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSAqL1xuICAgIGNvbnN0IE5vZGVCdWZmZXIgPSB0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyA/IEJ1ZmZlciA6IG51bGw7XG4gICAgcmV0dXJuICFOb2RlQnVmZmVyID8gZW5jb2Rlci5lbmNvZGUuYmluZChlbmNvZGVyKSA6XG4gICAgICAgIChpbnB1dCA9ICcnKSA9PiB0b1VpbnQ4QXJyYXkoTm9kZUJ1ZmZlci5mcm9tKGlucHV0LCAndXRmOCcpKTtcbn0pKG5ldyAodHlwZW9mIFRleHRFbmNvZGVyICE9PSAndW5kZWZpbmVkJyA/IFRleHRFbmNvZGVyIDogVGV4dEVuY29kZXJQb2x5ZmlsbCkoKSk7XG4iXX0=
