"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("./buffer");
const text_encoding_utf_8_1 = require("text-encoding-utf-8");
/** @ignore */
exports.decodeUtf8 = ((decoder) => {
    /** @suppress {missingRequire} */
    const NodeBuffer = typeof Buffer !== 'undefined' ? Buffer : null;
    return !NodeBuffer ? decoder.decode.bind(decoder) : (input) => {
        const { buffer, byteOffset, length } = buffer_1.toUint8Array(input);
        return NodeBuffer.from(buffer, byteOffset, length).toString();
    };
})(new (typeof TextDecoder !== 'undefined' ? TextDecoder : text_encoding_utf_8_1.TextDecoder)());
/** @ignore */
exports.encodeUtf8 = ((encoder) => {
    /** @suppress {missingRequire} */
    const NodeBuffer = typeof Buffer !== 'undefined' ? Buffer : null;
    return !NodeBuffer ? encoder.encode.bind(encoder) :
        (input = '') => buffer_1.toUint8Array(NodeBuffer.from(input, 'utf8'));
})(new (typeof TextEncoder !== 'undefined' ? TextEncoder : text_encoding_utf_8_1.TextEncoder)());

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvdXRmOC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCOztBQUVyQixxQ0FBd0M7QUFDeEMsNkRBRzZCO0FBRTdCLGNBQWM7QUFDRCxRQUFBLFVBQVUsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7SUFDbkMsaUNBQWlDO0lBQ2pDLE1BQU0sVUFBVSxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDakUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBd0MsRUFBRSxFQUFFO1FBQzdGLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxHQUFHLHFCQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0QsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbEUsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sV0FBVyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxpQ0FBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUVuRixjQUFjO0FBQ0QsUUFBQSxVQUFVLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO0lBQ25DLGlDQUFpQztJQUNqQyxNQUFNLFVBQVUsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2pFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxLQUFLLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDckUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sV0FBVyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxpQ0FBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyIsImZpbGUiOiJ1dGlsL3V0ZjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgdG9VaW50OEFycmF5IH0gZnJvbSAnLi9idWZmZXInO1xuaW1wb3J0IHtcbiAgICBUZXh0RGVjb2RlciBhcyBUZXh0RGVjb2RlclBvbHlmaWxsLFxuICAgIFRleHRFbmNvZGVyIGFzIFRleHRFbmNvZGVyUG9seWZpbGwsXG59IGZyb20gJ3RleHQtZW5jb2RpbmctdXRmLTgnO1xuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGNvbnN0IGRlY29kZVV0ZjggPSAoKGRlY29kZXIpID0+IHtcbiAgICAvKiogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gKi9cbiAgICBjb25zdCBOb2RlQnVmZmVyID0gdHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgPyBCdWZmZXIgOiBudWxsO1xuICAgIHJldHVybiAhTm9kZUJ1ZmZlciA/IGRlY29kZXIuZGVjb2RlLmJpbmQoZGVjb2RlcikgOiAoaW5wdXQ6IEFycmF5QnVmZmVyTGlrZSB8IEFycmF5QnVmZmVyVmlldykgPT4ge1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoIH0gPSB0b1VpbnQ4QXJyYXkoaW5wdXQpO1xuICAgICAgICByZXR1cm4gTm9kZUJ1ZmZlci5mcm9tKGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKS50b1N0cmluZygpO1xuICAgIH07XG59KShuZXcgKHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcgPyBUZXh0RGVjb2RlciA6IFRleHREZWNvZGVyUG9seWZpbGwpKCkpO1xuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZVV0ZjggPSAoKGVuY29kZXIpID0+IHtcbiAgICAvKiogQHN1cHByZXNzIHttaXNzaW5nUmVxdWlyZX0gKi9cbiAgICBjb25zdCBOb2RlQnVmZmVyID0gdHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgPyBCdWZmZXIgOiBudWxsO1xuICAgIHJldHVybiAhTm9kZUJ1ZmZlciA/IGVuY29kZXIuZW5jb2RlLmJpbmQoZW5jb2RlcikgOlxuICAgICAgICAoaW5wdXQgPSAnJykgPT4gdG9VaW50OEFycmF5KE5vZGVCdWZmZXIuZnJvbShpbnB1dCwgJ3V0ZjgnKSk7XG59KShuZXcgKHR5cGVvZiBUZXh0RW5jb2RlciAhPT0gJ3VuZGVmaW5lZCcgPyBUZXh0RW5jb2RlciA6IFRleHRFbmNvZGVyUG9seWZpbGwpKCkpO1xuIl19
