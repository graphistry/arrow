"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("./buffer");
const text_encoding_utf_8_1 = require("text-encoding-utf-8");
/** @suppress {missingRequire} */
const _Buffer = typeof Buffer === 'function' ? Buffer : null;
const useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';
/** @ignore */
exports.decodeUtf8 = ((TextDecoder) => {
    if (useNativeEncoders || !_Buffer) {
        const decoder = new TextDecoder();
        return decoder.decode.bind(decoder);
    }
    return (input) => {
        const { buffer, byteOffset, length } = buffer_1.toUint8Array(input);
        return _Buffer.from(buffer, byteOffset, length).toString();
    };
})(typeof TextDecoder !== 'undefined' ? TextDecoder : text_encoding_utf_8_1.TextDecoder);
/** @ignore */
exports.encodeUtf8 = ((TextEncoder) => {
    if (useNativeEncoders || !_Buffer) {
        const encoder = new TextEncoder();
        return encoder.encode.bind(encoder);
    }
    return (input = '') => buffer_1.toUint8Array(_Buffer.from(input, 'utf8'));
})(typeof TextEncoder !== 'undefined' ? TextEncoder : text_encoding_utf_8_1.TextEncoder);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvdXRmOC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCOztBQUVyQixxQ0FBd0M7QUFDeEMsNkRBRzZCO0FBRTdCLGlDQUFpQztBQUNqQyxNQUFNLE9BQU8sR0FBRyxPQUFPLE1BQU0sS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzdELE1BQU0saUJBQWlCLEdBQUcsT0FBTyxXQUFXLEtBQUssVUFBVSxJQUFJLE9BQU8sV0FBVyxLQUFLLFVBQVUsQ0FBQztBQUVqRyxjQUFjO0FBQ0QsUUFBQSxVQUFVLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO0lBQ3ZDLElBQUksaUJBQWlCLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUNsQyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZDO0lBQ0QsT0FBTyxDQUFDLEtBQXdDLEVBQUUsRUFBRTtRQUNoRCxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsR0FBRyxxQkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9ELENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDLE9BQU8sV0FBVyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxpQ0FBbUIsQ0FBQyxDQUFDO0FBRTNFLGNBQWM7QUFDRCxRQUFBLFVBQVUsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUU7SUFDdkMsSUFBSSxpQkFBaUIsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUMvQixNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ2xDLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDdkM7SUFDRCxPQUFPLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMscUJBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLENBQUMsQ0FBQyxDQUFDLE9BQU8sV0FBVyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxpQ0FBbUIsQ0FBQyxDQUFDIiwiZmlsZSI6InV0aWwvdXRmOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyB0b1VpbnQ4QXJyYXkgfSBmcm9tICcuL2J1ZmZlcic7XG5pbXBvcnQge1xuICAgIFRleHREZWNvZGVyIGFzIFRleHREZWNvZGVyUG9seWZpbGwsXG4gICAgVGV4dEVuY29kZXIgYXMgVGV4dEVuY29kZXJQb2x5ZmlsbCxcbn0gZnJvbSAndGV4dC1lbmNvZGluZy11dGYtOCc7XG5cbi8qKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSAqL1xuY29uc3QgX0J1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgPyBCdWZmZXIgOiBudWxsO1xuY29uc3QgdXNlTmF0aXZlRW5jb2RlcnMgPSB0eXBlb2YgVGV4dERlY29kZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFRleHRFbmNvZGVyID09PSAnZnVuY3Rpb24nO1xuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGNvbnN0IGRlY29kZVV0ZjggPSAoKFRleHREZWNvZGVyKSA9PiB7XG4gICAgaWYgKHVzZU5hdGl2ZUVuY29kZXJzIHx8ICFfQnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbiAgICAgICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlLmJpbmQoZGVjb2Rlcik7XG4gICAgfVxuICAgIHJldHVybiAoaW5wdXQ6IEFycmF5QnVmZmVyTGlrZSB8IEFycmF5QnVmZmVyVmlldykgPT4ge1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoIH0gPSB0b1VpbnQ4QXJyYXkoaW5wdXQpO1xuICAgICAgICByZXR1cm4gX0J1ZmZlci5mcm9tKGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKS50b1N0cmluZygpO1xuICAgIH07XG59KSh0eXBlb2YgVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnID8gVGV4dERlY29kZXIgOiBUZXh0RGVjb2RlclBvbHlmaWxsKTtcblxuLyoqIEBpZ25vcmUgKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVVdGY4ID0gKChUZXh0RW5jb2RlcikgPT4ge1xuICAgIGlmICh1c2VOYXRpdmVFbmNvZGVycyB8fCAhX0J1ZmZlcikge1xuICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgICAgIHJldHVybiBlbmNvZGVyLmVuY29kZS5iaW5kKGVuY29kZXIpO1xuICAgIH1cbiAgICByZXR1cm4gKGlucHV0ID0gJycpID0+IHRvVWludDhBcnJheShfQnVmZmVyLmZyb20oaW5wdXQsICd1dGY4JykpO1xufSkodHlwZW9mIFRleHRFbmNvZGVyICE9PSAndW5kZWZpbmVkJyA/IFRleHRFbmNvZGVyIDogVGV4dEVuY29kZXJQb2x5ZmlsbCk7XG4iXX0=
