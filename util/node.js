"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
class PipeIterator {
    constructor(iterator, encoding) {
        this.iterator = iterator;
        this.encoding = encoding;
    }
    [Symbol.iterator]() { return this.iterator; }
    next(value) { return this.iterator.next(value); }
    throw(error) {
        if (typeof this.iterator.throw === 'function') {
            return this.iterator.throw(error);
        }
        return { done: true, value: null };
    }
    return(value) {
        if (typeof this.iterator.return === 'function') {
            return this.iterator.return(value);
        }
        return { done: true, value: null };
    }
    pipe(stream) {
        let { encoding } = this;
        let res;
        let write = (err) => {
            stream['removeListener']('error', write);
            stream['removeListener']('drain', write);
            if (err)
                return this.throw(err);
            if (stream['writable']) {
                do {
                    if ((res = this.next()).done)
                        break;
                } while (emit(stream, encoding, res.value));
            }
            return wait(stream, res && res.done, write);
        };
        write();
        return stream;
    }
}
exports.PipeIterator = PipeIterator;
class AsyncPipeIterator {
    constructor(iterator, encoding) {
        this.iterator = iterator;
        this.encoding = encoding;
    }
    [Symbol.asyncIterator]() { return this.iterator; }
    next(value) { return this.iterator.next(value); }
    throw(error) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (typeof this.iterator.throw === 'function') {
                return this.iterator.throw(error);
            }
            return { done: true, value: null };
        });
    }
    return(value) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (typeof this.iterator.return === 'function') {
                return this.iterator.return(value);
            }
            return { done: true, value: null };
        });
    }
    pipe(stream) {
        let { encoding } = this;
        let res;
        let write = (err) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            stream['removeListener']('error', write);
            stream['removeListener']('drain', write);
            if (err)
                return this.throw(err);
            if (stream['writable']) {
                do {
                    if ((res = yield this.next()).done)
                        break;
                } while (emit(stream, encoding, res.value));
            }
            return wait(stream, res && res.done, write);
        });
        write();
        return stream;
    }
}
exports.AsyncPipeIterator = AsyncPipeIterator;
const toBufferOrUint8Array = (() => {
    // If in node, convert Uint8Arrays to Buffer instances. This is necessary
    // because some node APIs ('http' etc.) don't work unless you give them Buffers.
    // This eval also defeats closure-compiler, which doesn't recognize the Buffer constructor.
    const BufferCtor = eval('typeof Buffer !== "undefined" ? Buffer : null');
    return !BufferCtor ? (arr) => arr :
        (arr) => BufferCtor.from(arr.buffer, arr.byteOffset, arr.byteLength);
})();
function emit(stream, encoding, value) {
    return stream['write']((encoding === 'utf8' ? value + '\n' : toBufferOrUint8Array(value)), encoding);
}
function wait(stream, done, write) {
    const p = eval('process'); // defeat closure compiler
    if (!done) {
        stream['once']('error', write);
        stream['once']('drain', write);
    }
    else if (!(!p || stream === p.stdout) && !stream['isTTY']) {
        stream['end'](null);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
