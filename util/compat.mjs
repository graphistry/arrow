// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { ReadableInterop } from '../io/interfaces';
/** @ignore */ const isObject = (x) => x != null && Object(x) === x;
/** @ignore */ const hasFuncs = (x, ...fn) => hasProps(x, ...fn.map((f) => [f, 'function']));
/** @ignore */ const hasProps = (x, ...ks) => isObject(x) && ks.every(([k, t]) => t ? (x[k] != null && typeof x[k] === t) : (k in x));
/** @ignore */ export const isPromise = (x) => hasFuncs(x, 'then');
/** @ignore */ export const isObservable = (x) => hasFuncs(x, 'subscribe');
/** @ignore */ export const isIterable = (x) => hasFuncs(x, Symbol.iterator);
/** @ignore */ export const isAsyncIterable = (x) => hasFuncs(x, Symbol.asyncIterator);
/** @ignore */ export const isArrowJSON = (x) => hasProps(x, ['schema', 'object']);
/** @ignore */ export const isArrayLike = (x) => hasProps(x, ['length', 'number']);
/** @ignore */ export const isIteratorResult = (x) => hasProps(x, ['done'], ['value']);
/** @ignore */ export const isUnderlyingSink = (x) => hasFuncs(x, 'abort', 'close', 'start', 'write');
/** @ignore */ export const isFileHandle = (x) => hasFuncs(x, 'stat') && hasProps(x, ['fd', 'number']);
/** @ignore */ export const isFSReadStream = (x) => isReadableNodeStream(x) && hasProps(x, ['bytesRead', 'number']);
/** @ignore */ export const isFetchResponse = (x) => hasProps(x, ['body'], ['bodyUsed', 'boolean'], ['ok', 'boolean']);
/** @ignore */ export const isWritableDOMStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'abort', 'getWriter');
/** @ignore */ export const isReadableDOMStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'tee', 'cancel', 'pipeTo', 'getReader');
/** @ignore */ export const isWritableNodeStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'write', 'end') && hasProps(x, ['writable', 'boolean']);
/** @ignore */ export const isReadableNodeStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'read', 'pipe') && hasProps(x, ['readable', 'boolean']);

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Q0FBQyxDQUFNLEVBQThCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLGVBQWUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUMzTSxjQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQVksQ0FBQyxDQUFNLEVBQThCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLGVBQWUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ1dGlsL2NvbXBhdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBSZWFkYWJsZUludGVyb3AsIEFycm93SlNPTkxpa2UgfSBmcm9tICcuLi9pby9pbnRlcmZhY2VzJztcblxuLyoqIEBpZ25vcmUgKi9cbnR5cGUgRlNSZWFkU3RyZWFtID0gaW1wb3J0KCdmcycpLlJlYWRTdHJlYW07XG4vKiogQGlnbm9yZSAqL1xudHlwZSBGaWxlSGFuZGxlID0gaW1wb3J0KCdmcycpLnByb21pc2VzLkZpbGVIYW5kbGU7XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgaW50ZXJmYWNlIFN1YnNjcmlwdGlvbiB7XG4gICAgdW5zdWJzY3JpYmU6ICgpID0+IHZvaWQ7XG59XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgaW50ZXJmYWNlIE9ic2VydmVyPFQ+IHtcbiAgICBjbG9zZWQ/OiBib29sZWFuO1xuICAgIG5leHQ6ICh2YWx1ZTogVCkgPT4gdm9pZDtcbiAgICBlcnJvcjogKGVycjogYW55KSA9PiB2b2lkO1xuICAgIGNvbXBsZXRlOiAoKSA9PiB2b2lkO1xufVxuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZhYmxlPFQ+IHtcbiAgICBzdWJzY3JpYmU6IChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IFN1YnNjcmlwdGlvbjtcbn1cblxuLyoqIEBpZ25vcmUgKi8gY29uc3QgaXNPYmplY3QgPSAoeDogYW55KSA9PiB4ICE9IG51bGwgJiYgT2JqZWN0KHgpID09PSB4O1xuLyoqIEBpZ25vcmUgKi8gY29uc3QgaGFzRnVuY3MgPSAoeDogYW55LCAuLi5mbjogUHJvcGVydHlLZXlbXSkgPT4gaGFzUHJvcHMoeCwgLi4uZm4ubWFwKChmKSA9PiBbZiwgJ2Z1bmN0aW9uJ10gYXMgW1Byb3BlcnR5S2V5LCBzdHJpbmddKSk7XG4vKiogQGlnbm9yZSAqLyBjb25zdCBoYXNQcm9wcyA9ICh4OiBhbnksIC4uLmtzOiBbUHJvcGVydHlLZXksIHN0cmluZz9dW10pID0+IGlzT2JqZWN0KHgpICYmIGtzLmV2ZXJ5KChbaywgdF0pID0+IHQgPyAoeFtrXSAhPSBudWxsICYmIHR5cGVvZiB4W2tdID09PSB0KSA6IChrIGluIHgpKTtcblxuLyoqIEBpZ25vcmUgKi8gZXhwb3J0IGNvbnN0IGlzUHJvbWlzZSAgICAgICAgICAgID0gPFQgPSBhbnk+KHg6IGFueSk6IHggaXMgUHJvbWlzZUxpa2U8VD4gICAgICAgID0+IGhhc0Z1bmNzKHgsICd0aGVuJyk7XG4vKiogQGlnbm9yZSAqLyBleHBvcnQgY29uc3QgaXNPYnNlcnZhYmxlICAgICAgICAgPSA8VCA9IGFueT4oeDogYW55KTogeCBpcyBPYnNlcnZhYmxlPFQ+ICAgICAgICAgPT4gaGFzRnVuY3MoeCwgJ3N1YnNjcmliZScpO1xuLyoqIEBpZ25vcmUgKi8gZXhwb3J0IGNvbnN0IGlzSXRlcmFibGUgICAgICAgICAgID0gPFQgPSBhbnk+KHg6IGFueSk6IHggaXMgSXRlcmFibGU8VD4gICAgICAgICAgID0+IGhhc0Z1bmNzKHgsIFN5bWJvbC5pdGVyYXRvcik7XG4vKiogQGlnbm9yZSAqLyBleHBvcnQgY29uc3QgaXNBc3luY0l0ZXJhYmxlICAgICAgPSA8VCA9IGFueT4oeDogYW55KTogeCBpcyBBc3luY0l0ZXJhYmxlPFQ+ICAgICAgPT4gaGFzRnVuY3MoeCwgU3ltYm9sLmFzeW5jSXRlcmF0b3IpO1xuLyoqIEBpZ25vcmUgKi8gZXhwb3J0IGNvbnN0IGlzQXJyb3dKU09OICAgICAgICAgID0gICAgICAgICAgKHg6IGFueSk6IHggaXMgQXJyb3dKU09OTGlrZSAgICAgICAgID0+IGhhc1Byb3BzKHgsIFsnc2NoZW1hJywgJ29iamVjdCddKTtcbi8qKiBAaWdub3JlICovIGV4cG9ydCBjb25zdCBpc0FycmF5TGlrZSAgICAgICAgICA9IDxUID0gYW55Pih4OiBhbnkpOiB4IGlzIEFycmF5TGlrZTxUPiAgICAgICAgICA9PiBoYXNQcm9wcyh4LCBbJ2xlbmd0aCcsICdudW1iZXInXSk7XG4vKiogQGlnbm9yZSAqLyBleHBvcnQgY29uc3QgaXNJdGVyYXRvclJlc3VsdCAgICAgPSA8VCA9IGFueT4oeDogYW55KTogeCBpcyBJdGVyYXRvclJlc3VsdDxUPiAgICAgPT4gaGFzUHJvcHMoeCwgWydkb25lJ10sIFsndmFsdWUnXSk7XG4vKiogQGlnbm9yZSAqLyBleHBvcnQgY29uc3QgaXNVbmRlcmx5aW5nU2luayAgICAgPSA8VCA9IGFueT4oeDogYW55KTogeCBpcyBVbmRlcmx5aW5nU2luazxUPiAgICAgPT4gaGFzRnVuY3MoeCwgJ2Fib3J0JywgJ2Nsb3NlJywgJ3N0YXJ0JywgJ3dyaXRlJyk7XG4vKiogQGlnbm9yZSAqLyBleHBvcnQgY29uc3QgaXNGaWxlSGFuZGxlICAgICAgICAgPSAgICAgICAgICAoeDogYW55KTogeCBpcyBGaWxlSGFuZGxlICAgICAgICAgICAgPT4gaGFzRnVuY3MoeCwgJ3N0YXQnKSAmJiBoYXNQcm9wcyh4LCBbJ2ZkJywgJ251bWJlciddKTtcbi8qKiBAaWdub3JlICovIGV4cG9ydCBjb25zdCBpc0ZTUmVhZFN0cmVhbSAgICAgICA9ICAgICAgICAgICh4OiBhbnkpOiB4IGlzIEZTUmVhZFN0cmVhbSAgICAgICAgICA9PiBpc1JlYWRhYmxlTm9kZVN0cmVhbSh4KSAmJiBoYXNQcm9wcyh4LCBbJ2J5dGVzUmVhZCcsICdudW1iZXInXSk7XG4vKiogQGlnbm9yZSAqLyBleHBvcnQgY29uc3QgaXNGZXRjaFJlc3BvbnNlICAgICAgPSAgICAgICAgICAoeDogYW55KTogeCBpcyBSZXNwb25zZSAgICAgICAgICAgICAgPT4gaGFzUHJvcHMoeCwgWydib2R5J10sIFsnYm9keVVzZWQnLCAnYm9vbGVhbiddLCBbJ29rJywgJ2Jvb2xlYW4nXSk7XG4vKiogQGlnbm9yZSAqLyBleHBvcnQgY29uc3QgaXNXcml0YWJsZURPTVN0cmVhbSAgPSA8VCA9IGFueT4oeDogYW55KTogeCBpcyBXcml0YWJsZVN0cmVhbTxUPiAgICAgPT4gISh4IGluc3RhbmNlb2YgUmVhZGFibGVJbnRlcm9wKSAmJiBoYXNGdW5jcyh4LCAnYWJvcnQnLCAnZ2V0V3JpdGVyJyk7XG4vKiogQGlnbm9yZSAqLyBleHBvcnQgY29uc3QgaXNSZWFkYWJsZURPTVN0cmVhbSAgPSA8VCA9IGFueT4oeDogYW55KTogeCBpcyBSZWFkYWJsZVN0cmVhbTxUPiAgICAgPT4gISh4IGluc3RhbmNlb2YgUmVhZGFibGVJbnRlcm9wKSAmJiBoYXNGdW5jcyh4LCAndGVlJywgJ2NhbmNlbCcsICdwaXBlVG8nLCAnZ2V0UmVhZGVyJyk7XG4vKiogQGlnbm9yZSAqLyBleHBvcnQgY29uc3QgaXNXcml0YWJsZU5vZGVTdHJlYW0gPSAgICAgICAgICAoeDogYW55KTogeCBpcyBOb2RlSlMuV3JpdGFibGVTdHJlYW0gPT4gISh4IGluc3RhbmNlb2YgUmVhZGFibGVJbnRlcm9wKSAmJiBoYXNGdW5jcyh4LCAnd3JpdGUnLCAnZW5kJykgJiYgaGFzUHJvcHMoeCwgWyd3cml0YWJsZScsICdib29sZWFuJ10pO1xuLyoqIEBpZ25vcmUgKi8gZXhwb3J0IGNvbnN0IGlzUmVhZGFibGVOb2RlU3RyZWFtID0gICAgICAgICAgKHg6IGFueSk6IHggaXMgTm9kZUpTLlJlYWRhYmxlU3RyZWFtID0+ICEoeCBpbnN0YW5jZW9mIFJlYWRhYmxlSW50ZXJvcCkgJiYgaGFzRnVuY3MoeCwgJ3JlYWQnLCAncGlwZScpICYmIGhhc1Byb3BzKHgsIFsncmVhZGFibGUnLCAnYm9vbGVhbiddKTtcbiJdfQ==
