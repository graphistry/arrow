// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { ReadableInterop } from '../io/interfaces';
/** @ignore */ const isObject = (x) => x != null && Object(x) === x;
/** @ignore */ const hasFuncs = (x, ...fn) => hasProps(x, ...fn.map((f) => [f, 'function']));
/** @ignore */ const hasProps = (x, ...ks) => isObject(x) && ks.every(([k, t]) => t ? (x[k] != null && typeof x[k] === t) : (k in x));
/** @ignore */ export const isPromise = (x) => hasFuncs(x, 'then');
/** @ignore */ export const isObservable = (x) => hasFuncs(x, 'subscribe');
/** @ignore */ export const isIterable = (x) => hasFuncs(x, Symbol.iterator);
/** @ignore */ export const isAsyncIterable = (x) => hasFuncs(x, Symbol.asyncIterator);
/** @ignore */ export const isArrowJSON = (x) => hasProps(x, ['schema', 'object']);
/** @ignore */ export const isArrayLike = (x) => hasProps(x, ['length', 'number']);
/** @ignore */ export const isIteratorResult = (x) => hasProps(x, ['done'], ['value']);
/** @ignore */ export const isUnderlyingSink = (x) => hasFuncs(x, 'abort', 'close', 'start', 'write');
/** @ignore */ export const isFileHandle = (x) => hasFuncs(x, 'stat') && hasProps(x, ['fd', 'number']);
/** @ignore */ export const isFSReadStream = (x) => isReadableNodeStream(x) && hasProps(x, ['bytesRead', 'number']);
/** @ignore */ export const isFetchResponse = (x) => hasProps(x, ['body'], ['bodyUsed', 'boolean'], ['ok', 'boolean']);
/** @ignore */ export const isWritableDOMStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'abort', 'getWriter');
/** @ignore */ export const isWritableNodeStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'write', 'cork', 'uncork', 'end');
/** @ignore */ export const isReadableDOMStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'tee', 'cancel', 'pipeTo', 'getReader');
/** @ignore */ export const isReadableNodeStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'read', 'pipe', 'unpipe', 'pause', 'resume', 'wrap');

//# sourceMappingURL=data:application/json;charset=utf8;base64,
