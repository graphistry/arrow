// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { toUint8Array } from './buffer';
import { TextDecoder as TextDecoderPolyfill, TextEncoder as TextEncoderPolyfill, } from 'text-encoding-utf-8';
/** @suppress {missingRequire} */
const _Buffer = typeof Buffer === 'function' ? Buffer : null;
const useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';
/** @ignore */
export const decodeUtf8 = ((TextDecoder) => {
    if (useNativeEncoders || !_Buffer) {
        const decoder = new TextDecoder();
        return decoder.decode.bind(decoder);
    }
    return (input) => {
        const { buffer, byteOffset, length } = toUint8Array(input);
        return _Buffer.from(buffer, byteOffset, length).toString();
    };
})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);
/** @ignore */
export const encodeUtf8 = ((TextEncoder) => {
    if (useNativeEncoders || !_Buffer) {
        const encoder = new TextEncoder();
        return encoder.encode.bind(encoder);
    }
    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));
})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvdXRmOC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFFckIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN4QyxPQUFPLEVBQ0gsV0FBVyxJQUFJLG1CQUFtQixFQUNsQyxXQUFXLElBQUksbUJBQW1CLEdBQ3JDLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsaUNBQWlDO0FBQ2pDLE1BQU0sT0FBTyxHQUFHLE9BQU8sTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDN0QsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLFdBQVcsS0FBSyxVQUFVLElBQUksT0FBTyxXQUFXLEtBQUssVUFBVSxDQUFDO0FBRWpHLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO0lBQ3ZDLElBQUksaUJBQWlCLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUNsQyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZDO0lBQ0QsT0FBTyxDQUFDLEtBQXdDLEVBQUUsRUFBRTtRQUNoRCxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0QsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0QsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUMsT0FBTyxXQUFXLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFFM0UsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUU7SUFDdkMsSUFBSSxpQkFBaUIsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUMvQixNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ2xDLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDdkM7SUFDRCxPQUFPLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDckUsQ0FBQyxDQUFDLENBQUMsT0FBTyxXQUFXLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMiLCJmaWxlIjoidXRpbC91dGY4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IHRvVWludDhBcnJheSB9IGZyb20gJy4vYnVmZmVyJztcbmltcG9ydCB7XG4gICAgVGV4dERlY29kZXIgYXMgVGV4dERlY29kZXJQb2x5ZmlsbCxcbiAgICBUZXh0RW5jb2RlciBhcyBUZXh0RW5jb2RlclBvbHlmaWxsLFxufSBmcm9tICd0ZXh0LWVuY29kaW5nLXV0Zi04JztcblxuLyoqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9ICovXG5jb25zdCBfQnVmZmVyID0gdHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyA/IEJ1ZmZlciA6IG51bGw7XG5jb25zdCB1c2VOYXRpdmVFbmNvZGVycyA9IHR5cGVvZiBUZXh0RGVjb2RlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgVGV4dEVuY29kZXIgPT09ICdmdW5jdGlvbic7XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgY29uc3QgZGVjb2RlVXRmOCA9ICgoVGV4dERlY29kZXIpID0+IHtcbiAgICBpZiAodXNlTmF0aXZlRW5jb2RlcnMgfHwgIV9CdWZmZXIpIHtcbiAgICAgICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICAgICAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUuYmluZChkZWNvZGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIChpbnB1dDogQXJyYXlCdWZmZXJMaWtlIHwgQXJyYXlCdWZmZXJWaWV3KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGggfSA9IHRvVWludDhBcnJheShpbnB1dCk7XG4gICAgICAgIHJldHVybiBfQnVmZmVyLmZyb20oYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpLnRvU3RyaW5nKCk7XG4gICAgfTtcbn0pKHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcgPyBUZXh0RGVjb2RlciA6IFRleHREZWNvZGVyUG9seWZpbGwpO1xuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZVV0ZjggPSAoKFRleHRFbmNvZGVyKSA9PiB7XG4gICAgaWYgKHVzZU5hdGl2ZUVuY29kZXJzIHx8ICFfQnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICAgICAgcmV0dXJuIGVuY29kZXIuZW5jb2RlLmJpbmQoZW5jb2Rlcik7XG4gICAgfVxuICAgIHJldHVybiAoaW5wdXQgPSAnJykgPT4gdG9VaW50OEFycmF5KF9CdWZmZXIuZnJvbShpbnB1dCwgJ3V0ZjgnKSk7XG59KSh0eXBlb2YgVGV4dEVuY29kZXIgIT09ICd1bmRlZmluZWQnID8gVGV4dEVuY29kZXIgOiBUZXh0RW5jb2RlclBvbHlmaWxsKTtcbiJdfQ==
