// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Vector } from '../vector';
import { Row } from '../vector/row';
export function clampIndex(source, index, then) {
    const length = source.length;
    const adjust = index > -1 ? index : (length + (index % length));
    return then ? then(source, adjust) : adjust;
}
let tmp;
export function clampRange(source, begin, end, then) {
    // Adjust args similar to Array.prototype.slice. Normalize begin/end to
    // clamp between 0 and length, and wrap around on negative indices, e.g.
    // slice(-1, 5) or slice(5, -1)
    let { length: len = 0 } = source;
    let lhs = typeof begin !== 'number' ? 0 : begin;
    let rhs = typeof end !== 'number' ? len : end;
    // wrap around on negative start/end positions
    (lhs < 0) && (lhs = ((lhs % len) + len) % len);
    (rhs < 0) && (rhs = ((rhs % len) + len) % len);
    // ensure lhs <= rhs
    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);
    // ensure rhs <= length
    (rhs > len) && (rhs = len);
    return then ? then(source, lhs, rhs) : [lhs, rhs];
}
export function createElementComparator(search) {
    // Compare primitives
    if (search == null || typeof search !== 'object') {
        return (value) => value === search;
    }
    // Compare Dates
    if (search instanceof Date) {
        const valueOfSearch = search.valueOf();
        return (value) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;
    }
    // Compare Array-likes
    if (Array.isArray(search) || ArrayBuffer.isView(search)) {
        const n = search.length;
        const fns = [];
        for (let i = -1; ++i < n;) {
            fns[i] = createElementComparator(search[i]);
        }
        return (value) => {
            if (!value || value.length !== n) {
                return false;
            }
            // Handle the case where the search element is an Array, but the
            // values are Rows or Vectors, e.g. list.indexOf(['foo', 'bar'])
            if ((value instanceof Row) || (value instanceof Vector)) {
                for (let i = -1, n = value.length; ++i < n;) {
                    if (!(fns[i](value.get(i)))) {
                        return false;
                    }
                }
                return true;
            }
            for (let i = -1, n = value.length; ++i < n;) {
                if (!(fns[i](value[i]))) {
                    return false;
                }
            }
            return true;
        };
    }
    // Compare Rows and Vectors
    if ((search instanceof Row) || (search instanceof Vector)) {
        const n = search.length;
        const C = search.constructor;
        const fns = [];
        for (let i = -1; ++i < n;) {
            fns[i] = createElementComparator(search.get(i));
        }
        return (value) => {
            if (!(value instanceof C)) {
                return false;
            }
            if (!(value.length === n)) {
                return false;
            }
            for (let i = -1; ++i < n;) {
                if (!(fns[i](value.get(i)))) {
                    return false;
                }
            }
            return true;
        };
    }
    // Compare non-empty Objects
    const keys = Object.keys(search);
    if (keys.length > 0) {
        const n = keys.length;
        const fns = [];
        for (let i = -1; ++i < n;) {
            fns[i] = createElementComparator(search[keys[i]]);
        }
        return (value) => {
            if (!value || typeof value !== 'object') {
                return false;
            }
            for (let i = -1; ++i < n;) {
                if (!(fns[i](value[keys[i]]))) {
                    return false;
                }
            }
            return true;
        };
    }
    // No valid comparator
    return () => false;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QztBQUN2QixDQUFDIiwiZmlsZSI6InV0aWwvdmVjdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBSb3cgfSBmcm9tICcuLi92ZWN0b3Ivcm93JztcblxudHlwZSBSYW5nZUxpa2UgPSB7IGxlbmd0aDogbnVtYmVyOyBzdHJpZGU/OiBudW1iZXIgfTtcbnR5cGUgQ2xhbXBUaGVuPFQgZXh0ZW5kcyBSYW5nZUxpa2U+ID0gKHNvdXJjZTogVCwgaW5kZXg6IG51bWJlcikgPT4gYW55O1xudHlwZSBDbGFtcFJhbmdlVGhlbjxUIGV4dGVuZHMgUmFuZ2VMaWtlPiA9IChzb3VyY2U6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcikgPT4gYW55O1xuXG5leHBvcnQgZnVuY3Rpb24gY2xhbXBJbmRleDxUIGV4dGVuZHMgUmFuZ2VMaWtlPihzb3VyY2U6IFQsIGluZGV4OiBudW1iZXIpOiBudW1iZXI7XG5leHBvcnQgZnVuY3Rpb24gY2xhbXBJbmRleDxUIGV4dGVuZHMgUmFuZ2VMaWtlLCBOIGV4dGVuZHMgQ2xhbXBUaGVuPFQ+ID0gQ2xhbXBUaGVuPFQ+Pihzb3VyY2U6IFQsIGluZGV4OiBudW1iZXIsIHRoZW46IE4pOiBSZXR1cm5UeXBlPE4+O1xuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wSW5kZXg8VCBleHRlbmRzIFJhbmdlTGlrZSwgTiBleHRlbmRzIENsYW1wVGhlbjxUPiA9IENsYW1wVGhlbjxUPj4oc291cmNlOiBULCBpbmRleDogbnVtYmVyLCB0aGVuPzogTikge1xuICAgIGNvbnN0IGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgY29uc3QgYWRqdXN0ID0gaW5kZXggPiAtMSA/IGluZGV4IDogKGxlbmd0aCArIChpbmRleCAlIGxlbmd0aCkpO1xuICAgIHJldHVybiB0aGVuID8gdGhlbihzb3VyY2UsIGFkanVzdCkgOiBhZGp1c3Q7XG59XG5cbmxldCB0bXA6IG51bWJlcjtcbmV4cG9ydCBmdW5jdGlvbiBjbGFtcFJhbmdlPFQgZXh0ZW5kcyBSYW5nZUxpa2U+KHNvdXJjZTogVCwgYmVnaW46IG51bWJlciB8IHVuZGVmaW5lZCwgZW5kOiBudW1iZXIgfCB1bmRlZmluZWQpOiBbbnVtYmVyLCBudW1iZXJdO1xuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wUmFuZ2U8VCBleHRlbmRzIFJhbmdlTGlrZSwgTiBleHRlbmRzIENsYW1wUmFuZ2VUaGVuPFQ+ID0gQ2xhbXBSYW5nZVRoZW48VD4+KHNvdXJjZTogVCwgYmVnaW46IG51bWJlciB8IHVuZGVmaW5lZCwgZW5kOiBudW1iZXIgfCB1bmRlZmluZWQsIHRoZW46IE4pOiBSZXR1cm5UeXBlPE4+O1xuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wUmFuZ2U8VCBleHRlbmRzIFJhbmdlTGlrZSwgTiBleHRlbmRzIENsYW1wUmFuZ2VUaGVuPFQ+ID0gQ2xhbXBSYW5nZVRoZW48VD4+KHNvdXJjZTogVCwgYmVnaW46IG51bWJlciB8IHVuZGVmaW5lZCwgZW5kOiBudW1iZXIgfCB1bmRlZmluZWQsIHRoZW4/OiBOKSB7XG5cbiAgICAvLyBBZGp1c3QgYXJncyBzaW1pbGFyIHRvIEFycmF5LnByb3RvdHlwZS5zbGljZS4gTm9ybWFsaXplIGJlZ2luL2VuZCB0b1xuICAgIC8vIGNsYW1wIGJldHdlZW4gMCBhbmQgbGVuZ3RoLCBhbmQgd3JhcCBhcm91bmQgb24gbmVnYXRpdmUgaW5kaWNlcywgZS5nLlxuICAgIC8vIHNsaWNlKC0xLCA1KSBvciBzbGljZSg1LCAtMSlcbiAgICBsZXQgeyBsZW5ndGg6IGxlbiA9IDAgfSA9IHNvdXJjZTtcbiAgICBsZXQgbGhzID0gdHlwZW9mIGJlZ2luICE9PSAnbnVtYmVyJyA/IDAgOiBiZWdpbjtcbiAgICBsZXQgcmhzID0gdHlwZW9mIGVuZCAhPT0gJ251bWJlcicgPyBsZW4gOiBlbmQ7XG4gICAgLy8gd3JhcCBhcm91bmQgb24gbmVnYXRpdmUgc3RhcnQvZW5kIHBvc2l0aW9uc1xuICAgIChsaHMgPCAwKSAmJiAobGhzID0gKChsaHMgJSBsZW4pICsgbGVuKSAlIGxlbik7XG4gICAgKHJocyA8IDApICYmIChyaHMgPSAoKHJocyAlIGxlbikgKyBsZW4pICUgbGVuKTtcbiAgICAvLyBlbnN1cmUgbGhzIDw9IHJoc1xuICAgIChyaHMgPCBsaHMpICYmICh0bXAgPSBsaHMsIGxocyA9IHJocywgcmhzID0gdG1wKTtcbiAgICAgLy8gZW5zdXJlIHJocyA8PSBsZW5ndGhcbiAgICAocmhzID4gbGVuKSAmJiAocmhzID0gbGVuKTtcblxuICAgIHJldHVybiB0aGVuID8gdGhlbihzb3VyY2UsIGxocywgcmhzKSA6IFtsaHMsIHJoc107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50Q29tcGFyYXRvcihzZWFyY2g6IGFueSkge1xuICAgIC8vIENvbXBhcmUgcHJpbWl0aXZlc1xuICAgIGlmIChzZWFyY2ggPT0gbnVsbCB8fCB0eXBlb2Ygc2VhcmNoICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gKHZhbHVlOiBhbnkpID0+IHZhbHVlID09PSBzZWFyY2g7XG4gICAgfVxuICAgIC8vIENvbXBhcmUgRGF0ZXNcbiAgICBpZiAoc2VhcmNoIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZU9mU2VhcmNoID0gc2VhcmNoLnZhbHVlT2YoKTtcbiAgICAgICAgcmV0dXJuICh2YWx1ZTogYW55KSA9PiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgPyAodmFsdWUudmFsdWVPZigpID09PSB2YWx1ZU9mU2VhcmNoKSA6IGZhbHNlO1xuICAgIH1cbiAgICAvLyBDb21wYXJlIEFycmF5LWxpa2VzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2VhcmNoKSB8fCBBcnJheUJ1ZmZlci5pc1ZpZXcoc2VhcmNoKSkge1xuICAgICAgICBjb25zdCBuID0gKHNlYXJjaCBhcyBhbnkpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZm5zID0gW10gYXMgKCh4OiBhbnkpID0+IGJvb2xlYW4pW107XG4gICAgICAgIGZvciAobGV0IGkgPSAtMTsgKytpIDwgbjspIHtcbiAgICAgICAgICAgIGZuc1tpXSA9IGNyZWF0ZUVsZW1lbnRDb21wYXJhdG9yKChzZWFyY2ggYXMgYW55KVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCAhPT0gbikgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgc2VhcmNoIGVsZW1lbnQgaXMgYW4gQXJyYXksIGJ1dCB0aGVcbiAgICAgICAgICAgIC8vIHZhbHVlcyBhcmUgUm93cyBvciBWZWN0b3JzLCBlLmcuIGxpc3QuaW5kZXhPZihbJ2ZvbycsICdiYXInXSlcbiAgICAgICAgICAgIGlmICgodmFsdWUgaW5zdGFuY2VvZiBSb3cpIHx8ICh2YWx1ZSBpbnN0YW5jZW9mIFZlY3RvcikpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGZuc1tpXSgodmFsdWUgYXMgYW55KS5nZXQoaSkpKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoZm5zW2ldKHZhbHVlW2ldKSkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ29tcGFyZSBSb3dzIGFuZCBWZWN0b3JzXG4gICAgaWYgKChzZWFyY2ggaW5zdGFuY2VvZiBSb3cpIHx8IChzZWFyY2ggaW5zdGFuY2VvZiBWZWN0b3IpKSB7XG4gICAgICAgIGNvbnN0IG4gPSBzZWFyY2gubGVuZ3RoO1xuICAgICAgICBjb25zdCBDID0gc2VhcmNoLmNvbnN0cnVjdG9yIGFzIGFueTtcbiAgICAgICAgY29uc3QgZm5zID0gW10gYXMgKCh4OiBhbnkpID0+IGJvb2xlYW4pW107XG4gICAgICAgIGZvciAobGV0IGkgPSAtMTsgKytpIDwgbjspIHtcbiAgICAgICAgICAgIGZuc1tpXSA9IGNyZWF0ZUVsZW1lbnRDb21wYXJhdG9yKChzZWFyY2ggYXMgYW55KS5nZXQoaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBDKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgIGlmICghKHZhbHVlLmxlbmd0aCA9PT0gbikpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gLTE7ICsraSA8IG47KSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoZm5zW2ldKHZhbHVlLmdldChpKSkpKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIENvbXBhcmUgbm9uLWVtcHR5IE9iamVjdHNcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc2VhcmNoKTtcbiAgICBpZiAoa2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG4gPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZm5zID0gW10gYXMgKCh4OiBhbnkpID0+IGJvb2xlYW4pW107XG4gICAgICAgIGZvciAobGV0IGkgPSAtMTsgKytpIDwgbjspIHtcbiAgICAgICAgICAgIGZuc1tpXSA9IGNyZWF0ZUVsZW1lbnRDb21wYXJhdG9yKHNlYXJjaFtrZXlzW2ldXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gLTE7ICsraSA8IG47KSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoZm5zW2ldKHZhbHVlW2tleXNbaV1dKSkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gTm8gdmFsaWQgY29tcGFyYXRvclxuICAgIHJldHVybiAoKSA9PiBmYWxzZTtcbn1cbiJdfQ==
