"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = require("../schema");
const data_1 = require("../data");
const chunked_1 = require("../vector/chunked");
const recordbatch_1 = require("../recordbatch");
const noopBuf = new Uint8Array(0);
const nullBufs = (bitmapLength) => [
    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf
];
/** @ignore */
function alignChunkLengths(schema, chunks, length = chunks.reduce((l, c) => Math.max(l, c.length), 0)) {
    const bitmapLength = ((length + 63) & ~63) >> 3;
    return chunks.map((chunk, idx) => {
        const chunkLength = chunk ? chunk.length : 0;
        if (chunkLength === length) {
            return chunk;
        }
        const field = schema.fields[idx];
        if (!field.nullable) {
            schema.fields[idx] = field.clone({ nullable: true });
        }
        return chunk ? chunk._changeLengthAndBackfillNullBitmap(length)
            : new data_1.Data(field.type, 0, length, length, nullBufs(bitmapLength));
    });
}
exports.alignChunkLengths = alignChunkLengths;
/** @ignore */
function distributeColumnsIntoRecordBatches(columns) {
    return distributeVectorsIntoRecordBatches(new schema_1.Schema(columns.map(({ field }) => field)), columns);
}
exports.distributeColumnsIntoRecordBatches = distributeColumnsIntoRecordBatches;
/** @ignore */
function distributeVectorsIntoRecordBatches(schema, vecs) {
    return uniformlyDistributeChunksAcrossRecordBatches(schema, vecs.map((v) => v instanceof chunked_1.Chunked ? v.chunks.map((c) => c.data) : [v.data]));
}
exports.distributeVectorsIntoRecordBatches = distributeVectorsIntoRecordBatches;
/** @ignore */
function uniformlyDistributeChunksAcrossRecordBatches(schema, chunks) {
    let recordBatchesLen = 0;
    const recordBatches = [];
    const memo = { numChunks: chunks.reduce((n, c) => Math.max(n, c.length), 0) };
    for (let chunkIndex = -1; ++chunkIndex < memo.numChunks;) {
        const [sameLength, batchLength] = chunks.reduce((memo, chunks) => {
            const [same, batchLength] = memo;
            const chunk = chunks[chunkIndex];
            const chunkLength = chunk ? chunk.length : batchLength;
            isFinite(batchLength) && same && (memo[0] = chunkLength === batchLength);
            memo[1] = Math.min(batchLength, chunkLength);
            return memo;
        }, [true, Number.POSITIVE_INFINITY]);
        if (!isFinite(batchLength) || (sameLength && batchLength <= 0)) {
            continue;
        }
        recordBatches[recordBatchesLen++] = new recordbatch_1.RecordBatch(schema, batchLength, sameLength ? gatherChunksSameLength(schema, chunkIndex, batchLength, chunks) :
            gatherChunksDiffLength(schema, chunkIndex, batchLength, chunks, memo));
    }
    return [schema, recordBatches];
}
exports.uniformlyDistributeChunksAcrossRecordBatches = uniformlyDistributeChunksAcrossRecordBatches;
/** @ignore */
function gatherChunksSameLength(schema, chunkIndex, length, chunks) {
    const bitmapLength = ((length + 63) & ~63) >> 3;
    return chunks.map((chunks, idx) => {
        const chunk = chunks[chunkIndex];
        if (chunk) {
            return chunk;
        }
        const field = schema.fields[idx];
        if (!field.nullable) {
            schema.fields[idx] = field.clone({ nullable: true });
        }
        return new data_1.Data(field.type, 0, length, length, nullBufs(bitmapLength));
    });
}
/** @ignore */
function gatherChunksDiffLength(schema, chunkIndex, length, chunks, memo) {
    const bitmapLength = ((length + 63) & ~63) >> 3;
    return chunks.map((chunks, idx) => {
        const chunk = chunks[chunkIndex];
        const chunkLength = chunk ? chunk.length : 0;
        if (chunkLength === length) {
            return chunk;
        }
        if (chunkLength > length) {
            memo.numChunks = Math.max(memo.numChunks, chunks.length + 1);
            chunks.splice(chunkIndex + 1, 0, chunk.slice(length, chunkLength - length));
            return chunk.slice(0, length);
        }
        const field = schema.fields[idx];
        if (!field.nullable) {
            schema.fields[idx] = field.clone({ nullable: true });
        }
        return chunk ? chunk._changeLengthAndBackfillNullBitmap(length)
            : new data_1.Data(field.type, 0, length, length, nullBufs(bitmapLength));
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
