"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const data_1 = require("../data");
const schema_1 = require("../schema");
const chunked_1 = require("../vector/chunked");
const recordbatch_1 = require("../recordbatch");
const noopBuf = new Uint8Array(0);
const nullBufs = (bitmapLength) => [
    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf
];
/** @ignore */
function ensureSameLengthData(schema, chunks, batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)) {
    let data;
    let field;
    let i = -1, n = chunks.length;
    const fields = [...schema.fields];
    const batchData = [];
    const bitmapLength = ((batchLength + 63) & ~63) >> 3;
    while (++i < n) {
        if ((data = chunks[i]) && data.length === batchLength) {
            batchData[i] = data;
        }
        else {
            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }));
            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)
                : new data_1.Data(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength));
        }
    }
    return [new schema_1.Schema(fields), batchLength, batchData];
}
exports.ensureSameLengthData = ensureSameLengthData;
/** @ignore */
function distributeColumnsIntoRecordBatches(columns) {
    return distributeVectorsIntoRecordBatches(new schema_1.Schema(columns.map(({ field }) => field)), columns);
}
exports.distributeColumnsIntoRecordBatches = distributeColumnsIntoRecordBatches;
/** @ignore */
function distributeVectorsIntoRecordBatches(schema, vecs) {
    return uniformlyDistributeChunksAcrossRecordBatches(schema, vecs.map((v) => v instanceof chunked_1.Chunked ? v.chunks.map((c) => c.data) : [v.data]));
}
exports.distributeVectorsIntoRecordBatches = distributeVectorsIntoRecordBatches;
/** @ignore */
function uniformlyDistributeChunksAcrossRecordBatches(schema, columns) {
    const fields = [...schema.fields];
    const batchArgs = [];
    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };
    let numBatches = 0, batchLength = 0;
    let i = -1, numColumns = columns.length;
    let child, childData = [];
    while (memo.numBatches-- > 0) {
        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {
            childData[i] = child = columns[i].shift();
            batchLength = Math.min(batchLength, child ? child.length : batchLength);
        }
        if (isFinite(batchLength)) {
            childData = distributeChildData(fields, batchLength, childData, columns, memo);
            if (batchLength > 0) {
                batchArgs[numBatches++] = [batchLength, childData.slice()];
            }
        }
    }
    return [
        schema = new schema_1.Schema(fields, schema.metadata),
        batchArgs.map((xs) => new recordbatch_1.RecordBatch(schema, ...xs))
    ];
}
/** @ignore */
function distributeChildData(fields, batchLength, childData, columns, memo) {
    let data;
    let field;
    let length = 0, i = -1, n = columns.length;
    const bitmapLength = ((batchLength + 63) & ~63) >> 3;
    while (++i < n) {
        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {
            if (length === batchLength) {
                childData[i] = data;
            }
            else {
                childData[i] = data.slice(0, batchLength);
                data = data.slice(batchLength, length - batchLength);
                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));
            }
        }
        else {
            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }));
            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)
                : new data_1.Data(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength));
        }
    }
    return childData;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvcmVjb3JkYmF0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjs7QUFLckIsa0NBQXdDO0FBQ3hDLHNDQUEwQztBQUMxQywrQ0FBNEM7QUFDNUMsZ0RBQTZDO0FBRTdDLE1BQU0sT0FBTyxHQUFHLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLE1BQU0sUUFBUSxHQUFHLENBQUMsWUFBb0IsRUFBRSxFQUFFLENBQVc7SUFDakQsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLFVBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRSxPQUFPO0NBQzFDLENBQUM7QUFFbEIsY0FBYztBQUNkLFNBQWdCLG9CQUFvQixDQUNoQyxNQUFpQixFQUNqQixNQUEwQixFQUMxQixXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFL0QsSUFBSSxJQUFzQixDQUFDO0lBQzNCLElBQUksS0FBd0IsQ0FBQztJQUM3QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM5QixNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sU0FBUyxHQUFHLEVBQXdCLENBQUM7SUFDM0MsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyRCxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNaLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxXQUFXLEVBQUU7WUFDbkQsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUN2QjthQUFNO1lBQ0gsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQXNCLENBQUMsQ0FBQztZQUN2RyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsV0FBVyxDQUFDO2dCQUN0RSxDQUFDLENBQUMsSUFBSSxXQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsWUFBWSxDQUFDLENBQXFCLENBQUM7U0FDdkc7S0FDSjtJQUNELE9BQU8sQ0FBQyxJQUFJLGVBQU0sQ0FBSSxNQUFNLENBQUMsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUE0QyxDQUFDO0FBQ3RHLENBQUM7QUFyQkQsb0RBcUJDO0FBRUQsY0FBYztBQUNkLFNBQWdCLGtDQUFrQyxDQUE4QyxPQUE2QjtJQUN6SCxPQUFPLGtDQUFrQyxDQUFJLElBQUksZUFBTSxDQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVHLENBQUM7QUFGRCxnRkFFQztBQUVELGNBQWM7QUFDZCxTQUFnQixrQ0FBa0MsQ0FBOEMsTUFBaUIsRUFBRSxJQUFrRDtJQUNqSyxPQUFPLDRDQUE0QyxDQUFJLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFlBQVksaUJBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25KLENBQUM7QUFGRCxnRkFFQztBQUVELGNBQWM7QUFDZCxTQUFTLDRDQUE0QyxDQUE4QyxNQUFpQixFQUFFLE9BQTZCO0lBRS9JLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsTUFBTSxTQUFTLEdBQUcsRUFBb0MsQ0FBQztJQUN2RCxNQUFNLElBQUksR0FBRyxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFaEYsSUFBSSxVQUFVLEdBQUcsQ0FBQyxFQUFFLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDcEMsSUFBSSxDQUFDLEdBQVcsQ0FBQyxDQUFDLEVBQUUsVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDaEQsSUFBSSxLQUF1QixFQUFFLFNBQVMsR0FBdUIsRUFBRSxDQUFDO0lBRWhFLE9BQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsRUFBRTtRQUUxQixLQUFLLFdBQVcsR0FBRyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLFVBQVUsR0FBRztZQUNwRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUcsQ0FBQztZQUMzQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUMzRTtRQUVELElBQUksUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3ZCLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDL0UsSUFBSSxXQUFXLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQixTQUFTLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUM5RDtTQUNKO0tBQ0o7SUFDRCxPQUFPO1FBQ0gsTUFBTSxHQUFHLElBQUksZUFBTSxDQUFJLE1BQU0sRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQy9DLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUkseUJBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztLQUN4RCxDQUFDO0FBQ04sQ0FBQztBQUVELGNBQWM7QUFDZCxTQUFTLG1CQUFtQixDQUE4QyxNQUEyQixFQUFFLFdBQW1CLEVBQUUsU0FBNkIsRUFBRSxPQUE2QixFQUFFLElBQTRCO0lBQ2xOLElBQUksSUFBc0IsQ0FBQztJQUMzQixJQUFJLEtBQXdCLENBQUM7SUFDN0IsSUFBSSxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUMzQyxNQUFNLFlBQVksR0FBRyxDQUFDLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JELE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ1osSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsRUFBRTtZQUNsRSxJQUFJLE1BQU0sS0FBSyxXQUFXLEVBQUU7Z0JBQ3hCLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7YUFDdkI7aUJBQU07Z0JBQ0gsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO2dCQUMxQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsTUFBTSxHQUFHLFdBQVcsQ0FBQyxDQUFDO2dCQUNyRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDekU7U0FDSjthQUFNO1lBQ0gsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQXNCLENBQUMsQ0FBQztZQUNuRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsV0FBVyxDQUFDO2dCQUN0RSxDQUFDLENBQUMsSUFBSSxXQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsWUFBWSxDQUFDLENBQXFCLENBQUM7U0FDdkc7S0FDSjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ3JCLENBQUMiLCJmaWxlIjoidXRpbC9yZWNvcmRiYXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBDb2x1bW4gfSBmcm9tICcuLi9jb2x1bW4nO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgeyBEYXRhLCBCdWZmZXJzIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBTY2hlbWEsIEZpZWxkIH0gZnJvbSAnLi4vc2NoZW1hJztcbmltcG9ydCB7IENodW5rZWQgfSBmcm9tICcuLi92ZWN0b3IvY2h1bmtlZCc7XG5pbXBvcnQgeyBSZWNvcmRCYXRjaCB9IGZyb20gJy4uL3JlY29yZGJhdGNoJztcblxuY29uc3Qgbm9vcEJ1ZiA9IG5ldyBVaW50OEFycmF5KDApO1xuY29uc3QgbnVsbEJ1ZnMgPSAoYml0bWFwTGVuZ3RoOiBudW1iZXIpID0+IDx1bmtub3duPiBbXG4gICAgbm9vcEJ1Ziwgbm9vcEJ1ZiwgbmV3IFVpbnQ4QXJyYXkoYml0bWFwTGVuZ3RoKSwgbm9vcEJ1ZlxuXSBhcyBCdWZmZXJzPGFueT47XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlU2FtZUxlbmd0aERhdGE8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4oXG4gICAgc2NoZW1hOiBTY2hlbWE8VD4sXG4gICAgY2h1bmtzOiBEYXRhPFRba2V5b2YgVF0+W10sXG4gICAgYmF0Y2hMZW5ndGggPSBjaHVua3MucmVkdWNlKChsLCBjKSA9PiBNYXRoLm1heChsLCBjLmxlbmd0aCksIDApXG4pIHtcbiAgICBsZXQgZGF0YTogRGF0YTxUW2tleW9mIFRdPjtcbiAgICBsZXQgZmllbGQ6IEZpZWxkPFRba2V5b2YgVF0+O1xuICAgIGxldCBpID0gLTEsIG4gPSBjaHVua3MubGVuZ3RoO1xuICAgIGNvbnN0IGZpZWxkcyA9IFsuLi5zY2hlbWEuZmllbGRzXTtcbiAgICBjb25zdCBiYXRjaERhdGEgPSBbXSBhcyBEYXRhPFRba2V5b2YgVF0+W107XG4gICAgY29uc3QgYml0bWFwTGVuZ3RoID0gKChiYXRjaExlbmd0aCArIDYzKSAmIH42MykgPj4gMztcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoKGRhdGEgPSBjaHVua3NbaV0pICYmIGRhdGEubGVuZ3RoID09PSBiYXRjaExlbmd0aCkge1xuICAgICAgICAgICAgYmF0Y2hEYXRhW2ldID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIChmaWVsZCA9IGZpZWxkc1tpXSkubnVsbGFibGUgfHwgKGZpZWxkc1tpXSA9IGZpZWxkc1tpXS5jbG9uZSh7IG51bGxhYmxlOiB0cnVlIH0pIGFzIEZpZWxkPFRba2V5b2YgVF0+KTtcbiAgICAgICAgICAgIGJhdGNoRGF0YVtpXSA9IGRhdGEgPyBkYXRhLl9jaGFuZ2VMZW5ndGhBbmRCYWNrZmlsbE51bGxCaXRtYXAoYmF0Y2hMZW5ndGgpXG4gICAgICAgICAgICAgICAgOiBuZXcgRGF0YShmaWVsZC50eXBlLCAwLCBiYXRjaExlbmd0aCwgYmF0Y2hMZW5ndGgsIG51bGxCdWZzKGJpdG1hcExlbmd0aCkpIGFzIERhdGE8VFtrZXlvZiBUXT47XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFtuZXcgU2NoZW1hPFQ+KGZpZWxkcyksIGJhdGNoTGVuZ3RoLCBiYXRjaERhdGFdIGFzIFtTY2hlbWE8VD4sIG51bWJlciwgRGF0YTxUW2tleW9mIFRdPltdXTtcbn1cblxuLyoqIEBpZ25vcmUgKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXN0cmlidXRlQ29sdW1uc0ludG9SZWNvcmRCYXRjaGVzPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+KGNvbHVtbnM6IENvbHVtbjxUW2tleW9mIFRdPltdKTogW1NjaGVtYTxUPiwgUmVjb3JkQmF0Y2g8VD5bXV0ge1xuICAgIHJldHVybiBkaXN0cmlidXRlVmVjdG9yc0ludG9SZWNvcmRCYXRjaGVzPFQ+KG5ldyBTY2hlbWE8VD4oY29sdW1ucy5tYXAoKHsgZmllbGQgfSkgPT4gZmllbGQpKSwgY29sdW1ucyk7XG59XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgZnVuY3Rpb24gZGlzdHJpYnV0ZVZlY3RvcnNJbnRvUmVjb3JkQmF0Y2hlczxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PihzY2hlbWE6IFNjaGVtYTxUPiwgdmVjczogKFZlY3RvcjxUW2tleW9mIFRdPiB8IENodW5rZWQ8VFtrZXlvZiBUXT4pW10pOiBbU2NoZW1hPFQ+LCBSZWNvcmRCYXRjaDxUPltdXSB7XG4gICAgcmV0dXJuIHVuaWZvcm1seURpc3RyaWJ1dGVDaHVua3NBY3Jvc3NSZWNvcmRCYXRjaGVzPFQ+KHNjaGVtYSwgdmVjcy5tYXAoKHYpID0+IHYgaW5zdGFuY2VvZiBDaHVua2VkID8gdi5jaHVua3MubWFwKChjKSA9PiBjLmRhdGEpIDogW3YuZGF0YV0pKTtcbn1cblxuLyoqIEBpZ25vcmUgKi9cbmZ1bmN0aW9uIHVuaWZvcm1seURpc3RyaWJ1dGVDaHVua3NBY3Jvc3NSZWNvcmRCYXRjaGVzPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+KHNjaGVtYTogU2NoZW1hPFQ+LCBjb2x1bW5zOiBEYXRhPFRba2V5b2YgVF0+W11bXSk6IFtTY2hlbWE8VD4sIFJlY29yZEJhdGNoPFQ+W11dIHtcblxuICAgIGNvbnN0IGZpZWxkcyA9IFsuLi5zY2hlbWEuZmllbGRzXTtcbiAgICBjb25zdCBiYXRjaEFyZ3MgPSBbXSBhcyBbbnVtYmVyLCBEYXRhPFRba2V5b2YgVF0+W11dW107XG4gICAgY29uc3QgbWVtbyA9IHsgbnVtQmF0Y2hlczogY29sdW1ucy5yZWR1Y2UoKG4sIGMpID0+IE1hdGgubWF4KG4sIGMubGVuZ3RoKSwgMCkgfTtcblxuICAgIGxldCBudW1CYXRjaGVzID0gMCwgYmF0Y2hMZW5ndGggPSAwO1xuICAgIGxldCBpOiBudW1iZXIgPSAtMSwgbnVtQ29sdW1ucyA9IGNvbHVtbnMubGVuZ3RoO1xuICAgIGxldCBjaGlsZDogRGF0YTxUW2tleW9mIFRdPiwgY2hpbGREYXRhOiBEYXRhPFRba2V5b2YgVF0+W10gPSBbXTtcblxuICAgIHdoaWxlIChtZW1vLm51bUJhdGNoZXMtLSA+IDApIHtcblxuICAgICAgICBmb3IgKGJhdGNoTGVuZ3RoID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBpID0gLTE7ICsraSA8IG51bUNvbHVtbnM7KSB7XG4gICAgICAgICAgICBjaGlsZERhdGFbaV0gPSBjaGlsZCA9IGNvbHVtbnNbaV0uc2hpZnQoKSE7XG4gICAgICAgICAgICBiYXRjaExlbmd0aCA9IE1hdGgubWluKGJhdGNoTGVuZ3RoLCBjaGlsZCA/IGNoaWxkLmxlbmd0aCA6IGJhdGNoTGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0Zpbml0ZShiYXRjaExlbmd0aCkpIHtcbiAgICAgICAgICAgIGNoaWxkRGF0YSA9IGRpc3RyaWJ1dGVDaGlsZERhdGEoZmllbGRzLCBiYXRjaExlbmd0aCwgY2hpbGREYXRhLCBjb2x1bW5zLCBtZW1vKTtcbiAgICAgICAgICAgIGlmIChiYXRjaExlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBiYXRjaEFyZ3NbbnVtQmF0Y2hlcysrXSA9IFtiYXRjaExlbmd0aCwgY2hpbGREYXRhLnNsaWNlKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgIHNjaGVtYSA9IG5ldyBTY2hlbWE8VD4oZmllbGRzLCBzY2hlbWEubWV0YWRhdGEpLFxuICAgICAgICBiYXRjaEFyZ3MubWFwKCh4cykgPT4gbmV3IFJlY29yZEJhdGNoKHNjaGVtYSwgLi4ueHMpKVxuICAgIF07XG59XG5cbi8qKiBAaWdub3JlICovXG5mdW5jdGlvbiBkaXN0cmlidXRlQ2hpbGREYXRhPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+KGZpZWxkczogRmllbGQ8VFtrZXlvZiBUXT5bXSwgYmF0Y2hMZW5ndGg6IG51bWJlciwgY2hpbGREYXRhOiBEYXRhPFRba2V5b2YgVF0+W10sIGNvbHVtbnM6IERhdGE8VFtrZXlvZiBUXT5bXVtdLCBtZW1vOiB7IG51bUJhdGNoZXM6IG51bWJlciB9KSB7XG4gICAgbGV0IGRhdGE6IERhdGE8VFtrZXlvZiBUXT47XG4gICAgbGV0IGZpZWxkOiBGaWVsZDxUW2tleW9mIFRdPjtcbiAgICBsZXQgbGVuZ3RoID0gMCwgaSA9IC0xLCBuID0gY29sdW1ucy5sZW5ndGg7XG4gICAgY29uc3QgYml0bWFwTGVuZ3RoID0gKChiYXRjaExlbmd0aCArIDYzKSAmIH42MykgPj4gMztcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoKGRhdGEgPSBjaGlsZERhdGFbaV0pICYmICgobGVuZ3RoID0gZGF0YS5sZW5ndGgpID49IGJhdGNoTGVuZ3RoKSkge1xuICAgICAgICAgICAgaWYgKGxlbmd0aCA9PT0gYmF0Y2hMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjaGlsZERhdGFbaV0gPSBkYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaGlsZERhdGFbaV0gPSBkYXRhLnNsaWNlKDAsIGJhdGNoTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGF0YS5zbGljZShiYXRjaExlbmd0aCwgbGVuZ3RoIC0gYmF0Y2hMZW5ndGgpO1xuICAgICAgICAgICAgICAgIG1lbW8ubnVtQmF0Y2hlcyA9IE1hdGgubWF4KG1lbW8ubnVtQmF0Y2hlcywgY29sdW1uc1tpXS51bnNoaWZ0KGRhdGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIChmaWVsZCA9IGZpZWxkc1tpXSkubnVsbGFibGUgfHwgKGZpZWxkc1tpXSA9IGZpZWxkLmNsb25lKHsgbnVsbGFibGU6IHRydWUgfSkgYXMgRmllbGQ8VFtrZXlvZiBUXT4pO1xuICAgICAgICAgICAgY2hpbGREYXRhW2ldID0gZGF0YSA/IGRhdGEuX2NoYW5nZUxlbmd0aEFuZEJhY2tmaWxsTnVsbEJpdG1hcChiYXRjaExlbmd0aClcbiAgICAgICAgICAgICAgICA6IG5ldyBEYXRhKGZpZWxkLnR5cGUsIDAsIGJhdGNoTGVuZ3RoLCBiYXRjaExlbmd0aCwgbnVsbEJ1ZnMoYml0bWFwTGVuZ3RoKSkgYXMgRGF0YTxUW2tleW9mIFRdPjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hpbGREYXRhO1xufVxuIl19
