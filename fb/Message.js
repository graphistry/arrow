"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
const NS16187549871986683199 = require("./Schema");
var org;
(function (org) {
    var apache;
    (function (apache) {
        var arrow;
        (function (arrow) {
            var flatbuf;
            (function (flatbuf) {
                flatbuf.Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;
            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
        })(arrow = apache.arrow || (apache.arrow = {}));
    })(apache = org.apache || (org.apache = {}));
})(org = exports.org || (exports.org = {}));
/**
 * ----------------------------------------------------------------------
 * The root Message type
 * This union enables us to easily send different message types without
 * redundant storage, and in the future we can easily add new message types.
 *
 * Arrow implementations do not need to implement all of the message types,
 * which may include experimental metadata types. For maximum compatibility,
 * it is best to send data using RecordBatch
 *
 * @enum
 */
(function (org) {
    var apache;
    (function (apache) {
        var arrow;
        (function (arrow) {
            var flatbuf;
            (function (flatbuf) {
                let MessageHeader;
                (function (MessageHeader) {
                    MessageHeader[MessageHeader["NONE"] = 0] = "NONE";
                    MessageHeader[MessageHeader["Schema"] = 1] = "Schema";
                    MessageHeader[MessageHeader["DictionaryBatch"] = 2] = "DictionaryBatch";
                    MessageHeader[MessageHeader["RecordBatch"] = 3] = "RecordBatch";
                    MessageHeader[MessageHeader["Tensor"] = 4] = "Tensor";
                })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));
            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
        })(arrow = apache.arrow || (apache.arrow = {}));
    })(apache = org.apache || (org.apache = {}));
})(org = exports.org || (exports.org = {}));
/**
 * ----------------------------------------------------------------------
 * Data structures for describing a table row batch (a collection of
 * equal-length Arrow arrays)
 * Metadata about a field at some level of a nested type tree (but not
 * its children).
 *
 * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]
 * would have {length: 5, null_count: 2} for its List node, and {length: 6,
 * null_count: 0} for its Int16 node, as separate FieldNode structs
 *
 * @constructor
 */
(function (org) {
    var apache;
    (function (apache) {
        var arrow;
        (function (arrow) {
            var flatbuf;
            (function (flatbuf) {
                class FieldNode {
                    constructor() {
                        /**
                         * @type {number}
                         */
                        this.bb_pos = 0;
                    }
                    /**
                     * @param {number} i
                     * @param {flatbuffers.ByteBuffer} bb
                     * @returns {FieldNode}
                     */
                    __init(i, bb) {
                        this.bb_pos = i;
                        this.bb = bb;
                        return this;
                    }
                    /**
                     * The number of value slots in the Arrow array at this level of a nested
                     * tree
                     *
                     * @returns {flatbuffers.Long}
                     */
                    length() {
                        return this.bb.readInt64(this.bb_pos);
                    }
                    /**
                     * The number of observed nulls. Fields with null_count == 0 may choose not
                     * to write their physical validity bitmap out as a materialized buffer,
                     * instead setting the length of the bitmap buffer to 0.
                     *
                     * @returns {flatbuffers.Long}
                     */
                    nullCount() {
                        return this.bb.readInt64(this.bb_pos + 8);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {flatbuffers.Long} length
                     * @param {flatbuffers.Long} null_count
                     * @returns {flatbuffers.Offset}
                     */
                    static createFieldNode(builder, length, null_count) {
                        builder.prep(8, 16);
                        builder.writeInt64(null_count);
                        builder.writeInt64(length);
                        return builder.offset();
                    }
                }
                flatbuf.FieldNode = FieldNode;
            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
        })(arrow = apache.arrow || (apache.arrow = {}));
    })(apache = org.apache || (org.apache = {}));
})(org = exports.org || (exports.org = {}));
/**
 * A data header describing the shared memory layout of a "record" or "row"
 * batch. Some systems call this a "row batch" internally and others a "record
 * batch".
 *
 * @constructor
 */
(function (org) {
    var apache;
    (function (apache) {
        var arrow;
        (function (arrow) {
            var flatbuf;
            (function (flatbuf) {
                class RecordBatch {
                    constructor() {
                        /**
                         * @type {number}
                         */
                        this.bb_pos = 0;
                    }
                    /**
                     * @param {number} i
                     * @param {flatbuffers.ByteBuffer} bb
                     * @returns {RecordBatch}
                     */
                    __init(i, bb) {
                        this.bb_pos = i;
                        this.bb = bb;
                        return this;
                    }
                    /**
                     * @param {flatbuffers.ByteBuffer} bb
                     * @param {RecordBatch=} obj
                     * @returns {RecordBatch}
                     */
                    static getRootAsRecordBatch(bb, obj) {
                        return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                    }
                    /**
                     * number of records / rows. The arrays in the batch should all have this
                     * length
                     *
                     * @returns {flatbuffers.Long}
                     */
                    length() {
                        let offset = this.bb.__offset(this.bb_pos, 4);
                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
                    }
                    /**
                     * Nodes correspond to the pre-ordered flattened logical schema
                     *
                     * @param {number} index
                     * @param {org.apache.arrow.flatbuf.FieldNode=} obj
                     * @returns {org.apache.arrow.flatbuf.FieldNode}
                     */
                    nodes(index, obj) {
                        let offset = this.bb.__offset(this.bb_pos, 6);
                        return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;
                    }
                    /**
                     * @returns {number}
                     */
                    nodesLength() {
                        let offset = this.bb.__offset(this.bb_pos, 6);
                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                    }
                    /**
                     * Buffers correspond to the pre-ordered flattened buffer tree
                     *
                     * The number of buffers appended to this list depends on the schema. For
                     * example, most primitive arrays will have 2 buffers, 1 for the validity
                     * bitmap and 1 for the values. For struct arrays, there will only be a
                     * single buffer for the validity (nulls) bitmap
                     *
                     * @param {number} index
                     * @param {org.apache.arrow.flatbuf.Buffer=} obj
                     * @returns {org.apache.arrow.flatbuf.Buffer}
                     */
                    buffers(index, obj) {
                        let offset = this.bb.__offset(this.bb_pos, 8);
                        return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;
                    }
                    /**
                     * @returns {number}
                     */
                    buffersLength() {
                        let offset = this.bb.__offset(this.bb_pos, 8);
                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     */
                    static startRecordBatch(builder) {
                        builder.startObject(3);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {flatbuffers.Long} length
                     */
                    static addLength(builder, length) {
                        builder.addFieldInt64(0, length, builder.createLong(0, 0));
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {flatbuffers.Offset} nodesOffset
                     */
                    static addNodes(builder, nodesOffset) {
                        builder.addFieldOffset(1, nodesOffset, 0);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {number} numElems
                     */
                    static startNodesVector(builder, numElems) {
                        builder.startVector(16, numElems, 8);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {flatbuffers.Offset} buffersOffset
                     */
                    static addBuffers(builder, buffersOffset) {
                        builder.addFieldOffset(2, buffersOffset, 0);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {number} numElems
                     */
                    static startBuffersVector(builder, numElems) {
                        builder.startVector(16, numElems, 8);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @returns {flatbuffers.Offset}
                     */
                    static endRecordBatch(builder) {
                        let offset = builder.endObject();
                        return offset;
                    }
                }
                flatbuf.RecordBatch = RecordBatch;
            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
        })(arrow = apache.arrow || (apache.arrow = {}));
    })(apache = org.apache || (org.apache = {}));
})(org = exports.org || (exports.org = {}));
/**
 * For sending dictionary encoding information. Any Field can be
 * dictionary-encoded, but in this case none of its children may be
 * dictionary-encoded.
 * There is one vector / column per dictionary, but that vector / column
 * may be spread across multiple dictionary batches by using the isDelta
 * flag
 *
 * @constructor
 */
(function (org) {
    var apache;
    (function (apache) {
        var arrow;
        (function (arrow) {
            var flatbuf;
            (function (flatbuf) {
                class DictionaryBatch {
                    constructor() {
                        /**
                         * @type {number}
                         */
                        this.bb_pos = 0;
                    }
                    /**
                     * @param {number} i
                     * @param {flatbuffers.ByteBuffer} bb
                     * @returns {DictionaryBatch}
                     */
                    __init(i, bb) {
                        this.bb_pos = i;
                        this.bb = bb;
                        return this;
                    }
                    /**
                     * @param {flatbuffers.ByteBuffer} bb
                     * @param {DictionaryBatch=} obj
                     * @returns {DictionaryBatch}
                     */
                    static getRootAsDictionaryBatch(bb, obj) {
                        return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                    }
                    /**
                     * @returns {flatbuffers.Long}
                     */
                    id() {
                        let offset = this.bb.__offset(this.bb_pos, 4);
                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
                    }
                    /**
                     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj
                     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}
                     */
                    data(obj) {
                        let offset = this.bb.__offset(this.bb_pos, 6);
                        return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
                    }
                    /**
                     * If isDelta is true the values in the dictionary are to be appended to a
                     * dictionary with the indicated id
                     *
                     * @returns {boolean}
                     */
                    isDelta() {
                        let offset = this.bb.__offset(this.bb_pos, 8);
                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     */
                    static startDictionaryBatch(builder) {
                        builder.startObject(3);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {flatbuffers.Long} id
                     */
                    static addId(builder, id) {
                        builder.addFieldInt64(0, id, builder.createLong(0, 0));
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {flatbuffers.Offset} dataOffset
                     */
                    static addData(builder, dataOffset) {
                        builder.addFieldOffset(1, dataOffset, 0);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {boolean} isDelta
                     */
                    static addIsDelta(builder, isDelta) {
                        builder.addFieldInt8(2, +isDelta, +false);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @returns {flatbuffers.Offset}
                     */
                    static endDictionaryBatch(builder) {
                        let offset = builder.endObject();
                        return offset;
                    }
                }
                flatbuf.DictionaryBatch = DictionaryBatch;
            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
        })(arrow = apache.arrow || (apache.arrow = {}));
    })(apache = org.apache || (org.apache = {}));
})(org = exports.org || (exports.org = {}));
/**
 * @constructor
 */
(function (org) {
    var apache;
    (function (apache) {
        var arrow;
        (function (arrow) {
            var flatbuf;
            (function (flatbuf) {
                class Message {
                    constructor() {
                        /**
                         * @type {number}
                         */
                        this.bb_pos = 0;
                    }
                    /**
                     * @param {number} i
                     * @param {flatbuffers.ByteBuffer} bb
                     * @returns {Message}
                     */
                    __init(i, bb) {
                        this.bb_pos = i;
                        this.bb = bb;
                        return this;
                    }
                    /**
                     * @param {flatbuffers.ByteBuffer} bb
                     * @param {Message=} obj
                     * @returns {Message}
                     */
                    static getRootAsMessage(bb, obj) {
                        return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                    }
                    /**
                     * @returns {org.apache.arrow.flatbuf.MetadataVersion}
                     */
                    version() {
                        let offset = this.bb.__offset(this.bb_pos, 4);
                        return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;
                    }
                    /**
                     * @returns {org.apache.arrow.flatbuf.MessageHeader}
                     */
                    headerType() {
                        let offset = this.bb.__offset(this.bb_pos, 6);
                        return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;
                    }
                    /**
                     * @param {flatbuffers.Table} obj
                     * @returns {?flatbuffers.Table}
                     */
                    header(obj) {
                        let offset = this.bb.__offset(this.bb_pos, 8);
                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
                    }
                    /**
                     * @returns {flatbuffers.Long}
                     */
                    bodyLength() {
                        let offset = this.bb.__offset(this.bb_pos, 10);
                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     */
                    static startMessage(builder) {
                        builder.startObject(4);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {org.apache.arrow.flatbuf.MetadataVersion} version
                     */
                    static addVersion(builder, version) {
                        builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType
                     */
                    static addHeaderType(builder, headerType) {
                        builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {flatbuffers.Offset} headerOffset
                     */
                    static addHeader(builder, headerOffset) {
                        builder.addFieldOffset(2, headerOffset, 0);
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {flatbuffers.Long} bodyLength
                     */
                    static addBodyLength(builder, bodyLength) {
                        builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @returns {flatbuffers.Offset}
                     */
                    static endMessage(builder) {
                        let offset = builder.endObject();
                        return offset;
                    }
                    /**
                     * @param {flatbuffers.Builder} builder
                     * @param {flatbuffers.Offset} offset
                     */
                    static finishMessageBuffer(builder, offset) {
                        builder.finish(offset);
                    }
                }
                flatbuf.Message = Message;
            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));
        })(arrow = apache.arrow || (apache.arrow = {}));
    })(apache = org.apache || (org.apache = {}));
})(org = exports.org || (exports.org = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LCJzb3VyY2VzQ29udGVudCI6WyIvLyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSB0aGUgRmxhdEJ1ZmZlcnMgY29tcGlsZXIsIGRvIG5vdCBtb2RpZnlcblxuaW1wb3J0IHsgZmxhdGJ1ZmZlcnMgfSBmcm9tICdmbGF0YnVmZmVycyc7XG5pbXBvcnQgKiBhcyBOUzE2MTg3NTQ5ODcxOTg2NjgzMTk5IGZyb20gJy4vU2NoZW1hJztcbmV4cG9ydCBuYW1lc3BhY2Ugb3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmIHtcbiAgZXhwb3J0IGltcG9ydCBTY2hlbWEgPSBOUzE2MTg3NTQ5ODcxOTg2NjgzMTk5Lm9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5TY2hlbWE7XG59XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRoZSByb290IE1lc3NhZ2UgdHlwZVxuICogVGhpcyB1bmlvbiBlbmFibGVzIHVzIHRvIGVhc2lseSBzZW5kIGRpZmZlcmVudCBtZXNzYWdlIHR5cGVzIHdpdGhvdXRcbiAqIHJlZHVuZGFudCBzdG9yYWdlLCBhbmQgaW4gdGhlIGZ1dHVyZSB3ZSBjYW4gZWFzaWx5IGFkZCBuZXcgbWVzc2FnZSB0eXBlcy5cbiAqXG4gKiBBcnJvdyBpbXBsZW1lbnRhdGlvbnMgZG8gbm90IG5lZWQgdG8gaW1wbGVtZW50IGFsbCBvZiB0aGUgbWVzc2FnZSB0eXBlcyxcbiAqIHdoaWNoIG1heSBpbmNsdWRlIGV4cGVyaW1lbnRhbCBtZXRhZGF0YSB0eXBlcy4gRm9yIG1heGltdW0gY29tcGF0aWJpbGl0eSxcbiAqIGl0IGlzIGJlc3QgdG8gc2VuZCBkYXRhIHVzaW5nIFJlY29yZEJhdGNoXG4gKlxuICogQGVudW1cbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBvcmcuYXBhY2hlLmFycm93LmZsYXRidWYge1xuICBleHBvcnQgZW51bSBNZXNzYWdlSGVhZGVyIHtcbiAgICBOT05FID0gMCxcbiAgICBTY2hlbWEgPSAxLFxuICAgIERpY3Rpb25hcnlCYXRjaCA9IDIsXG4gICAgUmVjb3JkQmF0Y2ggPSAzLFxuICAgIFRlbnNvciA9IDRcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgc3RydWN0dXJlcyBmb3IgZGVzY3JpYmluZyBhIHRhYmxlIHJvdyBiYXRjaCAoYSBjb2xsZWN0aW9uIG9mXG4gKiBlcXVhbC1sZW5ndGggQXJyb3cgYXJyYXlzKVxuICogTWV0YWRhdGEgYWJvdXQgYSBmaWVsZCBhdCBzb21lIGxldmVsIG9mIGEgbmVzdGVkIHR5cGUgdHJlZSAoYnV0IG5vdFxuICogaXRzIGNoaWxkcmVuKS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgYSBMaXN0PEludDE2PiB3aXRoIHZhbHVlcyBbWzEsIDIsIDNdLCBudWxsLCBbNF0sIFs1LCA2XSwgbnVsbF1cbiAqIHdvdWxkIGhhdmUge2xlbmd0aDogNSwgbnVsbF9jb3VudDogMn0gZm9yIGl0cyBMaXN0IG5vZGUsIGFuZCB7bGVuZ3RoOiA2LFxuICogbnVsbF9jb3VudDogMH0gZm9yIGl0cyBJbnQxNiBub2RlLCBhcyBzZXBhcmF0ZSBGaWVsZE5vZGUgc3RydWN0c1xuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgbmFtZXNwYWNlIG9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1ZiB7XG4gIGV4cG9ydCBjbGFzcyBGaWVsZE5vZGUge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtmbGF0YnVmZmVycy5CeXRlQnVmZmVyfVxuICAgICAqL1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBiYjogZmxhdGJ1ZmZlcnMuQnl0ZUJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgYmJfcG9zOiBudW1iZXIgPSAwO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpXG4gICAgICogQHBhcmFtIHtmbGF0YnVmZmVycy5CeXRlQnVmZmVyfSBiYlxuICAgICAqIEByZXR1cm5zIHtGaWVsZE5vZGV9XG4gICAgICovXG4gICAgX19pbml0KGk6IG51bWJlciwgYmI6IGZsYXRidWZmZXJzLkJ5dGVCdWZmZXIpOiBGaWVsZE5vZGUge1xuICAgICAgdGhpcy5iYl9wb3MgPSBpO1xuICAgICAgdGhpcy5iYiA9IGJiO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiB2YWx1ZSBzbG90cyBpbiB0aGUgQXJyb3cgYXJyYXkgYXQgdGhpcyBsZXZlbCBvZiBhIG5lc3RlZFxuICAgICAqIHRyZWVcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtmbGF0YnVmZmVycy5Mb25nfVxuICAgICAqL1xuICAgIGxlbmd0aCgpOiBmbGF0YnVmZmVycy5Mb25nIHtcbiAgICAgIHJldHVybiB0aGlzLmJiLnJlYWRJbnQ2NCh0aGlzLmJiX3Bvcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBvYnNlcnZlZCBudWxscy4gRmllbGRzIHdpdGggbnVsbF9jb3VudCA9PSAwIG1heSBjaG9vc2Ugbm90XG4gICAgICogdG8gd3JpdGUgdGhlaXIgcGh5c2ljYWwgdmFsaWRpdHkgYml0bWFwIG91dCBhcyBhIG1hdGVyaWFsaXplZCBidWZmZXIsXG4gICAgICogaW5zdGVhZCBzZXR0aW5nIHRoZSBsZW5ndGggb2YgdGhlIGJpdG1hcCBidWZmZXIgdG8gMC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtmbGF0YnVmZmVycy5Mb25nfVxuICAgICAqL1xuICAgIG51bGxDb3VudCgpOiBmbGF0YnVmZmVycy5Mb25nIHtcbiAgICAgIHJldHVybiB0aGlzLmJiLnJlYWRJbnQ2NCh0aGlzLmJiX3BvcyArIDgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuQnVpbGRlcn0gYnVpbGRlclxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuTG9uZ30gbGVuZ3RoXG4gICAgICogQHBhcmFtIHtmbGF0YnVmZmVycy5Mb25nfSBudWxsX2NvdW50XG4gICAgICogQHJldHVybnMge2ZsYXRidWZmZXJzLk9mZnNldH1cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlRmllbGROb2RlKGJ1aWxkZXI6IGZsYXRidWZmZXJzLkJ1aWxkZXIsIGxlbmd0aDogZmxhdGJ1ZmZlcnMuTG9uZywgbnVsbF9jb3VudDogZmxhdGJ1ZmZlcnMuTG9uZyk6IGZsYXRidWZmZXJzLk9mZnNldCB7XG4gICAgICBidWlsZGVyLnByZXAoOCwgMTYpO1xuICAgICAgYnVpbGRlci53cml0ZUludDY0KG51bGxfY291bnQpO1xuICAgICAgYnVpbGRlci53cml0ZUludDY0KGxlbmd0aCk7XG4gICAgICByZXR1cm4gYnVpbGRlci5vZmZzZXQoKTtcbiAgICB9XG5cbiAgfVxufVxuLyoqXG4gKiBBIGRhdGEgaGVhZGVyIGRlc2NyaWJpbmcgdGhlIHNoYXJlZCBtZW1vcnkgbGF5b3V0IG9mIGEgXCJyZWNvcmRcIiBvciBcInJvd1wiXG4gKiBiYXRjaC4gU29tZSBzeXN0ZW1zIGNhbGwgdGhpcyBhIFwicm93IGJhdGNoXCIgaW50ZXJuYWxseSBhbmQgb3RoZXJzIGEgXCJyZWNvcmRcbiAqIGJhdGNoXCIuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2Ugb3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmIHtcbiAgZXhwb3J0IGNsYXNzIFJlY29yZEJhdGNoIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7ZmxhdGJ1ZmZlcnMuQnl0ZUJ1ZmZlcn1cbiAgICAgKi9cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYmI6IGZsYXRidWZmZXJzLkJ5dGVCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGJiX3BvczogbnVtYmVyID0gMDtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaVxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuQnl0ZUJ1ZmZlcn0gYmJcbiAgICAgKiBAcmV0dXJucyB7UmVjb3JkQmF0Y2h9XG4gICAgICovXG4gICAgX19pbml0KGk6IG51bWJlciwgYmI6IGZsYXRidWZmZXJzLkJ5dGVCdWZmZXIpOiBSZWNvcmRCYXRjaCB7XG4gICAgICB0aGlzLmJiX3BvcyA9IGk7XG4gICAgICB0aGlzLmJiID0gYmI7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ZsYXRidWZmZXJzLkJ5dGVCdWZmZXJ9IGJiXG4gICAgICogQHBhcmFtIHtSZWNvcmRCYXRjaD19IG9ialxuICAgICAqIEByZXR1cm5zIHtSZWNvcmRCYXRjaH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0Um9vdEFzUmVjb3JkQmF0Y2goYmI6IGZsYXRidWZmZXJzLkJ5dGVCdWZmZXIsIG9iaj86IFJlY29yZEJhdGNoKTogUmVjb3JkQmF0Y2gge1xuICAgICAgcmV0dXJuIChvYmogfHwgbmV3IFJlY29yZEJhdGNoKS5fX2luaXQoYmIucmVhZEludDMyKGJiLnBvc2l0aW9uKCkpICsgYmIucG9zaXRpb24oKSwgYmIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG51bWJlciBvZiByZWNvcmRzIC8gcm93cy4gVGhlIGFycmF5cyBpbiB0aGUgYmF0Y2ggc2hvdWxkIGFsbCBoYXZlIHRoaXNcbiAgICAgKiBsZW5ndGhcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtmbGF0YnVmZmVycy5Mb25nfVxuICAgICAqL1xuICAgIGxlbmd0aCgpOiBmbGF0YnVmZmVycy5Mb25nIHtcbiAgICAgIGxldCBvZmZzZXQgPSB0aGlzLmJiLl9fb2Zmc2V0KHRoaXMuYmJfcG9zLCA0KTtcbiAgICAgIHJldHVybiBvZmZzZXQgPyB0aGlzLmJiLnJlYWRJbnQ2NCh0aGlzLmJiX3BvcyArIG9mZnNldCkgOiB0aGlzLmJiLmNyZWF0ZUxvbmcoMCwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm9kZXMgY29ycmVzcG9uZCB0byB0aGUgcHJlLW9yZGVyZWQgZmxhdHRlbmVkIGxvZ2ljYWwgc2NoZW1hXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICAgKiBAcGFyYW0ge29yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5GaWVsZE5vZGU9fSBvYmpcbiAgICAgKiBAcmV0dXJucyB7b3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLkZpZWxkTm9kZX1cbiAgICAgKi9cbiAgICBub2RlcyhpbmRleDogbnVtYmVyLCBvYmo/OiBvcmcuYXBhY2hlLmFycm93LmZsYXRidWYuRmllbGROb2RlKTogb3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLkZpZWxkTm9kZSB8IG51bGwge1xuICAgICAgbGV0IG9mZnNldCA9IHRoaXMuYmIuX19vZmZzZXQodGhpcy5iYl9wb3MsIDYpO1xuICAgICAgcmV0dXJuIG9mZnNldCA/IChvYmogfHwgbmV3IG9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5GaWVsZE5vZGUpLl9faW5pdCh0aGlzLmJiLl9fdmVjdG9yKHRoaXMuYmJfcG9zICsgb2Zmc2V0KSArIGluZGV4ICogMTYsIHRoaXMuYmIpIDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIG5vZGVzTGVuZ3RoKCk6IG51bWJlciB7XG4gICAgICBsZXQgb2Zmc2V0ID0gdGhpcy5iYi5fX29mZnNldCh0aGlzLmJiX3BvcywgNik7XG4gICAgICByZXR1cm4gb2Zmc2V0ID8gdGhpcy5iYi5fX3ZlY3Rvcl9sZW4odGhpcy5iYl9wb3MgKyBvZmZzZXQpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWZmZXJzIGNvcnJlc3BvbmQgdG8gdGhlIHByZS1vcmRlcmVkIGZsYXR0ZW5lZCBidWZmZXIgdHJlZVxuICAgICAqXG4gICAgICogVGhlIG51bWJlciBvZiBidWZmZXJzIGFwcGVuZGVkIHRvIHRoaXMgbGlzdCBkZXBlbmRzIG9uIHRoZSBzY2hlbWEuIEZvclxuICAgICAqIGV4YW1wbGUsIG1vc3QgcHJpbWl0aXZlIGFycmF5cyB3aWxsIGhhdmUgMiBidWZmZXJzLCAxIGZvciB0aGUgdmFsaWRpdHlcbiAgICAgKiBiaXRtYXAgYW5kIDEgZm9yIHRoZSB2YWx1ZXMuIEZvciBzdHJ1Y3QgYXJyYXlzLCB0aGVyZSB3aWxsIG9ubHkgYmUgYVxuICAgICAqIHNpbmdsZSBidWZmZXIgZm9yIHRoZSB2YWxpZGl0eSAobnVsbHMpIGJpdG1hcFxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAgICogQHBhcmFtIHtvcmcuYXBhY2hlLmFycm93LmZsYXRidWYuQnVmZmVyPX0gb2JqXG4gICAgICogQHJldHVybnMge29yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5CdWZmZXJ9XG4gICAgICovXG4gICAgYnVmZmVycyhpbmRleDogbnVtYmVyLCBvYmo/OiBOUzE2MTg3NTQ5ODcxOTg2NjgzMTk5Lm9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5CdWZmZXIpOiBOUzE2MTg3NTQ5ODcxOTg2NjgzMTk5Lm9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5CdWZmZXIgfCBudWxsIHtcbiAgICAgIGxldCBvZmZzZXQgPSB0aGlzLmJiLl9fb2Zmc2V0KHRoaXMuYmJfcG9zLCA4KTtcbiAgICAgIHJldHVybiBvZmZzZXQgPyAob2JqIHx8IG5ldyBOUzE2MTg3NTQ5ODcxOTg2NjgzMTk5Lm9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5CdWZmZXIpLl9faW5pdCh0aGlzLmJiLl9fdmVjdG9yKHRoaXMuYmJfcG9zICsgb2Zmc2V0KSArIGluZGV4ICogMTYsIHRoaXMuYmIpIDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIGJ1ZmZlcnNMZW5ndGgoKTogbnVtYmVyIHtcbiAgICAgIGxldCBvZmZzZXQgPSB0aGlzLmJiLl9fb2Zmc2V0KHRoaXMuYmJfcG9zLCA4KTtcbiAgICAgIHJldHVybiBvZmZzZXQgPyB0aGlzLmJiLl9fdmVjdG9yX2xlbih0aGlzLmJiX3BvcyArIG9mZnNldCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuQnVpbGRlcn0gYnVpbGRlclxuICAgICAqL1xuICAgIHN0YXRpYyBzdGFydFJlY29yZEJhdGNoKGJ1aWxkZXI6IGZsYXRidWZmZXJzLkJ1aWxkZXIpIHtcbiAgICAgIGJ1aWxkZXIuc3RhcnRPYmplY3QoMyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmbGF0YnVmZmVycy5CdWlsZGVyfSBidWlsZGVyXG4gICAgICogQHBhcmFtIHtmbGF0YnVmZmVycy5Mb25nfSBsZW5ndGhcbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkTGVuZ3RoKGJ1aWxkZXI6IGZsYXRidWZmZXJzLkJ1aWxkZXIsIGxlbmd0aDogZmxhdGJ1ZmZlcnMuTG9uZykge1xuICAgICAgYnVpbGRlci5hZGRGaWVsZEludDY0KDAsIGxlbmd0aCwgYnVpbGRlci5jcmVhdGVMb25nKDAsIDApKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ZsYXRidWZmZXJzLkJ1aWxkZXJ9IGJ1aWxkZXJcbiAgICAgKiBAcGFyYW0ge2ZsYXRidWZmZXJzLk9mZnNldH0gbm9kZXNPZmZzZXRcbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkTm9kZXMoYnVpbGRlcjogZmxhdGJ1ZmZlcnMuQnVpbGRlciwgbm9kZXNPZmZzZXQ6IGZsYXRidWZmZXJzLk9mZnNldCkge1xuICAgICAgYnVpbGRlci5hZGRGaWVsZE9mZnNldCgxLCBub2Rlc09mZnNldCwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmbGF0YnVmZmVycy5CdWlsZGVyfSBidWlsZGVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bUVsZW1zXG4gICAgICovXG4gICAgc3RhdGljIHN0YXJ0Tm9kZXNWZWN0b3IoYnVpbGRlcjogZmxhdGJ1ZmZlcnMuQnVpbGRlciwgbnVtRWxlbXM6IG51bWJlcikge1xuICAgICAgYnVpbGRlci5zdGFydFZlY3RvcigxNiwgbnVtRWxlbXMsIDgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuQnVpbGRlcn0gYnVpbGRlclxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuT2Zmc2V0fSBidWZmZXJzT2Zmc2V0XG4gICAgICovXG4gICAgc3RhdGljIGFkZEJ1ZmZlcnMoYnVpbGRlcjogZmxhdGJ1ZmZlcnMuQnVpbGRlciwgYnVmZmVyc09mZnNldDogZmxhdGJ1ZmZlcnMuT2Zmc2V0KSB7XG4gICAgICBidWlsZGVyLmFkZEZpZWxkT2Zmc2V0KDIsIGJ1ZmZlcnNPZmZzZXQsIDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuQnVpbGRlcn0gYnVpbGRlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1FbGVtc1xuICAgICAqL1xuICAgIHN0YXRpYyBzdGFydEJ1ZmZlcnNWZWN0b3IoYnVpbGRlcjogZmxhdGJ1ZmZlcnMuQnVpbGRlciwgbnVtRWxlbXM6IG51bWJlcikge1xuICAgICAgYnVpbGRlci5zdGFydFZlY3RvcigxNiwgbnVtRWxlbXMsIDgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuQnVpbGRlcn0gYnVpbGRlclxuICAgICAqIEByZXR1cm5zIHtmbGF0YnVmZmVycy5PZmZzZXR9XG4gICAgICovXG4gICAgc3RhdGljIGVuZFJlY29yZEJhdGNoKGJ1aWxkZXI6IGZsYXRidWZmZXJzLkJ1aWxkZXIpOiBmbGF0YnVmZmVycy5PZmZzZXQge1xuICAgICAgbGV0IG9mZnNldCA9IGJ1aWxkZXIuZW5kT2JqZWN0KCk7XG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cblxuICB9XG59XG4vKipcbiAqIEZvciBzZW5kaW5nIGRpY3Rpb25hcnkgZW5jb2RpbmcgaW5mb3JtYXRpb24uIEFueSBGaWVsZCBjYW4gYmVcbiAqIGRpY3Rpb25hcnktZW5jb2RlZCwgYnV0IGluIHRoaXMgY2FzZSBub25lIG9mIGl0cyBjaGlsZHJlbiBtYXkgYmVcbiAqIGRpY3Rpb25hcnktZW5jb2RlZC5cbiAqIFRoZXJlIGlzIG9uZSB2ZWN0b3IgLyBjb2x1bW4gcGVyIGRpY3Rpb25hcnksIGJ1dCB0aGF0IHZlY3RvciAvIGNvbHVtblxuICogbWF5IGJlIHNwcmVhZCBhY3Jvc3MgbXVsdGlwbGUgZGljdGlvbmFyeSBiYXRjaGVzIGJ5IHVzaW5nIHRoZSBpc0RlbHRhXG4gKiBmbGFnXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2Ugb3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmIHtcbiAgZXhwb3J0IGNsYXNzIERpY3Rpb25hcnlCYXRjaCB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge2ZsYXRidWZmZXJzLkJ5dGVCdWZmZXJ9XG4gICAgICovXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGJiOiBmbGF0YnVmZmVycy5CeXRlQnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBiYl9wb3M6IG51bWJlciA9IDA7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlcbiAgICAgKiBAcGFyYW0ge2ZsYXRidWZmZXJzLkJ5dGVCdWZmZXJ9IGJiXG4gICAgICogQHJldHVybnMge0RpY3Rpb25hcnlCYXRjaH1cbiAgICAgKi9cbiAgICBfX2luaXQoaTogbnVtYmVyLCBiYjogZmxhdGJ1ZmZlcnMuQnl0ZUJ1ZmZlcik6IERpY3Rpb25hcnlCYXRjaCB7XG4gICAgICB0aGlzLmJiX3BvcyA9IGk7XG4gICAgICB0aGlzLmJiID0gYmI7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ZsYXRidWZmZXJzLkJ5dGVCdWZmZXJ9IGJiXG4gICAgICogQHBhcmFtIHtEaWN0aW9uYXJ5QmF0Y2g9fSBvYmpcbiAgICAgKiBAcmV0dXJucyB7RGljdGlvbmFyeUJhdGNofVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRSb290QXNEaWN0aW9uYXJ5QmF0Y2goYmI6IGZsYXRidWZmZXJzLkJ5dGVCdWZmZXIsIG9iaj86IERpY3Rpb25hcnlCYXRjaCk6IERpY3Rpb25hcnlCYXRjaCB7XG4gICAgICByZXR1cm4gKG9iaiB8fCBuZXcgRGljdGlvbmFyeUJhdGNoKS5fX2luaXQoYmIucmVhZEludDMyKGJiLnBvc2l0aW9uKCkpICsgYmIucG9zaXRpb24oKSwgYmIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtmbGF0YnVmZmVycy5Mb25nfVxuICAgICAqL1xuICAgIGlkKCk6IGZsYXRidWZmZXJzLkxvbmcge1xuICAgICAgbGV0IG9mZnNldCA9IHRoaXMuYmIuX19vZmZzZXQodGhpcy5iYl9wb3MsIDQpO1xuICAgICAgcmV0dXJuIG9mZnNldCA/IHRoaXMuYmIucmVhZEludDY0KHRoaXMuYmJfcG9zICsgb2Zmc2V0KSA6IHRoaXMuYmIuY3JlYXRlTG9uZygwLCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge29yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5SZWNvcmRCYXRjaD19IG9ialxuICAgICAqIEByZXR1cm5zIHtvcmcuYXBhY2hlLmFycm93LmZsYXRidWYuUmVjb3JkQmF0Y2h8bnVsbH1cbiAgICAgKi9cbiAgICBkYXRhKG9iaj86IG9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5SZWNvcmRCYXRjaCk6IG9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5SZWNvcmRCYXRjaCB8IG51bGwge1xuICAgICAgbGV0IG9mZnNldCA9IHRoaXMuYmIuX19vZmZzZXQodGhpcy5iYl9wb3MsIDYpO1xuICAgICAgcmV0dXJuIG9mZnNldCA/IChvYmogfHwgbmV3IG9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5SZWNvcmRCYXRjaCkuX19pbml0KHRoaXMuYmIuX19pbmRpcmVjdCh0aGlzLmJiX3BvcyArIG9mZnNldCksIHRoaXMuYmIpIDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiBpc0RlbHRhIGlzIHRydWUgdGhlIHZhbHVlcyBpbiB0aGUgZGljdGlvbmFyeSBhcmUgdG8gYmUgYXBwZW5kZWQgdG8gYVxuICAgICAqIGRpY3Rpb25hcnkgd2l0aCB0aGUgaW5kaWNhdGVkIGlkXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0RlbHRhKCk6IGJvb2xlYW4ge1xuICAgICAgbGV0IG9mZnNldCA9IHRoaXMuYmIuX19vZmZzZXQodGhpcy5iYl9wb3MsIDgpO1xuICAgICAgcmV0dXJuIG9mZnNldCA/ICEhdGhpcy5iYi5yZWFkSW50OCh0aGlzLmJiX3BvcyArIG9mZnNldCkgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ZsYXRidWZmZXJzLkJ1aWxkZXJ9IGJ1aWxkZXJcbiAgICAgKi9cbiAgICBzdGF0aWMgc3RhcnREaWN0aW9uYXJ5QmF0Y2goYnVpbGRlcjogZmxhdGJ1ZmZlcnMuQnVpbGRlcikge1xuICAgICAgYnVpbGRlci5zdGFydE9iamVjdCgzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ZsYXRidWZmZXJzLkJ1aWxkZXJ9IGJ1aWxkZXJcbiAgICAgKiBAcGFyYW0ge2ZsYXRidWZmZXJzLkxvbmd9IGlkXG4gICAgICovXG4gICAgc3RhdGljIGFkZElkKGJ1aWxkZXI6IGZsYXRidWZmZXJzLkJ1aWxkZXIsIGlkOiBmbGF0YnVmZmVycy5Mb25nKSB7XG4gICAgICBidWlsZGVyLmFkZEZpZWxkSW50NjQoMCwgaWQsIGJ1aWxkZXIuY3JlYXRlTG9uZygwLCAwKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmbGF0YnVmZmVycy5CdWlsZGVyfSBidWlsZGVyXG4gICAgICogQHBhcmFtIHtmbGF0YnVmZmVycy5PZmZzZXR9IGRhdGFPZmZzZXRcbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkRGF0YShidWlsZGVyOiBmbGF0YnVmZmVycy5CdWlsZGVyLCBkYXRhT2Zmc2V0OiBmbGF0YnVmZmVycy5PZmZzZXQpIHtcbiAgICAgIGJ1aWxkZXIuYWRkRmllbGRPZmZzZXQoMSwgZGF0YU9mZnNldCwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmbGF0YnVmZmVycy5CdWlsZGVyfSBidWlsZGVyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc0RlbHRhXG4gICAgICovXG4gICAgc3RhdGljIGFkZElzRGVsdGEoYnVpbGRlcjogZmxhdGJ1ZmZlcnMuQnVpbGRlciwgaXNEZWx0YTogYm9vbGVhbikge1xuICAgICAgYnVpbGRlci5hZGRGaWVsZEludDgoMiwgK2lzRGVsdGEsICtmYWxzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmbGF0YnVmZmVycy5CdWlsZGVyfSBidWlsZGVyXG4gICAgICogQHJldHVybnMge2ZsYXRidWZmZXJzLk9mZnNldH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZW5kRGljdGlvbmFyeUJhdGNoKGJ1aWxkZXI6IGZsYXRidWZmZXJzLkJ1aWxkZXIpOiBmbGF0YnVmZmVycy5PZmZzZXQge1xuICAgICAgbGV0IG9mZnNldCA9IGJ1aWxkZXIuZW5kT2JqZWN0KCk7XG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cblxuICB9XG59XG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgbmFtZXNwYWNlIG9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1ZiB7XG4gIGV4cG9ydCBjbGFzcyBNZXNzYWdlIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7ZmxhdGJ1ZmZlcnMuQnl0ZUJ1ZmZlcn1cbiAgICAgKi9cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYmI6IGZsYXRidWZmZXJzLkJ5dGVCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGJiX3BvczogbnVtYmVyID0gMDtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaVxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuQnl0ZUJ1ZmZlcn0gYmJcbiAgICAgKiBAcmV0dXJucyB7TWVzc2FnZX1cbiAgICAgKi9cbiAgICBfX2luaXQoaTogbnVtYmVyLCBiYjogZmxhdGJ1ZmZlcnMuQnl0ZUJ1ZmZlcik6IE1lc3NhZ2Uge1xuICAgICAgdGhpcy5iYl9wb3MgPSBpO1xuICAgICAgdGhpcy5iYiA9IGJiO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmbGF0YnVmZmVycy5CeXRlQnVmZmVyfSBiYlxuICAgICAqIEBwYXJhbSB7TWVzc2FnZT19IG9ialxuICAgICAqIEByZXR1cm5zIHtNZXNzYWdlfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRSb290QXNNZXNzYWdlKGJiOiBmbGF0YnVmZmVycy5CeXRlQnVmZmVyLCBvYmo/OiBNZXNzYWdlKTogTWVzc2FnZSB7XG4gICAgICByZXR1cm4gKG9iaiB8fCBuZXcgTWVzc2FnZSkuX19pbml0KGJiLnJlYWRJbnQzMihiYi5wb3NpdGlvbigpKSArIGJiLnBvc2l0aW9uKCksIGJiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7b3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLk1ldGFkYXRhVmVyc2lvbn1cbiAgICAgKi9cbiAgICB2ZXJzaW9uKCk6IE5TMTYxODc1NDk4NzE5ODY2ODMxOTkub3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLk1ldGFkYXRhVmVyc2lvbiB7XG4gICAgICBsZXQgb2Zmc2V0ID0gdGhpcy5iYi5fX29mZnNldCh0aGlzLmJiX3BvcywgNCk7XG4gICAgICByZXR1cm4gb2Zmc2V0ID8gLyoqIEB0eXBlIHtvcmcuYXBhY2hlLmFycm93LmZsYXRidWYuTWV0YWRhdGFWZXJzaW9ufSAqLyAodGhpcy5iYi5yZWFkSW50MTYodGhpcy5iYl9wb3MgKyBvZmZzZXQpKSA6IE5TMTYxODc1NDk4NzE5ODY2ODMxOTkub3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLk1ldGFkYXRhVmVyc2lvbi5WMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7b3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLk1lc3NhZ2VIZWFkZXJ9XG4gICAgICovXG4gICAgaGVhZGVyVHlwZSgpOiBvcmcuYXBhY2hlLmFycm93LmZsYXRidWYuTWVzc2FnZUhlYWRlciB7XG4gICAgICBsZXQgb2Zmc2V0ID0gdGhpcy5iYi5fX29mZnNldCh0aGlzLmJiX3BvcywgNik7XG4gICAgICByZXR1cm4gb2Zmc2V0ID8gLyoqIEB0eXBlIHtvcmcuYXBhY2hlLmFycm93LmZsYXRidWYuTWVzc2FnZUhlYWRlcn0gKi8gKHRoaXMuYmIucmVhZFVpbnQ4KHRoaXMuYmJfcG9zICsgb2Zmc2V0KSkgOiBvcmcuYXBhY2hlLmFycm93LmZsYXRidWYuTWVzc2FnZUhlYWRlci5OT05FO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuVGFibGV9IG9ialxuICAgICAqIEByZXR1cm5zIHs/ZmxhdGJ1ZmZlcnMuVGFibGV9XG4gICAgICovXG4gICAgaGVhZGVyPFQgZXh0ZW5kcyBmbGF0YnVmZmVycy5UYWJsZT4ob2JqOiBUKTogVCB8IG51bGwge1xuICAgICAgbGV0IG9mZnNldCA9IHRoaXMuYmIuX19vZmZzZXQodGhpcy5iYl9wb3MsIDgpO1xuICAgICAgcmV0dXJuIG9mZnNldCA/IHRoaXMuYmIuX191bmlvbihvYmosIHRoaXMuYmJfcG9zICsgb2Zmc2V0KSA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge2ZsYXRidWZmZXJzLkxvbmd9XG4gICAgICovXG4gICAgYm9keUxlbmd0aCgpOiBmbGF0YnVmZmVycy5Mb25nIHtcbiAgICAgIGxldCBvZmZzZXQgPSB0aGlzLmJiLl9fb2Zmc2V0KHRoaXMuYmJfcG9zLCAxMCk7XG4gICAgICByZXR1cm4gb2Zmc2V0ID8gdGhpcy5iYi5yZWFkSW50NjQodGhpcy5iYl9wb3MgKyBvZmZzZXQpIDogdGhpcy5iYi5jcmVhdGVMb25nKDAsIDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuQnVpbGRlcn0gYnVpbGRlclxuICAgICAqL1xuICAgIHN0YXRpYyBzdGFydE1lc3NhZ2UoYnVpbGRlcjogZmxhdGJ1ZmZlcnMuQnVpbGRlcikge1xuICAgICAgYnVpbGRlci5zdGFydE9iamVjdCg0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ZsYXRidWZmZXJzLkJ1aWxkZXJ9IGJ1aWxkZXJcbiAgICAgKiBAcGFyYW0ge29yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5NZXRhZGF0YVZlcnNpb259IHZlcnNpb25cbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkVmVyc2lvbihidWlsZGVyOiBmbGF0YnVmZmVycy5CdWlsZGVyLCB2ZXJzaW9uOiBOUzE2MTg3NTQ5ODcxOTg2NjgzMTk5Lm9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5NZXRhZGF0YVZlcnNpb24pIHtcbiAgICAgIGJ1aWxkZXIuYWRkRmllbGRJbnQxNigwLCB2ZXJzaW9uLCBOUzE2MTg3NTQ5ODcxOTg2NjgzMTk5Lm9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5NZXRhZGF0YVZlcnNpb24uVjEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuQnVpbGRlcn0gYnVpbGRlclxuICAgICAqIEBwYXJhbSB7b3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLk1lc3NhZ2VIZWFkZXJ9IGhlYWRlclR5cGVcbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkSGVhZGVyVHlwZShidWlsZGVyOiBmbGF0YnVmZmVycy5CdWlsZGVyLCBoZWFkZXJUeXBlOiBvcmcuYXBhY2hlLmFycm93LmZsYXRidWYuTWVzc2FnZUhlYWRlcikge1xuICAgICAgYnVpbGRlci5hZGRGaWVsZEludDgoMSwgaGVhZGVyVHlwZSwgb3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLk1lc3NhZ2VIZWFkZXIuTk9ORSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmbGF0YnVmZmVycy5CdWlsZGVyfSBidWlsZGVyXG4gICAgICogQHBhcmFtIHtmbGF0YnVmZmVycy5PZmZzZXR9IGhlYWRlck9mZnNldFxuICAgICAqL1xuICAgIHN0YXRpYyBhZGRIZWFkZXIoYnVpbGRlcjogZmxhdGJ1ZmZlcnMuQnVpbGRlciwgaGVhZGVyT2Zmc2V0OiBmbGF0YnVmZmVycy5PZmZzZXQpIHtcbiAgICAgIGJ1aWxkZXIuYWRkRmllbGRPZmZzZXQoMiwgaGVhZGVyT2Zmc2V0LCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ZsYXRidWZmZXJzLkJ1aWxkZXJ9IGJ1aWxkZXJcbiAgICAgKiBAcGFyYW0ge2ZsYXRidWZmZXJzLkxvbmd9IGJvZHlMZW5ndGhcbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkQm9keUxlbmd0aChidWlsZGVyOiBmbGF0YnVmZmVycy5CdWlsZGVyLCBib2R5TGVuZ3RoOiBmbGF0YnVmZmVycy5Mb25nKSB7XG4gICAgICBidWlsZGVyLmFkZEZpZWxkSW50NjQoMywgYm9keUxlbmd0aCwgYnVpbGRlci5jcmVhdGVMb25nKDAsIDApKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ZsYXRidWZmZXJzLkJ1aWxkZXJ9IGJ1aWxkZXJcbiAgICAgKiBAcmV0dXJucyB7ZmxhdGJ1ZmZlcnMuT2Zmc2V0fVxuICAgICAqL1xuICAgIHN0YXRpYyBlbmRNZXNzYWdlKGJ1aWxkZXI6IGZsYXRidWZmZXJzLkJ1aWxkZXIpOiBmbGF0YnVmZmVycy5PZmZzZXQge1xuICAgICAgbGV0IG9mZnNldCA9IGJ1aWxkZXIuZW5kT2JqZWN0KCk7XG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuQnVpbGRlcn0gYnVpbGRlclxuICAgICAqIEBwYXJhbSB7ZmxhdGJ1ZmZlcnMuT2Zmc2V0fSBvZmZzZXRcbiAgICAgKi9cbiAgICBzdGF0aWMgZmluaXNoTWVzc2FnZUJ1ZmZlcihidWlsZGVyOiBmbGF0YnVmZmVycy5CdWlsZGVyLCBvZmZzZXQ6IGZsYXRidWZmZXJzLk9mZnNldCkge1xuICAgICAgYnVpbGRlci5maW5pc2gob2Zmc2V0KTtcbiAgICB9XG5cbiAgfVxufVxuIl19
