// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import * as type_ from './type';
import * as data_ from './data';
import * as vector_ from './vector';
import * as util_ from './util/int';
import * as visitor_ from './visitor';
import * as view_ from './vector/view';
import * as predicate_ from './predicate';
import { Vector } from './vector';
import { RecordBatch } from './recordbatch';
import { Schema, Field, Type } from './type';
import { Table, CountByResult } from './table';
import { read, readAsync } from './ipc/reader/arrow';
export { read, readAsync };
export { Table, CountByResult };
export { Field, Schema, RecordBatch, Vector, Type };
export var util;
(function (util) {
    util.Uint64 = util_.Uint64;
    util.Int64 = util_.Int64;
    util.Int128 = util_.Int128;
})(util || (util = {}));
export var data;
(function (data) {
    data.BaseData = data_.BaseData;
    data.FlatData = data_.FlatData;
    data.BoolData = data_.BoolData;
    data.FlatListData = data_.FlatListData;
    data.DictionaryData = data_.DictionaryData;
    data.NestedData = data_.NestedData;
    data.ListData = data_.ListData;
    data.UnionData = data_.UnionData;
    data.SparseUnionData = data_.SparseUnionData;
    data.DenseUnionData = data_.DenseUnionData;
    data.ChunkedData = data_.ChunkedData;
})(data || (data = {}));
export var type;
(function (type) {
    type.Schema = type_.Schema;
    type.Field = type_.Field;
    type.Null = type_.Null;
    type.Int = type_.Int;
    type.Int8 = type_.Int8;
    type.Int16 = type_.Int16;
    type.Int32 = type_.Int32;
    type.Int64 = type_.Int64;
    type.Uint8 = type_.Uint8;
    type.Uint16 = type_.Uint16;
    type.Uint32 = type_.Uint32;
    type.Uint64 = type_.Uint64;
    type.Float = type_.Float;
    type.Float16 = type_.Float16;
    type.Float32 = type_.Float32;
    type.Float64 = type_.Float64;
    type.Binary = type_.Binary;
    type.Utf8 = type_.Utf8;
    type.Bool = type_.Bool;
    type.Decimal = type_.Decimal;
    type.Date_ = type_.Date_;
    type.Time = type_.Time;
    type.Timestamp = type_.Timestamp;
    type.Interval = type_.Interval;
    type.List = type_.List;
    type.Struct = type_.Struct;
    type.Union = type_.Union;
    type.DenseUnion = type_.DenseUnion;
    type.SparseUnion = type_.SparseUnion;
    type.FixedSizeBinary = type_.FixedSizeBinary;
    type.FixedSizeList = type_.FixedSizeList;
    type.Map_ = type_.Map_;
    type.Dictionary = type_.Dictionary;
})(type || (type = {}));
export var vector;
(function (vector) {
    vector.Vector = vector_.Vector;
    vector.NullVector = vector_.NullVector;
    vector.BoolVector = vector_.BoolVector;
    vector.IntVector = vector_.IntVector;
    vector.FloatVector = vector_.FloatVector;
    vector.DateVector = vector_.DateVector;
    vector.DecimalVector = vector_.DecimalVector;
    vector.TimeVector = vector_.TimeVector;
    vector.TimestampVector = vector_.TimestampVector;
    vector.IntervalVector = vector_.IntervalVector;
    vector.BinaryVector = vector_.BinaryVector;
    vector.FixedSizeBinaryVector = vector_.FixedSizeBinaryVector;
    vector.Utf8Vector = vector_.Utf8Vector;
    vector.ListVector = vector_.ListVector;
    vector.FixedSizeListVector = vector_.FixedSizeListVector;
    vector.MapVector = vector_.MapVector;
    vector.StructVector = vector_.StructVector;
    vector.UnionVector = vector_.UnionVector;
    vector.DictionaryVector = vector_.DictionaryVector;
})(vector || (vector = {}));
export var visitor;
(function (visitor) {
    visitor.TypeVisitor = visitor_.TypeVisitor;
    visitor.VectorVisitor = visitor_.VectorVisitor;
})(visitor || (visitor = {}));
export var view;
(function (view) {
    view.ChunkedView = view_.ChunkedView;
    view.DictionaryView = view_.DictionaryView;
    view.ListView = view_.ListView;
    view.FixedSizeListView = view_.FixedSizeListView;
    view.BinaryView = view_.BinaryView;
    view.Utf8View = view_.Utf8View;
    view.UnionView = view_.UnionView;
    view.DenseUnionView = view_.DenseUnionView;
    view.NestedView = view_.NestedView;
    view.StructView = view_.StructView;
    view.MapView = view_.MapView;
    view.FlatView = view_.FlatView;
    view.NullView = view_.NullView;
    view.BoolView = view_.BoolView;
    view.ValidityView = view_.ValidityView;
    view.PrimitiveView = view_.PrimitiveView;
    view.FixedSizeView = view_.FixedSizeView;
    view.Float16View = view_.Float16View;
    view.DateDayView = view_.DateDayView;
    view.DateMillisecondView = view_.DateMillisecondView;
    view.TimestampDayView = view_.TimestampDayView;
    view.TimestampSecondView = view_.TimestampSecondView;
    view.TimestampMillisecondView = view_.TimestampMillisecondView;
    view.TimestampMicrosecondView = view_.TimestampMicrosecondView;
    view.TimestampNanosecondView = view_.TimestampNanosecondView;
    view.IntervalYearMonthView = view_.IntervalYearMonthView;
    view.IntervalYearView = view_.IntervalYearView;
    view.IntervalMonthView = view_.IntervalMonthView;
})(view || (view = {}));
export var predicate;
(function (predicate) {
    predicate.col = predicate_.col;
    predicate.lit = predicate_.lit;
    predicate.Or = predicate_.Or;
    predicate.Col = predicate_.Col;
    predicate.And = predicate_.And;
    predicate.GTeq = predicate_.GTeq;
    predicate.LTeq = predicate_.LTeq;
    predicate.Value = predicate_.Value;
    predicate.Equals = predicate_.Equals;
    predicate.Literal = predicate_.Literal;
    predicate.Predicate = predicate_.Predicate;
})(predicate || (predicate = {}));
/* These exports are needed for the closure and uglify umd targets */
try {
    let Arrow = eval('exports');
    if (Arrow && typeof Arrow === 'object') {
        // string indexers tell closure and uglify not to rename these properties
        Arrow['data'] = data;
        Arrow['type'] = type;
        Arrow['util'] = util;
        Arrow['view'] = view;
        Arrow['vector'] = vector;
        Arrow['visitor'] = visitor;
        Arrow['predicate'] = predicate;
        Arrow['read'] = read;
        Arrow['readAsync'] = readAsync;
        Arrow['Type'] = Type;
        Arrow['Field'] = Field;
        Arrow['Schema'] = Schema;
        Arrow['Vector'] = Vector;
        Arrow['RecordBatch'] = RecordBatch;
        Arrow['Table'] = Table;
        Arrow['CountByResult'] = CountByResult;
    }
}
catch (e) { }
/* end umd exports */
// closure compiler erases static properties/methods:
// https://github.com/google/closure-compiler/issues/1776
// set them via string indexers to save them from the mangler
Schema['from'] = Schema.from;
Table['from'] = Table.from;
Table['fromAsync'] = Table.fromAsync;
Table['empty'] = Table.empty;
Vector['create'] = Vector.create;
RecordBatch['from'] = RecordBatch.from;
util_.Uint64['add'] = util_.Uint64.add;
util_.Uint64['multiply'] = util_.Uint64.multiply;
util_.Int64['add'] = util_.Int64.add;
util_.Int64['multiply'] = util_.Int64.multiply;
util_.Int64['fromString'] = util_.Int64.fromString;
util_.Int128['add'] = util_.Int128.add;
util_.Int128['multiply'] = util_.Int128.multiply;
util_.Int128['fromString'] = util_.Int128.fromString;
data_.ChunkedData['computeOffsets'] = data_.ChunkedData.computeOffsets;
type_.Type['NONE'] = type_.Type.NONE;
type_.Type['Null'] = type_.Type.Null;
type_.Type['Int'] = type_.Type.Int;
type_.Type['Float'] = type_.Type.Float;
type_.Type['Binary'] = type_.Type.Binary;
type_.Type['Utf8'] = type_.Type.Utf8;
type_.Type['Bool'] = type_.Type.Bool;
type_.Type['Decimal'] = type_.Type.Decimal;
type_.Type['Date'] = type_.Type.Date;
type_.Type['Time'] = type_.Type.Time;
type_.Type['Timestamp'] = type_.Type.Timestamp;
type_.Type['Interval'] = type_.Type.Interval;
type_.Type['List'] = type_.Type.List;
type_.Type['Struct'] = type_.Type.Struct;
type_.Type['Union'] = type_.Type.Union;
type_.Type['FixedSizeBinary'] = type_.Type.FixedSizeBinary;
type_.Type['FixedSizeList'] = type_.Type.FixedSizeList;
type_.Type['Map'] = type_.Type.Map;
type_.Type['Dictionary'] = type_.Type.Dictionary;
type_.Type['DenseUnion'] = type_.Type.DenseUnion;
type_.Type['SparseUnion'] = type_.Type.SparseUnion;
type_.DataType['isNull'] = type_.DataType.isNull;
type_.DataType['isInt'] = type_.DataType.isInt;
type_.DataType['isFloat'] = type_.DataType.isFloat;
type_.DataType['isBinary'] = type_.DataType.isBinary;
type_.DataType['isUtf8'] = type_.DataType.isUtf8;
type_.DataType['isBool'] = type_.DataType.isBool;
type_.DataType['isDecimal'] = type_.DataType.isDecimal;
type_.DataType['isDate'] = type_.DataType.isDate;
type_.DataType['isTime'] = type_.DataType.isTime;
type_.DataType['isTimestamp'] = type_.DataType.isTimestamp;
type_.DataType['isInterval'] = type_.DataType.isInterval;
type_.DataType['isList'] = type_.DataType.isList;
type_.DataType['isStruct'] = type_.DataType.isStruct;
type_.DataType['isUnion'] = type_.DataType.isUnion;
type_.DataType['isDenseUnion'] = type_.DataType.isDenseUnion;
type_.DataType['isSparseUnion'] = type_.DataType.isSparseUnion;
type_.DataType['isFixedSizeBinary'] = type_.DataType.isFixedSizeBinary;
type_.DataType['isFixedSizeList'] = type_.DataType.isFixedSizeList;
type_.DataType['isMap'] = type_.DataType.isMap;
type_.DataType['isDictionary'] = type_.DataType.isDictionary;
vector_.BoolVector['from'] = vector_.BoolVector.from;
vector_.IntVector['from'] = vector_.IntVector.from;
vector_.FloatVector['from'] = vector_.FloatVector.from;
visitor_.TypeVisitor['visitTypeInline'] = visitor_.TypeVisitor.visitTypeInline;
visitor_.VectorVisitor['visitTypeInline'] = visitor_.VectorVisitor.visitTypeInline;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
