"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const bit_1 = require("./util/bit");
const buffer_1 = require("./util/buffer");
const enum_1 = require("./enum");
exports.kUnknownNullCount = -1;
class Data {
    constructor(type, offset, length, nullCount, buffers, childData) {
        this._buffers = [];
        this._type = type;
        this._offset = Math.floor(Math.max(offset || 0, 0));
        this._length = Math.floor(Math.max(length || 0, 0));
        this._buffers = Object.assign([], buffers);
        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));
        this._childData = (childData || []).map((x) => x instanceof Data ? x : x.data);
    }
    get type() { return this._type; }
    get length() { return this._length; }
    get offset() { return this._offset; }
    get childData() { return this._childData; }
    get TType() { return this.type.TType; }
    get TArray() { return this.type.TArray; }
    get TValue() { return this.type.TValue; }
    get ArrayType() { return this.type.ArrayType; }
    get values() { return this._buffers[enum_1.VectorType.DATA]; }
    get typeIds() { return this._buffers[enum_1.VectorType.TYPE]; }
    get nullBitmap() { return this._buffers[enum_1.VectorType.VALIDITY]; }
    get valueOffsets() { return this._buffers[enum_1.VectorType.OFFSET]; }
    get nullCount() {
        let nullCount = this._nullCount;
        let nullBitmap;
        if (nullCount === exports.kUnknownNullCount && (nullBitmap = this.nullBitmap)) {
            this._nullCount = nullCount = this.length - bit_1.popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);
        }
        return nullCount;
    }
    clone(type, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers = this._buffers, childData = this.childData) {
        return new Data(type, offset, length, nullCount, buffers, childData);
    }
    slice(offset, length) {
        // +true === 1, +false === 0, so this means
        // we keep nullCount at 0 if it's already 0,
        // otherwise set to the invalidated flag -1
        const nullCount = +(this._nullCount === 0) - 1;
        const buffers = this.sliceBuffers(offset, length);
        const childData = this.sliceChildren(offset, length);
        return this.clone(this.type, this.offset + offset, length, nullCount, buffers, childData);
    }
    sliceBuffers(offset, length) {
        let arr, buffers = Object.assign([], this._buffers);
        // If typeIds exist, slice the typeIds buffer
        (arr = buffers[enum_1.VectorType.TYPE]) && (buffers[enum_1.VectorType.TYPE] = this.sliceData(arr, offset, length));
        // If offsets exist, only slice the offsets buffer
        (arr = buffers[enum_1.VectorType.OFFSET]) && (buffers[enum_1.VectorType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||
            // Otherwise if no offsets, slice the data buffer
            (arr = buffers[enum_1.VectorType.DATA]) && (buffers[enum_1.VectorType.DATA] = this.sliceData(arr, offset, length));
        return buffers;
    }
    sliceChildren(offset, length) {
        // Only slice children if this isn't variable width data
        if (!this.valueOffsets) {
            return this.childData.map((child) => child.slice(offset, length));
        }
        return this.childData;
    }
    sliceData(data, offset, length) {
        // Don't slice the data vector for Booleans, since the offset goes by bits not bytes
        return this.type.TType === enum_1.Type.Bool ? data : data.subarray(offset, offset + length);
    }
    sliceOffsets(valueOffsets, offset, length) {
        return valueOffsets.subarray(offset, offset + length + 1);
    }
    //
    // Convenience methods for creating Data instances for each of the Arrow Vector types
    //
    /** @nocollapse */
    static Null(type, offset, length, nullCount, nullBitmap) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap)
        });
    }
    /** @nocollapse */
    static Int(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.DATA]: buffer_1.toArrayBufferView(type.ArrayType, data)
        });
    }
    /** @nocollapse */
    static Dictionary(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.DATA]: buffer_1.toArrayBufferView(type.indices.ArrayType, data)
        });
    }
    /** @nocollapse */
    static Float(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.DATA]: buffer_1.toArrayBufferView(type.ArrayType, data)
        });
    }
    /** @nocollapse */
    static Bool(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.DATA]: buffer_1.toArrayBufferView(type.ArrayType, data)
        });
    }
    /** @nocollapse */
    static Decimal(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.DATA]: buffer_1.toArrayBufferView(type.ArrayType, data)
        });
    }
    /** @nocollapse */
    static Date(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.DATA]: buffer_1.toArrayBufferView(type.ArrayType, data)
        });
    }
    /** @nocollapse */
    static Time(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.DATA]: buffer_1.toArrayBufferView(type.ArrayType, data)
        });
    }
    /** @nocollapse */
    static Timestamp(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.DATA]: buffer_1.toArrayBufferView(type.ArrayType, data)
        });
    }
    /** @nocollapse */
    static Interval(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.DATA]: buffer_1.toArrayBufferView(type.ArrayType, data)
        });
    }
    /** @nocollapse */
    static FixedSizeBinary(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.DATA]: buffer_1.toArrayBufferView(type.ArrayType, data)
        });
    }
    /** @nocollapse */
    static Binary(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.OFFSET]: buffer_1.toArrayBufferView(Int32Array, valueOffsets),
            [enum_1.VectorType.DATA]: buffer_1.toArrayBufferView(Uint8Array, data)
        });
    }
    /** @nocollapse */
    static Utf8(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.OFFSET]: buffer_1.toArrayBufferView(Int32Array, valueOffsets),
            [enum_1.VectorType.DATA]: buffer_1.toArrayBufferView(Uint8Array, data)
        });
    }
    /** @nocollapse */
    static List(type, offset, length, nullCount, nullBitmap, valueOffsets, childData) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.OFFSET]: buffer_1.toArrayBufferView(Int32Array, valueOffsets)
        }, childData);
    }
    /** @nocollapse */
    static FixedSizeList(type, offset, length, nullCount, nullBitmap, childData) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap)
        }, childData);
    }
    /** @nocollapse */
    static Struct(type, offset, length, nullCount, nullBitmap, childData) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap)
        }, childData);
    }
    /** @nocollapse */
    static Map(type, offset, length, nullCount, nullBitmap, childData) {
        return new Data(type, offset, length, nullCount, {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap)
        }, childData);
    }
    /** @nocollapse */
    static Union(type, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildData, childData) {
        const buffers = {
            [enum_1.VectorType.VALIDITY]: buffer_1.toArrayBufferView(Uint8Array, nullBitmap),
            [enum_1.VectorType.TYPE]: buffer_1.toArrayBufferView(type.ArrayType, typeIds)
        };
        if (type.mode === enum_1.UnionMode.Sparse) {
            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildData);
        }
        buffers[enum_1.VectorType.OFFSET] = buffer_1.toArrayBufferView(Int32Array, valueOffsetsOrChildData);
        return new Data(type, offset, length, nullCount, buffers, childData);
    }
}
exports.Data = Data;
// (Data as any).prototype._type = Object.freeze({});
// (Data as any).prototype._buffers = Object.freeze([]);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
