"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const bit_1 = require("./util/bit");
const bit_2 = require("./util/bit");
const enum_1 = require("./enum");
const buffer_1 = require("./util/buffer");
/** @ignore */ exports.kUnknownNullCount = -1;
/** @ignore */
class Data {
    constructor(type, offset, length, nullCount, buffers, childData) {
        this.type = type;
        this.offset = Math.floor(Math.max(offset || 0, 0));
        this.length = Math.floor(Math.max(length || 0, 0));
        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));
        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data);
        let buffer;
        if (buffers instanceof Data) {
            this.stride = buffers.stride;
            this.values = buffers.values;
            this.typeIds = buffers.typeIds;
            this.nullBitmap = buffers.nullBitmap;
            this.valueOffsets = buffers.valueOffsets;
        }
        else {
            if (buffers) {
                (buffer = buffers[0]) && (this.valueOffsets = buffer);
                (buffer = buffers[1]) && (this.values = buffer);
                (buffer = buffers[2]) && (this.nullBitmap = buffer);
                (buffer = buffers[3]) && (this.typeIds = buffer);
            }
            const t = type;
            switch (type.typeId) {
                case enum_1.Type.Decimal:
                    this.stride = 4;
                    break;
                case enum_1.Type.Timestamp:
                    this.stride = 2;
                    break;
                case enum_1.Type.Date:
                    this.stride = 1 + t.unit;
                    break;
                case enum_1.Type.Interval:
                    this.stride = 1 + t.unit;
                    break;
                case enum_1.Type.Int:
                    this.stride = 1 + +(t.bitWidth > 32);
                    break;
                case enum_1.Type.Time:
                    this.stride = 1 + +(t.bitWidth > 32);
                    break;
                case enum_1.Type.FixedSizeList:
                    this.stride = t.listSize;
                    break;
                case enum_1.Type.FixedSizeBinary:
                    this.stride = t.byteWidth;
                    break;
                default: this.stride = 1;
            }
        }
    }
    get ArrayType() { return this.type.ArrayType; }
    get typeId() { return this.type.typeId; }
    get buffers() {
        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];
    }
    get nullCount() {
        let nullCount = this._nullCount;
        let nullBitmap;
        if (nullCount <= exports.kUnknownNullCount && (nullBitmap = this.nullBitmap)) {
            this._nullCount = nullCount = this.length - bit_2.popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);
        }
        return nullCount;
    }
    clone(type, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers = this, childData = this.childData) {
        return new Data(type, offset, length, nullCount, buffers, childData);
    }
    slice(offset, length) {
        // +true === 1, +false === 0, so this means
        // we keep nullCount at 0 if it's already 0,
        // otherwise set to the invalidated flag -1
        const { stride, typeId, childData } = this;
        const nullCount = +(this._nullCount === 0) - 1;
        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;
        const buffers = this._sliceBuffers(offset, length, stride, typeId);
        return this.clone(this.type, this.offset + offset, length, nullCount, buffers, 
        // Don't slice children if we have value offsets (the variable-width types)
        (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));
    }
    _changeLengthAndBackfillNullBitmap(newLength) {
        const { length, nullCount } = this;
        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)
        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);
        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)
        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;
        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s
        if (nullCount > 0) {
            bitmap.set(bit_1.truncateBitmap(this.offset, length, this.nullBitmap), 0);
        }
        const buffers = this.buffers;
        buffers[enum_1.VectorType.VALIDITY] = bitmap;
        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);
    }
    _sliceBuffers(offset, length, stride, typeId) {
        let arr, { buffers } = this;
        // If typeIds exist, slice the typeIds buffer
        (arr = buffers[enum_1.VectorType.TYPE]) && (buffers[enum_1.VectorType.TYPE] = arr.subarray(offset, offset + length));
        // If offsets exist, only slice the offsets buffer
        (arr = buffers[enum_1.VectorType.OFFSET]) && (buffers[enum_1.VectorType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||
            // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes
            (arr = buffers[enum_1.VectorType.DATA]) && (buffers[enum_1.VectorType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));
        return buffers;
    }
    _sliceChildren(childData, offset, length) {
        return childData.map((child) => child.slice(offset, length));
    }
    //
    // Convenience methods for creating Data instances for each of the Arrow Vector types
    //
    /** @nocollapse */
    static Null(type, offset, length, nullCount, nullBitmap) {
        return new Data(type, offset, length, nullCount, [undefined, undefined, buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static Int(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static Dictionary(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.indices.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static Float(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static Bool(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static Decimal(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static Date(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static Time(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static Timestamp(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static Interval(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static FixedSizeBinary(type, offset, length, nullCount, nullBitmap, data) {
        return new Data(type, offset, length, nullCount, [undefined, buffer_1.toArrayBufferView(type.ArrayType, data), buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static Binary(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {
        return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), buffer_1.toUint8Array(data), buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static Utf8(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {
        return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), buffer_1.toUint8Array(data), buffer_1.toUint8Array(nullBitmap)]);
    }
    /** @nocollapse */
    static List(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {
        return new Data(type, offset, length, nullCount, [buffer_1.toInt32Array(valueOffsets), undefined, buffer_1.toUint8Array(nullBitmap)], [child]);
    }
    /** @nocollapse */
    static FixedSizeList(type, offset, length, nullCount, nullBitmap, child) {
        return new Data(type, offset, length, nullCount, [undefined, undefined, buffer_1.toUint8Array(nullBitmap)], [child]);
    }
    /** @nocollapse */
    static Struct(type, offset, length, nullCount, nullBitmap, children) {
        return new Data(type, offset, length, nullCount, [undefined, undefined, buffer_1.toUint8Array(nullBitmap)], children);
    }
    /** @nocollapse */
    static Map(type, offset, length, nullCount, nullBitmap, children) {
        return new Data(type, offset, length, nullCount, [undefined, undefined, buffer_1.toUint8Array(nullBitmap)], children);
    }
    /** @nocollapse */
    static Union(type, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildren, children) {
        const buffers = [
            undefined, undefined,
            buffer_1.toUint8Array(nullBitmap),
            buffer_1.toArrayBufferView(type.ArrayType, typeIds)
        ];
        if (type.mode === enum_1.UnionMode.Sparse) {
            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren);
        }
        buffers[enum_1.VectorType.OFFSET] = buffer_1.toInt32Array(valueOffsetsOrChildren);
        return new Data(type, offset, length, nullCount, buffers, children);
    }
}
exports.Data = Data;
(Data.prototype.childData = Object.freeze([]));

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7Q0FDSjtBQXZNRCxvQkF1TUM7QUFFRCxDQUFFLElBQUksQ0FBQyxTQUFpQixDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuL3ZlY3Rvcic7XG5pbXBvcnQgeyB0cnVuY2F0ZUJpdG1hcCB9IGZyb20gJy4vdXRpbC9iaXQnO1xuaW1wb3J0IHsgcG9wY250X2JpdF9yYW5nZSB9IGZyb20gJy4vdXRpbC9iaXQnO1xuaW1wb3J0IHsgRGF0YVR5cGUsIFNwYXJzZVVuaW9uLCBEZW5zZVVuaW9uIH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IFZlY3RvclR5cGUgYXMgQnVmZmVyVHlwZSwgVW5pb25Nb2RlLCBUeXBlIH0gZnJvbSAnLi9lbnVtJztcbmltcG9ydCB7IHRvQXJyYXlCdWZmZXJWaWV3LCB0b1VpbnQ4QXJyYXksIHRvSW50MzJBcnJheSB9IGZyb20gJy4vdXRpbC9idWZmZXInO1xuaW1wb3J0IHtcbiAgICBEaWN0aW9uYXJ5LFxuICAgIE51bGwsIEludCwgRmxvYXQsXG4gICAgQmluYXJ5LCBCb29sLCBVdGY4LCBEZWNpbWFsLFxuICAgIERhdGVfLCBUaW1lLCBUaW1lc3RhbXAsIEludGVydmFsLFxuICAgIExpc3QsIFN0cnVjdCwgVW5pb24sIEZpeGVkU2l6ZUJpbmFyeSwgRml4ZWRTaXplTGlzdCwgTWFwXyxcbn0gZnJvbSAnLi90eXBlJztcblxuLy8gV2hlbiBzbGljaW5nLCB3ZSBkbyBub3Qga25vdyB0aGUgbnVsbCBjb3VudCBvZiB0aGUgc2xpY2VkIHJhbmdlIHdpdGhvdXRcbi8vIGRvaW5nIHNvbWUgY29tcHV0YXRpb24uIFRvIGF2b2lkIGRvaW5nIHRoaXMgZWFnZXJseSwgd2Ugc2V0IHRoZSBudWxsIGNvdW50XG4vLyB0byAtMSAoYW55IG5lZ2F0aXZlIG51bWJlciB3aWxsIGRvKS4gV2hlbiBWZWN0b3IubnVsbENvdW50IGlzIGNhbGxlZCB0aGVcbi8vIGZpcnN0IHRpbWUsIHRoZSBudWxsIGNvdW50IHdpbGwgYmUgY29tcHV0ZWQuIFNlZSBBUlJPVy0zM1xuLyoqIEBpZ25vcmUgKi8gZXhwb3J0IHR5cGUga1Vua25vd25OdWxsQ291bnQgPSAtMTtcbi8qKiBAaWdub3JlICovIGV4cG9ydCBjb25zdCBrVW5rbm93bk51bGxDb3VudCA9IC0xO1xuXG4vKiogQGlnbm9yZSAqLyBleHBvcnQgdHlwZSBOdWxsQnVmZmVyID0gVWludDhBcnJheSB8IG51bGwgfCB1bmRlZmluZWQ7XG4vKiogQGlnbm9yZSAqLyBleHBvcnQgdHlwZSBUeXBlSWRzQnVmZmVyID0gSW50OEFycmF5ICB8IEFycmF5TGlrZTxudW1iZXI+IHwgSXRlcmFibGU8bnVtYmVyPjtcbi8qKiBAaWdub3JlICovIGV4cG9ydCB0eXBlIFZhbHVlT2Zmc2V0c0J1ZmZlciA9IEludDMyQXJyYXkgIHwgQXJyYXlMaWtlPG51bWJlcj4gfCBJdGVyYWJsZTxudW1iZXI+O1xuLyoqIEBpZ25vcmUgKi8gZXhwb3J0IHR5cGUgRGF0YUJ1ZmZlcjxUIGV4dGVuZHMgRGF0YVR5cGU+ID0gVFsnVEFycmF5J10gfCBBcnJheUxpa2U8bnVtYmVyPiB8IEl0ZXJhYmxlPG51bWJlcj47XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1ZmZlcnM8VCBleHRlbmRzIERhdGFUeXBlPiB7XG4gICAgICBbQnVmZmVyVHlwZS5PRkZTRVRdOiBJbnQzMkFycmF5O1xuICAgICAgICBbQnVmZmVyVHlwZS5EQVRBXTogVFsnVEFycmF5J107XG4gICAgW0J1ZmZlclR5cGUuVkFMSURJVFldOiBVaW50OEFycmF5O1xuICAgICAgICBbQnVmZmVyVHlwZS5UWVBFXTogVFsnVEFycmF5J107XG59XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgaW50ZXJmYWNlIERhdGE8VCBleHRlbmRzIERhdGFUeXBlID0gRGF0YVR5cGU+IHtcbiAgICByZWFkb25seSBUVHlwZTogVFsnVFR5cGUnXTtcbiAgICByZWFkb25seSBUQXJyYXk6IFRbJ1RBcnJheSddO1xuICAgIHJlYWRvbmx5IFRWYWx1ZTogVFsnVFZhbHVlJ107XG59XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgY2xhc3MgRGF0YTxUIGV4dGVuZHMgRGF0YVR5cGUgPSBEYXRhVHlwZT4ge1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IFQ7XG4gICAgcHVibGljIHJlYWRvbmx5IGxlbmd0aDogbnVtYmVyO1xuICAgIHB1YmxpYyByZWFkb25seSBvZmZzZXQ6IG51bWJlcjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RyaWRlOiBudW1iZXI7XG4gICAgcHVibGljIHJlYWRvbmx5IGNoaWxkRGF0YTogRGF0YVtdO1xuICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZXM6IEJ1ZmZlcnM8VD5bQnVmZmVyVHlwZS5EQVRBXTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZUlkczogQnVmZmVyczxUPltCdWZmZXJUeXBlLlRZUEVdO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwdWJsaWMgcmVhZG9ubHkgbnVsbEJpdG1hcDogQnVmZmVyczxUPltCdWZmZXJUeXBlLlZBTElESVRZXTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIHJlYWRvbmx5IHZhbHVlT2Zmc2V0czogQnVmZmVyczxUPltCdWZmZXJUeXBlLk9GRlNFVF07XG5cbiAgICBwdWJsaWMgZ2V0IEFycmF5VHlwZSgpIHsgcmV0dXJuIHRoaXMudHlwZS5BcnJheVR5cGU7IH1cbiAgICBwdWJsaWMgZ2V0IHR5cGVJZCgpOiBUWydUVHlwZSddIHsgcmV0dXJuIHRoaXMudHlwZS50eXBlSWQ7IH1cbiAgICBwdWJsaWMgZ2V0IGJ1ZmZlcnMoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy52YWx1ZU9mZnNldHMsIHRoaXMudmFsdWVzLCB0aGlzLm51bGxCaXRtYXAsIHRoaXMudHlwZUlkc10gYXMgQnVmZmVyczxUPjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX251bGxDb3VudDogbnVtYmVyIHwga1Vua25vd25OdWxsQ291bnQ7XG5cbiAgICBwdWJsaWMgZ2V0IG51bGxDb3VudCgpIHtcbiAgICAgICAgbGV0IG51bGxDb3VudCA9IHRoaXMuX251bGxDb3VudDtcbiAgICAgICAgbGV0IG51bGxCaXRtYXA6IFVpbnQ4QXJyYXkgfCB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChudWxsQ291bnQgPD0ga1Vua25vd25OdWxsQ291bnQgJiYgKG51bGxCaXRtYXAgPSB0aGlzLm51bGxCaXRtYXApKSB7XG4gICAgICAgICAgICB0aGlzLl9udWxsQ291bnQgPSBudWxsQ291bnQgPSB0aGlzLmxlbmd0aCAtIHBvcGNudF9iaXRfcmFuZ2UobnVsbEJpdG1hcCwgdGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgdGhpcy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsQ291bnQ7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IodHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ/OiBudW1iZXIsIGJ1ZmZlcnM/OiBQYXJ0aWFsPEJ1ZmZlcnM8VD4+IHwgRGF0YTxUPiwgY2hpbGREYXRhPzogKERhdGEgfCBWZWN0b3IpW10pIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBNYXRoLmZsb29yKE1hdGgubWF4KG9mZnNldCB8fCAwLCAwKSk7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gTWF0aC5mbG9vcihNYXRoLm1heChsZW5ndGggfHwgMCwgMCkpO1xuICAgICAgICB0aGlzLl9udWxsQ291bnQgPSBNYXRoLmZsb29yKE1hdGgubWF4KG51bGxDb3VudCB8fCAwLCAtMSkpO1xuICAgICAgICB0aGlzLmNoaWxkRGF0YSA9IChjaGlsZERhdGEgfHwgW10pLm1hcCgoeCkgPT4geCBpbnN0YW5jZW9mIERhdGEgPyB4IDogeC5kYXRhKSBhcyBEYXRhW107XG4gICAgICAgIGxldCBidWZmZXI6IEJ1ZmZlcnM8VD5ba2V5b2YgQnVmZmVyczxUPl07XG4gICAgICAgIGlmIChidWZmZXJzIGluc3RhbmNlb2YgRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5zdHJpZGUgPSBidWZmZXJzLnN0cmlkZTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzID0gYnVmZmVycy52YWx1ZXM7XG4gICAgICAgICAgICB0aGlzLnR5cGVJZHMgPSBidWZmZXJzLnR5cGVJZHM7XG4gICAgICAgICAgICB0aGlzLm51bGxCaXRtYXAgPSBidWZmZXJzLm51bGxCaXRtYXA7XG4gICAgICAgICAgICB0aGlzLnZhbHVlT2Zmc2V0cyA9IGJ1ZmZlcnMudmFsdWVPZmZzZXRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGJ1ZmZlcnMpIHtcbiAgICAgICAgICAgICAgICAoYnVmZmVyID0gKGJ1ZmZlcnMgYXMgQnVmZmVyczxUPilbMF0pICYmICh0aGlzLnZhbHVlT2Zmc2V0cyA9IGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgKGJ1ZmZlciA9IChidWZmZXJzIGFzIEJ1ZmZlcnM8VD4pWzFdKSAmJiAodGhpcy52YWx1ZXMgPSBidWZmZXIpO1xuICAgICAgICAgICAgICAgIChidWZmZXIgPSAoYnVmZmVycyBhcyBCdWZmZXJzPFQ+KVsyXSkgJiYgKHRoaXMubnVsbEJpdG1hcCA9IGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgKGJ1ZmZlciA9IChidWZmZXJzIGFzIEJ1ZmZlcnM8VD4pWzNdKSAmJiAodGhpcy50eXBlSWRzID0gYnVmZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHQ6IGFueSA9IHR5cGU7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUudHlwZUlkKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBUeXBlLkRlY2ltYWw6IHRoaXMuc3RyaWRlID0gNDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUeXBlLlRpbWVzdGFtcDogdGhpcy5zdHJpZGUgPSAyOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFR5cGUuRGF0ZTogdGhpcy5zdHJpZGUgPSAxICsgKHQgYXMgRGF0ZV8pLnVuaXQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVHlwZS5JbnRlcnZhbDogdGhpcy5zdHJpZGUgPSAxICsgKHQgYXMgSW50ZXJ2YWwpLnVuaXQ7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVHlwZS5JbnQ6IHRoaXMuc3RyaWRlID0gMSArICsoKHQgYXMgSW50KS5iaXRXaWR0aCA+IDMyKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUeXBlLlRpbWU6IHRoaXMuc3RyaWRlID0gMSArICsoKHQgYXMgVGltZSkuYml0V2lkdGggPiAzMik7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVHlwZS5GaXhlZFNpemVMaXN0OiB0aGlzLnN0cmlkZSA9ICh0IGFzIEZpeGVkU2l6ZUxpc3QpLmxpc3RTaXplOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFR5cGUuRml4ZWRTaXplQmluYXJ5OiB0aGlzLnN0cmlkZSA9ICh0IGFzIEZpeGVkU2l6ZUJpbmFyeSkuYnl0ZVdpZHRoOyBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0aGlzLnN0cmlkZSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgY2xvbmU8UiBleHRlbmRzIERhdGFUeXBlPih0eXBlOiBSLCBvZmZzZXQgPSB0aGlzLm9mZnNldCwgbGVuZ3RoID0gdGhpcy5sZW5ndGgsIG51bGxDb3VudCA9IHRoaXMuX251bGxDb3VudCwgYnVmZmVyczogQnVmZmVyczxSPiA9IDxhbnk+IHRoaXMsIGNoaWxkRGF0YTogKERhdGEgfCBWZWN0b3IpW10gPSB0aGlzLmNoaWxkRGF0YSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwgYnVmZmVycywgY2hpbGREYXRhKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2xpY2Uob2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogRGF0YTxUPiB7XG4gICAgICAgIC8vICt0cnVlID09PSAxLCArZmFsc2UgPT09IDAsIHNvIHRoaXMgbWVhbnNcbiAgICAgICAgLy8gd2Uga2VlcCBudWxsQ291bnQgYXQgMCBpZiBpdCdzIGFscmVhZHkgMCxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHNldCB0byB0aGUgaW52YWxpZGF0ZWQgZmxhZyAtMVxuICAgICAgICBjb25zdCB7IHN0cmlkZSwgdHlwZUlkLCBjaGlsZERhdGEgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG51bGxDb3VudCA9ICsodGhpcy5fbnVsbENvdW50ID09PSAwKSAtIDE7XG4gICAgICAgIGNvbnN0IGNoaWxkU3RyaWRlID0gdHlwZUlkID09PSAxNiAvKiBGaXhlZFNpemVMaXN0ICovID8gc3RyaWRlIDogMTtcbiAgICAgICAgY29uc3QgYnVmZmVycyA9IHRoaXMuX3NsaWNlQnVmZmVycyhvZmZzZXQsIGxlbmd0aCwgc3RyaWRlLCB0eXBlSWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZTxUPih0aGlzLnR5cGUsIHRoaXMub2Zmc2V0ICsgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwgYnVmZmVycyxcbiAgICAgICAgICAgIC8vIERvbid0IHNsaWNlIGNoaWxkcmVuIGlmIHdlIGhhdmUgdmFsdWUgb2Zmc2V0cyAodGhlIHZhcmlhYmxlLXdpZHRoIHR5cGVzKVxuICAgICAgICAgICAgKCFjaGlsZERhdGEubGVuZ3RoIHx8IHRoaXMudmFsdWVPZmZzZXRzKSA/IGNoaWxkRGF0YSA6IHRoaXMuX3NsaWNlQ2hpbGRyZW4oY2hpbGREYXRhLCBjaGlsZFN0cmlkZSAqIG9mZnNldCwgY2hpbGRTdHJpZGUgKiBsZW5ndGgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgX2NoYW5nZUxlbmd0aEFuZEJhY2tmaWxsTnVsbEJpdG1hcChuZXdMZW5ndGg6IG51bWJlcik6IERhdGE8VD4ge1xuICAgICAgICBjb25zdCB7IGxlbmd0aCwgbnVsbENvdW50IH0gPSB0aGlzO1xuICAgICAgICAvLyBzdGFydCBpbml0aWFsaXplZCB3aXRoIDBzIChudWxscyksIHRoZW4gZmlsbCBmcm9tIDAgdG8gbGVuZ3RoIHdpdGggMXMgKG5vdCBudWxsKVxuICAgICAgICBjb25zdCBiaXRtYXAgPSBuZXcgVWludDhBcnJheSgoKG5ld0xlbmd0aCArIDYzKSAmIH42MykgPj4gMykuZmlsbCgyNTUsIDAsIGxlbmd0aCA+PiAzKTtcbiAgICAgICAgLy8gc2V0IGFsbCB0aGUgYml0cyBpbiB0aGUgbGFzdCBieXRlICh1cCB0byBiaXQgYGxlbmd0aCAtIGxlbmd0aCAlIDhgKSB0byAxIChub3QgbnVsbClcbiAgICAgICAgYml0bWFwW2xlbmd0aCA+PiAzXSA9ICgxIDw8IChsZW5ndGggLSAobGVuZ3RoICYgfjcpKSkgLSAxO1xuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbnVsbEJpdG1hcCwgdHJ1bmNhdGUgKyBzbGljZSBhbmQgc2V0IGl0IG92ZXIgdGhlIHByZS1maWxsZWQgMXNcbiAgICAgICAgaWYgKG51bGxDb3VudCA+IDApIHtcbiAgICAgICAgICAgIGJpdG1hcC5zZXQodHJ1bmNhdGVCaXRtYXAodGhpcy5vZmZzZXQsIGxlbmd0aCwgdGhpcy5udWxsQml0bWFwKSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnVmZmVycyA9IHRoaXMuYnVmZmVycztcbiAgICAgICAgYnVmZmVyc1tCdWZmZXJUeXBlLlZBTElESVRZXSA9IGJpdG1hcDtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUodGhpcy50eXBlLCAwLCBuZXdMZW5ndGgsIG51bGxDb3VudCArIChuZXdMZW5ndGggLSBsZW5ndGgpLCBidWZmZXJzKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX3NsaWNlQnVmZmVycyhvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIHN0cmlkZTogbnVtYmVyLCB0eXBlSWQ6IFRbJ1RUeXBlJ10pOiBCdWZmZXJzPFQ+IHtcbiAgICAgICAgbGV0IGFycjogYW55LCB7IGJ1ZmZlcnMgfSA9IHRoaXM7XG4gICAgICAgIC8vIElmIHR5cGVJZHMgZXhpc3QsIHNsaWNlIHRoZSB0eXBlSWRzIGJ1ZmZlclxuICAgICAgICAoYXJyID0gYnVmZmVyc1tCdWZmZXJUeXBlLlRZUEVdKSAmJiAoYnVmZmVyc1tCdWZmZXJUeXBlLlRZUEVdID0gYXJyLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKSk7XG4gICAgICAgIC8vIElmIG9mZnNldHMgZXhpc3QsIG9ubHkgc2xpY2UgdGhlIG9mZnNldHMgYnVmZmVyXG4gICAgICAgIChhcnIgPSBidWZmZXJzW0J1ZmZlclR5cGUuT0ZGU0VUXSkgJiYgKGJ1ZmZlcnNbQnVmZmVyVHlwZS5PRkZTRVRdID0gYXJyLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoICsgMSkpIHx8XG4gICAgICAgIC8vIE90aGVyd2lzZSBpZiBubyBvZmZzZXRzLCBzbGljZSB0aGUgZGF0YSBidWZmZXIuIERvbid0IHNsaWNlIHRoZSBkYXRhIHZlY3RvciBmb3IgQm9vbGVhbnMsIHNpbmNlIHRoZSBvZmZzZXQgZ29lcyBieSBiaXRzIG5vdCBieXRlc1xuICAgICAgICAoYXJyID0gYnVmZmVyc1tCdWZmZXJUeXBlLkRBVEFdKSAmJiAoYnVmZmVyc1tCdWZmZXJUeXBlLkRBVEFdID0gdHlwZUlkID09PSA2ID8gYXJyIDogYXJyLnN1YmFycmF5KHN0cmlkZSAqIG9mZnNldCwgc3RyaWRlICogKG9mZnNldCArIGxlbmd0aCkpKTtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcnM7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9zbGljZUNoaWxkcmVuKGNoaWxkRGF0YTogRGF0YVtdLCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpOiBEYXRhW10ge1xuICAgICAgICByZXR1cm4gY2hpbGREYXRhLm1hcCgoY2hpbGQpID0+IGNoaWxkLnNsaWNlKG9mZnNldCwgbGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBDb252ZW5pZW5jZSBtZXRob2RzIGZvciBjcmVhdGluZyBEYXRhIGluc3RhbmNlcyBmb3IgZWFjaCBvZiB0aGUgQXJyb3cgVmVjdG9yIHR5cGVzXG4gICAgLy9cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIE51bGw8VCBleHRlbmRzIE51bGw+KHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50OiBudW1iZXIsIG51bGxCaXRtYXA6IE51bGxCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhKHR5cGUsIG9mZnNldCwgbGVuZ3RoLCBudWxsQ291bnQsIFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdG9VaW50OEFycmF5KG51bGxCaXRtYXApXSk7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgSW50PFQgZXh0ZW5kcyBJbnQ+KHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50OiBudW1iZXIsIG51bGxCaXRtYXA6IE51bGxCdWZmZXIsIGRhdGE6IERhdGFCdWZmZXI8VD4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhKHR5cGUsIG9mZnNldCwgbGVuZ3RoLCBudWxsQ291bnQsIFt1bmRlZmluZWQsIHRvQXJyYXlCdWZmZXJWaWV3KHR5cGUuQXJyYXlUeXBlLCBkYXRhKSwgdG9VaW50OEFycmF5KG51bGxCaXRtYXApXSk7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgRGljdGlvbmFyeTxUIGV4dGVuZHMgRGljdGlvbmFyeT4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgZGF0YTogRGF0YUJ1ZmZlcjxUPikge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwgW3VuZGVmaW5lZCwgdG9BcnJheUJ1ZmZlclZpZXc8VFsnVEFycmF5J10+KHR5cGUuaW5kaWNlcy5BcnJheVR5cGUsIGRhdGEpLCB0b1VpbnQ4QXJyYXkobnVsbEJpdG1hcCldKTtcbiAgICB9XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBGbG9hdDxUIGV4dGVuZHMgRmxvYXQ+KHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50OiBudW1iZXIsIG51bGxCaXRtYXA6IE51bGxCdWZmZXIsIGRhdGE6IERhdGFCdWZmZXI8VD4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhKHR5cGUsIG9mZnNldCwgbGVuZ3RoLCBudWxsQ291bnQsIFt1bmRlZmluZWQsIHRvQXJyYXlCdWZmZXJWaWV3KHR5cGUuQXJyYXlUeXBlLCBkYXRhKSwgdG9VaW50OEFycmF5KG51bGxCaXRtYXApXSk7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgQm9vbDxUIGV4dGVuZHMgQm9vbD4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgZGF0YTogRGF0YUJ1ZmZlcjxUPikge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwgW3VuZGVmaW5lZCwgdG9BcnJheUJ1ZmZlclZpZXcodHlwZS5BcnJheVR5cGUsIGRhdGEpLCB0b1VpbnQ4QXJyYXkobnVsbEJpdG1hcCldKTtcbiAgICB9XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBEZWNpbWFsPFQgZXh0ZW5kcyBEZWNpbWFsPih0eXBlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIG51bGxDb3VudDogbnVtYmVyLCBudWxsQml0bWFwOiBOdWxsQnVmZmVyLCBkYXRhOiBEYXRhQnVmZmVyPFQ+KSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgbnVsbENvdW50LCBbdW5kZWZpbmVkLCB0b0FycmF5QnVmZmVyVmlldyh0eXBlLkFycmF5VHlwZSwgZGF0YSksIHRvVWludDhBcnJheShudWxsQml0bWFwKV0pO1xuICAgIH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIERhdGU8VCBleHRlbmRzIERhdGVfPih0eXBlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIG51bGxDb3VudDogbnVtYmVyLCBudWxsQml0bWFwOiBOdWxsQnVmZmVyLCBkYXRhOiBEYXRhQnVmZmVyPFQ+KSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgbnVsbENvdW50LCBbdW5kZWZpbmVkLCB0b0FycmF5QnVmZmVyVmlldyh0eXBlLkFycmF5VHlwZSwgZGF0YSksIHRvVWludDhBcnJheShudWxsQml0bWFwKV0pO1xuICAgIH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIFRpbWU8VCBleHRlbmRzIFRpbWU+KHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50OiBudW1iZXIsIG51bGxCaXRtYXA6IE51bGxCdWZmZXIsIGRhdGE6IERhdGFCdWZmZXI8VD4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhKHR5cGUsIG9mZnNldCwgbGVuZ3RoLCBudWxsQ291bnQsIFt1bmRlZmluZWQsIHRvQXJyYXlCdWZmZXJWaWV3KHR5cGUuQXJyYXlUeXBlLCBkYXRhKSwgdG9VaW50OEFycmF5KG51bGxCaXRtYXApXSk7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgVGltZXN0YW1wPFQgZXh0ZW5kcyBUaW1lc3RhbXA+KHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50OiBudW1iZXIsIG51bGxCaXRtYXA6IE51bGxCdWZmZXIsIGRhdGE6IERhdGFCdWZmZXI8VD4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhKHR5cGUsIG9mZnNldCwgbGVuZ3RoLCBudWxsQ291bnQsIFt1bmRlZmluZWQsIHRvQXJyYXlCdWZmZXJWaWV3KHR5cGUuQXJyYXlUeXBlLCBkYXRhKSwgdG9VaW50OEFycmF5KG51bGxCaXRtYXApXSk7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgSW50ZXJ2YWw8VCBleHRlbmRzIEludGVydmFsPih0eXBlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIG51bGxDb3VudDogbnVtYmVyLCBudWxsQml0bWFwOiBOdWxsQnVmZmVyLCBkYXRhOiBEYXRhQnVmZmVyPFQ+KSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgbnVsbENvdW50LCBbdW5kZWZpbmVkLCB0b0FycmF5QnVmZmVyVmlldyh0eXBlLkFycmF5VHlwZSwgZGF0YSksIHRvVWludDhBcnJheShudWxsQml0bWFwKV0pO1xuICAgIH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIEZpeGVkU2l6ZUJpbmFyeTxUIGV4dGVuZHMgRml4ZWRTaXplQmluYXJ5Pih0eXBlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIG51bGxDb3VudDogbnVtYmVyLCBudWxsQml0bWFwOiBOdWxsQnVmZmVyLCBkYXRhOiBEYXRhQnVmZmVyPFQ+KSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgbnVsbENvdW50LCBbdW5kZWZpbmVkLCB0b0FycmF5QnVmZmVyVmlldyh0eXBlLkFycmF5VHlwZSwgZGF0YSksIHRvVWludDhBcnJheShudWxsQml0bWFwKV0pO1xuICAgIH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIEJpbmFyeTxUIGV4dGVuZHMgQmluYXJ5Pih0eXBlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIG51bGxDb3VudDogbnVtYmVyLCBudWxsQml0bWFwOiBOdWxsQnVmZmVyLCB2YWx1ZU9mZnNldHM6IFZhbHVlT2Zmc2V0c0J1ZmZlciwgZGF0YTogVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwgW3RvSW50MzJBcnJheSh2YWx1ZU9mZnNldHMpLCB0b1VpbnQ4QXJyYXkoZGF0YSksIHRvVWludDhBcnJheShudWxsQml0bWFwKV0pO1xuICAgIH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIFV0Zjg8VCBleHRlbmRzIFV0Zjg+KHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50OiBudW1iZXIsIG51bGxCaXRtYXA6IE51bGxCdWZmZXIsIHZhbHVlT2Zmc2V0czogVmFsdWVPZmZzZXRzQnVmZmVyLCBkYXRhOiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgbnVsbENvdW50LCBbdG9JbnQzMkFycmF5KHZhbHVlT2Zmc2V0cyksIHRvVWludDhBcnJheShkYXRhKSwgdG9VaW50OEFycmF5KG51bGxCaXRtYXApXSk7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgTGlzdDxUIGV4dGVuZHMgTGlzdD4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgdmFsdWVPZmZzZXRzOiBWYWx1ZU9mZnNldHNCdWZmZXIsIGNoaWxkOiBEYXRhPFRbJ3ZhbHVlVHlwZSddPiB8IFZlY3RvcjxUWyd2YWx1ZVR5cGUnXT4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhKHR5cGUsIG9mZnNldCwgbGVuZ3RoLCBudWxsQ291bnQsIFt0b0ludDMyQXJyYXkodmFsdWVPZmZzZXRzKSwgdW5kZWZpbmVkLCB0b1VpbnQ4QXJyYXkobnVsbEJpdG1hcCldLCBbY2hpbGRdKTtcbiAgICB9XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBGaXhlZFNpemVMaXN0PFQgZXh0ZW5kcyBGaXhlZFNpemVMaXN0Pih0eXBlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIG51bGxDb3VudDogbnVtYmVyLCBudWxsQml0bWFwOiBOdWxsQnVmZmVyLCBjaGlsZDogRGF0YSB8IFZlY3Rvcikge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwgW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB0b1VpbnQ4QXJyYXkobnVsbEJpdG1hcCldLCBbY2hpbGRdKTtcbiAgICB9XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBTdHJ1Y3Q8VCBleHRlbmRzIFN0cnVjdD4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgY2hpbGRyZW46IChEYXRhIHwgVmVjdG9yKVtdKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgbnVsbENvdW50LCBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRvVWludDhBcnJheShudWxsQml0bWFwKV0sIGNoaWxkcmVuKTtcbiAgICB9XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBNYXA8VCBleHRlbmRzIE1hcF8+KHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50OiBudW1iZXIsIG51bGxCaXRtYXA6IE51bGxCdWZmZXIsIGNoaWxkcmVuOiAoRGF0YSB8IFZlY3RvcilbXSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwgW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB0b1VpbnQ4QXJyYXkobnVsbEJpdG1hcCldLCBjaGlsZHJlbik7XG4gICAgfVxuICAgIHB1YmxpYyBzdGF0aWMgVW5pb248VCBleHRlbmRzIFNwYXJzZVVuaW9uPih0eXBlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIG51bGxDb3VudDogbnVtYmVyLCBudWxsQml0bWFwOiBOdWxsQnVmZmVyLCB0eXBlSWRzOiBUeXBlSWRzQnVmZmVyLCBjaGlsZHJlbjogKERhdGEgfCBWZWN0b3IpW10pOiBEYXRhPFQ+O1xuICAgIHB1YmxpYyBzdGF0aWMgVW5pb248VCBleHRlbmRzIERlbnNlVW5pb24+KHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50OiBudW1iZXIsIG51bGxCaXRtYXA6IE51bGxCdWZmZXIsIHR5cGVJZHM6IFR5cGVJZHNCdWZmZXIsIHZhbHVlT2Zmc2V0czogVmFsdWVPZmZzZXRzQnVmZmVyLCBjaGlsZHJlbjogKERhdGEgfCBWZWN0b3IpW10pOiBEYXRhPFQ+O1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgVW5pb248VCBleHRlbmRzIFVuaW9uPih0eXBlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIG51bGxDb3VudDogbnVtYmVyLCBudWxsQml0bWFwOiBOdWxsQnVmZmVyLCB0eXBlSWRzOiBUeXBlSWRzQnVmZmVyLCB2YWx1ZU9mZnNldHNPckNoaWxkcmVuOiBWYWx1ZU9mZnNldHNCdWZmZXIgfCAoRGF0YSB8IFZlY3RvcilbXSwgY2hpbGRyZW4/OiAoRGF0YSB8IFZlY3RvcilbXSkge1xuICAgICAgICBjb25zdCBidWZmZXJzID0gPHVua25vd24+IFtcbiAgICAgICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdG9VaW50OEFycmF5KG51bGxCaXRtYXApLFxuICAgICAgICAgICAgdG9BcnJheUJ1ZmZlclZpZXcodHlwZS5BcnJheVR5cGUsIHR5cGVJZHMpXG4gICAgICAgIF0gYXMgUGFydGlhbDxCdWZmZXJzPFQ+PjtcbiAgICAgICAgaWYgKHR5cGUubW9kZSA9PT0gVW5pb25Nb2RlLlNwYXJzZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRhKHR5cGUsIG9mZnNldCwgbGVuZ3RoLCBudWxsQ291bnQsIGJ1ZmZlcnMsIHZhbHVlT2Zmc2V0c09yQ2hpbGRyZW4gYXMgKERhdGEgfCBWZWN0b3IpW10pO1xuICAgICAgICB9XG4gICAgICAgIGJ1ZmZlcnNbQnVmZmVyVHlwZS5PRkZTRVRdID0gdG9JbnQzMkFycmF5KDxWYWx1ZU9mZnNldHNCdWZmZXI+IHZhbHVlT2Zmc2V0c09yQ2hpbGRyZW4pO1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwgYnVmZmVycywgY2hpbGRyZW4pO1xuICAgIH1cbn1cblxuKChEYXRhLnByb3RvdHlwZSBhcyBhbnkpLmNoaWxkRGF0YSA9IE9iamVjdC5mcmVlemUoW10pKTtcbiJdfQ==
