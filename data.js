"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const bit_1 = require("./util/bit");
const type_1 = require("./type");
function toTypedArray(ArrayType, values) {
    if (!ArrayType && ArrayBuffer.isView(values)) {
        return values;
    }
    return values instanceof ArrayType ? values
        : !values || !ArrayBuffer.isView(values) ? ArrayType.from(values || [])
            : new ArrayType(values.buffer, values.byteOffset, values.byteLength / ArrayType.BYTES_PER_ELEMENT);
}
exports.toTypedArray = toTypedArray;
exports.kUnknownNullCount = -1;
class BaseData {
    constructor(type, length, offset, nullCount) {
        this.type = type;
        this.length = Math.floor(Math.max(length || 0, 0));
        this.offset = Math.floor(Math.max(offset || 0, 0));
        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));
    }
    get typeId() { return this.type.TType; }
    get nullBitmap() { return this[type_1.VectorType.VALIDITY]; }
    get nullCount() {
        let nullCount = this._nullCount;
        let nullBitmap;
        if (nullCount === -1 && (nullBitmap = this[type_1.VectorType.VALIDITY])) {
            this._nullCount = nullCount = this.length - bit_1.popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);
        }
        return nullCount;
    }
    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {
        return new BaseData(type, length, offset, nullCount);
    }
    slice(offset, length) {
        return length <= 0 ? this : this.sliceInternal(this.clone(this.type, length, this.offset + offset, +(this._nullCount === 0) - 1), offset, length);
    }
    sliceInternal(clone, offset, length) {
        let arr;
        // If typeIds exist, slice the typeIds buffer
        (arr = this[type_1.VectorType.TYPE]) && (clone[type_1.VectorType.TYPE] = this.sliceData(arr, offset, length));
        // If offsets exist, only slice the offsets buffer
        (arr = this[type_1.VectorType.OFFSET]) && (clone[type_1.VectorType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||
            // Otherwise if no offsets, slice the data buffer
            (arr = this[type_1.VectorType.DATA]) && (clone[type_1.VectorType.DATA] = this.sliceData(arr, offset, length));
        return clone;
    }
    sliceData(data, offset, length) {
        return data.subarray(offset, offset + length);
    }
    sliceOffsets(valueOffsets, offset, length) {
        return valueOffsets.subarray(offset, offset + length + 1);
    }
}
exports.BaseData = BaseData;
class FlatData extends BaseData {
    constructor(type, length, nullBitmap, data, offset, nullCount) {
        super(type, length, offset, nullCount);
        this[type_1.VectorType.DATA] = toTypedArray(this.ArrayType, data);
        this[type_1.VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);
    }
    get values() { return this[type_1.VectorType.DATA]; }
    get ArrayType() { return this.type.ArrayType; }
    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {
        return new this.constructor(type, length, this[type_1.VectorType.VALIDITY], this[type_1.VectorType.DATA], offset, nullCount);
    }
}
exports.FlatData = FlatData;
class BoolData extends FlatData {
    sliceData(data) { return data; }
}
exports.BoolData = BoolData;
class FlatListData extends FlatData {
    constructor(type, length, nullBitmap, valueOffsets, data, offset, nullCount) {
        super(type, length, nullBitmap, data, offset, nullCount);
        this[type_1.VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);
    }
    get values() { return this[type_1.VectorType.DATA]; }
    get valueOffsets() { return this[type_1.VectorType.OFFSET]; }
    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {
        return new FlatListData(type, length, this[type_1.VectorType.VALIDITY], this[type_1.VectorType.OFFSET], this[type_1.VectorType.DATA], offset, nullCount);
    }
}
exports.FlatListData = FlatListData;
class DictionaryData extends BaseData {
    constructor(type, dictionary, indices) {
        super(type, indices.length, indices.offset, indices._nullCount);
        this._indices = indices;
        this._dictionary = dictionary;
    }
    get indices() { return this._indices; }
    get dictionary() { return this._dictionary; }
    get nullCount() { return this._indices.nullCount; }
    get nullBitmap() { return this._indices.nullBitmap; }
    clone(type, length = this.length, offset = this.offset) {
        const data = this._dictionary.data.clone(type.dictionary);
        return new DictionaryData(this.type, this._dictionary.clone(data), this._indices.slice(offset - this.offset, length));
    }
    sliceInternal(clone, _offset, _length) {
        clone.length = clone._indices.length;
        clone._nullCount = clone._indices._nullCount;
        return clone;
    }
}
exports.DictionaryData = DictionaryData;
class NestedData extends BaseData {
    constructor(type, length, nullBitmap, childData, offset, nullCount) {
        super(type, length, offset, nullCount);
        this.childData = childData;
        this[type_1.VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);
    }
    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {
        return new NestedData(type, length, this[type_1.VectorType.VALIDITY], this.childData, offset, nullCount);
    }
    sliceInternal(clone, offset, length) {
        if (!this[type_1.VectorType.OFFSET]) {
            clone.childData = this.childData.map((child) => child.slice(offset, length));
        }
        return super.sliceInternal(clone, offset, length);
    }
}
exports.NestedData = NestedData;
class SingleNestedData extends NestedData {
    constructor(type, length, nullBitmap, valueChildData, offset, nullCount) {
        super(type, length, nullBitmap, [valueChildData], offset, nullCount);
        this._valuesData = valueChildData;
    }
    get values() { return this._valuesData; }
}
exports.SingleNestedData = SingleNestedData;
class ListData extends SingleNestedData {
    constructor(type, length, nullBitmap, valueOffsets, valueChildData, offset, nullCount) {
        super(type, length, nullBitmap, valueChildData, offset, nullCount);
        this[type_1.VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);
    }
    get valueOffsets() { return this[type_1.VectorType.OFFSET]; }
    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {
        return new ListData(type, length, this[type_1.VectorType.VALIDITY], this[type_1.VectorType.OFFSET], this._valuesData, offset, nullCount);
    }
}
exports.ListData = ListData;
class UnionData extends NestedData {
    constructor(type, length, nullBitmap, typeIds, childData, offset, nullCount) {
        super(type, length, nullBitmap, childData, offset, nullCount);
        this[type_1.VectorType.TYPE] = toTypedArray(Int8Array, typeIds);
        this.typeIdToChildIndex = type.typeIds.reduce((typeIdToChildIndex, typeId, idx) => {
            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;
        }, Object.create(null));
    }
    get typeIds() { return this[type_1.VectorType.TYPE]; }
    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {
        return new UnionData(type, length, this[type_1.VectorType.VALIDITY], this[type_1.VectorType.TYPE], this.childData, offset, nullCount);
    }
}
exports.UnionData = UnionData;
class SparseUnionData extends UnionData {
    constructor(type, length, nullBitmap, typeIds, childData, offset, nullCount) {
        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);
    }
    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {
        return new SparseUnionData(type, length, this[type_1.VectorType.VALIDITY], this[type_1.VectorType.TYPE], this.childData, offset, nullCount);
    }
}
exports.SparseUnionData = SparseUnionData;
class DenseUnionData extends UnionData {
    get valueOffsets() { return this[type_1.VectorType.OFFSET]; }
    constructor(type, length, nullBitmap, typeIds, valueOffsets, childData, offset, nullCount) {
        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);
        this[type_1.VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);
    }
    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {
        return new DenseUnionData(type, length, this[type_1.VectorType.VALIDITY], this[type_1.VectorType.TYPE], this[type_1.VectorType.OFFSET], this.childData, offset, nullCount);
    }
}
exports.DenseUnionData = DenseUnionData;
class ChunkedData extends BaseData {
    constructor(type, length, chunkVectors, offset, nullCount, chunkOffsets) {
        super(type, length, offset, nullCount);
        this._chunkVectors = chunkVectors;
        this._chunkOffsets = chunkOffsets || ChunkedData.computeOffsets(chunkVectors);
    }
    get chunkVectors() { return this._chunkVectors; }
    get chunkOffsets() { return this._chunkOffsets; }
    get chunkData() {
        return this._chunkData || (this._chunkData = this._chunkVectors.map(({ data }) => data));
    }
    get nullCount() {
        let nullCount = this._nullCount;
        if (nullCount === -1) {
            this._nullCount = nullCount = this._chunkVectors.reduce((x, c) => x + c.nullCount, 0);
        }
        return nullCount;
    }
    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {
        return new ChunkedData(type, length, this._chunkVectors.map((vec) => vec.clone(vec.data.clone(type))), offset, nullCount, this._chunkOffsets);
    }
    sliceInternal(clone, offset, length) {
        const chunks = this._chunkVectors;
        const offsets = this._chunkOffsets;
        const chunkSlices = [];
        for (let childIndex = -1, numChildren = chunks.length; ++childIndex < numChildren;) {
            const child = chunks[childIndex];
            const childLength = child.length;
            const childOffset = offsets[childIndex];
            // If the child is to the right of the slice boundary, exclude
            if (childOffset >= offset + length) {
                continue;
            }
            // If the child is to the left of of the slice boundary, exclude
            if (offset >= childOffset + childLength) {
                continue;
            }
            // If the child is between both left and right boundaries, include w/o slicing
            if (childOffset >= offset && (childOffset + childLength) <= offset + length) {
                chunkSlices.push(child);
                continue;
            }
            // If the child overlaps one of the slice boundaries, include that slice
            const begin = Math.max(0, offset - childOffset);
            const end = begin + Math.min(childLength - begin, (offset + length) - childOffset);
            chunkSlices.push(child.slice(begin, end));
        }
        clone._chunkVectors = chunkSlices;
        clone._chunkOffsets = ChunkedData.computeOffsets(chunkSlices);
        return clone;
    }
    static computeOffsets(childVectors) {
        const childOffsets = new Uint32Array(childVectors.length + 1);
        for (let index = 0, length = childOffsets.length, childOffset = childOffsets[0] = 0; ++index < length;) {
            childOffsets[index] = (childOffset += childVectors[index - 1].length);
        }
        return childOffsets;
    }
}
exports.ChunkedData = ChunkedData;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
