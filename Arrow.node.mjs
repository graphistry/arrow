// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Duplex, Readable } from 'stream';
import streamAdapters from './io/adapters';
import { RecordBatchReader } from './ipc/reader';
import { RecordBatchWriter } from './ipc/writer';
import { isIterable, isAsyncIterable } from './util/compat';
import { AsyncByteStream, AsyncByteQueue } from './io/stream';
streamAdapters.toReadableNodeStream = toReadableNodeStream;
RecordBatchReader['throughNode'] = recordBatchReaderThroughNodeStream;
RecordBatchWriter['throughNode'] = recordBatchWriterThroughNodeStream;
export * from './Arrow.dom';
function recordBatchReaderThroughNodeStream() {
    let reading = false;
    let reader = null;
    let through = new AsyncByteQueue();
    return new Duplex({
        allowHalfOpen: false,
        readableObjectMode: true,
        writableObjectMode: false,
        final(cb) { through && through.close(); cb(); },
        write(x, _, cb) { through && through.write(x); cb(); },
        read(size) {
            through && (reading || (reading = !!(async () => await next(this, size, reader || (reader = await open(through))))()));
        },
        destroy(err, cb) {
            reading = true;
            through && (err ? through.abort(err) : through.close());
            cb(reader = through = null);
        }
    });
    async function open(queue) {
        return await (await RecordBatchReader.from(queue)).open();
    }
    async function next(sink, size, reader) {
        let r = null;
        while (sink.readable && !(r = await reader.next()).done) {
            if (!sink.push(r.value) || (size != null && --size <= 0)) {
                return reading = false;
            }
        }
        sink.push(null);
        await reader.cancel();
    }
}
function recordBatchWriterThroughNodeStream() {
    let reading = false;
    let through = new AsyncByteQueue();
    let reader = new AsyncByteStream(through);
    let writer = new this().reset(through);
    return new Duplex({
        allowHalfOpen: false,
        writableObjectMode: true,
        readableObjectMode: false,
        final(cb) { writer && writer.close(); cb(); },
        write(x, _, cb) { writer && writer.write(x); cb(); },
        read(size) {
            reader && (reading || (reading = !!(async () => await next(this, size, reader))()));
        },
        destroy(err, cb) {
            reading = true;
            writer && (err ? writer.abort(err) : writer.close());
            cb(through = reader = writer = null);
        }
    });
    async function next(sink, size, reader) {
        let buf = null;
        while (sink.readable && (buf = await reader.read())) {
            if (!sink.push(buf) || (size != null && (size -= buf.byteLength) <= 0)) {
                return reading = false;
            }
        }
        sink.push(null);
        await reader.cancel();
    }
}
function toReadableNodeStream(source, options) {
    if (isAsyncIterable(source)) {
        return asyncIterableAsReadableNodeStream(source, options);
    }
    if (isIterable(source)) {
        return iterableAsReadableNodeStream(source, options);
    }
    throw new Error(`toReadableNodeStream() must be called with an Iterable or AsyncIterable`);
}
function iterableAsReadableNodeStream(source, options) {
    let it, reading = false;
    return new Readable({
        ...options,
        read(size) {
            !reading && (reading = true) &&
                next(this, size, (it || (it = source[Symbol.iterator]())));
        },
        destroy(e, cb) {
            if ((reading = true) && it || Boolean(cb(null))) {
                let fn = e == null ? it.return : it.throw;
                (fn && fn.call(it, e) || true) && cb(null);
            }
        },
    });
    function next(sink, size, it) {
        let r = null;
        while (sink.readable && (size == null || size-- > 0) && !(r = it.next()).done) {
            if (!sink.push(r.value)) {
                return reading = false;
            }
        }
        if (((r && r.done) || !sink.readable) && (reading = sink.push(null) || true)) {
            it.return && it.return();
        }
    }
}
function asyncIterableAsReadableNodeStream(source, options) {
    let it, reading = false;
    return new Readable({
        ...options,
        read(size) {
            reading || (reading = !!(async () => (await next(this, size, (it || (it = source[Symbol.asyncIterator]())))))());
        },
        destroy(e, cb) {
            if ((reading = true) && it || Boolean(cb(null))) {
                (async (fn) => {
                    (fn && await fn.call(it, e) || true) && cb(null);
                })(e == null ? it.return : it.throw);
            }
        },
    });
    async function next(sink, size, it) {
        let r = null;
        while (sink.readable && (size == null || size-- > 0) && !(r = await it.next()).done) {
            if (!sink.push(r.value)) {
                return reading = false;
            }
        }
        if (((r && r.done) || !sink.readable) && (reading = sink.push(null) || true)) {
            it.return && await it.return();
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
