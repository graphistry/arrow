"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const column_1 = require("./column");
const schema_1 = require("./schema");
const compat_1 = require("./util/compat");
const recordbatch_1 = require("./recordbatch");
const reader_1 = require("./ipc/reader");
const index_1 = require("./vector/index");
const writer_1 = require("./ipc/writer");
class Table {
    constructor(...args) {
        // List of inner Vectors, possibly spanning batches
        this._columns = [];
        let schema = null;
        if (args[0] instanceof schema_1.Schema) {
            schema = args.shift();
        }
        let batches = args.reduce(function flatten(xs, x) {
            return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];
        }, []).filter((x) => x instanceof recordbatch_1.RecordBatch);
        if (!schema && !(schema = batches[0] && batches[0].schema)) {
            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch with a Schema');
        }
        this._schema = schema;
        this._batches = batches;
        this._batchesUnion = batches.length == 0
            ? new recordbatch_1.RecordBatch(schema, 0, [])
            : batches.length === 1 ? batches[0]
                : index_1.ChunkedVector.concat(...batches);
        this._length = this.batchesUnion.length;
        this._numCols = this.schema.fields.length;
    }
    /** @nocollapse */
    static empty() { return new Table(new schema_1.Schema([]), []); }
    /** @nocollapse */
    static from(source) {
        if (!source) {
            return Table.empty();
        }
        let reader = reader_1.RecordBatchReader.from(source);
        if (compat_1.isPromise(reader)) {
            return (() => tslib_1.__awaiter(this, void 0, void 0, function* () { return yield Table.from(yield reader); }))();
        }
        if (reader.isSync() && (reader = reader.open())) {
            return !reader.schema ? Table.empty() : new Table(reader.schema, [...reader]);
        }
        return ((opening) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            var e_1, _a;
            const reader = yield opening;
            const schema = reader.schema;
            const batches = [];
            if (schema) {
                try {
                    for (var reader_2 = tslib_1.__asyncValues(reader), reader_2_1; reader_2_1 = yield reader_2.next(), !reader_2_1.done;) {
                        let batch = reader_2_1.value;
                        batches.push(batch);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (reader_2_1 && !reader_2_1.done && (_a = reader_2.return)) yield _a.call(reader_2);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return new Table(schema, batches);
            }
            return Table.empty();
        }))(reader.open());
    }
    /** @nocollapse */
    static fromAsync(source) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield Table.from(source);
        });
    }
    /** @nocollapse */
    static fromVectors(vectors, names) {
        return new Table(recordbatch_1.RecordBatch.from(vectors, names));
    }
    /** @nocollapse */
    static fromStruct(struct) {
        const schema = new schema_1.Schema(struct.type.children);
        const chunks = (struct instanceof index_1.ChunkedVector ? struct.chunks : [struct]);
        return new Table(schema, chunks.map((chunk) => new recordbatch_1.RecordBatch(schema, chunk.data)));
    }
    get schema() { return this._schema; }
    get length() { return this._length; }
    get numCols() { return this._numCols; }
    get batches() { return this._batches; }
    get batchesUnion() { return this._batchesUnion; }
    get(index) {
        return this.batchesUnion.get(index);
    }
    getColumn(name) {
        return this.getColumnAt(this.getColumnIndex(name));
    }
    getColumnAt(index) {
        if (index < 0 || index >= this.numCols) {
            return null;
        }
        if (this.batches.length === 1) {
            return this.batches[0].getChildAt(index);
        }
        return new column_1.Column(this.schema.fields[index], this.batches.map((b) => b.getChildAt(index)));
    }
    getColumnIndex(name) {
        return this.schema.fields.findIndex((f) => f.name === name);
    }
    [Symbol.iterator]() {
        return this.batchesUnion[Symbol.iterator]();
    }
    // @ts-ignore
    serialize(encoding = 'binary', stream = true) {
        const writer = !stream
            ? writer_1.RecordBatchFileWriter
            : writer_1.RecordBatchStreamWriter;
        return writer.writeAll(this.batches).toUint8Array(true);
    }
    count() {
        return this.length;
    }
    select(...columnNames) {
        return new Table(this.batches.map((batch) => batch.select(...columnNames)));
    }
}
exports.Table = Table;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
