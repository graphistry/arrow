// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Column } from './column';
import { Schema } from './schema';
import { isPromise } from './util/compat';
import { RecordBatch } from './recordbatch';
import { RecordBatchReader } from './ipc/reader';
import { ChunkedVector } from './vector/index';
import { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';
export class Table {
    constructor(...args) {
        // List of inner Vectors, possibly spanning batches
        this._columns = [];
        let schema = null;
        if (args[0] instanceof Schema) {
            schema = args.shift();
        }
        let batches = args.reduce(function flatten(xs, x) {
            return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];
        }, []).filter((x) => x instanceof RecordBatch);
        if (!schema && !(schema = batches[0] && batches[0].schema)) {
            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch with a Schema');
        }
        this._schema = schema;
        this._batches = batches;
        this._batchesUnion = batches.length == 0
            ? new RecordBatch(schema, 0, [])
            : batches.length === 1 ? batches[0]
                : ChunkedVector.concat(...batches);
        this._length = this.batchesUnion.length;
        this._numCols = this.schema.fields.length;
    }
    /** @nocollapse */
    static empty() { return new Table(new Schema([]), []); }
    /** @nocollapse */
    static from(source) {
        if (!source) {
            return Table.empty();
        }
        let reader = RecordBatchReader.from(source);
        if (isPromise(reader)) {
            return (async () => await Table.from(await reader))();
        }
        if (reader.isSync() && (reader = reader.open())) {
            return !reader.schema ? Table.empty() : new Table(reader.schema, [...reader]);
        }
        return (async (opening) => {
            const reader = await opening;
            const schema = reader.schema;
            const batches = [];
            if (schema) {
                for await (let batch of reader) {
                    batches.push(batch);
                }
                return new Table(schema, batches);
            }
            return Table.empty();
        })(reader.open());
    }
    /** @nocollapse */
    static async fromAsync(source) {
        return await Table.from(source);
    }
    /** @nocollapse */
    static fromVectors(vectors, names) {
        return new Table(RecordBatch.from(vectors, names));
    }
    /** @nocollapse */
    static fromStruct(struct) {
        const schema = new Schema(struct.type.children);
        const chunks = (struct instanceof ChunkedVector ? struct.chunks : [struct]);
        return new Table(schema, chunks.map((chunk) => new RecordBatch(schema, chunk.data)));
    }
    get schema() { return this._schema; }
    get length() { return this._length; }
    get numCols() { return this._numCols; }
    get batches() { return this._batches; }
    get batchesUnion() { return this._batchesUnion; }
    get(index) {
        return this.batchesUnion.get(index);
    }
    getColumn(name) {
        return this.getColumnAt(this.getColumnIndex(name));
    }
    getColumnAt(index) {
        if (index < 0 || index >= this.numCols) {
            return null;
        }
        if (this.batches.length === 1) {
            return this.batches[0].getChildAt(index);
        }
        return new Column(this.schema.fields[index], this.batches.map((b) => b.getChildAt(index)));
    }
    getColumnIndex(name) {
        return this.schema.fields.findIndex((f) => f.name === name);
    }
    [Symbol.iterator]() {
        return this.batchesUnion[Symbol.iterator]();
    }
    // @ts-ignore
    serialize(encoding = 'binary', stream = true) {
        const writer = !stream
            ? RecordBatchFileWriter
            : RecordBatchStreamWriter;
        return writer.writeAll(this.batches).toUint8Array(true);
    }
    count() {
        return this.length;
    }
    select(...columnNames) {
        return new Table(this.batches.map((batch) => batch.select(...columnNames)));
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
