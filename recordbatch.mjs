// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Schema, Struct } from './type';
import { Vector, StructVector } from './vector';
import { NestedData, ChunkedData } from './data';
export class RecordBatch extends StructVector {
    static from(vectors) {
        return new RecordBatch(Schema.from(vectors), Math.max(...vectors.map((v) => v.length)), vectors);
    }
    constructor(...args) {
        if (typeof args[1] !== 'number') {
            const data = args[1];
            super(data, args[2]);
            this.schema = args[0];
            this.numRows = data.length;
            this.numCols = this.schema.fields.length;
            this.columns = data instanceof ChunkedData
                ? data.childVectors
                : data.childData.map((col) => Vector.create(col));
        }
        else {
            const [schema, numRows, cols] = args;
            const columns = new Array(cols.length);
            const columnsData = new Array(cols.length);
            for (let index = -1, length = cols.length; ++index < length;) {
                const col = cols[index];
                if (col instanceof Vector) {
                    columnsData[index] = (columns[index] = col).data;
                }
                else {
                    columns[index] = Vector.create(columnsData[index] = col);
                }
            }
            super(new NestedData(new Struct(schema.fields), numRows, null, columnsData));
            this.schema = schema;
            this.columns = columns;
            this.numRows = numRows;
            this.numCols = schema.fields.length;
        }
    }
    clone(data, view = this.view.clone(data)) {
        return new RecordBatch(this.schema, data, view);
    }
    select(...columnNames) {
        const fields = this.schema.fields;
        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));
        return new RecordBatch(this.schema.select(...columnNames), this.numRows, this.columns.filter((_, index) => namesToKeep[fields[index].name]));
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDckUsQ0FBQztJQUNOLENBQUM7Q0FDSiIsImZpbGUiOiJyZWNvcmRiYXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBTY2hlbWEsIFN0cnVjdCB9IGZyb20gJy4vdHlwZSc7XG5pbXBvcnQgeyBmbGF0YnVmZmVycyB9IGZyb20gJ2ZsYXRidWZmZXJzJztcbmltcG9ydCB7IFZpZXcsIFZlY3RvciwgU3RydWN0VmVjdG9yIH0gZnJvbSAnLi92ZWN0b3InO1xuaW1wb3J0IHsgRGF0YSwgTmVzdGVkRGF0YSwgQ2h1bmtlZERhdGEgfSBmcm9tICcuL2RhdGEnO1xuXG5pbXBvcnQgTG9uZyA9IGZsYXRidWZmZXJzLkxvbmc7XG5cbmV4cG9ydCBjbGFzcyBSZWNvcmRCYXRjaCBleHRlbmRzIFN0cnVjdFZlY3RvciB7XG4gICAgcHVibGljIHN0YXRpYyBmcm9tKHZlY3RvcnM6IFZlY3RvcltdKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVjb3JkQmF0Y2goU2NoZW1hLmZyb20odmVjdG9ycyksXG4gICAgICAgICAgICBNYXRoLm1heCguLi52ZWN0b3JzLm1hcCgodikgPT4gdi5sZW5ndGgpKSxcbiAgICAgICAgICAgIHZlY3RvcnNcbiAgICAgICAgKTtcbiAgICB9XG4gICAgcHVibGljIHJlYWRvbmx5IHNjaGVtYTogU2NoZW1hO1xuICAgIHB1YmxpYyByZWFkb25seSBudW1Db2xzOiBudW1iZXI7XG4gICAgcHVibGljIHJlYWRvbmx5IG51bVJvd3M6IG51bWJlcjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29sdW1uczogVmVjdG9yPGFueT5bXTtcbiAgICBjb25zdHJ1Y3RvcihzY2hlbWE6IFNjaGVtYSwgZGF0YTogRGF0YTxTdHJ1Y3Q+LCB2aWV3OiBWaWV3PFN0cnVjdD4pO1xuICAgIGNvbnN0cnVjdG9yKHNjaGVtYTogU2NoZW1hLCBudW1Sb3dzOiBMb25nIHwgbnVtYmVyLCBjb2xzOiBEYXRhPGFueT4gfCBWZWN0b3JbXSk7XG4gICAgY29uc3RydWN0b3IoLi4uYXJnczogYW55W10pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGFyZ3NbMV0gYXMgRGF0YTxTdHJ1Y3Q+O1xuICAgICAgICAgICAgc3VwZXIoZGF0YSwgYXJnc1syXSk7XG4gICAgICAgICAgICB0aGlzLnNjaGVtYSA9IGFyZ3NbMF07XG4gICAgICAgICAgICB0aGlzLm51bVJvd3MgPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMubnVtQ29scyA9IHRoaXMuc2NoZW1hLmZpZWxkcy5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmNvbHVtbnMgPSBkYXRhIGluc3RhbmNlb2YgQ2h1bmtlZERhdGFcbiAgICAgICAgICAgICAgICA/IGRhdGEuY2hpbGRWZWN0b3JzXG4gICAgICAgICAgICAgICAgOiBkYXRhLmNoaWxkRGF0YS5tYXAoKGNvbCkgPT4gVmVjdG9yLmNyZWF0ZShjb2wpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IFtzY2hlbWEsIG51bVJvd3MsIGNvbHNdID0gYXJncztcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbnM6IFZlY3Rvcjxhbnk+W10gPSBuZXcgQXJyYXkoY29scy5sZW5ndGgpO1xuICAgICAgICAgICAgY29uc3QgY29sdW1uc0RhdGE6IERhdGE8YW55PltdID0gbmV3IEFycmF5KGNvbHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gLTEsIGxlbmd0aCA9IGNvbHMubGVuZ3RoOyArK2luZGV4IDwgbGVuZ3RoOykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbDogRGF0YTxhbnk+IHwgVmVjdG9yID0gY29sc1tpbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKGNvbCBpbnN0YW5jZW9mIFZlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zRGF0YVtpbmRleF0gPSAoY29sdW1uc1tpbmRleF0gPSBjb2wgYXMgVmVjdG9yKS5kYXRhO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnNbaW5kZXhdID0gVmVjdG9yLmNyZWF0ZShjb2x1bW5zRGF0YVtpbmRleF0gPSBjb2wpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1cGVyKG5ldyBOZXN0ZWREYXRhKG5ldyBTdHJ1Y3Qoc2NoZW1hLmZpZWxkcyksIG51bVJvd3MsIG51bGwsIGNvbHVtbnNEYXRhKSk7XG4gICAgICAgICAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgICAgICAgICAgIHRoaXMuY29sdW1ucyA9IGNvbHVtbnM7XG4gICAgICAgICAgICB0aGlzLm51bVJvd3MgPSBudW1Sb3dzO1xuICAgICAgICAgICAgdGhpcy5udW1Db2xzID0gc2NoZW1hLmZpZWxkcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGNsb25lPFIgZXh0ZW5kcyBTdHJ1Y3Q+KGRhdGE6IERhdGE8Uj4sIHZpZXc6IFZpZXc8Uj4gPSB0aGlzLnZpZXcuY2xvbmUoZGF0YSkpOiB0aGlzIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvcmRCYXRjaCh0aGlzLnNjaGVtYSwgZGF0YSBhcyBhbnksIHZpZXcpIGFzIGFueTtcbiAgICB9XG4gICAgcHVibGljIHNlbGVjdCguLi5jb2x1bW5OYW1lczogc3RyaW5nW10pIHtcbiAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy5zY2hlbWEuZmllbGRzO1xuICAgICAgICBjb25zdCBuYW1lc1RvS2VlcCA9IGNvbHVtbk5hbWVzLnJlZHVjZSgoeHMsIHgpID0+ICh4c1t4XSA9IHRydWUpICYmIHhzLCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvcmRCYXRjaChcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hLnNlbGVjdCguLi5jb2x1bW5OYW1lcyksIHRoaXMubnVtUm93cyxcbiAgICAgICAgICAgIHRoaXMuY29sdW1ucy5maWx0ZXIoKF8sIGluZGV4KSA9PiBuYW1lc1RvS2VlcFtmaWVsZHNbaW5kZXhdLm5hbWVdKVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==
