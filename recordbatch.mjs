// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Schema, Struct } from './type';
import { Vector, StructVector } from './vector';
import { NestedData } from './data';
import { PipeIterator } from './util/node';
import { valueToString, leftPad } from './util/pretty';
export class RecordBatch extends StructVector {
    static from(vectors) {
        return new RecordBatch(Schema.from(vectors), Math.max(...vectors.map((v) => v.length)), vectors);
    }
    constructor(...args) {
        if (typeof args[1] !== 'number') {
            const data = args[1];
            super(data, args[2]);
            this.schema = args[0];
            this.length = data.length;
        }
        else {
            const [schema, numRows, cols] = args;
            const childData = new Array(cols.length);
            for (let index = -1, length = cols.length; ++index < length;) {
                const col = cols[index];
                childData[index] = col instanceof Vector ? col.data : col;
            }
            super(new NestedData(new Struct(schema.fields), numRows, null, childData));
            this.schema = schema;
            this.length = numRows;
        }
        this.numCols = this.schema.fields.length;
    }
    clone(data, view = this.view.clone(data)) {
        return new RecordBatch(this.schema, data, view);
    }
    getChildAt(index) {
        return index < 0 || index >= this.numCols ? null : super.getChildAt(index);
    }
    select(...columnNames) {
        const fields = this.schema.fields;
        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));
        return new RecordBatch(this.schema.select(...columnNames), this.length, this.childData.filter((_, i) => namesToKeep[fields[i].name]));
    }
    rowsToString(separator = ' | ', rowOffset = 0, maxColumnWidths = []) {
        return new PipeIterator(recordBatchRowsToString(this, separator, rowOffset, maxColumnWidths), 'utf8');
    }
}
function* recordBatchRowsToString(recordBatch, separator = ' | ', rowOffset = 0, maxColumnWidths = []) {
    const fields = recordBatch.schema.fields;
    const header = ['row_id', ...fields.map((f) => `${f}`)].map(valueToString);
    header.forEach((x, i) => {
        maxColumnWidths[i] = Math.max(maxColumnWidths[i] || 0, x.length);
    });
    // Pass one to convert to strings and count max column widths
    for (let i = -1, n = recordBatch.length - 1; ++i < n;) {
        let val, row = [rowOffset + i, ...recordBatch.get(i)];
        for (let j = -1, k = row.length; ++j < k;) {
            val = valueToString(row[j]);
            maxColumnWidths[j] = Math.max(maxColumnWidths[j] || 0, val.length);
        }
    }
    for (let i = -1; ++i < recordBatch.length;) {
        if ((rowOffset + i) % 1000 === 0) {
            yield header.map((x, j) => leftPad(x, ' ', maxColumnWidths[j])).join(separator);
        }
        yield [rowOffset + i, ...recordBatch.get(i)]
            .map((x) => valueToString(x))
            .map((x, j) => leftPad(x, ' ', maxColumnWidths[j]))
            .join(separator);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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O1lBQzVCLGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZFLENBQUM7SUFDTCxDQUFDO0lBQ0QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQ3pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BGLENBQUM7UUFDRCxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBRSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFxQixDQUFDO2FBQzNELEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzVCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2xELElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN6QixDQUFDO0FBQ0wsQ0FBQyIsImZpbGUiOiJyZWNvcmRiYXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBTY2hlbWEsIFN0cnVjdCwgRGF0YVR5cGUgfSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IHsgZmxhdGJ1ZmZlcnMgfSBmcm9tICdmbGF0YnVmZmVycyc7XG5pbXBvcnQgeyBWaWV3LCBWZWN0b3IsIFN0cnVjdFZlY3RvciB9IGZyb20gJy4vdmVjdG9yJztcbmltcG9ydCB7IERhdGEsIE5lc3RlZERhdGEgfSBmcm9tICcuL2RhdGEnO1xuaW1wb3J0IHsgUGlwZUl0ZXJhdG9yIH0gZnJvbSAnLi91dGlsL25vZGUnO1xuaW1wb3J0IHsgdmFsdWVUb1N0cmluZywgbGVmdFBhZCB9IGZyb20gJy4vdXRpbC9wcmV0dHknO1xuXG5pbXBvcnQgTG9uZyA9IGZsYXRidWZmZXJzLkxvbmc7XG5cbmV4cG9ydCBjbGFzcyBSZWNvcmRCYXRjaCBleHRlbmRzIFN0cnVjdFZlY3RvciB7XG4gICAgcHVibGljIHN0YXRpYyBmcm9tKHZlY3RvcnM6IFZlY3RvcltdKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVjb3JkQmF0Y2goU2NoZW1hLmZyb20odmVjdG9ycyksXG4gICAgICAgICAgICBNYXRoLm1heCguLi52ZWN0b3JzLm1hcCgodikgPT4gdi5sZW5ndGgpKSxcbiAgICAgICAgICAgIHZlY3RvcnNcbiAgICAgICAgKTtcbiAgICB9XG4gICAgcHVibGljIHJlYWRvbmx5IHNjaGVtYTogU2NoZW1hO1xuICAgIHB1YmxpYyByZWFkb25seSBsZW5ndGg6IG51bWJlcjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbnVtQ29sczogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKHNjaGVtYTogU2NoZW1hLCBkYXRhOiBEYXRhPFN0cnVjdD4sIHZpZXc6IFZpZXc8U3RydWN0Pik7XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hOiBTY2hlbWEsIG51bVJvd3M6IExvbmcgfCBudW1iZXIsIGNvbHM6IERhdGE8YW55PiB8IFZlY3RvcltdKTtcbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzOiBhbnlbXSkge1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXJnc1sxXSBhcyBEYXRhPFN0cnVjdD47XG4gICAgICAgICAgICBzdXBlcihkYXRhLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hID0gYXJnc1swXTtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBbc2NoZW1hLCBudW1Sb3dzLCBjb2xzXSA9IGFyZ3M7XG4gICAgICAgICAgICBjb25zdCBjaGlsZERhdGE6IERhdGE8YW55PltdID0gbmV3IEFycmF5KGNvbHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gLTEsIGxlbmd0aCA9IGNvbHMubGVuZ3RoOyArK2luZGV4IDwgbGVuZ3RoOykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbDogRGF0YTxhbnk+IHwgVmVjdG9yID0gY29sc1tpbmRleF07XG4gICAgICAgICAgICAgICAgY2hpbGREYXRhW2luZGV4XSA9IGNvbCBpbnN0YW5jZW9mIFZlY3RvciA/IGNvbC5kYXRhIDogY29sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3VwZXIobmV3IE5lc3RlZERhdGEobmV3IFN0cnVjdChzY2hlbWEuZmllbGRzKSwgbnVtUm93cywgbnVsbCwgY2hpbGREYXRhKSk7XG4gICAgICAgICAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gbnVtUm93cztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm51bUNvbHMgPSB0aGlzLnNjaGVtYS5maWVsZHMubGVuZ3RoO1xuICAgIH1cbiAgICBwdWJsaWMgY2xvbmU8UiBleHRlbmRzIFN0cnVjdD4oZGF0YTogRGF0YTxSPiwgdmlldzogVmlldzxSPiA9IHRoaXMudmlldy5jbG9uZShkYXRhKSk6IHRoaXMge1xuICAgICAgICByZXR1cm4gbmV3IFJlY29yZEJhdGNoKHRoaXMuc2NoZW1hLCBkYXRhIGFzIGFueSwgdmlldykgYXMgYW55O1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0Q2hpbGRBdDxSIGV4dGVuZHMgRGF0YVR5cGUgPSBEYXRhVHlwZT4oaW5kZXg6IG51bWJlcik6IFZlY3RvcjxSPiB8IG51bGwge1xuICAgICAgICByZXR1cm4gaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMubnVtQ29scyA/IG51bGwgOiBzdXBlci5nZXRDaGlsZEF0PFI+KGluZGV4KTtcbiAgICB9XG4gICAgcHVibGljIHNlbGVjdCguLi5jb2x1bW5OYW1lczogc3RyaW5nW10pIHtcbiAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy5zY2hlbWEuZmllbGRzO1xuICAgICAgICBjb25zdCBuYW1lc1RvS2VlcCA9IGNvbHVtbk5hbWVzLnJlZHVjZSgoeHMsIHgpID0+ICh4c1t4XSA9IHRydWUpICYmIHhzLCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvcmRCYXRjaChcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hLnNlbGVjdCguLi5jb2x1bW5OYW1lcyksIHRoaXMubGVuZ3RoLFxuICAgICAgICAgICAgdGhpcy5jaGlsZERhdGEuZmlsdGVyKChfLCBpKSA9PiBuYW1lc1RvS2VlcFtmaWVsZHNbaV0ubmFtZV0pXG4gICAgICAgICk7XG4gICAgfVxuICAgIHB1YmxpYyByb3dzVG9TdHJpbmcoc2VwYXJhdG9yID0gJyB8ICcsIHJvd09mZnNldCA9IDAsIG1heENvbHVtbldpZHRoczogbnVtYmVyW10gPSBbXSkge1xuICAgICAgICByZXR1cm4gbmV3IFBpcGVJdGVyYXRvcihyZWNvcmRCYXRjaFJvd3NUb1N0cmluZyh0aGlzLCBzZXBhcmF0b3IsIHJvd09mZnNldCwgbWF4Q29sdW1uV2lkdGhzKSwgJ3V0ZjgnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uKiByZWNvcmRCYXRjaFJvd3NUb1N0cmluZyhyZWNvcmRCYXRjaDogUmVjb3JkQmF0Y2gsIHNlcGFyYXRvciA9ICcgfCAnLCByb3dPZmZzZXQgPSAwLCBtYXhDb2x1bW5XaWR0aHM6IG51bWJlcltdID0gW10pIHtcbiAgICBjb25zdCBmaWVsZHMgPSByZWNvcmRCYXRjaC5zY2hlbWEuZmllbGRzO1xuICAgIGNvbnN0IGhlYWRlciA9IFsncm93X2lkJywgLi4uZmllbGRzLm1hcCgoZikgPT4gYCR7Zn1gKV0ubWFwKHZhbHVlVG9TdHJpbmcpO1xuICAgIGhlYWRlci5mb3JFYWNoKCh4LCBpKSA9PiB7XG4gICAgICAgIG1heENvbHVtbldpZHRoc1tpXSA9IE1hdGgubWF4KG1heENvbHVtbldpZHRoc1tpXSB8fCAwLCB4Lmxlbmd0aCk7XG4gICAgfSk7XG4gICAgLy8gUGFzcyBvbmUgdG8gY29udmVydCB0byBzdHJpbmdzIGFuZCBjb3VudCBtYXggY29sdW1uIHdpZHRoc1xuICAgIGZvciAobGV0IGkgPSAtMSwgbiA9IHJlY29yZEJhdGNoLmxlbmd0aCAtIDE7ICsraSA8IG47KSB7XG4gICAgICAgIGxldCB2YWwsIHJvdyA9IFtyb3dPZmZzZXQgKyBpLCAuLi5yZWNvcmRCYXRjaC5nZXQoaSkgYXMgU3RydWN0WydUVmFsdWUnXV07XG4gICAgICAgIGZvciAobGV0IGogPSAtMSwgayA9IHJvdy5sZW5ndGg7ICsraiA8IGs7ICkge1xuICAgICAgICAgICAgdmFsID0gdmFsdWVUb1N0cmluZyhyb3dbal0pO1xuICAgICAgICAgICAgbWF4Q29sdW1uV2lkdGhzW2pdID0gTWF0aC5tYXgobWF4Q29sdW1uV2lkdGhzW2pdIHx8IDAsIHZhbC5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAtMTsgKytpIDwgcmVjb3JkQmF0Y2gubGVuZ3RoOykge1xuICAgICAgICBpZiAoKHJvd09mZnNldCArIGkpICUgMTAwMCA9PT0gMCkge1xuICAgICAgICAgICAgeWllbGQgaGVhZGVyLm1hcCgoeCwgaikgPT4gbGVmdFBhZCh4LCAnICcsIG1heENvbHVtbldpZHRoc1tqXSkpLmpvaW4oc2VwYXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICB5aWVsZCBbcm93T2Zmc2V0ICsgaSwgLi4ucmVjb3JkQmF0Y2guZ2V0KGkpIGFzIFN0cnVjdFsnVFZhbHVlJ11dXG4gICAgICAgICAgICAubWFwKCh4KSA9PiB2YWx1ZVRvU3RyaW5nKHgpKVxuICAgICAgICAgICAgLm1hcCgoeCwgaikgPT4gbGVmdFBhZCh4LCAnICcsIG1heENvbHVtbldpZHRoc1tqXSkpXG4gICAgICAgICAgICAuam9pbihzZXBhcmF0b3IpO1xuICAgIH1cbn1cbiJdfQ==
