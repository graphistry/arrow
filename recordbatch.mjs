// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Schema, Struct } from './type';
import { Vector, StructVector } from './vector';
import { NestedData } from './data';
export class RecordBatch extends StructVector {
    static from(vectors) {
        return new RecordBatch(Schema.from(vectors), Math.max(...vectors.map((v) => v.length)), vectors);
    }
    constructor(...args) {
        if (typeof args[1] !== 'number') {
            const data = args[1];
            super(data, args[2]);
            this.schema = args[0];
            this.length = data.length;
        }
        else {
            const [schema, numRows, cols] = args;
            const childData = new Array(cols.length);
            for (let index = -1, length = cols.length; ++index < length;) {
                const col = cols[index];
                childData[index] = col instanceof Vector ? col.data : col;
            }
            super(new NestedData(new Struct(schema.fields), numRows, null, childData));
            this.schema = schema;
            this.length = numRows;
        }
        this.numCols = this.schema.fields.length;
    }
    clone(data, view = this.view.clone(data)) {
        return new RecordBatch(this.schema, data, view);
    }
    getChildAt(index) {
        return index < 0 || index >= this.numCols ? null : super.getChildAt(index);
    }
    select(...columnNames) {
        const fields = this.schema.fields;
        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));
        return new RecordBatch(this.schema.select(...columnNames), this.length, this.childData.filter((_, i) => namesToKeep[fields[i].name]));
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUM7SUFDTSxVQUFVLENBQWdDLEtBQWE7UUFDMUQsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBSSxLQUFLLENBQUMsQ0FBQztJQUNsRixDQUFDO0lBQ00sTUFBTSxDQUFDLEdBQUcsV0FBcUI7UUFDbEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDbEMsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDN0YsTUFBTSxDQUFDLElBQUksV0FBVyxDQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQy9DLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUMvRCxDQUFDO0lBQ04sQ0FBQztDQUNKIiwiZmlsZSI6InJlY29yZGJhdGNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFNjaGVtYSwgU3RydWN0LCBEYXRhVHlwZSB9IGZyb20gJy4vdHlwZSc7XG5pbXBvcnQgeyBmbGF0YnVmZmVycyB9IGZyb20gJ2ZsYXRidWZmZXJzJztcbmltcG9ydCB7IFZpZXcsIFZlY3RvciwgU3RydWN0VmVjdG9yIH0gZnJvbSAnLi92ZWN0b3InO1xuaW1wb3J0IHsgRGF0YSwgTmVzdGVkRGF0YSB9IGZyb20gJy4vZGF0YSc7XG5cbmltcG9ydCBMb25nID0gZmxhdGJ1ZmZlcnMuTG9uZztcblxuZXhwb3J0IGNsYXNzIFJlY29yZEJhdGNoIGV4dGVuZHMgU3RydWN0VmVjdG9yIHtcbiAgICBwdWJsaWMgc3RhdGljIGZyb20odmVjdG9yczogVmVjdG9yW10pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvcmRCYXRjaChTY2hlbWEuZnJvbSh2ZWN0b3JzKSxcbiAgICAgICAgICAgIE1hdGgubWF4KC4uLnZlY3RvcnMubWFwKCh2KSA9PiB2Lmxlbmd0aCkpLFxuICAgICAgICAgICAgdmVjdG9yc1xuICAgICAgICApO1xuICAgIH1cbiAgICBwdWJsaWMgcmVhZG9ubHkgc2NoZW1hOiBTY2hlbWE7XG4gICAgcHVibGljIHJlYWRvbmx5IGxlbmd0aDogbnVtYmVyO1xuICAgIHB1YmxpYyByZWFkb25seSBudW1Db2xzOiBudW1iZXI7XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hOiBTY2hlbWEsIGRhdGE6IERhdGE8U3RydWN0PiwgdmlldzogVmlldzxTdHJ1Y3Q+KTtcbiAgICBjb25zdHJ1Y3RvcihzY2hlbWE6IFNjaGVtYSwgbnVtUm93czogTG9uZyB8IG51bWJlciwgY29sczogRGF0YTxhbnk+IHwgVmVjdG9yW10pO1xuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhcmdzWzFdIGFzIERhdGE8U3RydWN0PjtcbiAgICAgICAgICAgIHN1cGVyKGRhdGEsIGFyZ3NbMl0pO1xuICAgICAgICAgICAgdGhpcy5zY2hlbWEgPSBhcmdzWzBdO1xuICAgICAgICAgICAgdGhpcy5sZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IFtzY2hlbWEsIG51bVJvd3MsIGNvbHNdID0gYXJncztcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRGF0YTogRGF0YTxhbnk+W10gPSBuZXcgQXJyYXkoY29scy5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAtMSwgbGVuZ3RoID0gY29scy5sZW5ndGg7ICsraW5kZXggPCBsZW5ndGg7KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sOiBEYXRhPGFueT4gfCBWZWN0b3IgPSBjb2xzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBjaGlsZERhdGFbaW5kZXhdID0gY29sIGluc3RhbmNlb2YgVmVjdG9yID8gY29sLmRhdGEgOiBjb2w7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdXBlcihuZXcgTmVzdGVkRGF0YShuZXcgU3RydWN0KHNjaGVtYS5maWVsZHMpLCBudW1Sb3dzLCBudWxsLCBjaGlsZERhdGEpKTtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICAgICAgdGhpcy5sZW5ndGggPSBudW1Sb3dzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubnVtQ29scyA9IHRoaXMuc2NoZW1hLmZpZWxkcy5sZW5ndGg7XG4gICAgfVxuICAgIHB1YmxpYyBjbG9uZTxSIGV4dGVuZHMgU3RydWN0PihkYXRhOiBEYXRhPFI+LCB2aWV3OiBWaWV3PFI+ID0gdGhpcy52aWV3LmNsb25lKGRhdGEpKTogdGhpcyB7XG4gICAgICAgIHJldHVybiBuZXcgUmVjb3JkQmF0Y2godGhpcy5zY2hlbWEsIGRhdGEgYXMgYW55LCB2aWV3KSBhcyBhbnk7XG4gICAgfVxuICAgIHB1YmxpYyBnZXRDaGlsZEF0PFIgZXh0ZW5kcyBEYXRhVHlwZSA9IERhdGFUeXBlPihpbmRleDogbnVtYmVyKTogVmVjdG9yPFI+IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiBpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5udW1Db2xzID8gbnVsbCA6IHN1cGVyLmdldENoaWxkQXQ8Uj4oaW5kZXgpO1xuICAgIH1cbiAgICBwdWJsaWMgc2VsZWN0KC4uLmNvbHVtbk5hbWVzOiBzdHJpbmdbXSkge1xuICAgICAgICBjb25zdCBmaWVsZHMgPSB0aGlzLnNjaGVtYS5maWVsZHM7XG4gICAgICAgIGNvbnN0IG5hbWVzVG9LZWVwID0gY29sdW1uTmFtZXMucmVkdWNlKCh4cywgeCkgPT4gKHhzW3hdID0gdHJ1ZSkgJiYgeHMsIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAgICByZXR1cm4gbmV3IFJlY29yZEJhdGNoKFxuICAgICAgICAgICAgdGhpcy5zY2hlbWEuc2VsZWN0KC4uLmNvbHVtbk5hbWVzKSwgdGhpcy5sZW5ndGgsXG4gICAgICAgICAgICB0aGlzLmNoaWxkRGF0YS5maWx0ZXIoKF8sIGkpID0+IG5hbWVzVG9LZWVwW2ZpZWxkc1tpXS5uYW1lXSlcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=
