// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Schema, Struct } from './type';
import { Vector, StructVector } from './vector';
import { NestedData } from './data';
export class RecordBatch extends StructVector {
    static from(vectors) {
        return new RecordBatch(Schema.from(vectors), Math.max(...vectors.map((v) => v.length)), vectors);
    }
    constructor(...args) {
        if (typeof args[1] !== 'number') {
            const data = args[1];
            super(data, args[2]);
            this.schema = args[0];
            this.length = data.length;
        }
        else {
            const [schema, numRows, cols] = args;
            const childData = new Array(cols.length);
            for (let index = -1, length = cols.length; ++index < length;) {
                const col = cols[index];
                childData[index] = col instanceof Vector ? col.data : col;
            }
            super(new NestedData(new Struct(schema.fields), numRows, null, childData));
            this.schema = schema;
            this.length = numRows;
        }
        this.numCols = this.schema.fields.length;
    }
    clone(data, view = this.view.clone(data)) {
        return new RecordBatch(this.schema, data, view);
    }
    select(...columnNames) {
        const fields = this.schema.fields;
        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));
        return new RecordBatch(this.schema.select(...columnNames), this.length, this.childData.filter((_, i) => namesToKeep[fields[i].name]));
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUM7SUFDTSxNQUFNLENBQUMsR0FBRyxXQUFxQjtRQUNsQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNsQyxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM3RixNQUFNLENBQUMsSUFBSSxXQUFXLENBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFDL0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQy9ELENBQUM7SUFDTixDQUFDO0NBQ0oiLCJmaWxlIjoicmVjb3JkYmF0Y2guanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgU2NoZW1hLCBTdHJ1Y3QgfSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IHsgZmxhdGJ1ZmZlcnMgfSBmcm9tICdmbGF0YnVmZmVycyc7XG5pbXBvcnQgeyBWaWV3LCBWZWN0b3IsIFN0cnVjdFZlY3RvciB9IGZyb20gJy4vdmVjdG9yJztcbmltcG9ydCB7IERhdGEsIE5lc3RlZERhdGEgfSBmcm9tICcuL2RhdGEnO1xuXG5pbXBvcnQgTG9uZyA9IGZsYXRidWZmZXJzLkxvbmc7XG5cbmV4cG9ydCBjbGFzcyBSZWNvcmRCYXRjaCBleHRlbmRzIFN0cnVjdFZlY3RvciB7XG4gICAgcHVibGljIHN0YXRpYyBmcm9tKHZlY3RvcnM6IFZlY3RvcltdKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVjb3JkQmF0Y2goU2NoZW1hLmZyb20odmVjdG9ycyksXG4gICAgICAgICAgICBNYXRoLm1heCguLi52ZWN0b3JzLm1hcCgodikgPT4gdi5sZW5ndGgpKSxcbiAgICAgICAgICAgIHZlY3RvcnNcbiAgICAgICAgKTtcbiAgICB9XG4gICAgcHVibGljIHJlYWRvbmx5IHNjaGVtYTogU2NoZW1hO1xuICAgIHB1YmxpYyByZWFkb25seSBsZW5ndGg6IG51bWJlcjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbnVtQ29sczogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKHNjaGVtYTogU2NoZW1hLCBkYXRhOiBEYXRhPFN0cnVjdD4sIHZpZXc6IFZpZXc8U3RydWN0Pik7XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hOiBTY2hlbWEsIG51bVJvd3M6IExvbmcgfCBudW1iZXIsIGNvbHM6IERhdGE8YW55PiB8IFZlY3RvcltdKTtcbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzOiBhbnlbXSkge1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXJnc1sxXSBhcyBEYXRhPFN0cnVjdD47XG4gICAgICAgICAgICBzdXBlcihkYXRhLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hID0gYXJnc1swXTtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBbc2NoZW1hLCBudW1Sb3dzLCBjb2xzXSA9IGFyZ3M7XG4gICAgICAgICAgICBjb25zdCBjaGlsZERhdGE6IERhdGE8YW55PltdID0gbmV3IEFycmF5KGNvbHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gLTEsIGxlbmd0aCA9IGNvbHMubGVuZ3RoOyArK2luZGV4IDwgbGVuZ3RoOykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbDogRGF0YTxhbnk+IHwgVmVjdG9yID0gY29sc1tpbmRleF07XG4gICAgICAgICAgICAgICAgY2hpbGREYXRhW2luZGV4XSA9IGNvbCBpbnN0YW5jZW9mIFZlY3RvciA/IGNvbC5kYXRhIDogY29sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3VwZXIobmV3IE5lc3RlZERhdGEobmV3IFN0cnVjdChzY2hlbWEuZmllbGRzKSwgbnVtUm93cywgbnVsbCwgY2hpbGREYXRhKSk7XG4gICAgICAgICAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gbnVtUm93cztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm51bUNvbHMgPSB0aGlzLnNjaGVtYS5maWVsZHMubGVuZ3RoO1xuICAgIH1cbiAgICBwdWJsaWMgY2xvbmU8UiBleHRlbmRzIFN0cnVjdD4oZGF0YTogRGF0YTxSPiwgdmlldzogVmlldzxSPiA9IHRoaXMudmlldy5jbG9uZShkYXRhKSk6IHRoaXMge1xuICAgICAgICByZXR1cm4gbmV3IFJlY29yZEJhdGNoKHRoaXMuc2NoZW1hLCBkYXRhIGFzIGFueSwgdmlldykgYXMgYW55O1xuICAgIH1cbiAgICBwdWJsaWMgc2VsZWN0KC4uLmNvbHVtbk5hbWVzOiBzdHJpbmdbXSkge1xuICAgICAgICBjb25zdCBmaWVsZHMgPSB0aGlzLnNjaGVtYS5maWVsZHM7XG4gICAgICAgIGNvbnN0IG5hbWVzVG9LZWVwID0gY29sdW1uTmFtZXMucmVkdWNlKCh4cywgeCkgPT4gKHhzW3hdID0gdHJ1ZSkgJiYgeHMsIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAgICByZXR1cm4gbmV3IFJlY29yZEJhdGNoKFxuICAgICAgICAgICAgdGhpcy5zY2hlbWEuc2VsZWN0KC4uLmNvbHVtbk5hbWVzKSwgdGhpcy5sZW5ndGgsXG4gICAgICAgICAgICB0aGlzLmNoaWxkRGF0YS5maWx0ZXIoKF8sIGkpID0+IG5hbWVzVG9LZWVwW2ZpZWxkc1tpXS5uYW1lXSlcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=
