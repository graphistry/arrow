// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Data } from './data';
import { Table } from './table';
import { Schema } from './schema';
import { Struct } from './type';
import { StructVector } from './vector/struct';
import { Chunked } from './vector/chunked';
export class RecordBatch extends StructVector {
    constructor(...args) {
        let schema = args[0];
        let data;
        let children;
        if (typeof args[1] === 'number') {
            const fields = schema.fields;
            const [, numRows, childData] = args;
            data = Data.Struct(new Struct(fields), 0, numRows, 0, null, childData);
        }
        else {
            [, data, children] = args;
        }
        super(data, children);
        this._schema = schema;
    }
    /** @nocollapse */
    static from(vectors, names = []) {
        return new RecordBatch(Schema.from(vectors, names), vectors.reduce((len, vec) => Math.max(len, vec.length), 0), vectors);
    }
    clone(data, children = this._children) {
        return new RecordBatch(this._schema, data, children);
    }
    concat(...others) {
        const schema = this._schema, chunks = Chunked.flatten(this, ...others);
        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));
    }
    get schema() { return this._schema; }
    get numCols() { return this._schema.fields.length; }
    select(...columnNames) {
        const fields = this._schema.fields;
        const schema = this._schema.select(...columnNames);
        const childNames = columnNames.reduce((xs, x) => (xs[x] = true) && xs, {});
        const childData = this._data.childData.filter((_, i) => childNames[fields[i].name]);
        const structData = Data.Struct(new Struct(schema.fields), 0, this.length, 0, null, childData);
        return new RecordBatch(schema, structData);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
