"use strict";
/* istanbul ignore file */
Object.defineProperty(exports, "__esModule", { value: true });
const visitor_1 = require("../visitor");
const enum_1 = require("../enum");
/** @ignore */ const sum = (x, y) => x + y;
/** @ignore */ const variableWidthColumnErrorMessage = (type) => `Cannot compute the byte width of variable-width column ${type}`;
class ByteWidthVisitor extends visitor_1.Visitor {
    visitNull(____) { return 0; }
    visitInt(type) { return type.bitWidth / 8; }
    visitFloat(type) { return type.ArrayType.BYTES_PER_ELEMENT; }
    visitBinary(type) { throw new Error(variableWidthColumnErrorMessage(type)); }
    visitUtf8(type) { throw new Error(variableWidthColumnErrorMessage(type)); }
    visitBool(____) { return 1 / 8; }
    visitDecimal(____) { return 16; }
    visitDate(type) { return (type.unit + 1) * 4; }
    visitTime(type) { return type.bitWidth / 8; }
    visitTimestamp(type) { return type.unit === enum_1.TimeUnit.SECOND ? 4 : 8; }
    visitInterval(type) { return (type.unit + 1) * 4; }
    visitList(type) { throw new Error(variableWidthColumnErrorMessage(type)); }
    visitStruct(type) { return this.visitFields(type.children).reduce(sum, 0); }
    visitUnion(type) { return this.visitFields(type.children).reduce(sum, 0); }
    visitFixedSizeBinary(type) { return type.byteWidth; }
    visitFixedSizeList(type) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }
    visitMap(type) { return this.visitFields(type.children).reduce(sum, 0); }
    visitDictionary(type) { return this.visit(type.indices); }
    visitFields(fields) { return (fields || []).map((field) => this.visit(field.type)); }
    visitSchema(schema) { return this.visitFields(schema.fields).reduce(sum, 0); }
}
exports.ByteWidthVisitor = ByteWidthVisitor;
exports.instance = new ByteWidthVisitor();

//# sourceMappingURL=data:application/json;charset=utf8;base64,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RUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEcsZUFBZSxDQUFPLElBQWdCLElBQVUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEYsV0FBVyxDQUFXLE1BQWUsSUFBVyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0csV0FBVyxDQUFXLE1BQWMsSUFBWSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2xIO0FBckJELDRDQXFCQztBQUVZLFFBQUEsUUFBUSxHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQyIsImZpbGUiOiJ2aXNpdG9yL2J5dGV3aWR0aC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG5cbi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWaXNpdG9yIH0gZnJvbSAnLi4vdmlzaXRvcic7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFR5cGUsIFRpbWVVbml0IH0gZnJvbSAnLi4vZW51bSc7XG5pbXBvcnQgeyBTY2hlbWEsIEZpZWxkIH0gZnJvbSAnLi4vc2NoZW1hJztcbmltcG9ydCB7XG4gICAgRGF0YVR5cGUsIERpY3Rpb25hcnksXG4gICAgRmxvYXQsIEludCwgRGF0ZV8sIEludGVydmFsLCBUaW1lLCBUaW1lc3RhbXAsXG4gICAgQm9vbCwgTnVsbCwgVXRmOCwgQmluYXJ5LCBEZWNpbWFsLCBGaXhlZFNpemVCaW5hcnksXG4gICAgTGlzdCwgRml4ZWRTaXplTGlzdCwgTWFwXywgU3RydWN0LCBVbmlvbixcbn0gZnJvbSAnLi4vdHlwZSc7XG5cbi8qKiBAaWdub3JlICovIGNvbnN0IHN1bSA9ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4geCArIHk7XG4vKiogQGlnbm9yZSAqLyBjb25zdCB2YXJpYWJsZVdpZHRoQ29sdW1uRXJyb3JNZXNzYWdlID0gKHR5cGU6IERhdGFUeXBlKSA9PiBgQ2Fubm90IGNvbXB1dGUgdGhlIGJ5dGUgd2lkdGggb2YgdmFyaWFibGUtd2lkdGggY29sdW1uICR7dHlwZX1gO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ5dGVXaWR0aFZpc2l0b3IgZXh0ZW5kcyBWaXNpdG9yIHtcbiAgICB2aXNpdE1hbnkgPFQgZXh0ZW5kcyBEYXRhVHlwZT4obm9kZXM6IFRbXSAgICAgKTogbnVtYmVyW107XG4gICAgdmlzaXQgICAgIDxUIGV4dGVuZHMgRGF0YVR5cGU+KG5vZGU6IFQgICAgICAgICk6IG51bWJlcjtcbiAgICBnZXRWaXNpdEZuPFQgZXh0ZW5kcyBUeXBlPiAgICAobm9kZTogVCAgICAgICAgKTogKHR5cGU6IERhdGFUeXBlPFQ+KSA9PiBudW1iZXI7XG4gICAgZ2V0VmlzaXRGbjxUIGV4dGVuZHMgRGF0YVR5cGU+KG5vZGU6IFZlY3RvcjxUPik6ICh0eXBlOiBUICAgICAgICAgICkgPT4gbnVtYmVyO1xuICAgIGdldFZpc2l0Rm48VCBleHRlbmRzIERhdGFUeXBlPihub2RlOiBEYXRhPFQ+ICApOiAodHlwZTogVCAgICAgICAgICApID0+IG51bWJlcjtcbiAgICBnZXRWaXNpdEZuPFQgZXh0ZW5kcyBEYXRhVHlwZT4obm9kZTogVCAgICAgICAgKTogKHR5cGU6IFQgICAgICAgICAgKSA9PiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBCeXRlV2lkdGhWaXNpdG9yIGV4dGVuZHMgVmlzaXRvciB7XG4gICAgcHVibGljIHZpc2l0TnVsbCAgICAgICAgICAgIChfX19fOiBOdWxsICAgICAgICAgICAgKSB7IHJldHVybiAwOyB9XG4gICAgcHVibGljIHZpc2l0SW50ICAgICAgICAgICAgICh0eXBlOiBJbnQgICAgICAgICAgICAgKSB7IHJldHVybiB0eXBlLmJpdFdpZHRoIC8gODsgfVxuICAgIHB1YmxpYyB2aXNpdEZsb2F0ICAgICAgICAgICAodHlwZTogRmxvYXQgICAgICAgICAgICkgeyByZXR1cm4gdHlwZS5BcnJheVR5cGUuQllURVNfUEVSX0VMRU1FTlQ7IH1cbiAgICBwdWJsaWMgdmlzaXRCaW5hcnkgICAgICAgICAgKHR5cGU6IEJpbmFyeSAgICAgICAgICApIHsgdGhyb3cgbmV3IEVycm9yKHZhcmlhYmxlV2lkdGhDb2x1bW5FcnJvck1lc3NhZ2UodHlwZSkpOyB9XG4gICAgcHVibGljIHZpc2l0VXRmOCAgICAgICAgICAgICh0eXBlOiBVdGY4ICAgICAgICAgICAgKSB7IHRocm93IG5ldyBFcnJvcih2YXJpYWJsZVdpZHRoQ29sdW1uRXJyb3JNZXNzYWdlKHR5cGUpKTsgfVxuICAgIHB1YmxpYyB2aXNpdEJvb2wgICAgICAgICAgICAoX19fXzogQm9vbCAgICAgICAgICAgICkgeyByZXR1cm4gMSAvIDg7IH1cbiAgICBwdWJsaWMgdmlzaXREZWNpbWFsICAgICAgICAgKF9fX186IERlY2ltYWwgICAgICAgICApIHsgcmV0dXJuIDE2OyB9XG4gICAgcHVibGljIHZpc2l0RGF0ZSAgICAgICAgICAgICh0eXBlOiBEYXRlXyAgICAgICAgICAgKSB7IHJldHVybiAodHlwZS51bml0ICsgMSkgKiA0OyB9XG4gICAgcHVibGljIHZpc2l0VGltZSAgICAgICAgICAgICh0eXBlOiBUaW1lICAgICAgICAgICAgKSB7IHJldHVybiB0eXBlLmJpdFdpZHRoIC8gODsgfVxuICAgIHB1YmxpYyB2aXNpdFRpbWVzdGFtcCAgICAgICAodHlwZTogVGltZXN0YW1wICAgICAgICkgeyByZXR1cm4gdHlwZS51bml0ID09PSBUaW1lVW5pdC5TRUNPTkQgPyA0IDogODsgfVxuICAgIHB1YmxpYyB2aXNpdEludGVydmFsICAgICAgICAodHlwZTogSW50ZXJ2YWwgICAgICAgICkgeyByZXR1cm4gKHR5cGUudW5pdCArIDEpICogNDsgfVxuICAgIHB1YmxpYyB2aXNpdExpc3QgICAgICAgICAgICAodHlwZTogTGlzdCAgICAgICAgICAgICkgeyB0aHJvdyBuZXcgRXJyb3IodmFyaWFibGVXaWR0aENvbHVtbkVycm9yTWVzc2FnZSh0eXBlKSk7IH1cbiAgICBwdWJsaWMgdmlzaXRTdHJ1Y3QgICAgICAgICAgKHR5cGU6IFN0cnVjdCAgICAgICAgICApIHsgcmV0dXJuIHRoaXMudmlzaXRGaWVsZHModHlwZS5jaGlsZHJlbikucmVkdWNlKHN1bSwgMCk7IH1cbiAgICBwdWJsaWMgdmlzaXRVbmlvbiAgICAgICAgICAgKHR5cGU6IFVuaW9uICAgICAgICAgICApIHsgcmV0dXJuIHRoaXMudmlzaXRGaWVsZHModHlwZS5jaGlsZHJlbikucmVkdWNlKHN1bSwgMCk7IH1cbiAgICBwdWJsaWMgdmlzaXRGaXhlZFNpemVCaW5hcnkgKHR5cGU6IEZpeGVkU2l6ZUJpbmFyeSApIHsgcmV0dXJuIHR5cGUuYnl0ZVdpZHRoOyB9XG4gICAgcHVibGljIHZpc2l0Rml4ZWRTaXplTGlzdCAgICh0eXBlOiBGaXhlZFNpemVMaXN0ICAgKSB7IHJldHVybiB0eXBlLmxpc3RTaXplICogdGhpcy52aXNpdEZpZWxkcyh0eXBlLmNoaWxkcmVuKS5yZWR1Y2Uoc3VtLCAwKTsgfVxuICAgIHB1YmxpYyB2aXNpdE1hcCAgICAgICAgICAgICAodHlwZTogTWFwXyAgICAgICAgICAgICkgeyByZXR1cm4gdGhpcy52aXNpdEZpZWxkcyh0eXBlLmNoaWxkcmVuKS5yZWR1Y2Uoc3VtLCAwKTsgfVxuICAgIHB1YmxpYyB2aXNpdERpY3Rpb25hcnkgICAgICAodHlwZTogRGljdGlvbmFyeSAgICAgICkgeyByZXR1cm4gdGhpcy52aXNpdCh0eXBlLmluZGljZXMpOyB9XG4gICAgcHVibGljIHZpc2l0RmllbGRzICAgICAgICAgIChmaWVsZHM6IEZpZWxkW10gICAgICAgKSB7IHJldHVybiAoZmllbGRzIHx8IFtdKS5tYXAoKGZpZWxkKSA9PiB0aGlzLnZpc2l0KGZpZWxkLnR5cGUpKTsgfVxuICAgIHB1YmxpYyB2aXNpdFNjaGVtYSAgICAgICAgICAoc2NoZW1hOiBTY2hlbWEgICAgICAgICkgeyByZXR1cm4gdGhpcy52aXNpdEZpZWxkcyhzY2hlbWEuZmllbGRzKS5yZWR1Y2Uoc3VtLCAwKTsgfVxufVxuXG5leHBvcnQgY29uc3QgaW5zdGFuY2UgPSBuZXcgQnl0ZVdpZHRoVmlzaXRvcigpO1xuIl19
