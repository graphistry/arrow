"use strict";
/* istanbul ignore file */
Object.defineProperty(exports, "__esModule", { value: true });
const visitor_1 = require("../visitor");
const enum_1 = require("../enum");
/** @ignore */ const sum = (x, y) => x + y;
/** @ignore */ const variableWidthColumnErrorMessage = (type) => `Cannot compute the byte width of variable-width column ${type}`;
class ByteWidthVisitor extends visitor_1.Visitor {
    visitNull(____) { return 0; }
    visitInt(type) { return type.bitWidth / 8; }
    visitFloat(type) { return type.ArrayType.BYTES_PER_ELEMENT; }
    visitBinary(type) { throw new Error(variableWidthColumnErrorMessage(type)); }
    visitUtf8(type) { throw new Error(variableWidthColumnErrorMessage(type)); }
    visitBool(____) { return 1 / 8; }
    visitDecimal(____) { return 16; }
    visitDate(type) { return (type.unit + 1) * 4; }
    visitTime(type) { return type.bitWidth / 8; }
    visitTimestamp(type) { return type.unit === enum_1.TimeUnit.SECOND ? 4 : 8; }
    visitInterval(type) { return (type.unit + 1) * 4; }
    visitList(type) { throw new Error(variableWidthColumnErrorMessage(type)); }
    visitStruct(type) { return this.visitFields(type.children).reduce(sum, 0); }
    visitUnion(type) { return this.visitFields(type.children).reduce(sum, 0); }
    visitFixedSizeBinary(type) { return type.byteWidth; }
    visitFixedSizeList(type) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }
    visitMap(type) { return this.visitFields(type.children).reduce(sum, 0); }
    visitDictionary(type) { return this.visit(type.indices); }
    visitFields(fields) { return (fields || []).map((field) => this.visit(field.type)); }
    visitSchema(schema) { return this.visitFields(schema.fields).reduce(sum, 0); }
}
exports.ByteWidthVisitor = ByteWidthVisitor;
exports.instance = new ByteWidthVisitor();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpc2l0b3IvYnl0ZXdpZHRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwwQkFBMEI7O0FBb0IxQix3Q0FBcUM7QUFFckMsa0NBQXlDO0FBU3pDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0QsY0FBYyxDQUFDLE1BQU0sK0JBQStCLEdBQUcsQ0FBQyxJQUFjLEVBQUUsRUFBRSxDQUFDLDBEQUEwRCxJQUFJLEVBQUUsQ0FBQztBQVM1SSxNQUFhLGdCQUFpQixTQUFRLGlCQUFPO0lBQ2xDLFNBQVMsQ0FBYSxJQUFVLElBQWdCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRCxRQUFRLENBQWMsSUFBUyxJQUFpQixPQUFPLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRSxVQUFVLENBQVksSUFBVyxJQUFlLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFDMUYsV0FBVyxDQUFXLElBQVksSUFBYyxNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pHLFNBQVMsQ0FBYSxJQUFVLElBQWdCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekcsU0FBUyxDQUFhLElBQVUsSUFBZ0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxZQUFZLENBQVUsSUFBYSxJQUFhLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1RCxTQUFTLENBQWEsSUFBVyxJQUFlLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0UsU0FBUyxDQUFhLElBQVUsSUFBZ0IsT0FBTyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsY0FBYyxDQUFRLElBQWUsSUFBVyxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssZUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9GLGFBQWEsQ0FBUyxJQUFjLElBQVksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RSxTQUFTLENBQWEsSUFBVSxJQUFnQixNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pHLFdBQVcsQ0FBVyxJQUFZLElBQWMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RyxVQUFVLENBQVksSUFBVyxJQUFlLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEcsb0JBQW9CLENBQUUsSUFBcUIsSUFBSyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLGtCQUFrQixDQUFJLElBQW1CLElBQU8sT0FBTyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hILFFBQVEsQ0FBYyxJQUFVLElBQWdCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEcsZUFBZSxDQUFPLElBQWdCLElBQVUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEYsV0FBVyxDQUFXLE1BQWUsSUFBVyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0csV0FBVyxDQUFXLE1BQWMsSUFBWSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2xIO0FBckJELDRDQXFCQztBQUVZLFFBQUEsUUFBUSxHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQyIsImZpbGUiOiJ2aXNpdG9yL2J5dGV3aWR0aC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG5cbi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWaXNpdG9yIH0gZnJvbSAnLi4vdmlzaXRvcic7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFR5cGUsIFRpbWVVbml0IH0gZnJvbSAnLi4vZW51bSc7XG5pbXBvcnQgeyBTY2hlbWEsIEZpZWxkIH0gZnJvbSAnLi4vc2NoZW1hJztcbmltcG9ydCB7XG4gICAgRGF0YVR5cGUsIERpY3Rpb25hcnksXG4gICAgRmxvYXQsIEludCwgRGF0ZV8sIEludGVydmFsLCBUaW1lLCBUaW1lc3RhbXAsXG4gICAgQm9vbCwgTnVsbCwgVXRmOCwgQmluYXJ5LCBEZWNpbWFsLCBGaXhlZFNpemVCaW5hcnksXG4gICAgTGlzdCwgRml4ZWRTaXplTGlzdCwgTWFwXywgU3RydWN0LCBVbmlvbixcbn0gZnJvbSAnLi4vdHlwZSc7XG5cbi8qKiBAaWdub3JlICovIGNvbnN0IHN1bSA9ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4geCArIHk7XG4vKiogQGlnbm9yZSAqLyBjb25zdCB2YXJpYWJsZVdpZHRoQ29sdW1uRXJyb3JNZXNzYWdlID0gKHR5cGU6IERhdGFUeXBlKSA9PiBgQ2Fubm90IGNvbXB1dGUgdGhlIGJ5dGUgd2lkdGggb2YgdmFyaWFibGUtd2lkdGggY29sdW1uICR7dHlwZX1gO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ5dGVXaWR0aFZpc2l0b3IgZXh0ZW5kcyBWaXNpdG9yIHtcbiAgICB2aXNpdDxUIGV4dGVuZHMgRGF0YVR5cGU+KG5vZGU6IFQpOiBudW1iZXI7XG4gICAgdmlzaXRNYW55PFQgZXh0ZW5kcyBEYXRhVHlwZT4obm9kZXM6IFRbXSk6IG51bWJlcltdO1xuICAgIGdldFZpc2l0Rm48VCBleHRlbmRzIFR5cGU+ICAgIChub2RlOiBUKTogKHR5cGU6IERhdGFUeXBlPFQ+KSA9PiBudW1iZXI7XG4gICAgZ2V0VmlzaXRGbjxUIGV4dGVuZHMgRGF0YVR5cGU+KG5vZGU6IFZlY3RvcjxUPiB8IERhdGE8VD4gfCBUKTogKHR5cGU6IFQpID0+IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEJ5dGVXaWR0aFZpc2l0b3IgZXh0ZW5kcyBWaXNpdG9yIHtcbiAgICBwdWJsaWMgdmlzaXROdWxsICAgICAgICAgICAgKF9fX186IE51bGwgICAgICAgICAgICApIHsgcmV0dXJuIDA7IH1cbiAgICBwdWJsaWMgdmlzaXRJbnQgICAgICAgICAgICAgKHR5cGU6IEludCAgICAgICAgICAgICApIHsgcmV0dXJuIHR5cGUuYml0V2lkdGggLyA4OyB9XG4gICAgcHVibGljIHZpc2l0RmxvYXQgICAgICAgICAgICh0eXBlOiBGbG9hdCAgICAgICAgICAgKSB7IHJldHVybiB0eXBlLkFycmF5VHlwZS5CWVRFU19QRVJfRUxFTUVOVDsgfVxuICAgIHB1YmxpYyB2aXNpdEJpbmFyeSAgICAgICAgICAodHlwZTogQmluYXJ5ICAgICAgICAgICkgeyB0aHJvdyBuZXcgRXJyb3IodmFyaWFibGVXaWR0aENvbHVtbkVycm9yTWVzc2FnZSh0eXBlKSk7IH1cbiAgICBwdWJsaWMgdmlzaXRVdGY4ICAgICAgICAgICAgKHR5cGU6IFV0ZjggICAgICAgICAgICApIHsgdGhyb3cgbmV3IEVycm9yKHZhcmlhYmxlV2lkdGhDb2x1bW5FcnJvck1lc3NhZ2UodHlwZSkpOyB9XG4gICAgcHVibGljIHZpc2l0Qm9vbCAgICAgICAgICAgIChfX19fOiBCb29sICAgICAgICAgICAgKSB7IHJldHVybiAxIC8gODsgfVxuICAgIHB1YmxpYyB2aXNpdERlY2ltYWwgICAgICAgICAoX19fXzogRGVjaW1hbCAgICAgICAgICkgeyByZXR1cm4gMTY7IH1cbiAgICBwdWJsaWMgdmlzaXREYXRlICAgICAgICAgICAgKHR5cGU6IERhdGVfICAgICAgICAgICApIHsgcmV0dXJuICh0eXBlLnVuaXQgKyAxKSAqIDQ7IH1cbiAgICBwdWJsaWMgdmlzaXRUaW1lICAgICAgICAgICAgKHR5cGU6IFRpbWUgICAgICAgICAgICApIHsgcmV0dXJuIHR5cGUuYml0V2lkdGggLyA4OyB9XG4gICAgcHVibGljIHZpc2l0VGltZXN0YW1wICAgICAgICh0eXBlOiBUaW1lc3RhbXAgICAgICAgKSB7IHJldHVybiB0eXBlLnVuaXQgPT09IFRpbWVVbml0LlNFQ09ORCA/IDQgOiA4OyB9XG4gICAgcHVibGljIHZpc2l0SW50ZXJ2YWwgICAgICAgICh0eXBlOiBJbnRlcnZhbCAgICAgICAgKSB7IHJldHVybiAodHlwZS51bml0ICsgMSkgKiA0OyB9XG4gICAgcHVibGljIHZpc2l0TGlzdCAgICAgICAgICAgICh0eXBlOiBMaXN0ICAgICAgICAgICAgKSB7IHRocm93IG5ldyBFcnJvcih2YXJpYWJsZVdpZHRoQ29sdW1uRXJyb3JNZXNzYWdlKHR5cGUpKTsgfVxuICAgIHB1YmxpYyB2aXNpdFN0cnVjdCAgICAgICAgICAodHlwZTogU3RydWN0ICAgICAgICAgICkgeyByZXR1cm4gdGhpcy52aXNpdEZpZWxkcyh0eXBlLmNoaWxkcmVuKS5yZWR1Y2Uoc3VtLCAwKTsgfVxuICAgIHB1YmxpYyB2aXNpdFVuaW9uICAgICAgICAgICAodHlwZTogVW5pb24gICAgICAgICAgICkgeyByZXR1cm4gdGhpcy52aXNpdEZpZWxkcyh0eXBlLmNoaWxkcmVuKS5yZWR1Y2Uoc3VtLCAwKTsgfVxuICAgIHB1YmxpYyB2aXNpdEZpeGVkU2l6ZUJpbmFyeSAodHlwZTogRml4ZWRTaXplQmluYXJ5ICkgeyByZXR1cm4gdHlwZS5ieXRlV2lkdGg7IH1cbiAgICBwdWJsaWMgdmlzaXRGaXhlZFNpemVMaXN0ICAgKHR5cGU6IEZpeGVkU2l6ZUxpc3QgICApIHsgcmV0dXJuIHR5cGUubGlzdFNpemUgKiB0aGlzLnZpc2l0RmllbGRzKHR5cGUuY2hpbGRyZW4pLnJlZHVjZShzdW0sIDApOyB9XG4gICAgcHVibGljIHZpc2l0TWFwICAgICAgICAgICAgICh0eXBlOiBNYXBfICAgICAgICAgICAgKSB7IHJldHVybiB0aGlzLnZpc2l0RmllbGRzKHR5cGUuY2hpbGRyZW4pLnJlZHVjZShzdW0sIDApOyB9XG4gICAgcHVibGljIHZpc2l0RGljdGlvbmFyeSAgICAgICh0eXBlOiBEaWN0aW9uYXJ5ICAgICAgKSB7IHJldHVybiB0aGlzLnZpc2l0KHR5cGUuaW5kaWNlcyk7IH1cbiAgICBwdWJsaWMgdmlzaXRGaWVsZHMgICAgICAgICAgKGZpZWxkczogRmllbGRbXSAgICAgICApIHsgcmV0dXJuIChmaWVsZHMgfHwgW10pLm1hcCgoZmllbGQpID0+IHRoaXMudmlzaXQoZmllbGQudHlwZSkpOyB9XG4gICAgcHVibGljIHZpc2l0U2NoZW1hICAgICAgICAgIChzY2hlbWE6IFNjaGVtYSAgICAgICAgKSB7IHJldHVybiB0aGlzLnZpc2l0RmllbGRzKHNjaGVtYS5maWVsZHMpLnJlZHVjZShzdW0sIDApOyB9XG59XG5cbmV4cG9ydCBjb25zdCBpbnN0YW5jZSA9IG5ldyBCeXRlV2lkdGhWaXNpdG9yKCk7XG4iXX0=
