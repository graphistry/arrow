"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const bn_1 = require("../util/bn");
const column_1 = require("../column");
const vector_1 = require("../vector");
const visitor_1 = require("../visitor");
const recordbatch_1 = require("../recordbatch");
const enum_1 = require("../enum");
const enum_2 = require("../enum");
const bit_1 = require("../util/bit");
const array_1 = require("../util/array");
const type_1 = require("../type");
class JSONVectorAssembler extends visitor_1.Visitor {
    /** @nocollapse */
    static assemble(...args) {
        return new JSONVectorAssembler().visitMany(array_1.selectAndFlattenColumnChildren(recordbatch_1.RecordBatch, args));
    }
    visit(column) {
        const { data, name, length } = column;
        const { offset, nullCount, nullBitmap } = data;
        const type = type_1.DataType.isDictionary(column.type) ? column.type.indices : column.type;
        const buffers = Object.assign([], data.buffers, { [enum_1.VectorType.VALIDITY]: undefined });
        return {
            'name': name,
            'count': length,
            'VALIDITY': nullCount <= 0
                ? Array.from({ length }, () => 1)
                : [...bit_1.iterateBits(nullBitmap, offset, length, null, bit_1.getBit)],
            ...super.visit(vector_1.Vector.new(data.clone(type, offset, length, 0, buffers)))
        };
    }
    visitNull() { return {}; }
    visitBool({ values, offset, length }) {
        return { 'DATA': [...bit_1.iterateBits(values, offset, length, null, bit_1.getBool)] };
    }
    visitInt(vector) {
        return {
            'DATA': vector.type.bitWidth < 64
                ? [...vector.values]
                : [...bigNumsToStrings(vector.values, 2)]
        };
    }
    visitFloat(vector) {
        return { 'DATA': [...vector.values] };
    }
    visitUtf8(vector) {
        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };
    }
    visitBinary(vector) {
        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };
    }
    visitFixedSizeBinary(vector) {
        return { 'DATA': [...binaryToString(vector)] };
    }
    visitDate(vector) {
        return {
            'DATA': vector.type.unit === enum_2.DateUnit.DAY
                ? [...vector.values]
                : [...bigNumsToStrings(vector.values, 2)]
        };
    }
    visitTimestamp(vector) {
        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };
    }
    visitTime(vector) {
        return {
            'DATA': vector.type.unit < enum_2.TimeUnit.MICROSECOND
                ? [...vector.values]
                : [...bigNumsToStrings(vector.values, 2)]
        };
    }
    visitDecimal(vector) {
        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };
    }
    visitList(vector) {
        return {
            'OFFSET': [...vector.valueOffsets],
            'children': vector.type.children.map((f, i) => this.visit(new column_1.Column(f, [vector.getChildAt(i)])))
        };
    }
    visitStruct(vector) {
        return {
            'children': vector.type.children.map((f, i) => this.visit(new column_1.Column(f, [vector.getChildAt(i)])))
        };
    }
    visitUnion(vector) {
        return {
            'TYPE': [...vector.typeIds],
            'OFFSET': vector.type.mode === enum_2.UnionMode.Dense ? [...vector.valueOffsets] : undefined,
            'children': vector.type.children.map((f, i) => this.visit(new column_1.Column(f, [vector.getChildAt(i)])))
        };
    }
    visitInterval(vector) {
        return { 'DATA': [...vector.values] };
    }
    visitFixedSizeList(vector) {
        return {
            'children': vector.type.children.map((f, i) => this.visit(new column_1.Column(f, [vector.getChildAt(i)])))
        };
    }
    visitMap(vector) {
        return {
            'children': vector.type.children.map((f, i) => this.visit(new column_1.Column(f, [vector.getChildAt(i)])))
        };
    }
}
exports.JSONVectorAssembler = JSONVectorAssembler;
/** @ignore */
function* binaryToString(vector) {
    for (const octets of vector) {
        yield octets.reduce((str, byte) => {
            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;
        }, '').toUpperCase();
    }
}
/** @ignore */
function* bigNumsToStrings(values, stride) {
    for (let i = -1, n = values.length / stride; ++i < n;) {
        yield `${bn_1.BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpc2l0b3IvanNvbnZlY3RvcmFzc2VtYmxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCOztBQUVyQixtQ0FBZ0M7QUFDaEMsc0NBQW1DO0FBQ25DLHNDQUFtQztBQUNuQyx3Q0FBcUM7QUFDckMsZ0RBQTZDO0FBRTdDLGtDQUFtRDtBQUNuRCxrQ0FBd0Q7QUFDeEQscUNBQTJEO0FBQzNELHlDQUErRDtBQUMvRCxrQ0FJaUI7QUEyQmpCLE1BQWEsbUJBQW9CLFNBQVEsaUJBQU87SUFFNUMsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLFFBQVEsQ0FBaUMsR0FBRyxJQUFpQjtRQUN2RSxPQUFPLElBQUksbUJBQW1CLEVBQUUsQ0FBQyxTQUFTLENBQUMsc0NBQThCLENBQUMseUJBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7SUFFTSxLQUFLLENBQW1CLE1BQVM7UUFDcEMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQ3RDLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQztRQUMvQyxNQUFNLElBQUksR0FBRyxlQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDcEYsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFD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QUFJLGVBQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFELENBQUM7SUFDTixDQUFDO0NBQ0o7QUFuR0Qsa0RBbUdDO0FBRUQsY0FBYztBQUNkLFFBQVEsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxNQUFnRDtJQUNyRSxLQUFLLE1BQU0sTUFBTSxJQUFJLE1BQThCLEVBQUU7UUFDakQsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQzlCLE9BQU8sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNuRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDeEI7QUFDTCxDQUFDO0FBRUQsY0FBYztBQUNkLFFBQVEsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLE1BQWdDLEVBQUUsTUFBYztJQUN2RSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUc7UUFDbkQsTUFBTSxHQUFHLE9BQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQztLQUNqRjtBQUNMLENBQUMiLCJmaWxlIjoidmlzaXRvci9qc29udmVjdG9yYXNzZW1ibGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IEJOIH0gZnJvbSAnLi4vdXRpbC9ibic7XG5pbXBvcnQgeyBDb2x1bW4gfSBmcm9tICcuLi9jb2x1bW4nO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcbmltcG9ydCB7IFZpc2l0b3IgfSBmcm9tICcuLi92aXNpdG9yJztcbmltcG9ydCB7IFJlY29yZEJhdGNoIH0gZnJvbSAnLi4vcmVjb3JkYmF0Y2gnO1xuaW1wb3J0IHsgVmVjdG9yIGFzIFZUeXBlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBWZWN0b3JUeXBlIGFzIEJ1ZmZlclR5cGUgfSBmcm9tICcuLi9lbnVtJztcbmltcG9ydCB7IFVuaW9uTW9kZSwgRGF0ZVVuaXQsIFRpbWVVbml0IH0gZnJvbSAnLi4vZW51bSc7XG5pbXBvcnQgeyBpdGVyYXRlQml0cywgZ2V0Qml0LCBnZXRCb29sIH0gZnJvbSAnLi4vdXRpbC9iaXQnO1xuaW1wb3J0IHsgc2VsZWN0QW5kRmxhdHRlbkNvbHVtbkNoaWxkcmVuIH0gZnJvbSAnLi4vdXRpbC9hcnJheSc7XG5pbXBvcnQge1xuICAgIERhdGFUeXBlLFxuICAgIEZsb2F0LCBJbnQsIERhdGVfLCBJbnRlcnZhbCwgVGltZSwgVGltZXN0YW1wLCBVbmlvbixcbiAgICBCb29sLCBOdWxsLCBVdGY4LCBCaW5hcnksIERlY2ltYWwsIEZpeGVkU2l6ZUJpbmFyeSwgTGlzdCwgRml4ZWRTaXplTGlzdCwgTWFwXywgU3RydWN0LFxufSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGludGVyZmFjZSBKU09OVmVjdG9yQXNzZW1ibGVyIGV4dGVuZHMgVmlzaXRvciB7XG5cbiAgICB2aXNpdCAgICAgPFQgZXh0ZW5kcyBDb2x1bW4+ICAobm9kZTogVCAgKTogb2JqZWN0O1xuICAgIHZpc2l0TWFueSA8VCBleHRlbmRzIENvbHVtbj4gIChjb2xzOiBUW10pOiBvYmplY3RbXTtcbiAgICBnZXRWaXNpdEZuPFQgZXh0ZW5kcyBEYXRhVHlwZT4obm9kZTogQ29sdW1uPFQ+KTogKGNvbHVtbjogQ29sdW1uPFQ+KSA9PiB7IG5hbWU6IHN0cmluZywgY291bnQ6IG51bWJlciwgVkFMSURJVFk6ICgwIHwgMSlbXSwgREFUQT86IGFueVtdLCBPRkZTRVQ/OiBudW1iZXJbXSwgVFlQRT86IG51bWJlcltdLCBjaGlsZHJlbj86IGFueVtdIH07XG5cbiAgICB2aXNpdE51bGwgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgTnVsbD4gICAgICAgICAgICAodmVjdG9yOiBWVHlwZTxUPik6IHsgfTtcbiAgICB2aXNpdEJvb2wgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgQm9vbD4gICAgICAgICAgICAodmVjdG9yOiBWVHlwZTxUPik6IHsgREFUQTogYm9vbGVhbltdIH07XG4gICAgdmlzaXRJbnQgICAgICAgICAgICAgICAgICA8VCBleHRlbmRzIEludD4gICAgICAgICAgICAgKHZlY3RvcjogVlR5cGU8VD4pOiB7IERBVEE6IChudW1iZXIgfCBzdHJpbmcpW10gIH07XG4gICAgdmlzaXRGbG9hdCAgICAgICAgICAgICAgICA8VCBleHRlbmRzIEZsb2F0PiAgICAgICAgICAgKHZlY3RvcjogVlR5cGU8VD4pOiB7IERBVEE6IG51bWJlcltdICB9O1xuICAgIHZpc2l0VXRmOCAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBVdGY4PiAgICAgICAgICAgICh2ZWN0b3I6IFZUeXBlPFQ+KTogeyBEQVRBOiBzdHJpbmdbXSwgT0ZGU0VUOiBudW1iZXJbXSB9O1xuICAgIHZpc2l0QmluYXJ5ICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBCaW5hcnk+ICAgICAgICAgICh2ZWN0b3I6IFZUeXBlPFQ+KTogeyBEQVRBOiBzdHJpbmdbXSwgT0ZGU0VUOiBudW1iZXJbXSB9O1xuICAgIHZpc2l0Rml4ZWRTaXplQmluYXJ5ICAgICAgPFQgZXh0ZW5kcyBGaXhlZFNpemVCaW5hcnk+ICh2ZWN0b3I6IFZUeXBlPFQ+KTogeyBEQVRBOiBzdHJpbmdbXSAgfTtcbiAgICB2aXNpdERhdGUgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRGF0ZV8+ICAgICAgICAgICAodmVjdG9yOiBWVHlwZTxUPik6IHsgREFUQTogbnVtYmVyW10gIH07XG4gICAgdmlzaXRUaW1lc3RhbXAgICAgICAgICAgICA8VCBleHRlbmRzIFRpbWVzdGFtcD4gICAgICAgKHZlY3RvcjogVlR5cGU8VD4pOiB7IERBVEE6IHN0cmluZ1tdICB9O1xuICAgIHZpc2l0VGltZSAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBUaW1lPiAgICAgICAgICAgICh2ZWN0b3I6IFZUeXBlPFQ+KTogeyBEQVRBOiBudW1iZXJbXSAgfTtcbiAgICB2aXNpdERlY2ltYWwgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRGVjaW1hbD4gICAgICAgICAodmVjdG9yOiBWVHlwZTxUPik6IHsgREFUQTogc3RyaW5nW10gIH07XG4gICAgdmlzaXRMaXN0ICAgICAgICAgICAgICAgICA8VCBleHRlbmRzIExpc3Q+ICAgICAgICAgICAgKHZlY3RvcjogVlR5cGU8VD4pOiB7IGNoaWxkcmVuOiBhbnlbXSwgT0ZGU0VUOiBudW1iZXJbXSB9O1xuICAgIHZpc2l0U3RydWN0ICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBTdHJ1Y3Q+ICAgICAgICAgICh2ZWN0b3I6IFZUeXBlPFQ+KTogeyBjaGlsZHJlbjogYW55W10gfTtcbiAgICB2aXNpdFVuaW9uICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgVW5pb24+ICAgICAgICAgICAodmVjdG9yOiBWVHlwZTxUPik6IHsgY2hpbGRyZW46IGFueVtdLCBUWVBFOiBudW1iZXJbXSwgIH07XG4gICAgdmlzaXRJbnRlcnZhbCAgICAgICAgICAgICA8VCBleHRlbmRzIEludGVydmFsPiAgICAgICAgKHZlY3RvcjogVlR5cGU8VD4pOiB7IERBVEE6IG51bWJlcltdICB9O1xuICAgIHZpc2l0Rml4ZWRTaXplTGlzdCAgICAgICAgPFQgZXh0ZW5kcyBGaXhlZFNpemVMaXN0PiAgICh2ZWN0b3I6IFZUeXBlPFQ+KTogeyBjaGlsZHJlbjogYW55W10gfTtcbiAgICB2aXNpdE1hcCAgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgTWFwXz4gICAgICAgICAgICAodmVjdG9yOiBWVHlwZTxUPik6IHsgY2hpbGRyZW46IGFueVtdIH07XG59XG5cbmV4cG9ydCBjbGFzcyBKU09OVmVjdG9yQXNzZW1ibGVyIGV4dGVuZHMgVmlzaXRvciB7XG5cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGFzc2VtYmxlPFQgZXh0ZW5kcyBDb2x1bW4gfCBSZWNvcmRCYXRjaD4oLi4uYXJnczogKFQgfCBUW10pW10pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKU09OVmVjdG9yQXNzZW1ibGVyKCkudmlzaXRNYW55KHNlbGVjdEFuZEZsYXR0ZW5Db2x1bW5DaGlsZHJlbihSZWNvcmRCYXRjaCwgYXJncykpO1xuICAgIH1cblxuICAgIHB1YmxpYyB2aXNpdDxUIGV4dGVuZHMgQ29sdW1uPihjb2x1bW46IFQpIHtcbiAgICAgICAgY29uc3QgeyBkYXRhLCBuYW1lLCBsZW5ndGggfSA9IGNvbHVtbjtcbiAgICAgICAgY29uc3QgeyBvZmZzZXQsIG51bGxDb3VudCwgbnVsbEJpdG1hcCB9ID0gZGF0YTtcbiAgICAgICAgY29uc3QgdHlwZSA9IERhdGFUeXBlLmlzRGljdGlvbmFyeShjb2x1bW4udHlwZSkgPyBjb2x1bW4udHlwZS5pbmRpY2VzIDogY29sdW1uLnR5cGU7XG4gICAgICAgIGNvbnN0IGJ1ZmZlcnMgPSBPYmplY3QuYXNzaWduKFtdLCBkYXRhLmJ1ZmZlcnMsIHsgW0J1ZmZlclR5cGUuVkFMSURJVFldOiB1bmRlZmluZWQgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnbmFtZSc6IG5hbWUsXG4gICAgICAgICAgICAnY291bnQnOiBsZW5ndGgsXG4gICAgICAgICAgICAnVkFMSURJVFknOiBudWxsQ291bnQgPD0gMFxuICAgICAgICAgICAgICAgID8gQXJyYXkuZnJvbSh7IGxlbmd0aCB9LCAoKSA9PiAxKVxuICAgICAgICAgICAgICAgIDogWy4uLml0ZXJhdGVCaXRzKG51bGxCaXRtYXAsIG9mZnNldCwgbGVuZ3RoLCBudWxsLCBnZXRCaXQpXSxcbiAgICAgICAgICAgIC4uLnN1cGVyLnZpc2l0KFZlY3Rvci5uZXcoZGF0YS5jbG9uZSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgMCwgYnVmZmVycykpKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBwdWJsaWMgdmlzaXROdWxsKCkgeyByZXR1cm4ge307IH1cbiAgICBwdWJsaWMgdmlzaXRCb29sPFQgZXh0ZW5kcyBCb29sPih7IHZhbHVlcywgb2Zmc2V0LCBsZW5ndGggfTogVlR5cGU8VD4pIHtcbiAgICAgICAgcmV0dXJuIHsgJ0RBVEEnOiBbLi4uaXRlcmF0ZUJpdHModmFsdWVzLCBvZmZzZXQsIGxlbmd0aCwgbnVsbCwgZ2V0Qm9vbCldIH07XG4gICAgfVxuICAgIHB1YmxpYyB2aXNpdEludDxUIGV4dGVuZHMgSW50Pih2ZWN0b3I6IFZUeXBlPFQ+KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnREFUQSc6IHZlY3Rvci50eXBlLmJpdFdpZHRoIDwgNjRcbiAgICAgICAgICAgICAgICA/IFsuLi52ZWN0b3IudmFsdWVzXVxuICAgICAgICAgICAgICAgIDogWy4uLmJpZ051bXNUb1N0cmluZ3ModmVjdG9yLnZhbHVlcyBhcyAoSW50MzJBcnJheSB8IFVpbnQzMkFycmF5KSwgMildXG4gICAgICAgIH07XG4gICAgfVxuICAgIHB1YmxpYyB2aXNpdEZsb2F0PFQgZXh0ZW5kcyBGbG9hdD4odmVjdG9yOiBWVHlwZTxUPikge1xuICAgICAgICByZXR1cm4geyAnREFUQSc6IFsuLi52ZWN0b3IudmFsdWVzXSB9O1xuICAgIH1cbiAgICBwdWJsaWMgdmlzaXRVdGY4PFQgZXh0ZW5kcyBVdGY4Pih2ZWN0b3I6IFZUeXBlPFQ+KSB7XG4gICAgICAgIHJldHVybiB7ICdEQVRBJzogWy4uLnZlY3Rvcl0sICdPRkZTRVQnOiBbLi4udmVjdG9yLnZhbHVlT2Zmc2V0c10gfTtcbiAgICB9XG4gICAgcHVibGljIHZpc2l0QmluYXJ5PFQgZXh0ZW5kcyBCaW5hcnk+KHZlY3RvcjogVlR5cGU8VD4pIHtcbiAgICAgICAgcmV0dXJuIHsgJ0RBVEEnOiBbLi4uYmluYXJ5VG9TdHJpbmcodmVjdG9yKV0sIE9GRlNFVDogWy4uLnZlY3Rvci52YWx1ZU9mZnNldHNdIH07XG4gICAgfVxuICAgIHB1YmxpYyB2aXNpdEZpeGVkU2l6ZUJpbmFyeTxUIGV4dGVuZHMgRml4ZWRTaXplQmluYXJ5Pih2ZWN0b3I6IFZUeXBlPFQ+KSB7XG4gICAgICAgIHJldHVybiB7ICdEQVRBJzogWy4uLmJpbmFyeVRvU3RyaW5nKHZlY3RvcildIH07XG4gICAgfVxuICAgIHB1YmxpYyB2aXNpdERhdGU8VCBleHRlbmRzIERhdGVfPih2ZWN0b3I6IFZUeXBlPFQ+KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnREFUQSc6IHZlY3Rvci50eXBlLnVuaXQgPT09IERhdGVVbml0LkRBWVxuICAgICAgICAgICAgICAgID8gWy4uLnZlY3Rvci52YWx1ZXNdXG4gICAgICAgICAgICAgICAgOiBbLi4uYmlnTnVtc1RvU3RyaW5ncyh2ZWN0b3IudmFsdWVzLCAyKV1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcHVibGljIHZpc2l0VGltZXN0YW1wPFQgZXh0ZW5kcyBUaW1lc3RhbXA+KHZlY3RvcjogVlR5cGU8VD4pIHtcbiAgICAgICAgcmV0dXJuIHsgJ0RBVEEnOiBbLi4uYmlnTnVtc1RvU3RyaW5ncyh2ZWN0b3IudmFsdWVzLCAyKV0gfTtcbiAgICB9XG4gICAgcHVibGljIHZpc2l0VGltZTxUIGV4dGVuZHMgVGltZT4odmVjdG9yOiBWVHlwZTxUPikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ0RBVEEnOiB2ZWN0b3IudHlwZS51bml0IDwgVGltZVVuaXQuTUlDUk9TRUNPTkRcbiAgICAgICAgICAgICAgICA/IFsuLi52ZWN0b3IudmFsdWVzXVxuICAgICAgICAgICAgICAgIDogWy4uLmJpZ051bXNUb1N0cmluZ3ModmVjdG9yLnZhbHVlcywgMildXG4gICAgICAgIH07XG4gICAgfVxuICAgIHB1YmxpYyB2aXNpdERlY2ltYWw8VCBleHRlbmRzIERlY2ltYWw+KHZlY3RvcjogVlR5cGU8VD4pIHtcbiAgICAgICAgcmV0dXJuIHsgJ0RBVEEnOiBbLi4uYmlnTnVtc1RvU3RyaW5ncyh2ZWN0b3IudmFsdWVzLCA0KV0gfTtcbiAgICB9XG4gICAgcHVibGljIHZpc2l0TGlzdDxUIGV4dGVuZHMgTGlzdD4odmVjdG9yOiBWVHlwZTxUPikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ09GRlNFVCc6IFsuLi52ZWN0b3IudmFsdWVPZmZzZXRzXSxcbiAgICAgICAgICAgICdjaGlsZHJlbic6IHZlY3Rvci50eXBlLmNoaWxkcmVuLm1hcCgoZiwgaSkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnZpc2l0KG5ldyBDb2x1bW4oZiwgW3ZlY3Rvci5nZXRDaGlsZEF0KGkpIV0pKSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcHVibGljIHZpc2l0U3RydWN0PFQgZXh0ZW5kcyBTdHJ1Y3Q+KHZlY3RvcjogVlR5cGU8VD4pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdjaGlsZHJlbic6IHZlY3Rvci50eXBlLmNoaWxkcmVuLm1hcCgoZiwgaSkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnZpc2l0KG5ldyBDb2x1bW4oZiwgW3ZlY3Rvci5nZXRDaGlsZEF0KGkpIV0pKSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcHVibGljIHZpc2l0VW5pb248VCBleHRlbmRzIFVuaW9uPih2ZWN0b3I6IFZUeXBlPFQ+KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnVFlQRSc6IFsuLi52ZWN0b3IudHlwZUlkc10sXG4gICAgICAgICAgICAnT0ZGU0VUJzogdmVjdG9yLnR5cGUubW9kZSA9PT0gVW5pb25Nb2RlLkRlbnNlID8gWy4uLnZlY3Rvci52YWx1ZU9mZnNldHNdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2NoaWxkcmVuJzogdmVjdG9yLnR5cGUuY2hpbGRyZW4ubWFwKChmLCBpKSA9PiB0aGlzLnZpc2l0KG5ldyBDb2x1bW4oZiwgW3ZlY3Rvci5nZXRDaGlsZEF0KGkpIV0pKSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcHVibGljIHZpc2l0SW50ZXJ2YWw8VCBleHRlbmRzIEludGVydmFsPih2ZWN0b3I6IFZUeXBlPFQ+KSB7XG4gICAgICAgIHJldHVybiB7ICdEQVRBJzogWy4uLnZlY3Rvci52YWx1ZXNdIH07XG4gICAgfVxuICAgIHB1YmxpYyB2aXNpdEZpeGVkU2l6ZUxpc3Q8VCBleHRlbmRzIEZpeGVkU2l6ZUxpc3Q+KHZlY3RvcjogVlR5cGU8VD4pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdjaGlsZHJlbic6IHZlY3Rvci50eXBlLmNoaWxkcmVuLm1hcCgoZiwgaSkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnZpc2l0KG5ldyBDb2x1bW4oZiwgW3ZlY3Rvci5nZXRDaGlsZEF0KGkpIV0pKSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcHVibGljIHZpc2l0TWFwPFQgZXh0ZW5kcyBNYXBfPih2ZWN0b3I6IFZUeXBlPFQ+KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnY2hpbGRyZW4nOiB2ZWN0b3IudHlwZS5jaGlsZHJlbi5tYXAoKGYsIGkpID0+XG4gICAgICAgICAgICAgICAgdGhpcy52aXNpdChuZXcgQ29sdW1uKGYsIFt2ZWN0b3IuZ2V0Q2hpbGRBdChpKSFdKSkpXG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKiogQGlnbm9yZSAqL1xuZnVuY3Rpb24qIGJpbmFyeVRvU3RyaW5nKHZlY3RvcjogVmVjdG9yPEJpbmFyeT4gfCBWZWN0b3I8Rml4ZWRTaXplQmluYXJ5Pikge1xuICAgIGZvciAoY29uc3Qgb2N0ZXRzIG9mIHZlY3RvciBhcyBJdGVyYWJsZTxVaW50OEFycmF5Pikge1xuICAgICAgICB5aWVsZCBvY3RldHMucmVkdWNlKChzdHIsIGJ5dGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgJHtzdHJ9JHsoJzAnICsgKGJ5dGUgJiAweEZGKS50b1N0cmluZygxNikpLnNsaWNlKC0yKX1gO1xuICAgICAgICB9LCAnJykudG9VcHBlckNhc2UoKTtcbiAgICB9XG59XG5cbi8qKiBAaWdub3JlICovXG5mdW5jdGlvbiogYmlnTnVtc1RvU3RyaW5ncyh2YWx1ZXM6IFVpbnQzMkFycmF5IHwgSW50MzJBcnJheSwgc3RyaWRlOiBudW1iZXIpIHtcbiAgICBmb3IgKGxldCBpID0gLTEsIG4gPSB2YWx1ZXMubGVuZ3RoIC8gc3RyaWRlOyArK2kgPCBuOykge1xuICAgICAgICB5aWVsZCBgJHtCTi5uZXcodmFsdWVzLnN1YmFycmF5KChpICsgMCkgKiBzdHJpZGUsIChpICsgMSkgKiBzdHJpZGUpLCBmYWxzZSl9YDtcbiAgICB9XG59XG4iXX0=
