"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const visitor_1 = require("../visitor");
const bit_1 = require("../util/bit");
const vector_1 = require("../util/vector");
class IndexOfVisitor extends visitor_1.Visitor {
}
exports.IndexOfVisitor = IndexOfVisitor;
/** @ignore */
function nullIndexOf(vector, searchElement) {
    // if you're looking for nulls and the vector isn't empty, we've got 'em!
    return searchElement === null && vector.length > 0 ? 0 : -1;
}
/** @ignore */
function indexOfNull(vector, fromIndex) {
    const { nullBitmap } = vector;
    if (!nullBitmap || vector.nullCount <= 0) {
        return -1;
    }
    let i = 0;
    for (const isValid of bit_1.iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, bit_1.getBool)) {
        if (!isValid) {
            return i;
        }
        ++i;
    }
    return -1;
}
/** @ignore */
function indexOfValue(vector, searchElement, fromIndex) {
    if (searchElement === undefined) {
        return -1;
    }
    if (searchElement === null) {
        return indexOfNull(vector, fromIndex);
    }
    const compare = vector_1.createElementComparator(searchElement);
    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {
        if (compare(vector.get(i))) {
            return i;
        }
    }
    return -1;
}
/** @ignore */
function indexOfUnion(vector, searchElement, fromIndex) {
    // Unions are special -- they do have a nullBitmap, but so can their children.
    // If the searchElement is null, we don't know whether it came from the Union's
    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,
    // since that will report the wrong index if a child has a null before the Union.
    const compare = vector_1.createElementComparator(searchElement);
    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {
        if (compare(vector.get(i))) {
            return i;
        }
    }
    return -1;
}
IndexOfVisitor.prototype.visitNull = nullIndexOf;
IndexOfVisitor.prototype.visitBool = indexOfValue;
IndexOfVisitor.prototype.visitInt = indexOfValue;
IndexOfVisitor.prototype.visitInt8 = indexOfValue;
IndexOfVisitor.prototype.visitInt16 = indexOfValue;
IndexOfVisitor.prototype.visitInt32 = indexOfValue;
IndexOfVisitor.prototype.visitInt64 = indexOfValue;
IndexOfVisitor.prototype.visitUint8 = indexOfValue;
IndexOfVisitor.prototype.visitUint16 = indexOfValue;
IndexOfVisitor.prototype.visitUint32 = indexOfValue;
IndexOfVisitor.prototype.visitUint64 = indexOfValue;
IndexOfVisitor.prototype.visitFloat = indexOfValue;
IndexOfVisitor.prototype.visitFloat16 = indexOfValue;
IndexOfVisitor.prototype.visitFloat32 = indexOfValue;
IndexOfVisitor.prototype.visitFloat64 = indexOfValue;
IndexOfVisitor.prototype.visitUtf8 = indexOfValue;
IndexOfVisitor.prototype.visitBinary = indexOfValue;
IndexOfVisitor.prototype.visitFixedSizeBinary = indexOfValue;
IndexOfVisitor.prototype.visitDate = indexOfValue;
IndexOfVisitor.prototype.visitDateDay = indexOfValue;
IndexOfVisitor.prototype.visitDateMillisecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestamp = indexOfValue;
IndexOfVisitor.prototype.visitTimestampSecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestampNanosecond = indexOfValue;
IndexOfVisitor.prototype.visitTime = indexOfValue;
IndexOfVisitor.prototype.visitTimeSecond = indexOfValue;
IndexOfVisitor.prototype.visitTimeMillisecond = indexOfValue;
IndexOfVisitor.prototype.visitTimeMicrosecond = indexOfValue;
IndexOfVisitor.prototype.visitTimeNanosecond = indexOfValue;
IndexOfVisitor.prototype.visitDecimal = indexOfValue;
IndexOfVisitor.prototype.visitList = indexOfValue;
IndexOfVisitor.prototype.visitStruct = indexOfValue;
IndexOfVisitor.prototype.visitUnion = indexOfValue;
IndexOfVisitor.prototype.visitDenseUnion = indexOfUnion;
IndexOfVisitor.prototype.visitSparseUnion = indexOfUnion;
IndexOfVisitor.prototype.visitDictionary = indexOfValue;
IndexOfVisitor.prototype.visitInterval = indexOfValue;
IndexOfVisitor.prototype.visitIntervalDayTime = indexOfValue;
IndexOfVisitor.prototype.visitIntervalYearMonth = indexOfValue;
IndexOfVisitor.prototype.visitFixedSizeList = indexOfValue;
IndexOfVisitor.prototype.visitMap = indexOfValue;
exports.instance = new IndexOfVisitor();

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUM7QUFDbEUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBWSxZQUFZLENBQUM7QUFDbEUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQWEsWUFBWSxDQUFDO0FBQ2xFLGNBQWMsQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFlLFlBQVksQ0FBQztBQUNsRSxjQUFjLENBQUMsU0FBUyxDQUFDLG9CQUFvQixHQUFRLFlBQVksQ0FBQztBQUNsRSxjQUFjLENBQUMsU0FBUyxDQUFDLHNCQUFzQixHQUFNLFlBQVksQ0FBQztBQUNsRSxjQUFjLENBQUMsU0FBUyxDQUFDLGtCQUFrQixHQUFVLFlBQVksQ0FBQztBQUNsRSxjQUFjLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBb0IsWUFBWSxDQUFDO0FBRXJELFFBQUEsUUFBUSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUMiLCJmaWxlIjoidmlzaXRvci9pbmRleG9mLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IFR5cGUgfSBmcm9tICcuLi9lbnVtJztcbmltcG9ydCB7IFZpc2l0b3IgfSBmcm9tICcuLi92aXNpdG9yJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgZ2V0Qm9vbCwgaXRlcmF0ZUJpdHMgfSBmcm9tICcuLi91dGlsL2JpdCc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50Q29tcGFyYXRvciB9IGZyb20gJy4uL3V0aWwvdmVjdG9yJztcbmltcG9ydCB7XG4gICAgRGF0YVR5cGUsIERpY3Rpb25hcnksXG4gICAgQm9vbCwgTnVsbCwgVXRmOCwgQmluYXJ5LCBEZWNpbWFsLCBGaXhlZFNpemVCaW5hcnksIExpc3QsIEZpeGVkU2l6ZUxpc3QsIE1hcF8sIFN0cnVjdCxcbiAgICBGbG9hdCwgRmxvYXQxNiwgRmxvYXQzMiwgRmxvYXQ2NCxcbiAgICBJbnQsIFVpbnQ4LCBVaW50MTYsIFVpbnQzMiwgVWludDY0LCBJbnQ4LCBJbnQxNiwgSW50MzIsIEludDY0LFxuICAgIERhdGVfLCBEYXRlRGF5LCBEYXRlTWlsbGlzZWNvbmQsXG4gICAgSW50ZXJ2YWwsIEludGVydmFsRGF5VGltZSwgSW50ZXJ2YWxZZWFyTW9udGgsXG4gICAgVGltZSwgVGltZVNlY29uZCwgVGltZU1pbGxpc2Vjb25kLCBUaW1lTWljcm9zZWNvbmQsIFRpbWVOYW5vc2Vjb25kLFxuICAgIFRpbWVzdGFtcCwgVGltZXN0YW1wU2Vjb25kLCBUaW1lc3RhbXBNaWxsaXNlY29uZCwgVGltZXN0YW1wTWljcm9zZWNvbmQsIFRpbWVzdGFtcE5hbm9zZWNvbmQsXG4gICAgVW5pb24sIERlbnNlVW5pb24sIFNwYXJzZVVuaW9uLFxufSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGludGVyZmFjZSBJbmRleE9mVmlzaXRvciBleHRlbmRzIFZpc2l0b3Ige1xuICAgIHZpc2l0TWFueSA8VCBleHRlbmRzIFZlY3Rvcj4gIChub2RlczogVFtdLCB2YWx1ZXM6IChUWydUVmFsdWUnXSB8IG51bGwpW10sIGluZGljZXM6IChudW1iZXIgfCB1bmRlZmluZWQpW10pOiBudW1iZXJbXTtcbiAgICB2aXNpdCAgICAgPFQgZXh0ZW5kcyBWZWN0b3I+ICAobm9kZTogVCwgdmFsdWU6IFRbJ1RWYWx1ZSddIHwgbnVsbCwgaW5kZXg/OiBudW1iZXIgICAgICAgICAgICApOiBudW1iZXI7XG4gICAgZ2V0VmlzaXRGbjxUIGV4dGVuZHMgVHlwZT4gICAgKG5vZGU6IFQgICAgICAgICApOiAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBWZWN0b3I8VD5bJ1RWYWx1ZSddIHwgbnVsbCwgaW5kZXg/OiBudW1iZXIpID0+IG51bWJlcjtcbiAgICBnZXRWaXNpdEZuPFQgZXh0ZW5kcyBEYXRhVHlwZT4obm9kZTogVmVjdG9yPFQ+ICk6ICh2ZWN0b3I6IFZlY3RvcjxUPiwgdmFsdWU6ICAgICAgICAgVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcikgPT4gbnVtYmVyO1xuICAgIGdldFZpc2l0Rm48VCBleHRlbmRzIERhdGFUeXBlPihub2RlOiBEYXRhPFQ+ICAgKTogKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogICAgICAgICBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgZ2V0VmlzaXRGbjxUIGV4dGVuZHMgRGF0YVR5cGU+KG5vZGU6IFQgICAgICAgICApOiAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiAgICAgICAgIFRbJ1RWYWx1ZSddIHwgbnVsbCwgaW5kZXg/OiBudW1iZXIpID0+IG51bWJlcjtcbiAgICB2aXNpdE51bGwgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgTnVsbD4gICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEJvb2wgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgQm9vbD4gICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEludCAgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgSW50PiAgICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEludDggICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgSW50OD4gICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEludDE2ICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgSW50MTY+ICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEludDMyICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgSW50MzI+ICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEludDY0ICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgSW50NjQ+ICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFVpbnQ4ICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgVWludDg+ICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFVpbnQxNiAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgVWludDE2PiAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFVpbnQzMiAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgVWludDMyPiAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFVpbnQ2NCAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgVWludDY0PiAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEZsb2F0ICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRmxvYXQ+ICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEZsb2F0MTYgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRmxvYXQxNj4gICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEZsb2F0MzIgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRmxvYXQzMj4gICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEZsb2F0NjQgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRmxvYXQ2ND4gICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFV0ZjggICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgVXRmOD4gICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEJpbmFyeSAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgQmluYXJ5PiAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEZpeGVkU2l6ZUJpbmFyeSAgICAgIDxUIGV4dGVuZHMgRml4ZWRTaXplQmluYXJ5PiAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdERhdGUgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRGF0ZV8+ICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdERhdGVEYXkgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRGF0ZURheT4gICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdERhdGVNaWxsaXNlY29uZCAgICAgIDxUIGV4dGVuZHMgRGF0ZU1pbGxpc2Vjb25kPiAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFRpbWVzdGFtcCAgICAgICAgICAgIDxUIGV4dGVuZHMgVGltZXN0YW1wPiAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFRpbWVzdGFtcFNlY29uZCAgICAgIDxUIGV4dGVuZHMgVGltZXN0YW1wU2Vjb25kPiAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFRpbWVzdGFtcE1pbGxpc2Vjb25kIDxUIGV4dGVuZHMgVGltZXN0YW1wTWlsbGlzZWNvbmQ+KHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFRpbWVzdGFtcE1pY3Jvc2Vjb25kIDxUIGV4dGVuZHMgVGltZXN0YW1wTWljcm9zZWNvbmQ+KHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFRpbWVzdGFtcE5hbm9zZWNvbmQgIDxUIGV4dGVuZHMgVGltZXN0YW1wTmFub3NlY29uZD4gKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFRpbWUgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgVGltZT4gICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFRpbWVTZWNvbmQgICAgICAgICAgIDxUIGV4dGVuZHMgVGltZVNlY29uZD4gICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFRpbWVNaWxsaXNlY29uZCAgICAgIDxUIGV4dGVuZHMgVGltZU1pbGxpc2Vjb25kPiAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFRpbWVNaWNyb3NlY29uZCAgICAgIDxUIGV4dGVuZHMgVGltZU1pY3Jvc2Vjb25kPiAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFRpbWVOYW5vc2Vjb25kICAgICAgIDxUIGV4dGVuZHMgVGltZU5hbm9zZWNvbmQ+ICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdERlY2ltYWwgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRGVjaW1hbD4gICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdExpc3QgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgTGlzdD4gICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFN0cnVjdCAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgU3RydWN0PiAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFVuaW9uICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgVW5pb24+ICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdERlbnNlVW5pb24gICAgICAgICAgIDxUIGV4dGVuZHMgRGVuc2VVbmlvbj4gICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdFNwYXJzZVVuaW9uICAgICAgICAgIDxUIGV4dGVuZHMgU3BhcnNlVW5pb24+ICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdERpY3Rpb25hcnkgICAgICAgICAgIDxUIGV4dGVuZHMgRGljdGlvbmFyeT4gICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEludGVydmFsICAgICAgICAgICAgIDxUIGV4dGVuZHMgSW50ZXJ2YWw+ICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEludGVydmFsRGF5VGltZSAgICAgIDxUIGV4dGVuZHMgSW50ZXJ2YWxEYXlUaW1lPiAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEludGVydmFsWWVhck1vbnRoICAgIDxUIGV4dGVuZHMgSW50ZXJ2YWxZZWFyTW9udGg+ICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdEZpeGVkU2l6ZUxpc3QgICAgICAgIDxUIGV4dGVuZHMgRml4ZWRTaXplTGlzdD4gICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbiAgICB2aXNpdE1hcCAgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgTWFwXz4gICAgICAgICAgICAgICAgKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcik6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEluZGV4T2ZWaXNpdG9yIGV4dGVuZHMgVmlzaXRvciB7XG59XG5cbi8qKiBAaWdub3JlICovXG5mdW5jdGlvbiBudWxsSW5kZXhPZih2ZWN0b3I6IFZlY3RvcjxOdWxsPiwgc2VhcmNoRWxlbWVudD86IG51bGwpIHtcbiAgICAvLyBpZiB5b3UncmUgbG9va2luZyBmb3IgbnVsbHMgYW5kIHRoZSB2ZWN0b3IgaXNuJ3QgZW1wdHksIHdlJ3ZlIGdvdCAnZW0hXG4gICAgcmV0dXJuIHNlYXJjaEVsZW1lbnQgPT09IG51bGwgJiYgdmVjdG9yLmxlbmd0aCA+IDAgPyAwIDogLTE7XG59XG5cbi8qKiBAaWdub3JlICovXG5mdW5jdGlvbiBpbmRleE9mTnVsbDxUIGV4dGVuZHMgRGF0YVR5cGU+KHZlY3RvcjogVmVjdG9yPFQ+LCBmcm9tSW5kZXg/OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHsgbnVsbEJpdG1hcCB9ID0gdmVjdG9yO1xuICAgIGlmICghbnVsbEJpdG1hcCB8fCB2ZWN0b3IubnVsbENvdW50IDw9IDApIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yIChjb25zdCBpc1ZhbGlkIG9mIGl0ZXJhdGVCaXRzKG51bGxCaXRtYXAsIHZlY3Rvci5kYXRhLm9mZnNldCArIChmcm9tSW5kZXggfHwgMCksIHZlY3Rvci5sZW5ndGgsIG51bGxCaXRtYXAsIGdldEJvb2wpKSB7XG4gICAgICAgIGlmICghaXNWYWxpZCkgeyByZXR1cm4gaTsgfVxuICAgICAgICArK2k7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cblxuLyoqIEBpZ25vcmUgKi9cbmZ1bmN0aW9uIGluZGV4T2ZWYWx1ZTxUIGV4dGVuZHMgRGF0YVR5cGU+KHZlY3RvcjogVmVjdG9yPFQ+LCBzZWFyY2hFbGVtZW50PzogVFsnVFZhbHVlJ10gfCBudWxsLCBmcm9tSW5kZXg/OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmIChzZWFyY2hFbGVtZW50ID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIC0xOyB9XG4gICAgaWYgKHNlYXJjaEVsZW1lbnQgPT09IG51bGwpIHsgcmV0dXJuIGluZGV4T2ZOdWxsKHZlY3RvciwgZnJvbUluZGV4KTsgfVxuICAgIGNvbnN0IGNvbXBhcmUgPSBjcmVhdGVFbGVtZW50Q29tcGFyYXRvcihzZWFyY2hFbGVtZW50KTtcbiAgICBmb3IgKGxldCBpID0gKGZyb21JbmRleCB8fCAwKSAtIDEsIG4gPSB2ZWN0b3IubGVuZ3RoOyArK2kgPCBuOykge1xuICAgICAgICBpZiAoY29tcGFyZSh2ZWN0b3IuZ2V0KGkpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuXG4vKiogQGlnbm9yZSAqL1xuZnVuY3Rpb24gaW5kZXhPZlVuaW9uPFQgZXh0ZW5kcyBEYXRhVHlwZT4odmVjdG9yOiBWZWN0b3I8VD4sIHNlYXJjaEVsZW1lbnQ/OiBUWydUVmFsdWUnXSB8IG51bGwsIGZyb21JbmRleD86IG51bWJlcik6IG51bWJlciB7XG4gICAgLy8gVW5pb25zIGFyZSBzcGVjaWFsIC0tIHRoZXkgZG8gaGF2ZSBhIG51bGxCaXRtYXAsIGJ1dCBzbyBjYW4gdGhlaXIgY2hpbGRyZW4uXG4gICAgLy8gSWYgdGhlIHNlYXJjaEVsZW1lbnQgaXMgbnVsbCwgd2UgZG9uJ3Qga25vdyB3aGV0aGVyIGl0IGNhbWUgZnJvbSB0aGUgVW5pb24nc1xuICAgIC8vIGJpdG1hcCBvciBvbmUgb2YgaXRzIGNoaWxkcmVucycuIFNvIHdlIGRvbid0IGludGVycm9nYXRlIHRoZSBVbmlvbidzIGJpdG1hcCxcbiAgICAvLyBzaW5jZSB0aGF0IHdpbGwgcmVwb3J0IHRoZSB3cm9uZyBpbmRleCBpZiBhIGNoaWxkIGhhcyBhIG51bGwgYmVmb3JlIHRoZSBVbmlvbi5cbiAgICBjb25zdCBjb21wYXJlID0gY3JlYXRlRWxlbWVudENvbXBhcmF0b3Ioc2VhcmNoRWxlbWVudCk7XG4gICAgZm9yIChsZXQgaSA9IChmcm9tSW5kZXggfHwgMCkgLSAxLCBuID0gdmVjdG9yLmxlbmd0aDsgKytpIDwgbjspIHtcbiAgICAgICAgaWYgKGNvbXBhcmUodmVjdG9yLmdldChpKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cblxuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0TnVsbCAgICAgICAgICAgICAgICAgPSAgbnVsbEluZGV4T2Y7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRCb29sICAgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdEludCAgICAgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0SW50OCAgICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRJbnQxNiAgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdEludDMyICAgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0SW50NjQgICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRVaW50OCAgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdFVpbnQxNiAgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0VWludDMyICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRVaW50NjQgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdEZsb2F0ICAgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0RmxvYXQxNiAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRGbG9hdDMyICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdEZsb2F0NjQgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0VXRmOCAgICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRCaW5hcnkgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdEZpeGVkU2l6ZUJpbmFyeSAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0RGF0ZSAgICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXREYXRlRGF5ICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdERhdGVNaWxsaXNlY29uZCAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0VGltZXN0YW1wICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRUaW1lc3RhbXBTZWNvbmQgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdFRpbWVzdGFtcE1pbGxpc2Vjb25kID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0VGltZXN0YW1wTWljcm9zZWNvbmQgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRUaW1lc3RhbXBOYW5vc2Vjb25kICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdFRpbWUgICAgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0VGltZVNlY29uZCAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRUaW1lTWlsbGlzZWNvbmQgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdFRpbWVNaWNyb3NlY29uZCAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0VGltZU5hbm9zZWNvbmQgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXREZWNpbWFsICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdExpc3QgICAgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0U3RydWN0ICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRVbmlvbiAgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdERlbnNlVW5pb24gICAgICAgICAgID0gaW5kZXhPZlVuaW9uO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0U3BhcnNlVW5pb24gICAgICAgICAgPSBpbmRleE9mVW5pb247XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXREaWN0aW9uYXJ5ICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdEludGVydmFsICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0SW50ZXJ2YWxEYXlUaW1lICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRJbnRlcnZhbFllYXJNb250aCAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdEZpeGVkU2l6ZUxpc3QgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0TWFwICAgICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5cbmV4cG9ydCBjb25zdCBpbnN0YW5jZSA9IG5ldyBJbmRleE9mVmlzaXRvcigpO1xuIl19
