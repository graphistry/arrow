"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const visitor_1 = require("../visitor");
const vecs = require("../vector/all");
class GetVectorConstructor extends visitor_1.Visitor {
    visitNull() { return vecs.NullVector; }
    visitBool() { return vecs.BoolVector; }
    visitInt() { return vecs.IntVector; }
    visitInt8() { return vecs.Int8Vector; }
    visitInt16() { return vecs.Int16Vector; }
    visitInt32() { return vecs.Int32Vector; }
    visitInt64() { return vecs.Int64Vector; }
    visitUint8() { return vecs.Uint8Vector; }
    visitUint16() { return vecs.Uint16Vector; }
    visitUint32() { return vecs.Uint32Vector; }
    visitUint64() { return vecs.Uint64Vector; }
    visitFloat() { return vecs.FloatVector; }
    visitFloat16() { return vecs.Float16Vector; }
    visitFloat32() { return vecs.Float32Vector; }
    visitFloat64() { return vecs.Float64Vector; }
    visitUtf8() { return vecs.Utf8Vector; }
    visitBinary() { return vecs.BinaryVector; }
    visitFixedSizeBinary() { return vecs.FixedSizeBinaryVector; }
    visitDate() { return vecs.DateVector; }
    visitDateDay() { return vecs.DateDayVector; }
    visitDateMillisecond() { return vecs.DateMillisecondVector; }
    visitTimestamp() { return vecs.TimestampVector; }
    visitTimestampSecond() { return vecs.TimestampSecondVector; }
    visitTimestampMillisecond() { return vecs.TimestampMillisecondVector; }
    visitTimestampMicrosecond() { return vecs.TimestampMicrosecondVector; }
    visitTimestampNanosecond() { return vecs.TimestampNanosecondVector; }
    visitTime() { return vecs.TimeVector; }
    visitTimeSecond() { return vecs.TimeSecondVector; }
    visitTimeMillisecond() { return vecs.TimeMillisecondVector; }
    visitTimeMicrosecond() { return vecs.TimeMicrosecondVector; }
    visitTimeNanosecond() { return vecs.TimeNanosecondVector; }
    visitDecimal() { return vecs.DecimalVector; }
    visitList() { return vecs.ListVector; }
    visitStruct() { return vecs.StructVector; }
    visitUnion() { return vecs.UnionVector; }
    visitDenseUnion() { return vecs.DenseUnionVector; }
    visitSparseUnion() { return vecs.SparseUnionVector; }
    visitDictionary() { return vecs.DictionaryVector; }
    visitInterval() { return vecs.IntervalVector; }
    visitIntervalDayTime() { return vecs.IntervalDayTimeVector; }
    visitIntervalYearMonth() { return vecs.IntervalYearMonthVector; }
    visitFixedSizeList() { return vecs.FixedSizeListVector; }
    visitMap() { return vecs.MapVector; }
}
exports.GetVectorConstructor = GetVectorConstructor;
exports.instance = new GetVectorConstructor();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
