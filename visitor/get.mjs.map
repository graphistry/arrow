{"version":3,"sources":["visitor/get.ts"],"names":[],"mappings":"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","file":"get.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { Vector } from '../interfaces';\nimport { decodeUtf8 } from '../util/utf8';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface GetVisitor extends Visitor {\n    visit<T extends Vector>  (node: T, index: number): T['TValue'];\n    visitMany<T extends Vector>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (vector: Vector<T>, index: number) => Vector<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: Vector<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: Vector<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: Vector<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: Vector<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: Vector<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: Vector<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: Vector<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: Vector<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: Vector<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: Vector<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: Vector<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: Vector<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: Vector<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: Vector<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: Vector<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: Vector<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: Vector<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: Vector<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: Vector<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: Vector<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: Vector<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: Vector<T>, index: number): T['TValue'];\n}\n\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: Vector<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: Vector<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: Vector<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: Vector<T>, index: number): T['TValue'] => (values[stride * index] - 32767) / 32767;\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Vector<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: Vector<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(<any> vector, index)\n        : getBigInts(<any> vector, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as any, index)\n        : getFloat16(vector as any, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: Vector<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as any, index)\n        : getDateMillisecond(vector as any, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: Vector<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Vector<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: Vector<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as Vector<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as Vector<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as Vector<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as Vector<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: Vector<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(2 * index, 2 * (index + 1)), true);\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(2 * index, 2 * (index + 1)), true);\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: Vector<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as Vector<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as Vector<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as Vector<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as Vector<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: Vector<T>, index: number): T['TValue'] => BN.new(values.subarray(4 * index, 4 * (index + 1)), false);\n\n/** @ignore */\nconst getList = <T extends List>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getNested = <\n    S extends { [key: string]: DataType },\n    V extends Vector<Map_<S>> | Vector<Struct<S>>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.rowProxy.bind(index);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends Vector<Union> | Vector<DenseUnion> | Vector<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as Vector<DenseUnion>, index) :\n        getSparseUnion(vector as Vector<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: Vector<T>, index: number): T['TValue'] => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: Vector<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: Vector<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as any, index)\n        : getIntervalYearMonth(vector as any, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: Vector<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Vector<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: Vector<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getNested;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =               getNested;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n"]}