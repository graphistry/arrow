// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Visitor } from '../visitor';
import { TextEncoder } from 'text-encoding-utf-8';
import { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';
export const encodeUtf8 = ((encoder) => encoder.encode.bind(encoder))(new TextEncoder('utf-8'));
export class SetVisitor extends Visitor {
}
const setEpochMsToDays = (data, index, epochMs) => { data[index] = (epochMs / 86400000) | 0; };
const setEpochMsToMillisecondsLong = (data, index, epochMs) => {
    data[index] = (epochMs % 4294967296) | 0;
    data[index + 1] = (epochMs / 4294967296) | 0;
};
const setEpochMsToMicrosecondsLong = (data, index, epochMs) => {
    data[index] = ((epochMs / 1000) % 4294967296) | 0;
    data[index + 1] = ((epochMs / 1000) / 4294967296) | 0;
};
const setEpochMsToNanosecondsLong = (data, index, epochMs) => {
    data[index] = ((epochMs / 1000000) % 4294967296) | 0;
    data[index + 1] = ((epochMs / 1000000) / 4294967296) | 0;
};
const setVariableWidthBytes = (values, valueOffsets, index, value) => {
    const { [index]: x, [index + 1]: y } = valueOffsets;
    if (x != null && y != null) {
        values.set(value.subarray(0, y - x), x);
    }
};
const setBool = ({ offset, values }, index, val) => {
    const idx = offset + index;
    val ? (values[idx >> 3] |= (1 << (idx % 8))) // true
        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false
};
const setDateDay = ({ values }, index, value) => { setEpochMsToDays(values, index, value.valueOf()); };
const setDateMillisecond = ({ values }, index, value) => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };
const setNumeric = ({ stride, values }, index, value) => { values[stride * index] = value; };
const setFloat16 = ({ stride, values }, index, value) => { values[stride * index] = (value * 32767) + 32767; };
const setNumericX2 = ({ stride, values }, index, value) => { values.set(value.subarray(0, stride), stride * index); };
const setFixedSizeBinary = ({ stride, values }, index, value) => { values.set(value.subarray(0, stride), stride * index); };
const setBinary = ({ values, valueOffsets }, index, value) => setVariableWidthBytes(values, valueOffsets, index, value);
const setUtf8 = ({ values, valueOffsets }, index, value) => {
    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));
};
const setInt = (vector, index, value) => {
    vector.type.bitWidth < 64
        ? setNumeric(vector, index, value)
        : setNumericX2(vector, index, value);
};
const setFloat = (vector, index, value) => {
    vector.type.precision !== Precision.HALF
        ? setNumeric(vector, index, value)
        : setFloat16(vector, index, value);
};
const getDate = (vector, index, value) => {
    vector.type.unit === DateUnit.DAY
        ? setDateDay(vector, index, value)
        : setDateMillisecond(vector, index, value);
};
const setTimestampSecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);
const setTimestampMillisecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value);
const setTimestampMicrosecond = ({ values }, index, value) => setEpochMsToMicrosecondsLong(values, index * 2, value);
const setTimestampNanosecond = ({ values }, index, value) => setEpochMsToNanosecondsLong(values, index * 2, value);
const setTimestamp = (vector, index, value) => {
    switch (vector.type.unit) {
        case TimeUnit.SECOND: return setTimestampSecond(vector, index, value);
        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector, index, value);
        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector, index, value);
        case TimeUnit.NANOSECOND: return setTimestampNanosecond(vector, index, value);
    }
};
const setTimeSecond = ({ values, stride }, index, value) => { values[stride * index] = value; };
const setTimeMillisecond = ({ values, stride }, index, value) => { values[stride * index] = value; };
const setTimeMicrosecond = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };
const setTimeNanosecond = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };
const setTime = (vector, index, value) => {
    switch (vector.type.unit) {
        case TimeUnit.SECOND: return setTimeSecond(vector, index, value);
        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector, index, value);
        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector, index, value);
        case TimeUnit.NANOSECOND: return setTimeNanosecond(vector, index, value);
    }
};
const setDecimal = ({ values }, index, value) => { values.set(value.subarray(0, 4), 4 * index); };
const setList = (vector, index, value) => {
    const values = vector.getChildAt(0);
    const { valueOffsets, stride } = vector;
    let idx = -1, offset = valueOffsets[index * stride];
    let end = Math.min(value.length, valueOffsets[(index * stride) + 1] - offset);
    while (offset < end) {
        values.set(offset++, value.get(++idx));
    }
};
const setNested = (vector, index, value) => {
    vector.type.children.forEach(({ name }, idx) => {
        const kid = vector.getChildAt(idx);
        kid && kid.set(index, value[name]);
    });
};
const setUnion = (vector, index, value) => {
    vector.type.mode === UnionMode.Dense ?
        setDenseUnion(vector, index, value) :
        setSparseUnion(vector, index, value);
};
const setDenseUnion = (vector, index, value) => {
    const { typeIds, type: { typeIdToChildIndex } } = vector;
    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);
    child && child.set(vector.valueOffsets[index], value);
};
const setSparseUnion = (vector, index, value) => {
    const { typeIds, type: { typeIdToChildIndex } } = vector;
    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);
    child && child.set(index, value);
};
const setDictionary = (vector, index, value) => {
    return vector.dictionary.set(vector.indices.get(index), value);
};
const setIntervalValue = (vector, index, value) => {
    (vector.type.unit === IntervalUnit.DAY_TIME)
        ? setIntervalDayTime(vector, index, value)
        : setIntervalYearMonth(vector, index, value);
};
const setIntervalDayTime = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };
const setIntervalYearMonth = ({ values }, index, value) => { values[index] = (value[0] * 12) + (value[1] % 12); };
const setFixedSizeList = (vector, index, value) => {
    const child = vector.getChildAt(0), { stride } = vector;
    for (let idx = -1, offset = index * stride; ++idx < stride;) {
        child.set(offset + idx, value.get(++idx));
    }
};
SetVisitor.prototype.visitBool = setBool;
SetVisitor.prototype.visitInt = setInt;
SetVisitor.prototype.visitInt8 = setNumeric;
SetVisitor.prototype.visitInt16 = setNumeric;
SetVisitor.prototype.visitInt32 = setNumeric;
SetVisitor.prototype.visitInt64 = setNumericX2;
SetVisitor.prototype.visitUint8 = setNumeric;
SetVisitor.prototype.visitUint16 = setNumeric;
SetVisitor.prototype.visitUint32 = setNumeric;
SetVisitor.prototype.visitUint64 = setNumericX2;
SetVisitor.prototype.visitFloat = setFloat;
SetVisitor.prototype.visitFloat16 = setFloat16;
SetVisitor.prototype.visitFloat32 = setNumeric;
SetVisitor.prototype.visitFloat64 = setNumeric;
SetVisitor.prototype.visitUtf8 = setUtf8;
SetVisitor.prototype.visitBinary = setBinary;
SetVisitor.prototype.visitFixedSizeBinary = setFixedSizeBinary;
SetVisitor.prototype.visitDate = getDate;
SetVisitor.prototype.visitDateDay = setDateDay;
SetVisitor.prototype.visitDateMillisecond = setDateMillisecond;
SetVisitor.prototype.visitTimestamp = setTimestamp;
SetVisitor.prototype.visitTimestampSecond = setTimestampSecond;
SetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;
SetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;
SetVisitor.prototype.visitTimestampNanosecond = setTimestampNanosecond;
SetVisitor.prototype.visitTime = setTime;
SetVisitor.prototype.visitTimeSecond = setTimeSecond;
SetVisitor.prototype.visitTimeMillisecond = setTimeMillisecond;
SetVisitor.prototype.visitTimeMicrosecond = setTimeMicrosecond;
SetVisitor.prototype.visitTimeNanosecond = setTimeNanosecond;
SetVisitor.prototype.visitDecimal = setDecimal;
SetVisitor.prototype.visitList = setList;
SetVisitor.prototype.visitStruct = setNested;
SetVisitor.prototype.visitUnion = setUnion;
SetVisitor.prototype.visitDenseUnion = setDenseUnion;
SetVisitor.prototype.visitSparseUnion = setSparseUnion;
SetVisitor.prototype.visitDictionary = setDictionary;
SetVisitor.prototype.visitInterval = setIntervalValue;
SetVisitor.prototype.visitIntervalDayTime = setIntervalDayTime;
SetVisitor.prototype.visitIntervalYearMonth = setIntervalYearMonth;
SetVisitor.prototype.visitFixedSizeList = setFixedSizeList;
SetVisitor.prototype.visitMap = setNested;
export const instance = new SetVisitor();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
