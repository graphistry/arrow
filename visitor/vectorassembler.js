"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const visitor_1 = require("../visitor");
const enum_1 = require("../enum");
const recordbatch_1 = require("../recordbatch");
const buffer_1 = require("../util/buffer");
const bit_1 = require("../util/bit");
const array_1 = require("../util/array");
const message_1 = require("../ipc/metadata/message");
const type_1 = require("../type");
class VectorAssembler extends visitor_1.Visitor {
    constructor() {
        super();
        this._byteLength = 0;
        this._nodes = [];
        this._buffers = [];
        this._bufferRegions = [];
    }
    /** @nocollapse */
    static assemble(...args) {
        return new VectorAssembler().visitMany(array_1.selectAndFlattenVectorChildren(recordbatch_1.RecordBatch, args))[0];
    }
    visit(vector) {
        if (!type_1.DataType.isDictionary(vector.type)) {
            const { data, length, nullCount } = vector;
            if (length > 2147483647) {
                /* istanbul ignore next */
                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');
            }
            addBuffer.call(this, nullCount <= 0
                ? new Uint8Array(0) // placeholder validity buffer
                : bit_1.truncateBitmap(data.offset, length, data.nullBitmap)).nodes.push(new message_1.FieldNode(length, nullCount));
        }
        return super.visit(vector);
    }
    visitNull(_nullV) { return this; }
    visitDictionary(vector) {
        // Assemble the indices here, Dictionary assembled separately.
        return this.visit(vector.indices);
    }
    get nodes() { return this._nodes; }
    get buffers() { return this._buffers; }
    get byteLength() { return this._byteLength; }
    get bufferRegions() { return this._bufferRegions; }
}
exports.VectorAssembler = VectorAssembler;
/** @ignore */
function addBuffer(values) {
    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8
    this.buffers.push(values);
    this.bufferRegions.push(new message_1.BufferRegion(this._byteLength, byteLength));
    this._byteLength += byteLength;
    return this;
}
/** @ignore */
function assembleUnion(vector) {
    const { type, length, typeIds, valueOffsets } = vector;
    // All Union Vectors have a typeIds buffer
    addBuffer.call(this, typeIds);
    // If this is a Sparse Union, treat it like all other Nested types
    if (type.mode === enum_1.UnionMode.Sparse) {
        return assembleNestedVector.call(this, vector);
    }
    else if (type.mode === enum_1.UnionMode.Dense) {
        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children
        if (vector.offset <= 0) {
            // If the Vector hasn't been sliced, write the existing valueOffsets
            addBuffer.call(this, valueOffsets);
            // We can treat this like all other Nested types
            return assembleNestedVector.call(this, vector);
        }
        else {
            // A sliced Dense Union is an unpleasant case. Because the offsets are different for
            // each child vector, we need to "rebase" the valueOffsets for each child
            // Union typeIds are not necessary 0-indexed
            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);
            const childLengths = new Int32Array(maxChildTypeId + 1);
            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet
            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);
            const shiftedOffsets = new Int32Array(length);
            // If we have a non-zero offset, then the value offsets do not start at
            // zero. We must a) create a new offsets array with shifted offsets and
            // b) slice the values array accordingly
            const unshiftedOffsets = buffer_1.rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);
            for (let typeId, shift, index = -1; ++index < length;) {
                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {
                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];
                }
                shiftedOffsets[index] = unshiftedOffsets[index] - shift;
                ++childLengths[typeId];
            }
            addBuffer.call(this, shiftedOffsets);
            // Slice and visit children accordingly
            for (let child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {
                if (child = vector.getChildAt(childIndex)) {
                    const typeId = type.typeIds[childIndex];
                    const childLength = Math.min(length, childLengths[typeId]);
                    this.visit(child.slice(childOffsets[typeId], childLength));
                }
            }
        }
    }
    return this;
}
/** @ignore */
function assembleBoolVector(vector) {
    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed
    let values;
    if (vector.nullCount >= vector.length) {
        // If all values are null, just insert a placeholder empty data buffer (fastest path)
        return addBuffer.call(this, new Uint8Array(0));
    }
    else if ((values = vector.values) instanceof Uint8Array) {
        // If values is already a Uint8Array, slice the bitmap (fast path)
        return addBuffer.call(this, bit_1.truncateBitmap(vector.offset, vector.length, values));
    }
    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the
    // values as bools and re-pack them into a Uint8Array. This code isn't
    // reachable unless you're trying to manipulate the Data internals,
    // we we're only doing this for safety.
    /* istanbul ignore next */
    return addBuffer.call(this, bit_1.packBools(vector));
}
/** @ignore */
function assembleFlatVector(vector) {
    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));
}
/** @ignore */
function assembleFlatListVector(vector) {
    const { length, values, valueOffsets } = vector;
    const firstOffset = valueOffsets[0];
    const lastOffset = valueOffsets[length];
    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);
    // Push in the order FlatList types read their buffers
    addBuffer.call(this, buffer_1.rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first
    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second
    return this;
}
/** @ignore */
function assembleListVector(vector) {
    const { length, valueOffsets } = vector;
    // If we have valueOffsets (ListVector), push that buffer first
    if (valueOffsets) {
        addBuffer.call(this, buffer_1.rebaseValueOffsets(valueOffsets[0], length, valueOffsets));
    }
    // Then insert the List's values child
    return this.visit(vector.getChildAt(0));
}
/** @ignore */
function assembleNestedVector(vector) {
    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)).filter(Boolean))[0];
}
VectorAssembler.prototype.visitBool = assembleBoolVector;
VectorAssembler.prototype.visitInt = assembleFlatVector;
VectorAssembler.prototype.visitFloat = assembleFlatVector;
VectorAssembler.prototype.visitUtf8 = assembleFlatListVector;
VectorAssembler.prototype.visitBinary = assembleFlatListVector;
VectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;
VectorAssembler.prototype.visitDate = assembleFlatVector;
VectorAssembler.prototype.visitTimestamp = assembleFlatVector;
VectorAssembler.prototype.visitTime = assembleFlatVector;
VectorAssembler.prototype.visitDecimal = assembleFlatVector;
VectorAssembler.prototype.visitList = assembleListVector;
VectorAssembler.prototype.visitStruct = assembleNestedVector;
VectorAssembler.prototype.visitUnion = assembleUnion;
VectorAssembler.prototype.visitInterval = assembleFlatVector;
VectorAssembler.prototype.visitFixedSizeList = assembleListVector;
VectorAssembler.prototype.visitMap = assembleNestedVector;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpc2l0b3IvdmVjdG9yYXNzZW1ibGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7O0FBSXJCLHdDQUFxQztBQUNyQyxrQ0FBMEM7QUFDMUMsZ0RBQTZDO0FBRTdDLDJDQUFvRDtBQUNwRCxxQ0FBd0Q7QUFDeEQseUNBQStEO0FBQy9ELHFEQUFrRTtBQUNsRSxrQ0FJaUI7QUEwQmpCLE1BQWEsZUFBZ0IsU0FBUSxpQkFBTztJQU94QztRQUF3QixLQUFLLEVBQUUsQ0FBQztRQTRCdEIsZ0JBQVcsR0FBRyxDQUFDLENBQUM7UUFDaEIsV0FBTSxHQUFnQixFQUFFLENBQUM7UUFDekIsYUFBUSxHQUFzQixFQUFFLENBQUM7UUFDakMsbUJBQWMsR0FBbUIsRUFBRSxDQUFDO0lBL0JiLENBQUM7SUFMbEMsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLFFBQVEsQ0FBaUMsR0FBRyxJQUFpQjtRQUN2RSxPQUFPLElBQUksZUFBZSxFQUFFLENBQUMsU0FBUyxDQUFDLHNDQUE4QixDQUFDLHlCQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBSU0sS0FBSyxDQUFtQixNQUFTO1FBQ3BDLElBQUksQ0FBQyxlQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNyQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLENBQUM7WUFDM0MsSUFBSSxNQUFNLEdBQUcsVUFBVSxFQUFFO2dCQUNy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ZUFBZSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQWUsa0JBQWtCLENBQUM7QUFDeEUsZUFBZSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQWtCLGtCQUFrQixDQUFDO0FBQ3hFLGVBQWUsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFjLG9CQUFvQixDQUFDO0FBQ3hFLGVBQWUsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFzQixhQUFhLENBQUM7QUFDeEUsZUFBZSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQWMsa0JBQWtCLENBQUM7QUFDeEUsZUFBZSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsR0FBUyxrQkFBa0IsQ0FBQztBQUN4RSxlQUFlLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBaUIsb0JBQW9CLENBQUMiLCJmaWxlIjoidmlzaXRvci92ZWN0b3Jhc3NlbWJsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcbmltcG9ydCB7IFZpc2l0b3IgfSBmcm9tICcuLi92aXNpdG9yJztcbmltcG9ydCB7IFR5cGUsIFVuaW9uTW9kZSB9IGZyb20gJy4uL2VudW0nO1xuaW1wb3J0IHsgUmVjb3JkQmF0Y2ggfSBmcm9tICcuLi9yZWNvcmRiYXRjaCc7XG5pbXBvcnQgeyBWZWN0b3IgYXMgVlR5cGUgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IHJlYmFzZVZhbHVlT2Zmc2V0cyB9IGZyb20gJy4uL3V0aWwvYnVmZmVyJztcbmltcG9ydCB7IHBhY2tCb29scywgdHJ1bmNhdGVCaXRtYXAgfSBmcm9tICcuLi91dGlsL2JpdCc7XG5pbXBvcnQgeyBzZWxlY3RBbmRGbGF0dGVuVmVjdG9yQ2hpbGRyZW4gfSBmcm9tICcuLi91dGlsL2FycmF5JztcbmltcG9ydCB7IEJ1ZmZlclJlZ2lvbiwgRmllbGROb2RlIH0gZnJvbSAnLi4vaXBjL21ldGFkYXRhL21lc3NhZ2UnO1xuaW1wb3J0IHtcbiAgICBEYXRhVHlwZSwgRGljdGlvbmFyeSxcbiAgICBGbG9hdCwgSW50LCBEYXRlXywgSW50ZXJ2YWwsIFRpbWUsIFRpbWVzdGFtcCwgVW5pb24sXG4gICAgQm9vbCwgTnVsbCwgVXRmOCwgQmluYXJ5LCBEZWNpbWFsLCBGaXhlZFNpemVCaW5hcnksIExpc3QsIEZpeGVkU2l6ZUxpc3QsIE1hcF8sIFN0cnVjdCxcbn0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVjdG9yQXNzZW1ibGVyIGV4dGVuZHMgVmlzaXRvciB7XG4gICAgdmlzaXQ8VCBleHRlbmRzIFZlY3Rvcj4obm9kZTogVCk6IHRoaXM7XG4gICAgdmlzaXRNYW55PFQgZXh0ZW5kcyBWZWN0b3I+KG5vZGVzOiBUW10pOiB0aGlzW107XG4gICAgZ2V0VmlzaXRGbjxUIGV4dGVuZHMgVHlwZT4obm9kZTogVCk6ICh2ZWN0b3I6IFZUeXBlPFQ+KSA9PiB0aGlzO1xuICAgIGdldFZpc2l0Rm48VCBleHRlbmRzIERhdGFUeXBlPihub2RlOiBWVHlwZTxUPiB8IERhdGE8VD4gfCBUKTogKHZlY3RvcjogVlR5cGU8VD4pID0+IHRoaXM7XG5cbiAgICB2aXNpdEJvb2wgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgQm9vbD4gICAgICAgICAgICAodmVjdG9yOiBWVHlwZTxUPik6IHRoaXM7XG4gICAgdmlzaXRJbnQgICAgICAgICAgICAgICAgICA8VCBleHRlbmRzIEludD4gICAgICAgICAgICAgKHZlY3RvcjogVlR5cGU8VD4pOiB0aGlzO1xuICAgIHZpc2l0RmxvYXQgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBGbG9hdD4gICAgICAgICAgICh2ZWN0b3I6IFZUeXBlPFQ+KTogdGhpcztcbiAgICB2aXNpdFV0ZjggICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgVXRmOD4gICAgICAgICAgICAodmVjdG9yOiBWVHlwZTxUPik6IHRoaXM7XG4gICAgdmlzaXRCaW5hcnkgICAgICAgICAgICAgICA8VCBleHRlbmRzIEJpbmFyeT4gICAgICAgICAgKHZlY3RvcjogVlR5cGU8VD4pOiB0aGlzO1xuICAgIHZpc2l0Rml4ZWRTaXplQmluYXJ5ICAgICAgPFQgZXh0ZW5kcyBGaXhlZFNpemVCaW5hcnk+ICh2ZWN0b3I6IFZUeXBlPFQ+KTogdGhpcztcbiAgICB2aXNpdERhdGUgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRGF0ZV8+ICAgICAgICAgICAodmVjdG9yOiBWVHlwZTxUPik6IHRoaXM7XG4gICAgdmlzaXRUaW1lc3RhbXAgICAgICAgICAgICA8VCBleHRlbmRzIFRpbWVzdGFtcD4gICAgICAgKHZlY3RvcjogVlR5cGU8VD4pOiB0aGlzO1xuICAgIHZpc2l0VGltZSAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBUaW1lPiAgICAgICAgICAgICh2ZWN0b3I6IFZUeXBlPFQ+KTogdGhpcztcbiAgICB2aXNpdERlY2ltYWwgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRGVjaW1hbD4gICAgICAgICAodmVjdG9yOiBWVHlwZTxUPik6IHRoaXM7XG4gICAgdmlzaXRMaXN0ICAgICAgICAgICAgICAgICA8VCBleHRlbmRzIExpc3Q+ICAgICAgICAgICAgKHZlY3RvcjogVlR5cGU8VD4pOiB0aGlzO1xuICAgIHZpc2l0U3RydWN0ICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBTdHJ1Y3Q+ICAgICAgICAgICh2ZWN0b3I6IFZUeXBlPFQ+KTogdGhpcztcbiAgICB2aXNpdFVuaW9uICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgVW5pb24+ICAgICAgICAgICAodmVjdG9yOiBWVHlwZTxUPik6IHRoaXM7XG4gICAgdmlzaXRJbnRlcnZhbCAgICAgICAgICAgICA8VCBleHRlbmRzIEludGVydmFsPiAgICAgICAgKHZlY3RvcjogVlR5cGU8VD4pOiB0aGlzO1xuICAgIHZpc2l0Rml4ZWRTaXplTGlzdCAgICAgICAgPFQgZXh0ZW5kcyBGaXhlZFNpemVMaXN0PiAgICh2ZWN0b3I6IFZUeXBlPFQ+KTogdGhpcztcbiAgICB2aXNpdE1hcCAgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgTWFwXz4gICAgICAgICAgICAodmVjdG9yOiBWVHlwZTxUPik6IHRoaXM7XG59XG5cbmV4cG9ydCBjbGFzcyBWZWN0b3JBc3NlbWJsZXIgZXh0ZW5kcyBWaXNpdG9yIHtcblxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYXNzZW1ibGU8VCBleHRlbmRzIFZlY3RvciB8IFJlY29yZEJhdGNoPiguLi5hcmdzOiAoVCB8IFRbXSlbXSkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvckFzc2VtYmxlcigpLnZpc2l0TWFueShzZWxlY3RBbmRGbGF0dGVuVmVjdG9yQ2hpbGRyZW4oUmVjb3JkQmF0Y2gsIGFyZ3MpKVswXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkgeyBzdXBlcigpOyB9XG5cbiAgICBwdWJsaWMgdmlzaXQ8VCBleHRlbmRzIFZlY3Rvcj4odmVjdG9yOiBUKTogdGhpcyB7XG4gICAgICAgIGlmICghRGF0YVR5cGUuaXNEaWN0aW9uYXJ5KHZlY3Rvci50eXBlKSkge1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBsZW5ndGgsIG51bGxDb3VudCB9ID0gdmVjdG9yO1xuICAgICAgICAgICAgaWYgKGxlbmd0aCA+IDIxNDc0ODM2NDcpIHtcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdDYW5ub3Qgd3JpdGUgYXJyYXlzIGxhcmdlciB0aGFuIDJeMzEgLSAxIGluIGxlbmd0aCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkQnVmZmVyLmNhbGwodGhpcywgbnVsbENvdW50IDw9IDBcbiAgICAgICAgICAgICAgICA/IG5ldyBVaW50OEFycmF5KDApIC8vIHBsYWNlaG9sZGVyIHZhbGlkaXR5IGJ1ZmZlclxuICAgICAgICAgICAgICAgIDogdHJ1bmNhdGVCaXRtYXAoZGF0YS5vZmZzZXQsIGxlbmd0aCwgZGF0YS5udWxsQml0bWFwKVxuICAgICAgICAgICAgKS5ub2Rlcy5wdXNoKG5ldyBGaWVsZE5vZGUobGVuZ3RoLCBudWxsQ291bnQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIudmlzaXQodmVjdG9yKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdmlzaXROdWxsPFQgZXh0ZW5kcyBOdWxsPihfbnVsbFY6IFZUeXBlPFQ+KSB7IHJldHVybiB0aGlzOyB9XG4gICAgcHVibGljIHZpc2l0RGljdGlvbmFyeTxUIGV4dGVuZHMgRGljdGlvbmFyeT4odmVjdG9yOiBWVHlwZTxUPikge1xuICAgICAgICAvLyBBc3NlbWJsZSB0aGUgaW5kaWNlcyBoZXJlLCBEaWN0aW9uYXJ5IGFzc2VtYmxlZCBzZXBhcmF0ZWx5LlxuICAgICAgICByZXR1cm4gdGhpcy52aXNpdCh2ZWN0b3IuaW5kaWNlcyk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBub2RlcygpIHsgcmV0dXJuIHRoaXMuX25vZGVzOyB9XG4gICAgcHVibGljIGdldCBidWZmZXJzKCkgeyByZXR1cm4gdGhpcy5fYnVmZmVyczsgfVxuICAgIHB1YmxpYyBnZXQgYnl0ZUxlbmd0aCgpIHsgcmV0dXJuIHRoaXMuX2J5dGVMZW5ndGg7IH1cbiAgICBwdWJsaWMgZ2V0IGJ1ZmZlclJlZ2lvbnMoKSB7IHJldHVybiB0aGlzLl9idWZmZXJSZWdpb25zOyB9XG5cbiAgICBwcm90ZWN0ZWQgX2J5dGVMZW5ndGggPSAwO1xuICAgIHByb3RlY3RlZCBfbm9kZXM6IEZpZWxkTm9kZVtdID0gW107XG4gICAgcHJvdGVjdGVkIF9idWZmZXJzOiBBcnJheUJ1ZmZlclZpZXdbXSA9IFtdO1xuICAgIHByb3RlY3RlZCBfYnVmZmVyUmVnaW9uczogQnVmZmVyUmVnaW9uW10gPSBbXTtcbn1cblxuLyoqIEBpZ25vcmUgKi9cbmZ1bmN0aW9uIGFkZEJ1ZmZlcih0aGlzOiBWZWN0b3JBc3NlbWJsZXIsIHZhbHVlczogQXJyYXlCdWZmZXJWaWV3KSB7XG4gICAgY29uc3QgYnl0ZUxlbmd0aCA9ICh2YWx1ZXMuYnl0ZUxlbmd0aCArIDcpICYgfjc7IC8vIFJvdW5kIHVwIHRvIGEgbXVsdGlwbGUgb2YgOFxuICAgIHRoaXMuYnVmZmVycy5wdXNoKHZhbHVlcyk7XG4gICAgdGhpcy5idWZmZXJSZWdpb25zLnB1c2gobmV3IEJ1ZmZlclJlZ2lvbih0aGlzLl9ieXRlTGVuZ3RoLCBieXRlTGVuZ3RoKSk7XG4gICAgdGhpcy5fYnl0ZUxlbmd0aCArPSBieXRlTGVuZ3RoO1xuICAgIHJldHVybiB0aGlzO1xufVxuXG4vKiogQGlnbm9yZSAqL1xuZnVuY3Rpb24gYXNzZW1ibGVVbmlvbjxUIGV4dGVuZHMgVW5pb24+KHRoaXM6IFZlY3RvckFzc2VtYmxlciwgdmVjdG9yOiBWVHlwZTxUPikge1xuICAgIGNvbnN0IHsgdHlwZSwgbGVuZ3RoLCB0eXBlSWRzLCB2YWx1ZU9mZnNldHMgfSA9IHZlY3RvcjtcbiAgICAvLyBBbGwgVW5pb24gVmVjdG9ycyBoYXZlIGEgdHlwZUlkcyBidWZmZXJcbiAgICBhZGRCdWZmZXIuY2FsbCh0aGlzLCB0eXBlSWRzKTtcbiAgICAvLyBJZiB0aGlzIGlzIGEgU3BhcnNlIFVuaW9uLCB0cmVhdCBpdCBsaWtlIGFsbCBvdGhlciBOZXN0ZWQgdHlwZXNcbiAgICBpZiAodHlwZS5tb2RlID09PSBVbmlvbk1vZGUuU3BhcnNlKSB7XG4gICAgICAgIHJldHVybiBhc3NlbWJsZU5lc3RlZFZlY3Rvci5jYWxsKHRoaXMsIHZlY3Rvcik7XG4gICAgfSBlbHNlIGlmICh0eXBlLm1vZGUgPT09IFVuaW9uTW9kZS5EZW5zZSkge1xuICAgICAgICAvLyBJZiB0aGlzIGlzIGEgRGVuc2UgVW5pb24sIGFkZCB0aGUgdmFsdWVPZmZzZXRzIGJ1ZmZlciBhbmQgcG90ZW50aWFsbHkgc2xpY2UgdGhlIGNoaWxkcmVuXG4gICAgICAgIGlmICh2ZWN0b3Iub2Zmc2V0IDw9IDApIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBWZWN0b3IgaGFzbid0IGJlZW4gc2xpY2VkLCB3cml0ZSB0aGUgZXhpc3RpbmcgdmFsdWVPZmZzZXRzXG4gICAgICAgICAgICBhZGRCdWZmZXIuY2FsbCh0aGlzLCB2YWx1ZU9mZnNldHMpO1xuICAgICAgICAgICAgLy8gV2UgY2FuIHRyZWF0IHRoaXMgbGlrZSBhbGwgb3RoZXIgTmVzdGVkIHR5cGVzXG4gICAgICAgICAgICByZXR1cm4gYXNzZW1ibGVOZXN0ZWRWZWN0b3IuY2FsbCh0aGlzLCB2ZWN0b3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQSBzbGljZWQgRGVuc2UgVW5pb24gaXMgYW4gdW5wbGVhc2FudCBjYXNlLiBCZWNhdXNlIHRoZSBvZmZzZXRzIGFyZSBkaWZmZXJlbnQgZm9yXG4gICAgICAgICAgICAvLyBlYWNoIGNoaWxkIHZlY3Rvciwgd2UgbmVlZCB0byBcInJlYmFzZVwiIHRoZSB2YWx1ZU9mZnNldHMgZm9yIGVhY2ggY2hpbGRcbiAgICAgICAgICAgIC8vIFVuaW9uIHR5cGVJZHMgYXJlIG5vdCBuZWNlc3NhcnkgMC1pbmRleGVkXG4gICAgICAgICAgICBjb25zdCBtYXhDaGlsZFR5cGVJZCA9IHR5cGVJZHMucmVkdWNlKCh4LCB5KSA9PiBNYXRoLm1heCh4LCB5KSwgdHlwZUlkc1swXSk7XG4gICAgICAgICAgICBjb25zdCBjaGlsZExlbmd0aHMgPSBuZXcgSW50MzJBcnJheShtYXhDaGlsZFR5cGVJZCArIDEpO1xuICAgICAgICAgICAgLy8gU2V0IGFsbCB0byAtMSB0byBpbmRpY2F0ZSB0aGF0IHdlIGhhdmVuJ3Qgb2JzZXJ2ZWQgYSBmaXJzdCBvY2N1cnJlbmNlIG9mIGEgcGFydGljdWxhciBjaGlsZCB5ZXRcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkT2Zmc2V0cyA9IG5ldyBJbnQzMkFycmF5KG1heENoaWxkVHlwZUlkICsgMSkuZmlsbCgtMSk7XG4gICAgICAgICAgICBjb25zdCBzaGlmdGVkT2Zmc2V0cyA9IG5ldyBJbnQzMkFycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbm9uLXplcm8gb2Zmc2V0LCB0aGVuIHRoZSB2YWx1ZSBvZmZzZXRzIGRvIG5vdCBzdGFydCBhdFxuICAgICAgICAgICAgLy8gemVyby4gV2UgbXVzdCBhKSBjcmVhdGUgYSBuZXcgb2Zmc2V0cyBhcnJheSB3aXRoIHNoaWZ0ZWQgb2Zmc2V0cyBhbmRcbiAgICAgICAgICAgIC8vIGIpIHNsaWNlIHRoZSB2YWx1ZXMgYXJyYXkgYWNjb3JkaW5nbHlcbiAgICAgICAgICAgIGNvbnN0IHVuc2hpZnRlZE9mZnNldHMgPSByZWJhc2VWYWx1ZU9mZnNldHMoLXZhbHVlT2Zmc2V0c1swXSwgbGVuZ3RoLCB2YWx1ZU9mZnNldHMpO1xuICAgICAgICAgICAgZm9yIChsZXQgdHlwZUlkLCBzaGlmdCwgaW5kZXggPSAtMTsgKytpbmRleCA8IGxlbmd0aDspIHtcbiAgICAgICAgICAgICAgICBpZiAoKHNoaWZ0ID0gY2hpbGRPZmZzZXRzW3R5cGVJZCA9IHR5cGVJZHNbaW5kZXhdXSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoaWZ0ID0gY2hpbGRPZmZzZXRzW3R5cGVJZF0gPSB1bnNoaWZ0ZWRPZmZzZXRzW3R5cGVJZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNoaWZ0ZWRPZmZzZXRzW2luZGV4XSA9IHVuc2hpZnRlZE9mZnNldHNbaW5kZXhdIC0gc2hpZnQ7XG4gICAgICAgICAgICAgICAgKytjaGlsZExlbmd0aHNbdHlwZUlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZEJ1ZmZlci5jYWxsKHRoaXMsIHNoaWZ0ZWRPZmZzZXRzKTtcbiAgICAgICAgICAgIC8vIFNsaWNlIGFuZCB2aXNpdCBjaGlsZHJlbiBhY2NvcmRpbmdseVxuICAgICAgICAgICAgZm9yIChsZXQgY2hpbGQ6IFZlY3RvciB8IG51bGwsIGNoaWxkSW5kZXggPSAtMSwgbnVtQ2hpbGRyZW4gPSB0eXBlLmNoaWxkcmVuLmxlbmd0aDsgKytjaGlsZEluZGV4IDwgbnVtQ2hpbGRyZW47KSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkID0gdmVjdG9yLmdldENoaWxkQXQoY2hpbGRJbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZUlkID0gdHlwZS50eXBlSWRzW2NoaWxkSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZExlbmd0aCA9IE1hdGgubWluKGxlbmd0aCwgY2hpbGRMZW5ndGhzW3R5cGVJZF0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpc2l0KGNoaWxkLnNsaWNlKGNoaWxkT2Zmc2V0c1t0eXBlSWRdLCBjaGlsZExlbmd0aCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuLyoqIEBpZ25vcmUgKi9cbmZ1bmN0aW9uIGFzc2VtYmxlQm9vbFZlY3RvcjxUIGV4dGVuZHMgQm9vbD4odGhpczogVmVjdG9yQXNzZW1ibGVyLCB2ZWN0b3I6IFZUeXBlPFQ+KSB7XG4gICAgLy8gQm9vbCB2ZWN0b3IgaXMgYSBzcGVjaWFsIGNhc2Ugb2YgRmxhdFZlY3RvciwgYXMgaXRzIGRhdGEgYnVmZmVyIG5lZWRzIHRvIHN0YXkgcGFja2VkXG4gICAgbGV0IHZhbHVlczogVWludDhBcnJheTtcbiAgICBpZiAodmVjdG9yLm51bGxDb3VudCA+PSB2ZWN0b3IubGVuZ3RoKSB7XG4gICAgICAgIC8vIElmIGFsbCB2YWx1ZXMgYXJlIG51bGwsIGp1c3QgaW5zZXJ0IGEgcGxhY2Vob2xkZXIgZW1wdHkgZGF0YSBidWZmZXIgKGZhc3Rlc3QgcGF0aClcbiAgICAgICAgcmV0dXJuIGFkZEJ1ZmZlci5jYWxsKHRoaXMsIG5ldyBVaW50OEFycmF5KDApKTtcbiAgICB9IGVsc2UgaWYgKCh2YWx1ZXMgPSB2ZWN0b3IudmFsdWVzKSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgLy8gSWYgdmFsdWVzIGlzIGFscmVhZHkgYSBVaW50OEFycmF5LCBzbGljZSB0aGUgYml0bWFwIChmYXN0IHBhdGgpXG4gICAgICAgIHJldHVybiBhZGRCdWZmZXIuY2FsbCh0aGlzLCB0cnVuY2F0ZUJpdG1hcCh2ZWN0b3Iub2Zmc2V0LCB2ZWN0b3IubGVuZ3RoLCB2YWx1ZXMpKTtcbiAgICB9XG4gICAgLy8gT3RoZXJ3aXNlIGlmIHRoZSB1bmRlcmx5aW5nIGRhdGEgKmlzbid0KiBhIFVpbnQ4QXJyYXksIGVudW1lcmF0ZSB0aGVcbiAgICAvLyB2YWx1ZXMgYXMgYm9vbHMgYW5kIHJlLXBhY2sgdGhlbSBpbnRvIGEgVWludDhBcnJheS4gVGhpcyBjb2RlIGlzbid0XG4gICAgLy8gcmVhY2hhYmxlIHVubGVzcyB5b3UncmUgdHJ5aW5nIHRvIG1hbmlwdWxhdGUgdGhlIERhdGEgaW50ZXJuYWxzLFxuICAgIC8vIHdlIHdlJ3JlIG9ubHkgZG9pbmcgdGhpcyBmb3Igc2FmZXR5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIGFkZEJ1ZmZlci5jYWxsKHRoaXMsIHBhY2tCb29scyh2ZWN0b3IpKTtcbn1cblxuLyoqIEBpZ25vcmUgKi9cbmZ1bmN0aW9uIGFzc2VtYmxlRmxhdFZlY3RvcjxUIGV4dGVuZHMgSW50IHwgRmxvYXQgfCBGaXhlZFNpemVCaW5hcnkgfCBEYXRlXyB8IFRpbWVzdGFtcCB8IFRpbWUgfCBEZWNpbWFsIHwgSW50ZXJ2YWw+KHRoaXM6IFZlY3RvckFzc2VtYmxlciwgdmVjdG9yOiBWVHlwZTxUPikge1xuICAgIHJldHVybiBhZGRCdWZmZXIuY2FsbCh0aGlzLCB2ZWN0b3IudmFsdWVzLnN1YmFycmF5KDAsIHZlY3Rvci5sZW5ndGggKiB2ZWN0b3Iuc3RyaWRlKSk7XG59XG5cbi8qKiBAaWdub3JlICovXG5mdW5jdGlvbiBhc3NlbWJsZUZsYXRMaXN0VmVjdG9yPFQgZXh0ZW5kcyBVdGY4IHwgQmluYXJ5Pih0aGlzOiBWZWN0b3JBc3NlbWJsZXIsIHZlY3RvcjogVlR5cGU8VD4pIHtcbiAgICBjb25zdCB7IGxlbmd0aCwgdmFsdWVzLCB2YWx1ZU9mZnNldHMgfSA9IHZlY3RvcjtcbiAgICBjb25zdCBmaXJzdE9mZnNldCA9IHZhbHVlT2Zmc2V0c1swXTtcbiAgICBjb25zdCBsYXN0T2Zmc2V0ID0gdmFsdWVPZmZzZXRzW2xlbmd0aF07XG4gICAgY29uc3QgYnl0ZUxlbmd0aCA9IE1hdGgubWluKGxhc3RPZmZzZXQgLSBmaXJzdE9mZnNldCwgdmFsdWVzLmJ5dGVMZW5ndGggLSBmaXJzdE9mZnNldCk7XG4gICAgLy8gUHVzaCBpbiB0aGUgb3JkZXIgRmxhdExpc3QgdHlwZXMgcmVhZCB0aGVpciBidWZmZXJzXG4gICAgYWRkQnVmZmVyLmNhbGwodGhpcywgcmViYXNlVmFsdWVPZmZzZXRzKC12YWx1ZU9mZnNldHNbMF0sIGxlbmd0aCwgdmFsdWVPZmZzZXRzKSk7IC8vIHZhbHVlT2Zmc2V0cyBidWZmZXIgZmlyc3RcbiAgICBhZGRCdWZmZXIuY2FsbCh0aGlzLCB2YWx1ZXMuc3ViYXJyYXkoZmlyc3RPZmZzZXQsIGZpcnN0T2Zmc2V0ICsgYnl0ZUxlbmd0aCkpOyAvLyBzbGljZWQgdmFsdWVzIGJ1ZmZlciBzZWNvbmRcbiAgICByZXR1cm4gdGhpcztcbn1cblxuLyoqIEBpZ25vcmUgKi9cbmZ1bmN0aW9uIGFzc2VtYmxlTGlzdFZlY3RvcjxUIGV4dGVuZHMgTGlzdCB8IEZpeGVkU2l6ZUxpc3Q+KHRoaXM6IFZlY3RvckFzc2VtYmxlciwgdmVjdG9yOiBWVHlwZTxUPikge1xuICAgIGNvbnN0IHsgbGVuZ3RoLCB2YWx1ZU9mZnNldHMgfSA9IHZlY3RvcjtcbiAgICAvLyBJZiB3ZSBoYXZlIHZhbHVlT2Zmc2V0cyAoTGlzdFZlY3RvciksIHB1c2ggdGhhdCBidWZmZXIgZmlyc3RcbiAgICBpZiAodmFsdWVPZmZzZXRzKSB7XG4gICAgICAgIGFkZEJ1ZmZlci5jYWxsKHRoaXMsIHJlYmFzZVZhbHVlT2Zmc2V0cyh2YWx1ZU9mZnNldHNbMF0sIGxlbmd0aCwgdmFsdWVPZmZzZXRzKSk7XG4gICAgfVxuICAgIC8vIFRoZW4gaW5zZXJ0IHRoZSBMaXN0J3MgdmFsdWVzIGNoaWxkXG4gICAgcmV0dXJuIHRoaXMudmlzaXQodmVjdG9yLmdldENoaWxkQXQoMCkhKTtcbn1cblxuLyoqIEBpZ25vcmUgKi9cbmZ1bmN0aW9uIGFzc2VtYmxlTmVzdGVkVmVjdG9yPFQgZXh0ZW5kcyBTdHJ1Y3QgfCBNYXBfIHwgVW5pb24+KHRoaXM6IFZlY3RvckFzc2VtYmxlciwgdmVjdG9yOiBWVHlwZTxUPikge1xuICAgIHJldHVybiB0aGlzLnZpc2l0TWFueSh2ZWN0b3IudHlwZS5jaGlsZHJlbi5tYXAoKF8sIGkpID0+IHZlY3Rvci5nZXRDaGlsZEF0KGkpISkuZmlsdGVyKEJvb2xlYW4pKVswXTtcbn1cblxuVmVjdG9yQXNzZW1ibGVyLnByb3RvdHlwZS52aXNpdEJvb2wgICAgICAgICAgICA9ICAgICBhc3NlbWJsZUJvb2xWZWN0b3I7XG5WZWN0b3JBc3NlbWJsZXIucHJvdG90eXBlLnZpc2l0SW50ICAgICAgICAgICAgID0gICAgIGFzc2VtYmxlRmxhdFZlY3RvcjtcblZlY3RvckFzc2VtYmxlci5wcm90b3R5cGUudmlzaXRGbG9hdCAgICAgICAgICAgPSAgICAgYXNzZW1ibGVGbGF0VmVjdG9yO1xuVmVjdG9yQXNzZW1ibGVyLnByb3RvdHlwZS52aXNpdFV0ZjggICAgICAgICAgICA9IGFzc2VtYmxlRmxhdExpc3RWZWN0b3I7XG5WZWN0b3JBc3NlbWJsZXIucHJvdG90eXBlLnZpc2l0QmluYXJ5ICAgICAgICAgID0gYXNzZW1ibGVGbGF0TGlzdFZlY3RvcjtcblZlY3RvckFzc2VtYmxlci5wcm90b3R5cGUudmlzaXRGaXhlZFNpemVCaW5hcnkgPSAgICAgYXNzZW1ibGVGbGF0VmVjdG9yO1xuVmVjdG9yQXNzZW1ibGVyLnByb3RvdHlwZS52aXNpdERhdGUgICAgICAgICAgICA9ICAgICBhc3NlbWJsZUZsYXRWZWN0b3I7XG5WZWN0b3JBc3NlbWJsZXIucHJvdG90eXBlLnZpc2l0VGltZXN0YW1wICAgICAgID0gICAgIGFzc2VtYmxlRmxhdFZlY3RvcjtcblZlY3RvckFzc2VtYmxlci5wcm90b3R5cGUudmlzaXRUaW1lICAgICAgICAgICAgPSAgICAgYXNzZW1ibGVGbGF0VmVjdG9yO1xuVmVjdG9yQXNzZW1ibGVyLnByb3RvdHlwZS52aXNpdERlY2ltYWwgICAgICAgICA9ICAgICBhc3NlbWJsZUZsYXRWZWN0b3I7XG5WZWN0b3JBc3NlbWJsZXIucHJvdG90eXBlLnZpc2l0TGlzdCAgICAgICAgICAgID0gICAgIGFzc2VtYmxlTGlzdFZlY3RvcjtcblZlY3RvckFzc2VtYmxlci5wcm90b3R5cGUudmlzaXRTdHJ1Y3QgICAgICAgICAgPSAgIGFzc2VtYmxlTmVzdGVkVmVjdG9yO1xuVmVjdG9yQXNzZW1ibGVyLnByb3RvdHlwZS52aXNpdFVuaW9uICAgICAgICAgICA9ICAgICAgICAgIGFzc2VtYmxlVW5pb247XG5WZWN0b3JBc3NlbWJsZXIucHJvdG90eXBlLnZpc2l0SW50ZXJ2YWwgICAgICAgID0gICAgIGFzc2VtYmxlRmxhdFZlY3RvcjtcblZlY3RvckFzc2VtYmxlci5wcm90b3R5cGUudmlzaXRGaXhlZFNpemVMaXN0ICAgPSAgICAgYXNzZW1ibGVMaXN0VmVjdG9yO1xuVmVjdG9yQXNzZW1ibGVyLnByb3RvdHlwZS52aXNpdE1hcCAgICAgICAgICAgICA9ICAgYXNzZW1ibGVOZXN0ZWRWZWN0b3I7XG4iXX0=
