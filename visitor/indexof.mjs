// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Visitor } from '../visitor';
import { getBool, iterateBits } from '../util/bit';
export class IndexOfVisitor extends Visitor {
}
function nullIndexOf(vector, searchElement, fromIndex = -1) {
    // if you're looking for nulls and the vector isn't empty, we've got 'em!
    return searchElement === null && vector.length > 0 ? fromIndex : -1;
}
function indexOfNull(vector, fromIndex) {
    const { nullBitmap } = vector;
    if (!nullBitmap || vector.nullCount <= 0) {
        return -1;
    }
    let i = 0;
    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {
        if (!isValid) {
            return i;
        }
        ++i;
    }
    return -1;
}
function valueIndexOf(vector, searchElement, fromIndex) {
    if (searchElement === undefined) {
        return -1;
    }
    if (searchElement === null) {
        return indexOfNull(vector, fromIndex);
    }
    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {
        if (vector.get(i) === searchElement) {
            return i;
        }
    }
    return -1;
}
function dateIndexOf(vector, searchElement, fromIndex) {
    if (searchElement === undefined) {
        return -1;
    }
    if (searchElement === null) {
        return indexOfNull(vector, fromIndex);
    }
    const valueOfDate = searchElement.valueOf();
    for (let d, i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {
        if ((d = vector.get(i)) && d.valueOf() === valueOfDate) {
            return i;
        }
    }
    return -1;
}
function dictionaryIndexOf(vector, searchElement, fromIndex) {
    if (searchElement === undefined) {
        return -1;
    }
    if (searchElement === null) {
        return indexOfNull(vector, fromIndex);
    }
    const { dictionary, indices } = vector;
    // First find the dictionary key for the desired value...
    const key = dictionary.indexOf(searchElement);
    // ... then find the first occurence of that key in indices
    return key === -1 ? -1 : indices.indexOf(key, fromIndex);
}
function arrayIndexOf(vector, searchElement, fromIndex) {
    if (searchElement === undefined) {
        return -1;
    }
    if (searchElement === null) {
        return indexOfNull(vector, fromIndex);
    }
    searching: for (let x = null, j = 0, i = (fromIndex || 0) - 1, n = vector.length, k = searchElement.length; ++i < n;) {
        if ((x = vector.get(i)) && (j = x.length) === k) {
            while (--j > -1) {
                if (x[j] !== searchElement[j]) {
                    continue searching;
                }
            }
            return i;
        }
    }
    return -1;
}
function listIndexOf(vector, searchElement, fromIndex) {
    if (searchElement === undefined) {
        return -1;
    }
    if (searchElement === null) {
        return indexOfNull(vector, fromIndex);
    }
    const getSearchElement = (Array.isArray(searchElement) || ArrayBuffer.isView(searchElement))
        ? (i) => searchElement[i]
        : (i) => searchElement.get(i);
    searching: for (let x = null, j = 0, i = (fromIndex || 0) - 1, n = vector.length, k = searchElement.length; ++i < n;) {
        if ((x = vector.get(i)) && (j = x.length) === k) {
            while (--j > -1) {
                if (x.get(j) !== getSearchElement(j)) {
                    continue searching;
                }
            }
            return i;
        }
    }
    return -1;
}
function indexOfNested(vector, searchElement, fromIndex) {
    if (searchElement === undefined) {
        return -1;
    }
    if (searchElement === null) {
        return indexOfNull(vector, fromIndex);
    }
    searching: for (let x = null, j = 0, i = (fromIndex || 0) - 1, n = vector.length, k = searchElement.length; ++i < n;) {
        if ((x = vector.get(i)) && (j = x.length) === k) {
            while (--j > -1) {
                if (x[j] !== searchElement[j]) {
                    continue searching;
                }
            }
            return i;
        }
    }
    return -1;
}
IndexOfVisitor.prototype.visitNull = nullIndexOf;
IndexOfVisitor.prototype.visitBool = valueIndexOf;
IndexOfVisitor.prototype.visitInt = valueIndexOf;
IndexOfVisitor.prototype.visitInt8 = valueIndexOf;
IndexOfVisitor.prototype.visitInt16 = valueIndexOf;
IndexOfVisitor.prototype.visitInt32 = valueIndexOf;
IndexOfVisitor.prototype.visitInt64 = arrayIndexOf;
IndexOfVisitor.prototype.visitUint8 = valueIndexOf;
IndexOfVisitor.prototype.visitUint16 = valueIndexOf;
IndexOfVisitor.prototype.visitUint32 = valueIndexOf;
IndexOfVisitor.prototype.visitUint64 = arrayIndexOf;
IndexOfVisitor.prototype.visitFloat = valueIndexOf;
IndexOfVisitor.prototype.visitFloat16 = valueIndexOf;
IndexOfVisitor.prototype.visitFloat32 = valueIndexOf;
IndexOfVisitor.prototype.visitFloat64 = valueIndexOf;
IndexOfVisitor.prototype.visitUtf8 = valueIndexOf;
IndexOfVisitor.prototype.visitBinary = arrayIndexOf;
IndexOfVisitor.prototype.visitFixedSizeBinary = arrayIndexOf;
IndexOfVisitor.prototype.visitDate = dateIndexOf;
IndexOfVisitor.prototype.visitDateDay = dateIndexOf;
IndexOfVisitor.prototype.visitDateMillisecond = dateIndexOf;
IndexOfVisitor.prototype.visitTimestamp = valueIndexOf;
IndexOfVisitor.prototype.visitTimestampSecond = valueIndexOf;
IndexOfVisitor.prototype.visitTimestampMillisecond = valueIndexOf;
IndexOfVisitor.prototype.visitTimestampMicrosecond = valueIndexOf;
IndexOfVisitor.prototype.visitTimestampNanosecond = valueIndexOf;
IndexOfVisitor.prototype.visitTime = valueIndexOf;
IndexOfVisitor.prototype.visitTimeSecond = valueIndexOf;
IndexOfVisitor.prototype.visitTimeMillisecond = valueIndexOf;
IndexOfVisitor.prototype.visitTimeMicrosecond = valueIndexOf;
IndexOfVisitor.prototype.visitTimeNanosecond = valueIndexOf;
IndexOfVisitor.prototype.visitDecimal = arrayIndexOf;
IndexOfVisitor.prototype.visitList = listIndexOf;
IndexOfVisitor.prototype.visitStruct = indexOfNested;
IndexOfVisitor.prototype.visitUnion = valueIndexOf;
IndexOfVisitor.prototype.visitDenseUnion = valueIndexOf;
IndexOfVisitor.prototype.visitSparseUnion = valueIndexOf;
IndexOfVisitor.prototype.visitDictionary = dictionaryIndexOf;
IndexOfVisitor.prototype.visitInterval = valueIndexOf;
IndexOfVisitor.prototype.visitIntervalDayTime = valueIndexOf;
IndexOfVisitor.prototype.visitIntervalYearMonth = valueIndexOf;
IndexOfVisitor.prototype.visitFixedSizeList = listIndexOf;
IndexOfVisitor.prototype.visitMap = indexOfNested;
export const instance = new IndexOfVisitor();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
