"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const visitor_1 = require("../visitor");
class TypeComparator extends visitor_1.Visitor {
    compareSchemas(schema, other) {
        return (schema === other) || (other instanceof schema.constructor &&
            exports.instance.compareFields(schema.fields, other.fields));
    }
    compareFields(fields, others) {
        return (fields === others) || (Array.isArray(fields) &&
            Array.isArray(others) &&
            fields.length === others.length &&
            fields.every((f, i) => exports.instance.compareField(f, others[i])));
    }
    compareField(field, other) {
        return (field === other) || (other instanceof field.constructor &&
            field.name === other.name &&
            field.nullable === other.nullable &&
            exports.instance.visit(field.type, other.type));
    }
}
exports.TypeComparator = TypeComparator;
function compareConstructor(type, other) {
    return other instanceof type.constructor;
}
function compareAny(type, other) {
    return (type === other) || compareConstructor(type, other);
}
function compareInt(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.bitWidth === other.bitWidth &&
        type.isSigned === other.isSigned);
}
function compareFloat(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.precision === other.precision);
}
function compareFixedSizeBinary(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.byteWidth === other.byteWidth);
}
function compareDate(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.unit === other.unit);
}
function compareTimestamp(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.unit === other.unit &&
        type.timezone === other.timezone);
}
function compareTime(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.unit === other.unit &&
        type.bitWidth === other.bitWidth);
}
function compareList(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.children.length === other.children.length &&
        exports.instance.compareFields(type.children, other.children));
}
function compareStruct(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.children.length === other.children.length &&
        exports.instance.compareFields(type.children, other.children));
}
function compareUnion(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.mode === other.mode &&
        type.typeIds.every((x, i) => x === other.typeIds[i]) &&
        exports.instance.compareFields(type.children, other.children));
}
function compareDictionary(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.id === other.id &&
        type.isOrdered === other.isOrdered &&
        exports.instance.visit(type.indices, other.indices) &&
        exports.instance.visit(type.dictionary, other.dictionary));
}
function compareInterval(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.unit === other.unit);
}
function compareFixedSizeList(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.listSize === other.listSize &&
        type.children.length === other.children.length &&
        exports.instance.compareFields(type.children, other.children));
}
function compareMap(type, other) {
    return (type === other) || (compareConstructor(type, other) &&
        type.keysSorted === other.keysSorted &&
        type.children.length === other.children.length &&
        exports.instance.compareFields(type.children, other.children));
}
TypeComparator.prototype.visitNull = compareAny;
TypeComparator.prototype.visitBool = compareAny;
TypeComparator.prototype.visitInt = compareInt;
TypeComparator.prototype.visitInt8 = compareInt;
TypeComparator.prototype.visitInt16 = compareInt;
TypeComparator.prototype.visitInt32 = compareInt;
TypeComparator.prototype.visitInt64 = compareInt;
TypeComparator.prototype.visitUint8 = compareInt;
TypeComparator.prototype.visitUint16 = compareInt;
TypeComparator.prototype.visitUint32 = compareInt;
TypeComparator.prototype.visitUint64 = compareInt;
TypeComparator.prototype.visitFloat = compareFloat;
TypeComparator.prototype.visitFloat16 = compareFloat;
TypeComparator.prototype.visitFloat32 = compareFloat;
TypeComparator.prototype.visitFloat64 = compareFloat;
TypeComparator.prototype.visitUtf8 = compareAny;
TypeComparator.prototype.visitBinary = compareAny;
TypeComparator.prototype.visitFixedSizeBinary = compareFixedSizeBinary;
TypeComparator.prototype.visitDate = compareDate;
TypeComparator.prototype.visitDateDay = compareDate;
TypeComparator.prototype.visitDateMillisecond = compareDate;
TypeComparator.prototype.visitTimestamp = compareTimestamp;
TypeComparator.prototype.visitTimestampSecond = compareTimestamp;
TypeComparator.prototype.visitTimestampMillisecond = compareTimestamp;
TypeComparator.prototype.visitTimestampMicrosecond = compareTimestamp;
TypeComparator.prototype.visitTimestampNanosecond = compareTimestamp;
TypeComparator.prototype.visitTime = compareTime;
TypeComparator.prototype.visitTimeSecond = compareTime;
TypeComparator.prototype.visitTimeMillisecond = compareTime;
TypeComparator.prototype.visitTimeMicrosecond = compareTime;
TypeComparator.prototype.visitTimeNanosecond = compareTime;
TypeComparator.prototype.visitDecimal = compareAny;
TypeComparator.prototype.visitList = compareList;
TypeComparator.prototype.visitStruct = compareStruct;
TypeComparator.prototype.visitUnion = compareUnion;
TypeComparator.prototype.visitDenseUnion = compareUnion;
TypeComparator.prototype.visitSparseUnion = compareUnion;
TypeComparator.prototype.visitDictionary = compareDictionary;
TypeComparator.prototype.visitInterval = compareInterval;
TypeComparator.prototype.visitIntervalDayTime = compareInterval;
TypeComparator.prototype.visitIntervalYearMonth = compareInterval;
TypeComparator.prototype.visitFixedSizeList = compareFixedSizeList;
TypeComparator.prototype.visitMap = compareMap;
/** @ignore */
exports.instance = new TypeComparator();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpc2l0b3IvdHlwZWNvbXBhcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjs7QUFHckIsd0NBQXFDO0FBZ0VyQyxNQUFhLGNBQWUsU0FBUSxpQkFBTztJQUN2QyxjQUFjLENBQXdDLE1BQWlCLEVBQUUsS0FBcUI7UUFDMUYsT0FBTyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsSUFBSSxDQUN6QixLQUFLLFlBQVksTUFBTSxDQUFDLFdBQVc7WUFDbkMsZ0JBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQ3RELENBQUM7SUFDTixDQUFDO0lBQ0QsYUFBYSxDQUF3QyxNQUEyQixFQUFFLE1BQXVCO1FBQ3JHLE9BQU8sQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLElBQUksQ0FDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDckIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDckIsTUFBTSxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsTUFBTTtZQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsZ0JBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzlELENBQUM7SUFDTixDQUFDO0lBQ0QsWUFBWSxDQUEyQixLQUFlLEVBQUUsS0FBb0I7UUFDeEUsT0FBTyxDQUFDLEtBQUssS0FB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QztBQUM1RSxjQUFjLENBQUMsU0FBUyxDQUFDLGdCQUFnQixHQUFzQixZQUFZLENBQUM7QUFDNUUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQWtCLGlCQUFpQixDQUFDO0FBQzVFLGNBQWMsQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFzQixlQUFlLENBQUM7QUFDNUUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsR0FBZSxlQUFlLENBQUM7QUFDNUUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsR0FBYSxlQUFlLENBQUM7QUFDNUUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsR0FBWSxvQkFBb0IsQ0FBQztBQUM1RSxjQUFjLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBZ0MsVUFBVSxDQUFDO0FBRTVFLGNBQWM7QUFDRCxRQUFBLFFBQVEsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDIiwiZmlsZSI6InZpc2l0b3IvdHlwZWNvbXBhcmF0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgVmlzaXRvciB9IGZyb20gJy4uL3Zpc2l0b3InO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBTY2hlbWEsIEZpZWxkIH0gZnJvbSAnLi4vc2NoZW1hJztcbmltcG9ydCB7XG4gICAgRGF0YVR5cGUsIERpY3Rpb25hcnksXG4gICAgQm9vbCwgTnVsbCwgVXRmOCwgQmluYXJ5LCBEZWNpbWFsLCBGaXhlZFNpemVCaW5hcnksIExpc3QsIEZpeGVkU2l6ZUxpc3QsIE1hcF8sIFN0cnVjdCxcbiAgICBGbG9hdCwgRmxvYXQxNiwgRmxvYXQzMiwgRmxvYXQ2NCxcbiAgICBJbnQsIFVpbnQ4LCBVaW50MTYsIFVpbnQzMiwgVWludDY0LCBJbnQ4LCBJbnQxNiwgSW50MzIsIEludDY0LFxuICAgIERhdGVfLCBEYXRlRGF5LCBEYXRlTWlsbGlzZWNvbmQsXG4gICAgSW50ZXJ2YWwsIEludGVydmFsRGF5VGltZSwgSW50ZXJ2YWxZZWFyTW9udGgsXG4gICAgVGltZSwgVGltZVNlY29uZCwgVGltZU1pbGxpc2Vjb25kLCBUaW1lTWljcm9zZWNvbmQsIFRpbWVOYW5vc2Vjb25kLFxuICAgIFRpbWVzdGFtcCwgVGltZXN0YW1wU2Vjb25kLCBUaW1lc3RhbXBNaWxsaXNlY29uZCwgVGltZXN0YW1wTWljcm9zZWNvbmQsIFRpbWVzdGFtcE5hbm9zZWNvbmQsXG4gICAgVW5pb24sIERlbnNlVW5pb24sIFNwYXJzZVVuaW9uLFxufSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGludGVyZmFjZSBUeXBlQ29tcGFyYXRvciBleHRlbmRzIFZpc2l0b3Ige1xuICAgIHZpc2l0PFQgZXh0ZW5kcyBEYXRhVHlwZT4odHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0TWFueTxUIGV4dGVuZHMgRGF0YVR5cGU+KG5vZGVzOiBUW10sIG90aGVycz86IERhdGFUeXBlW10gfCBudWxsKTogYm9vbGVhbltdO1xuICAgIGdldFZpc2l0Rm48VCBleHRlbmRzIERhdGFUeXBlPihub2RlOiBWZWN0b3I8VD4gfCAgRGF0YTxUPiB8IFQpOiAob3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpID0+IG90aGVyIGlzIFQ7XG4gICAgdmlzaXROdWxsICAgICAgICAgICAgICAgICA8VCBleHRlbmRzIE51bGw+ICAgICAgICAgICAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0Qm9vbCAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBCb29sPiAgICAgICAgICAgICAgICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdEludCAgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgSW50PiAgICAgICAgICAgICAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRJbnQ4ICAgICAgICAgICAgICAgICA8VCBleHRlbmRzIEludDg+ICAgICAgICAgICAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0SW50MTYgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBJbnQxNj4gICAgICAgICAgICAgICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdEludDMyICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgSW50MzI+ICAgICAgICAgICAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRJbnQ2NCAgICAgICAgICAgICAgICA8VCBleHRlbmRzIEludDY0PiAgICAgICAgICAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0VWludDggICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBVaW50OD4gICAgICAgICAgICAgICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdFVpbnQxNiAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgVWludDE2PiAgICAgICAgICAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRVaW50MzIgICAgICAgICAgICAgICA8VCBleHRlbmRzIFVpbnQzMj4gICAgICAgICAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0VWludDY0ICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBVaW50NjQ+ICAgICAgICAgICAgICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdEZsb2F0ICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRmxvYXQ+ICAgICAgICAgICAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRGbG9hdDE2ICAgICAgICAgICAgICA8VCBleHRlbmRzIEZsb2F0MTY+ICAgICAgICAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0RmxvYXQzMiAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBGbG9hdDMyPiAgICAgICAgICAgICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdEZsb2F0NjQgICAgICAgICAgICAgIDxUIGV4dGVuZHMgRmxvYXQ2ND4gICAgICAgICAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRVdGY4ICAgICAgICAgICAgICAgICA8VCBleHRlbmRzIFV0Zjg+ICAgICAgICAgICAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0QmluYXJ5ICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBCaW5hcnk+ICAgICAgICAgICAgICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdEZpeGVkU2l6ZUJpbmFyeSAgICAgIDxUIGV4dGVuZHMgRml4ZWRTaXplQmluYXJ5PiAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXREYXRlICAgICAgICAgICAgICAgICA8VCBleHRlbmRzIERhdGVfPiAgICAgICAgICAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0RGF0ZURheSAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBEYXRlRGF5PiAgICAgICAgICAgICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdERhdGVNaWxsaXNlY29uZCAgICAgIDxUIGV4dGVuZHMgRGF0ZU1pbGxpc2Vjb25kPiAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRUaW1lc3RhbXAgICAgICAgICAgICA8VCBleHRlbmRzIFRpbWVzdGFtcD4gICAgICAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0VGltZXN0YW1wU2Vjb25kICAgICAgPFQgZXh0ZW5kcyBUaW1lc3RhbXBTZWNvbmQ+ICAgICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdFRpbWVzdGFtcE1pbGxpc2Vjb25kIDxUIGV4dGVuZHMgVGltZXN0YW1wTWlsbGlzZWNvbmQ+ICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRUaW1lc3RhbXBNaWNyb3NlY29uZCA8VCBleHRlbmRzIFRpbWVzdGFtcE1pY3Jvc2Vjb25kPiAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0VGltZXN0YW1wTmFub3NlY29uZCAgPFQgZXh0ZW5kcyBUaW1lc3RhbXBOYW5vc2Vjb25kPiAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdFRpbWUgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgVGltZT4gICAgICAgICAgICAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRUaW1lU2Vjb25kICAgICAgICAgICA8VCBleHRlbmRzIFRpbWVTZWNvbmQ+ICAgICAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0VGltZU1pbGxpc2Vjb25kICAgICAgPFQgZXh0ZW5kcyBUaW1lTWlsbGlzZWNvbmQ+ICAgICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdFRpbWVNaWNyb3NlY29uZCAgICAgIDxUIGV4dGVuZHMgVGltZU1pY3Jvc2Vjb25kPiAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRUaW1lTmFub3NlY29uZCAgICAgICA8VCBleHRlbmRzIFRpbWVOYW5vc2Vjb25kPiAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0RGVjaW1hbCAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBEZWNpbWFsPiAgICAgICAgICAgICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdExpc3QgICAgICAgICAgICAgICAgIDxUIGV4dGVuZHMgTGlzdD4gICAgICAgICAgICAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRTdHJ1Y3QgICAgICAgICAgICAgICA8VCBleHRlbmRzIFN0cnVjdD4gICAgICAgICAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0VW5pb24gICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBVbmlvbj4gICAgICAgICAgICAgICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdERlbnNlVW5pb24gICAgICAgICAgIDxUIGV4dGVuZHMgRGVuc2VVbmlvbj4gICAgICAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRTcGFyc2VVbmlvbiAgICAgICAgICA8VCBleHRlbmRzIFNwYXJzZVVuaW9uPiAgICAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0RGljdGlvbmFyeSAgICAgICAgICAgPFQgZXh0ZW5kcyBEaWN0aW9uYXJ5PiAgICAgICAgICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdEludGVydmFsICAgICAgICAgICAgIDxUIGV4dGVuZHMgSW50ZXJ2YWw+ICAgICAgICAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRJbnRlcnZhbERheVRpbWUgICAgICA8VCBleHRlbmRzIEludGVydmFsRGF5VGltZT4gICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xuICAgIHZpc2l0SW50ZXJ2YWxZZWFyTW9udGggICAgPFQgZXh0ZW5kcyBJbnRlcnZhbFllYXJNb250aD4gICAgKHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVDtcbiAgICB2aXNpdEZpeGVkU2l6ZUxpc3QgICAgICAgIDxUIGV4dGVuZHMgRml4ZWRTaXplTGlzdD4gICAgICAgICh0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQ7XG4gICAgdmlzaXRNYXAgICAgICAgICAgICAgICAgICA8VCBleHRlbmRzIE1hcF8+ICAgICAgICAgICAgICAgICAodHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUO1xufVxuXG5leHBvcnQgY2xhc3MgVHlwZUNvbXBhcmF0b3IgZXh0ZW5kcyBWaXNpdG9yIHtcbiAgICBjb21wYXJlU2NoZW1hczxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9PihzY2hlbWE6IFNjaGVtYTxUPiwgb3RoZXI/OiBTY2hlbWEgfCBudWxsKTogb3RoZXIgaXMgU2NoZW1hPFQ+IHtcbiAgICAgICAgcmV0dXJuIChzY2hlbWEgPT09IG90aGVyKSB8fCAoXG4gICAgICAgICAgICBvdGhlciBpbnN0YW5jZW9mIHNjaGVtYS5jb25zdHJ1Y3RvciAmJlxuICAgICAgICAgICAgaW5zdGFuY2UuY29tcGFyZUZpZWxkcyhzY2hlbWEuZmllbGRzLCBvdGhlci5maWVsZHMpXG4gICAgICAgICk7XG4gICAgfVxuICAgIGNvbXBhcmVGaWVsZHM8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfT4oZmllbGRzOiBGaWVsZDxUW2tleW9mIFRdPltdLCBvdGhlcnM/OiBGaWVsZFtdIHwgbnVsbCk6IG90aGVycyBpcyBGaWVsZDxUW2tleW9mIFRdPltdIHtcbiAgICAgICAgcmV0dXJuIChmaWVsZHMgPT09IG90aGVycykgfHwgKFxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShmaWVsZHMpICYmXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KG90aGVycykgJiZcbiAgICAgICAgICAgIGZpZWxkcy5sZW5ndGggPT09IG90aGVycy5sZW5ndGggJiZcbiAgICAgICAgICAgIGZpZWxkcy5ldmVyeSgoZiwgaSkgPT4gaW5zdGFuY2UuY29tcGFyZUZpZWxkKGYsIG90aGVyc1tpXSkpXG4gICAgICAgICk7XG4gICAgfVxuICAgIGNvbXBhcmVGaWVsZDxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+KGZpZWxkOiBGaWVsZDxUPiwgb3RoZXI/OiBGaWVsZCB8IG51bGwpOiBvdGhlciBpcyBGaWVsZDxUPiB7XG4gICAgICAgIHJldHVybiAoZmllbGQgPT09IG90aGVyKSB8fCAoXG4gICAgICAgICAgICBvdGhlciBpbnN0YW5jZW9mIGZpZWxkLmNvbnN0cnVjdG9yICYmXG4gICAgICAgICAgICBmaWVsZC5uYW1lID09PSBvdGhlci5uYW1lICYmXG4gICAgICAgICAgICBmaWVsZC5udWxsYWJsZSA9PT0gb3RoZXIubnVsbGFibGUgJiZcbiAgICAgICAgICAgIGluc3RhbmNlLnZpc2l0KGZpZWxkLnR5cGUsIG90aGVyLnR5cGUpXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb21wYXJlQ29uc3RydWN0b3I8VCBleHRlbmRzIERhdGFUeXBlPih0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQge1xuICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIHR5cGUuY29uc3RydWN0b3I7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVBbnk8VCBleHRlbmRzIERhdGFUeXBlPih0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQge1xuICAgIHJldHVybiAodHlwZSA9PT0gb3RoZXIpIHx8IGNvbXBhcmVDb25zdHJ1Y3Rvcih0eXBlLCBvdGhlcik7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVJbnQ8VCBleHRlbmRzIEludD4odHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUIHtcbiAgICByZXR1cm4gKHR5cGUgPT09IG90aGVyKSB8fCAoXG4gICAgICAgIGNvbXBhcmVDb25zdHJ1Y3Rvcih0eXBlLCBvdGhlcikgJiZcbiAgICAgICAgdHlwZS5iaXRXaWR0aCA9PT0gb3RoZXIuYml0V2lkdGggJiZcbiAgICAgICAgdHlwZS5pc1NpZ25lZCA9PT0gb3RoZXIuaXNTaWduZWRcbiAgICApO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlRmxvYXQ8VCBleHRlbmRzIEZsb2F0Pih0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQge1xuICAgIHJldHVybiAodHlwZSA9PT0gb3RoZXIpIHx8IChcbiAgICAgICAgY29tcGFyZUNvbnN0cnVjdG9yKHR5cGUsIG90aGVyKSAmJlxuICAgICAgICB0eXBlLnByZWNpc2lvbiA9PT0gb3RoZXIucHJlY2lzaW9uXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUZpeGVkU2l6ZUJpbmFyeTxUIGV4dGVuZHMgRml4ZWRTaXplQmluYXJ5Pih0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQge1xuICAgIHJldHVybiAodHlwZSA9PT0gb3RoZXIpIHx8IChcbiAgICAgICAgY29tcGFyZUNvbnN0cnVjdG9yKHR5cGUsIG90aGVyKSAmJlxuICAgICAgICB0eXBlLmJ5dGVXaWR0aCA9PT0gb3RoZXIuYnl0ZVdpZHRoXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZURhdGU8VCBleHRlbmRzIERhdGVfPih0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQge1xuICAgIHJldHVybiAodHlwZSA9PT0gb3RoZXIpIHx8IChcbiAgICAgICAgY29tcGFyZUNvbnN0cnVjdG9yKHR5cGUsIG90aGVyKSAmJlxuICAgICAgICB0eXBlLnVuaXQgPT09IG90aGVyLnVuaXRcbiAgICApO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlVGltZXN0YW1wPFQgZXh0ZW5kcyBUaW1lc3RhbXA+KHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVCB7XG4gICAgcmV0dXJuICh0eXBlID09PSBvdGhlcikgfHwgKFxuICAgICAgICBjb21wYXJlQ29uc3RydWN0b3IodHlwZSwgb3RoZXIpICYmXG4gICAgICAgIHR5cGUudW5pdCA9PT0gb3RoZXIudW5pdCAmJlxuICAgICAgICB0eXBlLnRpbWV6b25lID09PSBvdGhlci50aW1lem9uZVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVUaW1lPFQgZXh0ZW5kcyBUaW1lPih0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQge1xuICAgIHJldHVybiAodHlwZSA9PT0gb3RoZXIpIHx8IChcbiAgICAgICAgY29tcGFyZUNvbnN0cnVjdG9yKHR5cGUsIG90aGVyKSAmJlxuICAgICAgICB0eXBlLnVuaXQgPT09IG90aGVyLnVuaXQgJiZcbiAgICAgICAgdHlwZS5iaXRXaWR0aCA9PT0gb3RoZXIuYml0V2lkdGhcbiAgICApO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlTGlzdDxUIGV4dGVuZHMgTGlzdD4odHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUIHtcbiAgICByZXR1cm4gKHR5cGUgPT09IG90aGVyKSB8fCAoXG4gICAgICAgIGNvbXBhcmVDb25zdHJ1Y3Rvcih0eXBlLCBvdGhlcikgJiZcbiAgICAgICAgdHlwZS5jaGlsZHJlbi5sZW5ndGggPT09IG90aGVyLmNoaWxkcmVuLmxlbmd0aCAmJlxuICAgICAgICBpbnN0YW5jZS5jb21wYXJlRmllbGRzKHR5cGUuY2hpbGRyZW4sIG90aGVyLmNoaWxkcmVuKVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVTdHJ1Y3Q8VCBleHRlbmRzIFN0cnVjdD4odHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUIHtcbiAgICByZXR1cm4gKHR5cGUgPT09IG90aGVyKSB8fCAoXG4gICAgICAgIGNvbXBhcmVDb25zdHJ1Y3Rvcih0eXBlLCBvdGhlcikgJiZcbiAgICAgICAgdHlwZS5jaGlsZHJlbi5sZW5ndGggPT09IG90aGVyLmNoaWxkcmVuLmxlbmd0aCAmJlxuICAgICAgICBpbnN0YW5jZS5jb21wYXJlRmllbGRzKHR5cGUuY2hpbGRyZW4sIG90aGVyLmNoaWxkcmVuKVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVVbmlvbjxUIGV4dGVuZHMgVW5pb24+KHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVCB7XG4gICAgcmV0dXJuICh0eXBlID09PSBvdGhlcikgfHwgKFxuICAgICAgICBjb21wYXJlQ29uc3RydWN0b3IodHlwZSwgb3RoZXIpICYmXG4gICAgICAgIHR5cGUubW9kZSA9PT0gb3RoZXIubW9kZSAmJlxuICAgICAgICB0eXBlLnR5cGVJZHMuZXZlcnkoKHgsIGkpID0+IHggPT09IG90aGVyLnR5cGVJZHNbaV0pICYmXG4gICAgICAgIGluc3RhbmNlLmNvbXBhcmVGaWVsZHModHlwZS5jaGlsZHJlbiwgb3RoZXIuY2hpbGRyZW4pXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZURpY3Rpb25hcnk8VCBleHRlbmRzIERpY3Rpb25hcnk+KHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVCB7XG4gICAgcmV0dXJuICh0eXBlID09PSBvdGhlcikgfHwgKFxuICAgICAgICBjb21wYXJlQ29uc3RydWN0b3IodHlwZSwgb3RoZXIpICYmXG4gICAgICAgIHR5cGUuaWQgPT09IG90aGVyLmlkICYmXG4gICAgICAgIHR5cGUuaXNPcmRlcmVkID09PSBvdGhlci5pc09yZGVyZWQgJiZcbiAgICAgICAgaW5zdGFuY2UudmlzaXQoPGFueT4gdHlwZS5pbmRpY2VzLCBvdGhlci5pbmRpY2VzKSAmJlxuICAgICAgICBpbnN0YW5jZS52aXNpdCh0eXBlLmRpY3Rpb25hcnksIG90aGVyLmRpY3Rpb25hcnkpXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUludGVydmFsPFQgZXh0ZW5kcyBJbnRlcnZhbD4odHlwZTogVCwgb3RoZXI/OiBEYXRhVHlwZSB8IG51bGwpOiBvdGhlciBpcyBUIHtcbiAgICByZXR1cm4gKHR5cGUgPT09IG90aGVyKSB8fCAoXG4gICAgICAgIGNvbXBhcmVDb25zdHJ1Y3Rvcih0eXBlLCBvdGhlcikgJiZcbiAgICAgICAgdHlwZS51bml0ID09PSBvdGhlci51bml0XG4gICAgKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUZpeGVkU2l6ZUxpc3Q8VCBleHRlbmRzIEZpeGVkU2l6ZUxpc3Q+KHR5cGU6IFQsIG90aGVyPzogRGF0YVR5cGUgfCBudWxsKTogb3RoZXIgaXMgVCB7XG4gICAgcmV0dXJuICh0eXBlID09PSBvdGhlcikgfHwgKFxuICAgICAgICBjb21wYXJlQ29uc3RydWN0b3IodHlwZSwgb3RoZXIpICYmXG4gICAgICAgIHR5cGUubGlzdFNpemUgPT09IG90aGVyLmxpc3RTaXplICYmXG4gICAgICAgIHR5cGUuY2hpbGRyZW4ubGVuZ3RoID09PSBvdGhlci5jaGlsZHJlbi5sZW5ndGggJiZcbiAgICAgICAgaW5zdGFuY2UuY29tcGFyZUZpZWxkcyh0eXBlLmNoaWxkcmVuLCBvdGhlci5jaGlsZHJlbilcbiAgICApO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlTWFwPFQgZXh0ZW5kcyBNYXBfPih0eXBlOiBULCBvdGhlcj86IERhdGFUeXBlIHwgbnVsbCk6IG90aGVyIGlzIFQge1xuICAgIHJldHVybiAodHlwZSA9PT0gb3RoZXIpIHx8IChcbiAgICAgICAgY29tcGFyZUNvbnN0cnVjdG9yKHR5cGUsIG90aGVyKSAmJlxuICAgICAgICB0eXBlLmtleXNTb3J0ZWQgPT09IG90aGVyLmtleXNTb3J0ZWQgJiZcbiAgICAgICAgdHlwZS5jaGlsZHJlbi5sZW5ndGggPT09IG90aGVyLmNoaWxkcmVuLmxlbmd0aCAmJlxuICAgICAgICBpbnN0YW5jZS5jb21wYXJlRmllbGRzKHR5cGUuY2hpbGRyZW4sIG90aGVyLmNoaWxkcmVuKVxuICAgICk7XG59XG5cblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdE51bGwgICAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUFueTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEJvb2wgICAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUFueTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEludCAgICAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUludDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEludDggICAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUludDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEludDE2ICAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUludDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEludDMyICAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUludDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEludDY0ICAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUludDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFVpbnQ4ICAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUludDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFVpbnQxNiAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUludDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFVpbnQzMiAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUludDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFVpbnQ2NCAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUludDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEZsb2F0ICAgICAgICAgICAgICAgID0gICAgICAgICAgIGNvbXBhcmVGbG9hdDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEZsb2F0MTYgICAgICAgICAgICAgID0gICAgICAgICAgIGNvbXBhcmVGbG9hdDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEZsb2F0MzIgICAgICAgICAgICAgID0gICAgICAgICAgIGNvbXBhcmVGbG9hdDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEZsb2F0NjQgICAgICAgICAgICAgID0gICAgICAgICAgIGNvbXBhcmVGbG9hdDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFV0ZjggICAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUFueTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEJpbmFyeSAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUFueTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEZpeGVkU2l6ZUJpbmFyeSAgICAgID0gY29tcGFyZUZpeGVkU2l6ZUJpbmFyeTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdERhdGUgICAgICAgICAgICAgICAgID0gICAgICAgICAgICBjb21wYXJlRGF0ZTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdERhdGVEYXkgICAgICAgICAgICAgID0gICAgICAgICAgICBjb21wYXJlRGF0ZTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdERhdGVNaWxsaXNlY29uZCAgICAgID0gICAgICAgICAgICBjb21wYXJlRGF0ZTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFRpbWVzdGFtcCAgICAgICAgICAgID0gICAgICAgY29tcGFyZVRpbWVzdGFtcDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFRpbWVzdGFtcFNlY29uZCAgICAgID0gICAgICAgY29tcGFyZVRpbWVzdGFtcDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFRpbWVzdGFtcE1pbGxpc2Vjb25kID0gICAgICAgY29tcGFyZVRpbWVzdGFtcDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFRpbWVzdGFtcE1pY3Jvc2Vjb25kID0gICAgICAgY29tcGFyZVRpbWVzdGFtcDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFRpbWVzdGFtcE5hbm9zZWNvbmQgID0gICAgICAgY29tcGFyZVRpbWVzdGFtcDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFRpbWUgICAgICAgICAgICAgICAgID0gICAgICAgICAgICBjb21wYXJlVGltZTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFRpbWVTZWNvbmQgICAgICAgICAgID0gICAgICAgICAgICBjb21wYXJlVGltZTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFRpbWVNaWxsaXNlY29uZCAgICAgID0gICAgICAgICAgICBjb21wYXJlVGltZTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFRpbWVNaWNyb3NlY29uZCAgICAgID0gICAgICAgICAgICBjb21wYXJlVGltZTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFRpbWVOYW5vc2Vjb25kICAgICAgID0gICAgICAgICAgICBjb21wYXJlVGltZTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdERlY2ltYWwgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZUFueTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdExpc3QgICAgICAgICAgICAgICAgID0gICAgICAgICAgICBjb21wYXJlTGlzdDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFN0cnVjdCAgICAgICAgICAgICAgID0gICAgICAgICAgY29tcGFyZVN0cnVjdDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFVuaW9uICAgICAgICAgICAgICAgID0gICAgICAgICAgIGNvbXBhcmVVbmlvbjtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdERlbnNlVW5pb24gICAgICAgICAgID0gICAgICAgICAgIGNvbXBhcmVVbmlvbjtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdFNwYXJzZVVuaW9uICAgICAgICAgID0gICAgICAgICAgIGNvbXBhcmVVbmlvbjtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdERpY3Rpb25hcnkgICAgICAgICAgID0gICAgICBjb21wYXJlRGljdGlvbmFyeTtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEludGVydmFsICAgICAgICAgICAgID0gICAgICAgIGNvbXBhcmVJbnRlcnZhbDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEludGVydmFsRGF5VGltZSAgICAgID0gICAgICAgIGNvbXBhcmVJbnRlcnZhbDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEludGVydmFsWWVhck1vbnRoICAgID0gICAgICAgIGNvbXBhcmVJbnRlcnZhbDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdEZpeGVkU2l6ZUxpc3QgICAgICAgID0gICBjb21wYXJlRml4ZWRTaXplTGlzdDtcblR5cGVDb21wYXJhdG9yLnByb3RvdHlwZS52aXNpdE1hcCAgICAgICAgICAgICAgICAgID0gICAgICAgICAgICAgY29tcGFyZU1hcDtcblxuLyoqIEBpZ25vcmUgKi9cbmV4cG9ydCBjb25zdCBpbnN0YW5jZSA9IG5ldyBUeXBlQ29tcGFyYXRvcigpO1xuIl19
