// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Type } from './type';
export class TypeVisitor {
    visit(type) {
        return type.acceptTypeVisitor && type.acceptTypeVisitor(this) || null;
    }
    visitMany(types) {
        return types.map((type) => this.visit(type));
    }
    static visitTypeInline(visitor, type) {
        switch (type.TType) {
            case Type.Null: return visitor.visitNull && visitor.visitNull(type);
            case Type.Int: return visitor.visitInt && visitor.visitInt(type);
            case Type.Float: return visitor.visitFloat && visitor.visitFloat(type);
            case Type.Binary: return visitor.visitBinary && visitor.visitBinary(type);
            case Type.Utf8: return visitor.visitUtf8 && visitor.visitUtf8(type);
            case Type.Bool: return visitor.visitBool && visitor.visitBool(type);
            case Type.Decimal: return visitor.visitDecimal && visitor.visitDecimal(type);
            case Type.Date: return visitor.visitDate && visitor.visitDate(type);
            case Type.Time: return visitor.visitTime && visitor.visitTime(type);
            case Type.Timestamp: return visitor.visitTimestamp && visitor.visitTimestamp(type);
            case Type.Interval: return visitor.visitInterval && visitor.visitInterval(type);
            case Type.List: return visitor.visitList && visitor.visitList(type);
            case Type.Struct: return visitor.visitStruct && visitor.visitStruct(type);
            case Type.Union: return visitor.visitUnion && visitor.visitUnion(type);
            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(type);
            case Type.FixedSizeList: return visitor.visitFixedSizeList && visitor.visitFixedSizeList(type);
            case Type.Map: return visitor.visitMap && visitor.visitMap(type);
            case Type.Dictionary: return visitor.visitDictionary && visitor.visitDictionary(type);
            default: return null;
        }
    }
}
export class VectorVisitor {
    visit(vector) {
        return vector.acceptVectorVisitor && vector.acceptVectorVisitor(this) || null;
    }
    visitMany(vectors) {
        return vectors.map((vector) => this.visit(vector));
    }
    static visitTypeInline(visitor, type, vector) {
        switch (type.TType) {
            case Type.Null: return visitor.visitNull && visitor.visitNull(vector);
            case Type.Int: return visitor.visitInt && visitor.visitInt(vector);
            case Type.Float: return visitor.visitFloat && visitor.visitFloat(vector);
            case Type.Binary: return visitor.visitBinary && visitor.visitBinary(vector);
            case Type.Utf8: return visitor.visitUtf8 && visitor.visitUtf8(vector);
            case Type.Bool: return visitor.visitBool && visitor.visitBool(vector);
            case Type.Decimal: return visitor.visitDecimal && visitor.visitDecimal(vector);
            case Type.Date: return visitor.visitDate && visitor.visitDate(vector);
            case Type.Time: return visitor.visitTime && visitor.visitTime(vector);
            case Type.Timestamp: return visitor.visitTimestamp && visitor.visitTimestamp(vector);
            case Type.Interval: return visitor.visitInterval && visitor.visitInterval(vector);
            case Type.List: return visitor.visitList && visitor.visitList(vector);
            case Type.Struct: return visitor.visitStruct && visitor.visitStruct(vector);
            case Type.Union: return visitor.visitUnion && visitor.visitUnion(vector);
            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(vector);
            case Type.FixedSizeList: return visitor.visitFixedSizeList && visitor.visitFixedSizeList(vector);
            case Type.Map: return visitor.visitMap && visitor.visitMap(vector);
            case Type.Dictionary: return visitor.visitDictionary && visitor.visitDictionary(vector);
            default: return null;
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
