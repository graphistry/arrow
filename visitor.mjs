// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { Type } from './type';
export class TypeVisitor {
    visit(node) {
        return node.acceptTypeVisitor(this);
    }
    visitMany(nodes) {
        return nodes.map((node) => this.visit(node));
    }
    static visitTypeInline(visitor, type) {
        switch (type.TType) {
            case Type.Null: return visitor.visitNull(type);
            case Type.Int: return visitor.visitInt(type);
            case Type.Float: return visitor.visitFloat(type);
            case Type.Binary: return visitor.visitBinary(type);
            case Type.Utf8: return visitor.visitUtf8(type);
            case Type.Bool: return visitor.visitBool(type);
            case Type.Decimal: return visitor.visitDecimal(type);
            case Type.Date: return visitor.visitDate(type);
            case Type.Time: return visitor.visitTime(type);
            case Type.Timestamp: return visitor.visitTimestamp(type);
            case Type.Interval: return visitor.visitInterval(type);
            case Type.List: return visitor.visitList(type);
            case Type.Struct: return visitor.visitStruct(type);
            case Type.Union: return visitor.visitUnion(type);
            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary(type);
            case Type.FixedSizeList: return visitor.visitFixedSizeList(type);
            case Type.Map: return visitor.visitMap(type);
            case Type.Dictionary: return visitor.visitDictionary(type);
            default: return null;
        }
    }
}
export class VectorVisitor {
    visit(node) {
        return node.acceptVectorVisitor(this);
    }
    visitMany(nodes) {
        return nodes.map((node) => this.visit(node));
    }
    static visitTypeInline(visitor, type, vector) {
        switch (type.TType) {
            case Type.Null: return visitor.visitNullVector(vector);
            case Type.Int: return visitor.visitIntVector(vector);
            case Type.Float: return visitor.visitFloatVector(vector);
            case Type.Binary: return visitor.visitBinaryVector(vector);
            case Type.Utf8: return visitor.visitUtf8Vector(vector);
            case Type.Bool: return visitor.visitBoolVector(vector);
            case Type.Decimal: return visitor.visitDecimalVector(vector);
            case Type.Date: return visitor.visitDateVector(vector);
            case Type.Time: return visitor.visitTimeVector(vector);
            case Type.Timestamp: return visitor.visitTimestampVector(vector);
            case Type.Interval: return visitor.visitIntervalVector(vector);
            case Type.List: return visitor.visitListVector(vector);
            case Type.Struct: return visitor.visitStructVector(vector);
            case Type.Union: return visitor.visitUnionVector(vector);
            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinaryVector(vector);
            case Type.FixedSizeList: return visitor.visitFixedSizeListVector(vector);
            case Type.Map: return visitor.visitMapVector(vector);
            case Type.Dictionary: return visitor.visitDictionaryVector(vector);
            default: return null;
        }
    }
}
// import { Footer, Block } from './ipc/message';
// import { Field, FieldNode, Buffer } from './ipc/message';
// import { Message, Schema, RecordBatch, DictionaryBatch } from './ipc/message';
// export abstract class MessageVisitor {
//     visit(node: VisitorNode): any {
//         return node.acceptMessageVisitor(this);
//     }
//     visitMany(nodes: VisitorNode[]): any[] {
//         return nodes.map((node) => this.visit(node));
//     }
//     abstract visitFooter(node: Footer): any;
//     abstract visitBlock(node: Block): any;
//     abstract visitMessage(node: Message): any;
//     abstract visitSchema(node: Schema): any;
//     abstract visitField<T extends DataType>(node: Field<T>): any;
//     abstract visitBuffer(node: Buffer): any;
//     abstract visitFieldNode(node: FieldNode): any;
//     abstract visitDataType<T extends Type>(node: DataType<T>): any;
//     abstract visitDictionary(node: Dictionary): any;
//     abstract visitRecordBatch(node: RecordBatch): any;
//     abstract visitDictionaryBatch(node: DictionaryBatch): any;
// }

//# sourceMappingURL=data:application/json;charset=utf8;base64,
