"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("./type");
class TypeVisitor {
    visit(type) {
        return type.acceptTypeVisitor && type.acceptTypeVisitor(this) || null;
    }
    visitMany(types) {
        return types.map((type) => this.visit(type));
    }
    static visitTypeInline(visitor, type) {
        switch (type.TType) {
            case type_1.Type.Null: return visitor.visitNull && visitor.visitNull(type);
            case type_1.Type.Int: return visitor.visitInt && visitor.visitInt(type);
            case type_1.Type.Float: return visitor.visitFloat && visitor.visitFloat(type);
            case type_1.Type.Binary: return visitor.visitBinary && visitor.visitBinary(type);
            case type_1.Type.Utf8: return visitor.visitUtf8 && visitor.visitUtf8(type);
            case type_1.Type.Bool: return visitor.visitBool && visitor.visitBool(type);
            case type_1.Type.Decimal: return visitor.visitDecimal && visitor.visitDecimal(type);
            case type_1.Type.Date: return visitor.visitDate && visitor.visitDate(type);
            case type_1.Type.Time: return visitor.visitTime && visitor.visitTime(type);
            case type_1.Type.Timestamp: return visitor.visitTimestamp && visitor.visitTimestamp(type);
            case type_1.Type.Interval: return visitor.visitInterval && visitor.visitInterval(type);
            case type_1.Type.List: return visitor.visitList && visitor.visitList(type);
            case type_1.Type.Struct: return visitor.visitStruct && visitor.visitStruct(type);
            case type_1.Type.Union: return visitor.visitUnion && visitor.visitUnion(type);
            case type_1.Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(type);
            case type_1.Type.FixedSizeList: return visitor.visitFixedSizeList && visitor.visitFixedSizeList(type);
            case type_1.Type.Map: return visitor.visitMap && visitor.visitMap(type);
            case type_1.Type.Dictionary: return visitor.visitDictionary && visitor.visitDictionary(type);
            default: return null;
        }
    }
}
exports.TypeVisitor = TypeVisitor;
class VectorVisitor {
    visit(vector) {
        return vector.acceptVectorVisitor && vector.acceptVectorVisitor(this) || null;
    }
    visitMany(vectors) {
        return vectors.map((vector) => this.visit(vector));
    }
    static visitTypeInline(visitor, type, vector) {
        switch (type.TType) {
            case type_1.Type.Null: return visitor.visitNull && visitor.visitNull(vector);
            case type_1.Type.Int: return visitor.visitInt && visitor.visitInt(vector);
            case type_1.Type.Float: return visitor.visitFloat && visitor.visitFloat(vector);
            case type_1.Type.Binary: return visitor.visitBinary && visitor.visitBinary(vector);
            case type_1.Type.Utf8: return visitor.visitUtf8 && visitor.visitUtf8(vector);
            case type_1.Type.Bool: return visitor.visitBool && visitor.visitBool(vector);
            case type_1.Type.Decimal: return visitor.visitDecimal && visitor.visitDecimal(vector);
            case type_1.Type.Date: return visitor.visitDate && visitor.visitDate(vector);
            case type_1.Type.Time: return visitor.visitTime && visitor.visitTime(vector);
            case type_1.Type.Timestamp: return visitor.visitTimestamp && visitor.visitTimestamp(vector);
            case type_1.Type.Interval: return visitor.visitInterval && visitor.visitInterval(vector);
            case type_1.Type.List: return visitor.visitList && visitor.visitList(vector);
            case type_1.Type.Struct: return visitor.visitStruct && visitor.visitStruct(vector);
            case type_1.Type.Union: return visitor.visitUnion && visitor.visitUnion(vector);
            case type_1.Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(vector);
            case type_1.Type.FixedSizeList: return visitor.visitFixedSizeList && visitor.visitFixedSizeList(vector);
            case type_1.Type.Map: return visitor.visitMap && visitor.visitMap(vector);
            case type_1.Type.Dictionary: return visitor.visitDictionary && visitor.visitDictionary(vector);
            default: return null;
        }
    }
}
exports.VectorVisitor = VectorVisitor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
