#! /usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs = require("fs");
const stream = require("stream");
const util_1 = require("util");
const pretty_1 = require("../util/pretty");
const Arrow_node_1 = require("../Arrow.node");
const padLeft = require('pad-left');
const eos = util_1.promisify(stream.finished);
const { parse } = require('json-bignum');
const argv = require(`command-line-args`)(cliOpts(), { partial: true });
const files = argv.help ? [] : [...(argv.file || []), ...(argv._unknown || [])].filter(Boolean);
(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const state = Object.assign({}, argv, { hasRecords: false });
    const sources = argv.help ? [] : [
        ...files.map((file) => () => fs.createReadStream(file)),
        () => process.stdin
    ].filter(Boolean);
    for (const source of sources) {
        const stream = yield createRecordBatchStream(source);
        if (stream) {
            yield eos(stream
                .pipe(transformRecordBatchRowsToString(state))
                .pipe(process.stdout, { end: false }));
        }
    }
    return state.hasRecords ? 0 : print_usage();
}))()
    .then((x) => +x || 0, (err) => {
    if (err) {
        console.error(`${err && err.stack || err}`);
    }
    return process.exitCode || 1;
}).then((code) => process.exit(code));
function createRecordBatchStream(createSourceStream) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let source = createSourceStream();
        let reader = null;
        try {
            reader = yield (yield Arrow_node_1.RecordBatchReader.from(source)).open(true);
        }
        catch (e) {
            reader = null;
        }
        if ((!reader || reader.closed) && source instanceof fs.ReadStream) {
            reader = null;
            source.close();
            try {
                let path = source.path;
                let json = parse(yield fs.promises.readFile(path, 'utf8'));
                reader = yield (yield Arrow_node_1.RecordBatchReader.from(json)).open();
            }
            catch (e) {
                reader = null;
            }
        }
        return (reader && !reader.closed) ? reader.toReadableNodeStream() : null;
    });
}
function transformRecordBatchRowsToString(state) {
    let rowId = 0, separator = `${state.separator || ' |'} `;
    return new stream.Transform({
        encoding: 'utf8',
        writableObjectMode: true,
        readableObjectMode: false,
        transform(batch, _enc, cb) {
            state.hasRecords = state.hasRecords || batch.length > 0;
            if (state.schema && state.schema.length) {
                batch = batch.select(...state.schema);
            }
            const maxColWidths = [11];
            const header = ['row_id', ...batch.schema.fields.map((f) => `${f}`)].map(pretty_1.valueToString);
            header.forEach((x, i) => {
                maxColWidths[i] = Math.max(maxColWidths[i] || 0, x.length);
            });
            // Pass one to convert to strings and count max column widths
            for (let i = -1, n = batch.length - 1; ++i < n;) {
                let row = [rowId + i, ...batch.get(i)];
                for (let j = -1, k = row.length; ++j < k;) {
                    maxColWidths[j] = Math.max(maxColWidths[j] || 0, pretty_1.valueToString(row[j]).length);
                }
            }
            for (let i = -1, n = batch.length; ++i < n;) {
                if ((rowId + i) % 350 === 0) {
                    this.push(header
                        .map((x, j) => padLeft(x, maxColWidths[j]))
                        .join(separator) + '\n');
                }
                this.push([rowId + i, ...batch.get(i)]
                    .map((x) => pretty_1.valueToString(x))
                    .map((x, j) => padLeft(x, maxColWidths[j]))
                    .join(separator) + '\n');
            }
            cb();
        }
    });
}
function cliOpts() {
    return [
        {
            type: String,
            name: 'schema', alias: 's',
            optional: true, multiple: true,
            typeLabel: '{underline columns}',
            description: 'A space-delimited list of column names'
        },
        {
            type: String,
            name: 'file', alias: 'f',
            optional: true, multiple: true,
            description: 'The Arrow file to read'
        },
        {
            type: String,
            name: 'sep', optional: true, default: '|',
            description: 'The column separator character'
        },
        {
            type: Boolean,
            name: 'help', optional: true, default: false,
            description: 'Print this usage guide.'
        }
    ];
}
function print_usage() {
    console.log(require('command-line-usage')([
        {
            header: 'arrow2csv',
            content: 'Print a CSV from an Arrow file'
        },
        {
            header: 'Synopsis',
            content: [
                '$ arrow2csv {underline file.arrow} [{bold --schema} column_name ...]',
                '$ arrow2csv [{bold --schema} column_name ...] [{bold --file} {underline file.arrow}]',
                '$ arrow2csv {bold -s} column_1 {bold -s} column_2 [{bold -f} {underline file.arrow}]',
                '$ arrow2csv [{bold --help}]'
            ]
        },
        {
            header: 'Options',
            optionList: cliOpts()
        },
        {
            header: 'Example',
            content: [
                '$ arrow2csv --schema foo baz -f simple.arrow --sep ","',
                '> "row_id", "foo: Int32", "bar: Float64", "baz: Utf8"',
                '>        0,            1,              1,        "aa"',
                '>        1,         null,           null,        null',
                '>        2,            3,           null,        null',
                '>        3,            4,              4,       "bbb"',
                '>        4,            5,              5,      "cccc"',
            ]
        }
    ]));
    return 1;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
