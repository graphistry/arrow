{"version":3,"sources":["targets/es5/cls/fb/Schema.js"," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/util/inherits] "," [synthetic:es6/generator_engine] "," [synthetic:es6/util/arrayfromiterable] "," [synthetic:es6/util/arrayfromiterator] ","node_modules/flatbuffers/js/flatbuffers.mjs","targets/es5/cls/ipc/writer/binary.js","targets/es5/cls/fb/Message.js","targets/es5/cls/util/bit.js","targets/es5/cls/ipc/metadata.js","targets/es5/cls/type.js","targets/es5/cls/visitor.js","targets/es5/cls/data.js","targets/es5/cls/vector/chunked.js","targets/es5/cls/vector/validity.js","targets/es5/cls/vector/dictionary.js","node_modules/text-encoding-utf-8/src/encoding.js","targets/es5/cls/vector/list.js","targets/es5/cls/vector.js","targets/es5/cls/util/pretty.js","targets/es5/cls/recordbatch.js","targets/es5/cls/vector/nested.js","targets/es5/cls/vector/flat.js","targets/es5/cls/util/int.js","node_modules/tslib/tslib.es6.js","targets/es5/cls/util/node.js","targets/es5/cls/vector/view.js","targets/es5/cls/predicate.js","targets/es5/cls/ipc/reader/vector.js","targets/es5/cls/ipc/reader/json.js","targets/es5/cls/ipc/magic.js","targets/es5/cls/ipc/reader/node.js","targets/es5/cls/fb/File.js","targets/es5/cls/ipc/reader/binary.js","targets/es5/cls/ipc/reader/arrow.js","targets/es5/cls/ipc/writer/arrow.js","targets/es5/cls/table.js","targets/es5/cls/Arrow.js","targets/es5/cls/util/compat.js"],"names":["$jscomp.defineProperty","$jscomp.global","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SYMBOL_PREFIX","$jscomp.arrayIterator","$jscomp.initSymbolIterator","$jscomp.iteratorPrototype","$jscomp.objectCreate","$jscomp.setPrototypeOf","$jscomp.generator.Context","$jscomp.makeIterator","$jscomp.generator.ensureIteratorResultIsObject_","$jscomp.generator.Engine_","$jscomp.generator.Generator_","org","apache","arrow","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","VectorType","Endianness","constructor","Null","bb_pos","__init","i","bb","getRootAsNull","obj","readInt32","position","startNull","builder","startObject","endNull","endObject","offset","Struct_","getRootAsStruct_","startStruct_","endStruct_","List","getRootAsList","startList","endList","FixedSizeList","getRootAsFixedSizeList","listSize","__offset","startFixedSizeList","addListSize","addFieldInt32","endFixedSizeList","Map","getRootAsMap","keysSorted","bytes_","startMap","addKeysSorted","addFieldInt8","endMap","Union","getRootAsUnion","mode","readInt16","Sparse","typeIds","index","__vector","typeIdsArray","Int32Array","bytes","buffer","byteOffset","__vector_len","startUnion","addMode","addFieldInt16","addTypeIds","typeIdsOffset","addFieldOffset","createTypeIdsVector","data","startVector","length","prep","writeInt32","value","endVector","startTypeIdsVector","numElems","endUnion","Int","getRootAsInt","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","getRootAsFloatingPoint","precision","HALF","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","getRootAsUtf8","startUtf8","endUtf8","Binary","getRootAsBinary","startBinary","endBinary","FixedSizeBinary","getRootAsFixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","getRootAsBool","startBool","endBool","Decimal","getRootAsDecimal","scale","startDecimal","addScale","endDecimal","Date","getRootAsDate","unit","MILLISECOND","startDate","addUnit","endDate","Time","getRootAsTime","startTime","endTime","Timestamp","getRootAsTimestamp","SECOND","timezone","optionalEncoding","__string","startTimestamp","addTimezone","timezoneOffset","endTimestamp","Interval","getRootAsInterval","YEAR_MONTH","startInterval","endInterval","VectorLayout","getRootAsVectorLayout","type","OFFSET","startVectorLayout","addType","endVectorLayout","KeyValue","getRootAsKeyValue","key","startKeyValue","addKey","keyOffset","addValue","valueOffset","endKeyValue","DictionaryEncoding","getRootAsDictionaryEncoding","id","readInt64","createLong","indexType","__indirect","isOrdered","startDictionaryEncoding","addId","addFieldInt64","addIndexType","indexTypeOffset","addIsOrdered","endDictionaryEncoding","Field","getRootAsField","name","nullable","typeType","NONE","__union","dictionary","children","childrenLength","customMetadata","customMetadataLength","startField","addName","nameOffset","addNullable","addTypeType","typeOffset","addDictionary","dictionaryOffset","addChildren","childrenOffset","createChildrenVector","addOffset","startChildrenVector","addLayout","layoutOffset","createLayoutVector","startLayoutVector","addCustomMetadata","customMetadataOffset","createCustomMetadataVector","startCustomMetadataVector","endField","Buffer","createBuffer","writeInt64","Schema","getRootAsSchema","fields","fieldsLength","startSchema","addEndianness","platformIsLittleEndian","endianness","_Endianness","Little","Big","addFields","fieldsOffset","createFieldsVector","startFieldsVector","endSchema","finishSchemaBuffer","finish","module$targets$es5$cls$fb$Schema.org","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Schema","MessageHeader","FieldNode","nullCount","createFieldNode","null_count","RecordBatch","getRootAsRecordBatch","nodes","nodesLength","buffers","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Buffer","buffersLength","startRecordBatch","addLength","addNodes","nodesOffset","startNodesVector","addBuffers","buffersOffset","startBuffersVector","endRecordBatch","DictionaryBatch","getRootAsDictionaryBatch","isDelta","startDictionaryBatch","addData","dataOffset","addIsDelta","endDictionaryBatch","Message","getRootAsMessage","version","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.MetadataVersion.V1","V1","headerType","header","bodyLength","startMessage","addVersion","addHeaderType","addHeader","headerOffset","addBodyLength","endMessage","finishMessageBuffer","module$targets$es5$cls$fb$Message.org","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.int32","Float32Array","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.int32.buffer","Float64Array","Uint16Array","Uint8Array","flatbuffers.Long","low","high","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Long","prototype","equals","flatbuffers.Long.prototype.equals","other","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Long.ZERO","flatbuffers.Builder","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.ByteBuffer","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","flatbuffers.Builder.prototype.asUint8Array","subarray","flatbuffers.Builder.prototype.prep","size","additional_bytes","align_size","old_buf_size","Error","new_buf_size","nbb","setPosition","set","pad","flatbuffers.Builder.prototype.pad","byte_size","writeInt8","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Builder.prototype","flatbuffers.Builder.prototype.writeInt8","writeInt16","flatbuffers.Builder.prototype.writeInt16","flatbuffers.Builder.prototype.writeInt32","flatbuffers.Builder.prototype.writeInt64","flatbuffers.Builder.prototype.addInt16","flatbuffers.Builder.prototype.addFieldInt8","voffset","defaultValue","addInt8","slot","flatbuffers.Builder.prototype.addFieldInt16","addInt16","flatbuffers.Builder.prototype.addFieldInt32","addInt32","flatbuffers.Builder.prototype.addFieldInt64","addInt64","flatbuffers.Builder.prototype.addFieldOffset","flatbuffers.Builder.prototype.notNested","flatbuffers.Builder.prototype.slot","flatbuffers.Builder.prototype.offset","flatbuffers.Builder.prototype.addOffset","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.SIZEOF_INT","flatbuffers.Builder.prototype.startObject","numfields","notNested","flatbuffers.Builder.prototype.endObject","vtableloc","trimmed_size","len","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.SIZEOF_SHORT","standard_fields","existing_vtable","vt1","vt2","j","push","flatbuffers.Builder.prototype.finish","root_table","opt_file_identifier","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.FILE_IDENTIFIER_LENGTH","charCodeAt","flatbuffers.Builder.prototype.startVector","elem_size","num_elems","alignment","flatbuffers.Builder.prototype.endVector","flatbuffers.Builder.prototype.createString","s","utf8","a","b","codePoint","flatbuffers.Builder.prototype.createLong","flatbuffers.ByteBuffer","position_","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.ByteBuffer.prototype","flatbuffers.ByteBuffer.prototype.bytes","flatbuffers.ByteBuffer.prototype.position","flatbuffers.ByteBuffer.prototype.setPosition","flatbuffers.ByteBuffer.prototype.readUint8","flatbuffers.ByteBuffer.prototype.readInt16","readUint16","flatbuffers.ByteBuffer.prototype.readInt32","flatbuffers.ByteBuffer.prototype.readInt64","flatbuffers.ByteBuffer.prototype.writeInt8","flatbuffers.ByteBuffer.prototype.writeInt16","flatbuffers.ByteBuffer.prototype.writeInt32","flatbuffers.ByteBuffer.prototype.writeInt64","flatbuffers.ByteBuffer.prototype.__offset","vtable_offset","flatbuffers.ByteBuffer.prototype.__union","t","flatbuffers.ByteBuffer.prototype.__string","opt_encoding","result","UTF8_BYTES","readUint8","c","d","String","fromCharCode","flatbuffers.ByteBuffer.prototype.__indirect","flatbuffers.ByteBuffer.prototype.__vector","flatbuffers.ByteBuffer.prototype.__vector_len","flatbuffers.ByteBuffer.prototype.createLong","align","getBool","_data","_index","byte","bit","getBit","setBool","packBools","values","n","xs","iterateBits","begin","context","get","byteIndex","remaining","$jscomp.generator.createGenerator","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","cnt","pos","view","DataView","byteLength","popcnt_uint32","getUint32","getUint16","getUint8","uint32","Footer","dictionaryBatches","recordBatches","schema","FileBlock","metaDataLength","RecordBatchMetadata","reduce","$jscomp.inherits","$jscomp.global.Object.defineProperties","DictionaryBatch$$module$targets$es5$cls$ipc$metadata.atomicDictionaryId","BufferMetadata","FieldMetadata","TypeVisitor","visit","acceptTypeVisitor","visitMany","types","map","visitTypeInline","visitor","TType","module$targets$es5$cls$type.Type.Null","visitNull","module$targets$es5$cls$type.Type.Int","visitInt","module$targets$es5$cls$type.Type.Float","Float","visitFloat","module$targets$es5$cls$type.Type.Binary","visitBinary","module$targets$es5$cls$type.Type.Utf8","visitUtf8","module$targets$es5$cls$type.Type.Bool","visitBool","module$targets$es5$cls$type.Type.Decimal","visitDecimal","module$targets$es5$cls$type.Type.Date","visitDate","module$targets$es5$cls$type.Type.Time","visitTime","module$targets$es5$cls$type.Type.Timestamp","visitTimestamp","module$targets$es5$cls$type.Type.Interval","visitInterval","module$targets$es5$cls$type.Type.List","visitList","module$targets$es5$cls$type.Type.Struct","Struct","visitStruct","module$targets$es5$cls$type.Type.Union","visitUnion","module$targets$es5$cls$type.Type.FixedSizeBinary","visitFixedSizeBinary","module$targets$es5$cls$type.Type.FixedSizeList","visitFixedSizeList","module$targets$es5$cls$type.Type.Map","visitMap","module$targets$es5$cls$type.Type.Dictionary","Dictionary","visitDictionary","VectorVisitor","vector","acceptVectorVisitor","vectors","ArrowType","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Type","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.DateUnit","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.TimeUnit","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Precision","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.UnionMode","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.VectorType","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.IntervalUnit","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.MessageHeader","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.MetadataVersion","metadata","dictionaries","V4","from","v","select","namesToKeep","fieldNames","x","Object","create","newDictFields","newFields","filter","f","forEach","dictId","_bodyLength","_headerType","toStringTag","Symbol","toString","typeId","indices","DataType$$module$targets$es5$cls$type.isDictionary","DataType","isInt","isBinary","isUtf8","isBool","isDecimal","isDate","isTime","isTimestamp","isFixedSizeBinary","isDictionary","TypeVisitor$$module$targets$es5$cls$visitor.visitTypeInline","proto","ArrayType","Array","Int8Array","Int16Array","Uint32Array","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","SINGLE","DOUBLE","Float16","Float32","Float64","Date_","valueType","join","SparseUnion","DenseUnion","Dense","Map_","module$targets$es5$cls$type.Type","toTypedArray","ArrayBuffer","isView","BYTES_PER_ELEMENT","BaseData","Math","floor","max","_nullCount","clone","slice","sliceInternal","arr","TYPE","sliceData","DATA","nullBitmap","VALIDITY","FlatData","BoolData","FlatListData","valueOffsets","DictionaryData","_indices","_dictionary","NestedData","childData","child","SingleNestedData","valueChildData","_valuesData","ListData","UnionData","SparseUnionData","DenseUnionData","ChunkedData","chunkVectors","chunkOffsets","_chunkVectors","_chunkOffsets","ChunkedData$$module$targets$es5$cls$data.computeOffsets","vec","chunks","offsets","chunkSlices","childIndex","numChildren","childLength","childOffset","min","computeOffsets","childVectors","childOffsets","ChunkedView","iterator","?.prototype","getChildAt","_children","Vector$$module$targets$es5$cls$vector.concat.apply","Vector","$jscomp.arrayFromIterable","chunk","isValid","mid","toArray","numChunks","sources","sourcesLen","source","target","setValues","arraySet","typedArraySet","indexOf","search","dstIdx","srcIdx","srcLen","ValidityView","nullBitIndex","getNullable","DictionaryView","ToDictionary","o","undefined","TypeError","Stream","tokens","call","endOfStream","read","shift","end_of_stream","token","isArray","decoderError","fatal","TextDecoder","encoding","options","toLowerCase","DEFAULT_ENCODING","_BOMseen","_streaming","_decoder","_fatal","_ignoreBOM","defineProperty","decode","input","UTF8Decoder","input_stream","code_points","handler","finished","apply","cp","TextEncoder","_encoder","encode","opt_string","UTF8Encoder","string","u","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","this.handler","stream","bite","unshift","pop","code_point","count","encoder","bind","decoder","ListViewBase","getList","setList","VariableListViewBase","ListView","createVector","idx","end","FixedSizeListView","BinaryView","Utf8View","decodeUtf8","encodeUtf8","leftPad","str","fill","valueToString","JSON","stringify","NestedView","toJSON","getNested","setNested","UnionView","self","getChildValue","setChildValue","DenseUnionView","StructView","RowView","MapView","MapRowView","rowIndex","FlatView","NullView","BoolView","boolBitIndex","PrimitiveView","getValue","setValue","FixedSizeView","every","Float16View","DateDayView","valueOf","DateMillisecondView","epochMillisecondsLongToMs","epochMs","TimestampDayView","TimestampSecondView","TimestampMillisecondView","TimestampMicrosecondView","TimestampNanosecondView","IntervalYearMonthView","interval","IntervalYearView","IntervalMonthView","nulls","concat","others","Boolean","vecs","chunkedData","chunksLength","total","to","isFinite","slicedData","VectorVisitor$$module$targets$es5$cls$visitor.visitTypeInline","FlatVector","lows","asInt32","highs","stride","int32s","IntVector","ListVectorBase","getValueOffset","getValueLength","NestedVector","_childData","cols","_","NullVector","BoolVector","is64","FloatVector","DateVector","DAY","asEpochMilliseconds","DecimalVector","TimeVector","TimestampVector","MICROSECOND","NANOSECOND","IntervalVector","BinaryVector","asUtf8","Utf8Vector","FixedSizeBinaryVector","asBinary","ListVector","FixedSizeListVector","MapVector","asStruct","StructVector","asMap","UnionVector","DictionaryVector","idxs","dict","getKey","reverseLookup","VectorLoader","intAsHex","kPowersOfTen","BaseInt64","_times","L","R","product","carryBit16","_plus","lessThan","greaterThan","hex","times","plus","multiply","left","right","rtrn","negate","this_high","other_high","fromString","out_buffer","startsWith","out","posn","group","kInt32DecimalDigits","parseInt","substr","multiple","Int128","L0","L1","L2","L3","R0","R1","R2","R3","Uint64$$module$targets$es5$cls$util$int.multiply","sums","extendStatics","setPrototypeOf","__proto__","p","hasOwnProperty","__values","m","next","done","__read","r","ar","error","e","__await","exports","__extends","__","__assign","assign","arguments","__rest","getOwnPropertySymbols","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","__awaiter","thisArg","generator","P","Promise","resolve","reject","fulfilled","step","rejected","then","__generator","body","verb","op","y","label","ops","trys","sent","g","__exportStar","__spread","__asyncGenerator","_arguments","q","resume","fulfill","settle","asyncIterator","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__importStar","mod","__esModule","k","default","__importDefault","PipeIterator","throw","return","pipe","write","err","res","emit","wait","AsyncPipeIterator","tslib_1","eval","stdout","Value","eq","Literal","Equals","le","LTeq","ge","GTeq","lt","Not","gt","ne","Col","batch","colidx","Predicate","and","expr","And","or","Or","not","ands","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","left_func","right_func","col","lit","col_func","lastDictionary","lastKey","func","CustomPredicate","bind_","args","numRows","numCols","Schema$$module$targets$es5$cls$type.from","columnNames","rowsToString","separator","rowOffset","maxColumnWidths","recordBatchRowsToString","recordBatch","val","row","readRecordBatches","messages","message","loader","readRecordBatch","readRecordBatchesAsync","readRecordBatchesAsync_1","messages_1","messages_1_1","e_1_1","e_1","_a","dictionaryId","dictionaryField","dictionaryDataType","dictionaryVector","has","visitFields","TypeDataLoader","field","getFieldMetadata","visitNullType","readNullBitmap","visitFlatType","visitFlatList","visitBoolType","readData","visitListType","readOffsets","visitNestedType","visitUnionType","readTypeIds","visitFixedSizeListType","getBufferMetadata","readJSON","json","dictionaryFields","fieldsFromJSON","entries","recordBatchFromJSON","JSONDataLoader","flattenDataSources","arrayIterator","column","utf8Encoder","_type","DataType$$module$targets$es5$cls$type.isTimestamp","int64DataFromJSON","DataType$$module$targets$es5$cls$type.isInt","DataType$$module$targets$es5$cls$type.isTime","DataType$$module$targets$es5$cls$type.isDate","DataType$$module$targets$es5$cls$type.isDecimal","decimalDataFromJSON","DataType$$module$targets$es5$cls$type.isBinary","DataType$$module$targets$es5$cls$type.isFixedSizeBinary","binaryDataFromJSON","DataType$$module$targets$es5$cls$type.isBool","DataType$$module$targets$es5$cls$type.isUtf8","Int64$$module$targets$es5$cls$util$int.fromString","Int128$$module$targets$es5$cls$util$int.fromString","joined","fieldNodesFromJSON","buffersFromJSON","fs","keysMeta","dictMeta","dataType","typeFromJSON","intFromJSON","fieldNodes","nullCountFromJSON","validity","namesToTypeMap","floatingPointFromJSON","MAGIC","MAGIC_STR","checkForMagicArrowString","isValidArrowFile","fileLength","footerLength","lengthOffset","magicX2AndPadding","magicLength","magicAndPadding","PADDING","_Message","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.Message","fromReadableStream","fromReadableStream_1","bytesRead","messageLength","_b","grown","_c","getInt32","getRootAsFooter","Block","dictionariesLength","recordBatchesLength","startFooter","addSchema","schemaOffset","addDictionaries","dictionariesOffset","startDictionariesVector","addRecordBatches","recordBatchesOffset","startRecordBatchesVector","endFooter","finishFooterBuffer","createBlock","module$targets$es5$cls$fb$File.org","readBuffers","readMessages","toByteBuffer","readSchema","BinaryDataLoader","readBuffersAsync","readBuffersAsync_1","sources_1","sources_1_1","messageOffset","_Footer","blocks","fieldsFromSchema","footer","readFileMessages","readStreamMessages","batches","readMessage","messageFromByteBuffer","module$targets$es5$cls$fb$File.org.apache.arrow.flatbuf.Footer","_Schema","_RecordBatch","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.RecordBatch","_DictionaryBatch","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.DictionaryBatch","_Null","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Null","_Int","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Int","_FloatingPoint","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FloatingPoint","_Binary","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Binary","_Bool","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Bool","_Utf8","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Utf8","_Decimal","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Decimal","_Date","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Date","_Time","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Time","_Timestamp","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Timestamp","_Interval","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Interval","_List","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.List","_Struct","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Struct_","_Union","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Union","_FixedSizeBinary","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FixedSizeBinary","_FixedSizeList","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FixedSizeList","_Map","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Map","recordBatchFromMessage","fieldsFromField","typeFromField","intFromField","parent","entry","floatFromField","parse","readAsync","readAsync_1","readStream","readStream_1","e_2_1","e_2","serializeStream","table","serializeMessage","getColumn","serializeDictionaryBatch","serializeRecordBatch","serializeFile","metadataLength","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Builder","writeFooter","footerBytes","asUint8Array","setInt32","visitRecordBatch","buffersMeta","rbMeta","rbData","concatBuffersWithMetadata","RecordBatch$$module$targets$es5$cls$recordbatch.from","dbMeta","messageHeaderOffset","writeSchema","writeRecordBatch","metadataBytes","dataByteLength","messageBytes","RecordBatchSerializer","RangeError","nullBitmapAlignment","getTruncatedBitmap","addBuffer","bitmap","visitBoolVector","visitFlatVector","visitFlatListVector","visitListVector","visitNestedVector","sliceOffset","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","getZeroBasedValueOffsets","firstOffset","lastOffset","alignedLength","startOffset","destOffsets","_Block","module$targets$es5$cls$fb$File.org.apache.arrow.flatbuf.Block","_Field","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Field","_Buffer","_KeyValue","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.KeyValue","_FieldNode","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.FieldNode","_DictionaryEncoding","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.DictionaryEncoding","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Endianness","TypeSerializer","node","createString","totalByteLength","realBufferLength","mapReverse","rb","writeBlock","dictionaryBatchesOffset","db","fieldOffsets","writeField","b_","callbackfn","setInt16","concatBuffers","Table","_columns","batchesUnion","union","empty","Table$$module$targets$es5$cls$table.empty","getColumnAt","getColumnIndex","findIndex","predicate","FilteredDataFrame","scan","numBatches","batchIndex","countBy","count_by","counts","keys","CountByResult","IntVector$$module$targets$es5$cls$vector.from","serialize","tableRowsToString","firstValues","iterators","util","enum_","view_","custom","Arrow","Table$$module$targets$es5$cls$table.from","fromAsync","fromStruct","struct","add","module$targets$es5$cls$type.Type.NONE","module$targets$es5$cls$type.Type.DenseUnion","module$targets$es5$cls$type.Type.SparseUnion","isNull","isFloat","isInterval","isList","isStruct","isUnion","isDenseUnion","isSparseUnion","isFixedSizeList","isMap"],"mappings":"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","file":"Arrow.js","sourcesContent":["/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * @enum\n */\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let MetadataVersion;\n                (function (MetadataVersion) {\n                    /**\n                     * 0.1.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n                    /**\n                     * 0.2.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n                    /**\n                     * 0.3.0 -> 0.7.1\n                     */\n                    MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n                    /**\n                     * >= 0.8.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n                })(MetadataVersion = flatbuf.MetadataVersion || (flatbuf.MetadataVersion = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let UnionMode;\n                (function (UnionMode) {\n                    UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n                    UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n                })(UnionMode = flatbuf.UnionMode || (flatbuf.UnionMode = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Precision;\n                (function (Precision) {\n                    Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n                    Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n                    Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n                })(Precision = flatbuf.Precision || (flatbuf.Precision = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let DateUnit;\n                (function (DateUnit) {\n                    DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n                    DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n                })(DateUnit = flatbuf.DateUnit || (flatbuf.DateUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let TimeUnit;\n                (function (TimeUnit) {\n                    TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n                    TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n                    TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n                    TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n                })(TimeUnit = flatbuf.TimeUnit || (flatbuf.TimeUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let IntervalUnit;\n                (function (IntervalUnit) {\n                    IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n                    IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n                })(IntervalUnit = flatbuf.IntervalUnit || (flatbuf.IntervalUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Type;\n                (function (Type) {\n                    Type[Type[\"NONE\"] = 0] = \"NONE\";\n                    Type[Type[\"Null\"] = 1] = \"Null\";\n                    Type[Type[\"Int\"] = 2] = \"Int\";\n                    Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n                    Type[Type[\"Binary\"] = 4] = \"Binary\";\n                    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n                    Type[Type[\"Bool\"] = 6] = \"Bool\";\n                    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n                    Type[Type[\"Date\"] = 8] = \"Date\";\n                    Type[Type[\"Time\"] = 9] = \"Time\";\n                    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n                    Type[Type[\"Interval\"] = 11] = \"Interval\";\n                    Type[Type[\"List\"] = 12] = \"List\";\n                    Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n                    Type[Type[\"Union\"] = 14] = \"Union\";\n                    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n                    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n                    Type[Type[\"Map\"] = 17] = \"Map\";\n                })(Type = flatbuf.Type || (flatbuf.Type = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let VectorType;\n                (function (VectorType) {\n                    /**\n                     * used in List type, Dense Union and variable length primitive types (String, Binary)\n                     */\n                    VectorType[VectorType[\"OFFSET\"] = 0] = \"OFFSET\";\n                    /**\n                     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n                     */\n                    VectorType[VectorType[\"DATA\"] = 1] = \"DATA\";\n                    /**\n                     * Bit vector indicating if each value is null\n                     */\n                    VectorType[VectorType[\"VALIDITY\"] = 2] = \"VALIDITY\";\n                    /**\n                     * Type vector used in Union type\n                     */\n                    VectorType[VectorType[\"TYPE\"] = 3] = \"TYPE\";\n                })(VectorType = flatbuf.VectorType || (flatbuf.VectorType = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Endianness;\n                (function (Endianness) {\n                    Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n                    Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n                })(Endianness = flatbuf.Endianness || (flatbuf.Endianness = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Null {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Null}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Null=} obj\n                     * @returns {Null}\n                     */\n                    static getRootAsNull(bb, obj) {\n                        return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startNull(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endNull(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Null = Null;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Struct_ {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Struct_}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Struct_=} obj\n                     * @returns {Struct_}\n                     */\n                    static getRootAsStruct_(bb, obj) {\n                        return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startStruct_(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endStruct_(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Struct_ = Struct_;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class List {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {List}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {List=} obj\n                     * @returns {List}\n                     */\n                    static getRootAsList(bb, obj) {\n                        return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startList(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.List = List;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FixedSizeList {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FixedSizeList}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FixedSizeList=} obj\n                     * @returns {FixedSizeList}\n                     */\n                    static getRootAsFixedSizeList(bb, obj) {\n                        return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Number of list items per value\n                     *\n                     * @returns {number}\n                     */\n                    listSize() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFixedSizeList(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} listSize\n                     */\n                    static addListSize(builder, listSize) {\n                        builder.addFieldInt32(0, listSize, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFixedSizeList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FixedSizeList = FixedSizeList;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Map {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Map}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Map=} obj\n                     * @returns {Map}\n                     */\n                    static getRootAsMap(bb, obj) {\n                        return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Set to true if the keys within each value are sorted\n                     *\n                     * @returns {boolean}\n                     */\n                    keysSorted() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startMap(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} keysSorted\n                     */\n                    static addKeysSorted(builder, keysSorted) {\n                        builder.addFieldInt8(0, +keysSorted, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endMap(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Map = Map;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Union {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Union}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Union=} obj\n                     * @returns {Union}\n                     */\n                    static getRootAsUnion(bb, obj) {\n                        return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.UnionMode}\n                     */\n                    mode() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n                    }\n                    /**\n                     * @param {number} index\n                     * @returns {number}\n                     */\n                    typeIds(index) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    typeIdsLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @returns {Int32Array}\n                     */\n                    typeIdsArray() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startUnion(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n                     */\n                    static addMode(builder, mode) {\n                        builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} typeIdsOffset\n                     */\n                    static addTypeIds(builder, typeIdsOffset) {\n                        builder.addFieldOffset(1, typeIdsOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<number>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createTypeIdsVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addInt32(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startTypeIdsVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endUnion(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Union = Union;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Int {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Int}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Int=} obj\n                     * @returns {Int}\n                     */\n                    static getRootAsInt(bb, obj) {\n                        return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @returns {boolean}\n                     */\n                    isSigned() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startInt(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt32(0, bitWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isSigned\n                     */\n                    static addIsSigned(builder, isSigned) {\n                        builder.addFieldInt8(1, +isSigned, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endInt(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Int = Int;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FloatingPoint {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FloatingPoint}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FloatingPoint=} obj\n                     * @returns {FloatingPoint}\n                     */\n                    static getRootAsFloatingPoint(bb, obj) {\n                        return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.Precision}\n                     */\n                    precision() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFloatingPoint(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Precision} precision\n                     */\n                    static addPrecision(builder, precision) {\n                        builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFloatingPoint(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FloatingPoint = FloatingPoint;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Utf8 {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Utf8}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Utf8=} obj\n                     * @returns {Utf8}\n                     */\n                    static getRootAsUtf8(bb, obj) {\n                        return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startUtf8(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endUtf8(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Utf8 = Utf8;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Binary {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Binary}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Binary=} obj\n                     * @returns {Binary}\n                     */\n                    static getRootAsBinary(bb, obj) {\n                        return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startBinary(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Binary = Binary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FixedSizeBinary {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FixedSizeBinary}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FixedSizeBinary=} obj\n                     * @returns {FixedSizeBinary}\n                     */\n                    static getRootAsFixedSizeBinary(bb, obj) {\n                        return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Number of bytes per value\n                     *\n                     * @returns {number}\n                     */\n                    byteWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFixedSizeBinary(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} byteWidth\n                     */\n                    static addByteWidth(builder, byteWidth) {\n                        builder.addFieldInt32(0, byteWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFixedSizeBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FixedSizeBinary = FixedSizeBinary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Bool {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Bool}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Bool=} obj\n                     * @returns {Bool}\n                     */\n                    static getRootAsBool(bb, obj) {\n                        return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startBool(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endBool(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Bool = Bool;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Decimal {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Decimal}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Decimal=} obj\n                     * @returns {Decimal}\n                     */\n                    static getRootAsDecimal(bb, obj) {\n                        return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Total number of decimal digits\n                     *\n                     * @returns {number}\n                     */\n                    precision() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * Number of digits after the decimal point \".\"\n                     *\n                     * @returns {number}\n                     */\n                    scale() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDecimal(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} precision\n                     */\n                    static addPrecision(builder, precision) {\n                        builder.addFieldInt32(0, precision, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} scale\n                     */\n                    static addScale(builder, scale) {\n                        builder.addFieldInt32(1, scale, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDecimal(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Decimal = Decimal;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Date {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Date}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Date=} obj\n                     * @returns {Date}\n                     */\n                    static getRootAsDate(bb, obj) {\n                        return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.DateUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDate(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDate(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Date = Date;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Time {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Time}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Time=} obj\n                     * @returns {Time}\n                     */\n                    static getRootAsTime(bb, obj) {\n                        return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startTime(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt32(1, bitWidth, 32);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endTime(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Time = Time;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Timestamp {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Timestamp}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Timestamp=} obj\n                     * @returns {Timestamp}\n                     */\n                    static getRootAsTimestamp(bb, obj) {\n                        return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n                    }\n                    timezone(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startTimestamp(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} timezoneOffset\n                     */\n                    static addTimezone(builder, timezoneOffset) {\n                        builder.addFieldOffset(1, timezoneOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endTimestamp(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Timestamp = Timestamp;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Interval {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Interval}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Interval=} obj\n                     * @returns {Interval}\n                     */\n                    static getRootAsInterval(bb, obj) {\n                        return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startInterval(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endInterval(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Interval = Interval;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class VectorLayout {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {VectorLayout}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {VectorLayout=} obj\n                     * @returns {VectorLayout}\n                     */\n                    static getRootAsVectorLayout(bb, obj) {\n                        return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n                     *\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * the purpose of the vector\n                     *\n                     * @returns {org.apache.arrow.flatbuf.VectorType}\n                     */\n                    type() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startVectorLayout(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt16(0, bitWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.VectorType} type\n                     */\n                    static addType(builder, type) {\n                        builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endVectorLayout(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.VectorLayout = VectorLayout;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class KeyValue {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {KeyValue}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {KeyValue=} obj\n                     * @returns {KeyValue}\n                     */\n                    static getRootAsKeyValue(bb, obj) {\n                        return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    key(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    value(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startKeyValue(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} keyOffset\n                     */\n                    static addKey(builder, keyOffset) {\n                        builder.addFieldOffset(0, keyOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} valueOffset\n                     */\n                    static addValue(builder, valueOffset) {\n                        builder.addFieldOffset(1, valueOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endKeyValue(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.KeyValue = KeyValue;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class DictionaryEncoding {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {DictionaryEncoding}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {DictionaryEncoding=} obj\n                     * @returns {DictionaryEncoding}\n                     */\n                    static getRootAsDictionaryEncoding(bb, obj) {\n                        return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * The known dictionary id in the application where this data is used. In\n                     * the file or streaming formats, the dictionary ids are found in the\n                     * DictionaryBatch messages\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    id() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * The dictionary indices are constrained to be positive integers. If this\n                     * field is null, the indices must be signed int32\n                     *\n                     * @param {org.apache.arrow.flatbuf.Int=} obj\n                     * @returns {org.apache.arrow.flatbuf.Int|null}\n                     */\n                    indexType(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * By default, dictionaries are not ordered, or the order does not have\n                     * semantic meaning. In some statistical, applications, dictionary-encoding\n                     * is used to represent ordered categorical data, and we provide a way to\n                     * preserve that metadata here\n                     *\n                     * @returns {boolean}\n                     */\n                    isOrdered() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDictionaryEncoding(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} id\n                     */\n                    static addId(builder, id) {\n                        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} indexTypeOffset\n                     */\n                    static addIndexType(builder, indexTypeOffset) {\n                        builder.addFieldOffset(1, indexTypeOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isOrdered\n                     */\n                    static addIsOrdered(builder, isOrdered) {\n                        builder.addFieldInt8(2, +isOrdered, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDictionaryEncoding(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.DictionaryEncoding = DictionaryEncoding;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Field {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Field}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Field=} obj\n                     * @returns {Field}\n                     */\n                    static getRootAsField(bb, obj) {\n                        return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    name(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @returns {boolean}\n                     */\n                    nullable() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.Type}\n                     */\n                    typeType() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n                    }\n                    /**\n                     * @param {flatbuffers.Table} obj\n                     * @returns {?flatbuffers.Table}\n                     */\n                    type(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n                     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n                     */\n                    dictionary(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 12);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Field=} obj\n                     * @returns {org.apache.arrow.flatbuf.Field}\n                     */\n                    children(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 14);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    childrenLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 14);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * layout of buffers produced for this type (as derived from the Type)\n                     * does not include children\n                     * each recordbatch will return instances of those Buffers.\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n                     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n                     */\n                    layout(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 16);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    layoutLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 16);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n                     * @returns {org.apache.arrow.flatbuf.KeyValue}\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 18);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 18);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startField(builder) {\n                        builder.startObject(8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} nameOffset\n                     */\n                    static addName(builder, nameOffset) {\n                        builder.addFieldOffset(0, nameOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} nullable\n                     */\n                    static addNullable(builder, nullable) {\n                        builder.addFieldInt8(1, +nullable, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Type} typeType\n                     */\n                    static addTypeType(builder, typeType) {\n                        builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} typeOffset\n                     */\n                    static addType(builder, typeOffset) {\n                        builder.addFieldOffset(3, typeOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dictionaryOffset\n                     */\n                    static addDictionary(builder, dictionaryOffset) {\n                        builder.addFieldOffset(4, dictionaryOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} childrenOffset\n                     */\n                    static addChildren(builder, childrenOffset) {\n                        builder.addFieldOffset(5, childrenOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createChildrenVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startChildrenVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} layoutOffset\n                     */\n                    static addLayout(builder, layoutOffset) {\n                        builder.addFieldOffset(6, layoutOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createLayoutVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startLayoutVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(7, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endField(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Field = Field;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Buffer {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Buffer}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * The relative offset into the shared memory page where the bytes for this\n                     * buffer starts\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    offset() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * The absolute length (in bytes) of the memory buffer. The memory is found\n                     * from offset (inclusive) to offset + length (non-inclusive).\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        return this.bb.readInt64(this.bb_pos + 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} offset\n                     * @param {flatbuffers.Long} length\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createBuffer(builder, offset, length) {\n                        builder.prep(8, 16);\n                        builder.writeInt64(length);\n                        builder.writeInt64(offset);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.Buffer = Buffer;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Schema {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Schema}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Schema=} obj\n                     * @returns {Schema}\n                     */\n                    static getRootAsSchema(bb, obj) {\n                        return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * endianness of the buffer\n                     * it is Little Endian by default\n                     * if endianness doesn't match the underlying system then the vectors need to be converted\n                     *\n                     * @returns {org.apache.arrow.flatbuf.Endianness}\n                     */\n                    endianness() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Field=} obj\n                     * @returns {org.apache.arrow.flatbuf.Field}\n                     */\n                    fields(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    fieldsLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n                     * @returns {org.apache.arrow.flatbuf.KeyValue}\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startSchema(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n                     */\n                    static addEndianness(builder, endianness) {\n                        builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} fieldsOffset\n                     */\n                    static addFields(builder, fieldsOffset) {\n                        builder.addFieldOffset(1, fieldsOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createFieldsVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startFieldsVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(2, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endSchema(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishSchemaBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Schema = Schema;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n",null,null,null,null,null,null,null,null,null,null,"/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n/// @endcond\n/// @}\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { RecordBatch } from '../../recordbatch';\nimport { VectorVisitor, TypeVisitor } from '../../visitor';\nimport { MAGIC, magicLength, magicAndPadding, PADDING } from '../magic';\nimport { align, getBool, packBools, iterateBits } from '../../util/bit';\nimport { BufferMetadata, FieldMetadata, Footer, FileBlock, Message, RecordBatchMetadata, DictionaryBatch } from '../metadata';\nimport { MetadataVersion, DataType, UnionMode, } from '../../type';\nexport function* serializeStream(table) {\n    yield serializeMessage(table.schema).buffer;\n    for (const [id, field] of table.schema.dictionaries) {\n        const vec = table.getColumn(field.name);\n        if (vec && vec.dictionary) {\n            yield serializeDictionaryBatch(vec.dictionary, id).buffer;\n        }\n    }\n    for (const recordBatch of table.batches) {\n        yield serializeRecordBatch(recordBatch).buffer;\n    }\n}\nexport function* serializeFile(table) {\n    const recordBatches = [];\n    const dictionaryBatches = [];\n    // First yield the magic string (aligned)\n    let buffer = new Uint8Array(align(magicLength, 8));\n    let metadataLength, byteLength = buffer.byteLength;\n    buffer.set(MAGIC, 0);\n    yield buffer;\n    // Then yield the schema\n    ({ metadataLength, buffer } = serializeMessage(table.schema));\n    byteLength += buffer.byteLength;\n    yield buffer;\n    for (const [id, field] of table.schema.dictionaries) {\n        const vec = table.getColumn(field.name);\n        if (vec && vec.dictionary) {\n            ({ metadataLength, buffer } = serializeDictionaryBatch(vec.dictionary, id));\n            dictionaryBatches.push(new FileBlock(metadataLength, buffer.byteLength, byteLength));\n            byteLength += buffer.byteLength;\n            yield buffer;\n        }\n    }\n    for (const recordBatch of table.batches) {\n        ({ metadataLength, buffer } = serializeRecordBatch(recordBatch));\n        recordBatches.push(new FileBlock(metadataLength, buffer.byteLength, byteLength));\n        byteLength += buffer.byteLength;\n        yield buffer;\n    }\n    // Then yield the footer metadata (not aligned)\n    ({ metadataLength, buffer } = serializeFooter(new Footer(dictionaryBatches, recordBatches, table.schema)));\n    yield buffer;\n    // Last, yield the footer length + terminating magic arrow string (aligned)\n    buffer = new Uint8Array(magicAndPadding);\n    new DataView(buffer.buffer).setInt32(0, metadataLength, platformIsLittleEndian);\n    buffer.set(MAGIC, buffer.byteLength - magicLength);\n    yield buffer;\n}\nexport function serializeRecordBatch(recordBatch) {\n    const { byteLength, fieldNodes, buffers, buffersMeta } = new RecordBatchSerializer().visitRecordBatch(recordBatch);\n    const rbMeta = new RecordBatchMetadata(MetadataVersion.V4, recordBatch.length, fieldNodes, buffersMeta);\n    const rbData = concatBuffersWithMetadata(byteLength, buffers, buffersMeta);\n    return serializeMessage(rbMeta, rbData);\n}\nexport function serializeDictionaryBatch(dictionary, id, isDelta = false) {\n    const { byteLength, fieldNodes, buffers, buffersMeta } = new RecordBatchSerializer().visitRecordBatch(RecordBatch.from([dictionary]));\n    const rbMeta = new RecordBatchMetadata(MetadataVersion.V4, dictionary.length, fieldNodes, buffersMeta);\n    const dbMeta = new DictionaryBatch(MetadataVersion.V4, rbMeta, id, isDelta);\n    const rbData = concatBuffersWithMetadata(byteLength, buffers, buffersMeta);\n    return serializeMessage(dbMeta, rbData);\n}\nexport function serializeMessage(message, data) {\n    const b = new Builder();\n    _Message.finishMessageBuffer(b, writeMessage(b, message));\n    // Slice out the buffer that contains the message metadata\n    const metadataBytes = b.asUint8Array();\n    // Reserve 4 bytes for writing the message size at the front.\n    // Metadata length includes the metadata byteLength + the 4\n    // bytes for the length, and rounded up to the nearest 8 bytes.\n    const metadataLength = align(PADDING + metadataBytes.byteLength, 8);\n    // + the length of the optional data buffer at the end, padded\n    const dataByteLength = data ? data.byteLength : 0;\n    // ensure the entire message is aligned to an 8-byte boundary\n    const messageBytes = new Uint8Array(align(metadataLength + dataByteLength, 8));\n    // Write the metadata length into the first 4 bytes, but subtract the\n    // bytes we use to hold the length itself.\n    new DataView(messageBytes.buffer).setInt32(0, metadataLength - PADDING, platformIsLittleEndian);\n    // Copy the metadata bytes into the message buffer\n    messageBytes.set(metadataBytes, PADDING);\n    // Copy the optional data buffer after the metadata bytes\n    (data && dataByteLength > 0) && messageBytes.set(data, metadataLength);\n    // if (messageBytes.byteLength % 8 !== 0) { debugger; }\n    // Return the metadata length because we need to write it into each FileBlock also\n    return { metadataLength, buffer: messageBytes };\n}\nexport function serializeFooter(footer) {\n    const b = new Builder();\n    _Footer.finishFooterBuffer(b, writeFooter(b, footer));\n    // Slice out the buffer that contains the footer metadata\n    const footerBytes = b.asUint8Array();\n    const metadataLength = footerBytes.byteLength;\n    return { metadataLength, buffer: footerBytes };\n}\nexport class RecordBatchSerializer extends VectorVisitor {\n    constructor() {\n        super(...arguments);\n        this.byteLength = 0;\n        this.buffers = [];\n        this.fieldNodes = [];\n        this.buffersMeta = [];\n    }\n    visitRecordBatch(recordBatch) {\n        this.buffers = [];\n        this.byteLength = 0;\n        this.fieldNodes = [];\n        this.buffersMeta = [];\n        for (let vector, index = -1, numCols = recordBatch.numCols; ++index < numCols;) {\n            if (vector = recordBatch.getChildAt(index)) {\n                this.visit(vector);\n            }\n        }\n        return this;\n    }\n    visit(vector) {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            this.fieldNodes.push(new FieldMetadata(length, nullCount));\n            const nullBitmapAlignment = length <= 64 ? 8 : 64;\n            const nullBitmap = nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : this.getTruncatedBitmap(data.offset, length, data.nullBitmap);\n            this.addBuffer(nullBitmap, nullBitmapAlignment);\n        }\n        return super.visit(vector);\n    }\n    visitNull(_nullz) { return this; }\n    visitBool(vector) { return this.visitBoolVector(vector); }\n    visitInt(vector) { return this.visitFlatVector(vector); }\n    visitFloat(vector) { return this.visitFlatVector(vector); }\n    visitUtf8(vector) { return this.visitFlatListVector(vector); }\n    visitBinary(vector) { return this.visitFlatListVector(vector); }\n    visitDate(vector) { return this.visitFlatVector(vector); }\n    visitTimestamp(vector) { return this.visitFlatVector(vector); }\n    visitTime(vector) { return this.visitFlatVector(vector); }\n    visitDecimal(vector) { return this.visitFlatVector(vector); }\n    visitInterval(vector) { return this.visitFlatVector(vector); }\n    visitList(vector) { return this.visitListVector(vector); }\n    visitStruct(vector) { return this.visitNestedVector(vector); }\n    visitFixedSizeBinary(vector) { return this.visitFlatVector(vector); }\n    visitFixedSizeList(vector) { return this.visitListVector(vector); }\n    visitMap(vector) { return this.visitNestedVector(vector); }\n    visitDictionary(vector) {\n        // Dictionary written out separately. Slice offset contained in the indices\n        return this.visit(vector.indices);\n    }\n    visitUnion(vector) {\n        const { data, type, length } = vector;\n        const { offset: sliceOffset, typeIds } = data;\n        // All Union Vectors have a typeIds buffer\n        this.addBuffer(typeIds);\n        // If this is a Sparse Union, treat it like all other Nested types\n        if (type.mode === UnionMode.Sparse) {\n            return this.visitNestedVector(vector);\n        }\n        else if (type.mode === UnionMode.Dense) {\n            // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n            const valueOffsets = data.valueOffsets;\n            if (sliceOffset <= 0) {\n                // If the Vector hasn't been sliced, write the existing valueOffsets\n                this.addBuffer(valueOffsets);\n                // We can treat this like all other Nested types\n                return this.visitNestedVector(vector);\n            }\n            else {\n                // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n                // each child vector, we need to \"rebase\" the valueOffsets for each child\n                // Union typeIds are not necessary 0-indexed\n                const maxChildTypeId = Math.max(...type.typeIds);\n                const childLengths = new Int32Array(maxChildTypeId + 1);\n                // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n                const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n                const shiftedOffsets = new Int32Array(length);\n                const unshiftedOffsets = this.getZeroBasedValueOffsets(sliceOffset, length, valueOffsets);\n                for (let typeId, shift, index = -1; ++index < length;) {\n                    typeId = typeIds[index];\n                    // ~(-1) used to be faster than x === -1, so maybe worth benchmarking the difference of these two impls for large dense unions:\n                    // ~(shift = childOffsets[typeId]) || (shift = childOffsets[typeId] = unshiftedOffsets[index]);\n                    // Going with this form for now, as it's more readable\n                    if ((shift = childOffsets[typeId]) === -1) {\n                        shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                    }\n                    shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                    ++childLengths[typeId];\n                }\n                this.addBuffer(shiftedOffsets);\n                // Slice and visit children accordingly\n                for (let childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                    const typeId = type.typeIds[childIndex];\n                    const child = vector.getChildAt(childIndex);\n                    this.visit(child.slice(childOffsets[typeId], Math.min(length, childLengths[typeId])));\n                }\n            }\n        }\n        return this;\n    }\n    visitBoolVector(vector) {\n        // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n        let bitmap;\n        let values, { data, length } = vector;\n        let alignment = length <= 64 ? 8 : 64;\n        if (vector.nullCount >= length) {\n            // If all values are null, just insert a placeholder empty data buffer (fastest path)\n            bitmap = new Uint8Array(0);\n        }\n        else if (!((values = data.values) instanceof Uint8Array)) {\n            // Otherwise if the underlying data *isn't* a Uint8Array, enumerate\n            // the values as bools and re-pack them into a Uint8Array (slow path)\n            bitmap = packBools(vector);\n        }\n        else {\n            // otherwise just slice the bitmap (fast path)\n            bitmap = this.getTruncatedBitmap(data.offset, length, values);\n        }\n        this.addBuffer(bitmap, alignment);\n        return this;\n    }\n    visitFlatVector(vector) {\n        const { view, data } = vector;\n        const { offset, length, values } = data;\n        const scaledLength = length * (view.size || 1);\n        return this.addBuffer(values.subarray(offset, scaledLength));\n    }\n    visitFlatListVector(vector) {\n        const { data, length } = vector;\n        const { offset, values, valueOffsets } = data;\n        const firstOffset = valueOffsets[0];\n        const lastOffset = valueOffsets[length];\n        const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n        // Push in the order FlatList types read their buffers\n        // valueOffsets buffer first\n        this.addBuffer(this.getZeroBasedValueOffsets(offset, length, valueOffsets));\n        // sliced values buffer second\n        this.addBuffer(values.subarray(firstOffset + offset, firstOffset + offset + byteLength));\n        return this;\n    }\n    visitListVector(vector) {\n        const { data, length } = vector;\n        const { offset, valueOffsets } = data;\n        // If we have valueOffsets (ListVector), push that buffer first\n        if (valueOffsets) {\n            this.addBuffer(this.getZeroBasedValueOffsets(offset, length, valueOffsets));\n        }\n        // Then insert the List's values child\n        return this.visit(vector.getChildAt(0));\n    }\n    visitNestedVector(vector) {\n        // Visit the children accordingly\n        const numChildren = (vector.type.children || []).length;\n        for (let child, childIndex = -1; ++childIndex < numChildren;) {\n            if (child = vector.getChildAt(childIndex)) {\n                this.visit(child);\n            }\n        }\n        return this;\n    }\n    addBuffer(values, alignment = 64) {\n        const length = align(values.byteLength, alignment);\n        this.buffers.push(values);\n        this.buffersMeta.push(new BufferMetadata(this.byteLength, length));\n        this.byteLength += length;\n        return this;\n    }\n    getTruncatedBitmap(offset, length, bitmap) {\n        const alignedLength = align(length, length <= 64 ? 8 : 64);\n        if (offset > 0 || bitmap.length < alignedLength) {\n            // With a sliced array / non-zero offset, we have to copy the bitmap\n            const bytes = new Uint8Array(alignedLength);\n            bytes.set((offset % 8 === 0)\n                // If the slice offset is aligned to 1 byte, it's safe to slice the nullBitmap directly\n                ? bitmap.subarray(offset >> 3)\n                // iterate each bit starting from the slice offset, and repack into an aligned nullBitmap\n                : packBools(iterateBits(bitmap, offset, length, null, getBool)));\n            return bytes;\n        }\n        return bitmap;\n    }\n    getZeroBasedValueOffsets(offset, length, valueOffsets) {\n        // If we have a non-zero offset, then the value offsets do not start at\n        // zero. We must a) create a new offsets array with shifted offsets and\n        // b) slice the values array accordingly\n        if (offset > 0 || valueOffsets[0] !== 0) {\n            const startOffset = valueOffsets[0];\n            const destOffsets = new Int32Array(length + 1);\n            for (let index = -1; ++index < length;) {\n                destOffsets[index] = valueOffsets[index] - startOffset;\n            }\n            // Final offset\n            destOffsets[length] = valueOffsets[length] - startOffset;\n            return destOffsets;\n        }\n        return valueOffsets;\n    }\n}\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nvar _Block = File_.org.apache.arrow.flatbuf.Block;\nvar _Footer = File_.org.apache.arrow.flatbuf.Footer;\nvar _Field = Schema_.org.apache.arrow.flatbuf.Field;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nvar _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nvar _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nvar _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nvar _Null = Schema_.org.apache.arrow.flatbuf.Null;\nvar _Int = Schema_.org.apache.arrow.flatbuf.Int;\nvar _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nvar _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nvar _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nvar _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nvar _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nvar _Date = Schema_.org.apache.arrow.flatbuf.Date;\nvar _Time = Schema_.org.apache.arrow.flatbuf.Time;\nvar _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nvar _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nvar _List = Schema_.org.apache.arrow.flatbuf.List;\nvar _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nvar _Union = Schema_.org.apache.arrow.flatbuf.Union;\nvar _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nvar _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nvar _Map = Schema_.org.apache.arrow.flatbuf.Map;\nexport class TypeSerializer extends TypeVisitor {\n    constructor(builder) {\n        super();\n        this.builder = builder;\n    }\n    visitNull(_node) {\n        const b = this.builder;\n        return (_Null.startNull(b) ||\n            _Null.endNull(b));\n    }\n    visitInt(node) {\n        const b = this.builder;\n        return (_Int.startInt(b) ||\n            _Int.addBitWidth(b, node.bitWidth) ||\n            _Int.addIsSigned(b, node.isSigned) ||\n            _Int.endInt(b));\n    }\n    visitFloat(node) {\n        const b = this.builder;\n        return (_FloatingPoint.startFloatingPoint(b) ||\n            _FloatingPoint.addPrecision(b, node.precision) ||\n            _FloatingPoint.endFloatingPoint(b));\n    }\n    visitBinary(_node) {\n        const b = this.builder;\n        return (_Binary.startBinary(b) ||\n            _Binary.endBinary(b));\n    }\n    visitBool(_node) {\n        const b = this.builder;\n        return (_Bool.startBool(b) ||\n            _Bool.endBool(b));\n    }\n    visitUtf8(_node) {\n        const b = this.builder;\n        return (_Utf8.startUtf8(b) ||\n            _Utf8.endUtf8(b));\n    }\n    visitDecimal(node) {\n        const b = this.builder;\n        return (_Decimal.startDecimal(b) ||\n            _Decimal.addScale(b, node.scale) ||\n            _Decimal.addPrecision(b, node.precision) ||\n            _Decimal.endDecimal(b));\n    }\n    visitDate(node) {\n        const b = this.builder;\n        return _Date.startDate(b) || _Date.addUnit(b, node.unit) || _Date.endDate(b);\n    }\n    visitTime(node) {\n        const b = this.builder;\n        return (_Time.startTime(b) ||\n            _Time.addUnit(b, node.unit) ||\n            _Time.addBitWidth(b, node.bitWidth) ||\n            _Time.endTime(b));\n    }\n    visitTimestamp(node) {\n        const b = this.builder;\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        return (_Timestamp.startTimestamp(b) ||\n            _Timestamp.addUnit(b, node.unit) ||\n            (timezone !== undefined && _Timestamp.addTimezone(b, timezone)) ||\n            _Timestamp.endTimestamp(b));\n    }\n    visitInterval(node) {\n        const b = this.builder;\n        return (_Interval.startInterval(b) || _Interval.addUnit(b, node.unit) || _Interval.endInterval(b));\n    }\n    visitList(_node) {\n        const b = this.builder;\n        return (_List.startList(b) ||\n            _List.endList(b));\n    }\n    visitStruct(_node) {\n        const b = this.builder;\n        return (_Struct.startStruct_(b) ||\n            _Struct.endStruct_(b));\n    }\n    visitUnion(node) {\n        const b = this.builder;\n        const typeIds = _Union.startTypeIdsVector(b, node.typeIds.length) ||\n            _Union.createTypeIdsVector(b, node.typeIds);\n        return (_Union.startUnion(b) ||\n            _Union.addMode(b, node.mode) ||\n            _Union.addTypeIds(b, typeIds) ||\n            _Union.endUnion(b));\n    }\n    visitDictionary(node) {\n        const b = this.builder;\n        const indexType = this.visit(node.indices);\n        return (_DictionaryEncoding.startDictionaryEncoding(b) ||\n            _DictionaryEncoding.addId(b, new Long(node.id, 0)) ||\n            _DictionaryEncoding.addIsOrdered(b, node.isOrdered) ||\n            (indexType !== undefined && _DictionaryEncoding.addIndexType(b, indexType)) ||\n            _DictionaryEncoding.endDictionaryEncoding(b));\n    }\n    visitFixedSizeBinary(node) {\n        const b = this.builder;\n        return (_FixedSizeBinary.startFixedSizeBinary(b) ||\n            _FixedSizeBinary.addByteWidth(b, node.byteWidth) ||\n            _FixedSizeBinary.endFixedSizeBinary(b));\n    }\n    visitFixedSizeList(node) {\n        const b = this.builder;\n        return (_FixedSizeList.startFixedSizeList(b) ||\n            _FixedSizeList.addListSize(b, node.listSize) ||\n            _FixedSizeList.endFixedSizeList(b));\n    }\n    visitMap(node) {\n        const b = this.builder;\n        return (_Map.startMap(b) ||\n            _Map.addKeysSorted(b, node.keysSorted) ||\n            _Map.endMap(b));\n    }\n}\nfunction concatBuffersWithMetadata(totalByteLength, buffers, buffersMeta) {\n    const data = new Uint8Array(totalByteLength);\n    for (let i = -1, n = buffers.length; ++i < n;) {\n        const { offset, length } = buffersMeta[i];\n        const { buffer, byteOffset, byteLength } = buffers[i];\n        const realBufferLength = Math.min(length, byteLength);\n        if (realBufferLength > 0) {\n            data.set(new Uint8Array(buffer, byteOffset, realBufferLength), offset);\n        }\n    }\n    return data;\n}\nfunction writeFooter(b, node) {\n    let schemaOffset = writeSchema(b, node.schema);\n    let recordBatches = (node.recordBatches || []);\n    let dictionaryBatches = (node.dictionaryBatches || []);\n    let recordBatchesOffset = _Footer.startRecordBatchesVector(b, recordBatches.length) ||\n        mapReverse(recordBatches, (rb) => writeBlock(b, rb)) &&\n            b.endVector();\n    let dictionaryBatchesOffset = _Footer.startDictionariesVector(b, dictionaryBatches.length) ||\n        mapReverse(dictionaryBatches, (db) => writeBlock(b, db)) &&\n            b.endVector();\n    return (_Footer.startFooter(b) ||\n        _Footer.addSchema(b, schemaOffset) ||\n        _Footer.addVersion(b, node.schema.version) ||\n        _Footer.addRecordBatches(b, recordBatchesOffset) ||\n        _Footer.addDictionaries(b, dictionaryBatchesOffset) ||\n        _Footer.endFooter(b));\n}\nfunction writeBlock(b, node) {\n    return _Block.createBlock(b, new Long(node.offset, 0), node.metaDataLength, new Long(node.bodyLength, 0));\n}\nfunction writeMessage(b, node) {\n    let messageHeaderOffset = 0;\n    if (Message.isSchema(node)) {\n        messageHeaderOffset = writeSchema(b, node);\n    }\n    else if (Message.isRecordBatch(node)) {\n        messageHeaderOffset = writeRecordBatch(b, node);\n    }\n    else if (Message.isDictionaryBatch(node)) {\n        messageHeaderOffset = writeDictionaryBatch(b, node);\n    }\n    return (_Message.startMessage(b) ||\n        _Message.addVersion(b, node.version) ||\n        _Message.addHeader(b, messageHeaderOffset) ||\n        _Message.addHeaderType(b, node.headerType) ||\n        _Message.addBodyLength(b, new Long(node.bodyLength, 0)) ||\n        _Message.endMessage(b));\n}\nfunction writeSchema(b, node) {\n    const fieldOffsets = node.fields.map((f) => writeField(b, f));\n    const fieldsOffset = _Schema.startFieldsVector(b, fieldOffsets.length) ||\n        _Schema.createFieldsVector(b, fieldOffsets);\n    return (_Schema.startSchema(b) ||\n        _Schema.addFields(b, fieldsOffset) ||\n        _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big) ||\n        _Schema.endSchema(b));\n}\nfunction writeRecordBatch(b, node) {\n    let nodes = (node.nodes || []);\n    let buffers = (node.buffers || []);\n    let nodesOffset = _RecordBatch.startNodesVector(b, nodes.length) ||\n        mapReverse(nodes, (n) => writeFieldNode(b, n)) &&\n            b.endVector();\n    let buffersOffset = _RecordBatch.startBuffersVector(b, buffers.length) ||\n        mapReverse(buffers, (b_) => writeBuffer(b, b_)) &&\n            b.endVector();\n    return (_RecordBatch.startRecordBatch(b) ||\n        _RecordBatch.addLength(b, new Long(node.length, 0)) ||\n        _RecordBatch.addNodes(b, nodesOffset) ||\n        _RecordBatch.addBuffers(b, buffersOffset) ||\n        _RecordBatch.endRecordBatch(b));\n}\nfunction writeDictionaryBatch(b, node) {\n    const dataOffset = writeRecordBatch(b, node.data);\n    return (_DictionaryBatch.startDictionaryBatch(b) ||\n        _DictionaryBatch.addId(b, new Long(node.id, 0)) ||\n        _DictionaryBatch.addIsDelta(b, node.isDelta) ||\n        _DictionaryBatch.addData(b, dataOffset) ||\n        _DictionaryBatch.endDictionaryBatch(b));\n}\nfunction writeBuffer(b, node) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\nfunction writeFieldNode(b, node) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\nfunction writeField(b, node) {\n    let typeOffset = -1;\n    let type = node.type;\n    let typeId = node.typeId;\n    let name = undefined;\n    let metadata = undefined;\n    let dictionary = undefined;\n    if (!DataType.isDictionary(type)) {\n        typeOffset = new TypeSerializer(b).visit(type);\n    }\n    else {\n        typeId = type.dictionary.TType;\n        dictionary = new TypeSerializer(b).visit(type);\n        typeOffset = new TypeSerializer(b).visit(type.dictionary);\n    }\n    let children = _Field.createChildrenVector(b, (type.children || []).map((f) => writeField(b, f)));\n    if (node.metadata && node.metadata.size > 0) {\n        metadata = _Field.createCustomMetadataVector(b, [...node.metadata].map(([k, v]) => {\n            const key = b.createString(k);\n            const val = b.createString(v);\n            return (_KeyValue.startKeyValue(b) ||\n                _KeyValue.addKey(b, key) ||\n                _KeyValue.addValue(b, val) ||\n                _KeyValue.endKeyValue(b));\n        }));\n    }\n    if (node.name) {\n        name = b.createString(node.name);\n    }\n    return (_Field.startField(b) ||\n        _Field.addType(b, typeOffset) ||\n        _Field.addTypeType(b, typeId) ||\n        _Field.addChildren(b, children) ||\n        _Field.addNullable(b, !!node.nullable) ||\n        (name !== undefined && _Field.addName(b, name)) ||\n        (dictionary !== undefined && _Field.addDictionary(b, dictionary)) ||\n        (metadata !== undefined && _Field.addCustomMetadata(b, metadata)) ||\n        _Field.endField(b));\n}\nfunction mapReverse(source, callbackfn) {\n    const result = new Array(source.length);\n    for (let i = -1, j = source.length; --j > -1;) {\n        result[i] = callbackfn(source[j], i, source);\n    }\n    return result;\n}\nconst platformIsLittleEndian = (function () {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS16187549871986683199 from './Schema';\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                flatbuf.Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let MessageHeader;\n                (function (MessageHeader) {\n                    MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n                    MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n                    MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n                    MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n                    MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n                })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FieldNode {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FieldNode}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * The number of value slots in the Arrow array at this level of a nested\n                     * tree\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * The number of observed nulls. Fields with null_count == 0 may choose not\n                     * to write their physical validity bitmap out as a materialized buffer,\n                     * instead setting the length of the bitmap buffer to 0.\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    nullCount() {\n                        return this.bb.readInt64(this.bb_pos + 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} length\n                     * @param {flatbuffers.Long} null_count\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createFieldNode(builder, length, null_count) {\n                        builder.prep(8, 16);\n                        builder.writeInt64(null_count);\n                        builder.writeInt64(length);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.FieldNode = FieldNode;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class RecordBatch {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {RecordBatch}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {RecordBatch=} obj\n                     * @returns {RecordBatch}\n                     */\n                    static getRootAsRecordBatch(bb, obj) {\n                        return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * number of records / rows. The arrays in the batch should all have this\n                     * length\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * Nodes correspond to the pre-ordered flattened logical schema\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n                     * @returns {org.apache.arrow.flatbuf.FieldNode}\n                     */\n                    nodes(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    nodesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * Buffers correspond to the pre-ordered flattened buffer tree\n                     *\n                     * The number of buffers appended to this list depends on the schema. For\n                     * example, most primitive arrays will have 2 buffers, 1 for the validity\n                     * bitmap and 1 for the values. For struct arrays, there will only be a\n                     * single buffer for the validity (nulls) bitmap\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n                     * @returns {org.apache.arrow.flatbuf.Buffer}\n                     */\n                    buffers(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    buffersLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startRecordBatch(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} length\n                     */\n                    static addLength(builder, length) {\n                        builder.addFieldInt64(0, length, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} nodesOffset\n                     */\n                    static addNodes(builder, nodesOffset) {\n                        builder.addFieldOffset(1, nodesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startNodesVector(builder, numElems) {\n                        builder.startVector(16, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} buffersOffset\n                     */\n                    static addBuffers(builder, buffersOffset) {\n                        builder.addFieldOffset(2, buffersOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startBuffersVector(builder, numElems) {\n                        builder.startVector(16, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endRecordBatch(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.RecordBatch = RecordBatch;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class DictionaryBatch {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {DictionaryBatch}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {DictionaryBatch=} obj\n                     * @returns {DictionaryBatch}\n                     */\n                    static getRootAsDictionaryBatch(bb, obj) {\n                        return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {flatbuffers.Long}\n                     */\n                    id() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n                     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n                     */\n                    data(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * If isDelta is true the values in the dictionary are to be appended to a\n                     * dictionary with the indicated id\n                     *\n                     * @returns {boolean}\n                     */\n                    isDelta() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDictionaryBatch(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} id\n                     */\n                    static addId(builder, id) {\n                        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dataOffset\n                     */\n                    static addData(builder, dataOffset) {\n                        builder.addFieldOffset(1, dataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isDelta\n                     */\n                    static addIsDelta(builder, isDelta) {\n                        builder.addFieldInt8(2, +isDelta, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDictionaryBatch(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.DictionaryBatch = DictionaryBatch;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Message {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Message}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Message=} obj\n                     * @returns {Message}\n                     */\n                    static getRootAsMessage(bb, obj) {\n                        return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n                     */\n                    version() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n                     */\n                    headerType() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n                    }\n                    /**\n                     * @param {flatbuffers.Table} obj\n                     * @returns {?flatbuffers.Table}\n                     */\n                    header(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n                    }\n                    /**\n                     * @returns {flatbuffers.Long}\n                     */\n                    bodyLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startMessage(builder) {\n                        builder.startObject(4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n                     */\n                    static addVersion(builder, version) {\n                        builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n                     */\n                    static addHeaderType(builder, headerType) {\n                        builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} headerOffset\n                     */\n                    static addHeader(builder, headerOffset) {\n                        builder.addFieldOffset(2, headerOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} bodyLength\n                     */\n                    static addBodyLength(builder, bodyLength) {\n                        builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endMessage(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishMessageBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Message = Message;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport function align(value, alignment) {\n    return value + padding(value, alignment);\n}\nexport function padding(value, alignment) {\n    return (value % alignment === 0 ? 0 : alignment - value % alignment);\n}\nexport function getBool(_data, _index, byte, bit) {\n    return (byte & 1 << bit) !== 0;\n}\nexport function getBit(_data, _index, byte, bit) {\n    return (byte & 1 << bit) >> bit;\n}\nexport function setBool(bytes, index, value) {\n    return value ?\n        !!(bytes[index >> 3] |= (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false;\n}\nexport function packBools(values) {\n    let n = 0, i = 0;\n    let xs = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) {\n        xs[i++] = byte;\n    }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do {\n            xs[i] = 0;\n        } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\nexport function* iterateBits(bytes, begin, length, context, get) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\nexport function popcnt_bit_range(data, lhs, rhs) {\n    if (rhs - lhs <= 0) {\n        return 0;\n    }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3));\n}\nexport function popcnt_array(arr, byteOffset, byteLength) {\n    let cnt = 0, pos = byteOffset | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\nexport function popcnt_uint32(uint32) {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* tslint:disable:class-name */\nimport { align } from '../util/bit';\nimport { MessageHeader } from '../type';\nexport class Footer {\n    constructor(dictionaryBatches, recordBatches, schema) {\n        this.dictionaryBatches = dictionaryBatches;\n        this.recordBatches = recordBatches;\n        this.schema = schema;\n    }\n}\nexport class FileBlock {\n    constructor(metaDataLength, bodyLength, offset) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\nexport class Message {\n    constructor(version, bodyLength, headerType) {\n        this.version = version;\n        this.headerType = headerType;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    static isSchema(m) { return m.headerType === MessageHeader.Schema; }\n    static isRecordBatch(m) { return m.headerType === MessageHeader.RecordBatch; }\n    static isDictionaryBatch(m) { return m.headerType === MessageHeader.DictionaryBatch; }\n}\nexport class RecordBatchMetadata extends Message {\n    constructor(version, length, nodes, buffers, bodyLength) {\n        if (bodyLength === void (0)) {\n            bodyLength = buffers.reduce((s, b) => align(s + b.length + (b.offset - s), 8), 0);\n        }\n        super(version, bodyLength, MessageHeader.RecordBatch);\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\nexport class DictionaryBatch extends Message {\n    constructor(version, data, id, isDelta = false) {\n        super(version, data.bodyLength, MessageHeader.DictionaryBatch);\n        this.isDelta = isDelta;\n        this.data = data;\n        this.id = typeof id === 'number' ? id : id.low;\n    }\n    static getId() { return DictionaryBatch.atomicDictionaryId++; }\n    get nodes() { return this.data.nodes; }\n    get buffers() { return this.data.buffers; }\n}\nDictionaryBatch.atomicDictionaryId = 0;\nexport class BufferMetadata {\n    constructor(offset, length) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\nexport class FieldMetadata {\n    constructor(length, nullCount) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\nimport { flatbuffers } from 'flatbuffers';\nimport { DictionaryBatch } from './ipc/metadata';\nimport { TypeVisitor } from './visitor';\nexport var Long = flatbuffers.Long;\nexport var ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport var DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport var TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport var Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport var UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport var VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport var IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport var MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport var MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nexport class Schema {\n    constructor(fields, metadata, version = MetadataVersion.V4, dictionaries = new Map()) {\n        this.fields = fields;\n        this.version = version;\n        this.metadata = metadata;\n        this.dictionaries = dictionaries;\n    }\n    static from(vectors) {\n        return new Schema(vectors.map((v, i) => new Field('' + i, v.type)));\n    }\n    get bodyLength() { return this._bodyLength; }\n    get headerType() { return this._headerType; }\n    select(...fieldNames) {\n        const namesToKeep = fieldNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        const newDictFields = new Map(), newFields = this.fields.filter((f) => namesToKeep[f.name]);\n        this.dictionaries.forEach((f, dictId) => (namesToKeep[f.name]) && newDictFields.set(dictId, f));\n        return new Schema(newFields, this.metadata, this.version, newDictFields);\n    }\n}\nSchema[Symbol.toStringTag] = ((prototype) => {\n    prototype._bodyLength = 0;\n    prototype._headerType = MessageHeader.Schema;\n    return 'Schema';\n})(Schema.prototype);\nexport class Field {\n    constructor(name, type, nullable = false, metadata) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata;\n    }\n    toString() { return `${this.name}: ${this.type}`; }\n    get typeId() { return this.type.TType; }\n    get [Symbol.toStringTag]() { return 'Field'; }\n    get indices() {\n        return DataType.isDictionary(this.type) ? this.type.indices : this.type;\n    }\n}\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\nexport var Type;\n(function (Type) {\n    Type[Type[\"NONE\"] = 0] = \"NONE\";\n    Type[Type[\"Null\"] = 1] = \"Null\";\n    Type[Type[\"Int\"] = 2] = \"Int\";\n    Type[Type[\"Float\"] = 3] = \"Float\";\n    Type[Type[\"Binary\"] = 4] = \"Binary\";\n    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n    Type[Type[\"Bool\"] = 6] = \"Bool\";\n    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n    Type[Type[\"Date\"] = 8] = \"Date\";\n    Type[Type[\"Time\"] = 9] = \"Time\";\n    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n    Type[Type[\"Interval\"] = 11] = \"Interval\";\n    Type[Type[\"List\"] = 12] = \"List\";\n    Type[Type[\"Struct\"] = 13] = \"Struct\";\n    Type[Type[\"Union\"] = 14] = \"Union\";\n    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n    Type[Type[\"Map\"] = 17] = \"Map\";\n    Type[\"Dictionary\"] = \"Dictionary\";\n    Type[\"DenseUnion\"] = \"DenseUnion\";\n    Type[\"SparseUnion\"] = \"SparseUnion\";\n})(Type || (Type = {}));\nexport class DataType {\n    constructor(TType, children) {\n        this.TType = TType;\n        this.children = children;\n    }\n    static isNull(x) { return x && x.TType === Type.Null; }\n    static isInt(x) { return x && x.TType === Type.Int; }\n    static isFloat(x) { return x && x.TType === Type.Float; }\n    static isBinary(x) { return x && x.TType === Type.Binary; }\n    static isUtf8(x) { return x && x.TType === Type.Utf8; }\n    static isBool(x) { return x && x.TType === Type.Bool; }\n    static isDecimal(x) { return x && x.TType === Type.Decimal; }\n    static isDate(x) { return x && x.TType === Type.Date; }\n    static isTime(x) { return x && x.TType === Type.Time; }\n    static isTimestamp(x) { return x && x.TType === Type.Timestamp; }\n    static isInterval(x) { return x && x.TType === Type.Interval; }\n    static isList(x) { return x && x.TType === Type.List; }\n    static isStruct(x) { return x && x.TType === Type.Struct; }\n    static isUnion(x) { return x && x.TType === Type.Union; }\n    static isDenseUnion(x) { return x && x.TType === Type.DenseUnion; }\n    static isSparseUnion(x) { return x && x.TType === Type.SparseUnion; }\n    static isFixedSizeBinary(x) { return x && x.TType === Type.FixedSizeBinary; }\n    static isFixedSizeList(x) { return x && x.TType === Type.FixedSizeList; }\n    static isMap(x) { return x && x.TType === Type.Map; }\n    static isDictionary(x) { return x && x.TType === Type.Dictionary; }\n    acceptTypeVisitor(visitor) {\n        return TypeVisitor.visitTypeInline(visitor, this);\n    }\n}\nDataType[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Array;\n    return proto[Symbol.toStringTag] = 'DataType';\n})(DataType.prototype);\nexport class Null extends DataType {\n    constructor() {\n        super(Type.Null);\n    }\n    toString() { return `Null`; }\n}\nNull[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Null';\n})(Null.prototype);\nexport class Int extends DataType {\n    constructor(isSigned, bitWidth) {\n        super(Type.Int);\n        this.isSigned = isSigned;\n        this.bitWidth = bitWidth;\n    }\n    get ArrayType() {\n        switch (this.bitWidth) {\n            case 8: return (this.isSigned ? Int8Array : Uint8Array);\n            case 16: return (this.isSigned ? Int16Array : Uint16Array);\n            case 32: return (this.isSigned ? Int32Array : Uint32Array);\n            case 64: return (this.isSigned ? Int32Array : Uint32Array);\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n}\nInt[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Int';\n})(Int.prototype);\nexport class Int8 extends Int {\n    constructor() { super(true, 8); }\n}\nexport class Int16 extends Int {\n    constructor() { super(true, 16); }\n}\nexport class Int32 extends Int {\n    constructor() { super(true, 32); }\n}\nexport class Int64 extends Int {\n    constructor() { super(true, 64); }\n}\nexport class Uint8 extends Int {\n    constructor() { super(false, 8); }\n}\nexport class Uint16 extends Int {\n    constructor() { super(false, 16); }\n}\nexport class Uint32 extends Int {\n    constructor() { super(false, 32); }\n}\nexport class Uint64 extends Int {\n    constructor() { super(false, 64); }\n}\nexport class Float extends DataType {\n    constructor(precision) {\n        super(Type.Float);\n        this.precision = precision;\n    }\n    // @ts-ignore\n    get ArrayType() {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `Float${(this.precision << 5) || 16}`; }\n}\nFloat[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Float';\n})(Float.prototype);\nexport class Float16 extends Float {\n    constructor() { super(Precision.HALF); }\n}\nexport class Float32 extends Float {\n    constructor() { super(Precision.SINGLE); }\n}\nexport class Float64 extends Float {\n    constructor() { super(Precision.DOUBLE); }\n}\nexport class Binary extends DataType {\n    constructor() {\n        super(Type.Binary);\n    }\n    toString() { return `Binary`; }\n}\nBinary[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Binary';\n})(Binary.prototype);\nexport class Utf8 extends DataType {\n    constructor() {\n        super(Type.Utf8);\n    }\n    toString() { return `Utf8`; }\n}\nUtf8[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Utf8';\n})(Utf8.prototype);\nexport class Bool extends DataType {\n    constructor() {\n        super(Type.Bool);\n    }\n    toString() { return `Bool`; }\n}\nBool[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Bool';\n})(Bool.prototype);\nexport class Decimal extends DataType {\n    constructor(scale, precision) {\n        super(Type.Decimal);\n        this.scale = scale;\n        this.precision = precision;\n    }\n    toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n}\nDecimal[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint32Array;\n    return proto[Symbol.toStringTag] = 'Decimal';\n})(Decimal.prototype);\nexport class Date_ extends DataType {\n    constructor(unit) {\n        super(Type.Date);\n        this.unit = unit;\n    }\n    toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n}\nDate_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Date';\n})(Date_.prototype);\nexport class Time extends DataType {\n    constructor(unit, bitWidth) {\n        super(Type.Time);\n        this.unit = unit;\n        this.bitWidth = bitWidth;\n    }\n    toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n}\nTime[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint32Array;\n    return proto[Symbol.toStringTag] = 'Time';\n})(Time.prototype);\nexport class Timestamp extends DataType {\n    constructor(unit, timezone) {\n        super(Type.Timestamp);\n        this.unit = unit;\n        this.timezone = timezone;\n    }\n    toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n}\nTimestamp[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Timestamp';\n})(Timestamp.prototype);\nexport class Interval extends DataType {\n    constructor(unit) {\n        super(Type.Interval);\n        this.unit = unit;\n    }\n    toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n}\nInterval[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Interval';\n})(Interval.prototype);\nexport class List extends DataType {\n    constructor(children) {\n        super(Type.List, children);\n        this.children = children;\n    }\n    toString() { return `List<${this.valueType}>`; }\n    get ArrayType() { return this.valueType.ArrayType; }\n    get valueType() { return this.children[0].type; }\n    get valueField() { return this.children[0]; }\n}\nList[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'List';\n})(List.prototype);\nexport class Struct extends DataType {\n    constructor(children) {\n        super(Type.Struct, children);\n        this.children = children;\n    }\n    toString() { return `Struct<${this.children.map((f) => f.type).join(`, `)}>`; }\n}\nStruct[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Struct';\n})(Struct.prototype);\nexport class Union extends DataType {\n    constructor(mode, typeIds, children) {\n        super((mode === UnionMode.Sparse ? Type.SparseUnion : Type.DenseUnion), children);\n        this.mode = mode;\n        this.typeIds = typeIds;\n        this.children = children;\n    }\n    toString() { return `${this[Symbol.toStringTag]}<${this.typeIds.map((x) => Type[x]).join(` | `)}>`; }\n}\nUnion[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int8Array;\n    return proto[Symbol.toStringTag] = 'Union';\n})(Union.prototype);\nexport class DenseUnion extends Union {\n    constructor(typeIds, children) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\nDenseUnion[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'DenseUnion';\n})(DenseUnion.prototype);\nexport class SparseUnion extends Union {\n    constructor(typeIds, children) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\nSparseUnion[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'SparseUnion';\n})(SparseUnion.prototype);\nexport class FixedSizeBinary extends DataType {\n    constructor(byteWidth) {\n        super(Type.FixedSizeBinary);\n        this.byteWidth = byteWidth;\n    }\n    toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n}\nFixedSizeBinary[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n})(FixedSizeBinary.prototype);\nexport class FixedSizeList extends DataType {\n    constructor(listSize, children) {\n        super(Type.FixedSizeList, children);\n        this.listSize = listSize;\n        this.children = children;\n    }\n    get ArrayType() { return this.valueType.ArrayType; }\n    get valueType() { return this.children[0].type; }\n    get valueField() { return this.children[0]; }\n    toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n}\nFixedSizeList[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'FixedSizeList';\n})(FixedSizeList.prototype);\nexport class Map_ extends DataType {\n    constructor(keysSorted, children) {\n        super(Type.Map, children);\n        this.keysSorted = keysSorted;\n        this.children = children;\n    }\n    toString() { return `Map<${this.children.join(`, `)}>`; }\n}\nMap_[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Map_';\n})(Map_.prototype);\nexport class Dictionary extends DataType {\n    constructor(dictionary, indices, id, isOrdered) {\n        super(Type.Dictionary);\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? DictionaryBatch.getId() : typeof id === 'number' ? id : id.low;\n    }\n    get ArrayType() { return this.dictionary.ArrayType; }\n    toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n}\nDictionary[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Dictionary';\n})(Dictionary.prototype);\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from './type';\nexport class TypeVisitor {\n    visit(type) {\n        return type.acceptTypeVisitor && type.acceptTypeVisitor(this) || null;\n    }\n    visitMany(types) {\n        return types.map((type) => this.visit(type));\n    }\n    static visitTypeInline(visitor, type) {\n        switch (type.TType) {\n            case Type.Null: return visitor.visitNull && visitor.visitNull(type);\n            case Type.Int: return visitor.visitInt && visitor.visitInt(type);\n            case Type.Float: return visitor.visitFloat && visitor.visitFloat(type);\n            case Type.Binary: return visitor.visitBinary && visitor.visitBinary(type);\n            case Type.Utf8: return visitor.visitUtf8 && visitor.visitUtf8(type);\n            case Type.Bool: return visitor.visitBool && visitor.visitBool(type);\n            case Type.Decimal: return visitor.visitDecimal && visitor.visitDecimal(type);\n            case Type.Date: return visitor.visitDate && visitor.visitDate(type);\n            case Type.Time: return visitor.visitTime && visitor.visitTime(type);\n            case Type.Timestamp: return visitor.visitTimestamp && visitor.visitTimestamp(type);\n            case Type.Interval: return visitor.visitInterval && visitor.visitInterval(type);\n            case Type.List: return visitor.visitList && visitor.visitList(type);\n            case Type.Struct: return visitor.visitStruct && visitor.visitStruct(type);\n            case Type.Union: return visitor.visitUnion && visitor.visitUnion(type);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(type);\n            case Type.FixedSizeList: return visitor.visitFixedSizeList && visitor.visitFixedSizeList(type);\n            case Type.Map: return visitor.visitMap && visitor.visitMap(type);\n            case Type.Dictionary: return visitor.visitDictionary && visitor.visitDictionary(type);\n            default: return null;\n        }\n    }\n}\nexport class VectorVisitor {\n    visit(vector) {\n        return vector.acceptVectorVisitor && vector.acceptVectorVisitor(this) || null;\n    }\n    visitMany(vectors) {\n        return vectors.map((vector) => this.visit(vector));\n    }\n    static visitTypeInline(visitor, type, vector) {\n        switch (type.TType) {\n            case Type.Null: return visitor.visitNull && visitor.visitNull(vector);\n            case Type.Int: return visitor.visitInt && visitor.visitInt(vector);\n            case Type.Float: return visitor.visitFloat && visitor.visitFloat(vector);\n            case Type.Binary: return visitor.visitBinary && visitor.visitBinary(vector);\n            case Type.Utf8: return visitor.visitUtf8 && visitor.visitUtf8(vector);\n            case Type.Bool: return visitor.visitBool && visitor.visitBool(vector);\n            case Type.Decimal: return visitor.visitDecimal && visitor.visitDecimal(vector);\n            case Type.Date: return visitor.visitDate && visitor.visitDate(vector);\n            case Type.Time: return visitor.visitTime && visitor.visitTime(vector);\n            case Type.Timestamp: return visitor.visitTimestamp && visitor.visitTimestamp(vector);\n            case Type.Interval: return visitor.visitInterval && visitor.visitInterval(vector);\n            case Type.List: return visitor.visitList && visitor.visitList(vector);\n            case Type.Struct: return visitor.visitStruct && visitor.visitStruct(vector);\n            case Type.Union: return visitor.visitUnion && visitor.visitUnion(vector);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(vector);\n            case Type.FixedSizeList: return visitor.visitFixedSizeList && visitor.visitFixedSizeList(vector);\n            case Type.Map: return visitor.visitMap && visitor.visitMap(vector);\n            case Type.Dictionary: return visitor.visitDictionary && visitor.visitDictionary(vector);\n            default: return null;\n        }\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { popcnt_bit_range } from './util/bit';\nimport { VectorType } from './type';\nexport function toTypedArray(ArrayType, values) {\n    if (!ArrayType && ArrayBuffer.isView(values)) {\n        return values;\n    }\n    return values instanceof ArrayType ? values\n        : !values || !ArrayBuffer.isView(values) ? ArrayType.from(values || [])\n            : new ArrayType(values.buffer, values.byteOffset, values.byteLength / ArrayType.BYTES_PER_ELEMENT);\n}\nexport const kUnknownNullCount = -1;\nexport class BaseData {\n    constructor(type, length, offset, nullCount) {\n        this.type = type;\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    }\n    get typeId() { return this.type.TType; }\n    get nullBitmap() { return this[VectorType.VALIDITY]; }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap;\n        if (nullCount === -1 && (nullBitmap = this[VectorType.VALIDITY])) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new BaseData(type, length, offset, nullCount);\n    }\n    slice(offset, length) {\n        return length <= 0 ? this : this.sliceInternal(this.clone(this.type, length, this.offset + offset, +(this._nullCount === 0) - 1), offset, length);\n    }\n    sliceInternal(clone, offset, length) {\n        let arr;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = this[VectorType.TYPE]) && (clone[VectorType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = this[VectorType.OFFSET]) && (clone[VectorType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = this[VectorType.DATA]) && (clone[VectorType.DATA] = this.sliceData(arr, offset, length));\n        return clone;\n    }\n    sliceData(data, offset, length) {\n        return data.subarray(offset, offset + length);\n    }\n    sliceOffsets(valueOffsets, offset, length) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n}\nexport class FlatData extends BaseData {\n    constructor(type, length, nullBitmap, data, offset, nullCount) {\n        super(type, length, offset, nullCount);\n        this[VectorType.DATA] = toTypedArray(this.ArrayType, data);\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    get values() { return this[VectorType.DATA]; }\n    get ArrayType() { return this.type.ArrayType; }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new this.constructor(type, length, this[VectorType.VALIDITY], this[VectorType.DATA], offset, nullCount);\n    }\n}\nexport class BoolData extends FlatData {\n    sliceData(data) { return data; }\n}\nexport class FlatListData extends FlatData {\n    constructor(type, length, nullBitmap, valueOffsets, data, offset, nullCount) {\n        super(type, length, nullBitmap, data, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    get values() { return this[VectorType.DATA]; }\n    get valueOffsets() { return this[VectorType.OFFSET]; }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new FlatListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this[VectorType.DATA], offset, nullCount);\n    }\n}\nexport class DictionaryData extends BaseData {\n    constructor(type, dictionary, indices) {\n        super(type, indices.length, indices.offset, indices._nullCount);\n        this._indices = indices;\n        this._dictionary = dictionary;\n    }\n    get indices() { return this._indices; }\n    get dictionary() { return this._dictionary; }\n    get nullCount() { return this._indices.nullCount; }\n    get nullBitmap() { return this._indices.nullBitmap; }\n    clone(type, length = this.length, offset = this.offset) {\n        const data = this._dictionary.data.clone(type.dictionary);\n        return new DictionaryData(this.type, this._dictionary.clone(data), this._indices.slice(offset - this.offset, length));\n    }\n    sliceInternal(clone, _offset, _length) {\n        clone.length = clone._indices.length;\n        clone._nullCount = clone._indices._nullCount;\n        return clone;\n    }\n}\nexport class NestedData extends BaseData {\n    constructor(type, length, nullBitmap, childData, offset, nullCount) {\n        super(type, length, offset, nullCount);\n        this.childData = childData;\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new NestedData(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount);\n    }\n    sliceInternal(clone, offset, length) {\n        if (!this[VectorType.OFFSET]) {\n            clone.childData = this.childData.map((child) => child.slice(offset, length));\n        }\n        return super.sliceInternal(clone, offset, length);\n    }\n}\nexport class SingleNestedData extends NestedData {\n    constructor(type, length, nullBitmap, valueChildData, offset, nullCount) {\n        super(type, length, nullBitmap, [valueChildData], offset, nullCount);\n        this._valuesData = valueChildData;\n    }\n    get values() { return this._valuesData; }\n}\nexport class ListData extends SingleNestedData {\n    constructor(type, length, nullBitmap, valueOffsets, valueChildData, offset, nullCount) {\n        super(type, length, nullBitmap, valueChildData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    get valueOffsets() { return this[VectorType.OFFSET]; }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new ListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this._valuesData, offset, nullCount);\n    }\n}\nexport class UnionData extends NestedData {\n    constructor(type, length, nullBitmap, typeIds, childData, offset, nullCount) {\n        super(type, length, nullBitmap, childData, offset, nullCount);\n        this[VectorType.TYPE] = toTypedArray(Int8Array, typeIds);\n    }\n    get typeIds() { return this[VectorType.TYPE]; }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new UnionData(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount);\n    }\n}\nexport class SparseUnionData extends UnionData {\n    constructor(type, length, nullBitmap, typeIds, childData, offset, nullCount) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n    }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new SparseUnionData(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount);\n    }\n}\nexport class DenseUnionData extends UnionData {\n    get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type, length, nullBitmap, typeIds, valueOffsets, childData, offset, nullCount) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new DenseUnionData(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this[VectorType.OFFSET], this.childData, offset, nullCount);\n    }\n}\nexport class ChunkedData extends BaseData {\n    constructor(type, length, chunkVectors, offset, nullCount, chunkOffsets) {\n        super(type, length, offset, nullCount);\n        this._chunkVectors = chunkVectors;\n        this._chunkOffsets = chunkOffsets || ChunkedData.computeOffsets(chunkVectors);\n    }\n    get chunkVectors() { return this._chunkVectors; }\n    get chunkOffsets() { return this._chunkOffsets; }\n    get chunkData() {\n        return this._chunkData || (this._chunkData = this._chunkVectors.map(({ data }) => data));\n    }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount === -1) {\n            this._nullCount = nullCount = this._chunkVectors.reduce((x, c) => x + c.nullCount, 0);\n        }\n        return nullCount;\n    }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new ChunkedData(type, length, this._chunkVectors.map((vec) => vec.clone(vec.data.clone(type))), offset, nullCount, this._chunkOffsets);\n    }\n    sliceInternal(clone, offset, length) {\n        const chunks = this._chunkVectors;\n        const offsets = this._chunkOffsets;\n        const chunkSlices = [];\n        for (let childIndex = -1, numChildren = chunks.length; ++childIndex < numChildren;) {\n            const child = chunks[childIndex];\n            const childLength = child.length;\n            const childOffset = offsets[childIndex];\n            // If the child is to the right of the slice boundary, exclude\n            if (childOffset >= offset + length) {\n                continue;\n            }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= childOffset + childLength) {\n                continue;\n            }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (childOffset >= offset && (childOffset + childLength) <= offset + length) {\n                chunkSlices.push(child);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - childOffset);\n            const end = begin + Math.min(childLength - begin, (offset + length) - childOffset);\n            chunkSlices.push(child.slice(begin, end));\n        }\n        clone._chunkVectors = chunkSlices;\n        clone._chunkOffsets = ChunkedData.computeOffsets(chunkSlices);\n        return clone;\n    }\n    static computeOffsets(childVectors) {\n        const childOffsets = new Uint32Array(childVectors.length + 1);\n        for (let index = 0, length = childOffsets.length, childOffset = childOffsets[0] = 0; ++index < length;) {\n            childOffsets[index] = (childOffset += childVectors[index - 1].length);\n        }\n        return childOffsets;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nexport class ChunkedView {\n    constructor(data) {\n        this.chunkVectors = data.chunkVectors;\n        this.chunkOffsets = data.chunkOffsets;\n    }\n    clone(data) {\n        return new ChunkedView(data);\n    }\n    *[Symbol.iterator]() {\n        for (const vector of this.chunkVectors) {\n            yield* vector;\n        }\n    }\n    getChildAt(index) {\n        return index < 0 ? null\n            : (this._children || (this._children = []))[index] ||\n                (this._children[index] = Vector.concat(...this.chunkVectors\n                    .map((chunk) => chunk.getChildAt(index))));\n    }\n    isValid(index) {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].isValid(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return false;\n    }\n    get(index) {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].get(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return null;\n    }\n    set(index, value) {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].set(index - pos, value);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n    }\n    toArray() {\n        const chunks = this.chunkVectors;\n        const numChunks = chunks.length;\n        if (numChunks === 1) {\n            return chunks[0].toArray();\n        }\n        let sources = new Array(numChunks);\n        let sourcesLen = 0, ArrayType = Array;\n        for (let index = -1; ++index < numChunks;) {\n            let source = chunks[index].toArray();\n            sourcesLen += (sources[index] = source).length;\n            if (ArrayType !== source.constructor) {\n                ArrayType = source.constructor;\n            }\n        }\n        let target = new ArrayType(sourcesLen);\n        let setValues = ArrayType === Array ? arraySet : typedArraySet;\n        for (let index = -1, offset = 0; ++index < numChunks;) {\n            offset = setValues(sources[index], target, offset);\n        }\n        return target;\n    }\n    indexOf(search) {\n        let offset = 0, result;\n        for (const vector of this.chunkVectors) {\n            result = vector.indexOf(search);\n            if (result !== -1) {\n                return result + offset;\n            }\n            offset += vector.length;\n        }\n        return -1;\n    }\n}\nfunction typedArraySet(source, target, index) {\n    return target.set(source, index) || index + source.length;\n}\nfunction arraySet(source, target, index) {\n    let dstIdx = index - 1, srcIdx = -1, srcLen = source.length;\n    while (++srcIdx < srcLen) {\n        target[++dstIdx] = source[srcIdx];\n    }\n    return dstIdx;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { getBool, setBool, iterateBits } from '../util/bit';\nexport class ValidityView {\n    constructor(data, view) {\n        this.view = view;\n        this.length = data.length;\n        this.offset = data.offset;\n        this.nullBitmap = data.nullBitmap;\n    }\n    get size() {\n        return this.view.size || 1;\n    }\n    clone(data) {\n        return new ValidityView(data, this.view.clone(data));\n    }\n    toArray() {\n        return [...this];\n    }\n    indexOf(search) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) {\n                return index;\n            }\n            ++index;\n        }\n        return -1;\n    }\n    isValid(index) {\n        const nullBitIndex = this.offset + index;\n        return getBool(null, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    get(index) {\n        const nullBitIndex = this.offset + index;\n        return this.getNullable(this.view, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    set(index, value) {\n        if (setBool(this.nullBitmap, this.offset + index, value != null)) {\n            this.view.set(index, value);\n        }\n    }\n    getChildAt(index) {\n        return this.view.getChildAt(index);\n    }\n    [Symbol.iterator]() {\n        return iterateBits(this.nullBitmap, this.offset, this.length, this.view, this.getNullable);\n    }\n    getNullable(view, index, byte, bit) {\n        return getBool(view, index, byte, bit) ? view.get(index) : null;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLENBQUM7SUFDL0QsQ0FBQztJQUNNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNwQixNQUFNLENBQUMsV0FBVyxDQUFxQixJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNuSCxDQUFDO0lBQ1MsV0FBVyxDQUFDLElBQWEsRUFBRSxLQUFhLEVBQUUsSUFBWSxFQUFFLEdBQVc7UUFDekUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3BFLENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3IvdmFsaWRpdHkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgVmlldywgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcbmltcG9ydCB7IE5lc3RlZFZpZXcgfSBmcm9tICcuL25lc3RlZCc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgSXRlcmFibGVBcnJheUxpa2UgfSBmcm9tICcuLi90eXBlJztcbmltcG9ydCB7IGdldEJvb2wsIHNldEJvb2wsIGl0ZXJhdGVCaXRzIH0gZnJvbSAnLi4vdXRpbC9iaXQnO1xuXG5leHBvcnQgY2xhc3MgVmFsaWRpdHlWaWV3PFQgZXh0ZW5kcyBEYXRhVHlwZT4gaW1wbGVtZW50cyBWaWV3PFQ+IHtcbiAgICBwcm90ZWN0ZWQgdmlldzogVmlldzxUPjtcbiAgICBwcm90ZWN0ZWQgbGVuZ3RoOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIG9mZnNldDogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBudWxsQml0bWFwOiBVaW50OEFycmF5O1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8VD4sIHZpZXc6IFZpZXc8VD4pIHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5sZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBkYXRhLm9mZnNldDtcbiAgICAgICAgdGhpcy5udWxsQml0bWFwID0gZGF0YS5udWxsQml0bWFwITtcbiAgICB9XG4gICAgcHVibGljIGdldCBzaXplKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAodGhpcy52aWV3IGFzIGFueSkuc2l6ZSB8fCAxO1xuICAgIH1cbiAgICBwdWJsaWMgY2xvbmUoZGF0YTogRGF0YTxUPik6IHRoaXMge1xuICAgICAgICByZXR1cm4gbmV3IFZhbGlkaXR5VmlldyhkYXRhLCB0aGlzLnZpZXcuY2xvbmUoZGF0YSkpIGFzIHRoaXM7XG4gICAgfVxuICAgIHB1YmxpYyB0b0FycmF5KCk6IEl0ZXJhYmxlQXJyYXlMaWtlPFRbJ1RWYWx1ZSddIHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXNdO1xuICAgIH1cbiAgICBwdWJsaWMgaW5kZXhPZihzZWFyY2g6IFRbJ1RWYWx1ZSddKSB7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGZvciAobGV0IHZhbHVlIG9mIHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gc2VhcmNoKSB7IHJldHVybiBpbmRleDsgfVxuICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgcHVibGljIGlzVmFsaWQoaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBudWxsQml0SW5kZXggPSB0aGlzLm9mZnNldCArIGluZGV4O1xuICAgICAgICByZXR1cm4gZ2V0Qm9vbChudWxsLCBpbmRleCwgdGhpcy5udWxsQml0bWFwW251bGxCaXRJbmRleCA+PiAzXSwgbnVsbEJpdEluZGV4ICUgOCk7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQoaW5kZXg6IG51bWJlcik6IFRbJ1RWYWx1ZSddIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IG51bGxCaXRJbmRleCA9IHRoaXMub2Zmc2V0ICsgaW5kZXg7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE51bGxhYmxlKHRoaXMudmlldywgaW5kZXgsIHRoaXMubnVsbEJpdG1hcFtudWxsQml0SW5kZXggPj4gM10sIG51bGxCaXRJbmRleCAlIDgpO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0KGluZGV4OiBudW1iZXIsIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgaWYgKHNldEJvb2wodGhpcy5udWxsQml0bWFwLCB0aGlzLm9mZnNldCArIGluZGV4LCB2YWx1ZSAhPSBudWxsKSkge1xuICAgICAgICAgICAgdGhpcy52aWV3LnNldChpbmRleCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBnZXRDaGlsZEF0PFIgZXh0ZW5kcyBEYXRhVHlwZSA9IERhdGFUeXBlPihpbmRleDogbnVtYmVyKTogVmVjdG9yPFI+IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiAodGhpcy52aWV3IGFzIE5lc3RlZFZpZXc8YW55PikuZ2V0Q2hpbGRBdDxSPihpbmRleCk7XG4gICAgfVxuICAgIHB1YmxpYyBbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFRbJ1RWYWx1ZSddIHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZUJpdHM8VFsnVFZhbHVlJ10gfCBudWxsPih0aGlzLm51bGxCaXRtYXAsIHRoaXMub2Zmc2V0LCB0aGlzLmxlbmd0aCwgdGhpcy52aWV3LCB0aGlzLmdldE51bGxhYmxlKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldE51bGxhYmxlKHZpZXc6IFZpZXc8VD4sIGluZGV4OiBudW1iZXIsIGJ5dGU6IG51bWJlciwgYml0OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGdldEJvb2wodmlldywgaW5kZXgsIGJ5dGUsIGJpdCkgPyB2aWV3LmdldChpbmRleCkgOiBudWxsO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport class DictionaryView {\n    constructor(dictionary, indices) {\n        this.indices = indices;\n        this.dictionary = dictionary;\n    }\n    clone(data) {\n        return new DictionaryView(data.dictionary, this.indices.clone(data.indices));\n    }\n    isValid(index) {\n        return this.indices.isValid(index);\n    }\n    get(index) {\n        return this.dictionary.get(this.indices.get(index));\n    }\n    set(index, value) {\n        this.dictionary.set(this.indices.get(index), value);\n    }\n    toArray() {\n        return [...this];\n    }\n    *[Symbol.iterator]() {\n        const values = this.dictionary, indices = this.indices;\n        for (let index = -1, n = indices.length; ++index < n;) {\n            yield values.get(indices.get(index));\n        }\n    }\n    indexOf(search) {\n        // First find the dictionary key for the desired value...\n        const key = this.dictionary.indexOf(search);\n        if (key === -1) {\n            return key;\n        }\n        // ... then find the first occurence of that key in indices\n        return this.indices.indexOf(key);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kaWN0aW9uYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQU1yQixNQUFNO0lBR0YsWUFBWSxVQUFxQixFQUFFLE9BQW9CO1FBQ25ELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQ2pDLENBQUM7SUFDTSxLQUFLLENBQUMsSUFBeUI7UUFDbEMsTUFBTSxDQUFDLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFTLENBQUM7SUFDekYsQ0FBQztJQUNNLE9BQU8sQ0FBQyxLQUFhO1FBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBQ00sR0FBRyxDQUFDLEtBQWE7UUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUNNLEdBQUcsQ0FBQyxLQUFhLEVBQUUsS0FBa0I7UUFDeEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUNNLE9BQU87UUFDVixNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFDTSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNyQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3ZELEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ3BELE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDekMsQ0FBQztJQUNMLENBQUM7SUFDTSxPQUFPLENBQUMsTUFBbUI7UUFDOUIseURBQXlEO1FBQ3pELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQUMsQ0FBQztRQUUvQiwyREFBMkQ7UUFDM0QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3IvZGljdGlvbmFyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWaWV3LCBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgSXRlcmFibGVBcnJheUxpa2UsIERhdGFUeXBlLCBEaWN0aW9uYXJ5LCBJbnQgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIERpY3Rpb25hcnlWaWV3PFQgZXh0ZW5kcyBEYXRhVHlwZT4gaW1wbGVtZW50cyBWaWV3PFQ+IHtcbiAgICBwdWJsaWMgaW5kaWNlczogVmVjdG9yPEludD47XG4gICAgcHVibGljIGRpY3Rpb25hcnk6IFZlY3RvcjxUPjtcbiAgICBjb25zdHJ1Y3RvcihkaWN0aW9uYXJ5OiBWZWN0b3I8VD4sIGluZGljZXM6IFZlY3RvcjxJbnQ+KSB7XG4gICAgICAgIHRoaXMuaW5kaWNlcyA9IGluZGljZXM7XG4gICAgICAgIHRoaXMuZGljdGlvbmFyeSA9IGRpY3Rpb25hcnk7XG4gICAgfVxuICAgIHB1YmxpYyBjbG9uZShkYXRhOiBEYXRhPERpY3Rpb25hcnk8VD4+KTogdGhpcyB7XG4gICAgICAgIHJldHVybiBuZXcgRGljdGlvbmFyeVZpZXcoZGF0YS5kaWN0aW9uYXJ5LCB0aGlzLmluZGljZXMuY2xvbmUoZGF0YS5pbmRpY2VzKSkgYXMgdGhpcztcbiAgICB9XG4gICAgcHVibGljIGlzVmFsaWQoaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRpY2VzLmlzVmFsaWQoaW5kZXgpO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0KGluZGV4OiBudW1iZXIpOiBUWydUVmFsdWUnXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpY3Rpb25hcnkuZ2V0KHRoaXMuaW5kaWNlcy5nZXQoaW5kZXgpKTtcbiAgICB9XG4gICAgcHVibGljIHNldChpbmRleDogbnVtYmVyLCB2YWx1ZTogVFsnVFZhbHVlJ10pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaWN0aW9uYXJ5LnNldCh0aGlzLmluZGljZXMuZ2V0KGluZGV4KSwgdmFsdWUpO1xuICAgIH1cbiAgICBwdWJsaWMgdG9BcnJheSgpOiBJdGVyYWJsZUFycmF5TGlrZTxUWydUVmFsdWUnXT4ge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXNdO1xuICAgIH1cbiAgICBwdWJsaWMgKltTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8VFsnVFZhbHVlJ10+IHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5kaWN0aW9uYXJ5LCBpbmRpY2VzID0gdGhpcy5pbmRpY2VzO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IC0xLCBuID0gaW5kaWNlcy5sZW5ndGg7ICsraW5kZXggPCBuOykge1xuICAgICAgICAgICAgeWllbGQgdmFsdWVzLmdldChpbmRpY2VzLmdldChpbmRleCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBpbmRleE9mKHNlYXJjaDogVFsnVFZhbHVlJ10pIHtcbiAgICAgICAgLy8gRmlyc3QgZmluZCB0aGUgZGljdGlvbmFyeSBrZXkgZm9yIHRoZSBkZXNpcmVkIHZhbHVlLi4uXG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZGljdGlvbmFyeS5pbmRleE9mKHNlYXJjaCk7XG4gICAgICAgIGlmIChrZXkgPT09IC0xKSB7IHJldHVybiBrZXk7IH1cblxuICAgICAgICAvLyAuLi4gdGhlbiBmaW5kIHRoZSBmaXJzdCBvY2N1cmVuY2Ugb2YgdGhhdCBrZXkgaW4gaW5kaWNlc1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRpY2VzLmluZGV4T2Yoa2V5ISk7XG4gICAgfVxufVxuIl19\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { createVector } from '../vector';\nimport { TextEncoder, TextDecoder } from 'text-encoding-utf-8';\nexport const encodeUtf8 = ((encoder) => encoder.encode.bind(encoder))(new TextEncoder('utf-8'));\nexport const decodeUtf8 = ((decoder) => decoder.decode.bind(decoder))(new TextDecoder('utf-8'));\nexport class ListViewBase {\n    constructor(data) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    clone(data) {\n        return new this.constructor(data);\n    }\n    isValid() {\n        return true;\n    }\n    toArray() {\n        return [...this];\n    }\n    get(index) {\n        return this.getList(this.values, index, this.valueOffsets);\n    }\n    set(index, value) {\n        return this.setList(this.values, index, value, this.valueOffsets);\n    }\n    *[Symbol.iterator]() {\n        const get = this.getList, length = this.length;\n        const values = this.values, valueOffsets = this.valueOffsets;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, valueOffsets);\n        }\n    }\n    indexOf(search) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) {\n                return index;\n            }\n            ++index;\n        }\n        return -1;\n    }\n}\nexport class VariableListViewBase extends ListViewBase {\n    constructor(data) {\n        super(data);\n        this.length = data.length;\n        this.valueOffsets = data.valueOffsets;\n    }\n}\nexport class ListView extends VariableListViewBase {\n    constructor(data) {\n        super(data);\n        this.values = createVector(data.values);\n    }\n    getChildAt(index) {\n        return index === 0 ? this.values : null;\n    }\n    getList(values, index, valueOffsets) {\n        return values.slice(valueOffsets[index], valueOffsets[index + 1]);\n    }\n    setList(values, index, value, valueOffsets) {\n        let idx = -1;\n        let offset = valueOffsets[index];\n        let end = Math.min(value.length, valueOffsets[index + 1] - offset);\n        while (offset < end) {\n            values.set(offset++, value.get(++idx));\n        }\n    }\n}\nexport class FixedSizeListView extends ListViewBase {\n    constructor(data) {\n        super(data);\n        this.size = data.type.listSize;\n        this.values = createVector(data.values);\n    }\n    getChildAt(index) {\n        return index === 0 ? this.values : null;\n    }\n    getList(values, index) {\n        const size = this.size;\n        return values.slice(index *= size, index + size);\n    }\n    setList(values, index, value) {\n        let size = this.size;\n        for (let idx = -1, offset = index * size; ++idx < size;) {\n            values.set(offset + idx, value.get(++idx));\n        }\n    }\n}\nexport class BinaryView extends VariableListViewBase {\n    getList(values, index, valueOffsets) {\n        return values.subarray(valueOffsets[index], valueOffsets[index + 1]);\n    }\n    setList(values, index, value, valueOffsets) {\n        const offset = valueOffsets[index];\n        values.set(value.subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\nexport class Utf8View extends VariableListViewBase {\n    getList(values, index, valueOffsets) {\n        return decodeUtf8(values.subarray(valueOffsets[index], valueOffsets[index + 1]));\n    }\n    setList(values, index, value, valueOffsets) {\n        const offset = valueOffsets[index];\n        values.set(encodeUtf8(value).subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ChunkedData, FlatData, BoolData, DictionaryData } from './data';\nimport { TypeVisitor, VectorVisitor } from './visitor';\nimport { TimeUnit } from './type';\nimport { Precision, DateUnit, IntervalUnit, UnionMode } from './type';\nexport class Vector {\n    constructor(data, view) {\n        this.data = data;\n        this.type = data.type;\n        this.length = data.length;\n        let nulls;\n        if ((data instanceof ChunkedData) && !(view instanceof ChunkedView)) {\n            this.view = new ChunkedView(data);\n        }\n        else if (!(view instanceof ValidityView) && (nulls = data.nullBitmap) && nulls.length > 0 && data.nullCount > 0) {\n            this.view = new ValidityView(data, view);\n        }\n        else {\n            this.view = view;\n        }\n    }\n    static create(data) {\n        return createVector(data);\n    }\n    static concat(source, ...others) {\n        return others.reduce((a, b) => a ? a.concat(b) : b, source);\n    }\n    get nullCount() { return this.data.nullCount; }\n    get nullBitmap() { return this.data.nullBitmap; }\n    get [Symbol.toStringTag]() {\n        return `Vector<${this.type[Symbol.toStringTag]}>`;\n    }\n    toJSON() { return this.toArray(); }\n    clone(data, view = this.view.clone(data)) {\n        return new this.constructor(data, view);\n    }\n    isValid(index) {\n        return this.view.isValid(index);\n    }\n    get(index) {\n        return this.view.get(index);\n    }\n    set(index, value) {\n        return this.view.set(index, value);\n    }\n    toArray() {\n        return this.view.toArray();\n    }\n    indexOf(value) {\n        return this.view.indexOf(value);\n    }\n    [Symbol.iterator]() {\n        return this.view[Symbol.iterator]();\n    }\n    concat(...others) {\n        if ((others = others.filter(Boolean)).length === 0) {\n            return this;\n        }\n        const { view } = this;\n        const vecs = !(view instanceof ChunkedView)\n            ? [this, ...others]\n            : [...view.chunkVectors, ...others];\n        const offsets = ChunkedData.computeOffsets(vecs);\n        const chunksLength = offsets[offsets.length - 1];\n        const chunkedData = new ChunkedData(this.type, chunksLength, vecs, 0, -1, offsets);\n        return this.clone(chunkedData, new ChunkedView(chunkedData));\n    }\n    slice(begin, end) {\n        let { length } = this;\n        let size = this.view.size || 1;\n        let total = length, from = (begin || 0) * size;\n        let to = (typeof end === 'number' ? end : total) * size;\n        if (to < 0) {\n            to = total - (to * -1) % total;\n        }\n        if (from < 0) {\n            from = total - (from * -1) % total;\n        }\n        if (to < from) {\n            [from, to] = [to, from];\n        }\n        total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;\n        const slicedData = this.data.slice(from, Math.min(total, length));\n        return this.clone(slicedData, this.view.clone(slicedData));\n    }\n    acceptTypeVisitor(visitor) {\n        return TypeVisitor.visitTypeInline(visitor, this.type);\n    }\n    acceptVectorVisitor(visitor) {\n        return VectorVisitor.visitTypeInline(visitor, this.type, this);\n    }\n}\nexport class FlatVector extends Vector {\n    get values() { return this.data.values; }\n    lows() { return this.asInt32(0, 2); }\n    highs() { return this.asInt32(1, 2); }\n    asInt32(offset = 0, stride = 2) {\n        let data = this.data.clone(new Int32());\n        if (offset > 0) {\n            data = data.slice(offset, this.length - offset);\n        }\n        const int32s = new IntVector(data, new PrimitiveView(data, stride));\n        int32s.length = this.length / stride | 0;\n        return int32s;\n    }\n}\nexport class ListVectorBase extends Vector {\n    get values() { return this.data.values; }\n    get valueOffsets() { return this.data.valueOffsets; }\n    getValueOffset(index) {\n        return this.valueOffsets[index];\n    }\n    getValueLength(index) {\n        return this.valueOffsets[index + 1] - this.valueOffsets[index];\n    }\n}\nexport class NestedVector extends Vector {\n    getChildAt(index) {\n        return this.view.getChildAt(index);\n    }\n    get childData() {\n        let data;\n        if ((data = this._childData)) {\n            // Return the cached childData reference first\n            return data;\n        }\n        else if (!((data = this.data) instanceof ChunkedData)) {\n            // If data isn't chunked, cache and return NestedData's childData\n            return this._childData = data.childData;\n        }\n        // Otherwise if the data is chunked, concatenate the childVectors from each chunk\n        // to construct a single chunked Vector for each column. Then return the ChunkedData\n        // instance from each unified chunked column as the childData of a chunked NestedVector\n        const chunks = data.chunkVectors;\n        return this._childData = chunks\n            .reduce((cols, chunk) => chunk.childData\n            .reduce((cols, _, i) => ((cols[i] || (cols[i] = [])).push(chunk.getChildAt(i))) && cols || cols, cols), [])\n            .map((vecs) => Vector.concat(...vecs).data);\n    }\n}\nimport { Binary, Utf8, Bool, } from './type';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, Float16, Float32, Float64 } from './type';\nimport { Struct, Map_ } from './type';\nimport { ChunkedView } from './vector/chunked';\nimport { ValidityView } from './vector/validity';\nimport { DictionaryView } from './vector/dictionary';\nimport { ListView, FixedSizeListView, BinaryView, Utf8View } from './vector/list';\nimport { UnionView, DenseUnionView, StructView, MapView } from './vector/nested';\nimport { FlatView, NullView, BoolView, PrimitiveView, FixedSizeView, Float16View } from './vector/flat';\nimport { DateDayView, DateMillisecondView, IntervalYearMonthView } from './vector/flat';\nimport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './vector/flat';\nimport { packBools } from './util/bit';\nexport class NullVector extends Vector {\n    constructor(data, view = new NullView(data)) {\n        super(data, view);\n    }\n}\nexport class BoolVector extends Vector {\n    static from(data) {\n        return new BoolVector(new BoolData(new Bool(), data.length, null, packBools(data)));\n    }\n    get values() { return this.data.values; }\n    constructor(data, view = new BoolView(data)) {\n        super(data, view);\n    }\n}\nexport class IntVector extends FlatVector {\n    constructor(data, view = IntVector.defaultView(data)) {\n        super(data, view);\n    }\n    static from(data, is64) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? new IntVector(new FlatData(new Int64(), data.length, null, data))\n                : new IntVector(new FlatData(new Uint64(), data.length, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return new IntVector(new FlatData(new Int8(), data.length, null, data));\n            case Int16Array: return new IntVector(new FlatData(new Int16(), data.length, null, data));\n            case Int32Array: return new IntVector(new FlatData(new Int32(), data.length, null, data));\n            case Uint8Array: return new IntVector(new FlatData(new Uint8(), data.length, null, data));\n            case Uint16Array: return new IntVector(new FlatData(new Uint16(), data.length, null, data));\n            case Uint32Array: return new IntVector(new FlatData(new Uint32(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    static defaultView(data) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n}\nexport class FloatVector extends FlatVector {\n    constructor(data, view = FloatVector.defaultView(data)) {\n        super(data, view);\n    }\n    static from(data) {\n        switch (data.constructor) {\n            case Uint16Array: return new FloatVector(new FlatData(new Float16(), data.length, null, data));\n            case Float32Array: return new FloatVector(new FlatData(new Float32(), data.length, null, data));\n            case Float64Array: return new FloatVector(new FlatData(new Float64(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n    static defaultView(data) {\n        return data.type.precision !== Precision.HALF ? new FlatView(data) : new Float16View(data);\n    }\n}\nexport class DateVector extends FlatVector {\n    static defaultView(data) {\n        return data.type.unit === DateUnit.DAY ? new DateDayView(data) : new DateMillisecondView(data, 2);\n    }\n    constructor(data, view = DateVector.defaultView(data)) {\n        super(data, view);\n    }\n    lows() {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    highs() {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n    asEpochMilliseconds() {\n        let data = this.data.clone(new Int32());\n        switch (this.type.unit) {\n            case DateUnit.DAY: return new IntVector(data, new TimestampDayView(data, 1));\n            case DateUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data, 2));\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[this.type.unit]}\"`);\n    }\n}\nexport class DecimalVector extends FlatVector {\n    constructor(data, view = new FixedSizeView(data, 4)) {\n        super(data, view);\n    }\n}\nexport class TimeVector extends FlatVector {\n    static defaultView(data) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data, view = TimeVector.defaultView(data)) {\n        super(data, view);\n    }\n    lows() {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    highs() {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\nexport class TimestampVector extends FlatVector {\n    constructor(data, view = new FixedSizeView(data, 2)) {\n        super(data, view);\n    }\n    asEpochMilliseconds() {\n        let data = this.data.clone(new Int32());\n        switch (this.type.unit) {\n            case TimeUnit.SECOND: return new IntVector(data, new TimestampSecondView(data, 1));\n            case TimeUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data, 2));\n            case TimeUnit.MICROSECOND: return new IntVector(data, new TimestampMicrosecondView(data, 2));\n            case TimeUnit.NANOSECOND: return new IntVector(data, new TimestampNanosecondView(data, 2));\n        }\n        throw new TypeError(`Unrecognized time unit \"${TimeUnit[this.type.unit]}\"`);\n    }\n}\nexport class IntervalVector extends FlatVector {\n    static defaultView(data) {\n        return data.type.unit === IntervalUnit.YEAR_MONTH ? new IntervalYearMonthView(data) : new FixedSizeView(data, 2);\n    }\n    constructor(data, view = IntervalVector.defaultView(data)) {\n        super(data, view);\n    }\n    lows() {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    highs() {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\nexport class BinaryVector extends ListVectorBase {\n    constructor(data, view = new BinaryView(data)) {\n        super(data, view);\n    }\n    asUtf8() {\n        return new Utf8Vector(this.data.clone(new Utf8()));\n    }\n}\nexport class FixedSizeBinaryVector extends FlatVector {\n    constructor(data, view = new FixedSizeView(data, data.type.byteWidth)) {\n        super(data, view);\n    }\n}\nexport class Utf8Vector extends ListVectorBase {\n    constructor(data, view = new Utf8View(data)) {\n        super(data, view);\n    }\n    asBinary() {\n        return new BinaryVector(this.data.clone(new Binary()));\n    }\n}\nexport class ListVector extends ListVectorBase {\n    constructor(data, view = new ListView(data)) {\n        super(data, view);\n    }\n    getChildAt(index) {\n        return this.view.getChildAt(index);\n    }\n}\nexport class FixedSizeListVector extends Vector {\n    constructor(data, view = new FixedSizeListView(data)) {\n        super(data, view);\n    }\n    getChildAt(index) {\n        return this.view.getChildAt(index);\n    }\n}\nexport class MapVector extends NestedVector {\n    constructor(data, view = new MapView(data)) {\n        super(data, view);\n    }\n    asStruct() {\n        return new StructVector(this.data.clone(new Struct(this.type.children)));\n    }\n}\nexport class StructVector extends NestedVector {\n    constructor(data, view = new StructView(data)) {\n        super(data, view);\n    }\n    asMap(keysSorted = false) {\n        return new MapVector(this.data.clone(new Map_(keysSorted, this.type.children)));\n    }\n}\nexport class UnionVector extends NestedVector {\n    constructor(data, view = (data.type.mode === UnionMode.Sparse ? new UnionView(data) : new DenseUnionView(data))) {\n        super(data, view);\n    }\n}\nexport class DictionaryVector extends Vector {\n    constructor(data, view = new DictionaryView(data.dictionary, new IntVector(data.indices))) {\n        super(data, view);\n        if (view instanceof ValidityView) {\n            view = view.view;\n        }\n        if (data instanceof DictionaryData && view instanceof DictionaryView) {\n            this.indices = view.indices;\n            this.dictionary = data.dictionary;\n        }\n        else if (data instanceof ChunkedData && view instanceof ChunkedView) {\n            const chunks = view.chunkVectors;\n            // Assume the last chunk's dictionary data is the most up-to-date,\n            // including data from DictionaryBatches that were marked as deltas\n            this.dictionary = chunks[chunks.length - 1].dictionary;\n            this.indices = chunks.reduce((idxs, dict) => !idxs ? dict.indices : idxs.concat(dict.indices), null);\n        }\n        else {\n            throw new TypeError(`Unrecognized DictionaryVector view`);\n        }\n    }\n    getKey(index) { return this.indices.get(index); }\n    getValue(key) { return this.dictionary.get(key); }\n    reverseLookup(value) { return this.dictionary.indexOf(value); }\n}\nexport const createVector = ((VectorLoader) => ((data) => TypeVisitor.visitTypeInline(new VectorLoader(data), data.type)))(class VectorLoader extends TypeVisitor {\n    constructor(data) {\n        super();\n        this.data = data;\n    }\n    visitNull(_type) { return new NullVector(this.data); }\n    visitInt(_type) { return new IntVector(this.data); }\n    visitFloat(_type) { return new FloatVector(this.data); }\n    visitBinary(_type) { return new BinaryVector(this.data); }\n    visitUtf8(_type) { return new Utf8Vector(this.data); }\n    visitBool(_type) { return new BoolVector(this.data); }\n    visitDecimal(_type) { return new DecimalVector(this.data); }\n    visitDate(_type) { return new DateVector(this.data); }\n    visitTime(_type) { return new TimeVector(this.data); }\n    visitTimestamp(_type) { return new TimestampVector(this.data); }\n    visitInterval(_type) { return new IntervalVector(this.data); }\n    visitList(_type) { return new ListVector(this.data); }\n    visitStruct(_type) { return new StructVector(this.data); }\n    visitUnion(_type) { return new UnionVector(this.data); }\n    visitFixedSizeBinary(_type) { return new FixedSizeBinaryVector(this.data); }\n    visitFixedSizeList(_type) { return new FixedSizeListVector(this.data); }\n    visitMap(_type) { return new MapVector(this.data); }\n    visitDictionary(_type) { return new DictionaryVector(this.data); }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","export function leftPad(str, fill, n) {\n    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n}\nexport function valueToString(x) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvcHJldHR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE1BQU0sa0JBQWtCLEdBQVcsRUFBRSxJQUFZLEVBQUUsQ0FBUztJQUN4RCxNQUFNLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM3RCxDQUFDO0FBRUQsTUFBTSx3QkFBd0IsQ0FBTTtJQUNoQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25HLENBQUMiLCJmaWxlIjoidXRpbC9wcmV0dHkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UGFkKHN0cjogc3RyaW5nLCBmaWxsOiBzdHJpbmcsIG46IG51bWJlcikge1xuICAgIHJldHVybiAobmV3IEFycmF5KG4gKyAxKS5qb2luKGZpbGwpICsgc3RyKS5zbGljZSgtMSAqIG4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVUb1N0cmluZyh4OiBhbnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdzdHJpbmcnID8gYFwiJHt4fVwiYCA6IEFycmF5QnVmZmVyLmlzVmlldyh4KSA/IGBbJHt4fV1gIDogSlNPTi5zdHJpbmdpZnkoeCk7XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Schema, Struct } from './type';\nimport { Vector, StructVector } from './vector';\nimport { NestedData } from './data';\nimport { PipeIterator } from './util/node';\nimport { valueToString, leftPad } from './util/pretty';\nexport class RecordBatch extends StructVector {\n    static from(vectors) {\n        return new RecordBatch(Schema.from(vectors), Math.max(...vectors.map((v) => v.length)), vectors);\n    }\n    constructor(...args) {\n        if (typeof args[1] !== 'number') {\n            const data = args[1];\n            super(data, args[2]);\n            this.schema = args[0];\n            this.length = data.length;\n        }\n        else {\n            const [schema, numRows, cols] = args;\n            const childData = new Array(cols.length);\n            for (let index = -1, length = cols.length; ++index < length;) {\n                const col = cols[index];\n                childData[index] = col instanceof Vector ? col.data : col;\n            }\n            super(new NestedData(new Struct(schema.fields), numRows, null, childData));\n            this.schema = schema;\n            this.length = numRows;\n        }\n        this.numCols = this.schema.fields.length;\n    }\n    clone(data, view = this.view.clone(data)) {\n        return new RecordBatch(this.schema, data, view);\n    }\n    getChildAt(index) {\n        return index < 0 || index >= this.numCols ? null : super.getChildAt(index);\n    }\n    select(...columnNames) {\n        const fields = this.schema.fields;\n        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new RecordBatch(this.schema.select(...columnNames), this.length, this.childData.filter((_, i) => namesToKeep[fields[i].name]));\n    }\n    rowsToString(separator = ' | ', rowOffset = 0, maxColumnWidths = []) {\n        return new PipeIterator(recordBatchRowsToString(this, separator, rowOffset, maxColumnWidths), 'utf8');\n    }\n}\nfunction* recordBatchRowsToString(recordBatch, separator = ' | ', rowOffset = 0, maxColumnWidths = []) {\n    const fields = recordBatch.schema.fields;\n    const header = ['row_id', ...fields.map((f) => `${f}`)].map(valueToString);\n    header.forEach((x, i) => {\n        maxColumnWidths[i] = Math.max(maxColumnWidths[i] || 0, x.length);\n    });\n    // Pass one to convert to strings and count max column widths\n    for (let i = -1, n = recordBatch.length - 1; ++i < n;) {\n        let val, row = [rowOffset + i, ...recordBatch.get(i)];\n        for (let j = -1, k = row.length; ++j < k;) {\n            val = valueToString(row[j]);\n            maxColumnWidths[j] = Math.max(maxColumnWidths[j] || 0, val.length);\n        }\n    }\n    for (let i = -1; ++i < recordBatch.length;) {\n        if ((rowOffset + i) % 1000 === 0) {\n            yield header.map((x, j) => leftPad(x, ' ', maxColumnWidths[j])).join(separator);\n        }\n        yield [rowOffset + i, ...recordBatch.get(i)]\n            .map((x) => valueToString(x))\n            .map((x, j) => leftPad(x, ' ', maxColumnWidths[j]))\n            .join(separator);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { valueToString } from '../util/pretty';\nexport class NestedView {\n    constructor(data, children) {\n        this.length = data.length;\n        this.childData = data.childData;\n        this.numChildren = data.childData.length;\n        this._children = children || new Array(this.numChildren);\n    }\n    clone(data) {\n        return new this.constructor(data, this._children);\n    }\n    isValid() {\n        return true;\n    }\n    toArray() {\n        return [...this];\n    }\n    indexOf(_) {\n        throw new Error(`Not implemented yet`);\n    }\n    toJSON() { return this.toArray(); }\n    toString() {\n        return [...this].map((x) => valueToString(x)).join(', ');\n    }\n    get(index) {\n        return this.getNested(this, index);\n    }\n    set(index, value) {\n        return this.setNested(this, index, value);\n    }\n    getChildAt(index) {\n        return index < 0 || index >= this.numChildren\n            ? null\n            : this._children[index] ||\n                (this._children[index] = Vector.create(this.childData[index]));\n    }\n    *[Symbol.iterator]() {\n        const get = this.getNested;\n        const length = this.length;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index);\n        }\n    }\n}\nexport class UnionView extends NestedView {\n    constructor(data, children) {\n        super(data, children);\n        this.length = data.length;\n        this.typeIds = data.typeIds;\n    }\n    getNested(self, index) {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n    }\n    setNested(self, index, value) {\n        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets);\n    }\n    getChildValue(self, index, typeIds, _valueOffsets) {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.get(index) : null;\n    }\n    setChildValue(self, index, value, typeIds, _valueOffsets) {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.set(index, value) : null;\n    }\n    *[Symbol.iterator]() {\n        const length = this.length;\n        const get = this.getChildValue;\n        const { typeIds, valueOffsets } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index, typeIds, valueOffsets);\n        }\n    }\n}\nexport class DenseUnionView extends UnionView {\n    constructor(data, children) {\n        super(data, children);\n        this.valueOffsets = data.valueOffsets;\n    }\n    getNested(self, index) {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets);\n    }\n    getChildValue(self, index, typeIds, valueOffsets) {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.get(valueOffsets[index]) : null;\n    }\n    setChildValue(self, index, value, typeIds, valueOffsets) {\n        const child = self.getChildAt(typeIds[index]);\n        return child ? child.set(valueOffsets[index], value) : null;\n    }\n}\nexport class StructView extends NestedView {\n    getNested(self, index) {\n        return new RowView(self, self._children, index);\n    }\n    setNested(self, index, value) {\n        let idx = -1, len = self.numChildren, child;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value[idx]);\n                }\n            }\n        }\n        else {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value.get(idx));\n                }\n            }\n        }\n    }\n}\nexport class MapView extends NestedView {\n    constructor(data, children) {\n        super(data, children);\n        this.typeIds = data.type.children.reduce((xs, x, i) => (xs[x.name] = i) && xs || xs, Object.create(null));\n    }\n    getNested(self, index) {\n        return new MapRowView(self, self._children, index);\n    }\n    setNested(self, index, value) {\n        let typeIds = self.typeIds, child;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value[key]);\n                }\n            }\n        }\n        else {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value.get(key));\n                }\n            }\n        }\n    }\n}\nexport class RowView extends UnionView {\n    constructor(data, children, rowIndex) {\n        super(data, children);\n        this.rowIndex = rowIndex || 0;\n        this.length = data.numChildren;\n    }\n    clone(data) {\n        return new this.constructor(data, this._children, this.rowIndex);\n    }\n    getChildValue(self, index, _typeIds, _valueOffsets) {\n        const child = self.getChildAt(index);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    setChildValue(self, index, value, _typeIds, _valueOffsets) {\n        const child = self.getChildAt(index);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\nexport class MapRowView extends RowView {\n    toJSON() {\n        const get = this.getChildValue;\n        const result = {};\n        const typeIds = this.typeIds;\n        for (const name in typeIds) {\n            result[name] = get(this, name, typeIds, null);\n        }\n        return result;\n    }\n    getChildValue(self, key, typeIds, _valueOffsets) {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    setChildValue(self, key, value, typeIds, _valueOffsets) {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { getBool, setBool, iterateBits } from '../util/bit';\nexport class FlatView {\n    constructor(data) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    clone(data) {\n        return new this.constructor(data);\n    }\n    isValid() {\n        return true;\n    }\n    get(index) {\n        return this.values[index];\n    }\n    set(index, value) {\n        return this.values[index] = value;\n    }\n    toArray() {\n        return this.values.subarray(0, this.length);\n    }\n    indexOf(search) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) {\n                return index;\n            }\n            ++index;\n        }\n        return -1;\n    }\n    [Symbol.iterator]() {\n        return this.values.subarray(0, this.length)[Symbol.iterator]();\n    }\n}\nexport class NullView {\n    constructor(data) {\n        this.length = data.length;\n    }\n    clone(data) {\n        return new this.constructor(data);\n    }\n    isValid() {\n        return true;\n    }\n    set() { }\n    get() { return null; }\n    toArray() {\n        return [...this];\n    }\n    indexOf(search) {\n        // if you're looking for nulls and the view isn't empty, we've got 'em!\n        return search === null && this.length > 0 ? 0 : -1;\n    }\n    *[Symbol.iterator]() {\n        for (let index = -1, length = this.length; ++index < length;) {\n            yield null;\n        }\n    }\n}\nexport class BoolView extends FlatView {\n    constructor(data) {\n        super(data);\n        this.offset = data.offset;\n    }\n    toArray() { return [...this]; }\n    get(index) {\n        const boolBitIndex = this.offset + index;\n        return getBool(null, index, this.values[boolBitIndex >> 3], boolBitIndex % 8);\n    }\n    set(index, value) {\n        setBool(this.values, this.offset + index, value);\n    }\n    [Symbol.iterator]() {\n        return iterateBits(this.values, this.offset, this.length, this.values, getBool);\n    }\n}\nexport class PrimitiveView extends FlatView {\n    constructor(data, size) {\n        super(data);\n        this.size = size || 1;\n        this.ArrayType = data.type.ArrayType;\n    }\n    clone(data) {\n        return new this.constructor(data, this.size);\n    }\n    getValue(values, index, size) {\n        return values[index * size];\n    }\n    setValue(values, index, size, value) {\n        values[index * size] = value;\n    }\n    get(index) {\n        return this.getValue(this.values, index, this.size);\n    }\n    set(index, value) {\n        return this.setValue(this.values, index, this.size, value);\n    }\n    toArray() {\n        return this.size > 1 ?\n            new this.ArrayType(this) :\n            this.values.subarray(0, this.length);\n    }\n    *[Symbol.iterator]() {\n        const get = this.getValue;\n        const { size, values, length } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, size);\n        }\n    }\n}\nexport class FixedSizeView extends PrimitiveView {\n    toArray() {\n        return this.values;\n    }\n    indexOf(search) {\n        let index = 0;\n        for (let value of this) {\n            if (value.every((d, i) => d === search[i])) {\n                return index;\n            }\n            ++index;\n        }\n        return -1;\n    }\n    getValue(values, index, size) {\n        return values.subarray(index * size, index * size + size);\n    }\n    setValue(values, index, size, value) {\n        values.set(value.subarray(0, size), index * size);\n    }\n}\nexport class Float16View extends PrimitiveView {\n    toArray() { return new Float32Array(this); }\n    getValue(values, index, size) {\n        return (values[index * size] - 32767) / 32767;\n    }\n    setValue(values, index, size, value) {\n        values[index * size] = (value * 32767) + 32767;\n    }\n}\nexport class DateDayView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochDaysToDate(values, index * size);\n    }\n    setValue(values, index, size, value) {\n        values[index * size] = value.valueOf() / 86400000;\n    }\n}\nexport class DateMillisecondView extends FixedSizeView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochMillisecondsLongToDate(values, index * size);\n    }\n    setValue(values, index, size, value) {\n        const epochMs = value.valueOf();\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\nexport class TimestampDayView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochDaysToMs(values, index * size);\n    }\n    setValue(values, index, size, epochMs) {\n        values[index * size] = (epochMs / 86400000) | 0;\n    }\n}\nexport class TimestampSecondView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochSecondsToMs(values, index * size);\n    }\n    setValue(values, index, size, epochMs) {\n        values[index * size] = (epochMs / 1000) | 0;\n    }\n}\nexport class TimestampMillisecondView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochMillisecondsLongToMs(values, index * size);\n    }\n    setValue(values, index, size, epochMs) {\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\nexport class TimestampMicrosecondView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochMicrosecondsLongToMs(values, index * size);\n    }\n    setValue(values, index, size, epochMs) {\n        values[index * size] = ((epochMs / 1000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000) / 4294967296) | 0;\n    }\n}\nexport class TimestampNanosecondView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochNanosecondsLongToMs(values, index * size);\n    }\n    setValue(values, index, size, epochMs) {\n        values[index * size] = ((epochMs / 1000000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000000) / 4294967296) | 0;\n    }\n}\nexport class IntervalYearMonthView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        const interval = values[index * size];\n        return new Int32Array([interval / 12, /* years */ interval % 12 /* months */]);\n    }\n    setValue(values, index, size, value) {\n        values[index * size] = (value[0] * 12) + (value[1] % 12);\n    }\n}\nexport class IntervalYearView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return values[index * size] / 12;\n    }\n    setValue(values, index, size, value) {\n        values[index * size] = (value * 12) + (values[index * size] % 12);\n    }\n}\nexport class IntervalMonthView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return values[index * size] % 12;\n    }\n    setValue(values, index, size, value) {\n        values[index * size] = (values[index * size] * 12) + (value % 12);\n    }\n}\nexport function epochSecondsToMs(data, index) { return 1000 * data[index]; }\nexport function epochDaysToMs(data, index) { return 86400000 * data[index]; }\nexport function epochMillisecondsLongToMs(data, index) { return 4294967296 * (data[index + 1]) + (data[index] >>> 0); }\nexport function epochMicrosecondsLongToMs(data, index) { return 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000); }\nexport function epochNanosecondsLongToMs(data, index) { return 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000); }\nexport function epochMillisecondsToDate(epochMs) { return new Date(epochMs); }\nexport function epochDaysToDate(data, index) { return epochMillisecondsToDate(epochDaysToMs(data, index)); }\nexport function epochSecondsToDate(data, index) { return epochMillisecondsToDate(epochSecondsToMs(data, index)); }\nexport function epochNanosecondsLongToDate(data, index) { return epochMillisecondsToDate(epochNanosecondsLongToMs(data, index)); }\nexport function epochMillisecondsLongToDate(data, index) { return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index)); }\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nconst carryBit16 = 1 << 16;\nfunction intAsHex(value) {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n    10,\n    100,\n    1000,\n    10000,\n    100000,\n    1000000,\n    10000000,\n    100000000];\nexport class BaseInt64 {\n    constructor(buffer) {\n        this.buffer = buffer;\n    }\n    high() { return this.buffer[1]; }\n    low() { return this.buffer[0]; }\n    _times(other) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n        let sum = product >>> 16;\n        product = L[2] * R[3];\n        sum += product;\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n        this.buffer[0] += sum << 16;\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n        return this;\n    }\n    _plus(other) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n            ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n    lessThan(other) {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n    equals(other) {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n    greaterThan(other) {\n        return other.lessThan(this);\n    }\n    hex() {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\nexport class Uint64 extends BaseInt64 {\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    static multiply(left, right) {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    static add(left, right) {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nexport class Int64 extends BaseInt64 {\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        return this;\n    }\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    lessThan(other) {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n    static fromString(str, out_buffer = new Uint32Array(2)) {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    static multiply(left, right) {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    static add(left, right) {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nexport class Int128 {\n    constructor(buffer) {\n        this.buffer = buffer;\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n    high() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n    low() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        if (this.buffer[1] == 0) {\n            ++this.buffer[2];\n        }\n        if (this.buffer[2] == 0) {\n            ++this.buffer[3];\n        }\n        return this;\n    }\n    times(other) {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n        this.buffer[1] = sum.low();\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n            .plus(Uint64.multiply(L1, R2))\n            .plus(Uint64.multiply(L2, R1))\n            .plus(Uint64.multiply(L3, R0)).low();\n        return this;\n    }\n    plus(other) {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n        return this;\n    }\n    hex() {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n    static multiply(left, right) {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    static add(left, right) {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n    static fromString(str, out_buffer = new Uint32Array(4)) {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import * as tslib_1 from \"tslib\";\nexport class PipeIterator {\n    constructor(iterator, encoding) {\n        this.iterator = iterator;\n        this.encoding = encoding;\n    }\n    [Symbol.iterator]() { return this.iterator; }\n    next(value) { return this.iterator.next(value); }\n    throw(error) {\n        if (typeof this.iterator.throw === 'function') {\n            return this.iterator.throw(error);\n        }\n        return { done: true, value: null };\n    }\n    return(value) {\n        if (typeof this.iterator.return === 'function') {\n            return this.iterator.return(value);\n        }\n        return { done: true, value: null };\n    }\n    pipe(stream) {\n        let { encoding } = this;\n        let res;\n        let write = (err) => {\n            stream['removeListener']('error', write);\n            stream['removeListener']('drain', write);\n            if (err)\n                return this.throw(err);\n            if (stream['writable']) {\n                do {\n                    if ((res = this.next()).done)\n                        break;\n                } while (emit(stream, encoding, res.value));\n            }\n            return wait(stream, encoding, res && res.done, write);\n        };\n        write();\n        return stream;\n    }\n}\nexport class AsyncPipeIterator {\n    constructor(iterator, encoding) {\n        this.iterator = iterator;\n        this.encoding = encoding;\n    }\n    [Symbol.asyncIterator]() { return this.iterator; }\n    next(value) { return this.iterator.next(value); }\n    throw(error) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (typeof this.iterator.throw === 'function') {\n                return this.iterator.throw(error);\n            }\n            return { done: true, value: null };\n        });\n    }\n    return(value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (typeof this.iterator.return === 'function') {\n                return this.iterator.return(value);\n            }\n            return { done: true, value: null };\n        });\n    }\n    pipe(stream) {\n        let { encoding } = this;\n        let res;\n        let write = (err) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            stream['removeListener']('error', write);\n            stream['removeListener']('drain', write);\n            if (err)\n                return this.throw(err);\n            if (stream['writable']) {\n                do {\n                    if ((res = yield this.next()).done)\n                        break;\n                } while (emit(stream, encoding, res.value));\n            }\n            return wait(stream, encoding, res && res.done, write);\n        });\n        write();\n        return stream;\n    }\n}\nfunction emit(stream, encoding, value) {\n    return stream['write']((encoding === 'utf8' ? value + '\\n' : value), encoding);\n}\nfunction wait(stream, encoding, done, write) {\n    const p = eval('process'); // defeat closure compiler\n    if (!done) {\n        stream['once']('error', write);\n        stream['once']('drain', write);\n    }\n    else if (!(!p || stream === p.stdout) && !stream['isTTY']) {\n        stream['end']((encoding === 'utf8' ? '\\n' : new Uint8Array(0)));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","export { ChunkedView } from './chunked';\nexport { ValidityView } from './validity';\nexport { DictionaryView } from './dictionary';\nexport { ListView, FixedSizeListView, BinaryView, Utf8View } from './list';\nexport { UnionView, DenseUnionView, NestedView, StructView, MapView } from './nested';\nexport { FlatView, NullView, BoolView, PrimitiveView, FixedSizeView, Float16View } from './flat';\nexport { DateDayView, DateMillisecondView } from './flat';\nexport { IntervalYearMonthView, IntervalYearView, IntervalMonthView } from './flat';\nexport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './flat';\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci92aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUMzRSxPQUFPLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0RixPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDakcsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUMxRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDcEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixFQUFFLHdCQUF3QixFQUFFLHdCQUF3QixFQUFFLHVCQUF1QixFQUFFLE1BQU0sUUFBUSxDQUFDIiwiZmlsZSI6InZlY3Rvci92aWV3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgQ2h1bmtlZFZpZXcgfSBmcm9tICcuL2NodW5rZWQnO1xuZXhwb3J0IHsgVmFsaWRpdHlWaWV3IH0gZnJvbSAnLi92YWxpZGl0eSc7XG5leHBvcnQgeyBEaWN0aW9uYXJ5VmlldyB9IGZyb20gJy4vZGljdGlvbmFyeSc7XG5leHBvcnQgeyBMaXN0VmlldywgRml4ZWRTaXplTGlzdFZpZXcsIEJpbmFyeVZpZXcsIFV0ZjhWaWV3IH0gZnJvbSAnLi9saXN0JztcbmV4cG9ydCB7IFVuaW9uVmlldywgRGVuc2VVbmlvblZpZXcsIE5lc3RlZFZpZXcsIFN0cnVjdFZpZXcsIE1hcFZpZXcgfSBmcm9tICcuL25lc3RlZCc7XG5leHBvcnQgeyBGbGF0VmlldywgTnVsbFZpZXcsIEJvb2xWaWV3LCBQcmltaXRpdmVWaWV3LCBGaXhlZFNpemVWaWV3LCBGbG9hdDE2VmlldyB9IGZyb20gJy4vZmxhdCc7XG5leHBvcnQgeyBEYXRlRGF5VmlldywgRGF0ZU1pbGxpc2Vjb25kVmlldyB9IGZyb20gJy4vZmxhdCc7XG5leHBvcnQgeyBJbnRlcnZhbFllYXJNb250aFZpZXcsIEludGVydmFsWWVhclZpZXcsIEludGVydmFsTW9udGhWaWV3IH0gZnJvbSAnLi9mbGF0JztcbmV4cG9ydCB7IFRpbWVzdGFtcERheVZpZXcsIFRpbWVzdGFtcFNlY29uZFZpZXcsIFRpbWVzdGFtcE1pbGxpc2Vjb25kVmlldywgVGltZXN0YW1wTWljcm9zZWNvbmRWaWV3LCBUaW1lc3RhbXBOYW5vc2Vjb25kVmlldyB9IGZyb20gJy4vZmxhdCc7XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DictionaryVector } from './vector';\nexport class Value {\n    eq(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new Equals(this, other);\n    }\n    le(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new LTeq(this, other);\n    }\n    ge(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new GTeq(this, other);\n    }\n    lt(other) {\n        return new Not(this.ge(other));\n    }\n    gt(other) {\n        return new Not(this.le(other));\n    }\n    ne(other) {\n        return new Not(this.eq(other));\n    }\n}\nexport class Literal extends Value {\n    constructor(v) {\n        super();\n        this.v = v;\n    }\n}\nexport class Col extends Value {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    bind(batch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) {\n                throw new Error(`Failed to bind Col \"${this.name}\"`);\n            }\n        }\n        this.vector = batch.getChildAt(this.colidx);\n        return this.vector.get.bind(this.vector);\n    }\n}\nexport class Predicate {\n    and(expr) { return new And(this, expr); }\n    or(expr) { return new Or(this, expr); }\n    not() { return new Not(this); }\n    ands() { return [this]; }\n}\nexport class ComparisonPredicate extends Predicate {\n    constructor(left, right) {\n        super();\n        this.left = left;\n        this.right = right;\n    }\n    bind(batch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            }\n            else {\n                return this._bindLitCol(batch, this.left, this.right);\n            }\n        }\n        else {\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left, this.right);\n            }\n            else {\n                return this._bindColCol(batch, this.left, this.right);\n            }\n        }\n    }\n}\nexport class CombinationPredicate extends Predicate {\n    constructor(left, right) {\n        super();\n        this.left = left;\n        this.right = right;\n    }\n}\nexport class And extends CombinationPredicate {\n    bind(batch) {\n        const left = this.left.bind(batch);\n        const right = this.right.bind(batch);\n        return (idx, batch) => left(idx, batch) && right(idx, batch);\n    }\n    ands() { return this.left.ands().concat(this.right.ands()); }\n}\nexport class Or extends CombinationPredicate {\n    bind(batch) {\n        const left = this.left.bind(batch);\n        const right = this.right.bind(batch);\n        return (idx, batch) => left(idx, batch) || right(idx, batch);\n    }\n}\nexport class Equals extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v == right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, batch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key;\n            const vector = col.vector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            }\n            else {\n                key = this.lastKey;\n            }\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            }\n            else {\n                return (idx) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        }\n        else {\n            return (idx, cols) => col_func(idx, cols) == lit.v;\n        }\n    }\n    _bindLitCol(batch, lit, col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\nexport class LTeq extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v <= right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, cols) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => col_func(idx, cols) <= lit.v;\n    }\n    _bindLitCol(batch, lit, col) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => lit.v <= col_func(idx, cols);\n    }\n}\nexport class GTeq extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v >= right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, cols) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => col_func(idx, cols) >= lit.v;\n    }\n    _bindLitCol(batch, lit, col) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => lit.v >= col_func(idx, cols);\n    }\n}\nexport class Not extends Predicate {\n    constructor(child) {\n        super();\n        this.child = child;\n    }\n    bind(batch) {\n        const func = this.child.bind(batch);\n        return (idx, batch) => !func(idx, batch);\n    }\n}\nexport class CustomPredicate extends Predicate {\n    constructor(next, bind_) {\n        super();\n        this.next = next;\n        this.bind_ = bind_;\n    }\n    bind(batch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\nexport function lit(v) { return new Literal(v); }\nexport function col(n) { return new Col(n); }\nexport function custom(next, bind) {\n    return new CustomPredicate(next, bind);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { Vector } from '../../vector';\nimport { RecordBatch } from '../../recordbatch';\nimport { TypeVisitor } from '../../visitor';\nimport { Message } from '../metadata';\nimport { FlatData, ListData, NestedData, SingleNestedData, DenseUnionData, SparseUnionData, BoolData, FlatListData, DictionaryData } from '../../data';\nimport { UnionMode, } from '../../type';\nexport function* readRecordBatches(messages) {\n    for (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\nexport function readRecordBatchesAsync(messages) {\n    return tslib_1.__asyncGenerator(this, arguments, function* readRecordBatchesAsync_1() {\n        try {\n            for (var messages_1 = tslib_1.__asyncValues(messages), messages_1_1; messages_1_1 = yield tslib_1.__await(messages_1.next()), !messages_1_1.done;) {\n                const { schema, message, loader } = yield tslib_1.__await(messages_1_1.value);\n                yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(readRecordBatch(schema, message, loader))));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (messages_1_1 && !messages_1_1.done && (_a = messages_1.return)) yield tslib_1.__await(_a.call(messages_1));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var e_1, _a;\n    });\n}\nexport function* readRecordBatch(schema, message, loader) {\n    if (Message.isRecordBatch(message)) {\n        yield new RecordBatch(schema, message.length, loader.visitFields(schema.fields));\n    }\n    else if (Message.isDictionaryBatch(message)) {\n        const dictionaryId = message.id;\n        const dictionaries = loader.dictionaries;\n        const dictionaryField = schema.dictionaries.get(dictionaryId);\n        const dictionaryDataType = dictionaryField.type.dictionary;\n        let dictionaryVector = Vector.create(loader.visit(dictionaryDataType));\n        if (message.isDelta && dictionaries.has(dictionaryId)) {\n            dictionaryVector = dictionaries.get(dictionaryId).concat(dictionaryVector);\n        }\n        dictionaries.set(dictionaryId, dictionaryVector);\n    }\n}\nexport class TypeDataLoader extends TypeVisitor {\n    constructor(nodes, buffers, dictionaries) {\n        super();\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n    visitFields(fields) { return fields.map((field) => this.visit(field.type)); }\n    visitNull(type) { return this.visitNullType(type); }\n    visitInt(type) { return this.visitFlatType(type); }\n    visitFloat(type) { return this.visitFlatType(type); }\n    visitBinary(type) { return this.visitFlatList(type); }\n    visitUtf8(type) { return this.visitFlatList(type); }\n    visitBool(type) { return this.visitBoolType(type); }\n    visitDecimal(type) { return this.visitFlatType(type); }\n    visitDate(type) { return this.visitFlatType(type); }\n    visitTime(type) { return this.visitFlatType(type); }\n    visitTimestamp(type) { return this.visitFlatType(type); }\n    visitInterval(type) { return this.visitFlatType(type); }\n    visitList(type) { return this.visitListType(type); }\n    visitStruct(type) { return this.visitNestedType(type); }\n    visitUnion(type) { return this.visitUnionType(type); }\n    visitFixedSizeBinary(type) { return this.visitFlatType(type); }\n    visitFixedSizeList(type) { return this.visitFixedSizeListType(type); }\n    visitMap(type) { return this.visitNestedType(type); }\n    visitDictionary(type) {\n        return new DictionaryData(type, this.dictionaries.get(type.id), this.visit(type.indices));\n    }\n    getFieldMetadata() { return this.nodes.next().value; }\n    getBufferMetadata() { return this.buffers.next().value; }\n    readNullBitmap(type, nullCount, buffer = this.getBufferMetadata()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    visitNullType(type, { length, nullCount } = this.getFieldMetadata()) {\n        return new FlatData(type, length, this.readNullBitmap(type, nullCount), new Uint8Array(0), 0, nullCount);\n    }\n    visitFlatType(type, { length, nullCount } = this.getFieldMetadata()) {\n        return new FlatData(type, length, this.readNullBitmap(type, nullCount), this.readData(type), 0, nullCount);\n    }\n    visitBoolType(type, { length, nullCount } = this.getFieldMetadata(), data) {\n        return new BoolData(type, length, this.readNullBitmap(type, nullCount), data || this.readData(type), 0, nullCount);\n    }\n    visitFlatList(type, { length, nullCount } = this.getFieldMetadata()) {\n        return new FlatListData(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type), 0, nullCount);\n    }\n    visitListType(type, { length, nullCount } = this.getFieldMetadata()) {\n        return new ListData(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0].type), 0, nullCount);\n    }\n    visitFixedSizeListType(type, { length, nullCount } = this.getFieldMetadata()) {\n        return new SingleNestedData(type, length, this.readNullBitmap(type, nullCount), this.visit(type.children[0].type), 0, nullCount);\n    }\n    visitNestedType(type, { length, nullCount } = this.getFieldMetadata()) {\n        return new NestedData(type, length, this.readNullBitmap(type, nullCount), this.visitFields(type.children), 0, nullCount);\n    }\n    visitUnionType(type, { length, nullCount } = this.getFieldMetadata()) {\n        return type.mode === UnionMode.Sparse ?\n            new SparseUnionData(type, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount) :\n            new DenseUnionData(type, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitFields(type.children), 0, nullCount);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { packBools } from '../../util/bit';\nimport * as IntUtil from '../../util/int';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata } from '../metadata';\nimport { Schema, Field, DataType, Dictionary, Null, Binary, Bool, Utf8, Decimal, Date_, Time, Timestamp, Interval, List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_, } from '../../type';\nimport { Int8, Uint8, Int16, Uint16, Int32, Uint32, Int64, Uint64, Float16, Float64, Float32, } from '../../type';\nvar Long = flatbuffers.Long;\nexport function* readJSON(json) {\n    const schema = schemaFromJSON(json['schema']);\n    const dictionaries = new Map();\n    for (const batch of (json['dictionaries'] || [])) {\n        const message = dictionaryBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(flattenDataSources(batch['data']['columns']), arrayIterator(message.nodes), arrayIterator(message.buffers), dictionaries)\n        };\n    }\n    for (const batch of (json['batches'] || [])) {\n        const message = recordBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(flattenDataSources(batch['columns']), arrayIterator(message.nodes), arrayIterator(message.buffers), dictionaries)\n        };\n    }\n}\nfunction* arrayIterator(arr) { yield* arr; }\nfunction flattenDataSources(xs) {\n    return (xs || []).reduce((buffers, column) => [\n        ...buffers,\n        ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n        ...(column['OFFSET'] && [column['OFFSET']] || []),\n        ...(column['DATA'] && [column['DATA']] || []),\n        ...flattenDataSources(column['children'])\n    ], []);\n}\nconst utf8Encoder = new TextEncoder('utf-8');\nexport class JSONDataLoader extends TypeDataLoader {\n    constructor(sources, nodes, buffers, dictionaries) {\n        super(nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    readNullBitmap(_type, nullCount, { offset } = this.getBufferMetadata()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    readOffsets(_type, { offset } = this.getBufferMetadata()) {\n        return new Int32Array(this.sources[offset]);\n    }\n    readTypeIds(_type, { offset } = this.getBufferMetadata()) {\n        return new Int8Array(this.sources[offset]);\n    }\n    readData(type, { offset } = this.getBufferMetadata()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type) === true) {\n            return new Uint8Array(int64DataFromJSON(sources[offset]));\n        }\n        else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return new Uint8Array(int64DataFromJSON(sources[offset]));\n        }\n        else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return new Uint8Array(int64DataFromJSON(sources[offset]));\n        }\n        else if (DataType.isDecimal(type) === true) {\n            return new Uint8Array(decimalDataFromJSON(sources[offset]));\n        }\n        else if (DataType.isBinary(type) === true || DataType.isFixedSizeBinary(type) === true) {\n            return new Uint8Array(binaryDataFromJSON(sources[offset]));\n        }\n        else if (DataType.isBool(type) === true) {\n            return new Uint8Array(packBools(sources[offset]).buffer);\n        }\n        else if (DataType.isUtf8(type) === true) {\n            return utf8Encoder.encode(sources[offset].join(''));\n        }\n        else {\n            return toTypedArray(type.ArrayType, sources[offset].map((x) => +x));\n        }\n    }\n}\nfunction int64DataFromJSON(values) {\n    const data = new Uint32Array(values.length * 2);\n    for (let i = -1, n = values.length; ++i < n;) {\n        // Force all values (even numbers) to be parsed as strings since\n        // pulling out high and low bits seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        IntUtil.Int64.fromString(values[i].toString(), new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n    return data.buffer;\n}\nfunction decimalDataFromJSON(values) {\n    const data = new Uint32Array(values.length * 4);\n    for (let i = -1, n = values.length; ++i < n;) {\n        IntUtil.Int128.fromString(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n    }\n    return data.buffer;\n}\nfunction binaryDataFromJSON(values) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data.buffer;\n}\nimport * as Schema_ from '../../fb/Schema';\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nvar TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nvar Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nvar IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nvar MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport { toTypedArray } from '../../data';\nfunction schemaFromJSON(s) {\n    const dictionaryFields = new Map();\n    return new Schema(fieldsFromJSON(s['fields'], dictionaryFields), customMetadata(s['customMetadata']), MetadataVersion.V4, dictionaryFields);\n}\nfunction recordBatchFromJSON(b) {\n    return new RecordBatchMetadata(MetadataVersion.V4, b['count'], fieldNodesFromJSON(b['columns']), buffersFromJSON(b['columns']));\n}\nfunction dictionaryBatchFromJSON(b) {\n    return new DictionaryBatch(MetadataVersion.V4, recordBatchFromJSON(b['data']), b['id'], b['isDelta']);\n}\nfunction fieldsFromJSON(fs, dictionaryFields) {\n    return (fs || [])\n        .map((f) => fieldFromJSON(f, dictionaryFields))\n        .filter((f) => f != null);\n}\nfunction fieldNodesFromJSON(xs) {\n    return (xs || []).reduce((fieldNodes, column) => [\n        ...fieldNodes,\n        new FieldMetadata(new Long(column['count'], 0), new Long(nullCountFromJSON(column['VALIDITY']), 0)),\n        ...fieldNodesFromJSON(column['children'])\n    ], []);\n}\nfunction buffersFromJSON(xs, buffers = []) {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));\n        column['OFFSET'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));\n        column['DATA'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\nfunction nullCountFromJSON(validity) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\nfunction fieldFromJSON(f, dictionaryFields) {\n    let name = f['name'];\n    let field;\n    let nullable = f['nullable'];\n    let dataType;\n    let id, keysMeta, dictMeta;\n    let metadata = customMetadata(f['customMetadata']);\n    if (!dictionaryFields || !(dictMeta = f['dictionary'])) {\n        if (dataType = typeFromJSON(f['type'], fieldsFromJSON(f['children'], dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    }\n    else if (dataType = dictionaryFields.has(id = dictMeta['id'])\n        ? dictionaryFields.get(id).type.dictionary\n        : typeFromJSON(f['type'], fieldsFromJSON(f['children'], null))) {\n        dataType = new Dictionary(dataType, \n        // a dictionary index defaults to signed 32 bit int if unspecified\n        (keysMeta = dictMeta['indexType']) ? intFromJSON(keysMeta) : new Int32(), id, dictMeta['isOrdered']);\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field);\n    }\n    return field || null;\n}\nfunction customMetadata(metadata) {\n    return new Map(Object.entries(metadata || {}));\n}\nconst namesToTypeMap = {\n    'NONE': Type.NONE,\n    'null': Type.Null,\n    'int': Type.Int,\n    'floatingpoint': Type.FloatingPoint,\n    'binary': Type.Binary,\n    'bool': Type.Bool,\n    'utf8': Type.Utf8,\n    'decimal': Type.Decimal,\n    'date': Type.Date,\n    'time': Type.Time,\n    'timestamp': Type.Timestamp,\n    'interval': Type.Interval,\n    'list': Type.List,\n    'struct': Type.Struct_,\n    'union': Type.Union,\n    'fixedsizebinary': Type.FixedSizeBinary,\n    'fixedsizelist': Type.FixedSizeList,\n    'map': Type.Map,\n};\nfunction typeFromJSON(t, children) {\n    switch (namesToTypeMap[t['name']]) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromJSON(t);\n        case Type.Int: return intFromJSON(t);\n        case Type.FloatingPoint: return floatingPointFromJSON(t);\n        case Type.Binary: return binaryFromJSON(t);\n        case Type.Utf8: return utf8FromJSON(t);\n        case Type.Bool: return boolFromJSON(t);\n        case Type.Decimal: return decimalFromJSON(t);\n        case Type.Date: return dateFromJSON(t);\n        case Type.Time: return timeFromJSON(t);\n        case Type.Timestamp: return timestampFromJSON(t);\n        case Type.Interval: return intervalFromJSON(t);\n        case Type.List: return listFromJSON(t, children || []);\n        case Type.Struct_: return structFromJSON(t, children || []);\n        case Type.Union: return unionFromJSON(t, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromJSON(t);\n        case Type.FixedSizeList: return fixedSizeListFromJSON(t, children || []);\n        case Type.Map: return mapFromJSON(t, children || []);\n    }\n    throw new Error(`Unrecognized type ${t['name']}`);\n}\nfunction nullFromJSON(_type) { return new Null(); }\nfunction intFromJSON(_type) {\n    switch (_type['bitWidth']) {\n        case 8: return _type['isSigned'] ? new Int8() : new Uint8();\n        case 16: return _type['isSigned'] ? new Int16() : new Uint16();\n        case 32: return _type['isSigned'] ? new Int32() : new Uint32();\n        case 64: return _type['isSigned'] ? new Int64() : new Uint64();\n    }\n    return null;\n}\nfunction floatingPointFromJSON(_type) {\n    switch (Precision[_type['precision']]) {\n        case Precision.HALF: return new Float16();\n        case Precision.SINGLE: return new Float32();\n        case Precision.DOUBLE: return new Float64();\n    }\n    return null;\n}\nfunction binaryFromJSON(_type) { return new Binary(); }\nfunction utf8FromJSON(_type) { return new Utf8(); }\nfunction boolFromJSON(_type) { return new Bool(); }\nfunction decimalFromJSON(_type) { return new Decimal(_type['scale'], _type['precision']); }\nfunction dateFromJSON(_type) { return new Date_(DateUnit[_type['unit']]); }\nfunction timeFromJSON(_type) { return new Time(TimeUnit[_type['unit']], _type['bitWidth']); }\nfunction timestampFromJSON(_type) { return new Timestamp(TimeUnit[_type['unit']], _type['timezone']); }\nfunction intervalFromJSON(_type) { return new Interval(IntervalUnit[_type['unit']]); }\nfunction listFromJSON(_type, children) { return new List(children); }\nfunction structFromJSON(_type, children) { return new Struct(children); }\nfunction unionFromJSON(_type, children) { return new Union(_type['mode'], (_type['typeIdsArray'] || []), children); }\nfunction fixedSizeBinaryFromJSON(_type) { return new FixedSizeBinary(_type['byteWidth']); }\nfunction fixedSizeListFromJSON(_type, children) { return new FixedSizeList(_type['listSize'], children); }\nfunction mapFromJSON(_type, children) { return new Map_(_type['keysSorted'], children); }\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport const PADDING = 4;\nexport const MAGIC_STR = 'ARROW1';\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\nexport function checkForMagicArrowString(buffer, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isValidArrowFile(bb) {\n    let fileLength = bb.capacity(), footerLength, lengthOffset;\n    if ((fileLength < magicX2AndPadding /*                     Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        ((footerLength = bb.readInt32(lengthOffset = fileLength - magicAndPadding)) < 1 &&\n            (footerLength + lengthOffset > fileLength))) {\n        return false;\n    }\n    return true;\n}\nexport const magicLength = MAGIC.length;\nexport const magicAndPadding = magicLength + PADDING;\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy9tYWdpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFLckIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUN6QixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDO0FBQ2xDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFdEQsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7SUFDL0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELE1BQU0sbUNBQW1DLE1BQWtCLEVBQUUsS0FBSyxHQUFHLENBQUM7SUFDbEUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDMUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztJQUNMLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxNQUFNLDJCQUEyQixFQUFjO0lBQzNDLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxZQUFvQixFQUFFLFlBQW9CLENBQUM7SUFDM0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLENBQUMsZ0RBQWdELENBQUM7UUFDakYsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxtREFBbUQsQ0FBQztRQUM5RixDQUFDLENBQUMsd0JBQXdCLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLFVBQVUsR0FBRyxXQUFXLENBQUMsQ0FBQyw0QkFBNEIsQ0FBQztRQUM5RixDQUNBLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLFVBQVUsR0FBRyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDOUUsQ0FBQyxZQUFZLEdBQUcsWUFBWSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDO0FBQ3JELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLFdBQVcsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDIiwiZmlsZSI6ImlwYy9tYWdpYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBmbGF0YnVmZmVycyB9IGZyb20gJ2ZsYXRidWZmZXJzJztcbmltcG9ydCBCeXRlQnVmZmVyID0gZmxhdGJ1ZmZlcnMuQnl0ZUJ1ZmZlcjtcblxuZXhwb3J0IGNvbnN0IFBBRERJTkcgPSA0O1xuZXhwb3J0IGNvbnN0IE1BR0lDX1NUUiA9ICdBUlJPVzEnO1xuZXhwb3J0IGNvbnN0IE1BR0lDID0gbmV3IFVpbnQ4QXJyYXkoTUFHSUNfU1RSLmxlbmd0aCk7XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgTUFHSUNfU1RSLmxlbmd0aDsgaSArPSAxIHwgMCkge1xuICAgIE1BR0lDW2ldID0gTUFHSUNfU1RSLmNoYXJDb2RlQXQoaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0Zvck1hZ2ljQXJyb3dTdHJpbmcoYnVmZmVyOiBVaW50OEFycmF5LCBpbmRleCA9IDApIHtcbiAgICBmb3IgKGxldCBpID0gLTEsIG4gPSBNQUdJQy5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgIGlmIChNQUdJQ1tpXSAhPT0gYnVmZmVyW2luZGV4ICsgaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRBcnJvd0ZpbGUoYmI6IEJ5dGVCdWZmZXIpIHtcbiAgICBsZXQgZmlsZUxlbmd0aCA9IGJiLmNhcGFjaXR5KCksIGZvb3Rlckxlbmd0aDogbnVtYmVyLCBsZW5ndGhPZmZzZXQ6IG51bWJlcjtcbiAgICBpZiAoKGZpbGVMZW5ndGggPCBtYWdpY1gyQW5kUGFkZGluZyAvKiAgICAgICAgICAgICAgICAgICAgIEFycm93IGJ1ZmZlciB0b28gc21hbGwgKi8pIHx8XG4gICAgICAgICghY2hlY2tGb3JNYWdpY0Fycm93U3RyaW5nKGJiLmJ5dGVzKCksIDApIC8qICAgICAgICAgICAgICAgICAgICAgICAgTWlzc2luZyBtYWdpYyBzdGFydCAgICAqLykgfHxcbiAgICAgICAgKCFjaGVja0Zvck1hZ2ljQXJyb3dTdHJpbmcoYmIuYnl0ZXMoKSwgZmlsZUxlbmd0aCAtIG1hZ2ljTGVuZ3RoKSAvKiBNaXNzaW5nIG1hZ2ljIGVuZCAgICAgICovKSB8fFxuICAgICAgICAoLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW52YWxpZCBmb290ZXIgbGVuZ3RoICAqL1xuICAgICAgICAoZm9vdGVyTGVuZ3RoID0gYmIucmVhZEludDMyKGxlbmd0aE9mZnNldCA9IGZpbGVMZW5ndGggLSBtYWdpY0FuZFBhZGRpbmcpKSA8IDEgJiZcbiAgICAgICAgKGZvb3Rlckxlbmd0aCArIGxlbmd0aE9mZnNldCA+IGZpbGVMZW5ndGgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgY29uc3QgbWFnaWNMZW5ndGggPSBNQUdJQy5sZW5ndGg7XG5leHBvcnQgY29uc3QgbWFnaWNBbmRQYWRkaW5nID0gbWFnaWNMZW5ndGggKyBQQURESU5HO1xuZXhwb3J0IGNvbnN0IG1hZ2ljWDJBbmRQYWRkaW5nID0gbWFnaWNMZW5ndGggKiAyICsgUEFERElORztcbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { flatbuffers } from 'flatbuffers';\nimport * as Message_ from '../../fb/Message';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport { PADDING, isValidArrowFile, checkForMagicArrowString } from '../magic';\nexport function fromReadableStream(stream) {\n    return tslib_1.__asyncGenerator(this, arguments, function* fromReadableStream_1() {\n        let bb;\n        let bytesRead = 0, bytes = new Uint8Array(0);\n        let messageLength = 0, message = null;\n        try {\n            for (var _a = tslib_1.__asyncValues(stream), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {\n                let chunk = yield tslib_1.__await(_b.value);\n                const grown = new Uint8Array(bytes.byteLength + chunk.length);\n                if (typeof chunk !== 'string') {\n                    grown.set(bytes, 0) || grown.set(chunk, bytes.byteLength);\n                }\n                else {\n                    for (let i = -1, j = bytes.byteLength, n = chunk.length; ++i < n;) {\n                        grown[i + j] = chunk.charCodeAt(i);\n                    }\n                }\n                bytes = grown;\n                // If we're reading in an Arrow File, just concatenate the bytes until\n                // the file is fully read in\n                if (checkForMagicArrowString(bytes)) {\n                    if (!isValidArrowFile(new ByteBuffer(bytes))) {\n                        continue;\n                    }\n                    return yield bytes;\n                }\n                if (messageLength <= 0) {\n                    messageLength = new DataView(bytes.buffer).getInt32(0, true);\n                }\n                while (messageLength < bytes.byteLength) {\n                    if (!message) {\n                        (bb = new ByteBuffer(bytes)).setPosition(4);\n                        if (message = _Message.getRootAsMessage(bb)) {\n                            messageLength += message.bodyLength().low;\n                            continue;\n                        }\n                        throw new Error(`Invalid message at position ${bytesRead}`);\n                    }\n                    bytesRead += messageLength + PADDING;\n                    yield bytes.subarray(0, messageLength + PADDING);\n                    bytes = bytes.subarray(messageLength + PADDING);\n                    messageLength = bytes.byteLength <= 0 ? 0 :\n                        new DataView(bytes.buffer).getInt32(bytes.byteOffset, true);\n                    message = null;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var e_1, _c;\n    });\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7d0JBQ1gsQ0FBQyxFQUFFLEdBQUcsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzVDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUMxQyxhQUFhLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQzs0QkFDMUMsUUFBUSxDQUFDO3dCQUNiLENBQUM7d0JBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsU0FBUyxFQUFFLENBQUMsQ0FBQztvQkFDaEUsQ0FBQztvQkFDRCxTQUFTLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQztvQkFDckMsTUFBTSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxhQUFhLEdBQUcsT0FBTyxDQUFDLENBQUM7b0JBQ2pELEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsQ0FBQztvQkFDaEQsYUFBYSxHQUFHLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDdkMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUNoRSxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUNuQixDQUFDO2FBQ0o7Ozs7Ozs7Ozs7SUFDTCxDQUFDO0NBQUEiLCJmaWxlIjoiaXBjL3JlYWRlci9ub2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IGZsYXRidWZmZXJzIH0gZnJvbSAnZmxhdGJ1ZmZlcnMnO1xuaW1wb3J0ICogYXMgTWVzc2FnZV8gZnJvbSAnLi4vLi4vZmIvTWVzc2FnZSc7XG5pbXBvcnQgQnl0ZUJ1ZmZlciA9IGZsYXRidWZmZXJzLkJ5dGVCdWZmZXI7XG5pbXBvcnQgX01lc3NhZ2UgPSBNZXNzYWdlXy5vcmcuYXBhY2hlLmFycm93LmZsYXRidWYuTWVzc2FnZTtcbmltcG9ydCB7IFBBRERJTkcsIGlzVmFsaWRBcnJvd0ZpbGUsIGNoZWNrRm9yTWFnaWNBcnJvd1N0cmluZyB9IGZyb20gJy4uL21hZ2ljJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiBmcm9tUmVhZGFibGVTdHJlYW0oc3RyZWFtOiBOb2RlSlMuUmVhZGFibGVTdHJlYW0pIHtcblxuICAgIGxldCBiYjogQnl0ZUJ1ZmZlcjtcbiAgICBsZXQgYnl0ZXNSZWFkID0gMCwgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgwKTtcbiAgICBsZXQgbWVzc2FnZUxlbmd0aCA9IDAsIG1lc3NhZ2U6IF9NZXNzYWdlIHwgbnVsbCA9IG51bGw7XG5cbiAgICBmb3IgYXdhaXQgKGxldCBjaHVuayBvZiAoc3RyZWFtIGFzIGFueSBhcyBBc3luY0l0ZXJhYmxlPFVpbnQ4QXJyYXkgfCBCdWZmZXIgfCBzdHJpbmc+KSkge1xuXG4gICAgICAgIGNvbnN0IGdyb3duID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMuYnl0ZUxlbmd0aCArIGNodW5rLmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGdyb3duLnNldChieXRlcywgMCkgfHwgZ3Jvd24uc2V0KGNodW5rLCBieXRlcy5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAtMSwgaiA9IGJ5dGVzLmJ5dGVMZW5ndGgsIG4gPSBjaHVuay5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgICAgICAgICAgZ3Jvd25baSArIGpdID0gY2h1bmsuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJ5dGVzID0gZ3Jvd247XG5cbiAgICAgICAgLy8gSWYgd2UncmUgcmVhZGluZyBpbiBhbiBBcnJvdyBGaWxlLCBqdXN0IGNvbmNhdGVuYXRlIHRoZSBieXRlcyB1bnRpbFxuICAgICAgICAvLyB0aGUgZmlsZSBpcyBmdWxseSByZWFkIGluXG4gICAgICAgIGlmIChjaGVja0Zvck1hZ2ljQXJyb3dTdHJpbmcoYnl0ZXMpKSB7XG4gICAgICAgICAgICBpZiAoIWlzVmFsaWRBcnJvd0ZpbGUobmV3IEJ5dGVCdWZmZXIoYnl0ZXMpKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIGJ5dGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lc3NhZ2VMZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgbWVzc2FnZUxlbmd0aCA9IG5ldyBEYXRhVmlldyhieXRlcy5idWZmZXIpLmdldEludDMyKDAsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKG1lc3NhZ2VMZW5ndGggPCBieXRlcy5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAoYmIgPSBuZXcgQnl0ZUJ1ZmZlcihieXRlcykpLnNldFBvc2l0aW9uKDQpO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlID0gX01lc3NhZ2UuZ2V0Um9vdEFzTWVzc2FnZShiYikpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUxlbmd0aCArPSBtZXNzYWdlLmJvZHlMZW5ndGgoKS5sb3c7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbWVzc2FnZSBhdCBwb3NpdGlvbiAke2J5dGVzUmVhZH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ5dGVzUmVhZCArPSBtZXNzYWdlTGVuZ3RoICsgUEFERElORztcbiAgICAgICAgICAgIHlpZWxkIGJ5dGVzLnN1YmFycmF5KDAsIG1lc3NhZ2VMZW5ndGggKyBQQURESU5HKTtcbiAgICAgICAgICAgIGJ5dGVzID0gYnl0ZXMuc3ViYXJyYXkobWVzc2FnZUxlbmd0aCArIFBBRERJTkcpO1xuICAgICAgICAgICAgbWVzc2FnZUxlbmd0aCA9IGJ5dGVzLmJ5dGVMZW5ndGggPD0gMCA/IDAgOlxuICAgICAgICAgICAgICAgIG5ldyBEYXRhVmlldyhieXRlcy5idWZmZXIpLmdldEludDMyKGJ5dGVzLmJ5dGVPZmZzZXQsIHRydWUpO1xuICAgICAgICAgICAgbWVzc2FnZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Footer {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Footer}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Footer=} obj\n                     * @returns {Footer}\n                     */\n                    static getRootAsFooter(bb, obj) {\n                        return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n                     */\n                    version() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.Schema=} obj\n                     * @returns {org.apache.arrow.flatbuf.Schema|null}\n                     */\n                    schema(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Block=} obj\n                     * @returns {org.apache.arrow.flatbuf.Block}\n                     */\n                    dictionaries(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    dictionariesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Block=} obj\n                     * @returns {org.apache.arrow.flatbuf.Block}\n                     */\n                    recordBatches(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    recordBatchesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFooter(builder) {\n                        builder.startObject(4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n                     */\n                    static addVersion(builder, version) {\n                        builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} schemaOffset\n                     */\n                    static addSchema(builder, schemaOffset) {\n                        builder.addFieldOffset(1, schemaOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dictionariesOffset\n                     */\n                    static addDictionaries(builder, dictionariesOffset) {\n                        builder.addFieldOffset(2, dictionariesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startDictionariesVector(builder, numElems) {\n                        builder.startVector(24, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} recordBatchesOffset\n                     */\n                    static addRecordBatches(builder, recordBatchesOffset) {\n                        builder.addFieldOffset(3, recordBatchesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startRecordBatchesVector(builder, numElems) {\n                        builder.startVector(24, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFooter(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishFooterBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Footer = Footer;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Block {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Block}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * Index to the start of the RecordBlock (note this is past the Message header)\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    offset() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * Length of the metadata\n                     *\n                     * @returns {number}\n                     */\n                    metaDataLength() {\n                        return this.bb.readInt32(this.bb_pos + 8);\n                    }\n                    /**\n                     * Length of the data (this is aligned so there can be a gap between this and\n                     * the metatdata).\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    bodyLength() {\n                        return this.bb.readInt64(this.bb_pos + 16);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} offset\n                     * @param {number} metaDataLength\n                     * @param {flatbuffers.Long} bodyLength\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createBlock(builder, offset, metaDataLength, bodyLength) {\n                        builder.prep(8, 24);\n                        builder.writeInt64(bodyLength);\n                        builder.pad(4);\n                        builder.writeInt32(metaDataLength);\n                        builder.writeInt64(offset);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.Block = Block;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { checkForMagicArrowString, PADDING, magicAndPadding, isValidArrowFile } from '../magic';\nimport { Message, Footer, FileBlock, RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata, } from '../metadata';\nimport { Schema, Field, Dictionary, Null, Binary, Bool, Utf8, Decimal, Date_, Time, Timestamp, Interval, List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_, } from '../../type';\nimport { Int8, Uint8, Int16, Uint16, Int32, Uint32, Int64, Uint64, Float16, Float64, Float32, } from '../../type';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nexport function* readBuffers(sources) {\n    let schema = null;\n    let dictionaries = new Map();\n    let readMessages = null;\n    if (ArrayBuffer.isView(sources) || typeof sources === 'string') {\n        sources = [sources];\n    }\n    for (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(bb, arrayIterator(message.nodes), arrayIterator(message.buffers), dictionaries)\n                };\n            }\n        }\n    }\n}\nexport function readBuffersAsync(sources) {\n    return tslib_1.__asyncGenerator(this, arguments, function* readBuffersAsync_1() {\n        let schema = null;\n        let dictionaries = new Map();\n        let readMessages = null;\n        try {\n            for (var sources_1 = tslib_1.__asyncValues(sources), sources_1_1; sources_1_1 = yield tslib_1.__await(sources_1.next()), !sources_1_1.done;) {\n                const source = yield tslib_1.__await(sources_1_1.value);\n                const bb = toByteBuffer(source);\n                if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n                    for (const message of readMessages(bb)) {\n                        yield {\n                            schema, message,\n                            loader: new BinaryDataLoader(bb, arrayIterator(message.nodes), arrayIterator(message.buffers), dictionaries)\n                        };\n                    }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (sources_1_1 && !sources_1_1.done && (_a = sources_1.return)) yield tslib_1.__await(_a.call(sources_1));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var e_1, _a;\n    });\n}\nexport class BinaryDataLoader extends TypeDataLoader {\n    constructor(bb, nodes, buffers, dictionaries) {\n        super(nodes, buffers, dictionaries);\n        this.bytes = bb.bytes();\n        this.messageOffset = bb.position();\n    }\n    readOffsets(type, buffer) { return this.readData(type, buffer); }\n    readTypeIds(type, buffer) { return this.readData(type, buffer); }\n    readData(_type, { length, offset } = this.getBufferMetadata()) {\n        return new Uint8Array(this.bytes.buffer, this.bytes.byteOffset + this.messageOffset + offset, length);\n    }\n}\nfunction* arrayIterator(arr) { yield* arr; }\nfunction toByteBuffer(bytes) {\n    let arr = bytes || new Uint8Array(0);\n    if (typeof bytes === 'string') {\n        arr = new Uint8Array(bytes.length);\n        for (let i = -1, n = bytes.length; ++i < n;) {\n            arr[i] = bytes.charCodeAt(i);\n        }\n        return new ByteBuffer(arr);\n    }\n    return new ByteBuffer(arr);\n}\nfunction readSchema(bb) {\n    let schema, readMessages, footer;\n    if (footer = readFileSchema(bb)) {\n        schema = footer.schema;\n        readMessages = readFileMessages(footer);\n    }\n    else if (schema = readStreamSchema(bb)) {\n        readMessages = readStreamMessages;\n    }\n    else {\n        throw new Error('Invalid Arrow buffer');\n    }\n    return { schema, readMessages };\n}\nfunction readStreamSchema(bb) {\n    if (!checkForMagicArrowString(bb.bytes(), 0)) {\n        for (const message of readMessages(bb)) {\n            if (Message.isSchema(message)) {\n                return message;\n            }\n        }\n    }\n    return null;\n}\nfunction* readStreamMessages(bb) {\n    for (const message of readMessages(bb)) {\n        if (Message.isRecordBatch(message)) {\n            yield message;\n        }\n        else if (Message.isDictionaryBatch(message)) {\n            yield message;\n        }\n        else {\n            continue;\n        }\n        // position the buffer after the body to read the next message\n        bb.setPosition(bb.position() + message.bodyLength);\n    }\n}\nfunction readFileSchema(bb) {\n    if (!isValidArrowFile(bb)) {\n        return null;\n    }\n    let fileLength = bb.capacity();\n    let lengthOffset = fileLength - magicAndPadding;\n    let footerLength = bb.readInt32(lengthOffset);\n    bb.setPosition(lengthOffset - footerLength);\n    return footerFromByteBuffer(bb);\n}\nfunction readFileMessages(footer) {\n    return function* (bb) {\n        let message;\n        for (let i = -1, batches = footer.dictionaryBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset);\n            if (message = readMessage(bb, bb.readInt32(bb.position()))) {\n                yield message;\n            }\n        }\n        for (let i = -1, batches = footer.recordBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset);\n            if (message = readMessage(bb, bb.readInt32(bb.position()))) {\n                yield message;\n            }\n        }\n    };\n}\nfunction* readMessages(bb) {\n    let length, message;\n    while (bb.position() < bb.capacity() &&\n        (length = bb.readInt32(bb.position())) > 0) {\n        if (message = readMessage(bb, length)) {\n            yield message;\n        }\n    }\n}\nfunction readMessage(bb, length) {\n    bb.setPosition(bb.position() + PADDING);\n    const message = messageFromByteBuffer(bb);\n    bb.setPosition(bb.position() + length);\n    return message;\n}\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nvar MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nvar MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nvar _Footer = File_.org.apache.arrow.flatbuf.Footer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nvar _Null = Schema_.org.apache.arrow.flatbuf.Null;\nvar _Int = Schema_.org.apache.arrow.flatbuf.Int;\nvar _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nvar _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nvar _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nvar _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nvar _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nvar _Date = Schema_.org.apache.arrow.flatbuf.Date;\nvar _Time = Schema_.org.apache.arrow.flatbuf.Time;\nvar _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nvar _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nvar _List = Schema_.org.apache.arrow.flatbuf.List;\nvar _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nvar _Union = Schema_.org.apache.arrow.flatbuf.Union;\nvar _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nvar _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nvar _Map = Schema_.org.apache.arrow.flatbuf.Map;\nfunction footerFromByteBuffer(bb) {\n    const dictionaryFields = new Map();\n    const f = _Footer.getRootAsFooter(bb), s = f.schema();\n    return new Footer(dictionaryBatchesFromFooter(f), recordBatchesFromFooter(f), new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), f.version(), dictionaryFields));\n}\nfunction messageFromByteBuffer(bb) {\n    const m = _Message.getRootAsMessage(bb), type = m.headerType(), version = m.version();\n    switch (type) {\n        case MessageHeader.Schema: return schemaFromMessage(version, m.header(new _Schema()), new Map());\n        case MessageHeader.RecordBatch: return recordBatchFromMessage(version, m, m.header(new _RecordBatch()));\n        case MessageHeader.DictionaryBatch: return dictionaryBatchFromMessage(version, m, m.header(new _DictionaryBatch()));\n    }\n    return null;\n    // throw new Error(`Unrecognized Message type '${type}'`);\n}\nfunction schemaFromMessage(version, s, dictionaryFields) {\n    return new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), version, dictionaryFields);\n}\nfunction recordBatchFromMessage(version, m, b) {\n    return new RecordBatchMetadata(version, b.length(), fieldNodesFromRecordBatch(b), buffersFromRecordBatch(b, version), m.bodyLength());\n}\nfunction dictionaryBatchFromMessage(version, m, d) {\n    return new DictionaryBatch(version, recordBatchFromMessage(version, m, d.data()), d.id(), d.isDelta());\n}\nfunction dictionaryBatchesFromFooter(f) {\n    const blocks = [];\n    for (let b, i = -1, n = f && f.dictionariesLength(); ++i < n;) {\n        if (b = f.dictionaries(i)) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\nfunction recordBatchesFromFooter(f) {\n    const blocks = [];\n    for (let b, i = -1, n = f && f.recordBatchesLength(); ++i < n;) {\n        if (b = f.recordBatches(i)) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\nfunction fieldsFromSchema(s, dictionaryFields) {\n    const fields = [];\n    for (let i = -1, c, n = s && s.fieldsLength(); ++i < n;) {\n        if (c = field(s.fields(i), dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\nfunction fieldsFromField(f, dictionaryFields) {\n    const fields = [];\n    for (let i = -1, c, n = f && f.childrenLength(); ++i < n;) {\n        if (c = field(f.children(i), dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\nfunction fieldNodesFromRecordBatch(b) {\n    const fieldNodes = [];\n    for (let i = -1, n = b.nodesLength(); ++i < n;) {\n        fieldNodes.push(fieldNodeFromRecordBatch(b.nodes(i)));\n    }\n    return fieldNodes;\n}\nfunction buffersFromRecordBatch(b, version) {\n    const buffers = [];\n    for (let i = -1, n = b.buffersLength(); ++i < n;) {\n        let buffer = b.buffers(i);\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page id field.\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        buffers.push(bufferFromRecordBatch(buffer));\n    }\n    return buffers;\n}\nfunction field(f, dictionaryFields) {\n    let name = f.name();\n    let field;\n    let nullable = f.nullable();\n    let metadata = customMetadata(f);\n    let dataType;\n    let keysMeta, id;\n    let dictMeta;\n    if (!dictionaryFields || !(dictMeta = f.dictionary())) {\n        if (dataType = typeFromField(f, fieldsFromField(f, dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    }\n    else if (dataType = dictionaryFields.has(id = dictMeta.id().low)\n        ? dictionaryFields.get(id).type.dictionary\n        : typeFromField(f, fieldsFromField(f, null))) {\n        dataType = new Dictionary(dataType, \n        // a dictionary index defaults to signed 32 bit int if unspecified\n        (keysMeta = dictMeta.indexType()) ? intFromField(keysMeta) : new Int32(), id, dictMeta.isOrdered());\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field);\n    }\n    return field || null;\n}\nfunction customMetadata(parent) {\n    const data = new Map();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value());\n            }\n        }\n    }\n    return data;\n}\nfunction fieldNodeFromRecordBatch(f) {\n    return new FieldMetadata(f.length(), f.nullCount());\n}\nfunction bufferFromRecordBatch(b) {\n    return new BufferMetadata(b.offset(), b.length());\n}\nfunction typeFromField(f, children) {\n    switch (f.typeType()) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromField(f.type(new _Null()));\n        case Type.Int: return intFromField(f.type(new _Int()));\n        case Type.FloatingPoint: return floatFromField(f.type(new _FloatingPoint()));\n        case Type.Binary: return binaryFromField(f.type(new _Binary()));\n        case Type.Utf8: return utf8FromField(f.type(new _Utf8()));\n        case Type.Bool: return boolFromField(f.type(new _Bool()));\n        case Type.Decimal: return decimalFromField(f.type(new _Decimal()));\n        case Type.Date: return dateFromField(f.type(new _Date()));\n        case Type.Time: return timeFromField(f.type(new _Time()));\n        case Type.Timestamp: return timestampFromField(f.type(new _Timestamp()));\n        case Type.Interval: return intervalFromField(f.type(new _Interval()));\n        case Type.List: return listFromField(f.type(new _List()), children || []);\n        case Type.Struct_: return structFromField(f.type(new _Struct()), children || []);\n        case Type.Union: return unionFromField(f.type(new _Union()), children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromField(f.type(new _FixedSizeBinary()));\n        case Type.FixedSizeList: return fixedSizeListFromField(f.type(new _FixedSizeList()), children || []);\n        case Type.Map: return mapFromField(f.type(new _Map()), children || []);\n    }\n    throw new Error(`Unrecognized type ${f.typeType()}`);\n}\nfunction nullFromField(_type) { return new Null(); }\nfunction intFromField(_type) {\n    switch (_type.bitWidth()) {\n        case 8: return _type.isSigned() ? new Int8() : new Uint8();\n        case 16: return _type.isSigned() ? new Int16() : new Uint16();\n        case 32: return _type.isSigned() ? new Int32() : new Uint32();\n        case 64: return _type.isSigned() ? new Int64() : new Uint64();\n    }\n    return null;\n}\nfunction floatFromField(_type) {\n    switch (_type.precision()) {\n        case Precision.HALF: return new Float16();\n        case Precision.SINGLE: return new Float32();\n        case Precision.DOUBLE: return new Float64();\n    }\n    return null;\n}\nfunction binaryFromField(_type) { return new Binary(); }\nfunction utf8FromField(_type) { return new Utf8(); }\nfunction boolFromField(_type) { return new Bool(); }\nfunction decimalFromField(_type) { return new Decimal(_type.scale(), _type.precision()); }\nfunction dateFromField(_type) { return new Date_(_type.unit()); }\nfunction timeFromField(_type) { return new Time(_type.unit(), _type.bitWidth()); }\nfunction timestampFromField(_type) { return new Timestamp(_type.unit(), _type.timezone()); }\nfunction intervalFromField(_type) { return new Interval(_type.unit()); }\nfunction listFromField(_type, children) { return new List(children); }\nfunction structFromField(_type, children) { return new Struct(children); }\nfunction unionFromField(_type, children) { return new Union(_type.mode(), (_type.typeIdsArray() || []), children); }\nfunction fixedSizeBinaryFromField(_type) { return new FixedSizeBinary(_type.byteWidth()); }\nfunction fixedSizeListFromField(_type, children) { return new FixedSizeList(_type.listSize(), children); }\nfunction mapFromField(_type, children) { return new Map_(_type.keysSorted(), children); }\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { readJSON } from './json';\nimport { fromReadableStream } from './node';\nimport { RecordBatch } from '../../recordbatch';\nimport { readBuffers, readBuffersAsync } from './binary';\nimport { readRecordBatches, readRecordBatchesAsync } from './vector';\nexport { readJSON, RecordBatch };\nexport { readBuffers, readBuffersAsync };\nexport { readRecordBatches, readRecordBatchesAsync };\nexport function* read(sources) {\n    let input = sources;\n    let messages;\n    if (typeof input === 'string') {\n        try {\n            input = JSON.parse(input);\n        }\n        catch (e) {\n            input = sources;\n        }\n    }\n    if (!input || typeof input !== 'object') {\n        messages = (typeof input === 'string') ? readBuffers([input]) : [];\n    }\n    else {\n        messages = (typeof input[Symbol.iterator] === 'function') ? readBuffers(input) : readJSON(input);\n    }\n    yield* readRecordBatches(messages);\n}\nexport function readAsync(sources) {\n    return tslib_1.__asyncGenerator(this, arguments, function* readAsync_1() {\n        try {\n            for (var _a = tslib_1.__asyncValues(readRecordBatchesAsync(readBuffersAsync(sources))), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {\n                let recordBatch = yield tslib_1.__await(_b.value);\n                yield recordBatch;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var e_1, _c;\n    });\n}\nexport function readStream(stream) {\n    return tslib_1.__asyncGenerator(this, arguments, function* readStream_1() {\n        try {\n            for (var _a = tslib_1.__asyncValues(readAsync(fromReadableStream(stream))), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {\n                const recordBatch = yield tslib_1.__await(_b.value);\n                yield recordBatch;\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        var e_2, _c;\n    });\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy9yZWFkZXIvYXJyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCOztBQUVyQixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUM1QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsc0JBQXNCLEVBQWtCLE1BQU0sVUFBVSxDQUFDO0FBSXJGLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLENBQUM7QUFDakMsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxzQkFBc0IsRUFBRSxDQUFDO0FBRXJELE1BQU0sU0FBUyxDQUFDLE1BQU0sT0FBaUU7SUFDbkYsSUFBSSxLQUFLLEdBQVEsT0FBTyxDQUFDO0lBQ3pCLElBQUksUUFBZ0YsQ0FBQztJQUNyRixFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQztZQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQUMsQ0FBQztRQUNsQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDdEMsUUFBUSxHQUFHLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN2RSxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixRQUFRLEdBQUcsQ0FBQyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JHLENBQUM7SUFDRCxLQUFLLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRUQsTUFBTSxvQkFBMkIsT0FBb0Q7OztZQUNqRixHQUFHLENBQUMsQ0FBMEIsSUFBQSxLQUFBLHNCQUFBLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUEsSUFBQTtnQkFBcEUsSUFBSSxXQUFXLGtDQUFBLENBQUE7Z0JBQ3RCLE1BQU0sV0FBVyxDQUFDO2FBQ3JCOzs7Ozs7Ozs7O0lBQ0wsQ0FBQztDQUFBO0FBRUQsTUFBTSxxQkFBNEIsTUFBNkI7OztZQUMzRCxHQUFHLENBQUMsQ0FBNEIsSUFBQSxLQUFBLHNCQUFBLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBLElBQUE7Z0JBQTFELE1BQU0sV0FBVyxrQ0FBQSxDQUFBO2dCQUN4QixNQUFNLFdBQTBCLENBQUM7YUFDcEM7Ozs7Ozs7Ozs7SUFDTCxDQUFDO0NBQUEiLCJmaWxlIjoiaXBjL3JlYWRlci9hcnJvdy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyByZWFkSlNPTiB9IGZyb20gJy4vanNvbic7XG5pbXBvcnQgeyBmcm9tUmVhZGFibGVTdHJlYW0gfSBmcm9tICcuL25vZGUnO1xuaW1wb3J0IHsgUmVjb3JkQmF0Y2ggfSBmcm9tICcuLi8uLi9yZWNvcmRiYXRjaCc7XG5pbXBvcnQgeyByZWFkQnVmZmVycywgcmVhZEJ1ZmZlcnNBc3luYyB9IGZyb20gJy4vYmluYXJ5JztcbmltcG9ydCB7IHJlYWRSZWNvcmRCYXRjaGVzLCByZWFkUmVjb3JkQmF0Y2hlc0FzeW5jLCBUeXBlRGF0YUxvYWRlciB9IGZyb20gJy4vdmVjdG9yJztcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gJy4uLy4uL3R5cGUnO1xuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gJy4uL21ldGFkYXRhJztcblxuZXhwb3J0IHsgcmVhZEpTT04sIFJlY29yZEJhdGNoIH07XG5leHBvcnQgeyByZWFkQnVmZmVycywgcmVhZEJ1ZmZlcnNBc3luYyB9O1xuZXhwb3J0IHsgcmVhZFJlY29yZEJhdGNoZXMsIHJlYWRSZWNvcmRCYXRjaGVzQXN5bmMgfTtcblxuZXhwb3J0IGZ1bmN0aW9uKiByZWFkKHNvdXJjZXM6IEl0ZXJhYmxlPFVpbnQ4QXJyYXkgfCBCdWZmZXIgfCBzdHJpbmc+IHwgb2JqZWN0IHwgc3RyaW5nKSB7XG4gICAgbGV0IGlucHV0OiBhbnkgPSBzb3VyY2VzO1xuICAgIGxldCBtZXNzYWdlczogSXRlcmFibGU8eyBzY2hlbWE6IFNjaGVtYSwgbWVzc2FnZTogTWVzc2FnZSwgbG9hZGVyOiBUeXBlRGF0YUxvYWRlciB9PjtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0cnkgeyBpbnB1dCA9IEpTT04ucGFyc2UoaW5wdXQpOyB9XG4gICAgICAgIGNhdGNoIChlKSB7IGlucHV0ID0gc291cmNlczsgfVxuICAgIH1cbiAgICBpZiAoIWlucHV0IHx8IHR5cGVvZiBpbnB1dCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgbWVzc2FnZXMgPSAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykgPyByZWFkQnVmZmVycyhbaW5wdXRdKSA6IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG1lc3NhZ2VzID0gKHR5cGVvZiBpbnB1dFtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nKSA/IHJlYWRCdWZmZXJzKGlucHV0KSA6IHJlYWRKU09OKGlucHV0KTtcbiAgICB9XG4gICAgeWllbGQqIHJlYWRSZWNvcmRCYXRjaGVzKG1lc3NhZ2VzKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiByZWFkQXN5bmMoc291cmNlczogQXN5bmNJdGVyYWJsZTxVaW50OEFycmF5IHwgQnVmZmVyIHwgc3RyaW5nPikge1xuICAgIGZvciBhd2FpdCAobGV0IHJlY29yZEJhdGNoIG9mIHJlYWRSZWNvcmRCYXRjaGVzQXN5bmMocmVhZEJ1ZmZlcnNBc3luYyhzb3VyY2VzKSkpIHtcbiAgICAgICAgeWllbGQgcmVjb3JkQmF0Y2g7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24qIHJlYWRTdHJlYW0oc3RyZWFtOiBOb2RlSlMuUmVhZGFibGVTdHJlYW0pIHtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IHJlY29yZEJhdGNoIG9mIHJlYWRBc3luYyhmcm9tUmVhZGFibGVTdHJlYW0oc3RyZWFtKSkpIHtcbiAgICAgICAgeWllbGQgcmVjb3JkQmF0Y2ggYXMgUmVjb3JkQmF0Y2g7XG4gICAgfVxufVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { serializeStream, serializeFile } from './binary';\nexport function writeTableBinary(table, stream = true) {\n    return concatBuffers(stream ? serializeStream(table) : serializeFile(table));\n}\nfunction concatBuffers(messages) {\n    let buffers = [], byteLength = 0;\n    for (const message of messages) {\n        buffers.push(message);\n        byteLength += message.byteLength;\n    }\n    const { buffer } = buffers.reduce(({ buffer, byteOffset }, bytes) => {\n        buffer.set(bytes, byteOffset);\n        return { buffer, byteOffset: byteOffset + bytes.byteLength };\n    }, { buffer: new Uint8Array(byteLength), byteOffset: 0 });\n    return buffer;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy93cml0ZXIvYXJyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBR3JCLE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTFELE1BQU0sMkJBQTJCLEtBQVksRUFBRSxNQUFNLEdBQUcsSUFBSTtJQUN4RCxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNqRixDQUFDO0FBRUQsdUJBQXVCLFFBQXVDO0lBRTFELElBQUksT0FBTyxHQUFHLEVBQUUsRUFBRSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRWpDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sT0FBTyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDN0IsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QixVQUFVLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNoRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM5QixNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDakUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTFELE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDbEIsQ0FBQyIsImZpbGUiOiJpcGMvd3JpdGVyL2Fycm93LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFRhYmxlIH0gZnJvbSAnLi4vLi4vdGFibGUnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3RyZWFtLCBzZXJpYWxpemVGaWxlIH0gZnJvbSAnLi9iaW5hcnknO1xuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVUYWJsZUJpbmFyeSh0YWJsZTogVGFibGUsIHN0cmVhbSA9IHRydWUpIHtcbiAgICByZXR1cm4gY29uY2F0QnVmZmVycyhzdHJlYW0gPyBzZXJpYWxpemVTdHJlYW0odGFibGUpIDogc2VyaWFsaXplRmlsZSh0YWJsZSkpO1xufVxuXG5mdW5jdGlvbiBjb25jYXRCdWZmZXJzKG1lc3NhZ2VzOiBJdGVyYWJsZTxVaW50OEFycmF5IHwgQnVmZmVyPikge1xuXG4gICAgbGV0IGJ1ZmZlcnMgPSBbXSwgYnl0ZUxlbmd0aCA9IDA7XG5cbiAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXMpIHtcbiAgICAgICAgYnVmZmVycy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICBieXRlTGVuZ3RoICs9IG1lc3NhZ2UuYnl0ZUxlbmd0aDtcbiAgICB9XG5cbiAgICBjb25zdCB7IGJ1ZmZlciB9ID0gYnVmZmVycy5yZWR1Y2UoKHsgYnVmZmVyLCBieXRlT2Zmc2V0IH0sIGJ5dGVzKSA9PiB7XG4gICAgICAgIGJ1ZmZlci5zZXQoYnl0ZXMsIGJ5dGVPZmZzZXQpO1xuICAgICAgICByZXR1cm4geyBidWZmZXIsIGJ5dGVPZmZzZXQ6IGJ5dGVPZmZzZXQgKyBieXRlcy5ieXRlTGVuZ3RoIH07XG4gICAgfSwgeyBidWZmZXI6IG5ldyBVaW50OEFycmF5KGJ5dGVMZW5ndGgpLCBieXRlT2Zmc2V0OiAwIH0pO1xuXG4gICAgcmV0dXJuIGJ1ZmZlcjtcbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { RecordBatch } from './recordbatch';\nimport { Col } from './predicate';\nimport { Schema, Field } from './type';\nimport { read, readAsync } from './ipc/reader/arrow';\nimport { writeTableBinary } from './ipc/writer/arrow';\nimport { PipeIterator } from './util/node';\nimport { isPromise, isAsyncIterable } from './util/compat';\nimport { DictionaryVector, IntVector } from './vector';\nimport { ChunkedView } from './vector/chunked';\nexport class Table {\n    constructor(...args) {\n        // List of inner Vectors, possibly spanning batches\n        this._columns = [];\n        let schema;\n        let batches;\n        if (args[0] instanceof Schema) {\n            schema = args[0];\n            batches = Array.isArray(args[1][0]) ? args[1][0] : args[1];\n        }\n        else if (args[0] instanceof RecordBatch) {\n            schema = (batches = args)[0].schema;\n        }\n        else {\n            schema = (batches = args[0])[0].schema;\n        }\n        this.schema = schema;\n        this.batches = batches;\n        this.batchesUnion = batches.length == 0 ?\n            new RecordBatch(schema, 0, []) :\n            batches.reduce((union, batch) => union.concat(batch));\n        this.length = this.batchesUnion.length;\n        this.numCols = this.batchesUnion.numCols;\n    }\n    static empty() { return new Table(new Schema([]), []); }\n    static from(sources) {\n        if (sources) {\n            let schema;\n            let recordBatches = [];\n            for (let recordBatch of read(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        }\n        return Table.empty();\n    }\n    static fromAsync(sources) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (isAsyncIterable(sources)) {\n                let schema;\n                let recordBatches = [];\n                try {\n                    for (var _a = tslib_1.__asyncValues(readAsync(sources)), _b; _b = yield _a.next(), !_b.done;) {\n                        let recordBatch = yield _b.value;\n                        schema = schema || recordBatch.schema;\n                        recordBatches.push(recordBatch);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_b && !_b.done && (_c = _a.return)) yield _c.call(_a);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                return new Table(schema || new Schema([]), recordBatches);\n            }\n            else if (isPromise(sources)) {\n                return Table.from(yield sources);\n            }\n            else if (sources) {\n                return Table.from(sources);\n            }\n            return Table.empty();\n            var e_1, _c;\n        });\n    }\n    static fromStruct(struct) {\n        const schema = new Schema(struct.type.children);\n        const chunks = struct.view instanceof ChunkedView ?\n            struct.view.chunkVectors :\n            [struct];\n        return new Table(chunks.map((chunk) => new RecordBatch(schema, chunk.length, chunk.view.childData)));\n    }\n    get(index) {\n        return this.batchesUnion.get(index);\n    }\n    getColumn(name) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    getColumnAt(index) {\n        return index < 0 || index >= this.numCols\n            ? null\n            : this._columns[index] || (this._columns[index] = this.batchesUnion.getChildAt(index));\n    }\n    getColumnIndex(name) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    [Symbol.iterator]() {\n        return this.batchesUnion[Symbol.iterator]();\n    }\n    filter(predicate) {\n        return new FilteredDataFrame(this.batches, predicate);\n    }\n    scan(next, bind) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) {\n                bind(batch);\n            }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    count() { return this.length; }\n    countBy(name) {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = count_by.vector.indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) {\n                    counts[key]++;\n                }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n    select(...columnNames) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n    toString(separator) {\n        let str = '';\n        for (const row of this.rowsToString(separator)) {\n            str += row + '\\n';\n        }\n        return str;\n    }\n    // @ts-ignore\n    serialize(encoding = 'binary', stream = true) {\n        return writeTableBinary(this, stream);\n    }\n    rowsToString(separator = ' | ') {\n        return new PipeIterator(tableRowsToString(this, separator), 'utf8');\n    }\n}\nclass FilteredDataFrame {\n    constructor(batches, predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    scan(next, bind) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) {\n                bind(batch);\n            }\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    count() {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    ++sum;\n                }\n            }\n        }\n        return sum;\n    }\n    filter(predicate) {\n        return new FilteredDataFrame(this.batches, this.predicate.and(predicate));\n    }\n    countBy(name) {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = count_by.vector.indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) {\n                    counts[key]++;\n                }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\nexport class CountByResult extends Table {\n    constructor(values, counts) {\n        super(new RecordBatch(new Schema([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]), counts.length, [values, counts]));\n    }\n    toJSON() {\n        const values = this.getColumnAt(0);\n        const counts = this.getColumnAt(1);\n        const result = {};\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\nfunction* tableRowsToString(table, separator = ' | ') {\n    let rowOffset = 0;\n    let firstValues = [];\n    let maxColumnWidths = [];\n    let iterators = [];\n    // Gather all the `rowsToString` iterators into a list before iterating,\n    // so that `maxColumnWidths` is filled with the maxWidth for each column\n    // across all RecordBatches.\n    for (const batch of table.batches) {\n        const iterator = batch.rowsToString(separator, rowOffset, maxColumnWidths);\n        const { done, value } = iterator.next();\n        if (!done) {\n            firstValues.push(value);\n            iterators.push(iterator);\n            rowOffset += batch.length;\n        }\n    }\n    for (const iterator of iterators) {\n        yield firstValues.shift();\n        yield* iterator;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as type_ from './type';\nimport * as data_ from './data';\nimport * as vector_ from './vector';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_node from './util/node';\nimport * as visitor_ from './visitor';\nimport * as view_ from './vector/view';\nimport * as predicate_ from './predicate';\nimport { Vector } from './vector';\nimport { RecordBatch } from './recordbatch';\nimport { Schema, Field, Type } from './type';\nimport { Table, CountByResult } from './table';\nimport { fromReadableStream } from './ipc/reader/node';\nimport { read, readAsync, readStream } from './ipc/reader/arrow';\nimport { serializeFile, serializeStream } from './ipc/writer/binary';\nexport { fromReadableStream };\nexport { read, readAsync, readStream };\nexport { serializeFile, serializeStream };\nexport { Table, CountByResult };\nexport { Field, Schema, RecordBatch, Vector, Type };\nexport var util;\n(function (util) {\n    util.Uint64 = util_int_.Uint64;\n    util.Int64 = util_int_.Int64;\n    util.Int128 = util_int_.Int128;\n    util.packBools = util_bit_.packBools;\n    util.PipeIterator = util_node.PipeIterator;\n    util.AsyncPipeIterator = util_node.AsyncPipeIterator;\n})(util || (util = {}));\nexport var data;\n(function (data) {\n    data.BaseData = data_.BaseData;\n    data.FlatData = data_.FlatData;\n    data.BoolData = data_.BoolData;\n    data.FlatListData = data_.FlatListData;\n    data.DictionaryData = data_.DictionaryData;\n    data.NestedData = data_.NestedData;\n    data.ListData = data_.ListData;\n    data.UnionData = data_.UnionData;\n    data.SparseUnionData = data_.SparseUnionData;\n    data.DenseUnionData = data_.DenseUnionData;\n    data.ChunkedData = data_.ChunkedData;\n})(data || (data = {}));\nexport var enum_;\n(function (enum_) {\n    enum_.Type = type_.ArrowType;\n    enum_.DateUnit = type_.DateUnit;\n    enum_.TimeUnit = type_.TimeUnit;\n    enum_.Precision = type_.Precision;\n    enum_.UnionMode = type_.UnionMode;\n    enum_.VectorType = type_.VectorType;\n    enum_.IntervalUnit = type_.IntervalUnit;\n    enum_.MessageHeader = type_.MessageHeader;\n    enum_.MetadataVersion = type_.MetadataVersion;\n})(enum_ || (enum_ = {}));\nexport var type;\n(function (type) {\n    type.Schema = type_.Schema;\n    type.Field = type_.Field;\n    type.Null = type_.Null;\n    type.Int = type_.Int;\n    type.Int8 = type_.Int8;\n    type.Int16 = type_.Int16;\n    type.Int32 = type_.Int32;\n    type.Int64 = type_.Int64;\n    type.Uint8 = type_.Uint8;\n    type.Uint16 = type_.Uint16;\n    type.Uint32 = type_.Uint32;\n    type.Uint64 = type_.Uint64;\n    type.Float = type_.Float;\n    type.Float16 = type_.Float16;\n    type.Float32 = type_.Float32;\n    type.Float64 = type_.Float64;\n    type.Binary = type_.Binary;\n    type.Utf8 = type_.Utf8;\n    type.Bool = type_.Bool;\n    type.Decimal = type_.Decimal;\n    type.Date_ = type_.Date_;\n    type.Time = type_.Time;\n    type.Timestamp = type_.Timestamp;\n    type.Interval = type_.Interval;\n    type.List = type_.List;\n    type.Struct = type_.Struct;\n    type.Union = type_.Union;\n    type.DenseUnion = type_.DenseUnion;\n    type.SparseUnion = type_.SparseUnion;\n    type.FixedSizeBinary = type_.FixedSizeBinary;\n    type.FixedSizeList = type_.FixedSizeList;\n    type.Map_ = type_.Map_;\n    type.Dictionary = type_.Dictionary;\n})(type || (type = {}));\nexport var vector;\n(function (vector) {\n    vector.Vector = vector_.Vector;\n    vector.NullVector = vector_.NullVector;\n    vector.BoolVector = vector_.BoolVector;\n    vector.IntVector = vector_.IntVector;\n    vector.FloatVector = vector_.FloatVector;\n    vector.DateVector = vector_.DateVector;\n    vector.DecimalVector = vector_.DecimalVector;\n    vector.TimeVector = vector_.TimeVector;\n    vector.TimestampVector = vector_.TimestampVector;\n    vector.IntervalVector = vector_.IntervalVector;\n    vector.BinaryVector = vector_.BinaryVector;\n    vector.FixedSizeBinaryVector = vector_.FixedSizeBinaryVector;\n    vector.Utf8Vector = vector_.Utf8Vector;\n    vector.ListVector = vector_.ListVector;\n    vector.FixedSizeListVector = vector_.FixedSizeListVector;\n    vector.MapVector = vector_.MapVector;\n    vector.StructVector = vector_.StructVector;\n    vector.UnionVector = vector_.UnionVector;\n    vector.DictionaryVector = vector_.DictionaryVector;\n})(vector || (vector = {}));\nexport var visitor;\n(function (visitor) {\n    visitor.TypeVisitor = visitor_.TypeVisitor;\n    visitor.VectorVisitor = visitor_.VectorVisitor;\n})(visitor || (visitor = {}));\nexport var view;\n(function (view) {\n    view.ChunkedView = view_.ChunkedView;\n    view.DictionaryView = view_.DictionaryView;\n    view.ListView = view_.ListView;\n    view.FixedSizeListView = view_.FixedSizeListView;\n    view.BinaryView = view_.BinaryView;\n    view.Utf8View = view_.Utf8View;\n    view.UnionView = view_.UnionView;\n    view.DenseUnionView = view_.DenseUnionView;\n    view.NestedView = view_.NestedView;\n    view.StructView = view_.StructView;\n    view.MapView = view_.MapView;\n    view.FlatView = view_.FlatView;\n    view.NullView = view_.NullView;\n    view.BoolView = view_.BoolView;\n    view.ValidityView = view_.ValidityView;\n    view.PrimitiveView = view_.PrimitiveView;\n    view.FixedSizeView = view_.FixedSizeView;\n    view.Float16View = view_.Float16View;\n    view.DateDayView = view_.DateDayView;\n    view.DateMillisecondView = view_.DateMillisecondView;\n    view.TimestampDayView = view_.TimestampDayView;\n    view.TimestampSecondView = view_.TimestampSecondView;\n    view.TimestampMillisecondView = view_.TimestampMillisecondView;\n    view.TimestampMicrosecondView = view_.TimestampMicrosecondView;\n    view.TimestampNanosecondView = view_.TimestampNanosecondView;\n    view.IntervalYearMonthView = view_.IntervalYearMonthView;\n    view.IntervalYearView = view_.IntervalYearView;\n    view.IntervalMonthView = view_.IntervalMonthView;\n})(view || (view = {}));\nexport var predicate;\n(function (predicate) {\n    predicate.col = predicate_.col;\n    predicate.lit = predicate_.lit;\n    predicate.custom = predicate_.custom;\n    predicate.Or = predicate_.Or;\n    predicate.Col = predicate_.Col;\n    predicate.And = predicate_.And;\n    predicate.Not = predicate_.Not;\n    predicate.GTeq = predicate_.GTeq;\n    predicate.LTeq = predicate_.LTeq;\n    predicate.Value = predicate_.Value;\n    predicate.Equals = predicate_.Equals;\n    predicate.Literal = predicate_.Literal;\n    predicate.Predicate = predicate_.Predicate;\n})(predicate || (predicate = {}));\n/* These exports are needed for the closure and uglify umd targets */\ntry {\n    let Arrow = eval('exports');\n    if (Arrow && typeof Arrow === 'object') {\n        // string indexers tell closure and uglify not to rename these properties\n        Arrow['data'] = data;\n        Arrow['type'] = type;\n        Arrow['util'] = util;\n        Arrow['view'] = view;\n        Arrow['enum_'] = enum_;\n        Arrow['vector'] = vector;\n        Arrow['visitor'] = visitor;\n        Arrow['predicate'] = predicate;\n        Arrow['read'] = read;\n        Arrow['readAsync'] = readAsync;\n        Arrow['readStream'] = readStream;\n        Arrow['fromReadableStream'] = fromReadableStream;\n        Arrow['serializeFile'] = serializeFile;\n        Arrow['serializeStream'] = serializeStream;\n        Arrow['Type'] = Type;\n        Arrow['Field'] = Field;\n        Arrow['Schema'] = Schema;\n        Arrow['Vector'] = Vector;\n        Arrow['RecordBatch'] = RecordBatch;\n        Arrow['Table'] = Table;\n        Arrow['CountByResult'] = CountByResult;\n    }\n}\ncatch (e) { }\n/* end umd exports */\n// closure compiler erases static properties/methods:\n// https://github.com/google/closure-compiler/issues/1776\n// set them via string indexers to save them from the mangler\nSchema['from'] = Schema.from;\nTable['from'] = Table.from;\nTable['fromAsync'] = Table.fromAsync;\nTable['fromStruct'] = Table.fromStruct;\nTable['empty'] = Table.empty;\nVector['create'] = Vector.create;\nRecordBatch['from'] = RecordBatch.from;\nutil_int_.Uint64['add'] = util_int_.Uint64.add;\nutil_int_.Uint64['multiply'] = util_int_.Uint64.multiply;\nutil_int_.Int64['add'] = util_int_.Int64.add;\nutil_int_.Int64['multiply'] = util_int_.Int64.multiply;\nutil_int_.Int64['fromString'] = util_int_.Int64.fromString;\nutil_int_.Int128['add'] = util_int_.Int128.add;\nutil_int_.Int128['multiply'] = util_int_.Int128.multiply;\nutil_int_.Int128['fromString'] = util_int_.Int128.fromString;\ndata_.ChunkedData['computeOffsets'] = data_.ChunkedData.computeOffsets;\ntype_.Type['NONE'] = type_.Type.NONE;\ntype_.Type['Null'] = type_.Type.Null;\ntype_.Type['Int'] = type_.Type.Int;\ntype_.Type['Float'] = type_.Type.Float;\ntype_.Type['Binary'] = type_.Type.Binary;\ntype_.Type['Utf8'] = type_.Type.Utf8;\ntype_.Type['Bool'] = type_.Type.Bool;\ntype_.Type['Decimal'] = type_.Type.Decimal;\ntype_.Type['Date'] = type_.Type.Date;\ntype_.Type['Time'] = type_.Type.Time;\ntype_.Type['Timestamp'] = type_.Type.Timestamp;\ntype_.Type['Interval'] = type_.Type.Interval;\ntype_.Type['List'] = type_.Type.List;\ntype_.Type['Struct'] = type_.Type.Struct;\ntype_.Type['Union'] = type_.Type.Union;\ntype_.Type['FixedSizeBinary'] = type_.Type.FixedSizeBinary;\ntype_.Type['FixedSizeList'] = type_.Type.FixedSizeList;\ntype_.Type['Map'] = type_.Type.Map;\ntype_.Type['Dictionary'] = type_.Type.Dictionary;\ntype_.Type['DenseUnion'] = type_.Type.DenseUnion;\ntype_.Type['SparseUnion'] = type_.Type.SparseUnion;\ntype_.DataType['isNull'] = type_.DataType.isNull;\ntype_.DataType['isInt'] = type_.DataType.isInt;\ntype_.DataType['isFloat'] = type_.DataType.isFloat;\ntype_.DataType['isBinary'] = type_.DataType.isBinary;\ntype_.DataType['isUtf8'] = type_.DataType.isUtf8;\ntype_.DataType['isBool'] = type_.DataType.isBool;\ntype_.DataType['isDecimal'] = type_.DataType.isDecimal;\ntype_.DataType['isDate'] = type_.DataType.isDate;\ntype_.DataType['isTime'] = type_.DataType.isTime;\ntype_.DataType['isTimestamp'] = type_.DataType.isTimestamp;\ntype_.DataType['isInterval'] = type_.DataType.isInterval;\ntype_.DataType['isList'] = type_.DataType.isList;\ntype_.DataType['isStruct'] = type_.DataType.isStruct;\ntype_.DataType['isUnion'] = type_.DataType.isUnion;\ntype_.DataType['isDenseUnion'] = type_.DataType.isDenseUnion;\ntype_.DataType['isSparseUnion'] = type_.DataType.isSparseUnion;\ntype_.DataType['isFixedSizeBinary'] = type_.DataType.isFixedSizeBinary;\ntype_.DataType['isFixedSizeList'] = type_.DataType.isFixedSizeList;\ntype_.DataType['isMap'] = type_.DataType.isMap;\ntype_.DataType['isDictionary'] = type_.DataType.isDictionary;\nvector_.BoolVector['from'] = vector_.BoolVector.from;\nvector_.IntVector['from'] = vector_.IntVector.from;\nvector_.FloatVector['from'] = vector_.FloatVector.from;\nvisitor_.TypeVisitor['visitTypeInline'] = visitor_.TypeVisitor.visitTypeInline;\nvisitor_.VectorVisitor['visitTypeInline'] = visitor_.VectorVisitor.visitTypeInline;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","/**\n * @ignore\n */\nexport function isPromise(x) {\n    return x != null && Object(x) === x && typeof x['then'] === 'function';\n}\n/**\n * @ignore\n */\nexport function isObservable(x) {\n    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';\n}\n/**\n * @ignore\n */\nexport function isArrayLike(x) {\n    return x != null && Object(x) === x && typeof x['length'] === 'number';\n}\n/**\n * @ignore\n */\nexport function isIterable(x) {\n    return x != null && Object(x) === x && typeof x[Symbol.iterator] !== 'undefined';\n}\n/**\n * @ignore\n */\nexport function isAsyncIterable(x) {\n    return x != null && Object(x) === x && typeof x[Symbol.asyncIterator] !== 'undefined';\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvY29tcGF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWVBOztHQUVHO0FBQ0gsTUFBTSxvQkFBb0IsQ0FBTTtJQUM1QixNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsQ0FBQztBQUMzRSxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLHVCQUF1QixDQUFNO0lBQy9CLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssVUFBVSxDQUFDO0FBQ2hGLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sc0JBQXNCLENBQU07SUFDOUIsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDM0UsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxxQkFBcUIsQ0FBTTtJQUM3QixNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxXQUFXLENBQUM7QUFDckYsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSwwQkFBMEIsQ0FBTTtJQUNsQyxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxXQUFXLENBQUM7QUFDMUYsQ0FBQyIsImZpbGUiOiJ1dGlsL2NvbXBhdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgU3Vic2NyaXB0aW9uIHtcbiAgICB1bnN1YnNjcmliZTogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZlcjxUPiB7XG4gICAgY2xvc2VkPzogYm9vbGVhbjtcbiAgICBuZXh0OiAodmFsdWU6IFQpID0+IHZvaWQ7XG4gICAgZXJyb3I6IChlcnI6IGFueSkgPT4gdm9pZDtcbiAgICBjb21wbGV0ZTogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZhYmxlPFQ+IHtcbiAgICBzdWJzY3JpYmU6IChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IFN1YnNjcmlwdGlvbjtcbn1cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UoeDogYW55KTogeCBpcyBQcm9taXNlTGlrZTxhbnk+IHtcbiAgICByZXR1cm4geCAhPSBudWxsICYmIE9iamVjdCh4KSA9PT0geCAmJiB0eXBlb2YgeFsndGhlbiddID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZSh4OiBhbnkpOiB4IGlzIE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHggIT0gbnVsbCAmJiBPYmplY3QoeCkgPT09IHggJiYgdHlwZW9mIHhbJ3N1YnNjcmliZSddID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHg6IGFueSk6IHggaXMgQXJyYXlMaWtlPGFueT4ge1xuICAgIHJldHVybiB4ICE9IG51bGwgJiYgT2JqZWN0KHgpID09PSB4ICYmIHR5cGVvZiB4WydsZW5ndGgnXSA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZSh4OiBhbnkpOiB4IGlzIEl0ZXJhYmxlPGFueT4ge1xuICAgIHJldHVybiB4ICE9IG51bGwgJiYgT2JqZWN0KHgpID09PSB4ICYmIHR5cGVvZiB4W1N5bWJvbC5pdGVyYXRvcl0gIT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZSh4OiBhbnkpOiB4IGlzIEFzeW5jSXRlcmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHggIT0gbnVsbCAmJiBPYmplY3QoeCkgPT09IHggJiYgdHlwZW9mIHhbU3ltYm9sLmFzeW5jSXRlcmF0b3JdICE9PSAndW5kZWZpbmVkJztcbn1cbiJdfQ==\n"]}